uint64_t *sub_20B0EA67C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9[2];
  int v10[92];

  sub_20B505FB0(a2);
  v9[0] = (uint64_t)"version";
  v9[1] = 7;
  v10[0] = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, v10);
  v6 = v10[0];
  sub_20B0E7B94((uint64_t)v9, a3);
  sub_20B0EA75C(a2, v9, v6);
  result = sub_20B0CDABC(v9);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a2 + 56) = v8 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
  return result;
}

void sub_20B0EA748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CDABC(&a9);
  _Unwind_Resume(a1);
}

void sub_20B0EA75C(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  float *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t j;
  float *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t k;
  float *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  float **v36;
  float **v37;
  float *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  float **v41;
  float **v42;
  float *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t m;
  float *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  __int128 *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  unsigned __int8 *v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  _QWORD v68[2];
  uint64_t v69;
  __int128 *v70;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "vertices";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B505FB0(a1);
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      v9 = *(float **)v7;
      LODWORD(v70) = *(_DWORD *)(v7 + 8);
      v69 = (uint64_t)v9;
      *(_QWORD *)&v67 = 3;
      *((_QWORD *)&v67 + 1) = &v69;
      sub_20B507CD8(a1, (float **)&v67);
      v7 += 12;
    }
    while (v7 != v8);
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(unsigned __int8 **)(v10 - 8);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 56) = v10 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v11 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "colors_type";
    *(_QWORD *)(a1 + 80) = 11;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B0EB028(a1, (_DWORD *)a2 + 8);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v12 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "colors";
    *(_QWORD *)(a1 + 80) = 6;
    if (!v12)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B505FB0(a1);
  v13 = a2[5];
  for (i = a2[6]; v13 != i; v13 += 12)
  {
    v15 = *(float **)v13;
    LODWORD(v70) = *(_DWORD *)(v13 + 8);
    v69 = (uint64_t)v15;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_20B507CD8(a1, (float **)&v67);
  }
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(unsigned __int8 **)(v16 - 8);
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 56) = v16 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v17 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "normals_type";
    *(_QWORD *)(a1 + 80) = 12;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B0EB028(a1, (_DWORD *)a2 + 18);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v18 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "normals";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v18)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B505FB0(a1);
  v19 = a2[10];
  for (j = a2[11]; v19 != j; v19 += 12)
  {
    v21 = *(float **)v19;
    LODWORD(v70) = *(_DWORD *)(v19 + 8);
    v69 = (uint64_t)v21;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_20B507CD8(a1, (float **)&v67);
  }
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(unsigned __int8 **)(v22 - 8);
  *(_QWORD *)(a1 + 40) = v23;
  *(_QWORD *)(a1 + 56) = v22 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v23 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "semantics_type";
    *(_QWORD *)(a1 + 80) = 14;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B0EB028(a1, (_DWORD *)a2 + 28);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v24 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "semantics";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v24)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v25 = a2[15];
  *(_QWORD *)&v67 = a2[16] - v25;
  *((_QWORD *)&v67 + 1) = v25;
  sub_20B50612C(a1, (size_t *)&v67);
  v26 = a2 + 19;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v27 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "materials_type", *(_QWORD *)(a1 + 80) = 14, v27))
  {
    sub_20B0EB028(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_20B0EB028(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  v28 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "materials";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v28)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_37:
  v29 = a2[20];
  *(_QWORD *)&v67 = a2[21] - v29;
  *((_QWORD *)&v67 + 1) = v29;
  sub_20B50612C(a1, (size_t *)&v67);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v30 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "faces";
    *(_QWORD *)(a1 + 80) = 5;
    if (!v30)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B505FB0(a1);
  v31 = a2[24];
  for (k = a2[25]; v31 != k; v31 += 12)
  {
    v33 = *(float **)v31;
    LODWORD(v70) = *(_DWORD *)(v31 + 8);
    v69 = (uint64_t)v33;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_20B507488(a1, (uint64_t)&v67);
  }
  v34 = *(_QWORD *)(a1 + 56);
  v35 = *(unsigned __int8 **)(v34 - 8);
  *(_QWORD *)(a1 + 40) = v35;
  *(_QWORD *)(a1 + 56) = v34 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v35 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "edges";
    *(_QWORD *)(a1 + 80) = 5;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B505FB0(a1);
  v36 = (float **)a2[28];
  v37 = (float **)a2[29];
  while (v36 != v37)
  {
    v38 = *v36++;
    v69 = (uint64_t)v38;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_20B507488(a1, (uint64_t)&v67);
  }
  v39 = *(_QWORD *)(a1 + 56);
  v40 = *(unsigned __int8 **)(v39 - 8);
  *(_QWORD *)(a1 + 40) = v40;
  *(_QWORD *)(a1 + 56) = v39 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v40 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_coords";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B505FB0(a1);
  v41 = (float **)a2[32];
  v42 = (float **)a2[33];
  while (v41 != v42)
  {
    v43 = *v41++;
    v69 = (uint64_t)v43;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_20B507CD8(a1, (float **)&v67);
  }
  v44 = *(_QWORD *)(a1 + 56);
  v45 = *(unsigned __int8 **)(v44 - 8);
  *(_QWORD *)(a1 + 40) = v45;
  *(_QWORD *)(a1 + 56) = v44 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v45 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_faces";
    *(_QWORD *)(a1 + 80) = 9;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B505FB0(a1);
  v46 = a2[36];
  for (m = a2[37]; v46 != m; v46 += 12)
  {
    v48 = *(float **)v46;
    LODWORD(v70) = *(_DWORD *)(v46 + 8);
    v69 = (uint64_t)v48;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_20B507488(a1, (uint64_t)&v67);
  }
  v49 = *(_QWORD *)(a1 + 56);
  v50 = *(unsigned __int8 **)(v49 - 8);
  *(_QWORD *)(a1 + 40) = v50;
  *(_QWORD *)(a1 + 56) = v49 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (a3 >= 2)
  {
    if (*v50 <= 1u)
    {
      *(_QWORD *)(a1 + 72) = "box";
      *(_QWORD *)(a1 + 80) = 3;
      *(_BYTE *)(a1 + 88) = 1;
    }
    if (!*((_BYTE *)a2 + 344))
    {
      LOBYTE(v67) = 0;
      *((_QWORD *)&v67 + 1) = 0;
      v58 = (unsigned __int8 *)sub_20B505B08(a1);
      v59 = *v58;
      *v58 = v67;
      LOBYTE(v67) = v59;
      v60 = *((_QWORD *)v58 + 1);
      *((_QWORD *)v58 + 1) = *((_QWORD *)&v67 + 1);
      *((_QWORD *)&v67 + 1) = v60;
      sub_20B416E08((uint64_t *)&v67 + 1, v59);
LABEL_91:
      if (a3 >= 4)
      {
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v64 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences_type";
          *(_QWORD *)(a1 + 80) = 16;
          if (!v64)
            *(_BYTE *)(a1 + 88) = 1;
        }
        sub_20B0EB028(a1, (_DWORD *)a2 + 87);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v65 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences";
          *(_QWORD *)(a1 + 80) = 11;
          if (!v65)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v66 = a2[44];
        *(_QWORD *)&v67 = (a2[45] - v66) >> 2;
        *((_QWORD *)&v67 + 1) = v66;
        sub_20B507CD8(a1, (float **)&v67);
      }
      return;
    }
    v51 = *(_DWORD *)(a1 + 8);
    sub_20B505FB0(a1);
    *(_QWORD *)&v67 = "version";
    *((_QWORD *)&v67 + 1) = 7;
    LODWORD(v68[0]) = 2;
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v52 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v52))
    {
      v53 = (__int128 *)(a2 + 40);
      sub_20B5069D0(a1, v68);
      if (v51 >= 1)
      {
LABEL_69:
        if (v51 == 2)
        {
          *(_QWORD *)&v67 = "min_version";
          *((_QWORD *)&v67 + 1) = 11;
          LODWORD(v68[0]) = 2;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v54 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "min_version";
            *(_QWORD *)(a1 + 80) = 11;
            if (!v54)
              *(_BYTE *)(a1 + 88) = 1;
          }
          sub_20B5069D0(a1, v68);
        }
        v67 = *v53;
        v68[0] = *((_QWORD *)v53 + 2);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v55 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "min";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v55)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v69 = 3;
        v70 = &v67;
        sub_20B507CD8(a1, (float **)&v69);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v56 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "max";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v56)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v57 = (unint64_t)&v67 | 0xC;
LABEL_89:
        v69 = 3;
        v70 = (__int128 *)v57;
        sub_20B507CD8(a1, (float **)&v69);
        v63 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v63 - 8);
        *(_QWORD *)(a1 + 56) = v63 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        goto LABEL_91;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 88) = 1;
      v53 = (__int128 *)(a2 + 40);
      sub_20B5069D0(a1, v68);
      if (v51 >= 1)
        goto LABEL_69;
    }
    v67 = *v53;
    v68[0] = *((_QWORD *)v53 + 2);
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v61 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "min";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v61)
        *(_BYTE *)(a1 + 88) = 1;
    }
    v69 = 3;
    v70 = &v67;
    sub_20B507CD8(a1, (float **)&v69);
    v57 = (unint64_t)&v67 | 0xC;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v62 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "max";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v62)
        *(_BYTE *)(a1 + 88) = 1;
    }
    goto LABEL_89;
  }
}

void sub_20B0EB010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B0EB028(uint64_t a1, _DWORD *a2)
{
  void *__p[2];
  char v4;
  _BYTE v5[24];
  int v6;
  char v7;
  char *v8;

  v6 = 0;
  sub_20B0E8A38((uint64_t)v5, a2);
  if (v6 == -1)
    sub_20AECFAB8();
  v8 = &v7;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v6])(__p, &v8, v5);
  if (v6 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v6])(&v8, v5);
  sub_20B506E98(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_20B0EB0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0EB100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0EB114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0EB128(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t k;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t m;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t n;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t ii;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unsigned __int8 v108;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v6, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *a2;
  v9 = a2[1];
  if (v9 != *a2)
  {
    do
    {
      if (v7)
      {
        v10 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v10, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v11 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v11 + 1;
      if (v11 != -1)
      {
        v12 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v12, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v13 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v13 + 1;
      if (v13 != -1)
      {
        v14 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v14, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v7 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v7;
      v8 += 12;
    }
    while (v8 != v9);
  }
  if (v7)
  {
    v15 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v15, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v16 + 1;
  if (v16 != -1)
  {
    v17 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v17, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v18 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v18;
  v19 = a2[5];
  for (i = a2[6]; v19 != i; v19 += 12)
  {
    if (v18)
    {
      v21 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v21, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v22 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v22 + 1;
    if (v22 != -1)
    {
      v23 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v23, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v24 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v24 + 1;
    if (v24 != -1)
    {
      v25 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v25, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v18 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v18;
  }
  if (v18)
  {
    v26 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v26, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v27 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v27 + 1;
  if (v27 != -1)
  {
    v28 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v28, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v29 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v29;
  v30 = a2[10];
  for (j = a2[11]; v30 != j; v30 += 12)
  {
    if (v29)
    {
      v32 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v32, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v33 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v33 + 1;
    if (v33 != -1)
    {
      v34 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v34, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v35 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v35 + 1;
    if (v35 != -1)
    {
      v36 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v36, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v29 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v29;
  }
  if (v29)
  {
    v37 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v37, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v38 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v38 + 1;
  if (v38 != -1)
  {
    v39 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v39, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v40 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v40;
  v42 = (unsigned __int8 *)a2[15];
  v41 = (unsigned __int8 *)a2[16];
  v43 = v41 - v42;
  if (v41 != v42)
  {
    do
    {
      sub_20B512EB0(a1, v42++);
      --v43;
    }
    while (v43);
    v40 = *(_QWORD *)(a1 + 40);
  }
  if (v40)
  {
    v44 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v44, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v45 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v45 + 1;
  if (v45 != -1)
  {
    v46 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v46, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v47 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v47;
  v49 = (unsigned __int8 *)a2[20];
  v48 = (unsigned __int8 *)a2[21];
  v50 = v48 - v49;
  if (v48 != v49)
  {
    do
    {
      sub_20B512EB0(a1, v49++);
      --v50;
    }
    while (v50);
    v47 = *(_QWORD *)(a1 + 40);
  }
  if (v47)
  {
    v51 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v51, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v52 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v52;
  v53 = a2[24];
  for (k = a2[25]; v53 != k; v53 += 12)
  {
    if (v52)
    {
      v63 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v63, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v64 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v64 + 1;
    if (v64 != -1)
    {
      v65 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v65, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v66 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v66 + 1;
    if (v66 != -1)
    {
      v67 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v67, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v52 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v52;
  }
  if (v52)
  {
    v55 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v55, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v56 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v56;
  v57 = a2[28];
  for (m = a2[29]; v57 != m; v57 += 8)
  {
    if (v56)
    {
      v68 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v68, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v69 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v69 + 1;
    if (v69 != -1)
    {
      v70 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v70, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v56 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v56;
  }
  if (v56)
  {
    v59 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v59, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v60 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v60;
  v61 = a2[32];
  for (n = a2[33]; v61 != n; v61 += 8)
  {
    if (v60)
    {
      v71 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v71, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v72 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v72 + 1;
    if (v72 != -1)
    {
      v73 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v73, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v60 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v60;
  }
  if (v60)
  {
    v74 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v74, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v75 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v75;
  v76 = a2[36];
  for (ii = a2[37]; v76 != ii; v76 += 12)
  {
    if (v75)
    {
      v95 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v95, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v96 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v96 + 1;
    if (v96 != -1)
    {
      v97 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v97, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v98 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v98 + 1;
    if (v98 != -1)
    {
      v99 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v99, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v75 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v75;
  }
  if (a3 >= 2)
  {
    if (*((_BYTE *)a2 + 344))
    {
      v108 = 1;
      sub_20B512EB0(a1, &v108);
      if (*(_QWORD *)(a1 + 40))
      {
        v78 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v78, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v79 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v79 + 1;
      if (v79 != -1)
      {
        v80 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v80, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v81 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v81 + 1;
      if (v81 != -1)
      {
        v82 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v82, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v83 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v83 + 1;
      if (v83 != -1)
      {
        v84 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v84, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v85 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v85 + 1;
      if (v85 != -1)
      {
        v86 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v86, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v87 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v87 + 1;
      if (v87 != -1)
      {
        v88 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v88, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v89 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v89 + 1;
      if (v89 != -1)
      {
        v90 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v90, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v91 = *(_QWORD *)(a1 + 40);
      v92 = *(_BYTE *)(a1 + 34);
      *(_QWORD *)(a1 + 40) = v91 + 1;
      if (v91 != -1)
      {
        v93 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v93, (uint64_t)&v108, 1);
      }
      v94 = *(_QWORD **)(a1 + 24);
      v108 = v92;
      sub_20AEC01D0(v94, (uint64_t)&v108, 1);
      ++*(_QWORD *)(a1 + 40);
      if (a3 < 4)
        return;
    }
    else
    {
      v108 = 0;
      sub_20B512EB0(a1, &v108);
      if (a3 < 4)
        return;
    }
    if (*(_QWORD *)(a1 + 40))
    {
      v100 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v100, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v101 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v101 + 1;
    if (v101 != -1)
    {
      v102 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v102, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v103 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v103;
    v104 = a2[44];
    v105 = a2[45] - v104;
    if (v105)
    {
      v106 = 4 * (v105 >> 2);
      do
      {
        if (v103)
        {
          v107 = *(_QWORD **)(a1 + 24);
          v108 = *(_BYTE *)(a1 + 32);
          sub_20AEC01D0(v107, (uint64_t)&v108, 1);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
        v104 += 4;
        std::ostream::operator<<();
        v103 = *(_QWORD *)(a1 + 40) + 1;
        *(_QWORD *)(a1 + 40) = v103;
        v106 -= 4;
      }
      while (v106);
    }
  }
}

uint64_t *sub_20B0EBDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t *result;
  uint64_t v35;
  char *__src;
  char *v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  char *v42;
  char *v43;
  int v44;
  char *v45;
  char *v46;
  int v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char v58[12];
  char v59[12];
  char v60[4];
  int v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;

  LODWORD(__src) = 4;
  v4 = a1 + 24;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  v5 = __src;
  sub_20B42B554((_QWORD *)a1);
  sub_20B0E7B94((uint64_t)&__src, a2);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v37 - __src) >> 2);
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v6 = __src;
  if (v37 != __src)
  {
    v7 = 12 * ((v37 - __src) / 12);
    do
    {
      v8 = v6 + 12;
      sub_20B42DB24(v4, *(char **)(a1 + 32), v6, v6 + 12, 12);
      v6 = v8;
      v7 -= 12;
    }
    while (v7);
  }
  LODWORD(v64) = v38;
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v40 - v39) >> 2);
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v9 = v39;
  if (v40 != v39)
  {
    v10 = 12 * ((v40 - v39) / 12);
    do
    {
      v11 = v9 + 12;
      sub_20B42DB24(v4, *(char **)(a1 + 32), v9, v9 + 12, 12);
      v9 = v11;
      v10 -= 12;
    }
    while (v10);
  }
  LODWORD(v64) = v41;
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 2);
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v12 = v42;
  if (v43 != v42)
  {
    v13 = 12 * ((v43 - v42) / 12);
    do
    {
      v14 = v12 + 12;
      sub_20B42DB24(v4, *(char **)(a1 + 32), v12, v12 + 12, 12);
      v12 = v14;
      v13 -= 12;
    }
    while (v13);
  }
  LODWORD(v64) = v44;
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = v46 - v45;
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v16 = v45;
  v15 = v46;
  if (!v45
    && v46
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_38;
  }
  sub_20B42DB24(v4, *(char **)(a1 + 32), v16, v15, v15 - v16);
  LODWORD(v64) = v47;
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = v49 - v48;
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v17 = v48;
  v18 = v49;
  if (!v48
    && v49
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_38;
  }
  sub_20B42DB24(v4, *(char **)(a1 + 32), v17, v18, v18 - v17);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 2);
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v19 = v50;
  if (v51 != v50)
  {
    v20 = 12 * ((v51 - v50) / 12);
    do
    {
      v21 = v19 + 12;
      sub_20B42DB24(v4, *(char **)(a1 + 32), v19, v19 + 12, 12);
      v19 = v21;
      v20 -= 12;
    }
    while (v20);
  }
  v64 = (v53 - v52) >> 3;
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v22 = v52;
  if (v53 != v52)
  {
    v23 = 8 * ((v53 - v52) >> 3);
    do
    {
      v24 = v22 + 8;
      sub_20B42DB24(v4, *(char **)(a1 + 32), v22, v22 + 8, 8);
      v22 = v24;
      v23 -= 8;
    }
    while (v23);
  }
  v64 = (v55 - v54) >> 3;
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v25 = v54;
  if (v55 != v54)
  {
    v26 = 8 * ((v55 - v54) >> 3);
    do
    {
      v27 = v25 + 8;
      sub_20B42DB24(v4, *(char **)(a1 + 32), v25, v25 + 8, 8);
      v25 = v27;
      v26 -= 8;
    }
    while (v26);
  }
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v57 - v56) >> 2);
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v28 = v56;
  if (v57 != v56)
  {
    v29 = 12 * ((v57 - v56) / 12);
    do
    {
      v30 = v28 + 12;
      sub_20B42DB24(v4, *(char **)(a1 + 32), v28, v28 + 12, 12);
      v28 = v30;
      v29 -= 12;
    }
    while (v29);
  }
  if (v5 >= 2)
  {
    if (v60[0])
    {
      LOBYTE(v64) = 1;
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 1, 1);
      LODWORD(v64) = 2;
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
      sub_20B42B554((_QWORD *)a1);
      sub_20B42DB24(v4, *(char **)(a1 + 32), v58, v59, 12);
      sub_20B42DB24(v4, *(char **)(a1 + 32), v59, v60, 12);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v31 + 10) = *(_QWORD *)(a1 + 32) - v31 - 18;
      *(_QWORD *)(a1 + 56) -= 8;
    }
    else
    {
      LOBYTE(v64) = 0;
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 1, 1);
    }
    if (v5 >= 4)
    {
      LODWORD(v64) = v61;
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
      v64 = (v63 - v62) >> 2;
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
      v32 = v62;
      v33 = v63;
      if (v62
        || !v63
        || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        sub_20B42DB24(v4, *(char **)(a1 + 32), v32, v33, v33 - v32);
        goto LABEL_37;
      }
LABEL_38:
      abort();
    }
  }
LABEL_37:
  result = sub_20B0CDABC((uint64_t *)&__src);
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v35 + 10) = *(_QWORD *)(a1 + 32) - v35 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  return result;
}

void sub_20B0EC504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CDABC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0EC518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CDABC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0EC52C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CDABC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0EC540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CDABC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0EC554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CDABC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0EC568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CDABC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0EC57C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CDABC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0EC590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CDABC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B0EC5A4(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  uint64_t *result;
  uint64_t v9[48];

  LODWORD(v9[0]) = 4;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, v9);
  v6 = v9[0];
  if (*a1 < 1)
  {
    sub_20B0E7B94((uint64_t)v9, a3);
    sub_20B0EC6F4(a2, v9, v6);
    return sub_20B0CDABC(v9);
  }
  else
  {
    if (*a1 == 2
      && (LODWORD(v9[0]) = 3, (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, v9), *a1 < 1))
    {
      v7 = 0;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v7 = 1;
    }
    sub_20B0E7B94((uint64_t)v9, a3);
    sub_20B0EC6F4(a2, v9, v6);
    result = sub_20B0CDABC(v9);
    if (v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  }
  return result;
}

void sub_20B0EC6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CDABC(&a9);
  _Unwind_Resume(a1);
}

void sub_20B0EC6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CDABC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0EC6F4(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t k;
  uint64_t v20;
  uint64_t m;
  uint64_t v22;
  uint64_t n;
  uint64_t result;
  uint64_t v25;
  uint64_t ii;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v6 = *a2;
  v7 = a2[1];
  if (v7 != *a2)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v6 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v6 + 8);
      v6 += 12;
    }
    while (v6 != v7);
  }
  sub_20B0ECD70((_BYTE *)a1, (_DWORD *)a2 + 8);
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[6] - a2[5]) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v8 = a2[5];
  for (i = a2[6]; v8 != i; v8 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8 + 8);
  }
  sub_20B0ECD70((_BYTE *)a1, (_DWORD *)a2 + 18);
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[11] - a2[10]) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v10 = a2[10];
  for (j = a2[11]; v10 != j; v10 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10 + 8);
  }
  sub_20B0ECD70((_BYTE *)a1, (_DWORD *)a2 + 28);
  v31 = a2[16] - a2[15];
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v13 = a2[15];
  v12 = a2[16];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v13++);
      --v14;
    }
    while (v14);
  }
  sub_20B0ECD70((_BYTE *)a1, (_DWORD *)a2 + 38);
  v31 = a2[21] - a2[20];
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v16 = a2[20];
  v15 = a2[21];
  v17 = v15 - v16;
  if (v15 != v16)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v16++);
      --v17;
    }
    while (v17);
  }
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[25] - a2[24]) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v18 = a2[24];
  for (k = a2[25]; v18 != k; v18 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v18);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v18 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v18 + 8);
  }
  v31 = (a2[29] - a2[28]) >> 3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v20 = a2[28];
  for (m = a2[29]; v20 != m; v20 += 8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v20 + 4);
  }
  v31 = (a2[33] - a2[32]) >> 3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v22 = a2[32];
  for (n = a2[33]; v22 != n; v22 += 8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v22);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v22 + 4);
  }
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[37] - a2[36]) >> 2);
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v25 = a2[36];
  for (ii = a2[37]; v25 != ii; v25 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25 + 4);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25 + 8);
  }
  if (a3 >= 2)
  {
    if (*((_BYTE *)a2 + 344))
    {
      LOBYTE(v31) = 1;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v31);
      v27 = *(_DWORD *)(a1 + 8);
      LODWORD(v31) = 2;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v31);
      if (v27 < 1)
      {
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 40);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 324);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 41);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 332);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 42);
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 340);
        if (a3 < 4)
          return result;
      }
      else
      {
        if (v27 == 2)
        {
          LODWORD(v31) = 2;
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v31);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 40);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 324);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 41);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 332);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 42);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 340);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        if (a3 < 4)
          return result;
      }
    }
    else
    {
      LOBYTE(v31) = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v31);
      if (a3 < 4)
        return result;
    }
    sub_20B0ECD70((_BYTE *)a1, (_DWORD *)a2 + 87);
    v31 = (a2[45] - a2[44]) >> 2;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
    v28 = a2[44];
    v29 = a2[45] - v28;
    if (v29)
    {
      v30 = 4 * (v29 >> 2);
      do
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v28);
        v28 += 4;
        v30 -= 4;
      }
      while (v30);
    }
  }
  return result;
}

void sub_20B0ECD70(_BYTE *a1, _DWORD *a2)
{
  void *__p[2];
  char v4;
  _DWORD v5[6];
  int v6;
  char v7;
  char *v8;

  if ((a1[12] & 2) != 0)
  {
    v6 = 0;
    sub_20B0E8A38((uint64_t)v5, a2);
    if (v6 == -1)
      sub_20AECFAB8();
    v8 = &v7;
    ((void (*)(void **__return_ptr, char **, _DWORD *))off_24C40DC60[v6])(__p, &v8, v5);
    if (v6 != -1)
      ((void (*)(char **, _DWORD *))off_24C40DC48[v6])(&v8, v5);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5[0] = *a2;
    (*(void (**)(_BYTE *, _DWORD *))(*(_QWORD *)a1 + 104))(a1, v5);
  }
}

void sub_20B0ECE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0ECE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0ECE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0ECE9C(uint64_t a1, uint64_t *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_20B50AC94(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_20B4552C4(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 4)
    v6 = 4;
  else
    v6 = v12;
  if (v6 < 3)
    sub_20B0ECF98((uint64_t)&v11, a1, a2, v6);
  else
    sub_20B0ED660(a1, (uint64_t)a2, v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

uint64_t *sub_20B0ECF98(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *exception;
  __int128 v40;
  uint64_t *v41;
  uint64_t v42[3];
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  int v56;
  _BYTE v57[24];
  int v58;
  _BYTE v59[24];
  int v60;
  _BYTE v61[24];
  int v62;
  int v63;
  __int128 v64;
  uint64_t *v65;
  char v66;
  uint64_t v67;

  memset(v42, 0, sizeof(v42));
  v43 = 0;
  memset(v44, 0, sizeof(v44));
  v45 = 0;
  memset(v46, 0, sizeof(v46));
  v47 = 0;
  v48 = 0;
  v50 = 0;
  v49 = 0;
  v51 = 0;
  v53 = 0;
  v52 = 0;
  v54 = 0;
  v63 = 0;
  LOBYTE(v64) = 0;
  v66 = 0;
  memset(v55, 0, sizeof(v55));
  v56 = 0;
  v58 = 0;
  memset(v57, 0, sizeof(v57));
  v60 = 0;
  memset(v59, 0, sizeof(v59));
  memset(v61, 0, sizeof(v61));
  v62 = 0;
  *(_QWORD *)&v40 = "vertices";
  *((_QWORD *)&v40 + 1) = 8;
  v41 = v42;
  sub_20B0EDF20(a2, (uint64_t)&v40);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "colors_type";
  *(_QWORD *)(a2 + 96) = 11;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v43 + 4;
  sub_20B0EE284((uint64_t *)a2, (_DWORD **)&v40);
  *(_QWORD *)&v40 = "colors";
  *((_QWORD *)&v40 + 1) = 6;
  v41 = v44;
  sub_20B0EDF20(a2, (uint64_t)&v40);
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "normals_type";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v45 + 4;
  sub_20B0EE284((uint64_t *)a2, (_DWORD **)&v40);
  *(_QWORD *)&v40 = "normals";
  *((_QWORD *)&v40 + 1) = 7;
  v41 = v46;
  sub_20B0EDF20(a2, (uint64_t)&v40);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "semantics_type";
  *(_QWORD *)(a2 + 96) = 14;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v47 + 4;
  sub_20B0EE284((uint64_t *)a2, (_DWORD **)&v40);
  v10 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "semantics";
  *(_QWORD *)(a2 + 96) = 9;
  if (!v10)
    *(_BYTE *)(a2 + 104) = 1;
  v11 = (unsigned __int8 *)sub_20B50AF4C((uint64_t *)a2);
  v12 = *v11;
  if (v12 == 2)
  {
    v13 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1)) >> 4;
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    v17 = v13 - (v49 - v48);
    if (v13 <= v49 - v48)
      goto LABEL_18;
    goto LABEL_16;
  }
  if (v12 == 1)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1)) >> 3);
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    v17 = v13 - (v49 - v48);
    if (v13 <= v49 - v48)
      goto LABEL_18;
LABEL_16:
    sub_20B08A3B0((uint64_t)&v48, v17);
    v15 = v48;
    v14 = v49;
    goto LABEL_20;
  }
  if (!*v11)
  {
    v13 = 0;
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    goto LABEL_18;
  }
  v13 = 1;
  v14 = v49;
  v15 = v48;
  v16 = v49 - v48;
  v17 = 1 - (v49 - v48);
  if (v49 == v48)
    goto LABEL_16;
LABEL_18:
  if (v16 > v13)
  {
    v14 = v15 + v13;
    v49 = v15 + v13;
  }
LABEL_20:
  *(_QWORD *)&v40 = v14 - v15;
  *((_QWORD *)&v40 + 1) = v15;
  v18 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B064(v18, (uint64_t)&v40);
  v19 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "materials_type";
  *(_QWORD *)(a2 + 96) = 14;
  if (!v19)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v51 + 4;
  sub_20B0EE284((uint64_t *)a2, (_DWORD **)&v40);
  v20 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "materials";
  *(_QWORD *)(a2 + 96) = 9;
  if (!v20)
    *(_BYTE *)(a2 + 104) = 1;
  v21 = (unsigned __int8 *)sub_20B50AF4C((uint64_t *)a2);
  v22 = *v21;
  if (v22 == 2)
  {
    v23 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 4;
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    v27 = v23 - (v53 - v52);
    if (v23 <= v53 - v52)
      goto LABEL_33;
    goto LABEL_31;
  }
  if (v22 == 1)
  {
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 3);
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    v27 = v23 - (v53 - v52);
    if (v23 <= v53 - v52)
      goto LABEL_33;
LABEL_31:
    sub_20B08A3B0((uint64_t)&v52, v27);
    v25 = v52;
    v24 = v53;
    goto LABEL_35;
  }
  if (!*v21)
  {
    v23 = 0;
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    goto LABEL_33;
  }
  v23 = 1;
  v24 = v53;
  v25 = v52;
  v26 = v53 - v52;
  v27 = 1 - (v53 - v52);
  if (v53 == v52)
    goto LABEL_31;
LABEL_33:
  if (v26 > v23)
  {
    v24 = v25 + v23;
    v53 = v25 + v23;
  }
LABEL_35:
  *(_QWORD *)&v40 = v24 - v25;
  *((_QWORD *)&v40 + 1) = v25;
  v28 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B064(v28, (uint64_t)&v40);
  *(_QWORD *)&v40 = "faces";
  *((_QWORD *)&v40 + 1) = 5;
  v41 = (uint64_t *)&v55[4];
  sub_20B0EE474(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "edges";
  *((_QWORD *)&v40 + 1) = 5;
  v41 = (uint64_t *)&v57[4];
  sub_20B0EE7EC(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "tex_coords";
  *((_QWORD *)&v40 + 1) = 10;
  v41 = (uint64_t *)&v59[4];
  sub_20B0EEB38(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "tex_faces";
  *((_QWORD *)&v40 + 1) = 9;
  v41 = (uint64_t *)&v61[4];
  sub_20B0EE474(a2, (uint64_t)&v40);
  if (a4 >= 2)
  {
    v29 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "box";
    *(_QWORD *)(a2 + 96) = 3;
    if (!v29)
      *(_BYTE *)(a2 + 104) = 1;
    if (*(_BYTE *)sub_20B50AF4C((uint64_t *)a2))
    {
      v40 = 0uLL;
      v41 = 0;
      sub_20B50AC94(a2);
      v30 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "version";
      *(_QWORD *)(a2 + 96) = 7;
      if (!v30)
        *(_BYTE *)(a2 + 104) = 1;
      v31 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v67 = 0;
      sub_20B4552C4(v31, &v67);
      if (HIDWORD(v67))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "min";
      *(_QWORD *)(a2 + 96) = 3;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      sub_20B50C420(v33, (float *)&v40);
      v34 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "max";
      *(_QWORD *)(a2 + 96) = 3;
      if (!v34)
        *(_BYTE *)(a2 + 104) = 1;
      v35 = sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      sub_20B50C420(v35, (float *)&v40 + 3);
      v36 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v36 - 8);
      v37 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 112) = *(_QWORD *)(v37 - 8);
      *(_QWORD *)(a2 + 48) = v36 - 8;
      *(_QWORD *)(a2 + 72) = v37 - 8;
      v65 = v41;
      v64 = v40;
      v66 = 1;
    }
    else
    {
      ++*(_QWORD *)(a2 + 112);
      if (v66)
        v66 = 0;
    }
    if (a4 >= 4)
    {
      if (!*(_BYTE *)(a2 + 104))
        *(_BYTE *)(a2 + 104) = 1;
      *(_QWORD *)(a2 + 88) = "confidences";
      *(_QWORD *)(a2 + 96) = 11;
    }
  }
  sub_20B0EF1E0((uint64_t)&v40, (uint64_t)v42);
  sub_20B0EF324(a3, (uint64_t)&v40);
  sub_20B0CDABC((uint64_t *)&v40);
  return sub_20B0EFAB8(v42);
}

void sub_20B0ED638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0ED64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0ED660(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  unsigned int v34;
  int v35;
  char *v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  unint64_t v53;
  _QWORD *v54;
  float *v55;
  unint64_t v56;
  unint64_t v57;
  float **v58;
  unint64_t v59;
  _QWORD *exception;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[2];

  *(_QWORD *)&v63[0] = "vertices";
  *((_QWORD *)&v63[0] + 1) = 8;
  *(_QWORD *)&v63[1] = a2;
  sub_20B0EDF20(a1, (uint64_t)v63);
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "colors_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 32;
  sub_20B0EE284((uint64_t *)a1, (_DWORD **)v63);
  *(_QWORD *)&v63[0] = "colors";
  *((_QWORD *)&v63[0] + 1) = 6;
  *(_QWORD *)&v63[1] = a2 + 40;
  sub_20B0EDF20(a1, (uint64_t)v63);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "normals_type";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 72;
  sub_20B0EE284((uint64_t *)a1, (_DWORD **)v63);
  *(_QWORD *)&v63[0] = "normals";
  *((_QWORD *)&v63[0] + 1) = 7;
  *(_QWORD *)&v63[1] = a2 + 80;
  sub_20B0EDF20(a1, (uint64_t)v63);
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "semantics_type";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v8)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 112;
  sub_20B0EE284((uint64_t *)a1, (_DWORD **)v63);
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "semantics";
  *(_QWORD *)(a1 + 96) = 9;
  if (v9)
  {
    v10 = (unsigned __int8 *)sub_20B50AF4C((uint64_t *)a1);
    v11 = *v10;
    if (v11 != 2)
      goto LABEL_9;
LABEL_13:
    v12 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v10 + 1) + 8) - **((_QWORD **)v10 + 1)) >> 4;
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = v12 - (v13 - v15);
    if (v12 > v13 - v15)
      goto LABEL_19;
    goto LABEL_16;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v10 = (unsigned __int8 *)sub_20B50AF4C((uint64_t *)a1);
  v11 = *v10;
  if (v11 == 2)
    goto LABEL_13;
LABEL_9:
  if (v11 == 1)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v10 + 1) + 8) - **((_QWORD **)v10 + 1)) >> 3);
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = v12 - (v13 - v15);
    if (v12 > v13 - v15)
      goto LABEL_19;
  }
  else
  {
    if (!v11)
    {
      v12 = 0;
      v14 = (uint64_t *)(a2 + 128);
      v13 = *(_QWORD *)(a2 + 128);
      v15 = *(_QWORD *)(a2 + 120);
      v16 = v13 - v15;
      goto LABEL_16;
    }
    v12 = 1;
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = 1 - (v13 - v15);
    if (v13 == v15)
    {
LABEL_19:
      sub_20B08A3B0(a2 + 120, v17);
      v15 = *(_QWORD *)(a2 + 120);
      v13 = *v14;
      goto LABEL_20;
    }
  }
LABEL_16:
  if (v16 > v12)
  {
    v13 = v15 + v12;
    *v14 = v15 + v12;
  }
LABEL_20:
  *(_QWORD *)&v63[0] = v13 - v15;
  *((_QWORD *)&v63[0] + 1) = v15;
  v18 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_20B50B064(v18, (uint64_t)v63);
  v19 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "materials_type";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v19)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 152;
  sub_20B0EE284((uint64_t *)a1, (_DWORD **)v63);
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "materials";
  *(_QWORD *)(a1 + 96) = 9;
  if (v20)
  {
    v21 = (unsigned __int8 *)sub_20B50AF4C((uint64_t *)a1);
    v22 = *v21;
    if (v22 != 2)
      goto LABEL_24;
LABEL_28:
    v23 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 4;
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = v23 - (v24 - v26);
    if (v23 > v24 - v26)
      goto LABEL_34;
    goto LABEL_31;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v21 = (unsigned __int8 *)sub_20B50AF4C((uint64_t *)a1);
  v22 = *v21;
  if (v22 == 2)
    goto LABEL_28;
LABEL_24:
  if (v22 == 1)
  {
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 3);
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = v23 - (v24 - v26);
    if (v23 > v24 - v26)
      goto LABEL_34;
  }
  else
  {
    if (!v22)
    {
      v23 = 0;
      v25 = (uint64_t *)(a2 + 168);
      v24 = *(_QWORD *)(a2 + 168);
      v26 = *(_QWORD *)(a2 + 160);
      v27 = v24 - v26;
      goto LABEL_31;
    }
    v23 = 1;
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = 1 - (v24 - v26);
    if (v24 == v26)
    {
LABEL_34:
      sub_20B08A3B0(a2 + 160, v28);
      v26 = *(_QWORD *)(a2 + 160);
      v24 = *v25;
      goto LABEL_35;
    }
  }
LABEL_31:
  if (v27 > v23)
  {
    v24 = v26 + v23;
    *v25 = v26 + v23;
  }
LABEL_35:
  *(_QWORD *)&v63[0] = v24 - v26;
  *((_QWORD *)&v63[0] + 1) = v26;
  v29 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_20B50B064(v29, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "faces";
  *((_QWORD *)&v63[0] + 1) = 5;
  *(_QWORD *)&v63[1] = a2 + 192;
  sub_20B0EE474(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "edges";
  *((_QWORD *)&v63[0] + 1) = 5;
  *(_QWORD *)&v63[1] = a2 + 224;
  sub_20B0EE7EC(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "tex_coords";
  *((_QWORD *)&v63[0] + 1) = 10;
  *(_QWORD *)&v63[1] = a2 + 256;
  sub_20B0EEB38(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "tex_faces";
  *((_QWORD *)&v63[0] + 1) = 9;
  *(_QWORD *)&v63[1] = a2 + 288;
  sub_20B0EE474(a1, (uint64_t)v63);
  if (a3 < 2)
    return;
  v30 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "box";
  *(_QWORD *)(a1 + 96) = 3;
  if (v30)
  {
    if (*(_BYTE *)sub_20B50AF4C((uint64_t *)a1))
      goto LABEL_38;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_20B50AF4C((uint64_t *)a1))
    {
LABEL_38:
      v61 = 0uLL;
      v62 = 0;
      v31 = *(_DWORD *)(a1 + 8);
      sub_20B50AC94(a1);
      v32 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v32)
        *(_BYTE *)(a1 + 104) = 1;
      v33 = (char *)sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      *(_QWORD *)&v63[0] = 0;
      sub_20B4552C4(v33, v63);
      v34 = v63[0];
      if (!HIDWORD(*(_QWORD *)&v63[0]))
      {
        if (v31 < 1)
          goto LABEL_50;
        if (v31 != 2 || LODWORD(v63[0]) < 2)
        {
LABEL_48:
          if (v34 >= 2)
            v34 = 2;
LABEL_50:
          if (v34 < 2)
          {
            memset(v63, 0, 24);
            v42 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "min";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v42)
              *(_BYTE *)(a1 + 104) = 1;
            v43 = sub_20B50AF4C((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_20B50C420(v43, (float *)v63);
            v44 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "max";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v44)
              *(_BYTE *)(a1 + 104) = 1;
            v45 = sub_20B50AF4C((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_20B50C420(v45, (float *)((unint64_t)v63 | 0xC));
            v46 = v63[0];
            HIDWORD(v46) = HIDWORD(v63[0]);
            v61 = v46;
            LODWORD(v46) = vdup_lane_s32(*(int32x2_t *)((char *)v63 + 12), 1).u32[0];
            DWORD1(v46) = DWORD1(v63[1]);
            v62 = v46;
          }
          else
          {
            v38 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "min";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v38)
              *(_BYTE *)(a1 + 104) = 1;
            v39 = sub_20B50AF4C((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_20B50C420(v39, (float *)&v61);
            v40 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "max";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v40)
              *(_BYTE *)(a1 + 104) = 1;
            v41 = sub_20B50AF4C((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_20B50C420(v41, (float *)((unint64_t)&v61 | 0xC));
          }
          v47 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v47 - 8);
          v48 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(v48 - 8);
          *(_QWORD *)(a1 + 48) = v47 - 8;
          *(_QWORD *)(a1 + 72) = v48 - 8;
          *(_OWORD *)(a2 + 320) = v61;
          *(_QWORD *)(a2 + 336) = v62;
          *(_BYTE *)(a2 + 344) = 1;
          if (a3 >= 4)
            goto LABEL_67;
          return;
        }
        v35 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "min_version";
        *(_QWORD *)(a1 + 96) = 11;
        if (!v35)
          *(_BYTE *)(a1 + 104) = 1;
        v36 = (char *)sub_20B50AF4C((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v63[0] = 0;
        sub_20B4552C4(v36, v63);
        v37 = v63[0];
        if (!HIDWORD(*(_QWORD *)&v63[0]))
        {
          if (LODWORD(v63[0]) >= 3)
          {
            sub_20B0EEE70();
            sub_20B520518((std::string *)&xmmword_25463B090, v37, 2u);
          }
          goto LABEL_48;
        }
      }
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C41FEF0;
      __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
    }
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 344))
    *(_BYTE *)(a2 + 344) = 0;
  if (a3 >= 4)
  {
LABEL_67:
    v49 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "confidences_type";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v49)
      *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)&v63[0] = a2 + 348;
    sub_20B0EE284((uint64_t *)a1, (_DWORD **)v63);
    v50 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "confidences";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v50)
      *(_BYTE *)(a1 + 104) = 1;
    v51 = (unsigned __int8 *)sub_20B50AF4C((uint64_t *)a1);
    v52 = *v51;
    if (v52 == 2)
    {
      v53 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v51 + 1) + 8) - **((_QWORD **)v51 + 1)) >> 4;
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = v53 - v56;
      if (v53 > v56)
        goto LABEL_82;
    }
    else if (v52 == 1)
    {
      v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v51 + 1) + 8) - **((_QWORD **)v51 + 1)) >> 3);
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = v53 - v56;
      if (v53 > v56)
        goto LABEL_82;
    }
    else
    {
      if (!*v51)
      {
        v53 = 0;
        v54 = (_QWORD *)(a2 + 360);
        v55 = *(float **)(a2 + 352);
        if (!((uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2))
          goto LABEL_83;
        goto LABEL_80;
      }
      v53 = 1;
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = 1 - v56;
      if (!v56)
      {
LABEL_82:
        v58 = (float **)(a2 + 352);
        sub_20B08A96C((uint64_t)v58, v57);
        v55 = *v58;
        goto LABEL_83;
      }
    }
    v54 = (_QWORD *)(a2 + 360);
    if (v56 <= v53)
    {
LABEL_83:
      v59 = sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50C420(v59, v55);
      return;
    }
LABEL_80:
    *v54 = &v55[v53];
    goto LABEL_83;
  }
}

void sub_20B0EDF20(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  float **v8;
  float *v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_20B50AC94(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = (float **)(v4 + 1);
      v9 = (float *)v4[1];
      v10 = (float *)*v4;
      v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = (float **)(v4 + 1);
  v9 = (float *)v4[1];
  v10 = (float *)*v4;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_20B0EE07C(v4, v7 - v11);
    v10 = (float *)*v4;
    v9 = (float *)v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = &v10[3 * v7];
    *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    v12 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C420(v12, v10);
    v10 += 3;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_20B0EE07C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  _DWORD *v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  int v25;
  _QWORD *v26;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero((void *)a1[1], v13);
      v5 += v13;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v7 = v6 + a2;
    if (v6 + a2 > 0x1555555555555555)
      sub_20AEC60B8();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xAAAAAAAAAAAAAAALL)
      v9 = 0x1555555555555555;
    else
      v9 = v7;
    if (v9)
    {
      LODWORD(v26) = v9;
      v10 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v10 == -1)
        sub_20AECFAB8();
      v24 = &v26;
      v11 = ((uint64_t (*)(_QWORD ***, uint64_t *))off_24C40DD00[v10])(&v24, a1 + 3);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v14 = (_DWORD *)(v11 + 12 * v6);
    v15 = v11 + 12 * v12;
    v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    v17 = (char *)v14 + v16;
    v19 = *a1;
    v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 12);
        v18 -= 12;
        v21 = *(_DWORD *)(v18 + 8);
        *(_QWORD *)(v14 - 3) = v20;
        v14 -= 3;
        v14[2] = v21;
      }
      while (v18 != v19);
      v18 = *a1;
    }
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v17;
    v22 = a1[2];
    a1[2] = v15;
    if (v18)
    {
      v24 = (_QWORD **)v18;
      v25 = -1431655765 * ((unint64_t)(v22 - v18) >> 2);
      v23 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v23 == -1)
        sub_20AECFAB8();
      v26 = &v24;
      ((void (*)(_QWORD **, uint64_t *))off_24C40DC08[v23])(&v26, a1 + 3);
    }
  }
}

void sub_20B0EE284(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AF4C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B4557C4(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B418B2C((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B0EE3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B0EE474(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_20B50AC94(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = (unint64_t *)(v4 + 1);
      v9 = v4[1];
      v10 = *v4;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = (unint64_t *)(v4 + 1);
  v9 = v4[1];
  v10 = *v4;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_20B0EE5E4(v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = v10 + 12 * v7;
    *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 3;
    v15[1] = v10;
    v12 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C014(v12, (uint64_t)v15);
    v10 += 12;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_20B0EE5E4(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  _DWORD *v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  int v25;
  _QWORD *v26;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero((void *)a1[1], v13);
      v5 += v13;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v7 = v6 + a2;
    if (v6 + a2 > 0x1555555555555555)
      sub_20AEC60B8();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xAAAAAAAAAAAAAAALL)
      v9 = 0x1555555555555555;
    else
      v9 = v7;
    if (v9)
    {
      LODWORD(v26) = v9;
      v10 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v10 == -1)
        sub_20AECFAB8();
      v24 = &v26;
      v11 = ((uint64_t (*)(_QWORD ***, uint64_t *))off_24C40DD40[v10])(&v24, a1 + 3);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v14 = (_DWORD *)(v11 + 12 * v6);
    v15 = v11 + 12 * v12;
    v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    v17 = (char *)v14 + v16;
    v19 = *a1;
    v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 12);
        v18 -= 12;
        v21 = *(_DWORD *)(v18 + 8);
        *(_QWORD *)(v14 - 3) = v20;
        v14 -= 3;
        v14[2] = v21;
      }
      while (v18 != v19);
      v18 = *a1;
    }
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v17;
    v22 = a1[2];
    a1[2] = v15;
    if (v18)
    {
      v24 = (_QWORD **)v18;
      v25 = -1431655765 * ((unint64_t)(v22 - v18) >> 2);
      v23 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v23 == -1)
        sub_20AECFAB8();
      v26 = &v24;
      ((void (*)(_QWORD **, uint64_t *))off_24C40DBC8[v23])(&v26, a1 + 3);
    }
  }
}

void sub_20B0EE7EC(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_20B50AC94(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = v4 + 1;
      v9 = v4[1];
      v10 = *v4;
      v11 = (v9 - *v4) >> 3;
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = v4 + 1;
  v9 = v4[1];
  v10 = *v4;
  v11 = (v9 - *v4) >> 3;
  if (v7 > v11)
  {
    sub_20B0EE940((uint64_t)v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = v10 + 8 * v7;
    *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 2;
    v15[1] = v10;
    v12 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C014(v12, (uint64_t)v15);
    v10 += 8;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_20B0EE940(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  _QWORD **v20;
  _QWORD **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  int v34;
  _QWORD *v35;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 8 * a2);
      v5 += 8 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = v5 - *(_QWORD *)a1;
    v7 = v6 >> 3;
    v8 = (v6 >> 3) + a2;
    if (v8 >> 61)
      sub_20AEC60B8();
    v9 = v4 - *(_QWORD *)a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= v8)
      v10 = (v6 >> 3) + a2;
    v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12)
    {
      LODWORD(v35) = v12;
      v13 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v13 == -1)
        sub_20AECFAB8();
      v33 = &v35;
      v15 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24C40DD60[v13])(&v33, a1 + 24);
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    v16 = (char *)(v15 + 8 * v7);
    v17 = 8 * a2;
    v18 = v15 + 8 * v14;
    bzero(v16, v17);
    v19 = &v16[v17];
    v20 = *(_QWORD ***)a1;
    v21 = *(_QWORD ***)(a1 + 8);
    if (v21 != *(_QWORD ***)a1)
    {
      v22 = (unint64_t)v21 - *(_QWORD *)a1 - 8;
      if (v22 < 0x58)
        goto LABEL_31;
      if ((unint64_t)v21 - v15 - v6 < 0x20)
        goto LABEL_31;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v21[v24 / 0xFFFFFFFFFFFFFFF8];
      v16 -= v24;
      v26 = (_OWORD *)(v15 + 8 * v7 - 16);
      v27 = (__int128 *)(v21 - 2);
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 2;
        v28 -= 4;
      }
      while (v28);
      v21 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v30 = (uint64_t)*--v21;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v21 != v20);
      }
      v21 = *(_QWORD ***)a1;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v19;
    v31 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v18;
    if (v21)
    {
      v33 = v21;
      v34 = (unint64_t)(v31 - (_QWORD)v21) >> 3;
      v32 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v32 == -1)
        sub_20AECFAB8();
      v35 = &v33;
      ((void (*)(_QWORD **, uint64_t))off_24C40DBE8[v32])(&v35, a1 + 24);
    }
  }
}

void sub_20B0EEB38(uint64_t a1, uint64_t a2)
{
  int v3;
  float **v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  float **v8;
  float *v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(float ***)(a2 + 16);
  sub_20B50AC94(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = v4 + 1;
      v9 = v4[1];
      v10 = *v4;
      v11 = ((char *)v9 - (char *)*v4) >> 3;
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = v4 + 1;
  v9 = v4[1];
  v10 = *v4;
  v11 = ((char *)v9 - (char *)*v4) >> 3;
  if (v7 > v11)
  {
    sub_20B0EEC78((uint64_t)v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = &v10[2 * v7];
    *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    v12 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C420(v12, v10);
    v10 += 2;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_20B0EEC78(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  _QWORD **v20;
  _QWORD **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  int v34;
  _QWORD *v35;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 8 * a2);
      v5 += 8 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = v5 - *(_QWORD *)a1;
    v7 = v6 >> 3;
    v8 = (v6 >> 3) + a2;
    if (v8 >> 61)
      sub_20AEC60B8();
    v9 = v4 - *(_QWORD *)a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= v8)
      v10 = (v6 >> 3) + a2;
    v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12)
    {
      LODWORD(v35) = v12;
      v13 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v13 == -1)
        sub_20AECFAB8();
      v33 = &v35;
      v15 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24C40DD80[v13])(&v33, a1 + 24);
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    v16 = (char *)(v15 + 8 * v7);
    v17 = 8 * a2;
    v18 = v15 + 8 * v14;
    bzero(v16, v17);
    v19 = &v16[v17];
    v20 = *(_QWORD ***)a1;
    v21 = *(_QWORD ***)(a1 + 8);
    if (v21 != *(_QWORD ***)a1)
    {
      v22 = (unint64_t)v21 - *(_QWORD *)a1 - 8;
      if (v22 < 0x58)
        goto LABEL_31;
      if ((unint64_t)v21 - v15 - v6 < 0x20)
        goto LABEL_31;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v21[v24 / 0xFFFFFFFFFFFFFFF8];
      v16 -= v24;
      v26 = (_OWORD *)(v15 + 8 * v7 - 16);
      v27 = (__int128 *)(v21 - 2);
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 2;
        v28 -= 4;
      }
      while (v28);
      v21 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v30 = (uint64_t)*--v21;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v21 != v20);
      }
      v21 = *(_QWORD ***)a1;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v19;
    v31 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v18;
    if (v21)
    {
      v33 = v21;
      v34 = (unint64_t)(v31 - (_QWORD)v21) >> 3;
      v32 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v32 == -1)
        sub_20AECFAB8();
      v35 = &v33;
      ((void (*)(_QWORD **, uint64_t))off_24C40DBD8[v32])(&v35, a1 + 24);
    }
  }
}

void sub_20B0EEE70()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B040);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463B040))
  {
    sub_20B0EEF28();
    if (byte_25463B0BF < 0)
    {
      sub_20AEC60F4(&xmmword_25463B090, (void *)qword_25463B0A8, unk_25463B0B0);
    }
    else
    {
      xmmword_25463B090 = *(_OWORD *)&qword_25463B0A8;
      qword_25463B0A0 = unk_25463B0B8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B090, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B040);
  }
}

void sub_20B0EEF10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B040);
  _Unwind_Resume(a1);
}

void sub_20B0EEF28()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B048);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463B048))
  {
    sub_20B0EF004(__p);
    sub_20AF6D7B0((char *)__p, (std::string *)&qword_25463B0A8);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B0A8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B048);
  }
}

void sub_20B0EEFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25463B048);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25463B048);
  _Unwind_Resume(a1);
}

void sub_20B0EF004(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25463B050);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B050))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::mesh::TriMeshBoundingBoxSample<>]", qword_25463B0C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25463B0C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B050);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25463B058);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25463B058))
  {
    v5 = sub_20AED4780(qword_25463B0C0, "<", 0);
    sub_20AED467C(qword_25463B0C0, 0, v5, qword_25463B0D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25463B0D8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B058);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25463B060);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B060))
  {
    sub_20B531658((uint64_t)qword_25463B0D8, (uint64_t)&xmmword_25463B0F0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B0F0, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B060);
  }
  if (byte_25463B107 < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_25463B0F0, *((unint64_t *)&xmmword_25463B0F0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_25463B0F0;
    __dst[2] = unk_25463B100;
  }
}

void sub_20B0EF198(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B060);
  _Unwind_Resume(a1);
}

void sub_20B0EF1B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B058);
  _Unwind_Resume(a1);
}

void sub_20B0EF1C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B050);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0EF1E0(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;

  LOBYTE(v11) = 0;
  v13 = 0;
  if (*(_BYTE *)(a2 + 344))
  {
    *(_QWORD *)&v3 = *(_QWORD *)(a2 + 320);
    DWORD2(v3) = *(_DWORD *)(a2 + 328);
    HIDWORD(v3) = *(_QWORD *)(a2 + 332);
    LODWORD(v4) = vdup_lane_s32(*(int32x2_t *)(a2 + 332), 1).u32[0];
    v11 = v3;
    HIDWORD(v4) = *(_DWORD *)(a2 + 340);
    v12 = v4;
    v13 = 1;
  }
  v10 = 0;
  HIDWORD(v9) = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  sub_20B0EF8D8(a1, a2, (_DWORD *)(a2 + 32), a2 + 40, (_DWORD *)(a2 + 72), a2 + 80, (_DWORD *)(a2 + 112), a2 + 120, (_DWORD *)(a2 + 152), a2 + 160, a2 + 192, a2 + 224, a2 + 256, a2 + 288, &v11, &v10, (uint64_t)&v6);
  if (v6)
  {
    v7 = v6;
    v14 = v6;
    v15 = (unint64_t)(v8 - v6) >> 2;
    if (HIDWORD(v9) == -1)
      sub_20AECFAB8();
    v16 = &v14;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBB8[HIDWORD(v9)])(&v16, &v9);
  }
  return a1;
}

void sub_20B0EF30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20B0CE0FC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B0EF324(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t *v38;

  v4 = *a1;
  if (*a1)
  {
    a1[1] = v4;
    v5 = -1431655765 * ((unint64_t)(a1[2] - v4) >> 2);
    v36 = v4;
    v37 = v5;
    v6 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v6 == -1)
      sub_20AECFAB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DC08[v6])(&v38, a1 + 3);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = a1[5];
  *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 32);
  if (v7)
  {
    a1[6] = v7;
    v8 = -1431655765 * ((unint64_t)(a1[7] - v7) >> 2);
    v36 = v7;
    v37 = v8;
    v9 = *((unsigned int *)a1 + 17);
    if ((_DWORD)v9 == -1)
      sub_20AECFAB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DC08[v9])(&v38, a1 + 8);
    a1[5] = 0;
    a1[6] = 0;
    a1[7] = 0;
  }
  a1[8] = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v10 = a1[10];
  *((_DWORD *)a1 + 18) = *(_DWORD *)(a2 + 72);
  if (v10)
  {
    a1[11] = v10;
    v11 = -1431655765 * ((unint64_t)(a1[12] - v10) >> 2);
    v36 = v10;
    v37 = v11;
    v12 = *((unsigned int *)a1 + 27);
    if ((_DWORD)v12 == -1)
      sub_20AECFAB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DC08[v12])(&v38, a1 + 13);
    a1[10] = 0;
    a1[11] = 0;
    a1[12] = 0;
  }
  a1[13] = *(_QWORD *)(a2 + 104);
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  a1[12] = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v13 = a1[15];
  *((_DWORD *)a1 + 28) = *(_DWORD *)(a2 + 112);
  if (v13)
  {
    a1[16] = v13;
    v14 = *((_DWORD *)a1 + 34) - v13;
    v36 = v13;
    v37 = v14;
    v15 = *((unsigned int *)a1 + 37);
    if ((_DWORD)v15 == -1)
      sub_20AECFAB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBF8[v15])(&v38, a1 + 18);
    a1[15] = 0;
    a1[16] = 0;
    a1[17] = 0;
  }
  a1[18] = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
  a1[17] = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v16 = a1[20];
  *((_DWORD *)a1 + 38) = *(_DWORD *)(a2 + 152);
  if (v16)
  {
    a1[21] = v16;
    v17 = *((_DWORD *)a1 + 44) - v16;
    v36 = v16;
    v37 = v17;
    v18 = *((unsigned int *)a1 + 47);
    if ((_DWORD)v18 == -1)
      sub_20AECFAB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBF8[v18])(&v38, a1 + 23);
    a1[20] = 0;
    a1[21] = 0;
    a1[22] = 0;
  }
  a1[23] = *(_QWORD *)(a2 + 184);
  *((_OWORD *)a1 + 10) = *(_OWORD *)(a2 + 160);
  a1[22] = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  v19 = a1[24];
  if (v19)
  {
    a1[25] = v19;
    v20 = -1431655765 * ((unint64_t)(a1[26] - v19) >> 2);
    v36 = v19;
    v37 = v20;
    v21 = *((unsigned int *)a1 + 55);
    if ((_DWORD)v21 == -1)
      sub_20AECFAB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBC8[v21])(&v38, a1 + 27);
    a1[24] = 0;
    a1[25] = 0;
    a1[26] = 0;
  }
  a1[27] = *(_QWORD *)(a2 + 216);
  *((_OWORD *)a1 + 12) = *(_OWORD *)(a2 + 192);
  a1[26] = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v22 = a1[28];
  if (v22)
  {
    a1[29] = v22;
    v23 = (unint64_t)(a1[30] - v22) >> 3;
    v36 = v22;
    v37 = v23;
    v24 = *((unsigned int *)a1 + 63);
    if ((_DWORD)v24 == -1)
      sub_20AECFAB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBE8[v24])(&v38, a1 + 31);
    a1[28] = 0;
    a1[29] = 0;
    a1[30] = 0;
  }
  a1[31] = *(_QWORD *)(a2 + 248);
  *((_OWORD *)a1 + 14) = *(_OWORD *)(a2 + 224);
  a1[30] = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  v25 = a1[32];
  if (v25)
  {
    a1[33] = v25;
    v26 = (unint64_t)(a1[34] - v25) >> 3;
    v36 = v25;
    v37 = v26;
    v27 = *((unsigned int *)a1 + 71);
    if ((_DWORD)v27 == -1)
      sub_20AECFAB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBD8[v27])(&v38, a1 + 35);
    a1[32] = 0;
    a1[33] = 0;
    a1[34] = 0;
  }
  a1[35] = *(_QWORD *)(a2 + 280);
  *((_OWORD *)a1 + 16) = *(_OWORD *)(a2 + 256);
  a1[34] = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  v28 = a1[36];
  if (v28)
  {
    a1[37] = v28;
    v29 = -1431655765 * ((unint64_t)(a1[38] - v28) >> 2);
    v36 = v28;
    v37 = v29;
    v30 = *((unsigned int *)a1 + 79);
    if ((_DWORD)v30 == -1)
      sub_20AECFAB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBC8[v30])(&v38, a1 + 39);
    a1[36] = 0;
    a1[37] = 0;
    a1[38] = 0;
  }
  a1[39] = *(_QWORD *)(a2 + 312);
  *((_OWORD *)a1 + 18) = *(_OWORD *)(a2 + 288);
  a1[38] = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  v31 = *(_OWORD *)(a2 + 336);
  *((_OWORD *)a1 + 20) = *(_OWORD *)(a2 + 320);
  *((_OWORD *)a1 + 21) = v31;
  v32 = a1[44];
  if (v32)
  {
    a1[45] = v32;
    v33 = (unint64_t)(a1[46] - v32) >> 2;
    v36 = v32;
    v37 = v33;
    v34 = *((unsigned int *)a1 + 95);
    if ((_DWORD)v34 == -1)
      sub_20AECFAB8();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBB8[v34])(&v38, a1 + 47);
    a1[44] = 0;
    a1[45] = 0;
    a1[46] = 0;
  }
  a1[47] = *(_QWORD *)(a2 + 376);
  *((_OWORD *)a1 + 22) = *(_OWORD *)(a2 + 352);
  a1[46] = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 368) = 0;
  return a1;
}

uint64_t sub_20B0EF8D8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, _DWORD *a7, uint64_t a8, _DWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 *a15, _DWORD *a16, uint64_t a17)
{
  _QWORD *v24;
  __int128 v25;

  v24 = sub_20B0E7D44((_QWORD *)a1, a2);
  *((_DWORD *)v24 + 8) = *a3;
  sub_20B0E7D44(v24 + 5, a4);
  *(_DWORD *)(a1 + 72) = *a5;
  sub_20B0E7D44((_QWORD *)(a1 + 80), a6);
  *(_DWORD *)(a1 + 112) = *a7;
  sub_20B0E7FAC((_QWORD *)(a1 + 120), a8);
  *(_DWORD *)(a1 + 152) = *a9;
  sub_20B0E7FAC((_QWORD *)(a1 + 160), a10);
  sub_20B0E8118((_QWORD *)(a1 + 192), a11);
  sub_20B0E8380((_QWORD *)(a1 + 224), a12);
  sub_20B0E85A0((_QWORD *)(a1 + 256), a13);
  sub_20B0E8118((_QWORD *)(a1 + 288), a14);
  v25 = *a15;
  *(_OWORD *)(a1 + 332) = *(__int128 *)((char *)a15 + 12);
  *(_OWORD *)(a1 + 320) = v25;
  *(_DWORD *)(a1 + 348) = *a16;
  sub_20B0E87C0((_QWORD *)(a1 + 352), a17);
  return a1;
}

void sub_20B0EFA00(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v10 = v7;
  sub_20B0CDE68(v10);
  sub_20B0CDEF4(v9);
  sub_20B0CDF74(v8);
  sub_20B0CDE68(v6);
  sub_20B0CDFF4(v5);
  sub_20B0CDFF4(v4);
  sub_20B0CE070(v3);
  sub_20B0CE070(v2);
  sub_20B0CE070(v1);
  _Unwind_Resume(a1);
}

void sub_20B0EFA78()
{
  JUMPOUT(0x20B0EFA50);
}

void sub_20B0EFA80()
{
  JUMPOUT(0x20B0EFA58);
}

void sub_20B0EFA88(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;

  sub_20B0CE070(v2);
  sub_20B0CE070(v1);
  _Unwind_Resume(a1);
}

void sub_20B0EFAA4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20B0CE070(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B0EFAB8(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  uint64_t *v32;

  v2 = a1[36];
  if (v2)
  {
    a1[37] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[38] - v2) >> 2);
    v30 = v2;
    v31 = v3;
    v4 = *((unsigned int *)a1 + 79);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBC8[v4])(&v32, a1 + 39);
  }
  v5 = a1[32];
  if (v5)
  {
    a1[33] = v5;
    v6 = (unint64_t)(a1[34] - v5) >> 3;
    v30 = v5;
    v31 = v6;
    v7 = *((unsigned int *)a1 + 71);
    if ((_DWORD)v7 == -1)
      sub_20AECFAB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBD8[v7])(&v32, a1 + 35);
  }
  v8 = a1[28];
  if (v8)
  {
    a1[29] = v8;
    v9 = (unint64_t)(a1[30] - v8) >> 3;
    v30 = v8;
    v31 = v9;
    v10 = *((unsigned int *)a1 + 63);
    if ((_DWORD)v10 == -1)
      sub_20AECFAB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBE8[v10])(&v32, a1 + 31);
  }
  v11 = a1[24];
  if (v11)
  {
    a1[25] = v11;
    v12 = -1431655765 * ((unint64_t)(a1[26] - v11) >> 2);
    v30 = v11;
    v31 = v12;
    v13 = *((unsigned int *)a1 + 55);
    if ((_DWORD)v13 == -1)
      sub_20AECFAB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBC8[v13])(&v32, a1 + 27);
  }
  v14 = a1[20];
  if (v14)
  {
    a1[21] = v14;
    v15 = *((_DWORD *)a1 + 44) - v14;
    v30 = v14;
    v31 = v15;
    v16 = *((unsigned int *)a1 + 47);
    if ((_DWORD)v16 == -1)
      sub_20AECFAB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBF8[v16])(&v32, a1 + 23);
  }
  v17 = a1[15];
  if (v17)
  {
    a1[16] = v17;
    v18 = *((_DWORD *)a1 + 34) - v17;
    v30 = v17;
    v31 = v18;
    v19 = *((unsigned int *)a1 + 37);
    if ((_DWORD)v19 == -1)
      sub_20AECFAB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBF8[v19])(&v32, a1 + 18);
  }
  v20 = a1[10];
  if (v20)
  {
    a1[11] = v20;
    v21 = -1431655765 * ((unint64_t)(a1[12] - v20) >> 2);
    v30 = v20;
    v31 = v21;
    v22 = *((unsigned int *)a1 + 27);
    if ((_DWORD)v22 == -1)
      sub_20AECFAB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DC08[v22])(&v32, a1 + 13);
  }
  v23 = a1[5];
  if (v23)
  {
    a1[6] = v23;
    v24 = -1431655765 * ((unint64_t)(a1[7] - v23) >> 2);
    v30 = v23;
    v31 = v24;
    v25 = *((unsigned int *)a1 + 17);
    if ((_DWORD)v25 == -1)
      sub_20AECFAB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DC08[v25])(&v32, a1 + 8);
  }
  v26 = *a1;
  if (*a1)
  {
    a1[1] = v26;
    v27 = -1431655765 * ((unint64_t)(a1[2] - v26) >> 2);
    v30 = v26;
    v31 = v27;
    v28 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v28 == -1)
      sub_20AECFAB8();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DC08[v28])(&v32, a1 + 3);
  }
  return a1;
}

void sub_20B0EFE0C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;

  v9 = 4;
  sub_20B518854(a2[6], &v9);
  v5 = v9;
  if (v9 >= 3)
    sub_20B0DD290(a2 + 2);
  if (v5 >= 4)
    v6 = 4;
  else
    v6 = v5;
  if (v6 < 3)
  {
    sub_20B0EFEFC((uint64_t)&v10, (uint64_t)a2, a3, v6);
    if (v5 < 3)
      return;
  }
  else
  {
    sub_20B0F1468(a2, (uint64_t)a3, v6);
    if (v5 < 3)
      return;
  }
  v7 = a2[4];
  v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v7 - 8);
  if (v8)
    (*(void (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v8);
  a2[4] -= 16;
}

uint64_t *sub_20B0EFEFC(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  float *v7;
  float *v8;
  float *v9;
  uint64_t v10;
  float v11;
  _QWORD *v12;
  char *k;
  uint64_t v14;
  void (*v15)(uint64_t);
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  float v19;
  char *i;
  uint64_t v21;
  void (*v22)(uint64_t);
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  float v26;
  char *j;
  uint64_t v28;
  void (*v29)(uint64_t);
  _QWORD *v30;
  _QWORD *v31;
  float *v32;
  float *v33;
  unint64_t v34;
  float *v35;
  uint64_t v36;
  float v37;
  _QWORD *v38;
  char *ii;
  uint64_t v40;
  void (*v41)(uint64_t);
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  float v45;
  char *m;
  uint64_t v47;
  void (*v48)(uint64_t);
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  float v52;
  char *n;
  uint64_t v54;
  void (*v55)(uint64_t);
  _QWORD *v56;
  _QWORD *v57;
  float *v58;
  float *v59;
  unint64_t v60;
  float *v61;
  uint64_t v62;
  float v63;
  _QWORD *v64;
  char *mm;
  uint64_t v66;
  void (*v67)(uint64_t);
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  float v71;
  char *jj;
  uint64_t v73;
  void (*v74)(uint64_t);
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  float v78;
  char *kk;
  uint64_t v80;
  void (*v81)(uint64_t);
  _QWORD *v82;
  _QWORD *v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _DWORD *v93;
  unint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  _QWORD *v98;
  char *nn;
  uint64_t v100;
  void (*v101)(uint64_t);
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  char *i1;
  uint64_t v106;
  void (*v107)(uint64_t);
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v111;
  char *i2;
  uint64_t v113;
  void (*v114)(uint64_t);
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  _DWORD *v118;
  unint64_t v119;
  _DWORD *v120;
  uint64_t v121;
  _QWORD *v123;
  char *i3;
  uint64_t v125;
  void (*v126)(uint64_t);
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  char *i4;
  uint64_t v131;
  void (*v132)(uint64_t);
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  float *v136;
  unint64_t v137;
  float *v138;
  uint64_t v139;
  float v140;
  _QWORD *v141;
  char *i6;
  uint64_t v143;
  void (*v144)(uint64_t);
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  float v148;
  char *i5;
  uint64_t v150;
  void (*v151)(uint64_t);
  _QWORD *v152;
  _QWORD *v153;
  unint64_t v154;
  _DWORD *v155;
  unint64_t v156;
  _DWORD *v157;
  uint64_t v158;
  _QWORD *v160;
  char *i7;
  uint64_t v162;
  void (*v163)(uint64_t);
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  char *i8;
  uint64_t v168;
  void (*v169)(uint64_t);
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v173;
  char *i9;
  uint64_t v175;
  void (*v176)(uint64_t);
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  std::bad_cast *v182;
  std::bad_cast *v183;
  std::bad_cast *v184;
  std::bad_cast *v185;
  std::bad_cast *v186;
  std::bad_cast *v187;
  std::bad_cast *exception;
  std::bad_cast *v189;
  std::bad_cast *v190;
  std::bad_cast *v191;
  std::bad_cast *v192;
  std::bad_cast *v193;
  std::bad_cast *v194;
  std::bad_cast *v195;
  unint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  float *v199;
  float *v200;
  uint64_t v201;
  uint64_t v202;
  float *v203;
  float *v204;
  uint64_t v205;
  uint64_t v206;
  float *v207;
  float *v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE *v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  _BYTE *v215;
  _BYTE *v216;
  uint64_t v217;
  _DWORD v218[33];
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  unint64_t v223;

  v199 = 0;
  v200 = 0;
  v202 = 0;
  v201 = 0;
  v203 = 0;
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v207 = 0;
  v208 = 0;
  v210 = 0;
  v209 = 0;
  v211 = 0;
  v213 = 0;
  v212 = 0;
  v214 = 0;
  v216 = 0;
  v215 = 0;
  v217 = 0;
  v218[32] = 0;
  LOBYTE(v219) = 0;
  v222 = 0;
  memset(v218, 0, 28);
  memset(&v218[8], 0, 28);
  memset(&v218[16], 0, 28);
  memset(&v218[24], 0, 28);
  v223 = 0;
  sub_20B518BE4(*(_QWORD *)(a2 + 48), &v223);
  v8 = 0;
  v7 = 0;
  if (v223)
  {
    sub_20B0EE07C((uint64_t *)&v199, v223);
    v8 = v199;
    v7 = v200;
  }
  if (v7 != v8)
  {
    v9 = v7;
    while (1)
    {
      v10 = *(_QWORD *)(a2 + 48);
      sub_20B51A6D4(v10, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
        break;
      if ((_DWORD)v196 == 3)
      {
        *v8 = (float)v197;
        v12 = v198;
        v198 = 0;
        if (!v12)
          goto LABEL_21;
        goto LABEL_15;
      }
      if ((_DWORD)v196 != 4)
        goto LABEL_321;
      v11 = *(double *)&v197;
      *v8 = v11;
      v12 = v198;
      v198 = 0;
      if (v12)
        goto LABEL_15;
LABEL_21:
      sub_20B51A6D4(v10, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
      {
        v8[1] = (float)(unint64_t)v197;
        v18 = v198;
        v198 = 0;
        if (!v18)
          goto LABEL_35;
LABEL_29:
        for (i = (char *)v18[4]; i != (char *)v18[6]; i -= 16)
        {
          v22 = (void (*)(uint64_t))*((_QWORD *)i - 2);
          v21 = *((_QWORD *)i - 1);
          v22(v21);
        }
        free(i);
        v23 = (_QWORD *)v18[3];
        if (v23)
        {
          do
          {
            v24 = (_QWORD *)*v23;
            free(v23);
            v23 = v24;
          }
          while (v24);
        }
        free(v18);
        goto LABEL_35;
      }
      if ((_DWORD)v196 == 4)
      {
        v19 = *(double *)&v197;
        v8[1] = v19;
        v18 = v198;
        v198 = 0;
        if (!v18)
          goto LABEL_35;
        goto LABEL_29;
      }
      if ((_DWORD)v196 != 3)
        goto LABEL_321;
      v8[1] = (float)v197;
      v18 = v198;
      v198 = 0;
      if (v18)
        goto LABEL_29;
LABEL_35:
      sub_20B51A6D4(v10, (uint64_t)&v196);
      switch((_DWORD)v196)
      {
        case 2:
          v8[2] = (float)(unint64_t)v197;
          v25 = v198;
          v198 = 0;
          if (v25)
            goto LABEL_43;
          break;
        case 4:
          v26 = *(double *)&v197;
          v8[2] = v26;
          v25 = v198;
          v198 = 0;
          if (v25)
            goto LABEL_43;
          break;
        case 3:
          v8[2] = (float)v197;
          v25 = v198;
          v198 = 0;
          if (v25)
          {
LABEL_43:
            for (j = (char *)v25[4]; j != (char *)v25[6]; j -= 16)
            {
              v29 = (void (*)(uint64_t))*((_QWORD *)j - 2);
              v28 = *((_QWORD *)j - 1);
              v29(v28);
            }
            free(j);
            v30 = (_QWORD *)v25[3];
            if (v30)
            {
              do
              {
                v31 = (_QWORD *)*v30;
                free(v30);
                v30 = v31;
              }
              while (v31);
            }
            free(v25);
          }
          break;
        default:
LABEL_321:
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v189 = std::bad_cast::bad_cast(exception);
          v189->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
          __cxa_throw(v189, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
      }
      v8 += 3;
      if (v8 == v9)
        goto LABEL_49;
    }
    *v8 = (float)(unint64_t)v197;
    v12 = v198;
    v198 = 0;
    if (!v12)
      goto LABEL_21;
LABEL_15:
    for (k = (char *)v12[4]; k != (char *)v12[6]; k -= 16)
    {
      v15 = (void (*)(uint64_t))*((_QWORD *)k - 2);
      v14 = *((_QWORD *)k - 1);
      v15(v14);
    }
    free(k);
    v16 = (_QWORD *)v12[3];
    if (v16)
    {
      do
      {
        v17 = (_QWORD *)*v16;
        free(v16);
        v16 = v17;
      }
      while (v17);
    }
    free(v12);
    goto LABEL_21;
  }
LABEL_49:
  LODWORD(v196) = 0;
  sub_20B518854(*(_QWORD *)(a2 + 48), &v196);
  HIDWORD(v202) = v196;
  v223 = 0xAAAAAAAAAAAAAAABLL * (v204 - v203);
  sub_20B518BE4(*(_QWORD *)(a2 + 48), &v223);
  v33 = v203;
  v32 = v204;
  v34 = 0xAAAAAAAAAAAAAAABLL * (v204 - v203);
  if (v223 <= v34)
  {
    if (v223 < v34)
    {
      v32 = &v203[3 * v223];
      v204 = v32;
    }
  }
  else
  {
    sub_20B0EE07C((uint64_t *)&v203, v223 - v34);
    v33 = v203;
    v32 = v204;
  }
  if (v32 != v33)
  {
    v35 = v32;
    while (1)
    {
      v36 = *(_QWORD *)(a2 + 48);
      sub_20B51A6D4(v36, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
        break;
      if ((_DWORD)v196 == 3)
      {
        *v33 = (float)v197;
        v38 = v198;
        v198 = 0;
        if (!v38)
          goto LABEL_71;
        goto LABEL_65;
      }
      if ((_DWORD)v196 != 4)
        goto LABEL_322;
      v37 = *(double *)&v197;
      *v33 = v37;
      v38 = v198;
      v198 = 0;
      if (v38)
        goto LABEL_65;
LABEL_71:
      sub_20B51A6D4(v36, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
      {
        v33[1] = (float)(unint64_t)v197;
        v44 = v198;
        v198 = 0;
        if (!v44)
          goto LABEL_85;
LABEL_79:
        for (m = (char *)v44[4]; m != (char *)v44[6]; m -= 16)
        {
          v48 = (void (*)(uint64_t))*((_QWORD *)m - 2);
          v47 = *((_QWORD *)m - 1);
          v48(v47);
        }
        free(m);
        v49 = (_QWORD *)v44[3];
        if (v49)
        {
          do
          {
            v50 = (_QWORD *)*v49;
            free(v49);
            v49 = v50;
          }
          while (v50);
        }
        free(v44);
        goto LABEL_85;
      }
      if ((_DWORD)v196 == 4)
      {
        v45 = *(double *)&v197;
        v33[1] = v45;
        v44 = v198;
        v198 = 0;
        if (!v44)
          goto LABEL_85;
        goto LABEL_79;
      }
      if ((_DWORD)v196 != 3)
        goto LABEL_322;
      v33[1] = (float)v197;
      v44 = v198;
      v198 = 0;
      if (v44)
        goto LABEL_79;
LABEL_85:
      sub_20B51A6D4(v36, (uint64_t)&v196);
      switch((_DWORD)v196)
      {
        case 2:
          v33[2] = (float)(unint64_t)v197;
          v51 = v198;
          v198 = 0;
          if (v51)
            goto LABEL_93;
          break;
        case 4:
          v52 = *(double *)&v197;
          v33[2] = v52;
          v51 = v198;
          v198 = 0;
          if (v51)
            goto LABEL_93;
          break;
        case 3:
          v33[2] = (float)v197;
          v51 = v198;
          v198 = 0;
          if (v51)
          {
LABEL_93:
            for (n = (char *)v51[4]; n != (char *)v51[6]; n -= 16)
            {
              v55 = (void (*)(uint64_t))*((_QWORD *)n - 2);
              v54 = *((_QWORD *)n - 1);
              v55(v54);
            }
            free(n);
            v56 = (_QWORD *)v51[3];
            if (v56)
            {
              do
              {
                v57 = (_QWORD *)*v56;
                free(v56);
                v56 = v57;
              }
              while (v57);
            }
            free(v51);
          }
          break;
        default:
LABEL_322:
          v190 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v190->__vftable = 0;
          v191 = std::bad_cast::bad_cast(v190);
          v191->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
          __cxa_throw(v191, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
      }
      v33 += 3;
      if (v33 == v35)
        goto LABEL_99;
    }
    *v33 = (float)(unint64_t)v197;
    v38 = v198;
    v198 = 0;
    if (!v38)
      goto LABEL_71;
LABEL_65:
    for (ii = (char *)v38[4]; ii != (char *)v38[6]; ii -= 16)
    {
      v41 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
      v40 = *((_QWORD *)ii - 1);
      v41(v40);
    }
    free(ii);
    v42 = (_QWORD *)v38[3];
    if (v42)
    {
      do
      {
        v43 = (_QWORD *)*v42;
        free(v42);
        v42 = v43;
      }
      while (v43);
    }
    free(v38);
    goto LABEL_71;
  }
LABEL_99:
  LODWORD(v196) = 0;
  sub_20B518854(*(_QWORD *)(a2 + 48), &v196);
  HIDWORD(v206) = v196;
  v223 = 0xAAAAAAAAAAAAAAABLL * (v208 - v207);
  sub_20B518BE4(*(_QWORD *)(a2 + 48), &v223);
  v59 = v207;
  v58 = v208;
  v60 = 0xAAAAAAAAAAAAAAABLL * (v208 - v207);
  if (v223 <= v60)
  {
    if (v223 < v60)
    {
      v58 = &v207[3 * v223];
      v208 = v58;
    }
  }
  else
  {
    sub_20B0EE07C((uint64_t *)&v207, v223 - v60);
    v59 = v207;
    v58 = v208;
  }
  if (v58 != v59)
  {
    v61 = v58;
    while (1)
    {
      v62 = *(_QWORD *)(a2 + 48);
      sub_20B51A6D4(v62, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
        break;
      if ((_DWORD)v196 == 3)
      {
        *v59 = (float)v197;
        v64 = v198;
        v198 = 0;
        if (!v64)
          goto LABEL_121;
        goto LABEL_115;
      }
      if ((_DWORD)v196 != 4)
        goto LABEL_323;
      v63 = *(double *)&v197;
      *v59 = v63;
      v64 = v198;
      v198 = 0;
      if (v64)
        goto LABEL_115;
LABEL_121:
      sub_20B51A6D4(v62, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
      {
        v59[1] = (float)(unint64_t)v197;
        v70 = v198;
        v198 = 0;
        if (!v70)
          goto LABEL_135;
LABEL_129:
        for (jj = (char *)v70[4]; jj != (char *)v70[6]; jj -= 16)
        {
          v74 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
          v73 = *((_QWORD *)jj - 1);
          v74(v73);
        }
        free(jj);
        v75 = (_QWORD *)v70[3];
        if (v75)
        {
          do
          {
            v76 = (_QWORD *)*v75;
            free(v75);
            v75 = v76;
          }
          while (v76);
        }
        free(v70);
        goto LABEL_135;
      }
      if ((_DWORD)v196 == 4)
      {
        v71 = *(double *)&v197;
        v59[1] = v71;
        v70 = v198;
        v198 = 0;
        if (!v70)
          goto LABEL_135;
        goto LABEL_129;
      }
      if ((_DWORD)v196 != 3)
        goto LABEL_323;
      v59[1] = (float)v197;
      v70 = v198;
      v198 = 0;
      if (v70)
        goto LABEL_129;
LABEL_135:
      sub_20B51A6D4(v62, (uint64_t)&v196);
      switch((_DWORD)v196)
      {
        case 2:
          v59[2] = (float)(unint64_t)v197;
          v77 = v198;
          v198 = 0;
          if (v77)
            goto LABEL_143;
          break;
        case 4:
          v78 = *(double *)&v197;
          v59[2] = v78;
          v77 = v198;
          v198 = 0;
          if (v77)
            goto LABEL_143;
          break;
        case 3:
          v59[2] = (float)v197;
          v77 = v198;
          v198 = 0;
          if (v77)
          {
LABEL_143:
            for (kk = (char *)v77[4]; kk != (char *)v77[6]; kk -= 16)
            {
              v81 = (void (*)(uint64_t))*((_QWORD *)kk - 2);
              v80 = *((_QWORD *)kk - 1);
              v81(v80);
            }
            free(kk);
            v82 = (_QWORD *)v77[3];
            if (v82)
            {
              do
              {
                v83 = (_QWORD *)*v82;
                free(v82);
                v82 = v83;
              }
              while (v83);
            }
            free(v77);
          }
          break;
        default:
LABEL_323:
          v192 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v192->__vftable = 0;
          v193 = std::bad_cast::bad_cast(v192);
          v193->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
          __cxa_throw(v193, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
      }
      v59 += 3;
      if (v59 == v61)
        goto LABEL_149;
    }
    *v59 = (float)(unint64_t)v197;
    v64 = v198;
    v198 = 0;
    if (!v64)
      goto LABEL_121;
LABEL_115:
    for (mm = (char *)v64[4]; mm != (char *)v64[6]; mm -= 16)
    {
      v67 = (void (*)(uint64_t))*((_QWORD *)mm - 2);
      v66 = *((_QWORD *)mm - 1);
      v67(v66);
    }
    free(mm);
    v68 = (_QWORD *)v64[3];
    if (v68)
    {
      do
      {
        v69 = (_QWORD *)*v68;
        free(v68);
        v68 = v69;
      }
      while (v69);
    }
    free(v64);
    goto LABEL_121;
  }
LABEL_149:
  LODWORD(v196) = 0;
  sub_20B518854(*(_QWORD *)(a2 + 48), &v196);
  HIDWORD(v210) = v196;
  v196 = v212 - v211;
  sub_20B518BE4(*(_QWORD *)(a2 + 48), &v196);
  v84 = v212;
  v85 = v211;
  if (v196 <= v212 - v211)
  {
    if (v196 < v212 - v211)
    {
      v84 = &v211[v196];
      v212 = &v211[v196];
    }
  }
  else
  {
    sub_20B08A3B0((uint64_t)&v211, v196 - (v212 - v211));
    v85 = v211;
    v84 = v212;
  }
  v86 = *(_QWORD *)(a2 + 48);
  v87 = v84 - v85;
  if (v84 != v85)
  {
    do
    {
      sub_20B51852C(v86, v85++);
      --v87;
    }
    while (v87);
    v86 = *(_QWORD *)(a2 + 48);
  }
  LODWORD(v196) = 0;
  sub_20B518854(v86, &v196);
  HIDWORD(v214) = v196;
  v196 = v216 - v215;
  sub_20B518BE4(*(_QWORD *)(a2 + 48), &v196);
  v88 = v216;
  v89 = v215;
  if (v196 <= v216 - v215)
  {
    if (v196 < v216 - v215)
    {
      v88 = &v215[v196];
      v216 = &v215[v196];
    }
  }
  else
  {
    sub_20B08A3B0((uint64_t)&v215, v196 - (v216 - v215));
    v89 = v215;
    v88 = v216;
  }
  v90 = *(_QWORD *)(a2 + 48);
  v91 = v88 - v89;
  if (v88 != v89)
  {
    do
    {
      sub_20B51852C(v90, v89++);
      --v91;
    }
    while (v91);
    v90 = *(_QWORD *)(a2 + 48);
  }
  v223 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v218[3] - *(_QWORD *)&v218[1]) >> 2);
  sub_20B518BE4(v90, &v223);
  v92 = *(_QWORD *)&v218[3];
  v93 = *(_DWORD **)&v218[1];
  v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v218[3] - *(_QWORD *)&v218[1]) >> 2);
  if (v223 <= v94)
  {
    if (v223 < v94)
    {
      v92 = *(_QWORD *)&v218[1] + 12 * v223;
      *(_QWORD *)&v218[3] = v92;
    }
  }
  else
  {
    sub_20B0EE5E4((uint64_t *)&v218[1], v223 - v94);
    v93 = *(_DWORD **)&v218[1];
    v92 = *(_QWORD *)&v218[3];
  }
  if ((_DWORD *)v92 != v93)
  {
    v95 = (_DWORD *)v92;
    do
    {
      v96 = *(_QWORD *)(a2 + 48);
      sub_20B51A6D4(v96, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197) != 0)
        goto LABEL_318;
      *v93 = v197;
      v98 = v198;
      v198 = 0;
      if (v98)
      {
        for (nn = (char *)v98[4]; nn != (char *)v98[6]; nn -= 16)
        {
          v101 = (void (*)(uint64_t))*((_QWORD *)nn - 2);
          v100 = *((_QWORD *)nn - 1);
          v101(v100);
        }
        free(nn);
        v102 = (_QWORD *)v98[3];
        if (v102)
        {
          do
          {
            v103 = (_QWORD *)*v102;
            free(v102);
            v102 = v103;
          }
          while (v103);
        }
        free(v98);
      }
      sub_20B51A6D4(v96, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197))
        goto LABEL_318;
      v93[1] = v197;
      v104 = v198;
      v198 = 0;
      if (v104)
      {
        for (i1 = (char *)v104[4]; i1 != (char *)v104[6]; i1 -= 16)
        {
          v107 = (void (*)(uint64_t))*((_QWORD *)i1 - 2);
          v106 = *((_QWORD *)i1 - 1);
          v107(v106);
        }
        free(i1);
        v108 = (_QWORD *)v104[3];
        if (v108)
        {
          do
          {
            v109 = (_QWORD *)*v108;
            free(v108);
            v108 = v109;
          }
          while (v109);
        }
        free(v104);
      }
      sub_20B51A6D4(v96, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197) != 0)
      {
LABEL_318:
        v182 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v182->__vftable = 0;
        v183 = std::bad_cast::bad_cast(v182);
        v183->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
        __cxa_throw(v183, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
      }
      v93[2] = v197;
      v111 = v198;
      v198 = 0;
      if (v111)
      {
        for (i2 = (char *)v111[4]; i2 != (char *)v111[6]; i2 -= 16)
        {
          v114 = (void (*)(uint64_t))*((_QWORD *)i2 - 2);
          v113 = *((_QWORD *)i2 - 1);
          v114(v113);
        }
        free(i2);
        v115 = (_QWORD *)v111[3];
        if (v115)
        {
          do
          {
            v116 = (_QWORD *)*v115;
            free(v115);
            v115 = v116;
          }
          while (v116);
        }
        free(v111);
      }
      v93 += 3;
    }
    while (v93 != v95);
  }
  v223 = (uint64_t)(*(_QWORD *)&v218[11] - *(_QWORD *)&v218[9]) >> 3;
  sub_20B518BE4(*(_QWORD *)(a2 + 48), &v223);
  v117 = *(_QWORD *)&v218[11];
  v118 = *(_DWORD **)&v218[9];
  v119 = (uint64_t)(*(_QWORD *)&v218[11] - *(_QWORD *)&v218[9]) >> 3;
  if (v223 <= v119)
  {
    if (v223 < v119)
    {
      v117 = *(_QWORD *)&v218[9] + 8 * v223;
      *(_QWORD *)&v218[11] = v117;
    }
  }
  else
  {
    sub_20B0EE940((uint64_t)&v218[9], v223 - v119);
    v118 = *(_DWORD **)&v218[9];
    v117 = *(_QWORD *)&v218[11];
  }
  if ((_DWORD *)v117 != v118)
  {
    v120 = (_DWORD *)v117;
    do
    {
      v121 = *(_QWORD *)(a2 + 48);
      sub_20B51A6D4(v121, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197) != 0)
        goto LABEL_320;
      *v118 = v197;
      v123 = v198;
      v198 = 0;
      if (v123)
      {
        for (i3 = (char *)v123[4]; i3 != (char *)v123[6]; i3 -= 16)
        {
          v126 = (void (*)(uint64_t))*((_QWORD *)i3 - 2);
          v125 = *((_QWORD *)i3 - 1);
          v126(v125);
        }
        free(i3);
        v127 = (_QWORD *)v123[3];
        if (v127)
        {
          do
          {
            v128 = (_QWORD *)*v127;
            free(v127);
            v127 = v128;
          }
          while (v128);
        }
        free(v123);
      }
      sub_20B51A6D4(v121, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197))
      {
LABEL_320:
        v186 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v186->__vftable = 0;
        v187 = std::bad_cast::bad_cast(v186);
        v187->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
        __cxa_throw(v187, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
      }
      v118[1] = v197;
      v129 = v198;
      v198 = 0;
      if (v129)
      {
        for (i4 = (char *)v129[4]; i4 != (char *)v129[6]; i4 -= 16)
        {
          v132 = (void (*)(uint64_t))*((_QWORD *)i4 - 2);
          v131 = *((_QWORD *)i4 - 1);
          v132(v131);
        }
        free(i4);
        v133 = (_QWORD *)v129[3];
        if (v133)
        {
          do
          {
            v134 = (_QWORD *)*v133;
            free(v133);
            v133 = v134;
          }
          while (v134);
        }
        free(v129);
      }
      v118 += 2;
    }
    while (v118 != v120);
  }
  v223 = (uint64_t)(*(_QWORD *)&v218[19] - *(_QWORD *)&v218[17]) >> 3;
  sub_20B518BE4(*(_QWORD *)(a2 + 48), &v223);
  v135 = *(_QWORD *)&v218[19];
  v136 = *(float **)&v218[17];
  v137 = (uint64_t)(*(_QWORD *)&v218[19] - *(_QWORD *)&v218[17]) >> 3;
  if (v223 <= v137)
  {
    if (v223 < v137)
    {
      v135 = *(_QWORD *)&v218[17] + 8 * v223;
      *(_QWORD *)&v218[19] = v135;
    }
  }
  else
  {
    sub_20B0EEC78((uint64_t)&v218[17], v223 - v137);
    v136 = *(float **)&v218[17];
    v135 = *(_QWORD *)&v218[19];
  }
  if ((float *)v135 != v136)
  {
    v138 = (float *)v135;
    while (1)
    {
      v139 = *(_QWORD *)(a2 + 48);
      sub_20B51A6D4(v139, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
        break;
      if ((_DWORD)v196 == 3)
      {
        *v136 = (float)v197;
        v141 = v198;
        v198 = 0;
        if (!v141)
          goto LABEL_255;
        goto LABEL_249;
      }
      if ((_DWORD)v196 != 4)
        goto LABEL_324;
      v140 = *(double *)&v197;
      *v136 = v140;
      v141 = v198;
      v198 = 0;
      if (v141)
        goto LABEL_249;
LABEL_255:
      sub_20B51A6D4(v139, (uint64_t)&v196);
      switch((_DWORD)v196)
      {
        case 2:
          v136[1] = (float)(unint64_t)v197;
          v147 = v198;
          v198 = 0;
          if (v147)
            goto LABEL_263;
          break;
        case 4:
          v148 = *(double *)&v197;
          v136[1] = v148;
          v147 = v198;
          v198 = 0;
          if (v147)
            goto LABEL_263;
          break;
        case 3:
          v136[1] = (float)v197;
          v147 = v198;
          v198 = 0;
          if (v147)
          {
LABEL_263:
            for (i5 = (char *)v147[4]; i5 != (char *)v147[6]; i5 -= 16)
            {
              v151 = (void (*)(uint64_t))*((_QWORD *)i5 - 2);
              v150 = *((_QWORD *)i5 - 1);
              v151(v150);
            }
            free(i5);
            v152 = (_QWORD *)v147[3];
            if (v152)
            {
              do
              {
                v153 = (_QWORD *)*v152;
                free(v152);
                v152 = v153;
              }
              while (v153);
            }
            free(v147);
          }
          break;
        default:
LABEL_324:
          v194 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v194->__vftable = 0;
          v195 = std::bad_cast::bad_cast(v194);
          v195->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
          __cxa_throw(v195, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
      }
      v136 += 2;
      if (v136 == v138)
        goto LABEL_269;
    }
    *v136 = (float)(unint64_t)v197;
    v141 = v198;
    v198 = 0;
    if (!v141)
      goto LABEL_255;
LABEL_249:
    for (i6 = (char *)v141[4]; i6 != (char *)v141[6]; i6 -= 16)
    {
      v144 = (void (*)(uint64_t))*((_QWORD *)i6 - 2);
      v143 = *((_QWORD *)i6 - 1);
      v144(v143);
    }
    free(i6);
    v145 = (_QWORD *)v141[3];
    if (v145)
    {
      do
      {
        v146 = (_QWORD *)*v145;
        free(v145);
        v145 = v146;
      }
      while (v146);
    }
    free(v141);
    goto LABEL_255;
  }
LABEL_269:
  v223 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v218[27] - *(_QWORD *)&v218[25]) >> 2);
  sub_20B518BE4(*(_QWORD *)(a2 + 48), &v223);
  v154 = *(_QWORD *)&v218[27];
  v155 = *(_DWORD **)&v218[25];
  v156 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v218[27] - *(_QWORD *)&v218[25]) >> 2);
  if (v223 <= v156)
  {
    if (v223 < v156)
    {
      v154 = *(_QWORD *)&v218[25] + 12 * v223;
      *(_QWORD *)&v218[27] = v154;
    }
  }
  else
  {
    sub_20B0EE5E4((uint64_t *)&v218[25], v223 - v156);
    v155 = *(_DWORD **)&v218[25];
    v154 = *(_QWORD *)&v218[27];
  }
  if ((_DWORD *)v154 != v155)
  {
    v157 = (_DWORD *)v154;
    do
    {
      v158 = *(_QWORD *)(a2 + 48);
      sub_20B51A6D4(v158, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197) != 0)
        goto LABEL_319;
      *v155 = v197;
      v160 = v198;
      v198 = 0;
      if (v160)
      {
        for (i7 = (char *)v160[4]; i7 != (char *)v160[6]; i7 -= 16)
        {
          v163 = (void (*)(uint64_t))*((_QWORD *)i7 - 2);
          v162 = *((_QWORD *)i7 - 1);
          v163(v162);
        }
        free(i7);
        v164 = (_QWORD *)v160[3];
        if (v164)
        {
          do
          {
            v165 = (_QWORD *)*v164;
            free(v164);
            v164 = v165;
          }
          while (v165);
        }
        free(v160);
      }
      sub_20B51A6D4(v158, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197))
        goto LABEL_319;
      v155[1] = v197;
      v166 = v198;
      v198 = 0;
      if (v166)
      {
        for (i8 = (char *)v166[4]; i8 != (char *)v166[6]; i8 -= 16)
        {
          v169 = (void (*)(uint64_t))*((_QWORD *)i8 - 2);
          v168 = *((_QWORD *)i8 - 1);
          v169(v168);
        }
        free(i8);
        v170 = (_QWORD *)v166[3];
        if (v170)
        {
          do
          {
            v171 = (_QWORD *)*v170;
            free(v170);
            v170 = v171;
          }
          while (v171);
        }
        free(v166);
      }
      sub_20B51A6D4(v158, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197) != 0)
      {
LABEL_319:
        v184 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v184->__vftable = 0;
        v185 = std::bad_cast::bad_cast(v184);
        v185->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
        __cxa_throw(v185, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
      }
      v155[2] = v197;
      v173 = v198;
      v198 = 0;
      if (v173)
      {
        for (i9 = (char *)v173[4]; i9 != (char *)v173[6]; i9 -= 16)
        {
          v176 = (void (*)(uint64_t))*((_QWORD *)i9 - 2);
          v175 = *((_QWORD *)i9 - 1);
          v176(v175);
        }
        free(i9);
        v177 = (_QWORD *)v173[3];
        if (v177)
        {
          do
          {
            v178 = (_QWORD *)*v177;
            free(v177);
            v177 = v178;
          }
          while (v178);
        }
        free(v173);
      }
      v155 += 3;
    }
    while (v155 != v157);
  }
  if (a4 >= 2)
  {
    LOBYTE(v223) = 0;
    sub_20B51852C(*(_QWORD *)(a2 + 48), &v223);
    if ((_BYTE)v223)
    {
      if (!v222)
      {
        v219 = 0;
        v220 = 0;
        v221 = 0;
        v222 = 1;
      }
      LODWORD(v196) = 1;
      sub_20B518854(*(_QWORD *)(a2 + 48), &v196);
      v179 = *(_QWORD *)(a2 + 48);
      sub_20B518CC0(v179, (float *)&v219);
      sub_20B518CC0(v179, (float *)&v219 + 1);
      sub_20B518CC0(v179, (float *)&v220);
      v180 = *(_QWORD *)(a2 + 48);
      sub_20B518CC0(v180, (float *)&v220 + 1);
      sub_20B518CC0(v180, (float *)&v221);
      sub_20B518CC0(v180, (float *)&v221 + 1);
    }
    else if (v222)
    {
      v222 = 0;
    }
  }
  sub_20B0EF1E0((uint64_t)&v196, (uint64_t)&v199);
  sub_20B0EF324(a3, (uint64_t)&v196);
  sub_20B0CDABC((uint64_t *)&v196);
  return sub_20B0EFAB8((uint64_t *)&v199);
}

void sub_20B0F130C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F1320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B51CA64((uint64_t)&a10);
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F13E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F13F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F1408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F1468(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  float *v6;
  float *v7;
  unint64_t v8;
  float *v9;
  uint64_t v10;
  float v11;
  _QWORD *v12;
  char *k;
  uint64_t v14;
  void (*v15)(uint64_t);
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  float v19;
  char *i;
  uint64_t v21;
  void (*v22)(uint64_t);
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  float v26;
  char *j;
  uint64_t v28;
  void (*v29)(uint64_t);
  _QWORD *v30;
  _QWORD *v31;
  float *v32;
  float *v33;
  unint64_t v34;
  float *v35;
  uint64_t v36;
  float v37;
  _QWORD *v38;
  char *ii;
  uint64_t v40;
  void (*v41)(uint64_t);
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  float v45;
  char *m;
  uint64_t v47;
  void (*v48)(uint64_t);
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  float v52;
  char *n;
  uint64_t v54;
  void (*v55)(uint64_t);
  _QWORD *v56;
  _QWORD *v57;
  float *v58;
  float *v59;
  unint64_t v60;
  float *v61;
  uint64_t v62;
  float v63;
  _QWORD *v64;
  char *mm;
  uint64_t v66;
  void (*v67)(uint64_t);
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  float v71;
  char *jj;
  uint64_t v73;
  void (*v74)(uint64_t);
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  float v78;
  char *kk;
  uint64_t v80;
  void (*v81)(uint64_t);
  _QWORD *v82;
  _QWORD *v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  unint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  _QWORD *v98;
  char *nn;
  uint64_t v100;
  void (*v101)(uint64_t);
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v105;
  char *i1;
  uint64_t v107;
  void (*v108)(uint64_t);
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v112;
  char *i2;
  uint64_t v114;
  void (*v115)(uint64_t);
  _QWORD *v116;
  _QWORD *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  _QWORD *v124;
  char *i3;
  uint64_t v126;
  void (*v127)(uint64_t);
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v131;
  char *i4;
  uint64_t v133;
  void (*v134)(uint64_t);
  _QWORD *v135;
  _QWORD *v136;
  float *v137;
  float *v138;
  unint64_t v139;
  float *v140;
  uint64_t v141;
  float v142;
  _QWORD *v143;
  char *i6;
  uint64_t v145;
  void (*v146)(uint64_t);
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  float v150;
  char *i5;
  uint64_t v152;
  void (*v153)(uint64_t);
  _QWORD *v154;
  _QWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  unint64_t v158;
  _DWORD *v159;
  uint64_t v160;
  _QWORD *v162;
  char *i7;
  uint64_t v164;
  void (*v165)(uint64_t);
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v169;
  char *i8;
  uint64_t v171;
  void (*v172)(uint64_t);
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v176;
  char *i9;
  uint64_t v178;
  void (*v179)(uint64_t);
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  int32x2_t v189;
  float *v190;
  float *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  std::bad_cast *v196;
  std::bad_cast *v197;
  std::bad_cast *v198;
  std::bad_cast *v199;
  std::bad_cast *v200;
  std::bad_cast *v201;
  std::bad_cast *exception;
  std::bad_cast *v203;
  std::bad_cast *v204;
  std::bad_cast *v205;
  std::bad_cast *v206;
  std::bad_cast *v207;
  std::bad_cast *v208;
  std::bad_cast *v209;
  unint64_t v210;
  _BYTE v211[24];
  _QWORD *v212;

  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  sub_20B518BE4(a1[6], &v210);
  v7 = *(float **)a2;
  v6 = *(float **)(a2 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a2) >> 2);
  if (v210 <= v8)
  {
    if (v210 < v8)
    {
      v6 = &v7[3 * v210];
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    sub_20B0EE07C((uint64_t *)a2, v210 - v8);
    v7 = *(float **)a2;
    v6 = *(float **)(a2 + 8);
  }
  if (v6 != v7)
  {
    v9 = v6;
    while (1)
    {
      v10 = a1[6];
      sub_20B51A6D4(v10, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
        break;
      if (*(_DWORD *)v211 == 3)
      {
        *v7 = (float)*(uint64_t *)&v211[8];
        v12 = v212;
        v212 = 0;
        if (!v12)
          goto LABEL_23;
        goto LABEL_17;
      }
      if (*(_DWORD *)v211 != 4)
        goto LABEL_346;
      v11 = *(double *)&v211[8];
      *v7 = v11;
      v12 = v212;
      v212 = 0;
      if (v12)
        goto LABEL_17;
LABEL_23:
      sub_20B51A6D4(v10, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
      {
        v7[1] = (float)*(unint64_t *)&v211[8];
        v18 = v212;
        v212 = 0;
        if (!v18)
          goto LABEL_37;
LABEL_31:
        for (i = (char *)v18[4]; i != (char *)v18[6]; i -= 16)
        {
          v22 = (void (*)(uint64_t))*((_QWORD *)i - 2);
          v21 = *((_QWORD *)i - 1);
          v22(v21);
        }
        free(i);
        v23 = (_QWORD *)v18[3];
        if (v23)
        {
          do
          {
            v24 = (_QWORD *)*v23;
            free(v23);
            v23 = v24;
          }
          while (v24);
        }
        free(v18);
        goto LABEL_37;
      }
      if (*(_DWORD *)v211 == 4)
      {
        v19 = *(double *)&v211[8];
        v7[1] = v19;
        v18 = v212;
        v212 = 0;
        if (!v18)
          goto LABEL_37;
        goto LABEL_31;
      }
      if (*(_DWORD *)v211 != 3)
        goto LABEL_346;
      v7[1] = (float)*(uint64_t *)&v211[8];
      v18 = v212;
      v212 = 0;
      if (v18)
        goto LABEL_31;
LABEL_37:
      sub_20B51A6D4(v10, (uint64_t)v211);
      switch(*(_DWORD *)v211)
      {
        case 2:
          v7[2] = (float)*(unint64_t *)&v211[8];
          v25 = v212;
          v212 = 0;
          if (v25)
            goto LABEL_45;
          break;
        case 4:
          v26 = *(double *)&v211[8];
          v7[2] = v26;
          v25 = v212;
          v212 = 0;
          if (v25)
            goto LABEL_45;
          break;
        case 3:
          v7[2] = (float)*(uint64_t *)&v211[8];
          v25 = v212;
          v212 = 0;
          if (v25)
          {
LABEL_45:
            for (j = (char *)v25[4]; j != (char *)v25[6]; j -= 16)
            {
              v29 = (void (*)(uint64_t))*((_QWORD *)j - 2);
              v28 = *((_QWORD *)j - 1);
              v29(v28);
            }
            free(j);
            v30 = (_QWORD *)v25[3];
            if (v30)
            {
              do
              {
                v31 = (_QWORD *)*v30;
                free(v30);
                v30 = v31;
              }
              while (v31);
            }
            free(v25);
          }
          break;
        default:
LABEL_346:
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v203 = std::bad_cast::bad_cast(exception);
          v203->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
          __cxa_throw(v203, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
      }
      v7 += 3;
      if (v7 == v9)
        goto LABEL_51;
    }
    *v7 = (float)*(unint64_t *)&v211[8];
    v12 = v212;
    v212 = 0;
    if (!v12)
      goto LABEL_23;
LABEL_17:
    for (k = (char *)v12[4]; k != (char *)v12[6]; k -= 16)
    {
      v15 = (void (*)(uint64_t))*((_QWORD *)k - 2);
      v14 = *((_QWORD *)k - 1);
      v15(v14);
    }
    free(k);
    v16 = (_QWORD *)v12[3];
    if (v16)
    {
      do
      {
        v17 = (_QWORD *)*v16;
        free(v16);
        v16 = v17;
      }
      while (v17);
    }
    free(v12);
    goto LABEL_23;
  }
LABEL_51:
  *(_DWORD *)v211 = 0;
  sub_20B518854(a1[6], v211);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)v211;
  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  sub_20B518BE4(a1[6], &v210);
  v33 = *(float **)(a2 + 40);
  v32 = *(float **)(a2 + 48);
  v34 = 0xAAAAAAAAAAAAAAABLL * (v32 - v33);
  if (v210 <= v34)
  {
    if (v210 < v34)
    {
      v32 = &v33[3 * v210];
      *(_QWORD *)(a2 + 48) = v32;
    }
  }
  else
  {
    sub_20B0EE07C((uint64_t *)(a2 + 40), v210 - v34);
    v33 = *(float **)(a2 + 40);
    v32 = *(float **)(a2 + 48);
  }
  if (v32 != v33)
  {
    v35 = v32;
    while (1)
    {
      v36 = a1[6];
      sub_20B51A6D4(v36, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
        break;
      if (*(_DWORD *)v211 == 3)
      {
        *v33 = (float)*(uint64_t *)&v211[8];
        v38 = v212;
        v212 = 0;
        if (!v38)
          goto LABEL_73;
        goto LABEL_67;
      }
      if (*(_DWORD *)v211 != 4)
        goto LABEL_347;
      v37 = *(double *)&v211[8];
      *v33 = v37;
      v38 = v212;
      v212 = 0;
      if (v38)
        goto LABEL_67;
LABEL_73:
      sub_20B51A6D4(v36, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
      {
        v33[1] = (float)*(unint64_t *)&v211[8];
        v44 = v212;
        v212 = 0;
        if (!v44)
          goto LABEL_87;
LABEL_81:
        for (m = (char *)v44[4]; m != (char *)v44[6]; m -= 16)
        {
          v48 = (void (*)(uint64_t))*((_QWORD *)m - 2);
          v47 = *((_QWORD *)m - 1);
          v48(v47);
        }
        free(m);
        v49 = (_QWORD *)v44[3];
        if (v49)
        {
          do
          {
            v50 = (_QWORD *)*v49;
            free(v49);
            v49 = v50;
          }
          while (v50);
        }
        free(v44);
        goto LABEL_87;
      }
      if (*(_DWORD *)v211 == 4)
      {
        v45 = *(double *)&v211[8];
        v33[1] = v45;
        v44 = v212;
        v212 = 0;
        if (!v44)
          goto LABEL_87;
        goto LABEL_81;
      }
      if (*(_DWORD *)v211 != 3)
        goto LABEL_347;
      v33[1] = (float)*(uint64_t *)&v211[8];
      v44 = v212;
      v212 = 0;
      if (v44)
        goto LABEL_81;
LABEL_87:
      sub_20B51A6D4(v36, (uint64_t)v211);
      switch(*(_DWORD *)v211)
      {
        case 2:
          v33[2] = (float)*(unint64_t *)&v211[8];
          v51 = v212;
          v212 = 0;
          if (v51)
            goto LABEL_95;
          break;
        case 4:
          v52 = *(double *)&v211[8];
          v33[2] = v52;
          v51 = v212;
          v212 = 0;
          if (v51)
            goto LABEL_95;
          break;
        case 3:
          v33[2] = (float)*(uint64_t *)&v211[8];
          v51 = v212;
          v212 = 0;
          if (v51)
          {
LABEL_95:
            for (n = (char *)v51[4]; n != (char *)v51[6]; n -= 16)
            {
              v55 = (void (*)(uint64_t))*((_QWORD *)n - 2);
              v54 = *((_QWORD *)n - 1);
              v55(v54);
            }
            free(n);
            v56 = (_QWORD *)v51[3];
            if (v56)
            {
              do
              {
                v57 = (_QWORD *)*v56;
                free(v56);
                v56 = v57;
              }
              while (v57);
            }
            free(v51);
          }
          break;
        default:
LABEL_347:
          v204 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v204->__vftable = 0;
          v205 = std::bad_cast::bad_cast(v204);
          v205->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
          __cxa_throw(v205, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
      }
      v33 += 3;
      if (v33 == v35)
        goto LABEL_101;
    }
    *v33 = (float)*(unint64_t *)&v211[8];
    v38 = v212;
    v212 = 0;
    if (!v38)
      goto LABEL_73;
LABEL_67:
    for (ii = (char *)v38[4]; ii != (char *)v38[6]; ii -= 16)
    {
      v41 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
      v40 = *((_QWORD *)ii - 1);
      v41(v40);
    }
    free(ii);
    v42 = (_QWORD *)v38[3];
    if (v42)
    {
      do
      {
        v43 = (_QWORD *)*v42;
        free(v42);
        v42 = v43;
      }
      while (v43);
    }
    free(v38);
    goto LABEL_73;
  }
LABEL_101:
  *(_DWORD *)v211 = 0;
  sub_20B518854(a1[6], v211);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)v211;
  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  sub_20B518BE4(a1[6], &v210);
  v59 = *(float **)(a2 + 80);
  v58 = *(float **)(a2 + 88);
  v60 = 0xAAAAAAAAAAAAAAABLL * (v58 - v59);
  if (v210 <= v60)
  {
    if (v210 < v60)
    {
      v58 = &v59[3 * v210];
      *(_QWORD *)(a2 + 88) = v58;
    }
  }
  else
  {
    sub_20B0EE07C((uint64_t *)(a2 + 80), v210 - v60);
    v59 = *(float **)(a2 + 80);
    v58 = *(float **)(a2 + 88);
  }
  if (v58 != v59)
  {
    v61 = v58;
    while (1)
    {
      v62 = a1[6];
      sub_20B51A6D4(v62, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
        break;
      if (*(_DWORD *)v211 == 3)
      {
        *v59 = (float)*(uint64_t *)&v211[8];
        v64 = v212;
        v212 = 0;
        if (!v64)
          goto LABEL_123;
        goto LABEL_117;
      }
      if (*(_DWORD *)v211 != 4)
        goto LABEL_348;
      v63 = *(double *)&v211[8];
      *v59 = v63;
      v64 = v212;
      v212 = 0;
      if (v64)
        goto LABEL_117;
LABEL_123:
      sub_20B51A6D4(v62, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
      {
        v59[1] = (float)*(unint64_t *)&v211[8];
        v70 = v212;
        v212 = 0;
        if (!v70)
          goto LABEL_137;
LABEL_131:
        for (jj = (char *)v70[4]; jj != (char *)v70[6]; jj -= 16)
        {
          v74 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
          v73 = *((_QWORD *)jj - 1);
          v74(v73);
        }
        free(jj);
        v75 = (_QWORD *)v70[3];
        if (v75)
        {
          do
          {
            v76 = (_QWORD *)*v75;
            free(v75);
            v75 = v76;
          }
          while (v76);
        }
        free(v70);
        goto LABEL_137;
      }
      if (*(_DWORD *)v211 == 4)
      {
        v71 = *(double *)&v211[8];
        v59[1] = v71;
        v70 = v212;
        v212 = 0;
        if (!v70)
          goto LABEL_137;
        goto LABEL_131;
      }
      if (*(_DWORD *)v211 != 3)
        goto LABEL_348;
      v59[1] = (float)*(uint64_t *)&v211[8];
      v70 = v212;
      v212 = 0;
      if (v70)
        goto LABEL_131;
LABEL_137:
      sub_20B51A6D4(v62, (uint64_t)v211);
      switch(*(_DWORD *)v211)
      {
        case 2:
          v59[2] = (float)*(unint64_t *)&v211[8];
          v77 = v212;
          v212 = 0;
          if (v77)
            goto LABEL_145;
          break;
        case 4:
          v78 = *(double *)&v211[8];
          v59[2] = v78;
          v77 = v212;
          v212 = 0;
          if (v77)
            goto LABEL_145;
          break;
        case 3:
          v59[2] = (float)*(uint64_t *)&v211[8];
          v77 = v212;
          v212 = 0;
          if (v77)
          {
LABEL_145:
            for (kk = (char *)v77[4]; kk != (char *)v77[6]; kk -= 16)
            {
              v81 = (void (*)(uint64_t))*((_QWORD *)kk - 2);
              v80 = *((_QWORD *)kk - 1);
              v81(v80);
            }
            free(kk);
            v82 = (_QWORD *)v77[3];
            if (v82)
            {
              do
              {
                v83 = (_QWORD *)*v82;
                free(v82);
                v82 = v83;
              }
              while (v83);
            }
            free(v77);
          }
          break;
        default:
LABEL_348:
          v206 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v206->__vftable = 0;
          v207 = std::bad_cast::bad_cast(v206);
          v207->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
          __cxa_throw(v207, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
      }
      v59 += 3;
      if (v59 == v61)
        goto LABEL_151;
    }
    *v59 = (float)*(unint64_t *)&v211[8];
    v64 = v212;
    v212 = 0;
    if (!v64)
      goto LABEL_123;
LABEL_117:
    for (mm = (char *)v64[4]; mm != (char *)v64[6]; mm -= 16)
    {
      v67 = (void (*)(uint64_t))*((_QWORD *)mm - 2);
      v66 = *((_QWORD *)mm - 1);
      v67(v66);
    }
    free(mm);
    v68 = (_QWORD *)v64[3];
    if (v68)
    {
      do
      {
        v69 = (_QWORD *)*v68;
        free(v68);
        v68 = v69;
      }
      while (v69);
    }
    free(v64);
    goto LABEL_123;
  }
LABEL_151:
  *(_DWORD *)v211 = 0;
  sub_20B518854(a1[6], v211);
  *(_DWORD *)(a2 + 112) = *(_DWORD *)v211;
  *(_QWORD *)v211 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
  sub_20B518BE4(a1[6], v211);
  v85 = *(_BYTE **)(a2 + 120);
  v84 = *(_BYTE **)(a2 + 128);
  if (*(_QWORD *)v211 <= (unint64_t)(v84 - v85))
  {
    if (*(_QWORD *)v211 < (unint64_t)(v84 - v85))
    {
      v84 = &v85[*(_QWORD *)v211];
      *(_QWORD *)(a2 + 128) = &v85[*(_QWORD *)v211];
    }
  }
  else
  {
    sub_20B08A3B0(a2 + 120, *(_QWORD *)v211 - (v84 - v85));
    v85 = *(_BYTE **)(a2 + 120);
    v84 = *(_BYTE **)(a2 + 128);
  }
  v86 = a1[6];
  v87 = v84 - v85;
  if (v84 != v85)
  {
    do
    {
      sub_20B51852C(v86, v85++);
      --v87;
    }
    while (v87);
    v86 = a1[6];
  }
  *(_DWORD *)v211 = 0;
  sub_20B518854(v86, v211);
  *(_DWORD *)(a2 + 152) = *(_DWORD *)v211;
  *(_QWORD *)v211 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
  sub_20B518BE4(a1[6], v211);
  v89 = *(_BYTE **)(a2 + 160);
  v88 = *(_BYTE **)(a2 + 168);
  if (*(_QWORD *)v211 <= (unint64_t)(v88 - v89))
  {
    if (*(_QWORD *)v211 < (unint64_t)(v88 - v89))
    {
      v88 = &v89[*(_QWORD *)v211];
      *(_QWORD *)(a2 + 168) = &v89[*(_QWORD *)v211];
    }
  }
  else
  {
    sub_20B08A3B0(a2 + 160, *(_QWORD *)v211 - (v88 - v89));
    v89 = *(_BYTE **)(a2 + 160);
    v88 = *(_BYTE **)(a2 + 168);
  }
  v90 = a1[6];
  v91 = v88 - v89;
  if (v88 != v89)
  {
    do
    {
      sub_20B51852C(v90, v89++);
      --v91;
    }
    while (v91);
    v90 = a1[6];
  }
  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
  sub_20B518BE4(v90, &v210);
  v93 = *(_DWORD **)(a2 + 192);
  v92 = *(_DWORD **)(a2 + 200);
  v94 = 0xAAAAAAAAAAAAAAABLL * (v92 - v93);
  if (v210 <= v94)
  {
    if (v210 < v94)
    {
      v92 = &v93[3 * v210];
      *(_QWORD *)(a2 + 200) = v92;
    }
  }
  else
  {
    sub_20B0EE5E4((uint64_t *)(a2 + 192), v210 - v94);
    v93 = *(_DWORD **)(a2 + 192);
    v92 = *(_DWORD **)(a2 + 200);
  }
  if (v92 != v93)
  {
    v95 = v92;
    do
    {
      v96 = a1[6];
      sub_20B51A6D4(v96, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
        goto LABEL_343;
      *v93 = *(_DWORD *)&v211[8];
      v98 = v212;
      v212 = 0;
      if (v98)
      {
        for (nn = (char *)v98[4]; nn != (char *)v98[6]; nn -= 16)
        {
          v101 = (void (*)(uint64_t))*((_QWORD *)nn - 2);
          v100 = *((_QWORD *)nn - 1);
          v101(v100);
        }
        free(nn);
        v102 = (_QWORD *)v98[3];
        if (v102)
        {
          do
          {
            v103 = (_QWORD *)*v102;
            free(v102);
            v102 = v103;
          }
          while (v103);
        }
        free(v98);
      }
      sub_20B51A6D4(v96, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
        goto LABEL_343;
      v93[1] = *(_DWORD *)&v211[8];
      v105 = v212;
      v212 = 0;
      if (v105)
      {
        for (i1 = (char *)v105[4]; i1 != (char *)v105[6]; i1 -= 16)
        {
          v108 = (void (*)(uint64_t))*((_QWORD *)i1 - 2);
          v107 = *((_QWORD *)i1 - 1);
          v108(v107);
        }
        free(i1);
        v109 = (_QWORD *)v105[3];
        if (v109)
        {
          do
          {
            v110 = (_QWORD *)*v109;
            free(v109);
            v109 = v110;
          }
          while (v110);
        }
        free(v105);
      }
      sub_20B51A6D4(v96, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
      {
LABEL_343:
        v196 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v196->__vftable = 0;
        v197 = std::bad_cast::bad_cast(v196);
        v197->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
        __cxa_throw(v197, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
      }
      v93[2] = *(_DWORD *)&v211[8];
      v112 = v212;
      v212 = 0;
      if (v112)
      {
        for (i2 = (char *)v112[4]; i2 != (char *)v112[6]; i2 -= 16)
        {
          v115 = (void (*)(uint64_t))*((_QWORD *)i2 - 2);
          v114 = *((_QWORD *)i2 - 1);
          v115(v114);
        }
        free(i2);
        v116 = (_QWORD *)v112[3];
        if (v116)
        {
          do
          {
            v117 = (_QWORD *)*v116;
            free(v116);
            v116 = v117;
          }
          while (v117);
        }
        free(v112);
      }
      v93 += 3;
    }
    while (v93 != v95);
  }
  v210 = (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3;
  sub_20B518BE4(a1[6], &v210);
  v119 = *(char **)(a2 + 224);
  v118 = *(char **)(a2 + 232);
  v120 = (v118 - v119) >> 3;
  if (v210 <= v120)
  {
    if (v210 < v120)
    {
      v118 = &v119[8 * v210];
      *(_QWORD *)(a2 + 232) = v118;
    }
  }
  else
  {
    sub_20B0EE940(a2 + 224, v210 - v120);
    v119 = *(char **)(a2 + 224);
    v118 = *(char **)(a2 + 232);
  }
  if (v118 != v119)
  {
    v121 = v118;
    do
    {
      v122 = a1[6];
      sub_20B51A6D4(v122, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
        goto LABEL_345;
      *(_DWORD *)v119 = *(_DWORD *)&v211[8];
      v124 = v212;
      v212 = 0;
      if (v124)
      {
        for (i3 = (char *)v124[4]; i3 != (char *)v124[6]; i3 -= 16)
        {
          v127 = (void (*)(uint64_t))*((_QWORD *)i3 - 2);
          v126 = *((_QWORD *)i3 - 1);
          v127(v126);
        }
        free(i3);
        v128 = (_QWORD *)v124[3];
        if (v128)
        {
          do
          {
            v129 = (_QWORD *)*v128;
            free(v128);
            v128 = v129;
          }
          while (v129);
        }
        free(v124);
      }
      sub_20B51A6D4(v122, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
      {
LABEL_345:
        v200 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v200->__vftable = 0;
        v201 = std::bad_cast::bad_cast(v200);
        v201->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
        __cxa_throw(v201, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
      }
      *((_DWORD *)v119 + 1) = *(_DWORD *)&v211[8];
      v131 = v212;
      v212 = 0;
      if (v131)
      {
        for (i4 = (char *)v131[4]; i4 != (char *)v131[6]; i4 -= 16)
        {
          v134 = (void (*)(uint64_t))*((_QWORD *)i4 - 2);
          v133 = *((_QWORD *)i4 - 1);
          v134(v133);
        }
        free(i4);
        v135 = (_QWORD *)v131[3];
        if (v135)
        {
          do
          {
            v136 = (_QWORD *)*v135;
            free(v135);
            v135 = v136;
          }
          while (v136);
        }
        free(v131);
      }
      v119 += 8;
    }
    while (v119 != v121);
  }
  v210 = (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3;
  sub_20B518BE4(a1[6], &v210);
  v138 = *(float **)(a2 + 256);
  v137 = *(float **)(a2 + 264);
  v139 = ((char *)v137 - (char *)v138) >> 3;
  if (v210 <= v139)
  {
    if (v210 < v139)
    {
      v137 = &v138[2 * v210];
      *(_QWORD *)(a2 + 264) = v137;
    }
  }
  else
  {
    sub_20B0EEC78(a2 + 256, v210 - v139);
    v138 = *(float **)(a2 + 256);
    v137 = *(float **)(a2 + 264);
  }
  if (v137 != v138)
  {
    v140 = v137;
    while (1)
    {
      v141 = a1[6];
      sub_20B51A6D4(v141, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
        break;
      if (*(_DWORD *)v211 == 3)
      {
        *v138 = (float)*(uint64_t *)&v211[8];
        v143 = v212;
        v212 = 0;
        if (!v143)
          goto LABEL_263;
        goto LABEL_257;
      }
      if (*(_DWORD *)v211 != 4)
        goto LABEL_349;
      v142 = *(double *)&v211[8];
      *v138 = v142;
      v143 = v212;
      v212 = 0;
      if (v143)
        goto LABEL_257;
LABEL_263:
      sub_20B51A6D4(v141, (uint64_t)v211);
      switch(*(_DWORD *)v211)
      {
        case 2:
          v138[1] = (float)*(unint64_t *)&v211[8];
          v149 = v212;
          v212 = 0;
          if (v149)
            goto LABEL_271;
          break;
        case 4:
          v150 = *(double *)&v211[8];
          v138[1] = v150;
          v149 = v212;
          v212 = 0;
          if (v149)
            goto LABEL_271;
          break;
        case 3:
          v138[1] = (float)*(uint64_t *)&v211[8];
          v149 = v212;
          v212 = 0;
          if (v149)
          {
LABEL_271:
            for (i5 = (char *)v149[4]; i5 != (char *)v149[6]; i5 -= 16)
            {
              v153 = (void (*)(uint64_t))*((_QWORD *)i5 - 2);
              v152 = *((_QWORD *)i5 - 1);
              v153(v152);
            }
            free(i5);
            v154 = (_QWORD *)v149[3];
            if (v154)
            {
              do
              {
                v155 = (_QWORD *)*v154;
                free(v154);
                v154 = v155;
              }
              while (v155);
            }
            free(v149);
          }
          break;
        default:
LABEL_349:
          v208 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v208->__vftable = 0;
          v209 = std::bad_cast::bad_cast(v208);
          v209->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
          __cxa_throw(v209, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
      }
      v138 += 2;
      if (v138 == v140)
        goto LABEL_277;
    }
    *v138 = (float)*(unint64_t *)&v211[8];
    v143 = v212;
    v212 = 0;
    if (!v143)
      goto LABEL_263;
LABEL_257:
    for (i6 = (char *)v143[4]; i6 != (char *)v143[6]; i6 -= 16)
    {
      v146 = (void (*)(uint64_t))*((_QWORD *)i6 - 2);
      v145 = *((_QWORD *)i6 - 1);
      v146(v145);
    }
    free(i6);
    v147 = (_QWORD *)v143[3];
    if (v147)
    {
      do
      {
        v148 = (_QWORD *)*v147;
        free(v147);
        v147 = v148;
      }
      while (v148);
    }
    free(v143);
    goto LABEL_263;
  }
LABEL_277:
  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  sub_20B518BE4(a1[6], &v210);
  v157 = *(_DWORD **)(a2 + 288);
  v156 = *(_DWORD **)(a2 + 296);
  v158 = 0xAAAAAAAAAAAAAAABLL * (v156 - v157);
  if (v210 <= v158)
  {
    if (v210 < v158)
    {
      v156 = &v157[3 * v210];
      *(_QWORD *)(a2 + 296) = v156;
    }
  }
  else
  {
    sub_20B0EE5E4((uint64_t *)(a2 + 288), v210 - v158);
    v157 = *(_DWORD **)(a2 + 288);
    v156 = *(_DWORD **)(a2 + 296);
  }
  if (v156 != v157)
  {
    v159 = v156;
    do
    {
      v160 = a1[6];
      sub_20B51A6D4(v160, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
        goto LABEL_344;
      *v157 = *(_DWORD *)&v211[8];
      v162 = v212;
      v212 = 0;
      if (v162)
      {
        for (i7 = (char *)v162[4]; i7 != (char *)v162[6]; i7 -= 16)
        {
          v165 = (void (*)(uint64_t))*((_QWORD *)i7 - 2);
          v164 = *((_QWORD *)i7 - 1);
          v165(v164);
        }
        free(i7);
        v166 = (_QWORD *)v162[3];
        if (v166)
        {
          do
          {
            v167 = (_QWORD *)*v166;
            free(v166);
            v166 = v167;
          }
          while (v167);
        }
        free(v162);
      }
      sub_20B51A6D4(v160, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
        goto LABEL_344;
      v157[1] = *(_DWORD *)&v211[8];
      v169 = v212;
      v212 = 0;
      if (v169)
      {
        for (i8 = (char *)v169[4]; i8 != (char *)v169[6]; i8 -= 16)
        {
          v172 = (void (*)(uint64_t))*((_QWORD *)i8 - 2);
          v171 = *((_QWORD *)i8 - 1);
          v172(v171);
        }
        free(i8);
        v173 = (_QWORD *)v169[3];
        if (v173)
        {
          do
          {
            v174 = (_QWORD *)*v173;
            free(v173);
            v173 = v174;
          }
          while (v174);
        }
        free(v169);
      }
      sub_20B51A6D4(v160, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
      {
LABEL_344:
        v198 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v198->__vftable = 0;
        v199 = std::bad_cast::bad_cast(v198);
        v199->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
        __cxa_throw(v199, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
      }
      v157[2] = *(_DWORD *)&v211[8];
      v176 = v212;
      v212 = 0;
      if (v176)
      {
        for (i9 = (char *)v176[4]; i9 != (char *)v176[6]; i9 -= 16)
        {
          v179 = (void (*)(uint64_t))*((_QWORD *)i9 - 2);
          v178 = *((_QWORD *)i9 - 1);
          v179(v178);
        }
        free(i9);
        v180 = (_QWORD *)v176[3];
        if (v180)
        {
          do
          {
            v181 = (_QWORD *)*v180;
            free(v180);
            v180 = v181;
          }
          while (v181);
        }
        free(v176);
      }
      v157 += 3;
    }
    while (v157 != v159);
  }
  if (a3 >= 2)
  {
    LOBYTE(v210) = 0;
    sub_20B51852C(a1[6], &v210);
    if ((_BYTE)v210)
    {
      if (!*(_BYTE *)(a2 + 344))
      {
        *(_QWORD *)(a2 + 320) = 0;
        *(_QWORD *)(a2 + 328) = 0;
        *(_QWORD *)(a2 + 336) = 0;
        *(_BYTE *)(a2 + 344) = 1;
      }
      *(_DWORD *)v211 = 2;
      sub_20B518854(a1[6], v211);
      if (*(_DWORD *)v211 <= 1u)
      {
        memset(v211, 0, sizeof(v211));
        v186 = a1[6];
        sub_20B518CC0(v186, (float *)v211);
        sub_20B518CC0(v186, (float *)&v211[4]);
        sub_20B518CC0(v186, (float *)&v211[8]);
        v187 = a1[6];
        sub_20B518CC0(v187, (float *)((unint64_t)v211 | 0xC));
        sub_20B518CC0(v187, (float *)&v211[16]);
        sub_20B518CC0(v187, (float *)&v211[20]);
        v188 = *(_OWORD *)v211;
        v189 = *(int32x2_t *)&v211[12];
        HIDWORD(v188) = *(_DWORD *)&v211[12];
        *(_OWORD *)(a2 + 320) = v188;
        LODWORD(v188) = vdup_lane_s32(v189, 1).u32[0];
        DWORD1(v188) = *(_DWORD *)&v211[20];
        *(_QWORD *)(a2 + 336) = v188;
        if (a3 < 4)
          return;
      }
      else
      {
        sub_20B0DD290(a1 + 2);
        v182 = a1[6];
        sub_20B518CC0(v182, (float *)(a2 + 320));
        sub_20B518CC0(v182, (float *)(a2 + 324));
        sub_20B518CC0(v182, (float *)(a2 + 328));
        v183 = a1[6];
        sub_20B518CC0(v183, (float *)(a2 + 332));
        sub_20B518CC0(v183, (float *)(a2 + 336));
        sub_20B518CC0(v183, (float *)(a2 + 340));
        v184 = a1[4];
        v185 = *(_QWORD *)(v184 - 16)
             - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2)
             + *(_QWORD *)(v184 - 8);
        if (v185)
          (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v185);
        a1[4] -= 16;
        if (a3 < 4)
          return;
      }
LABEL_335:
      *(_DWORD *)v211 = 0;
      sub_20B518854(a1[6], v211);
      *(_DWORD *)(a2 + 348) = *(_DWORD *)v211;
      *(_QWORD *)v211 = (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2;
      sub_20B518BE4(a1[6], v211);
      v191 = *(float **)(a2 + 352);
      v190 = *(float **)(a2 + 360);
      v192 = v190 - v191;
      if (*(_QWORD *)v211 <= v192)
      {
        if (*(_QWORD *)v211 < v192)
        {
          v190 = &v191[*(_QWORD *)v211];
          *(_QWORD *)(a2 + 360) = v190;
        }
      }
      else
      {
        sub_20B08A96C(a2 + 352, *(_QWORD *)v211 - v192);
        v191 = *(float **)(a2 + 352);
        v190 = *(float **)(a2 + 360);
      }
      v193 = (char *)v190 - (char *)v191;
      if (v193)
      {
        v194 = a1[6];
        v195 = 4 * (v193 >> 2);
        do
        {
          sub_20B518CC0(v194, v191++);
          v195 -= 4;
        }
        while (v195);
      }
      return;
    }
    if (*(_BYTE *)(a2 + 344))
      *(_BYTE *)(a2 + 344) = 0;
    if (a3 >= 4)
      goto LABEL_335;
  }
}

void sub_20B0F2900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B51CA64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0F2914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B51CA64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0F2928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B51CA64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0F293C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B51CA64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0F2950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B51CA64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0F2964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B51CA64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0F2978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B51CA64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0F29D8(uint64_t a1, uint64_t *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_20B50A7A4(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_20B454B2C(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 4)
    v6 = 4;
  else
    v6 = v12;
  if (v6 < 3)
    sub_20B0F2AD4((uint64_t)&v11, a1, a2, v6);
  else
    sub_20B0F3174(a1, (uint64_t)a2, v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

uint64_t *sub_20B0F2AD4(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *exception;
  __int128 v40;
  uint64_t *v41;
  uint64_t v42[3];
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  int v56;
  _BYTE v57[24];
  int v58;
  _BYTE v59[24];
  int v60;
  _BYTE v61[24];
  int v62;
  int v63;
  __int128 v64;
  uint64_t *v65;
  char v66;
  uint64_t v67;

  memset(v42, 0, sizeof(v42));
  v43 = 0;
  memset(v44, 0, sizeof(v44));
  v45 = 0;
  memset(v46, 0, sizeof(v46));
  v47 = 0;
  v48 = 0;
  v50 = 0;
  v49 = 0;
  v51 = 0;
  v53 = 0;
  v52 = 0;
  v54 = 0;
  v63 = 0;
  LOBYTE(v64) = 0;
  v66 = 0;
  memset(v55, 0, sizeof(v55));
  v56 = 0;
  v58 = 0;
  memset(v57, 0, sizeof(v57));
  v60 = 0;
  memset(v59, 0, sizeof(v59));
  memset(v61, 0, sizeof(v61));
  v62 = 0;
  *(_QWORD *)&v40 = "vertices";
  *((_QWORD *)&v40 + 1) = 8;
  v41 = v42;
  sub_20B0F39F8(a2, (uint64_t)&v40);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "colors_type";
  *(_QWORD *)(a2 + 96) = 11;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v43 + 4;
  sub_20B0F3B40((uint64_t *)a2, (_DWORD **)&v40);
  *(_QWORD *)&v40 = "colors";
  *((_QWORD *)&v40 + 1) = 6;
  v41 = v44;
  sub_20B0F39F8(a2, (uint64_t)&v40);
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "normals_type";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v45 + 4;
  sub_20B0F3B40((uint64_t *)a2, (_DWORD **)&v40);
  *(_QWORD *)&v40 = "normals";
  *((_QWORD *)&v40 + 1) = 7;
  v41 = v46;
  sub_20B0F39F8(a2, (uint64_t)&v40);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "semantics_type";
  *(_QWORD *)(a2 + 96) = 14;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v47 + 4;
  sub_20B0F3B40((uint64_t *)a2, (_DWORD **)&v40);
  v10 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "semantics";
  *(_QWORD *)(a2 + 96) = 9;
  if (!v10)
    *(_BYTE *)(a2 + 104) = 1;
  v11 = (unsigned __int8 *)sub_20B50AA5C((uint64_t *)a2);
  v12 = *v11;
  if (v12 == 2)
  {
    v13 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1)) >> 4;
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    v17 = v13 - (v49 - v48);
    if (v13 <= v49 - v48)
      goto LABEL_18;
    goto LABEL_16;
  }
  if (v12 == 1)
  {
    v13 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 16);
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    v17 = v13 - (v49 - v48);
    if (v13 <= v49 - v48)
      goto LABEL_18;
LABEL_16:
    sub_20B08A3B0((uint64_t)&v48, v17);
    v15 = v48;
    v14 = v49;
    goto LABEL_20;
  }
  if (!*v11)
  {
    v13 = 0;
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    goto LABEL_18;
  }
  v13 = 1;
  v14 = v49;
  v15 = v48;
  v16 = v49 - v48;
  v17 = 1 - (v49 - v48);
  if (v49 == v48)
    goto LABEL_16;
LABEL_18:
  if (v16 > v13)
  {
    v14 = v15 + v13;
    v49 = v15 + v13;
  }
LABEL_20:
  *(_QWORD *)&v40 = v14 - v15;
  *((_QWORD *)&v40 + 1) = v15;
  v18 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50AB74(v18, (uint64_t)&v40);
  v19 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "materials_type";
  *(_QWORD *)(a2 + 96) = 14;
  if (!v19)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v51 + 4;
  sub_20B0F3B40((uint64_t *)a2, (_DWORD **)&v40);
  v20 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "materials";
  *(_QWORD *)(a2 + 96) = 9;
  if (!v20)
    *(_BYTE *)(a2 + 104) = 1;
  v21 = (unsigned __int8 *)sub_20B50AA5C((uint64_t *)a2);
  v22 = *v21;
  if (v22 == 2)
  {
    v23 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 4;
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    v27 = v23 - (v53 - v52);
    if (v23 <= v53 - v52)
      goto LABEL_33;
    goto LABEL_31;
  }
  if (v22 == 1)
  {
    v23 = *(_QWORD *)(*((_QWORD *)v21 + 1) + 16);
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    v27 = v23 - (v53 - v52);
    if (v23 <= v53 - v52)
      goto LABEL_33;
LABEL_31:
    sub_20B08A3B0((uint64_t)&v52, v27);
    v25 = v52;
    v24 = v53;
    goto LABEL_35;
  }
  if (!*v21)
  {
    v23 = 0;
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    goto LABEL_33;
  }
  v23 = 1;
  v24 = v53;
  v25 = v52;
  v26 = v53 - v52;
  v27 = 1 - (v53 - v52);
  if (v53 == v52)
    goto LABEL_31;
LABEL_33:
  if (v26 > v23)
  {
    v24 = v25 + v23;
    v53 = v25 + v23;
  }
LABEL_35:
  *(_QWORD *)&v40 = v24 - v25;
  *((_QWORD *)&v40 + 1) = v25;
  v28 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50AB74(v28, (uint64_t)&v40);
  *(_QWORD *)&v40 = "faces";
  *((_QWORD *)&v40 + 1) = 5;
  v41 = (uint64_t *)&v55[4];
  sub_20B0F3D30(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "edges";
  *((_QWORD *)&v40 + 1) = 5;
  v41 = (uint64_t *)&v57[4];
  sub_20B0F3E8C(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "tex_coords";
  *((_QWORD *)&v40 + 1) = 10;
  v41 = (uint64_t *)&v59[4];
  sub_20B0F3FCC(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "tex_faces";
  *((_QWORD *)&v40 + 1) = 9;
  v41 = (uint64_t *)&v61[4];
  sub_20B0F3D30(a2, (uint64_t)&v40);
  if (a4 >= 2)
  {
    v29 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "box";
    *(_QWORD *)(a2 + 96) = 3;
    if (!v29)
      *(_BYTE *)(a2 + 104) = 1;
    if (*(_BYTE *)sub_20B50AA5C((uint64_t *)a2))
    {
      v40 = 0uLL;
      v41 = 0;
      sub_20B50A7A4(a2);
      v30 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "version";
      *(_QWORD *)(a2 + 96) = 7;
      if (!v30)
        *(_BYTE *)(a2 + 104) = 1;
      v31 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v67 = 0;
      sub_20B454B2C(v31, &v67);
      if (HIDWORD(v67))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "min";
      *(_QWORD *)(a2 + 96) = 3;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      sub_20B50B8AC(v33, (float *)&v40);
      v34 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "max";
      *(_QWORD *)(a2 + 96) = 3;
      if (!v34)
        *(_BYTE *)(a2 + 104) = 1;
      v35 = sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      sub_20B50B8AC(v35, (float *)&v40 + 3);
      v36 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v36 - 8);
      v37 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 112) = *(_QWORD *)(v37 - 8);
      *(_QWORD *)(a2 + 48) = v36 - 8;
      *(_QWORD *)(a2 + 72) = v37 - 8;
      v65 = v41;
      v64 = v40;
      v66 = 1;
    }
    else
    {
      ++*(_QWORD *)(a2 + 112);
      if (v66)
        v66 = 0;
    }
    if (a4 >= 4)
    {
      if (!*(_BYTE *)(a2 + 104))
        *(_BYTE *)(a2 + 104) = 1;
      *(_QWORD *)(a2 + 88) = "confidences";
      *(_QWORD *)(a2 + 96) = 11;
    }
  }
  sub_20B0EF1E0((uint64_t)&v40, (uint64_t)v42);
  sub_20B0EF324(a3, (uint64_t)&v40);
  sub_20B0CDABC((uint64_t *)&v40);
  return sub_20B0EFAB8(v42);
}

void sub_20B0F314C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F3160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F3174(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  unsigned int v34;
  int v35;
  char *v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  unint64_t v53;
  _QWORD *v54;
  float *v55;
  unint64_t v56;
  unint64_t v57;
  float **v58;
  unint64_t v59;
  _QWORD *exception;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[2];

  *(_QWORD *)&v63[0] = "vertices";
  *((_QWORD *)&v63[0] + 1) = 8;
  *(_QWORD *)&v63[1] = a2;
  sub_20B0F39F8(a1, (uint64_t)v63);
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "colors_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 32;
  sub_20B0F3B40((uint64_t *)a1, (_DWORD **)v63);
  *(_QWORD *)&v63[0] = "colors";
  *((_QWORD *)&v63[0] + 1) = 6;
  *(_QWORD *)&v63[1] = a2 + 40;
  sub_20B0F39F8(a1, (uint64_t)v63);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "normals_type";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 72;
  sub_20B0F3B40((uint64_t *)a1, (_DWORD **)v63);
  *(_QWORD *)&v63[0] = "normals";
  *((_QWORD *)&v63[0] + 1) = 7;
  *(_QWORD *)&v63[1] = a2 + 80;
  sub_20B0F39F8(a1, (uint64_t)v63);
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "semantics_type";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v8)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 112;
  sub_20B0F3B40((uint64_t *)a1, (_DWORD **)v63);
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "semantics";
  *(_QWORD *)(a1 + 96) = 9;
  if (v9)
  {
    v10 = (unsigned __int8 *)sub_20B50AA5C((uint64_t *)a1);
    v11 = *v10;
    if (v11 != 2)
      goto LABEL_9;
LABEL_13:
    v12 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v10 + 1) + 8) - **((_QWORD **)v10 + 1)) >> 4;
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = v12 - (v13 - v15);
    if (v12 > v13 - v15)
      goto LABEL_19;
    goto LABEL_16;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v10 = (unsigned __int8 *)sub_20B50AA5C((uint64_t *)a1);
  v11 = *v10;
  if (v11 == 2)
    goto LABEL_13;
LABEL_9:
  if (v11 == 1)
  {
    v12 = *(_QWORD *)(*((_QWORD *)v10 + 1) + 16);
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = v12 - (v13 - v15);
    if (v12 > v13 - v15)
      goto LABEL_19;
  }
  else
  {
    if (!v11)
    {
      v12 = 0;
      v14 = (uint64_t *)(a2 + 128);
      v13 = *(_QWORD *)(a2 + 128);
      v15 = *(_QWORD *)(a2 + 120);
      v16 = v13 - v15;
      goto LABEL_16;
    }
    v12 = 1;
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = 1 - (v13 - v15);
    if (v13 == v15)
    {
LABEL_19:
      sub_20B08A3B0(a2 + 120, v17);
      v15 = *(_QWORD *)(a2 + 120);
      v13 = *v14;
      goto LABEL_20;
    }
  }
LABEL_16:
  if (v16 > v12)
  {
    v13 = v15 + v12;
    *v14 = v15 + v12;
  }
LABEL_20:
  *(_QWORD *)&v63[0] = v13 - v15;
  *((_QWORD *)&v63[0] + 1) = v15;
  v18 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_20B50AB74(v18, (uint64_t)v63);
  v19 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "materials_type";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v19)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 152;
  sub_20B0F3B40((uint64_t *)a1, (_DWORD **)v63);
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "materials";
  *(_QWORD *)(a1 + 96) = 9;
  if (v20)
  {
    v21 = (unsigned __int8 *)sub_20B50AA5C((uint64_t *)a1);
    v22 = *v21;
    if (v22 != 2)
      goto LABEL_24;
LABEL_28:
    v23 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 4;
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = v23 - (v24 - v26);
    if (v23 > v24 - v26)
      goto LABEL_34;
    goto LABEL_31;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v21 = (unsigned __int8 *)sub_20B50AA5C((uint64_t *)a1);
  v22 = *v21;
  if (v22 == 2)
    goto LABEL_28;
LABEL_24:
  if (v22 == 1)
  {
    v23 = *(_QWORD *)(*((_QWORD *)v21 + 1) + 16);
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = v23 - (v24 - v26);
    if (v23 > v24 - v26)
      goto LABEL_34;
  }
  else
  {
    if (!v22)
    {
      v23 = 0;
      v25 = (uint64_t *)(a2 + 168);
      v24 = *(_QWORD *)(a2 + 168);
      v26 = *(_QWORD *)(a2 + 160);
      v27 = v24 - v26;
      goto LABEL_31;
    }
    v23 = 1;
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = 1 - (v24 - v26);
    if (v24 == v26)
    {
LABEL_34:
      sub_20B08A3B0(a2 + 160, v28);
      v26 = *(_QWORD *)(a2 + 160);
      v24 = *v25;
      goto LABEL_35;
    }
  }
LABEL_31:
  if (v27 > v23)
  {
    v24 = v26 + v23;
    *v25 = v26 + v23;
  }
LABEL_35:
  *(_QWORD *)&v63[0] = v24 - v26;
  *((_QWORD *)&v63[0] + 1) = v26;
  v29 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_20B50AB74(v29, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "faces";
  *((_QWORD *)&v63[0] + 1) = 5;
  *(_QWORD *)&v63[1] = a2 + 192;
  sub_20B0F3D30(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "edges";
  *((_QWORD *)&v63[0] + 1) = 5;
  *(_QWORD *)&v63[1] = a2 + 224;
  sub_20B0F3E8C(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "tex_coords";
  *((_QWORD *)&v63[0] + 1) = 10;
  *(_QWORD *)&v63[1] = a2 + 256;
  sub_20B0F3FCC(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "tex_faces";
  *((_QWORD *)&v63[0] + 1) = 9;
  *(_QWORD *)&v63[1] = a2 + 288;
  sub_20B0F3D30(a1, (uint64_t)v63);
  if (a3 < 2)
    return;
  v30 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "box";
  *(_QWORD *)(a1 + 96) = 3;
  if (v30)
  {
    if (*(_BYTE *)sub_20B50AA5C((uint64_t *)a1))
      goto LABEL_38;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_20B50AA5C((uint64_t *)a1))
    {
LABEL_38:
      v61 = 0uLL;
      v62 = 0;
      v31 = *(_DWORD *)(a1 + 8);
      sub_20B50A7A4(a1);
      v32 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v32)
        *(_BYTE *)(a1 + 104) = 1;
      v33 = (char *)sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      *(_QWORD *)&v63[0] = 0;
      sub_20B454B2C(v33, v63);
      v34 = v63[0];
      if (!HIDWORD(*(_QWORD *)&v63[0]))
      {
        if (v31 < 1)
          goto LABEL_50;
        if (v31 != 2 || LODWORD(v63[0]) < 2)
        {
LABEL_48:
          if (v34 >= 2)
            v34 = 2;
LABEL_50:
          if (v34 < 2)
          {
            memset(v63, 0, 24);
            v42 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "min";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v42)
              *(_BYTE *)(a1 + 104) = 1;
            v43 = sub_20B50AA5C((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_20B50B8AC(v43, (float *)v63);
            v44 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "max";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v44)
              *(_BYTE *)(a1 + 104) = 1;
            v45 = sub_20B50AA5C((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_20B50B8AC(v45, (float *)((unint64_t)v63 | 0xC));
            v46 = v63[0];
            HIDWORD(v46) = HIDWORD(v63[0]);
            v61 = v46;
            LODWORD(v46) = vdup_lane_s32(*(int32x2_t *)((char *)v63 + 12), 1).u32[0];
            DWORD1(v46) = DWORD1(v63[1]);
            v62 = v46;
          }
          else
          {
            v38 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "min";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v38)
              *(_BYTE *)(a1 + 104) = 1;
            v39 = sub_20B50AA5C((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_20B50B8AC(v39, (float *)&v61);
            v40 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "max";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v40)
              *(_BYTE *)(a1 + 104) = 1;
            v41 = sub_20B50AA5C((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_20B50B8AC(v41, (float *)((unint64_t)&v61 | 0xC));
          }
          v47 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v47 - 8);
          v48 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(v48 - 8);
          *(_QWORD *)(a1 + 48) = v47 - 8;
          *(_QWORD *)(a1 + 72) = v48 - 8;
          *(_OWORD *)(a2 + 320) = v61;
          *(_QWORD *)(a2 + 336) = v62;
          *(_BYTE *)(a2 + 344) = 1;
          if (a3 >= 4)
            goto LABEL_67;
          return;
        }
        v35 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "min_version";
        *(_QWORD *)(a1 + 96) = 11;
        if (!v35)
          *(_BYTE *)(a1 + 104) = 1;
        v36 = (char *)sub_20B50AA5C((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v63[0] = 0;
        sub_20B454B2C(v36, v63);
        v37 = v63[0];
        if (!HIDWORD(*(_QWORD *)&v63[0]))
        {
          if (LODWORD(v63[0]) >= 3)
          {
            sub_20B0EEE70();
            sub_20B520518((std::string *)&xmmword_25463B090, v37, 2u);
          }
          goto LABEL_48;
        }
      }
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C41FEF0;
      __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
    }
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 344))
    *(_BYTE *)(a2 + 344) = 0;
  if (a3 >= 4)
  {
LABEL_67:
    v49 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "confidences_type";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v49)
      *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)&v63[0] = a2 + 348;
    sub_20B0F3B40((uint64_t *)a1, (_DWORD **)v63);
    v50 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "confidences";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v50)
      *(_BYTE *)(a1 + 104) = 1;
    v51 = (unsigned __int8 *)sub_20B50AA5C((uint64_t *)a1);
    v52 = *v51;
    if (v52 == 2)
    {
      v53 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v51 + 1) + 8) - **((_QWORD **)v51 + 1)) >> 4;
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = v53 - v56;
      if (v53 > v56)
        goto LABEL_82;
    }
    else if (v52 == 1)
    {
      v53 = *(_QWORD *)(*((_QWORD *)v51 + 1) + 16);
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = v53 - v56;
      if (v53 > v56)
        goto LABEL_82;
    }
    else
    {
      if (!*v51)
      {
        v53 = 0;
        v54 = (_QWORD *)(a2 + 360);
        v55 = *(float **)(a2 + 352);
        if (!((uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2))
          goto LABEL_83;
        goto LABEL_80;
      }
      v53 = 1;
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = 1 - v56;
      if (!v56)
      {
LABEL_82:
        v58 = (float **)(a2 + 352);
        sub_20B08A96C((uint64_t)v58, v57);
        v55 = *v58;
        goto LABEL_83;
      }
    }
    v54 = (_QWORD *)(a2 + 360);
    if (v56 <= v53)
    {
LABEL_83:
      v59 = sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50B8AC(v59, v55);
      return;
    }
LABEL_80:
    *v54 = &v55[v53];
    goto LABEL_83;
  }
}

void sub_20B0F39F8(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  float **v8;
  float *v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_20B50A7A4(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = (float **)(v4 + 1);
      v9 = (float *)v4[1];
      v10 = (float *)*v4;
      v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = (float **)(v4 + 1);
  v9 = (float *)v4[1];
  v10 = (float *)*v4;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_20B0EE07C(v4, v7 - v11);
    v10 = (float *)*v4;
    v9 = (float *)v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = &v10[3 * v7];
    *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    v12 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B8AC(v12, v10);
    v10 += 3;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_20B0F3B40(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AA5C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B45502C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B418B2C((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B0F3CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B0F3D30(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_20B50A7A4(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = (unint64_t *)(v4 + 1);
      v9 = v4[1];
      v10 = *v4;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = (unint64_t *)(v4 + 1);
  v9 = v4[1];
  v10 = *v4;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_20B0EE5E4(v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = v10 + 12 * v7;
    *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 3;
    v15[1] = v10;
    v12 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B478(v12, (uint64_t)v15);
    v10 += 12;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_20B0F3E8C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_20B50A7A4(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = v4 + 1;
      v9 = v4[1];
      v10 = *v4;
      v11 = (v9 - *v4) >> 3;
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = v4 + 1;
  v9 = v4[1];
  v10 = *v4;
  v11 = (v9 - *v4) >> 3;
  if (v7 > v11)
  {
    sub_20B0EE940((uint64_t)v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = v10 + 8 * v7;
    *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 2;
    v15[1] = v10;
    v12 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B478(v12, (uint64_t)v15);
    v10 += 8;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_20B0F3FCC(uint64_t a1, uint64_t a2)
{
  int v3;
  float **v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  float **v8;
  float *v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(float ***)(a2 + 16);
  sub_20B50A7A4(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = v4 + 1;
      v9 = v4[1];
      v10 = *v4;
      v11 = ((char *)v9 - (char *)*v4) >> 3;
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = v4 + 1;
  v9 = v4[1];
  v10 = *v4;
  v11 = ((char *)v9 - (char *)*v4) >> 3;
  if (v7 > v11)
  {
    sub_20B0EEC78((uint64_t)v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = &v10[2 * v7];
    *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    v12 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B8AC(v12, v10);
    v10 += 2;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

uint64_t *sub_20B0F40F8(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t v49[48];
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  _DWORD v69[33];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;

  v50 = 0;
  v51 = 0;
  v53 = 0;
  v52 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v61 = 0;
  v60 = 0;
  v62 = 0;
  v64 = 0;
  v63 = 0;
  v65 = 0;
  v67 = 0;
  v66 = 0;
  v68 = 0;
  v69[32] = 0;
  LOBYTE(v70) = 0;
  v73 = 0;
  memset(v69, 0, 28);
  memset(&v69[8], 0, 28);
  memset(&v69[16], 0, 28);
  memset(&v69[24], 0, 28);
  v49[0] = 0;
  sub_20B514DE0(a2, v49);
  v8 = v50;
  v7 = v51;
  v9 = 0xAAAAAAAAAAAAAAABLL * (v51 - v50);
  if (v49[0] <= v9)
  {
    if (v49[0] < v9)
    {
      v7 = &v50[3 * v49[0]];
      v51 = v7;
    }
  }
  else
  {
    sub_20B0EE07C((uint64_t *)&v50, v49[0] - v9);
    v8 = v50;
    v7 = v51;
  }
  if (v7 != v8)
  {
    v10 = v7;
    do
    {
      sub_20B5152B0(a2, v8);
      v11 = v8 + 1;
      sub_20B5152B0(a2, v11++);
      sub_20B5152B0(a2, v11);
      v8 = v11 + 1;
    }
    while (v8 != v10);
  }
  LODWORD(v49[0]) = 0;
  sub_20B514490(a2, v49);
  HIDWORD(v53) = v49[0];
  v49[0] = 0xAAAAAAAAAAAAAAABLL * (v55 - v54);
  sub_20B514DE0(a2, v49);
  v13 = v54;
  v12 = v55;
  v14 = 0xAAAAAAAAAAAAAAABLL * (v55 - v54);
  if (v49[0] <= v14)
  {
    if (v49[0] < v14)
    {
      v12 = &v54[3 * v49[0]];
      v55 = v12;
    }
  }
  else
  {
    sub_20B0EE07C((uint64_t *)&v54, v49[0] - v14);
    v13 = v54;
    v12 = v55;
  }
  if (v12 != v13)
  {
    v15 = v12;
    do
    {
      sub_20B5152B0(a2, v13);
      v16 = v13 + 1;
      sub_20B5152B0(a2, v16++);
      sub_20B5152B0(a2, v16);
      v13 = v16 + 1;
    }
    while (v13 != v15);
  }
  LODWORD(v49[0]) = 0;
  sub_20B514490(a2, v49);
  HIDWORD(v57) = v49[0];
  v49[0] = 0xAAAAAAAAAAAAAAABLL * (v59 - v58);
  sub_20B514DE0(a2, v49);
  v18 = v58;
  v17 = v59;
  v19 = 0xAAAAAAAAAAAAAAABLL * (v59 - v58);
  if (v49[0] <= v19)
  {
    if (v49[0] < v19)
    {
      v17 = &v58[3 * v49[0]];
      v59 = v17;
    }
  }
  else
  {
    sub_20B0EE07C((uint64_t *)&v58, v49[0] - v19);
    v18 = v58;
    v17 = v59;
  }
  if (v17 != v18)
  {
    v20 = v17;
    do
    {
      sub_20B5152B0(a2, v18);
      v21 = v18 + 1;
      sub_20B5152B0(a2, v21++);
      sub_20B5152B0(a2, v21);
      v18 = v21 + 1;
    }
    while (v18 != v20);
  }
  LODWORD(v49[0]) = 0;
  sub_20B514490(a2, v49);
  HIDWORD(v61) = v49[0];
  v49[0] = v63 - v62;
  sub_20B514DE0(a2, v49);
  v22 = v63;
  v23 = v62;
  if (v49[0] <= (unint64_t)(v63 - v62))
  {
    if (v49[0] < (unint64_t)(v63 - v62))
    {
      v22 = &v62[v49[0]];
      v63 = &v62[v49[0]];
    }
  }
  else
  {
    sub_20B08A3B0((uint64_t)&v62, v49[0] - (v63 - v62));
    v23 = v62;
    v22 = v63;
  }
  v24 = v22 - v23;
  if (v22 != v23)
  {
    do
    {
      sub_20B513B4C(a2, v23++);
      --v24;
    }
    while (v24);
  }
  LODWORD(v49[0]) = 0;
  sub_20B514490(a2, v49);
  HIDWORD(v65) = v49[0];
  v49[0] = v67 - v66;
  sub_20B514DE0(a2, v49);
  v25 = v67;
  v26 = v66;
  if (v49[0] <= (unint64_t)(v67 - v66))
  {
    if (v49[0] < (unint64_t)(v67 - v66))
    {
      v25 = &v66[v49[0]];
      v67 = &v66[v49[0]];
    }
  }
  else
  {
    sub_20B08A3B0((uint64_t)&v66, v49[0] - (v67 - v66));
    v26 = v66;
    v25 = v67;
  }
  v27 = v25 - v26;
  if (v25 != v26)
  {
    do
    {
      sub_20B513B4C(a2, v26++);
      --v27;
    }
    while (v27);
  }
  v49[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v69[3] - *(_QWORD *)&v69[1]) >> 2);
  sub_20B514DE0(a2, v49);
  v28 = *(_QWORD *)&v69[3];
  v29 = *(_DWORD **)&v69[1];
  v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v69[3] - *(_QWORD *)&v69[1]) >> 2);
  if (v49[0] <= v30)
  {
    if (v49[0] < v30)
    {
      v28 = *(_QWORD *)&v69[1] + 12 * v49[0];
      *(_QWORD *)&v69[3] = v28;
    }
  }
  else
  {
    sub_20B0EE5E4((uint64_t *)&v69[1], v49[0] - v30);
    v29 = *(_DWORD **)&v69[1];
    v28 = *(_QWORD *)&v69[3];
  }
  if ((_DWORD *)v28 != v29)
  {
    v31 = (_DWORD *)v28;
    do
    {
      sub_20B514490(a2, v29);
      v32 = v29 + 1;
      sub_20B514490(a2, v32++);
      sub_20B514490(a2, v32);
      v29 = v32 + 1;
    }
    while (v29 != v31);
  }
  v49[0] = (uint64_t)(*(_QWORD *)&v69[11] - *(_QWORD *)&v69[9]) >> 3;
  sub_20B514DE0(a2, v49);
  v33 = *(_QWORD *)&v69[11];
  v34 = *(_DWORD **)&v69[9];
  v35 = (uint64_t)(*(_QWORD *)&v69[11] - *(_QWORD *)&v69[9]) >> 3;
  if (v49[0] <= v35)
  {
    if (v49[0] < v35)
    {
      v33 = *(_QWORD *)&v69[9] + 8 * v49[0];
      *(_QWORD *)&v69[11] = v33;
    }
  }
  else
  {
    sub_20B0EE940((uint64_t)&v69[9], v49[0] - v35);
    v34 = *(_DWORD **)&v69[9];
    v33 = *(_QWORD *)&v69[11];
  }
  if ((_DWORD *)v33 != v34)
  {
    v36 = (_DWORD *)v33;
    do
    {
      sub_20B514490(a2, v34);
      v37 = v34 + 1;
      sub_20B514490(a2, v37);
      v34 = v37 + 1;
    }
    while (v34 != v36);
  }
  v49[0] = (uint64_t)(*(_QWORD *)&v69[19] - *(_QWORD *)&v69[17]) >> 3;
  sub_20B514DE0(a2, v49);
  v38 = *(_QWORD *)&v69[19];
  v39 = *(_DWORD **)&v69[17];
  v40 = (uint64_t)(*(_QWORD *)&v69[19] - *(_QWORD *)&v69[17]) >> 3;
  if (v49[0] <= v40)
  {
    if (v49[0] < v40)
    {
      v38 = *(_QWORD *)&v69[17] + 8 * v49[0];
      *(_QWORD *)&v69[19] = v38;
    }
  }
  else
  {
    sub_20B0EEC78((uint64_t)&v69[17], v49[0] - v40);
    v39 = *(_DWORD **)&v69[17];
    v38 = *(_QWORD *)&v69[19];
  }
  if ((_DWORD *)v38 != v39)
  {
    v41 = (_DWORD *)v38;
    do
    {
      sub_20B5152B0(a2, v39);
      v42 = v39 + 1;
      sub_20B5152B0(a2, v42);
      v39 = v42 + 1;
    }
    while (v39 != v41);
  }
  v49[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v69[27] - *(_QWORD *)&v69[25]) >> 2);
  sub_20B514DE0(a2, v49);
  v43 = *(_QWORD *)&v69[27];
  v44 = *(_DWORD **)&v69[25];
  v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v69[27] - *(_QWORD *)&v69[25]) >> 2);
  if (v49[0] <= v45)
  {
    if (v49[0] < v45)
    {
      v43 = *(_QWORD *)&v69[25] + 12 * v49[0];
      *(_QWORD *)&v69[27] = v43;
    }
  }
  else
  {
    sub_20B0EE5E4((uint64_t *)&v69[25], v49[0] - v45);
    v44 = *(_DWORD **)&v69[25];
    v43 = *(_QWORD *)&v69[27];
  }
  if ((_DWORD *)v43 != v44)
  {
    v46 = (_DWORD *)v43;
    do
    {
      sub_20B514490(a2, v44);
      v47 = v44 + 1;
      sub_20B514490(a2, v47++);
      sub_20B514490(a2, v47);
      v44 = v47 + 1;
    }
    while (v44 != v46);
  }
  if (a4 >= 2)
  {
    v74 = 0;
    sub_20B513B4C(a2, &v74);
    if (v74)
    {
      if (!v73)
      {
        v70 = 0;
        v71 = 0;
        v72 = 0;
        v73 = 1;
      }
      LODWORD(v49[0]) = 1;
      sub_20B514490(a2, v49);
      sub_20B5152B0(a2, &v70);
      sub_20B5152B0(a2, (_DWORD *)&v70 + 1);
      sub_20B5152B0(a2, &v71);
      sub_20B5152B0(a2, (_DWORD *)&v71 + 1);
      sub_20B5152B0(a2, &v72);
      sub_20B5152B0(a2, (_DWORD *)&v72 + 1);
    }
    else if (v73)
    {
      v73 = 0;
    }
  }
  sub_20B0EF1E0((uint64_t)v49, (uint64_t)&v50);
  sub_20B0EF324(a3, (uint64_t)v49);
  sub_20B0CDABC(v49);
  return sub_20B0EFAB8((uint64_t *)&v50);
}

void sub_20B0F4894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F48A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F48BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F48D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F48E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F48F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F490C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F4920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F4934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F4948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F495C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F4970(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  char *v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  unint64_t v26;
  _DWORD *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  _DWORD *v36;
  _DWORD *v37;
  unint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  __int128 v42;
  int32x2_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void *__p[4];

  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
  sub_20B514DE0(a1, __p);
  v7 = *(_DWORD **)a2;
  v6 = *(_DWORD **)(a2 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a2) >> 2);
  if (__p[0] <= (void *)v8)
  {
    if (__p[0] < (void *)v8)
    {
      v6 = &v7[3 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    sub_20B0EE07C((uint64_t *)a2, (unint64_t)__p[0] - v8);
    v7 = *(_DWORD **)a2;
    v6 = *(_DWORD **)(a2 + 8);
  }
  if (v6 != v7)
  {
    v9 = v6;
    do
    {
      sub_20B5152B0(a1, v7);
      sub_20B5152B0(a1, v7 + 1);
      sub_20B5152B0(a1, v7 + 2);
      v7 += 3;
    }
    while (v7 != v9);
  }
  LODWORD(__p[0]) = 0;
  sub_20B514490(a1, __p);
  *(_DWORD *)(a2 + 32) = __p[0];
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2));
  sub_20B514DE0(a1, __p);
  v11 = *(_DWORD **)(a2 + 40);
  v10 = *(_DWORD **)(a2 + 48);
  v12 = 0xAAAAAAAAAAAAAAABLL * (v10 - v11);
  if (__p[0] <= (void *)v12)
  {
    if (__p[0] < (void *)v12)
    {
      v10 = &v11[3 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 48) = v10;
    }
  }
  else
  {
    sub_20B0EE07C((uint64_t *)(a2 + 40), (unint64_t)__p[0] - v12);
    v11 = *(_DWORD **)(a2 + 40);
    v10 = *(_DWORD **)(a2 + 48);
  }
  if (v10 != v11)
  {
    v13 = v10;
    do
    {
      sub_20B5152B0(a1, v11);
      sub_20B5152B0(a1, v11 + 1);
      sub_20B5152B0(a1, v11 + 2);
      v11 += 3;
    }
    while (v11 != v13);
  }
  LODWORD(__p[0]) = 0;
  sub_20B514490(a1, __p);
  *(_DWORD *)(a2 + 72) = __p[0];
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2));
  sub_20B514DE0(a1, __p);
  v15 = *(_DWORD **)(a2 + 80);
  v14 = *(_DWORD **)(a2 + 88);
  v16 = 0xAAAAAAAAAAAAAAABLL * (v14 - v15);
  if (__p[0] <= (void *)v16)
  {
    if (__p[0] < (void *)v16)
    {
      v14 = &v15[3 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 88) = v14;
    }
  }
  else
  {
    sub_20B0EE07C((uint64_t *)(a2 + 80), (unint64_t)__p[0] - v16);
    v15 = *(_DWORD **)(a2 + 80);
    v14 = *(_DWORD **)(a2 + 88);
  }
  if (v14 != v15)
  {
    v17 = v14;
    do
    {
      sub_20B5152B0(a1, v15);
      sub_20B5152B0(a1, v15 + 1);
      sub_20B5152B0(a1, v15 + 2);
      v15 += 3;
    }
    while (v15 != v17);
  }
  LODWORD(__p[0]) = 0;
  sub_20B514490(a1, __p);
  *(_DWORD *)(a2 + 112) = __p[0];
  __p[0] = (void *)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120));
  sub_20B514DE0(a1, __p);
  v19 = *(_BYTE **)(a2 + 120);
  v18 = *(char **)(a2 + 128);
  if (__p[0] <= (void *)(v18 - v19))
  {
    if (__p[0] < (void *)(v18 - v19))
    {
      v18 = &v19[(unint64_t)__p[0]];
      *(_QWORD *)(a2 + 128) = &v19[(unint64_t)__p[0]];
    }
  }
  else
  {
    sub_20B08A3B0(a2 + 120, (size_t)__p[0] - (v18 - v19));
    v19 = *(_BYTE **)(a2 + 120);
    v18 = *(char **)(a2 + 128);
  }
  v20 = v18 - v19;
  if (v18 != v19)
  {
    do
    {
      sub_20B513B4C(a1, v19++);
      --v20;
    }
    while (v20);
  }
  LODWORD(__p[0]) = 0;
  sub_20B514490(a1, __p);
  *(_DWORD *)(a2 + 152) = __p[0];
  __p[0] = (void *)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160));
  sub_20B514DE0(a1, __p);
  v22 = *(_BYTE **)(a2 + 160);
  v21 = *(char **)(a2 + 168);
  if (__p[0] <= (void *)(v21 - v22))
  {
    if (__p[0] < (void *)(v21 - v22))
    {
      v21 = &v22[(unint64_t)__p[0]];
      *(_QWORD *)(a2 + 168) = &v22[(unint64_t)__p[0]];
    }
  }
  else
  {
    sub_20B08A3B0(a2 + 160, (size_t)__p[0] - (v21 - v22));
    v22 = *(_BYTE **)(a2 + 160);
    v21 = *(char **)(a2 + 168);
  }
  v23 = v21 - v22;
  if (v21 != v22)
  {
    do
    {
      sub_20B513B4C(a1, v22++);
      --v23;
    }
    while (v23);
  }
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2));
  sub_20B514DE0(a1, __p);
  v25 = *(_DWORD **)(a2 + 192);
  v24 = *(_DWORD **)(a2 + 200);
  v26 = 0xAAAAAAAAAAAAAAABLL * (v24 - v25);
  if (__p[0] <= (void *)v26)
  {
    if (__p[0] < (void *)v26)
    {
      v24 = &v25[3 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 200) = v24;
    }
  }
  else
  {
    sub_20B0EE5E4((uint64_t *)(a2 + 192), (unint64_t)__p[0] - v26);
    v25 = *(_DWORD **)(a2 + 192);
    v24 = *(_DWORD **)(a2 + 200);
  }
  if (v24 != v25)
  {
    v27 = v24;
    do
    {
      sub_20B514490(a1, v25);
      sub_20B514490(a1, v25 + 1);
      sub_20B514490(a1, v25 + 2);
      v25 += 3;
    }
    while (v25 != v27);
  }
  __p[0] = (void *)((uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3);
  sub_20B514DE0(a1, __p);
  v29 = *(char **)(a2 + 224);
  v28 = *(char **)(a2 + 232);
  v30 = (v28 - v29) >> 3;
  if (__p[0] <= (void *)v30)
  {
    if (__p[0] < (void *)v30)
    {
      v28 = &v29[8 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 232) = v28;
    }
  }
  else
  {
    sub_20B0EE940(a2 + 224, (unint64_t)__p[0] - v30);
    v29 = *(char **)(a2 + 224);
    v28 = *(char **)(a2 + 232);
  }
  if (v28 != v29)
  {
    v31 = v28;
    do
    {
      sub_20B514490(a1, v29);
      sub_20B514490(a1, (_DWORD *)v29 + 1);
      v29 += 8;
    }
    while (v29 != v31);
  }
  __p[0] = (void *)((uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3);
  sub_20B514DE0(a1, __p);
  v33 = *(char **)(a2 + 256);
  v32 = *(char **)(a2 + 264);
  v34 = (v32 - v33) >> 3;
  if (__p[0] <= (void *)v34)
  {
    if (__p[0] < (void *)v34)
    {
      v32 = &v33[8 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 264) = v32;
    }
  }
  else
  {
    sub_20B0EEC78(a2 + 256, (unint64_t)__p[0] - v34);
    v33 = *(char **)(a2 + 256);
    v32 = *(char **)(a2 + 264);
  }
  if (v32 != v33)
  {
    v35 = v32;
    do
    {
      sub_20B5152B0(a1, v33);
      sub_20B5152B0(a1, (_DWORD *)v33 + 1);
      v33 += 8;
    }
    while (v33 != v35);
  }
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2));
  sub_20B514DE0(a1, __p);
  v37 = *(_DWORD **)(a2 + 288);
  v36 = *(_DWORD **)(a2 + 296);
  v38 = 0xAAAAAAAAAAAAAAABLL * (v36 - v37);
  if (__p[0] <= (void *)v38)
  {
    if (__p[0] < (void *)v38)
    {
      v36 = &v37[3 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 296) = v36;
    }
  }
  else
  {
    sub_20B0EE5E4((uint64_t *)(a2 + 288), (unint64_t)__p[0] - v38);
    v37 = *(_DWORD **)(a2 + 288);
    v36 = *(_DWORD **)(a2 + 296);
  }
  if (v36 != v37)
  {
    v39 = v36;
    do
    {
      sub_20B514490(a1, v37);
      sub_20B514490(a1, v37 + 1);
      sub_20B514490(a1, v37 + 2);
      v37 += 3;
    }
    while (v37 != v39);
  }
  if (a3 >= 2)
  {
    v51 = 0;
    sub_20B513B4C(a1, &v51);
    if (!v51)
    {
      if (*(_BYTE *)(a2 + 344))
        *(_BYTE *)(a2 + 344) = 0;
      goto LABEL_76;
    }
    if (!*(_BYTE *)(a2 + 344))
    {
      *(_QWORD *)(a2 + 320) = 0;
      *(_QWORD *)(a2 + 328) = 0;
      *(_QWORD *)(a2 + 336) = 0;
      *(_BYTE *)(a2 + 344) = 1;
    }
    LODWORD(__p[0]) = 2;
    sub_20B514490(a1, __p);
    v40 = __p[0];
    if (LODWORD(__p[0]) >= 2)
      v41 = 2;
    else
      v41 = __p[0];
    if (v41 < 2)
    {
      memset(__p, 0, 24);
      sub_20B5152B0(a1, __p);
      sub_20B5152B0(a1, (_DWORD *)__p + 1);
      sub_20B5152B0(a1, &__p[1]);
      sub_20B5152B0(a1, (_DWORD *)((unint64_t)__p | 0xC));
      sub_20B5152B0(a1, &__p[2]);
      sub_20B5152B0(a1, (_DWORD *)&__p[2] + 1);
      v42 = *(_OWORD *)__p;
      v43 = *(int32x2_t *)((char *)&__p[1] + 4);
      HIDWORD(v42) = HIDWORD(__p[1]);
      *(_OWORD *)(a2 + 320) = v42;
      LODWORD(v42) = vdup_lane_s32(v43, 1).u32[0];
      DWORD1(v42) = HIDWORD(__p[2]);
      *(_QWORD *)(a2 + 336) = v42;
      if (v40 < 2)
        goto LABEL_76;
    }
    else
    {
      sub_20B5152B0(a1, (_DWORD *)(a2 + 320));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 324));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 328));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 332));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 336));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 340));
      if (v40 < 2)
      {
LABEL_76:
        if (a3 >= 4)
        {
          LODWORD(__p[0]) = 0;
          sub_20B514490(a1, __p);
          *(_DWORD *)(a2 + 348) = __p[0];
          __p[0] = (void *)((uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
          sub_20B514DE0(a1, __p);
          v45 = *(char **)(a2 + 352);
          v44 = *(char **)(a2 + 360);
          v46 = (v44 - v45) >> 2;
          if (__p[0] <= (void *)v46)
          {
            if (__p[0] < (void *)v46)
            {
              v44 = &v45[4 * (uint64_t)__p[0]];
              *(_QWORD *)(a2 + 360) = v44;
            }
          }
          else
          {
            sub_20B08A96C(a2 + 352, (unint64_t)__p[0] - v46);
            v45 = *(char **)(a2 + 352);
            v44 = *(char **)(a2 + 360);
          }
          v49 = v44 - v45;
          if (v49)
          {
            v50 = 4 * (v49 >> 2);
            do
            {
              sub_20B5152B0(a1, v45);
              v45 += 4;
              v50 -= 4;
            }
            while (v50);
          }
        }
        return;
      }
    }
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_76;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_76;
      sub_20B51680C(a1, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_90:
          v48 = 0;
          if (SHIBYTE(__p[2]) < 0)
            goto LABEL_93;
          goto LABEL_79;
        }
      }
      else if (SHIBYTE(__p[2]) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_90;
      }
      v48 = 1;
      if (SHIBYTE(__p[2]) < 0)
LABEL_93:
        operator delete(__p[0]);
LABEL_79:
      if (*(_BYTE *)(a1 + 131))
        v47 = 0;
      else
        v47 = v48;
      if ((v47 & 1) == 0)
        goto LABEL_76;
    }
  }
}

void sub_20B0F51BC(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  std::logic_error *exception;
  char v14;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 >= 3)
    sub_20B42BA30(a2);
  if (v9 >= 4)
    v10 = 4;
  else
    v10 = v9;
  if (v10 < 3)
  {
    sub_20B0F52D0((uint64_t)&v14, a2, a3, v10);
    if (v9 < 3)
      return;
  }
  else
  {
    sub_20B0F5678(a2, (uint64_t)a3, v10);
    if (v9 < 3)
      return;
  }
  v11 = a2[12];
  v12 = a2[9];
  a2[6] = *(_QWORD *)(v11 - 8) + *(_QWORD *)(v12 - 8) + 8;
  a2[9] = v12 - 8;
  a2[12] = v11 - 8;
}

void sub_20B0F52BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B0F52D0(uint64_t a1, _QWORD *a2, uint64_t *a3, unsigned int a4)
{
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  std::logic_error *exception;
  uint64_t v31[48];
  uint64_t v32[3];
  uint64_t v33;
  uint64_t v34[3];
  uint64_t v35;
  uint64_t v36[3];
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  _QWORD v40[19];
  int v41;
  _BYTE v42[24];
  char v43;

  memset(v32, 0, sizeof(v32));
  v33 = 0;
  memset(v34, 0, sizeof(v34));
  v35 = 0;
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  memset(v38, 0, sizeof(v38));
  v39 = 0;
  memset(v40, 0, 24);
  v41 = 0;
  v42[0] = 0;
  v43 = 0;
  memset((char *)&v40[3] + 4, 0, 28);
  memset((char *)&v40[7] + 4, 0, 28);
  memset((char *)&v40[11] + 4, 0, 28);
  memset((char *)&v40[15] + 4, 0, 28);
  sub_20B0F5BFC(a2, v32);
  v7 = a2[6];
  v8 = a2[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 <= 3)
    goto LABEL_25;
  v11 = *(_DWORD *)(a2[3] + v7);
  a2[6] = v7 + 4;
  HIDWORD(v33) = v11;
  sub_20B0F5BFC(a2, v34);
  v12 = a2[6];
  v13 = a2[7];
  v9 = v13 >= v12;
  v14 = v13 - v12;
  if (!v9)
    v14 = 0;
  if (v14 <= 3)
    goto LABEL_25;
  v15 = *(_DWORD *)(a2[3] + v12);
  a2[6] = v12 + 4;
  HIDWORD(v35) = v15;
  sub_20B0F5BFC(a2, v36);
  v16 = a2[6];
  v17 = a2[7];
  v9 = v17 >= v16;
  v18 = v17 - v16;
  if (!v9)
    v18 = 0;
  if (v18 <= 3)
    goto LABEL_25;
  v19 = *(_DWORD *)(a2[3] + v16);
  a2[6] = v16 + 4;
  HIDWORD(v37) = v19;
  sub_20B0F5D60(a2, v38);
  v20 = a2[6];
  v21 = a2[7];
  v9 = v21 >= v20;
  v22 = v21 - v20;
  if (!v9)
    v22 = 0;
  if (v22 <= 3)
    goto LABEL_25;
  v23 = *(_DWORD *)(a2[3] + v20);
  a2[6] = v20 + 4;
  HIDWORD(v39) = v23;
  sub_20B0F5D60(a2, v40);
  sub_20B0F5E78(a2, &v40[4]);
  sub_20B0F5FDC(a2, (char **)&v40[8]);
  sub_20B0F610C(a2, (char **)&v40[12]);
  sub_20B0F5E78(a2, &v40[16]);
  if (a4 >= 2)
  {
    v24 = a2[6];
    v25 = a2[7];
    if (v25 <= v24)
      goto LABEL_25;
    v26 = *(unsigned __int8 *)(a2[3] + v24);
    v27 = v24 + 1;
    a2[6] = v24 + 1;
    if (v26)
    {
      if (!v43)
      {
        memset(v42, 0, sizeof(v42));
        v43 = 1;
      }
      v9 = v25 >= v27;
      v28 = v25 - v27;
      if (!v9)
        v28 = 0;
      if (v28 > 3)
      {
        a2[6] = v24 + 5;
        sub_20B0F623C(a2, (uint64_t)v42);
        goto LABEL_24;
      }
LABEL_25:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Not enough data to read");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
    }
    if (v43)
      v43 = 0;
  }
LABEL_24:
  sub_20B0EF1E0((uint64_t)v31, (uint64_t)v32);
  sub_20B0EF324(a3, (uint64_t)v31);
  sub_20B0CDABC(v31);
  return sub_20B0EFAB8(v32);
}

void sub_20B0F5620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  void *v57;

  __cxa_free_exception(v57);
  sub_20B0EFAB8(&a57);
  _Unwind_Resume(a1);
}

void sub_20B0F5650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  sub_20B0EFAB8(&a57);
  _Unwind_Resume(a1);
}

void sub_20B0F5664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  sub_20B0EFAB8(&a57);
  _Unwind_Resume(a1);
}

void sub_20B0F5678(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int32x2_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  std::logic_error *exception;
  _OWORD v58[2];

  sub_20B0F5BFC(a1, (uint64_t *)a2);
  v6 = a1[6];
  v7 = a1[7];
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (!v8)
    v9 = 0;
  if (v9 <= 3)
    goto LABEL_49;
  v10 = *(_DWORD *)(a1[3] + v6);
  a1[6] = v6 + 4;
  *(_DWORD *)(a2 + 32) = v10;
  sub_20B0F5BFC(a1, (uint64_t *)(a2 + 40));
  v11 = a1[6];
  v12 = a1[7];
  v8 = v12 >= v11;
  v13 = v12 - v11;
  if (!v8)
    v13 = 0;
  if (v13 <= 3)
    goto LABEL_49;
  v14 = *(_DWORD *)(a1[3] + v11);
  a1[6] = v11 + 4;
  *(_DWORD *)(a2 + 72) = v14;
  sub_20B0F5BFC(a1, (uint64_t *)(a2 + 80));
  v15 = a1[6];
  v16 = a1[7];
  v8 = v16 >= v15;
  v17 = v16 - v15;
  if (!v8)
    v17 = 0;
  if (v17 <= 3)
    goto LABEL_49;
  v18 = *(_DWORD *)(a1[3] + v15);
  a1[6] = v15 + 4;
  *(_DWORD *)(a2 + 112) = v18;
  sub_20B0F5D60(a1, (_QWORD *)(a2 + 120));
  v19 = a1[6];
  v20 = a1[7];
  v8 = v20 >= v19;
  v21 = v20 - v19;
  if (!v8)
    v21 = 0;
  if (v21 <= 3)
    goto LABEL_49;
  v22 = *(_DWORD *)(a1[3] + v19);
  a1[6] = v19 + 4;
  *(_DWORD *)(a2 + 152) = v22;
  sub_20B0F5D60(a1, (_QWORD *)(a2 + 160));
  sub_20B0F5E78(a1, (uint64_t *)(a2 + 192));
  sub_20B0F5FDC(a1, (char **)(a2 + 224));
  sub_20B0F610C(a1, (char **)(a2 + 256));
  sub_20B0F5E78(a1, (uint64_t *)(a2 + 288));
  if (a3 < 2)
    return;
  v24 = a1[6];
  v23 = a1[7];
  if (v23 <= v24)
    goto LABEL_49;
  v25 = *(unsigned __int8 *)(a1[3] + v24);
  v26 = v24 + 1;
  a1[6] = v26;
  if (!v25)
  {
    if (*(_BYTE *)(a2 + 344))
      *(_BYTE *)(a2 + 344) = 0;
    if (a3 >= 4)
      goto LABEL_35;
    return;
  }
  v27 = (_QWORD *)(a2 + 320);
  if (!*(_BYTE *)(a2 + 344))
  {
    *v27 = 0;
    *(_QWORD *)(a2 + 328) = 0;
    *(_QWORD *)(a2 + 336) = 0;
    *(_BYTE *)(a2 + 344) = 1;
    v26 = a1[6];
    v23 = a1[7];
  }
  v8 = v23 >= v26;
  v28 = v23 - v26;
  if (!v8)
    v28 = 0;
  if (v28 <= 3)
  {
LABEL_49:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    goto LABEL_57;
  }
  v29 = *(_DWORD *)(a1[3] + v26);
  a1[6] = v26 + 4;
  if (v29 <= 1)
  {
    memset(v58, 0, 24);
    sub_20B0F623C(a1, (uint64_t)v58);
    v42 = v58[0];
    v43 = *(int32x2_t *)((char *)v58 + 12);
    HIDWORD(v42) = HIDWORD(v58[0]);
    *(_OWORD *)(a2 + 320) = v42;
    LODWORD(v42) = vdup_lane_s32(v43, 1).u32[0];
    DWORD1(v42) = DWORD1(v58[1]);
    *(_QWORD *)(a2 + 336) = v42;
    if (a3 >= 4)
      goto LABEL_35;
  }
  else
  {
    sub_20B42BA30(a1);
    v30 = a1[6];
    v31 = a1[7];
    v8 = v31 >= v30;
    v32 = v31 - v30;
    if (!v8)
      v32 = 0;
    if (v32 <= 0xB)
      goto LABEL_56;
    v33 = (uint64_t *)(a1[3] + v30);
    v34 = *v33;
    *(_DWORD *)(a2 + 328) = *((_DWORD *)v33 + 2);
    *v27 = v34;
    v35 = a1[7];
    v36 = a1[6] + 12;
    a1[6] = v36;
    v8 = v35 >= v36;
    v37 = v35 - v36;
    if (!v8)
      v37 = 0;
    if (v37 <= 0xB)
    {
LABEL_56:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_20AEC74EC(exception, "Not enough data to read span");
      goto LABEL_57;
    }
    v38 = a1[3] + v36;
    v39 = *(_QWORD *)v38;
    *(_DWORD *)(a2 + 340) = *(_DWORD *)(v38 + 8);
    *(_QWORD *)(a2 + 332) = v39;
    a1[6] += 12;
    v40 = a1[12];
    v41 = a1[9];
    a1[6] = *(_QWORD *)(v40 - 8) + *(_QWORD *)(v41 - 8) + 8;
    a1[9] = v41 - 8;
    a1[12] = v40 - 8;
    if (a3 >= 4)
    {
LABEL_35:
      v45 = a1[6];
      v44 = a1[7];
      v46 = v44 - v45;
      if (v44 < v45)
        v46 = 0;
      if (v46 <= 3)
        goto LABEL_53;
      v47 = a1[3];
      v48 = *(_DWORD *)(v47 + v45);
      a1[6] = v45 + 4;
      *(_DWORD *)(a2 + 348) = v48;
      v49 = v44 - (v45 + 4);
      if (v44 < v45 + 4)
        v49 = 0;
      if (v49 <= 7)
      {
LABEL_53:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20AEC74EC(exception, "Not enough data to read");
      }
      else
      {
        v50 = *(_QWORD *)(v47 + v45 + 4);
        v51 = v45 + 12;
        a1[6] = v51;
        v52 = *(char **)(a2 + 352);
        v53 = *(char **)(a2 + 360);
        v54 = (v53 - v52) >> 2;
        if (v50 <= v54)
        {
          if (v50 < v54)
          {
            v53 = &v52[4 * v50];
            *(_QWORD *)(a2 + 360) = v53;
          }
        }
        else
        {
          sub_20B08A96C(a2 + 352, v50 - v54);
          v52 = *(char **)(a2 + 352);
          v53 = *(char **)(a2 + 360);
          v51 = a1[6];
          v44 = a1[7];
        }
        v55 = v53 - v52;
        v8 = v44 >= v51;
        v56 = v44 - v51;
        if (!v8)
          v56 = 0;
        if (v56 >= v55)
        {
          memcpy(v52, (const void *)(a1[3] + v51), v53 - v52);
          a1[6] += v55;
          return;
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20AEC74EC(exception, "Not enough data to read span");
      }
LABEL_57:
      __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
    }
  }
}

void sub_20B0F5B20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5B34(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5B48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5B5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5B70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5B84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5B98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5BAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5BC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5BD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5BE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5BFC(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 2);
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v10 = v9 + 12 * v8;
      a2[1] = v10;
    }
  }
  else
  {
    sub_20B0EE07C(a2, v8 - v11);
    v9 = *a2;
    v10 = a2[1];
  }
  v12 = v10 - v9;
  if (v12)
  {
    v13 = a1[6];
    v14 = 12 * (v12 / 12);
    while (1)
    {
      v15 = a1[7];
      v4 = v15 >= v13;
      v16 = v15 - v13;
      if (!v4)
        v16 = 0;
      if (v16 <= 0xB)
        break;
      v17 = a1[3] + v13;
      v18 = *(_QWORD *)v17;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v17 + 8);
      *(_QWORD *)v9 = v18;
      v9 += 12;
      v13 = a1[6] + 12;
      a1[6] = v13;
      v14 -= 12;
      if (!v14)
        return;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
}

void sub_20B0F5D38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5D4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_20B0F5D60(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  void *result;
  std::logic_error *exception;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 - v3;
  if (v2 < v3)
    v4 = 0;
  if (v4 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    goto LABEL_14;
  }
  v7 = *(_QWORD *)(a1[3] + v3);
  v8 = v3 + 8;
  a1[6] = v8;
  v9 = (char *)*a2;
  v10 = (char *)a2[1];
  v11 = &v10[-*a2];
  if (v7 <= (unint64_t)v11)
  {
    if (v7 < (unint64_t)v11)
    {
      v10 = &v9[v7];
      a2[1] = &v9[v7];
    }
  }
  else
  {
    sub_20B08A3B0((uint64_t)a2, v7 - (_QWORD)v11);
    v9 = (char *)*a2;
    v10 = (char *)a2[1];
    v8 = a1[6];
    v2 = a1[7];
  }
  v12 = v10 - v9;
  v13 = v2 >= v8;
  v14 = v2 - v8;
  if (!v13)
    v14 = 0;
  if (v14 < v12)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
LABEL_14:
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(v9, (const void *)(a1[3] + v8), v10 - v9);
  a1[6] += v12;
  return result;
}

void sub_20B0F5E50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5E64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5E78(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 2);
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v10 = v9 + 12 * v8;
      a2[1] = v10;
    }
  }
  else
  {
    sub_20B0EE5E4(a2, v8 - v11);
    v9 = *a2;
    v10 = a2[1];
  }
  v12 = v10 - v9;
  if (v12)
  {
    v13 = a1[6];
    v14 = 12 * (v12 / 12);
    while (1)
    {
      v15 = a1[7];
      v4 = v15 >= v13;
      v16 = v15 - v13;
      if (!v4)
        v16 = 0;
      if (v16 <= 0xB)
        break;
      v17 = a1[3] + v13;
      v18 = *(_QWORD *)v17;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v17 + 8);
      *(_QWORD *)v9 = v18;
      v9 += 12;
      v13 = a1[6] + 12;
      a1[6] = v13;
      v14 -= 12;
      if (!v14)
        return;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
}

void sub_20B0F5FB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5FC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F5FDC(_QWORD *a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = (v10 - *a2) >> 3;
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v10 = &v9[8 * v8];
      a2[1] = v10;
    }
  }
  else
  {
    sub_20B0EE940((uint64_t)a2, v8 - v11);
    v9 = *a2;
    v10 = a2[1];
  }
  v12 = v10 - v9;
  if (v12)
  {
    v13 = a1[6];
    v14 = 8 * (v12 >> 3);
    while (1)
    {
      v15 = a1[7];
      v4 = v15 >= v13;
      v16 = v15 - v13;
      if (!v4)
        v16 = 0;
      if (v16 <= 7)
        break;
      *(_QWORD *)v9 = *(_QWORD *)(a1[3] + v13);
      v9 += 8;
      v13 = a1[6] + 8;
      a1[6] = v13;
      v14 -= 8;
      if (!v14)
        return;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
}

void sub_20B0F60E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F60F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F610C(_QWORD *a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = (v10 - *a2) >> 3;
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v10 = &v9[8 * v8];
      a2[1] = v10;
    }
  }
  else
  {
    sub_20B0EEC78((uint64_t)a2, v8 - v11);
    v9 = *a2;
    v10 = a2[1];
  }
  v12 = v10 - v9;
  if (v12)
  {
    v13 = a1[6];
    v14 = 8 * (v12 >> 3);
    while (1)
    {
      v15 = a1[7];
      v4 = v15 >= v13;
      v16 = v15 - v13;
      if (!v4)
        v16 = 0;
      if (v16 <= 7)
        break;
      *(_QWORD *)v9 = *(_QWORD *)(a1[3] + v13);
      v9 += 8;
      v13 = a1[6] + 8;
      a1[6] = v13;
      v14 -= 8;
      if (!v14)
        return;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
}

void sub_20B0F6214(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F6228(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0F623C(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xB)
    goto LABEL_8;
  v6 = (uint64_t *)(result[3] + v2);
  v7 = *v6;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)v6 + 2);
  *(_QWORD *)a2 = v7;
  v8 = result[7];
  v9 = result[6] + 12;
  result[6] = v9;
  v4 = v8 >= v9;
  v10 = v8 - v9;
  if (!v4)
    v10 = 0;
  if (v10 <= 0xB)
  {
LABEL_8:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v11 = result[3] + v9;
  v12 = *(_QWORD *)v11;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(v11 + 8);
  *(_QWORD *)(a2 + 12) = v12;
  result[6] += 12;
  return result;
}

void sub_20B0F630C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F6320(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0F6334(int *a1, _BYTE *a2, uint64_t *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 3)
    {
      v9 = 0;
      goto LABEL_9;
    }
    v12 = 3;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 5)
    {
      v11 = v12;
      sub_20B0F6438();
      sub_20B520518((std::string *)&xmmword_25463B108, v11, 4u);
    }
    v7 = *a1;
  }
  v9 = 0;
  if (a4 >= 3 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
  }
LABEL_9:
  if (a4 >= 4)
    v10 = 4;
  else
    v10 = a4;
  if (v10 < 3)
  {
    sub_20B0F68C8(a2, a3, v10);
    if (!v9)
      return;
  }
  else
  {
    sub_20B0F7264((uint64_t)a2, (uint64_t)a3, v10);
    if (!v9)
      return;
  }
  (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

void sub_20B0F6438()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B068);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463B068))
  {
    sub_20B0F64F0();
    if (byte_25463B137 < 0)
    {
      sub_20AEC60F4(&xmmword_25463B108, (void *)qword_25463B120, unk_25463B128);
    }
    else
    {
      xmmword_25463B108 = *(_OWORD *)&qword_25463B120;
      qword_25463B118 = unk_25463B130;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B108, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B068);
  }
}

void sub_20B0F64D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B068);
  _Unwind_Resume(a1);
}

void sub_20B0F64F0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B070);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463B070))
  {
    sub_20B0F66EC(__p);
    sub_20B0F65C4((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B120, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B070);
  }
}

void sub_20B0F6584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25463B070);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25463B070);
  _Unwind_Resume(a1);
}

void sub_20B0F65C4(char *a1)
{
  std::string *v2;
  __int128 v3;
  int64x2_t v4;
  int8x16_t v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;
  void *__dst[2];
  std::string::size_type v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20AF7063C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    v12 = v2->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v3;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, (std::string *)&qword_25463B120, v4, v5);
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
}

void sub_20B0F66C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B0F66EC(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25463B078);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B078))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::mesh::TriMeshDataSample<>]", qword_25463B138);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25463B138, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B078);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25463B080);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25463B080))
  {
    v5 = sub_20AED4780(qword_25463B138, "<", 0);
    sub_20AED467C(qword_25463B138, 0, v5, qword_25463B150);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25463B150, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B080);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25463B088);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B088))
  {
    sub_20B531658((uint64_t)qword_25463B150, (uint64_t)&xmmword_25463B168);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B168, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B088);
  }
  if (byte_25463B17F < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_25463B168, *((unint64_t *)&xmmword_25463B168 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_25463B168;
    __dst[2] = unk_25463B178;
  }
}

void sub_20B0F6880(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B088);
  _Unwind_Resume(a1);
}

void sub_20B0F6898(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B080);
  _Unwind_Resume(a1);
}

void sub_20B0F68B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B078);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B0F68C8(_BYTE *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v48[48];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _DWORD v68[33];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;

  v49 = 0;
  v50 = 0;
  v52 = 0;
  v51 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v60 = 0;
  v59 = 0;
  v61 = 0;
  v63 = 0;
  v62 = 0;
  v64 = 0;
  v66 = 0;
  v65 = 0;
  v67 = 0;
  v68[32] = 0;
  LOBYTE(v69) = 0;
  v72 = 0;
  memset(v68, 0, 28);
  memset(&v68[8], 0, 28);
  memset(&v68[16], 0, 28);
  memset(&v68[24], 0, 28);
  v48[0] = 0;
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v7 = v49;
  v6 = v50;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v50 - v49) >> 2);
  if (v48[0] <= (_DWORD *)v8)
  {
    if (v48[0] < (_DWORD *)v8)
    {
      v6 = v49 + 12 * (uint64_t)v48[0];
      v50 = v6;
    }
  }
  else
  {
    sub_20B0EE07C(&v49, (unint64_t)v48[0] - v8);
    v7 = v49;
    v6 = v50;
  }
  if (v6 != v7)
  {
    v9 = v6;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7);
      v10 = v7 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10);
      v10 += 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10);
      v7 = v10 + 4;
    }
    while (v7 != v9);
  }
  v48[0] = (_DWORD *)&v52 + 1;
  sub_20B0F7B24(a1, v48);
  v48[0] = (_DWORD *)(0xAAAAAAAAAAAAAAABLL * ((v54 - v53) >> 2));
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v12 = v53;
  v11 = v54;
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v54 - v53) >> 2);
  if (v48[0] <= (_DWORD *)v13)
  {
    if (v48[0] < (_DWORD *)v13)
    {
      v11 = v53 + 12 * (uint64_t)v48[0];
      v54 = v11;
    }
  }
  else
  {
    sub_20B0EE07C(&v53, (unint64_t)v48[0] - v13);
    v12 = v53;
    v11 = v54;
  }
  if (v11 != v12)
  {
    v14 = v11;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v12);
      v15 = v12 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v15);
      v15 += 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v15);
      v12 = v15 + 4;
    }
    while (v12 != v14);
  }
  v48[0] = (_DWORD *)&v56 + 1;
  sub_20B0F7B24(a1, v48);
  v48[0] = (_DWORD *)(0xAAAAAAAAAAAAAAABLL * ((v58 - v57) >> 2));
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v17 = v57;
  v16 = v58;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((v58 - v57) >> 2);
  if (v48[0] <= (_DWORD *)v18)
  {
    if (v48[0] < (_DWORD *)v18)
    {
      v16 = v57 + 12 * (uint64_t)v48[0];
      v58 = v16;
    }
  }
  else
  {
    sub_20B0EE07C(&v57, (unint64_t)v48[0] - v18);
    v17 = v57;
    v16 = v58;
  }
  if (v16 != v17)
  {
    v19 = v16;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17);
      v20 = v17 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v20);
      v20 += 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v20);
      v17 = v20 + 4;
    }
    while (v17 != v19);
  }
  v48[0] = (_DWORD *)&v60 + 1;
  sub_20B0F7B24(a1, v48);
  v48[0] = (_DWORD *)(v62 - v61);
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v21 = v62;
  v22 = v61;
  if (v48[0] <= (_DWORD *)(v62 - v61))
  {
    if (v48[0] < (_DWORD *)(v62 - v61))
    {
      v21 = &v61[(unint64_t)v48[0]];
      v62 = &v61[(unint64_t)v48[0]];
    }
  }
  else
  {
    sub_20B08A3B0((uint64_t)&v61, (size_t)v48[0] - (v62 - v61));
    v22 = v61;
    v21 = v62;
  }
  if (v21 != v22)
  {
    v23 = (char *)(v21 - v22);
    do
    {
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 80))(a1, v22++);
      --v23;
    }
    while (v23);
  }
  v48[0] = (_DWORD *)&v64 + 1;
  sub_20B0F7B24(a1, v48);
  v48[0] = (_DWORD *)(v66 - v65);
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v24 = v66;
  v25 = v65;
  if (v48[0] <= (_DWORD *)(v66 - v65))
  {
    if (v48[0] < (_DWORD *)(v66 - v65))
    {
      v24 = &v65[(unint64_t)v48[0]];
      v66 = &v65[(unint64_t)v48[0]];
    }
  }
  else
  {
    sub_20B08A3B0((uint64_t)&v65, (size_t)v48[0] - (v66 - v65));
    v25 = v65;
    v24 = v66;
  }
  if (v24 != v25)
  {
    v26 = (char *)(v24 - v25);
    do
    {
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 80))(a1, v25++);
      --v26;
    }
    while (v26);
  }
  v48[0] = (_DWORD *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v68[3] - *(_QWORD *)&v68[1]) >> 2));
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v27 = *(_QWORD *)&v68[3];
  v28 = *(_QWORD *)&v68[1];
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v68[3] - *(_QWORD *)&v68[1]) >> 2);
  if (v48[0] <= (_DWORD *)v29)
  {
    if (v48[0] < (_DWORD *)v29)
    {
      v27 = *(_QWORD *)&v68[1] + 12 * (uint64_t)v48[0];
      *(_QWORD *)&v68[3] = v27;
    }
  }
  else
  {
    sub_20B0EE5E4((uint64_t *)&v68[1], (unint64_t)v48[0] - v29);
    v28 = *(_QWORD *)&v68[1];
    v27 = *(_QWORD *)&v68[3];
  }
  if (v27 != v28)
  {
    v30 = v27;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v28);
      v31 = v28 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v31);
      v31 += 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v31);
      v28 = v31 + 4;
    }
    while (v28 != v30);
  }
  v48[0] = (_DWORD *)((uint64_t)(*(_QWORD *)&v68[11] - *(_QWORD *)&v68[9]) >> 3);
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v32 = *(_QWORD *)&v68[11];
  v33 = *(_QWORD *)&v68[9];
  v34 = (uint64_t)(*(_QWORD *)&v68[11] - *(_QWORD *)&v68[9]) >> 3;
  if (v48[0] <= (_DWORD *)v34)
  {
    if (v48[0] < (_DWORD *)v34)
    {
      v32 = *(_QWORD *)&v68[9] + 8 * (uint64_t)v48[0];
      *(_QWORD *)&v68[11] = v32;
    }
  }
  else
  {
    sub_20B0EE940((uint64_t)&v68[9], (unint64_t)v48[0] - v34);
    v33 = *(_QWORD *)&v68[9];
    v32 = *(_QWORD *)&v68[11];
  }
  if (v32 != v33)
  {
    v35 = v32;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v33);
      v36 = v33 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v36);
      v33 = v36 + 4;
    }
    while (v33 != v35);
  }
  v48[0] = (_DWORD *)((uint64_t)(*(_QWORD *)&v68[19] - *(_QWORD *)&v68[17]) >> 3);
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v37 = *(_QWORD *)&v68[19];
  v38 = *(_QWORD *)&v68[17];
  v39 = (uint64_t)(*(_QWORD *)&v68[19] - *(_QWORD *)&v68[17]) >> 3;
  if (v48[0] <= (_DWORD *)v39)
  {
    if (v48[0] < (_DWORD *)v39)
    {
      v37 = *(_QWORD *)&v68[17] + 8 * (uint64_t)v48[0];
      *(_QWORD *)&v68[19] = v37;
    }
  }
  else
  {
    sub_20B0EEC78((uint64_t)&v68[17], (unint64_t)v48[0] - v39);
    v38 = *(_QWORD *)&v68[17];
    v37 = *(_QWORD *)&v68[19];
  }
  if (v37 != v38)
  {
    v40 = v37;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v38);
      v41 = v38 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v41);
      v38 = v41 + 4;
    }
    while (v38 != v40);
  }
  v48[0] = (_DWORD *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v68[27] - *(_QWORD *)&v68[25]) >> 2));
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v42 = *(_QWORD *)&v68[27];
  v43 = *(_QWORD *)&v68[25];
  v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v68[27] - *(_QWORD *)&v68[25]) >> 2);
  if (v48[0] <= (_DWORD *)v44)
  {
    if (v48[0] < (_DWORD *)v44)
    {
      v42 = *(_QWORD *)&v68[25] + 12 * (uint64_t)v48[0];
      *(_QWORD *)&v68[27] = v42;
    }
  }
  else
  {
    sub_20B0EE5E4((uint64_t *)&v68[25], (unint64_t)v48[0] - v44);
    v43 = *(_QWORD *)&v68[25];
    v42 = *(_QWORD *)&v68[27];
  }
  if (v42 != v43)
  {
    v45 = v42;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v43);
      v46 = v43 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v46);
      v46 += 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v46);
      v43 = v46 + 4;
    }
    while (v43 != v45);
  }
  if (a3 >= 2)
  {
    v73 = 0;
    (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 80))(a1, &v73);
    if (v73)
    {
      if (!v72)
      {
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v72 = 1;
      }
      LODWORD(v48[0]) = 1;
      (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 104))(a1, v48);
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v69);
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 128))(a1, (char *)&v69 + 4);
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v70);
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 128))(a1, (char *)&v70 + 4);
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v71);
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 128))(a1, (char *)&v71 + 4);
    }
    else if (v72)
    {
      v72 = 0;
    }
  }
  sub_20B0EF1E0((uint64_t)v48, (uint64_t)&v49);
  sub_20B0EF324(a2, (uint64_t)v48);
  sub_20B0CDABC((uint64_t *)v48);
  return sub_20B0EFAB8(&v49);
}

void sub_20B0F7188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F719C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F71B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F71C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F71D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F71EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F7200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F7214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F7228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F723C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F7250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20B0EFAB8(&a58);
  _Unwind_Resume(a1);
}

void sub_20B0F7264(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;

  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v7 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(_QWORD *)a2) >> 2);
  if (v47 <= v8)
  {
    if (v47 < v8)
    {
      v6 = v7 + 12 * v47;
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    sub_20B0EE07C((uint64_t *)a2, v47 - v8);
    v7 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
  }
  if (v6 != v7)
  {
    v9 = v6;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7 + 8);
      v7 += 12;
    }
    while (v7 != v9);
  }
  v47 = a2 + 32;
  sub_20B0F7B24((_BYTE *)a1, (_DWORD **)&v47);
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v11 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 2);
  if (v47 <= v12)
  {
    if (v47 < v12)
    {
      v10 = v11 + 12 * v47;
      *(_QWORD *)(a2 + 48) = v10;
    }
  }
  else
  {
    sub_20B0EE07C((uint64_t *)(a2 + 40), v47 - v12);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 48);
  }
  if (v10 != v11)
  {
    v13 = v10;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v11);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v11 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v11 + 8);
      v11 += 12;
    }
    while (v11 != v13);
  }
  v47 = a2 + 72;
  sub_20B0F7B24((_BYTE *)a1, (_DWORD **)&v47);
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v15 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 2);
  if (v47 <= v16)
  {
    if (v47 < v16)
    {
      v14 = v15 + 12 * v47;
      *(_QWORD *)(a2 + 88) = v14;
    }
  }
  else
  {
    sub_20B0EE07C((uint64_t *)(a2 + 80), v47 - v16);
    v15 = *(_QWORD *)(a2 + 80);
    v14 = *(_QWORD *)(a2 + 88);
  }
  if (v14 != v15)
  {
    v17 = v14;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v15);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v15 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v15 + 8);
      v15 += 12;
    }
    while (v15 != v17);
  }
  v47 = a2 + 112;
  sub_20B0F7B24((_BYTE *)a1, (_DWORD **)&v47);
  v47 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v19 = *(char **)(a2 + 120);
  v18 = *(char **)(a2 + 128);
  if (v47 <= v18 - v19)
  {
    if (v47 < v18 - v19)
    {
      v18 = &v19[v47];
      *(_QWORD *)(a2 + 128) = &v19[v47];
    }
  }
  else
  {
    sub_20B08A3B0(a2 + 120, v47 - (v18 - v19));
    v19 = *(char **)(a2 + 120);
    v18 = *(char **)(a2 + 128);
  }
  if (v18 != v19)
  {
    v20 = (char *)(v18 - v19);
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 80))(a1, v19++);
      --v20;
    }
    while (v20);
  }
  v47 = a2 + 152;
  sub_20B0F7B24((_BYTE *)a1, (_DWORD **)&v47);
  v47 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v22 = *(char **)(a2 + 160);
  v21 = *(char **)(a2 + 168);
  if (v47 <= v21 - v22)
  {
    if (v47 < v21 - v22)
    {
      v21 = &v22[v47];
      *(_QWORD *)(a2 + 168) = &v22[v47];
    }
  }
  else
  {
    sub_20B08A3B0(a2 + 160, v47 - (v21 - v22));
    v22 = *(char **)(a2 + 160);
    v21 = *(char **)(a2 + 168);
  }
  if (v21 != v22)
  {
    v23 = (char *)(v21 - v22);
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 80))(a1, v22++);
      --v23;
    }
    while (v23);
  }
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v25 = *(_QWORD *)(a2 + 192);
  v24 = *(_QWORD *)(a2 + 200);
  v26 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 2);
  if (v47 <= v26)
  {
    if (v47 < v26)
    {
      v24 = v25 + 12 * v47;
      *(_QWORD *)(a2 + 200) = v24;
    }
  }
  else
  {
    sub_20B0EE5E4((uint64_t *)(a2 + 192), v47 - v26);
    v25 = *(_QWORD *)(a2 + 192);
    v24 = *(_QWORD *)(a2 + 200);
  }
  if (v24 != v25)
  {
    v27 = v24;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25 + 8);
      v25 += 12;
    }
    while (v25 != v27);
  }
  v47 = (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v29 = *(_QWORD *)(a2 + 224);
  v28 = *(_QWORD *)(a2 + 232);
  v30 = (v28 - v29) >> 3;
  if (v47 <= v30)
  {
    if (v47 < v30)
    {
      v28 = v29 + 8 * v47;
      *(_QWORD *)(a2 + 232) = v28;
    }
  }
  else
  {
    sub_20B0EE940(a2 + 224, v47 - v30);
    v29 = *(_QWORD *)(a2 + 224);
    v28 = *(_QWORD *)(a2 + 232);
  }
  if (v28 != v29)
  {
    v31 = v28;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v29);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v29 + 4);
      v29 += 8;
    }
    while (v29 != v31);
  }
  v47 = (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v33 = *(_QWORD *)(a2 + 256);
  v32 = *(_QWORD *)(a2 + 264);
  v34 = (v32 - v33) >> 3;
  if (v47 <= v34)
  {
    if (v47 < v34)
    {
      v32 = v33 + 8 * v47;
      *(_QWORD *)(a2 + 264) = v32;
    }
  }
  else
  {
    sub_20B0EEC78(a2 + 256, v47 - v34);
    v33 = *(_QWORD *)(a2 + 256);
    v32 = *(_QWORD *)(a2 + 264);
  }
  if (v32 != v33)
  {
    v35 = v32;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v33);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v33 + 4);
      v33 += 8;
    }
    while (v33 != v35);
  }
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v37 = *(_QWORD *)(a2 + 288);
  v36 = *(_QWORD *)(a2 + 296);
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v36 - v37) >> 2);
  if (v47 <= v38)
  {
    if (v47 < v38)
    {
      v36 = v37 + 12 * v47;
      *(_QWORD *)(a2 + 296) = v36;
    }
  }
  else
  {
    sub_20B0EE5E4((uint64_t *)(a2 + 288), v47 - v38);
    v37 = *(_QWORD *)(a2 + 288);
    v36 = *(_QWORD *)(a2 + 296);
  }
  if (v36 != v37)
  {
    v39 = v36;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v37);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v37 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v37 + 8);
      v37 += 12;
    }
    while (v37 != v39);
  }
  v46 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 80))(a1, &v46);
  if (v46)
  {
    if (!*(_BYTE *)(a2 + 344))
    {
      *(_QWORD *)(a2 + 320) = 0;
      *(_QWORD *)(a2 + 328) = 0;
      *(_QWORD *)(a2 + 336) = 0;
      *(_BYTE *)(a2 + 344) = 1;
    }
    v40 = *(_DWORD *)(a1 + 8);
    LODWORD(v47) = 2;
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 104))(a1, &v47);
    if (v40 >= 1)
    {
      if (v40 == 2)
      {
        if (v47 >= 2)
        {
          LODWORD(v47) = 2;
          (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 104))(a1, &v47);
          v41 = v47;
          if (v47 >= 3)
          {
            sub_20B0EEE70();
            sub_20B520518((std::string *)&xmmword_25463B090, v41, 2u);
          }
          goto LABEL_75;
        }
      }
      else if (v47 > 1)
      {
LABEL_75:
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 320);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 324);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 328);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 332);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 336);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 340);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        goto LABEL_77;
      }
    }
    sub_20B0F7CD8(a1, a2 + 320, v47);
  }
  else if (*(_BYTE *)(a2 + 344))
  {
    *(_BYTE *)(a2 + 344) = 0;
  }
LABEL_77:
  if (a3 >= 4)
  {
    v47 = a2 + 348;
    sub_20B0F7B24((_BYTE *)a1, (_DWORD **)&v47);
    v47 = (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2;
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
    v43 = *(_QWORD *)(a2 + 352);
    v42 = *(_QWORD *)(a2 + 360);
    v44 = (v42 - v43) >> 2;
    if (v47 <= v44)
    {
      if (v47 < v44)
      {
        v42 = v43 + 4 * v47;
        *(_QWORD *)(a2 + 360) = v42;
      }
    }
    else
    {
      sub_20B08A96C(a2 + 352, v47 - v44);
      v43 = *(_QWORD *)(a2 + 352);
      v42 = *(_QWORD *)(a2 + 360);
    }
    if (v42 != v43)
    {
      v45 = 4 * ((v42 - v43) >> 2);
      do
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v43);
        v43 += 4;
        v45 -= 4;
      }
      while (v45);
    }
  }
}

void sub_20B0F7B24(_BYTE *a1, _DWORD **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  int v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_20B52CF30(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_20B418B2C((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v6 + 128);
    MEMORY[0x20BD3583C](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 104))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20B0F7C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20B52CE84(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n64 sub_20B0F7CD8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __n64 result;
  __int128 v6;
  int32x2_t v7;
  _OWORD v8[2];

  if (a3 < 2)
  {
    memset(v8, 0, 24);
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 128))(a1, v8);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 128))(a1, (char *)v8 + 4);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 128))(a1, (char *)v8 + 8);
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 128))(a1, (unint64_t)v8 | 0xC);
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 128))(a1, &v8[1]);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 128))(a1, (char *)&v8[1] + 4);
    v6 = v8[0];
    v7 = *(int32x2_t *)((char *)v8 + 12);
    HIDWORD(v6) = HIDWORD(v8[0]);
    *(_OWORD *)a2 = v6;
    result.n64_u32[0] = vdup_lane_s32(v7, 1).u32[0];
    result.n64_u32[1] = DWORD1(v8[1]);
    *(__n64 *)(a2 + 16) = result;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
  }
  return result;
}

_QWORD *sub_20B0F7E54(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;

  v5 = *a2;
  v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24C40B938;
  v7[1] = v5;
  v7[2] = v6;
  sub_20AF4CAF4((uint64_t)(v7 + 4), a3);
  *v7 = &off_24C40B8E8;
  *a1 = &off_24C411E78;
  a1[1] = v7;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v7;
  a1[2] = result;
  return result;
}

void sub_20B0F7F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0F7F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  sub_20AEC147C(v10);
  MEMORY[0x20BD3583C](v9, 0x10B3C40E92279A6);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0F7F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20B0F7F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  float v6;
  _BOOL8 result;
  BOOL v8;
  _QWORD v9[14];
  _DWORD *v10;
  uint64_t v11;
  _QWORD v12[14];
  _DWORD *v13;
  uint64_t *v14;
  char v15;

  v12[0] = a1;
  v12[1] = a1 + 32;
  v12[2] = a1 + 40;
  v12[3] = a1 + 72;
  v12[4] = a1 + 80;
  v12[5] = a1 + 112;
  v12[6] = a1 + 120;
  v12[7] = a1 + 152;
  v12[8] = a1 + 160;
  v12[9] = a1 + 192;
  v12[10] = a1 + 224;
  v12[11] = a1 + 256;
  v12[12] = a1 + 288;
  v12[13] = a1 + 320;
  v13 = (_DWORD *)(a1 + 348);
  v14 = (uint64_t *)(a1 + 352);
  v9[0] = a2;
  v9[1] = a2 + 32;
  v9[2] = a2 + 40;
  v9[3] = a2 + 72;
  v9[4] = a2 + 80;
  v9[5] = a2 + 112;
  v9[6] = a2 + 120;
  v9[7] = a2 + 152;
  v9[8] = a2 + 160;
  v9[9] = a2 + 192;
  v9[10] = a2 + 224;
  v9[11] = a2 + 256;
  v9[12] = a2 + 288;
  v9[13] = a2 + 320;
  v10 = (_DWORD *)(a2 + 348);
  v11 = a2 + 352;
  if (!sub_20B0F8100((uint64_t)&v15, (uint64_t)v12, (uint64_t)v9))
    return 0;
  if (*v13 != *v10)
    return 0;
  v3 = *v14;
  v2 = v14[1];
  v4 = *(float **)v11;
  if (v2 - *v14 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 4;
  do
  {
    v6 = *v4++;
    result = *(float *)(v5 - 4) == v6;
    v8 = *(float *)(v5 - 4) != v6 || v5 == v2;
    v5 += 4;
  }
  while (!v8);
  return result;
}

BOOL sub_20B0F8100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v5;
  float *v6;
  uint64_t v7;
  float *v8;
  float v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _BOOL8 result;
  _BOOL4 v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  char v26;

  if (!sub_20B0F82B8((uint64_t)&v26, a2, a3))
    return 0;
  v6 = **(float ***)(a2 + 88);
  v5 = *(float **)(*(_QWORD *)(a2 + 88) + 8);
  v7 = **(_QWORD **)(a3 + 88);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(*(_QWORD *)(a3 + 88) + 8) - v7)
    return 0;
  if (v6 != v5)
  {
    v8 = (float *)(v7 + 4);
    do
    {
      v9 = *(v8 - 1);
      v10 = *v6 == v9;
      if (*v6 == v9)
        v10 = v6[1] == *v8;
      if (!v10)
        return 0;
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v5);
  }
  v12 = **(_QWORD **)(a2 + 96);
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8);
  v13 = **(_QWORD **)(a3 + 96);
  if (v11 - v12 != *(_QWORD *)(*(_QWORD *)(a3 + 96) + 8) - v13)
    return 0;
  if (v12 != v11)
  {
    while (*(_QWORD *)v12 == *(_QWORD *)v13 && *(_DWORD *)(v12 + 8) == (unint64_t)*(unsigned int *)(v13 + 8))
    {
      v12 += 12;
      v13 += 12;
      if (v12 == v11)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a3 + 104);
  if (*(_BYTE *)(v15 + 24))
    v17 = *(_BYTE *)(v16 + 24) == 0;
  else
    v17 = 1;
  if (v17)
    return (*(_BYTE *)(v15 + 24) != 0) == (*(_BYTE *)(v16 + 24) != 0);
  v19 = *(float *)v15 == *(float *)v16;
  if (*(float *)v15 == *(float *)v16)
  {
    v20 = *(float *)(v15 + 4);
    v21 = *(float *)(v16 + 4);
    v19 = v20 == v21;
    if (v20 == v21)
      v19 = *(float *)(v15 + 8) == *(float *)(v16 + 8);
  }
  if (!v19)
    return 0;
  v22 = *(float *)(v15 + 12);
  v23 = *(float *)(v16 + 12);
  result = v22 == v23;
  if (v22 == v23)
  {
    v24 = *(float *)(v15 + 16);
    v25 = *(float *)(v16 + 16);
    result = v24 == v25;
    if (v24 == v25)
      return *(float *)(v15 + 20) == *(float *)(v16 + 20);
  }
  return result;
}

BOOL sub_20B0F82B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 result;
  char v17;

  if (!sub_20B0F83A8((uint64_t)&v17, a2, a3))
    return 0;
  v6 = **(_QWORD **)(a2 + 72);
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8);
  v7 = **(_QWORD **)(a3 + 72);
  if (v5 - v6 != *(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v7)
    return 0;
  if (v6 != v5)
  {
    while (*(_QWORD *)v6 == *(_QWORD *)v7 && *(_DWORD *)(v6 + 8) == (unint64_t)*(unsigned int *)(v7 + 8))
    {
      v6 += 12;
      v7 += 12;
      if (v6 == v5)
        goto LABEL_10;
    }
    return 0;
  }
LABEL_10:
  v10 = **(char ***)(a2 + 80);
  v9 = *(char **)(*(_QWORD *)(a2 + 80) + 8);
  v11 = **(uint64_t ***)(a3 + 80);
  if (v9 - v10 != *(_QWORD *)(*(_QWORD *)(a3 + 80) + 8) - (_QWORD)v11)
    return 0;
  if (v10 == v9)
    return 1;
  do
  {
    v13 = *(_QWORD *)v10;
    v10 += 8;
    v12 = v13;
    v14 = *v11++;
    result = v12 == v14;
  }
  while (v12 == v14 && v10 != v9);
  return result;
}

BOOL sub_20B0F83A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  char v12;

  if (sub_20B0F8474((uint64_t)&v12, a2, (uint64_t **)a3)
    && **(_DWORD **)(a2 + 40) == **(_DWORD **)(a3 + 40)
    && (v5 = *(_QWORD *)(a2 + 48),
        v6 = *(_QWORD *)(a3 + 48),
        v7 = *(_QWORD *)(v5 + 8) - *(_QWORD *)v5,
        v7 == *(_QWORD *)(v6 + 8) - *(_QWORD *)v6)
    && !memcmp(*(const void **)v5, *(const void **)v6, v7)
    && **(_DWORD **)(a2 + 56) == **(_DWORD **)(a3 + 56)
    && (v8 = *(_QWORD *)(a2 + 64),
        v9 = *(_QWORD *)(a3 + 64),
        v10 = *(_QWORD *)(v8 + 8) - *(_QWORD *)v8,
        v10 == *(_QWORD *)(v9 + 8) - *(_QWORD *)v9))
  {
    return memcmp(*(const void **)v8, *(const void **)v9, v10) == 0;
  }
  else
  {
    return 0;
  }
}

BOOL sub_20B0F8474(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  float *v3;
  float *v4;
  uint64_t v5;
  float *v6;
  float v7;
  _BOOL4 v8;
  float v9;
  float *v10;
  float *v11;
  uint64_t v12;
  float *v13;
  float v14;
  _BOOL4 v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  _BOOL8 result;
  BOOL v23;
  float v24;
  float v25;
  float v26;

  v4 = **(float ***)a2;
  v3 = *(float **)(*(_QWORD *)a2 + 8);
  v5 = **a3;
  if ((char *)v3 - (char *)v4 != (*a3)[1] - v5)
    return 0;
  if (v4 != v3)
  {
    v6 = (float *)(v5 + 4);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v4 == v7;
      if (*v4 == v7)
      {
        v9 = v4[1];
        v8 = v9 == *v6;
        if (v9 == *v6)
          v8 = v4[2] == v6[1];
      }
      if (!v8)
        return 0;
      v4 += 3;
      v6 += 3;
    }
    while (v4 != v3);
  }
  if (**(_DWORD **)(a2 + 8) != *(_DWORD *)a3[1])
    return 0;
  v11 = **(float ***)(a2 + 16);
  v10 = *(float **)(*(_QWORD *)(a2 + 16) + 8);
  v12 = *a3[2];
  if ((char *)v10 - (char *)v11 != a3[2][1] - v12)
    return 0;
  if (v11 != v10)
  {
    v13 = (float *)(v12 + 4);
    do
    {
      v14 = *(v13 - 1);
      v15 = *v11 == v14;
      if (*v11 == v14)
      {
        v16 = v11[1];
        v15 = v16 == *v13;
        if (v16 == *v13)
          v15 = v11[2] == v13[1];
      }
      if (!v15)
        return 0;
      v11 += 3;
      v13 += 3;
    }
    while (v11 != v10);
  }
  if (**(_DWORD **)(a2 + 24) != *(_DWORD *)a3[3])
    return 0;
  v18 = **(_QWORD **)(a2 + 32);
  v17 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
  v19 = *a3[4];
  if (v17 - v18 != a3[4][1] - v19)
    return 0;
  if (v18 == v17)
    return 1;
  v20 = v18 + 12;
  v21 = (float *)(v19 + 4);
  do
  {
    v24 = *(float *)(v20 - 12);
    v25 = *(v21 - 1);
    result = v24 == v25;
    if (v24 == v25)
    {
      v26 = *(float *)(v20 - 8);
      result = v26 == *v21;
      if (v26 == *v21)
        result = *(float *)(v20 - 4) == v21[1];
    }
    v23 = !result || v20 == v17;
    v20 += 12;
    v21 += 3;
  }
  while (!v23);
  return result;
}

void sub_20B0F8628(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v6 = a2 + 16;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "info";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B50671C(a1);
  v14 = (unint64_t)"version";
  v15 = 7;
  v16 = 6;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B5086B4(a1, &v16);
  sub_20B0D1154(a1, v6, v16);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 **)(v9 - 8);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  v11 = a2 + 192;
  if (*v10 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "value";
    *(_QWORD *)(a1 + 80) = 5;
    *(_BYTE *)(a1 + 88) = 1;
    sub_20B0E71E8((uint64_t)&v14, a1, v11);
    if (a3 < 3)
      return;
  }
  else
  {
    sub_20B0E71E8((uint64_t)&v14, a1, v11);
    if (a3 < 3)
      return;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v12 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "textures";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v12)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v13 = *(_QWORD *)(a2 + 576);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 584) - v13) >> 3);
  v15 = v13;
  sub_20B50A640(a1, &v14);
}

void sub_20B0F87D4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const void **v15;
  const void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;

  v6 = a2 + 16;
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v22 = (uint64_t *)(v7 + 16);
    sub_20B51E95C(&v22, 6u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v22, v7 + 8);
  }
  sub_20B51956C(*(_QWORD *)(a1 + 24));
  sub_20B0D3CE4(a1, v6, 6u);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v8 + 48), *(_QWORD *)(v8 + 16) - v9 - 9);
  v10 = *(_QWORD *)(v8 + 48);
  if (v10)
    memmove((void *)(*(_QWORD *)(v8 + 24) + v9), *(const void **)(v8 + 56), v10);
  *(_QWORD *)(v8 + 48) = 0;
  v11 = *(_QWORD *)(v8 + 80);
  v12 = *(_QWORD *)(v8 + 88) - 8;
  *(_QWORD *)(v8 + 88) = v12;
  if (v11 == v12)
  {
    std::ostream::write();
    if (*(_BYTE *)(v8 + 40))
    {
      free(*(void **)(v8 + 24));
      *(_BYTE *)(v8 + 40) = 0;
    }
  }
  sub_20B0E8D5C((uint64_t)&v22, a1, a2 + 192);
  if (a3 >= 3)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 584) - *(_QWORD *)(a2 + 576)) >> 3);
    v14 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v14 + 40))
    {
      v22 = (uint64_t *)(v14 + 16);
      sub_20B51F33C(&v22, v13);
    }
    else
    {
      sub_20B51F644();
    }
    v15 = *(const void ***)(a2 + 576);
    v16 = *(const void ***)(a2 + 584);
    v17 = ((char *)v16 - (char *)v15) / 24;
    v18 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v18 + 40))
    {
      v22 = (uint64_t *)(v18 + 16);
      if (v16 != v15)
      {
        v19 = 24 * v17;
        do
        {
          sub_20B51FA2C((uint64_t)&v23, &v22, v15);
          v15 += 3;
          v19 -= 24;
        }
        while (v19);
      }
    }
    else if (v16 != v15)
    {
      v20 = v18 + 8;
      v21 = 24 * v17;
      do
      {
        sub_20B51FE64((uint64_t)&v22, v20, (uint64_t)v15);
        v15 += 3;
        v21 -= 24;
      }
      while (v21);
    }
  }
}

void sub_20B0F89C4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v6 = a2 + 16;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "info";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B505FB0(a1);
  v14 = (unint64_t)"version";
  v15 = 7;
  v16 = 6;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B5069D0(a1, &v16);
  sub_20B0D4F88(a1, v6, v16);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 **)(v9 - 8);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  v11 = a2 + 192;
  if (*v10 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "value";
    *(_QWORD *)(a1 + 80) = 5;
    *(_BYTE *)(a1 + 88) = 1;
    sub_20B0EA67C((uint64_t)&v14, a1, v11);
    if (a3 < 3)
      return;
  }
  else
  {
    sub_20B0EA67C((uint64_t)&v14, a1, v11);
    if (a3 < 3)
      return;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v12 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "textures";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v12)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v13 = *(_QWORD *)(a2 + 576);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 584) - v13) >> 3);
  v15 = v13;
  sub_20B508464(a1, &v14);
}

void sub_20B0F8B70(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  _QWORD *v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[48];

  v6 = a2 + 16;
  if (*(_QWORD *)(a1 + 40))
  {
    v7 = *(_QWORD **)(a1 + 24);
    LOBYTE(v21[0]) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v7, (uint64_t)v21, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20B0D66C4(a1, v6, 6u);
  v8 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v9 = *(_QWORD **)(a1 + 24);
    LOBYTE(v21[0]) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v9, (uint64_t)v21, 1);
  }
  v10 = *(_QWORD **)(a1 + 24);
  LOBYTE(v21[0]) = v8;
  sub_20AEC01D0(v10, (uint64_t)v21, 1);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11 + 1;
  if (v11 != -1)
  {
    v12 = *(_QWORD **)(a1 + 24);
    LOBYTE(v21[0]) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v12, (uint64_t)v21, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20B0E7B94((uint64_t)v21, a2 + 192);
  sub_20B0EB128(a1, v21, 4u);
  sub_20B0CDABC(v21);
  v13 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v14 = *(_QWORD **)(a1 + 24);
    LOBYTE(v21[0]) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v14, (uint64_t)v21, 1);
  }
  v15 = *(_QWORD **)(a1 + 24);
  LOBYTE(v21[0]) = v13;
  sub_20AEC01D0(v15, (uint64_t)v21, 1);
  v16 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v16;
  if (a3 >= 3)
  {
    if (v16)
    {
      v17 = *(_QWORD **)(a1 + 24);
      LOBYTE(v21[0]) = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v17, (uint64_t)v21, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    v18 = *(_QWORD *)(a2 + 576);
    v19 = *(_QWORD *)(a2 + 584) - v18;
    if (v19)
    {
      v20 = 24 * (v19 / 24);
      do
      {
        sub_20B512F6C(a1, v18);
        v18 += 24;
        v20 -= 24;
      }
      while (v20);
    }
  }
}

void sub_20B0F8D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CDABC(&a9);
  _Unwind_Resume(a1);
}

void *sub_20B0F8D90(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t __src;
  uint64_t v21;

  v6 = a2 + 16;
  LODWORD(__src) = 6;
  v7 = a1 + 24;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  v8 = __src;
  sub_20B42B554((_QWORD *)a1);
  sub_20B0D757C(a1, v6, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a1 + 32) - v9 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  result = sub_20B0EBDD4(a1, a2 + 192);
  if (a3 >= 3)
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 584) - *(_QWORD *)(a2 + 576)) >> 3);
    result = sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&v19, (char *)&__src, 8);
    v11 = *(_QWORD *)(a2 + 576);
    v12 = *(_QWORD *)(a2 + 584) - v11;
    if (v12)
    {
      v13 = 24 * (v12 / 24);
      do
      {
        v16 = *(unsigned __int8 *)(v11 + 23);
        if ((v16 & 0x80u) != 0)
          v16 = *(_QWORD *)(v11 + 8);
        __src = v16;
        sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v21, 8);
        if (*(char *)(v11 + 23) < 0)
        {
          v15 = *(char **)v11;
          v14 = *(_QWORD *)(v11 + 8);
          if (*(_QWORD *)v11)
            v17 = 1;
          else
            v17 = v14 == 0;
          if (!v17)
          {
            v18 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
            v15 = 0;
            if (v18)
              abort();
          }
        }
        else
        {
          v14 = *(unsigned __int8 *)(v11 + 23);
          v15 = (char *)v11;
        }
        result = sub_20B42DB24(v7, *(char **)(a1 + 32), v15, &v15[v14], v14);
        v11 += 24;
        v13 -= 24;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t *sub_20B0F8F94(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v6 = a2 + 16;
  v7 = *((_DWORD *)a1 + 2);
  LODWORD(v13) = 6;
  (*(void (**)(_QWORD *, unint64_t *))(*a1 + 104))(a1, &v13);
  v8 = v13;
  if (v7 < 1)
  {
    sub_20B0D8514((uint64_t)a1, v6, v13);
  }
  else
  {
    if (v7 == 2)
    {
      LODWORD(v13) = 3;
      (*(void (**)(_QWORD *, unint64_t *))(*a1 + 104))(a1, &v13);
    }
    (*(void (**)(_QWORD *))(*a1 + 16))(a1);
    sub_20B0D8514((uint64_t)a1, v6, v8);
    (*(void (**)(_QWORD *))(*a1 + 24))(a1);
  }
  v13 = a1[1];
  result = sub_20B0EC5A4((int *)&v13, (uint64_t)a1, a2 + 192);
  if (a3 >= 3)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 584) - *(_QWORD *)(a2 + 576)) >> 3);
    result = (uint64_t *)(*(uint64_t (**)(_QWORD *, unint64_t *))(*a1 + 120))(a1, &v13);
    v10 = *(_QWORD *)(a2 + 576);
    v11 = *(_QWORD *)(a2 + 584) - v10;
    if (v11)
    {
      v12 = 24 * (v11 / 24);
      do
      {
        result = (uint64_t *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 144))(a1, v10);
        v10 += 24;
        v12 -= 24;
      }
      while (v12);
    }
  }
  return result;
}

BOOL sub_20B0F9108(const void *a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  int v10;
  void **v11;
  int v12;
  unsigned __int8 *v13;
  char v15;

  v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  v6 = (uint64_t)v5;
  if (v5)
  {
    v7 = *a3;
    v8 = *((unsigned __int8 *)v5 + 104);
    v5[11] = "info";
    v5[12] = 4;
    if (!v8)
      *((_BYTE *)v5 + 104) = 1;
    sub_20B0D978C((uint64_t)v5, a2 + 16);
    v9 = (uint64_t *)(a2 + 192);
    v10 = *(unsigned __int8 *)(v6 + 104);
    *(_QWORD *)(v6 + 88) = "value";
    *(_QWORD *)(v6 + 96) = 5;
    if (v10)
    {
      sub_20B0ECE9C(v6, v9);
      if (v7 < 3)
        return v6 != 0;
    }
    else
    {
      *(_BYTE *)(v6 + 104) = 1;
      sub_20B0ECE9C(v6, v9);
      if (v7 < 3)
        return v6 != 0;
    }
    v11 = (void **)(a2 + 576);
    v12 = *(unsigned __int8 *)(v6 + 104);
    *(_QWORD *)(v6 + 88) = "textures";
    *(_QWORD *)(v6 + 96) = 8;
    if (!v12)
      *(_BYTE *)(v6 + 104) = 1;
    v15 = 0;
    v13 = (unsigned __int8 *)sub_20B50AF4C((uint64_t *)v6);
    ++*(_QWORD *)(v6 + 112);
    sub_20B50C8A0((uint64_t)&v15, v13, v11);
  }
  return v6 != 0;
}

BOOL sub_20B0F9224(const void *a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  int v10;
  void **v11;
  int v12;
  unsigned __int8 *v13;
  char v15;

  v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
  v6 = (uint64_t)v5;
  if (v5)
  {
    v7 = *a3;
    v8 = *((unsigned __int8 *)v5 + 104);
    v5[11] = "info";
    v5[12] = 4;
    if (!v8)
      *((_BYTE *)v5 + 104) = 1;
    sub_20B0DE788((uint64_t)v5, a2 + 16);
    v9 = (uint64_t *)(a2 + 192);
    v10 = *(unsigned __int8 *)(v6 + 104);
    *(_QWORD *)(v6 + 88) = "value";
    *(_QWORD *)(v6 + 96) = 5;
    if (v10)
    {
      sub_20B0F29D8(v6, v9);
      if (v7 < 3)
        return v6 != 0;
    }
    else
    {
      *(_BYTE *)(v6 + 104) = 1;
      sub_20B0F29D8(v6, v9);
      if (v7 < 3)
        return v6 != 0;
    }
    v11 = (void **)(a2 + 576);
    v12 = *(unsigned __int8 *)(v6 + 104);
    *(_QWORD *)(v6 + 88) = "textures";
    *(_QWORD *)(v6 + 96) = 8;
    if (!v12)
      *(_BYTE *)(v6 + 104) = 1;
    v15 = 0;
    v13 = (unsigned __int8 *)sub_20B50AA5C((uint64_t *)v6);
    ++*(_QWORD *)(v6 + 112);
    sub_20B50BB0C((uint64_t)&v15, v13, v11);
  }
  return v6 != 0;
}

double sub_20B0F9340(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  double result;
  char v12;
  char v13;
  char v14;
  char v15;
  void *__p;
  uint64_t v17;
  char v18;

  v6 = a2 + 16;
  LODWORD(__p) = 6;
  sub_20B514490(a1, &__p);
  v7 = __p;
  if (__p >= 6)
    v8 = 6;
  else
    v8 = __p;
  if (v8 < 3)
  {
    sub_20B0E0A94((uint64_t)&__p, a1, v6, v8);
    if (v7 < 3)
      goto LABEL_9;
LABEL_8:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_9;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_9;
      sub_20B51680C(a1, (uint64_t)&__p);
      if (v18 < 0)
      {
        if (v17 == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_26:
          v13 = 0;
          if (v18 < 0)
            goto LABEL_29;
          goto LABEL_15;
        }
      }
      else if (v18 == 1 && *(unsigned __int8 *)(a1 + 72) == __p)
      {
        goto LABEL_26;
      }
      v13 = 1;
      if (v18 < 0)
LABEL_29:
        operator delete(__p);
LABEL_15:
      if (*(_BYTE *)(a1 + 131))
        v12 = 0;
      else
        v12 = v13;
      if ((v12 & 1) == 0)
        goto LABEL_9;
    }
  }
  sub_20B0E0C84(a1, v6, v8);
  if (v7 >= 3)
    goto LABEL_8;
LABEL_9:
  LODWORD(__p) = 4;
  sub_20B514490(a1, &__p);
  v9 = __p;
  if (__p >= 4)
    v10 = 4;
  else
    v10 = __p;
  if (v10 < 3)
  {
    sub_20B0F40F8((uint64_t)&__p, a1, (uint64_t *)(a2 + 192), v10);
    if (v9 < 3)
      goto LABEL_32;
LABEL_31:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_32;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_32;
      sub_20B51680C(a1, (uint64_t)&__p);
      if (v18 < 0)
      {
        if (v17 == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_46:
          v15 = 0;
          if (v18 < 0)
            goto LABEL_49;
          goto LABEL_35;
        }
      }
      else if (v18 == 1 && *(unsigned __int8 *)(a1 + 72) == __p)
      {
        goto LABEL_46;
      }
      v15 = 1;
      if (v18 < 0)
LABEL_49:
        operator delete(__p);
LABEL_35:
      if (*(_BYTE *)(a1 + 131))
        v14 = 0;
      else
        v14 = v15;
      if ((v14 & 1) == 0)
        goto LABEL_32;
    }
  }
  sub_20B0F4970(a1, a2 + 192, v10);
  if (v9 >= 3)
    goto LABEL_31;
LABEL_32:
  if (a3 >= 3)
    *(_QWORD *)&result = sub_20B0E15D0(a1, (char **)(a2 + 576)).n128_u64[0];
  return result;
}

void sub_20B0F9594(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  int v11[3];
  unsigned int v12;

  v6 = a2 + 16;
  v7 = *(_QWORD *)a1;
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  v12 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v7 + 104))(a1, &v12);
  if (v11[0] < 1)
  {
    if (v12 < 3)
      sub_20B0E41CC((uint64_t)&v12, a1, v6, v12);
    else
      sub_20B0E4440(a1, v6, v12);
  }
  else
  {
    sub_20B0E3BD4(v11, a1, v6, v12);
  }
  v8 = *(_QWORD *)a1;
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  v9 = v11[0];
  v12 = 4;
  (*(void (**)(uint64_t, unsigned int *))(v8 + 104))(a1, &v12);
  if (v9 >= 1)
  {
    sub_20B0F6334(v11, (_BYTE *)a1, (uint64_t *)(a2 + 192), v12);
    if (a3 < 3)
      return;
    goto LABEL_13;
  }
  v10 = (uint64_t *)(a2 + 192);
  if (v12 < 3)
  {
    sub_20B0F68C8((_BYTE *)a1, v10, v12);
    if (a3 < 3)
      return;
    goto LABEL_13;
  }
  sub_20B0F7264(a1, (uint64_t)v10, v12);
  if (a3 >= 3)
LABEL_13:
    sub_20B0E4ED8(a1, (char **)(a2 + 576));
}

uint64_t sub_20B0F96C4(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t *v15;

  v10 = a2;
  v11 = "{";
  v12 = a2;
  v13 = "{";
  v14 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **))off_24C40DCC0[v3])(&v15);
  sub_20AF57AB0((uint64_t)&v10, a2, a3);
  v10 = a2;
  v11 = ",";
  v12 = a2;
  v13 = ",";
  v14 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_24C40DCC0[v6])(&v15, a2);
  sub_20AF57AB0((uint64_t)&v10, a2, a3 + 1);
  v10 = a2;
  v11 = ",";
  v12 = a2;
  v13 = ",";
  v14 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_24C40DCC0[v7])(&v15, a2);
  sub_20AF57AB0((uint64_t)&v10, a2, a3 + 2);
  v10 = a2;
  v11 = "}";
  v12 = a2;
  v13 = "}";
  v14 = "}";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
LABEL_6:
    sub_20AECFAB8();
  v15 = &v10;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C40DCC0[v8])(&v15, a2);
}

uint64_t sub_20B0F9814(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  uint64_t *v19;

  v14 = a2;
  v15 = (std::string *)"{";
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_24C40DCC0[v3])(&v13);
  std::to_string(&v13, *a3);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_20AECFAB8();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C40DC30[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C40DCC0[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_16;
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C40DC30[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_15:
    sub_20AECFAB8();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C40DCC0[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_16:
    sub_20AECFAB8();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C40DC30[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = (std::string *)"}";
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C40DCC0[v11])(&v13, a2);
}

void sub_20B0F9A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0F9A54(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t *v14;

  v9 = a2;
  v10 = "{";
  v11 = a2;
  v12 = "{";
  v13 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_5;
  v14 = &v9;
  ((void (*)(uint64_t **))off_24C40DCC0[v3])(&v14);
  sub_20AF57AB0((uint64_t)&v9, a2, a3);
  v9 = a2;
  v10 = ",";
  v11 = a2;
  v12 = ",";
  v13 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_5;
  v14 = &v9;
  ((void (*)(uint64_t **, uint64_t))off_24C40DCC0[v6])(&v14, a2);
  sub_20AF57AB0((uint64_t)&v9, a2, a3 + 1);
  v9 = a2;
  v10 = "}";
  v11 = a2;
  v12 = "}";
  v13 = "}";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
LABEL_5:
    sub_20AECFAB8();
  v14 = &v9;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C40DCC0[v7])(&v14, a2);
}

void sub_20B0F9B58(uint64_t a1, _QWORD **a2, float *a3)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  uint64_t v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *__p;
  size_t v21;
  int64_t v22;
  std::string v23;

  std::to_string(&v23, *a3);
  v5 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v23;
  else
    v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  v8 = size;
  do
  {
    if (!v8)
    {
      v8 = -1;
      if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (v8 != HIBYTE(v23.__r_.__value_.__r.__words[2]) - 1)
      {
        v5 = &v23;
        goto LABEL_16;
      }
LABEL_15:
      sub_20AEC01D0(*a2, (uint64_t)v6, size);
LABEL_48:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_51;
    }
    v9 = v6->__r_.__value_.__s.__data_[--v8];
  }
  while (v9 == 48);
  if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (v8 == v23.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_16:
  if (strtof((const char *)v5, 0) != *a3)
  {
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v23;
    else
      v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      size = v23.__r_.__value_.__l.__size_;
    goto LABEL_15;
  }
  v10 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v23;
  else
    v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = v23.__r_.__value_.__l.__size_;
  v12 = 1;
  if (v11->__r_.__value_.__s.__data_[v8] == 46)
    v12 = 2;
  v13 = v12 + v8;
  if (v10 >= v13)
    v14 = v13;
  else
    v14 = v10;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v21 = v14;
    v22 = v17 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_40;
  }
  HIBYTE(v22) = v14;
  p_p = &__p;
  if (v14)
LABEL_40:
    memmove(p_p, v11, v14);
  *((_BYTE *)p_p + v14) = 0;
  if (v22 >= 0)
    v18 = &__p;
  else
    v18 = __p;
  if (v22 >= 0)
    v19 = HIBYTE(v22);
  else
    v19 = v21;
  sub_20AEC01D0(*a2, (uint64_t)v18, v19);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
    goto LABEL_48;
  operator delete(__p);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_51:
  operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_20B0F9D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B0F9DC4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24C3F6340;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(a1 + 8);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
  *(_BYTE *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 88) = 0;
  if (*(_BYTE *)(a1 + 88))
  {
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(v4 + 80) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(v4 + 88) = 1;
  }
  *(_BYTE *)(v4 + 96) = 0;
  *(_BYTE *)(v4 + 120) = 0;
  if (*(_BYTE *)(a1 + 120))
  {
    *(_OWORD *)(v4 + 96) = *(_OWORD *)(a1 + 96);
    *(_QWORD *)(v4 + 112) = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_BYTE *)(v4 + 120) = 1;
  }
  *(_BYTE *)(v4 + 160) = 0;
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(a1 + 144);
  *(_BYTE *)(v4 + 208) = 0;
  if (*(_BYTE *)(a1 + 208))
  {
    *(_OWORD *)(v4 + 160) = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(v4 + 176) = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    v6 = (unsigned __int128 *)(a1 + 192);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 192) = v7;
    *(_BYTE *)(v4 + 208) = 1;
  }
  *(_BYTE *)(v4 + 224) = 0;
  *(_BYTE *)(v4 + 248) = 0;
  if (*(_BYTE *)(a1 + 248))
  {
    *(_OWORD *)(v4 + 224) = *(_OWORD *)(a1 + 224);
    *(_QWORD *)(v4 + 240) = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_BYTE *)(v4 + 248) = 1;
  }
  *(_QWORD *)v4 = &off_24C3F62C0;
  *a2 = &off_24C411E78;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20B0F9F70(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double sub_20B0F9F8C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __dst[24];

  v4 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = (_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_20AEC60F4(v5, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a2 + 48), *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 96);
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(unsigned __int8 *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 88) = v7;
    *(_BYTE *)(a2 + 96) = 1;
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 96) = 0;
    if (*(_BYTE *)(a1 + 136))
    {
LABEL_13:
      if (*(char *)(a1 + 135) < 0)
      {
        sub_20AEC60F4(__dst, *(void **)(a1 + 112), *(_QWORD *)(a1 + 120));
      }
      else
      {
        v6 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)__dst = v6;
        *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 128);
      }
      v9 = *(_QWORD *)&__dst[8];
      v10 = *(_QWORD *)&__dst[15];
      *(_QWORD *)(a2 + 112) = *(_QWORD *)__dst;
      *(_QWORD *)(a2 + 120) = v9;
      *(_QWORD *)(a2 + 127) = v10;
      *(_BYTE *)(a2 + 135) = __dst[23];
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_BYTE *)(a2 + 160) = 1;
      v8 = *(_BYTE *)(a1 + 168);
      if (v8)
        goto LABEL_20;
      goto LABEL_17;
    }
  }
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  v8 = *(_BYTE *)(a1 + 168);
  if (v8)
  {
LABEL_20:
    sub_20B0FA1A4((uint64_t *)(a1 + 144), (uint64_t)__dst);
    *(_QWORD *)&v6 = *(_QWORD *)__dst;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)__dst;
    *(_QWORD *)(a2 + 192) = *(_QWORD *)&__dst[16];
    *(_BYTE *)(a2 + 200) = 1;
    return *(double *)&v6;
  }
LABEL_17:
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 200) = v8;
  return *(double *)&v6;
}

void sub_20B0FA138(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[72] && v1[71] < 0)
    operator delete(*v3);
  if (v1[40])
  {
    if (v1[39] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_20B0FA1A4@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unsigned __int128 v12;
  char *v13;
  double result;
  __int128 v15;
  unint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  __int128 __p;
  uint64_t v21;
  unsigned __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v16 = 0;
  v15 = 0uLL;
  sub_20B0C3110((uint64_t)&v15, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 24)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      v8 = *(_BYTE **)v6;
      v7 = *(_QWORD *)(v6 + 8);
    }
    else
    {
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = (_BYTE *)v6;
    }
    sub_20B216330(v8, v7, (uint64_t)v17);
    v9 = *((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1) >= v16)
    {
      v13 = sub_20B0C32C0(&v15, (uint64_t)v17);
    }
    else
    {
      **((_BYTE **)&v15 + 1) = 0;
      *(_BYTE *)(v9 + 24) = 0;
      if (v19)
      {
        v10 = *(_OWORD *)v17;
        *(_QWORD *)(v9 + 16) = v18;
        *(_OWORD *)v9 = v10;
        v17[1] = 0;
        v18 = 0;
        v17[0] = 0;
        *(_BYTE *)(v9 + 24) = 1;
      }
      *(_BYTE *)(v9 + 32) = 0;
      *(_BYTE *)(v9 + 80) = 0;
      if (v23)
      {
        v11 = __p;
        *(_QWORD *)(v9 + 48) = v21;
        *(_OWORD *)(v9 + 32) = v11;
        v21 = 0;
        __p = 0uLL;
        do
          v12 = __ldaxp(&v22);
        while (__stlxp(v12, &v22));
        *(_OWORD *)(v9 + 64) = v12;
        *(_BYTE *)(v9 + 80) = 1;
      }
      v13 = (char *)(v9 + 96);
    }
    *((_QWORD *)&v15 + 1) = v13;
    if (v23 && SHIBYTE(v21) < 0)
      operator delete((void *)__p);
    if (v19 && SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_20B0FA350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void **v30;
  void **v31;

  if (__p)
  {
    v30 = a10;
    v31 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((_BYTE *)v30 - 16) && *((char *)v30 - 41) < 0)
          operator delete(*(v30 - 8));
        if (*((_BYTE *)v30 - 72))
        {
          if (*((char *)v30 - 73) < 0)
            operator delete(*(v30 - 12));
        }
        v30 -= 12;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0FA468(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0FABAC((uint64_t)v8, a2);
  sub_20B0FA584(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0FA56C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FA584(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  void **v14;
  unsigned __int8 *v15;
  int v16;
  void **v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  void **v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  void **v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  void **v36;
  int v37;
  void **v38;
  unsigned __int8 *v39;
  int v40;
  void **v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B50671C(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_20B5086B4(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_20B5086B4(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(void ***)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = (uint64_t)v14;
    v15 = (unsigned __int8 *)sub_20B506370(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = (void **)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = (uint64_t)v17;
    sub_20B4181DC((void ***)&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_20B0D1BF4(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_20B506370(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = (uint64_t)v23;
    sub_20B4181DC((void ***)&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_20B0D1FB0((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_20B506370(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = (void **)*((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = (uint64_t)v28;
    sub_20B4181DC((void ***)&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_20B508B7C(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_20B506370(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = (void **)*((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = (uint64_t)v41;
      sub_20B4181DC((void ***)&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_20B508B7C(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_20B506370(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = (void **)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = (uint64_t)v32;
      sub_20B4181DC((void ***)&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_20B508B7C(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_20B506370(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = (void **)*((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = (uint64_t)v36;
      sub_20B4181DC((void ***)&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(void ***)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - (_QWORD)v38) >> 3);
      v43 = (uint64_t)v38;
      sub_20B50A640(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_20B508B7C(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_20B0FAB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0FAB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0FAB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0FAB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0FABAC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = v8;
    }
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 112), *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v9;
    }
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    sub_20B0D1AC4((char *)(a1 + 144), *(_QWORD *)(a2 + 144), *(_QWORD *)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3));
    *(_BYTE *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_20B0FAD1C(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[136] && v2[135] < 0)
    operator delete(*v4);
  if (v2[104] && v2[103] < 0)
    operator delete(*v3);
  if (v2[48])
  {
    if (v2[47] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0FADD8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0FB288((uint64_t)v8, a2);
  sub_20B0FAEF4(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0FAEDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FAEF4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  void **v14;
  unsigned __int8 *v15;
  int v16;
  void **v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  void **v27;
  const char *v28;
  uint64_t v29;
  int v30;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B50671C(a1);
  v28 = "version";
  v29 = 7;
  v30 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_20B5086B4(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_20B5086B4(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(void ***)(a2 + 8);
    LOBYTE(v28) = 5;
    v29 = (uint64_t)v14;
    v15 = (unsigned __int8 *)sub_20B506370(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v28) = v16;
    v17 = (void **)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v29;
    v29 = (uint64_t)v17;
    sub_20B4181DC((void ***)&v29, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v28 = (const char *)(a2 + 16);
  sub_20B0D1BF4(a1, (unsigned __int8 **)&v28);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v28) = 0;
    v29 = 0;
    v21 = (unsigned __int8 *)sub_20B506370(a1);
    v22 = *v21;
    *v21 = v28;
    LOBYTE(v28) = v22;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v29;
    v29 = (uint64_t)v23;
    sub_20B4181DC((void ***)&v29, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v28 = *(const char **)(a1 + 8);
        sub_20B0D1FB0((int *)&v28, a1, (__int128 *)(a2 + 56));
        return;
      }
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    LOBYTE(v28) = 0;
    v29 = 0;
    v25 = (unsigned __int8 *)sub_20B506370(a1);
    v26 = *v25;
    *v25 = v28;
    LOBYTE(v28) = v26;
    v27 = (void **)*((_QWORD *)v25 + 1);
    *((_QWORD *)v25 + 1) = v29;
    v29 = (uint64_t)v27;
    sub_20B4181DC((void ***)&v29, v26);
    return;
  }
  sub_20B508B7C(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_20B0FB240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0FB258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0FB270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0FB288(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = v8;
    }
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 112), *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v9;
    }
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    sub_20B0D1AC4((char *)(a1 + 144), *(_QWORD *)(a2 + 144), *(_QWORD *)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3));
    *(_BYTE *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_20B0FB3F8(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[136] && v2[135] < 0)
    operator delete(*v4);
  if (v2[104] && v2[103] < 0)
    operator delete(*v3);
  if (v2[48])
  {
    if (v2[47] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0FB4B4(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v6;
  char *v7;
  int v8;
  _BYTE v9[16];
  void *__p;
  void *v11;
  char *v12;
  _BYTE *v13;

  v9[0] = *(_BYTE *)a2;
  v9[8] = *(_BYTE *)(a2 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  v4 = *(_BYTE **)(a2 + 16);
  v3 = *(_BYTE **)(a2 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v6 = (char *)operator new(v3 - v4);
    v7 = &v6[v5];
    __p = v6;
    v12 = &v6[v5];
    memcpy(v6, v4, v5);
    v11 = v7;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v13 = v9;
  sub_20B0FBCB0(a1, &v13);
  sub_20B0FB5C0(v9[0], (uint64_t)v9, a1);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B0FB5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0FB5C0(int a1, uint64_t a2, uint64_t a3)
{
  void **v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void **v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int *v20;
  int v21;
  int v22;
  int *v24;
  int v25;
  int v26;
  unsigned __int8 *v28;
  int *v29;
  int v30;
  int v31;
  int *v33;
  int v34;
  int v35;
  int *v37;
  int v38;
  int v39;
  int *v41;
  int v42;
  int v43;
  int v45;
  void **v46;
  int *v47;
  int v48;
  int v49;
  int *v51;
  int v52;
  int v53;
  uint64_t v55;
  void **v56;

  switch(a1)
  {
    case 0:
      v4 = (void **)*(unsigned __int8 *)sub_20B522A74(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_54;
      }
      else
      {
        v5 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v5)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v16 = *(int **)(a3 + 72);
      v17 = *v16;
      v18 = *(int *)((char *)v16 + 3);
      if (v17 != *(_DWORD *)"version" || v18 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 1:
      v4 = (void **)*(unsigned __int16 *)sub_20B522CCC(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_54;
      }
      else
      {
        v6 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v6)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v20 = *(int **)(a3 + 72);
      v21 = *v20;
      v22 = *(int *)((char *)v20 + 3);
      if (v21 != *(_DWORD *)"version" || v22 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 2:
      LODWORD(v55) = *(_DWORD *)sub_20B522DB4(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v7)
          *(_BYTE *)(a3 + 88) = 1;
      }
      sub_20B5086B4(a3, &v55);
      return;
    case 3:
      v4 = *(void ***)sub_20B522E9C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_54:
          LOBYTE(v55) = 6;
          v56 = v4;
          v28 = (unsigned __int8 *)sub_20B506370(a3);
          goto LABEL_83;
        }
      }
      else
      {
        v8 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v8)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v24 = *(int **)(a3 + 72);
      v25 = *v24;
      v26 = *(int *)((char *)v24 + 3);
      if (v25 != *(_DWORD *)"version" || v26 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 5:
      v9 = (void **)*(char *)sub_20B522F84(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v10 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v10)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v29 = *(int **)(a3 + 72);
      v30 = *v29;
      v31 = *(int *)((char *)v29 + 3);
      if (v30 != *(_DWORD *)"version" || v31 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 6:
      v9 = (void **)*(__int16 *)sub_20B52306C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v11 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v11)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v33 = *(int **)(a3 + 72);
      v34 = *v33;
      v35 = *(int *)((char *)v33 + 3);
      if (v34 != *(_DWORD *)"version" || v35 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 7:
      v9 = (void **)*(int *)sub_20B523154(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v12 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v12)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v37 = *(int **)(a3 + 72);
      v38 = *v37;
      v39 = *(int *)((char *)v37 + 3);
      if (v38 != *(_DWORD *)"version" || v39 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 8:
      v9 = *(void ***)sub_20B52323C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v13 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v13)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) == 7)
      {
        v41 = *(int **)(a3 + 72);
        v42 = *v41;
        v43 = *(int *)((char *)v41 + 3);
        if (v42 == *(_DWORD *)"version" && v43 == *(_DWORD *)"sion")
          return;
      }
LABEL_82:
      LOBYTE(v55) = 5;
      v56 = v9;
      v28 = (unsigned __int8 *)sub_20B506370(a3);
LABEL_83:
      v45 = *v28;
      *v28 = v55;
      LOBYTE(v55) = v45;
      v46 = (void **)*((_QWORD *)v28 + 1);
      *((_QWORD *)v28 + 1) = v56;
      v56 = v46;
      sub_20B4181DC(&v56, v45);
      return;
    case 11:
      LODWORD(v55) = *(_DWORD *)sub_20B523324(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_90:
          sub_20B508790(a3, (float *)&v55);
          return;
        }
      }
      else
      {
        v14 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v14)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_90;
      v47 = *(int **)(a3 + 72);
      v48 = *v47;
      v49 = *(int *)((char *)v47 + 3);
      if (v48 != *(_DWORD *)"version" || v49 != *(_DWORD *)"sion")
        goto LABEL_90;
      return;
    case 12:
      v55 = *(_QWORD *)sub_20B52340C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_97:
          sub_20B508988(a3, (double *)&v55);
          return;
        }
      }
      else
      {
        v15 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v15)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_97;
      v51 = *(int **)(a3 + 72);
      v52 = *v51;
      v53 = *(int *)((char *)v51 + 3);
      if (v52 != *(_DWORD *)"version" || v53 != *(_DWORD *)"sion")
        goto LABEL_97;
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B0FBC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B0FBC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B0FBC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B0FBC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B0FBC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B0FBC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B0FBC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B0FBCB0(uint64_t a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20AF6A118((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B508B7C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B0FBD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0FBD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FBDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FBDB8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0FABAC((uint64_t)v8, a2);
  sub_20B0D3E00(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0FBEBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FBED4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0FB288((uint64_t)v8, a2);
  sub_20B0FBFF0(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0FBFD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FBFF0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;

  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v19 = (uint64_t *)(v6 + 16);
    sub_20B51E95C(&v19, 2u);
    sub_20B51956C(*(_QWORD *)(a1 + 24));
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_3;
LABEL_6:
    sub_20B51F1FC();
    v8 = *(char *)(a2 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 40))
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_20B51EBD0((uint64_t)&v19, v6 + 8);
  sub_20B51956C(*(_QWORD *)(a1 + 24));
  v7 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v7 + 40))
    goto LABEL_6;
LABEL_3:
  v19 = (uint64_t *)(v7 + 16);
  sub_20B51ECC0(&v19, *(_QWORD *)(a2 + 8));
  v8 = *(char *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
LABEL_4:
    v19 = (uint64_t *)(v9 + 16);
    sub_20B51DD74(&v19, v8);
    goto LABEL_11;
  }
LABEL_7:
  if (v8 < 0)
  {
    LOBYTE(v19) = -52;
    BYTE1(v19) = v8;
  }
  else
  {
    LOBYTE(v19) = v8;
  }
  std::ostream::write();
LABEL_11:
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v10 + 48), *(_QWORD *)(v10 + 16) - v11 - 9);
  v12 = *(_QWORD *)(v10 + 48);
  if (v12)
    memmove((void *)(*(_QWORD *)(v10 + 24) + v11), *(const void **)(v10 + 56), v12);
  *(_QWORD *)(v10 + 48) = 0;
  v13 = *(_QWORD *)(v10 + 80);
  v14 = *(_QWORD *)(v10 + 88) - 8;
  *(_QWORD *)(v10 + 88) = v14;
  if (v13 == v14)
  {
    std::ostream::write();
    if (*(_BYTE *)(v10 + 40))
    {
      free(*(void **)(v10 + 24));
      *(_BYTE *)(v10 + 40) = 0;
    }
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v17 + 40))
    {
      v19 = (uint64_t *)(v17 + 16);
      sub_20B51DD74(&v19, 0);
      if (a3 < 4)
        return;
    }
    else
    {
      LOBYTE(v19) = 0;
      std::ostream::write();
      if (a3 < 4)
        return;
    }
    goto LABEL_26;
  }
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v15 + 40))
  {
    v19 = (uint64_t *)(v15 + 16);
    sub_20B51DD74(&v19, 1);
    v16 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v16 + 40))
      goto LABEL_19;
LABEL_25:
    sub_20B51FE64((uint64_t)&v19, v16 + 8, a2 + 24);
    if (a3 < 4)
      return;
    goto LABEL_26;
  }
  LOBYTE(v19) = 1;
  std::ostream::write();
  v16 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v16 + 40))
    goto LABEL_25;
LABEL_19:
  v19 = (uint64_t *)(v16 + 16);
  sub_20B51FA2C((uint64_t)&v18, &v19, (const void **)(a2 + 24));
  if (a3 < 4)
    return;
LABEL_26:
  sub_20B0D4470(a1, a2 + 56);
}

void sub_20B0FC270(uint64_t a1, char *a2)
{
  int v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE v10[16];
  void *__p;
  void *v12;
  char *v13;
  uint64_t *v14;

  v3 = *a2;
  v10[0] = *a2;
  v10[8] = a2[8];
  v12 = 0;
  v13 = 0;
  __p = 0;
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v4 = (_BYTE *)*((_QWORD *)a2 + 3);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v7 = (char *)operator new(v4 - v5);
    v8 = &v7[v6];
    __p = v7;
    v13 = &v7[v6];
    memcpy(v7, v5, v6);
    v12 = v8;
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
    v14 = (uint64_t *)(v9 + 16);
    sub_20B51DD74(&v14, v3);
  }
  else
  {
    if (v3 < 0)
    {
      LOBYTE(v14) = -52;
      BYTE1(v14) = v3;
    }
    else
    {
      LOBYTE(v14) = v3;
    }
    std::ostream::write();
  }
  sub_20B0FC39C(v10[0], (uint64_t)v10, a1);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B0FC37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20B0FC39C(int a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  int v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  _BYTE v28[9];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      v4 = (char *)sub_20B522A74(a2 + 8);
      v5 = *v4;
      v6 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v6 + 40))
      {
        *(_QWORD *)v28 = v6 + 16;
        return sub_20B51DD74((uint64_t **)v28, v5);
      }
      if (v5 < 0)
      {
        v28[0] = -52;
        v28[1] = v5;
      }
      else
      {
        v28[0] = *v4;
      }
      return (char *)std::ostream::write();
    case 1:
      v8 = *(unsigned __int16 *)sub_20B522CCC(a2 + 8);
      v9 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        *(_QWORD *)v28 = v9 + 16;
        return sub_20B51E278((uint64_t **)v28, v8);
      }
      if (v8 <= 0x7F)
      {
        v28[0] = v8;
        return (char *)std::ostream::write();
      }
      if (v8 > 0xFF)
      {
        v28[0] = -51;
        *(_WORD *)&v28[1] = __rev16(v8);
      }
      else
      {
        v28[0] = -52;
        v28[1] = v8;
      }
      return (char *)std::ostream::write();
    case 2:
      v10 = *(_DWORD *)sub_20B522DB4(a2 + 8);
      v11 = *(_QWORD *)(a3 + 24);
      if (!*(_BYTE *)(v11 + 40))
        return (char *)sub_20B51EBD0((uint64_t)v28, v11 + 8);
      *(_QWORD *)v28 = v11 + 16;
      return sub_20B51E95C((uint64_t **)v28, v10);
    case 3:
      v12 = *(_QWORD *)sub_20B522E9C(a2 + 8);
      v13 = *(_QWORD *)(a3 + 24);
      if (!*(_BYTE *)(v13 + 40))
        return (char *)sub_20B51F644();
      *(_QWORD *)v28 = v13 + 16;
      return sub_20B51F33C((uint64_t **)v28, v12);
    case 5:
      v14 = *(char *)sub_20B522F84(a2 + 8);
      v15 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v15 + 40))
      {
        *(_QWORD *)v28 = v15 + 16;
        return sub_20B51DC2C((uint64_t **)v28, v14);
      }
      else
      {
        if (v14 > -33)
        {
          v28[0] = v14;
        }
        else
        {
          v28[0] = -48;
          v28[1] = v14;
        }
        return (char *)std::ostream::write();
      }
    case 6:
      v16 = *(_WORD *)sub_20B52306C(a2 + 8);
      v17 = *(_QWORD *)(a3 + 24);
      if (!*(_BYTE *)(v17 + 40))
        return (char *)sub_20B51E17C();
      *(_QWORD *)v28 = v17 + 16;
      return sub_20B51DEB8((uint64_t **)v28, v16);
    case 7:
      v18 = *(_DWORD *)sub_20B523154(a2 + 8);
      v19 = *(_QWORD *)(a3 + 24);
      if (!*(_BYTE *)(v19 + 40))
        return (char *)sub_20B51E860();
      *(_QWORD *)v28 = v19 + 16;
      return sub_20B51E444((uint64_t **)v28, v18);
    case 8:
      v20 = *(_QWORD *)sub_20B52323C(a2 + 8);
      v21 = *(_QWORD *)(a3 + 24);
      if (!*(_BYTE *)(v21 + 40))
        return (char *)sub_20B51F1FC();
      *(_QWORD *)v28 = v21 + 16;
      return sub_20B51ECC0((uint64_t **)v28, v20);
    case 11:
      v22 = *(_DWORD *)sub_20B523324(a2 + 8);
      LODWORD(v26) = v22;
      v23 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v23 + 40))
      {
        *(_QWORD *)v28 = v23 + 16;
        return (char *)sub_20B51F73C((uint64_t)&v27, (uint64_t **)v28, (unsigned int *)&v26);
      }
      else
      {
        v28[0] = -54;
        *(_DWORD *)&v28[1] = bswap32(v22);
        return (char *)std::ostream::write();
      }
    case 12:
      v24 = *(_QWORD *)sub_20B52340C(a2 + 8);
      v26 = v24;
      v25 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v25 + 40))
      {
        *(_QWORD *)v28 = v25 + 16;
        return (char *)sub_20B51F818((uint64_t)&v27, (uint64_t **)v28, &v26);
      }
      else
      {
        v28[0] = -53;
        *(_QWORD *)&v28[1] = bswap64(v24);
        return (char *)std::ostream::write();
      }
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B0FC7EC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0FABAC((uint64_t)v8, a2);
  sub_20B0FC908(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0FC8F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FC908(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B505FB0(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_20B5069D0(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_20B5069D0(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(_QWORD *)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = v14;
    v15 = (unsigned __int8 *)sub_20B505B08(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = v17;
    sub_20B416E08(&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_20B0D56CC(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_20B505B08(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = v23;
    sub_20B416E08(&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_20B0D57D4((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_20B505B08(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = v28;
    sub_20B416E08(&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_20B506E98(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_20B505B08(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = *((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = v41;
      sub_20B416E08(&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_20B506E98(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_20B505B08(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = *((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = v32;
      sub_20B416E08(&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_20B506E98(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_20B505B08(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = *((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = v36;
      sub_20B416E08(&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(_QWORD *)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 152) - v38) >> 3);
      v43 = v38;
      sub_20B508464(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_20B506E98(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_20B0FCEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0FCEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0FCF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0FCF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0FCF30(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0FB288((uint64_t)v8, a2);
  sub_20B0FD04C(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0FD034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FD04C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  int v30;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B505FB0(a1);
  v28 = "version";
  v29 = 7;
  v30 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_20B5069D0(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_20B5069D0(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(_QWORD *)(a2 + 8);
    LOBYTE(v28) = 5;
    v29 = v14;
    v15 = (unsigned __int8 *)sub_20B505B08(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v28) = v16;
    v17 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v29;
    v29 = v17;
    sub_20B416E08(&v29, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v28 = (const char *)(a2 + 16);
  sub_20B0D56CC(a1, (unsigned __int8 **)&v28);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v28) = 0;
    v29 = 0;
    v21 = (unsigned __int8 *)sub_20B505B08(a1);
    v22 = *v21;
    *v21 = v28;
    LOBYTE(v28) = v22;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v29;
    v29 = v23;
    sub_20B416E08(&v29, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v28 = *(const char **)(a1 + 8);
        sub_20B0D57D4((int *)&v28, a1, (__int128 *)(a2 + 56));
        return;
      }
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    LOBYTE(v28) = 0;
    v29 = 0;
    v25 = (unsigned __int8 *)sub_20B505B08(a1);
    v26 = *v25;
    *v25 = v28;
    LOBYTE(v28) = v26;
    v27 = *((_QWORD *)v25 + 1);
    *((_QWORD *)v25 + 1) = v29;
    v29 = v27;
    sub_20B416E08(&v29, v26);
    return;
  }
  sub_20B506E98(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_20B0FD398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0FD3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0FD3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0FD3E0(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v6;
  char *v7;
  int v8;
  _BYTE v9[16];
  void *__p;
  void *v11;
  char *v12;
  _BYTE *v13;

  v9[0] = *(_BYTE *)a2;
  v9[8] = *(_BYTE *)(a2 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  v4 = *(_BYTE **)(a2 + 16);
  v3 = *(_BYTE **)(a2 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v6 = (char *)operator new(v3 - v4);
    v7 = &v6[v5];
    __p = v6;
    v12 = &v6[v5];
    memcpy(v6, v4, v5);
    v11 = v7;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v13 = v9;
  sub_20B0FDBDC(a1, &v13);
  sub_20B0FD4EC(v9[0], (uint64_t)v9, a1);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B0FD4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0FD4EC(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int *v20;
  int v21;
  int v22;
  int *v24;
  int v25;
  int v26;
  unsigned __int8 *v28;
  int *v29;
  int v30;
  int v31;
  int *v33;
  int v34;
  int v35;
  int *v37;
  int v38;
  int v39;
  int *v41;
  int v42;
  int v43;
  int v45;
  uint64_t v46;
  int *v47;
  int v48;
  int v49;
  int *v51;
  int v52;
  int v53;
  uint64_t v55;
  uint64_t v56;

  switch(a1)
  {
    case 0:
      v4 = *(unsigned __int8 *)sub_20B522A74(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_54;
      }
      else
      {
        v5 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v5)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v16 = *(int **)(a3 + 72);
      v17 = *v16;
      v18 = *(int *)((char *)v16 + 3);
      if (v17 != *(_DWORD *)"version" || v18 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 1:
      v4 = *(unsigned __int16 *)sub_20B522CCC(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_54;
      }
      else
      {
        v6 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v6)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v20 = *(int **)(a3 + 72);
      v21 = *v20;
      v22 = *(int *)((char *)v20 + 3);
      if (v21 != *(_DWORD *)"version" || v22 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 2:
      LODWORD(v55) = *(_DWORD *)sub_20B522DB4(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v7)
          *(_BYTE *)(a3 + 88) = 1;
      }
      sub_20B5069D0(a3, &v55);
      return;
    case 3:
      v4 = *(_QWORD *)sub_20B522E9C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_54:
          LOBYTE(v55) = 6;
          v56 = v4;
          v28 = (unsigned __int8 *)sub_20B505B08(a3);
          goto LABEL_83;
        }
      }
      else
      {
        v8 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v8)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v24 = *(int **)(a3 + 72);
      v25 = *v24;
      v26 = *(int *)((char *)v24 + 3);
      if (v25 != *(_DWORD *)"version" || v26 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 5:
      v9 = *(char *)sub_20B522F84(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v10 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v10)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v29 = *(int **)(a3 + 72);
      v30 = *v29;
      v31 = *(int *)((char *)v29 + 3);
      if (v30 != *(_DWORD *)"version" || v31 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 6:
      v9 = *(__int16 *)sub_20B52306C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v11 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v11)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v33 = *(int **)(a3 + 72);
      v34 = *v33;
      v35 = *(int *)((char *)v33 + 3);
      if (v34 != *(_DWORD *)"version" || v35 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 7:
      v9 = *(int *)sub_20B523154(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v12 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v12)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v37 = *(int **)(a3 + 72);
      v38 = *v37;
      v39 = *(int *)((char *)v37 + 3);
      if (v38 != *(_DWORD *)"version" || v39 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 8:
      v9 = *(_QWORD *)sub_20B52323C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v13 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v13)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) == 7)
      {
        v41 = *(int **)(a3 + 72);
        v42 = *v41;
        v43 = *(int *)((char *)v41 + 3);
        if (v42 == *(_DWORD *)"version" && v43 == *(_DWORD *)"sion")
          return;
      }
LABEL_82:
      LOBYTE(v55) = 5;
      v56 = v9;
      v28 = (unsigned __int8 *)sub_20B505B08(a3);
LABEL_83:
      v45 = *v28;
      *v28 = v55;
      LOBYTE(v55) = v45;
      v46 = *((_QWORD *)v28 + 1);
      *((_QWORD *)v28 + 1) = v56;
      v56 = v46;
      sub_20B416E08(&v56, v45);
      return;
    case 11:
      LODWORD(v55) = *(_DWORD *)sub_20B523324(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_90:
          sub_20B506AAC(a3, (float *)&v55);
          return;
        }
      }
      else
      {
        v14 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v14)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_90;
      v47 = *(int **)(a3 + 72);
      v48 = *v47;
      v49 = *(int *)((char *)v47 + 3);
      if (v48 != *(_DWORD *)"version" || v49 != *(_DWORD *)"sion")
        goto LABEL_90;
      return;
    case 12:
      v55 = *(_QWORD *)sub_20B52340C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_97:
          sub_20B506CA4(a3, (double *)&v55);
          return;
        }
      }
      else
      {
        v15 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v15)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_97;
      v51 = *(int **)(a3 + 72);
      v52 = *v51;
      v53 = *(int *)((char *)v51 + 3);
      if (v52 != *(_DWORD *)"version" || v53 != *(_DWORD *)"sion")
        goto LABEL_97;
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B0FDB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B0FDB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B0FDB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B0FDB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B0FDB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B0FDBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B0FDBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B0FDBDC(uint64_t a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20AF6A118((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B506E98(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B0FDCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0FDCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FDCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FDCE4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0FABAC((uint64_t)v8, a2);
  sub_20B0FDE00(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0FDDE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FDE00(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  std::string::value_type v9;
  _QWORD *v10;
  _QWORD *v11;
  int64x2_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  std::string v25;
  std::string __p;
  char v27;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v6, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    v8 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v8, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 16);
  sub_20B512EB0(a1, (unsigned __int8 *)&__p);
  v9 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v10, (uint64_t)&__p, 1);
  }
  v11 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = v9;
  sub_20AEC01D0(v11, (uint64_t)&__p, 1);
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_20B512EB0(a1, (unsigned __int8 *)&__p);
    sub_20B512F6C(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_20B512EB0(a1, (unsigned __int8 *)&__p);
    if (a3 < 4)
      return;
  }
  sub_20B0D6C68(a1, a2 + 56);
  if (a3 == 5)
  {
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      sub_20B512EB0(a1, (unsigned __int8 *)&__p);
      sub_20B512F6C(a1, a2 + 80);
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      sub_20B512EB0(a1, (unsigned __int8 *)&__p);
    }
    return;
  }
  if (a3 < 6)
    return;
  if (*(_BYTE *)(a2 + 104))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_20B512EB0(a1, (unsigned __int8 *)&__p);
    sub_20B512F6C(a1, a2 + 80);
    if (*(_BYTE *)(a2 + 136))
      goto LABEL_17;
LABEL_43:
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_20B512EB0(a1, (unsigned __int8 *)&__p);
    if (*(_QWORD *)(a1 + 40))
    {
      v22 = *(_QWORD **)(a1 + 24);
      __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v22, (uint64_t)&__p, 1);
      ++*(_QWORD *)(a1 + 40);
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
    else
    {
      *(_QWORD *)(a1 + 40) = 1;
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
LABEL_45:
    v25.__r_.__value_.__s.__data_[0] = 0;
    sub_20B512EB0(a1, (unsigned __int8 *)&v25);
    if (*(_QWORD *)(a1 + 40))
    {
      v23 = *(_QWORD **)(a1 + 24);
      v25.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v23, (uint64_t)&v25, 1);
      v24 = *(_QWORD *)(a1 + 40) + 1;
    }
    else
    {
      v24 = 1;
    }
    *(_QWORD *)(a1 + 40) = v24;
    return;
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_20B512EB0(a1, (unsigned __int8 *)&__p);
  if (*(_QWORD *)(a1 + 40))
  {
    v21 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v21, (uint64_t)&__p, 1);
    ++*(_QWORD *)(a1 + 40);
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
LABEL_17:
  __p.__r_.__value_.__s.__data_[0] = 1;
  sub_20B512EB0(a1, (unsigned __int8 *)&__p);
  sub_20B512F6C(a1, a2 + 112);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v27 = 0;
  if (!*(_BYTE *)(a2 + 168))
    goto LABEL_45;
LABEL_18:
  v14 = *(_QWORD *)(a2 + 144);
  v15 = *(_QWORD *)(a2 + 152);
  if (v14 == v15)
  {
LABEL_36:
    sub_20AECFBC8(v14, v15, ";", 1uLL, &v25, v12, v13);
  }
  else
  {
    v16 = *(uint64_t **)(a2 + 144);
    while (1)
    {
      v17 = *((unsigned __int8 *)v16 + 23);
      if ((v17 & 0x80u) == 0)
        v18 = v16;
      else
        v18 = (uint64_t *)*v16;
      if ((v17 & 0x80u) != 0)
        v17 = v16[1];
      if (v17)
      {
        v19 = 0;
        while (1)
        {
          v20 = *((unsigned __int8 *)v18 + v19);
          if (v20 == 59 || v20 == 92)
            break;
          if (v17 == ++v19)
            goto LABEL_20;
        }
        if (v17 != v19 && v19 != -1)
          break;
      }
LABEL_20:
      v16 += 3;
      if (v16 == (uint64_t *)v15)
        goto LABEL_36;
    }
    sub_20B0D2498(v14, v15, *(_QWORD *)(a2 + 152), ";", 1uLL, &v25);
  }
  __p = v25;
  v27 = 1;
  v25.__r_.__value_.__s.__data_[0] = 1;
  sub_20B512EB0(a1, (unsigned __int8 *)&v25);
  sub_20B512F6C(a1, (uint64_t)&__p);
  if (v27 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20B0FE264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0FE288(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0FB288((uint64_t)v8, a2);
  sub_20B0FE3A4(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0FE38C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FE3A4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  char v15;
  char v16;
  char v17;
  char v18;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    v15 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v6, (uint64_t)&v15, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    v8 = *(_QWORD **)(a1 + 24);
    v16 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v8, (uint64_t)&v16, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v12 = *(_BYTE *)(a2 + 16);
  sub_20B512EB0(a1, &v12);
  v9 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD **)(a1 + 24);
    v17 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v10, (uint64_t)&v17, 1);
  }
  v11 = *(_QWORD **)(a1 + 24);
  v18 = v9;
  sub_20AEC01D0(v11, (uint64_t)&v18, 1);
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 48))
  {
    v14 = 1;
    sub_20B512EB0(a1, &v14);
    sub_20B512F6C(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    v13 = 0;
    sub_20B512EB0(a1, &v13);
    if (a3 < 4)
      return;
  }
  sub_20B0D6C68(a1, a2 + 56);
}

void sub_20B0FE500(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;
  _BYTE v9[16];
  void *__p;
  void *v11;
  char *v12;
  unsigned __int8 v13;

  v3 = *(_BYTE *)a2;
  v9[0] = *(_BYTE *)a2;
  v9[8] = *(_BYTE *)(a2 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  v5 = *(_BYTE **)(a2 + 16);
  v4 = *(_BYTE **)(a2 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v7 = (char *)operator new(v4 - v5);
    v8 = &v7[v6];
    __p = v7;
    v12 = &v7[v6];
    memcpy(v7, v5, v6);
    v11 = v8;
  }
  v13 = v3;
  sub_20B512EB0(a1, &v13);
  sub_20B0FE5E0(v9[0], (uint64_t)v9, a1);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B0FE5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0FE5E0(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  switch(a1)
  {
    case 0:
      v12 = *(_BYTE *)sub_20B522A74(a2 + 8);
      sub_20B512EB0(a3, &v12);
      return;
    case 1:
      sub_20B522CCC(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v4 = *(_QWORD **)(a3 + 24);
        v14 = *(_BYTE *)(a3 + 32);
        sub_20AEC01D0(v4, (uint64_t)&v14, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 2:
      sub_20B522DB4(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v5 = *(_QWORD **)(a3 + 24);
        v15 = *(_BYTE *)(a3 + 32);
        sub_20AEC01D0(v5, (uint64_t)&v15, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 3:
      sub_20B522E9C(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v6 = *(_QWORD **)(a3 + 24);
        v16 = *(_BYTE *)(a3 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v16, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 5:
      v13 = *(_BYTE *)sub_20B522F84(a2 + 8);
      sub_20B512CCC(a3, &v13);
      return;
    case 6:
      sub_20B52306C(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v7 = *(_QWORD **)(a3 + 24);
        v17 = *(_BYTE *)(a3 + 32);
        sub_20AEC01D0(v7, (uint64_t)&v17, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 7:
      sub_20B523154(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v8 = *(_QWORD **)(a3 + 24);
        v18 = *(_BYTE *)(a3 + 32);
        sub_20AEC01D0(v8, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 8:
      sub_20B52323C(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v9 = *(_QWORD **)(a3 + 24);
        v19 = *(_BYTE *)(a3 + 32);
        sub_20AEC01D0(v9, (uint64_t)&v19, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 11:
      sub_20B523324(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v10 = *(_QWORD **)(a3 + 24);
        v20 = *(_BYTE *)(a3 + 32);
        sub_20AEC01D0(v10, (uint64_t)&v20, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(**(_QWORD **)(a3 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      goto LABEL_28;
    case 12:
      sub_20B52340C(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v11 = *(_QWORD **)(a3 + 24);
        v21 = *(_BYTE *)(a3 + 32);
        sub_20AEC01D0(v11, (uint64_t)&v21, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(**(_QWORD **)(a3 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
LABEL_28:
      ++*(_QWORD *)(a3 + 40);
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B0FE8A4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0FABAC((uint64_t)v8, a2);
  sub_20B0D7698(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0FE9A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FE9C0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0FB288((uint64_t)v8, a2);
  sub_20B0FEADC(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0FEAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B0FEADC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  char *result;
  _BOOL4 v13;
  int v14;
  char v15;
  char __src;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v6 = (char *)(a2 + 8);
  v14 = 2;
  v7 = a1 + 24;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&v14, &v15, 4);
  sub_20B42B554((_QWORD *)a1);
  sub_20B42DB24(v7, *(char **)(a1 + 32), v6, (char *)(a2 + 16), 8);
  __src = *(_BYTE *)(a2 + 16);
  sub_20B42DB24(v7, *(char **)(a1 + 32), &__src, &v17, 1);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v8 + 10) = *(_QWORD *)(a1 + 32) - v8 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (!*(_BYTE *)(a2 + 48))
  {
    v17 = 0;
    result = sub_20B42DB24(v7, *(char **)(a1 + 32), &v17, &v18, 1);
    if (a3 < 4)
      return result;
    return sub_20B0D7CA8(a1, (char *)(a2 + 56));
  }
  v18 = 1;
  sub_20B42DB24(v7, *(char **)(a1 + 32), &v18, (char *)&v19, 1);
  v9 = *(unsigned __int8 *)(a2 + 47);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a2 + 32);
  v19 = v9;
  sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&v19, (char *)&v20, 8);
  if (*(char *)(a2 + 47) < 0)
  {
    v10 = *(char **)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    if (!v10 && v11)
    {
      v13 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
      v10 = 0;
      if (v13)
        abort();
    }
  }
  else
  {
    v10 = (char *)(a2 + 24);
    v11 = *(unsigned __int8 *)(a2 + 47);
  }
  result = sub_20B42DB24(v7, *(char **)(a1 + 32), v10, &v10[v11], v11);
  if (a3 >= 4)
    return sub_20B0D7CA8(a1, (char *)(a2 + 56));
  return result;
}

void sub_20B0FECC0(uint64_t a1, uint64_t a2)
{
  char v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;
  _BYTE v9[16];
  void *__p;
  void *v11;
  char *v12;
  char __src;
  uint64_t v14;

  v3 = *(_BYTE *)a2;
  v9[0] = *(_BYTE *)a2;
  v9[8] = *(_BYTE *)(a2 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  v5 = *(_BYTE **)(a2 + 16);
  v4 = *(_BYTE **)(a2 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v7 = (char *)operator new(v4 - v5);
    v8 = &v7[v6];
    __p = v7;
    v12 = &v7[v6];
    memcpy(v7, v5, v6);
    v11 = v8;
  }
  __src = v3;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v14, 1);
  sub_20B0FEDB0(v9[0], (uint64_t)v9, a1);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B0FED90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20B0FEDB0(int a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  _WORD *v5;
  _DWORD *v6;
  uint64_t *v7;
  char *result;
  uint64_t __src;
  uint64_t v10;

  switch(a1)
  {
    case 0:
      v4 = (_BYTE *)sub_20B522A74(a2 + 8);
      goto LABEL_7;
    case 1:
      v5 = (_WORD *)sub_20B522CCC(a2 + 8);
      goto LABEL_9;
    case 2:
      v6 = (_DWORD *)sub_20B522DB4(a2 + 8);
      goto LABEL_11;
    case 3:
      v7 = (uint64_t *)sub_20B522E9C(a2 + 8);
      goto LABEL_13;
    case 5:
      v4 = (_BYTE *)sub_20B522F84(a2 + 8);
LABEL_7:
      LOBYTE(__src) = *v4;
      return sub_20B42DB24(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&__src + 1, 1);
    case 6:
      v5 = (_WORD *)sub_20B52306C(a2 + 8);
LABEL_9:
      LOWORD(__src) = *v5;
      return sub_20B42DB24(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&__src + 2, 2);
    case 7:
      v6 = (_DWORD *)sub_20B523154(a2 + 8);
LABEL_11:
      LODWORD(__src) = *v6;
      goto LABEL_15;
    case 8:
      v7 = (uint64_t *)sub_20B52323C(a2 + 8);
LABEL_13:
      __src = *v7;
      goto LABEL_17;
    case 11:
      LODWORD(__src) = *(_DWORD *)sub_20B523324(a2 + 8);
LABEL_15:
      result = sub_20B42DB24(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&__src + 4, 4);
      break;
    case 12:
      __src = *(_QWORD *)sub_20B52340C(a2 + 8);
LABEL_17:
      result = sub_20B42DB24(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&v10, 8);
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

void sub_20B0FEF34(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0FABAC((uint64_t)v8, a2);
  sub_20B0FF050(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0FF038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FF050(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  void (*v18)(uint64_t, std::string *);
  void (*v19)(uint64_t, std::string *);
  std::string v20;
  std::string __p;
  char v22;

  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
  sub_20B0D8B9C((int *)&__p, (_BYTE *)a1, a2 + 8);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 < 4)
      return;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
    sub_20B0D8B9C((int *)&__p, (_BYTE *)a1, a2 + 56);
    if (a3 == 5)
      goto LABEL_7;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 == 5)
    {
LABEL_7:
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        return;
      }
      goto LABEL_45;
    }
  }
  if (a3 >= 6)
  {
    if ((*(_BYTE *)(a1 + 12) & 4) == 0)
    {
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        if (*(_BYTE *)(a2 + 136))
          goto LABEL_14;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        if (*(_BYTE *)(a2 + 136))
        {
LABEL_14:
          __p.__r_.__value_.__s.__data_[0] = 1;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
          if (*(_BYTE *)(a2 + 168))
            goto LABEL_15;
          goto LABEL_45;
        }
      }
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      if (*(_BYTE *)(a2 + 168))
      {
LABEL_15:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL
                                         * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 120))(a1, &__p);
        v6 = *(_QWORD *)(a2 + 144);
        v7 = *(_QWORD *)(a2 + 152) - v6;
        if (v7)
        {
          v8 = 24 * (v7 / 24);
          do
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v6);
            v6 += 24;
            v8 -= 24;
          }
          while (v8);
        }
        return;
      }
LABEL_45:
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      return;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
      if (*(_BYTE *)(a2 + 136))
        goto LABEL_21;
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_20B5E6729);
      if (*(_BYTE *)(a2 + 136))
      {
LABEL_21:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        __p.__r_.__value_.__s.__data_[0] = 0;
        v22 = 0;
        if (*(_BYTE *)(a2 + 168))
        {
LABEL_22:
          v11 = *(_QWORD *)(a2 + 144);
          v12 = *(_QWORD *)(a2 + 152);
          if (v11 == v12)
          {
LABEL_39:
            sub_20AECFBC8(v11, v12, ";", 1uLL, &v20, v9, v10);
          }
          else
          {
            v13 = *(uint64_t **)(a2 + 144);
            while (1)
            {
              v14 = *((unsigned __int8 *)v13 + 23);
              if ((v14 & 0x80u) == 0)
                v15 = v13;
              else
                v15 = (uint64_t *)*v13;
              if ((v14 & 0x80u) != 0)
                v14 = v13[1];
              if (v14)
              {
                v16 = 0;
                while (1)
                {
                  v17 = *((unsigned __int8 *)v15 + v16);
                  if (v17 == 59 || v17 == 92)
                    break;
                  if (v14 == ++v16)
                    goto LABEL_24;
                }
                if (v14 != v16 && v16 != -1)
                  break;
              }
LABEL_24:
              v13 += 3;
              if (v13 == (uint64_t *)v12)
                goto LABEL_39;
            }
            sub_20B0D2498(v11, v12, *(_QWORD *)(a2 + 152), ";", 1uLL, &v20);
          }
          __p = v20;
          v22 = 1;
          v18 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
          v20.__r_.__value_.__s.__data_[0] = 1;
          v18(a1, &v20);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 144))(a1, &__p);
          if (v22 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          return;
        }
LABEL_48:
        v19 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
        v20.__r_.__value_.__s.__data_[0] = 0;
        v19(a1, &v20);
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_20B5E6729);
        return;
      }
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_20B5E6729);
    __p.__r_.__value_.__s.__data_[0] = 0;
    v22 = 0;
    if (*(_BYTE *)(a2 + 168))
      goto LABEL_22;
    goto LABEL_48;
  }
}

void sub_20B0FF598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0FF5BC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0FB288((uint64_t)v8, a2);
  sub_20B0FF6D8(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0FF6C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FF6D8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  sub_20B0D8B9C((int *)&v6, (_BYTE *)a1, a2 + 8);
  if (*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v6) = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    LOBYTE(v6) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
    if (a3 < 4)
      return;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    LOBYTE(v6) = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
    v6 = *(_QWORD *)(a1 + 8);
    sub_20B0D8B9C((int *)&v6, (_BYTE *)a1, a2 + 56);
  }
  else
  {
    LOBYTE(v6) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
  }
}

void sub_20B0FF808(_BYTE *a1, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v6;
  char *v7;
  _BYTE v8[16];
  void *__p;
  void *v10;
  char *v11;
  _BYTE *v12;

  v8[0] = *(_BYTE *)a2;
  v8[8] = *(_BYTE *)(a2 + 8);
  v10 = 0;
  v11 = 0;
  __p = 0;
  v4 = *(_BYTE **)(a2 + 16);
  v3 = *(_BYTE **)(a2 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v6 = (char *)operator new(v3 - v4);
    v7 = &v6[v5];
    __p = v6;
    v11 = &v6[v5];
    memcpy(v6, v4, v5);
    v10 = v7;
  }
  v12 = v8;
  sub_20B0FFA54(a1, &v12);
  sub_20B0FF8E8(v8[0], (uint64_t)v8, (uint64_t)a1);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_20B0FF8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0FF8E8(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  switch(a1)
  {
    case 0:
      LOBYTE(v5) = *(_BYTE *)sub_20B522A74(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 80))(a3, &v5);
      break;
    case 1:
      LOWORD(v5) = *(_WORD *)sub_20B522CCC(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 96))(a3, &v5);
      break;
    case 2:
      LODWORD(v5) = *(_DWORD *)sub_20B522DB4(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 104))(a3, &v5);
      break;
    case 3:
      v5 = *(_QWORD *)sub_20B522E9C(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 120))(a3, &v5);
      break;
    case 5:
      LOBYTE(v5) = *(_BYTE *)sub_20B522F84(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 88))(a3, &v5);
      break;
    case 6:
      LOWORD(v5) = *(_WORD *)sub_20B52306C(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 48))(a3, &v5);
      break;
    case 7:
      LODWORD(v5) = *(_DWORD *)sub_20B523154(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 56))(a3, &v5);
      break;
    case 8:
      v5 = *(_QWORD *)sub_20B52323C(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 72))(a3, &v5);
      break;
    case 11:
      LODWORD(v5) = *(_DWORD *)sub_20B523324(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 128))(a3, &v5);
      break;
    case 12:
      v5 = *(_QWORD *)sub_20B52340C(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 136))(a3, &v5);
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

void sub_20B0FFA54(_BYTE *a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_20AF6A118((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_20AECFAB8();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v6);
  }
}

void sub_20B0FFB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0FFB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FFB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0FFB8C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  unint64_t v12;

  sub_20B50AC94(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v12 = 0;
  sub_20B4552C4(v6, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v7 = 2;
  else
    v7 = v12;
  if (v7 < 2)
  {
    sub_20B0FFCB8((uint64_t)&v12, a2, (uint64_t)a3);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "value_type";
    *(_QWORD *)(a2 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 104) = 1;
    v12 = (unint64_t)a3;
    sub_20B1002E8((uint64_t *)a2, (_BYTE **)&v12);
    sub_20B0FFE5C(*a3, a2, (uint64_t)a3);
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
}

void sub_20B0FFCB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int v6;
  unsigned __int8 v7;
  char v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  void *v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20[8];
  char v21;
  char *v22;
  char *v23;
  _DWORD *v24;

  v20[0] = 7;
  v21 = 7;
  v5 = (char *)operator new(4uLL);
  v22 = v5;
  *(_DWORD *)v5 = 0;
  v23 = v5 + 4;
  v24 = v5 + 4;
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v15 = v20;
  sub_20B1002E8((uint64_t *)a2, &v15);
  sub_20B1004D8(v20[0], a2, (uint64_t)v20);
  v7 = v20[0];
  LOBYTE(v15) = v20[0];
  v8 = v21;
  v16 = v21;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v9 = v22;
  v10 = v23 - v22;
  if (v23 == v22)
  {
    v12 = 0;
    v11 = 0;
    *(_BYTE *)a3 = v20[0];
    *(_BYTE *)(a3 + 8) = v8;
    v14 = (_QWORD *)(a3 + 16);
    v13 = *(void **)(a3 + 16);
    if (v13)
    {
LABEL_6:
      *(_QWORD *)(a3 + 24) = v13;
      operator delete(v13);
      *v14 = 0;
      v14[1] = 0;
      v14[2] = 0;
      v9 = v22;
    }
  }
  else
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v11 = (char *)operator new(v23 - v22);
    v12 = &v11[v10];
    memcpy(v11, v9, v10);
    *(_BYTE *)a3 = v7;
    *(_BYTE *)(a3 + 8) = v8;
    v14 = (_QWORD *)(a3 + 16);
    v13 = *(void **)(a3 + 16);
    if (v13)
      goto LABEL_6;
  }
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v12;
  *(_QWORD *)(a3 + 32) = v12;
  if (v9)
  {
    v23 = v9;
    operator delete(v9);
  }
}

void sub_20B0FFE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_20B0FFE5C(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  char *v11;
  __int16 v12;
  char v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  int v20;
  char *v21;
  char v22;
  int v23;
  char *v24;
  __int16 v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  char *v30;
  unint64_t v31;
  int v32;
  uint64_t *v33;
  float v34;
  int v35;
  uint64_t *v36;
  double v37;
  void *v38;
  _QWORD *exception;
  unint64_t v40;

  switch(a1)
  {
    case 0:
      v5 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v5)
        *(_BYTE *)(a2 + 104) = 1;
      v6 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B4552C4(v6, &v40);
      v7 = v40;
      if (v40 >= 0x100)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v7;
      v9 = v8 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      goto LABEL_39;
    case 1:
      v10 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v10)
        *(_BYTE *)(a2 + 104) = 1;
      v11 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B4552C4(v11, &v40);
      v12 = v40;
      if (v40 >= 0x10000)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v12;
      v9 = v8 + 2;
      v13 = 1;
      goto LABEL_38;
    case 2:
      v14 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v14)
        *(_BYTE *)(a2 + 104) = 1;
      v15 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B4552C4(v15, &v40);
      v16 = v40;
      if (HIDWORD(v40))
        goto LABEL_42;
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v16;
      v9 = v8 + 4;
      v13 = 2;
      goto LABEL_38;
    case 3:
      v17 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v17)
        *(_BYTE *)(a2 + 104) = 1;
      v18 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B4552C4(v18, &v40);
      v19 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v19;
      v9 = v8 + 8;
      v13 = 3;
      goto LABEL_38;
    case 5:
      v20 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v20)
        *(_BYTE *)(a2 + 104) = 1;
      v21 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B45540C(v21, &v40);
      v22 = v40;
      if (v40 != (char)v40)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v22;
      v9 = v8 + 1;
      v13 = 5;
      goto LABEL_38;
    case 6:
      v23 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v23)
        *(_BYTE *)(a2 + 104) = 1;
      v24 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B45540C(v24, &v40);
      v25 = v40;
      if (v40 != (__int16)v40)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v25;
      v9 = v8 + 2;
      v13 = 6;
      goto LABEL_38;
    case 7:
      v26 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a2 + 104) = 1;
      v27 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B45540C(v27, &v40);
      v28 = v40;
      if (v40 != (int)v40)
      {
LABEL_42:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v28;
      v9 = v8 + 4;
      v13 = 7;
      goto LABEL_38;
    case 8:
      v29 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v29)
        *(_BYTE *)(a2 + 104) = 1;
      v30 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B45540C(v30, &v40);
      v31 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v31;
      v9 = v8 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      goto LABEL_39;
    case 11:
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = (uint64_t *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v34 = sub_20B5112FC(v33);
      v8 = operator new(4uLL);
      *(float *)v8 = v34;
      v9 = v8 + 4;
      v13 = 11;
      goto LABEL_38;
    case 12:
      v35 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v35)
        *(_BYTE *)(a2 + 104) = 1;
      v36 = (uint64_t *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v37 = sub_20B5113DC(v36);
      v8 = operator new(8uLL);
      *(double *)v8 = v37;
      v9 = v8 + 8;
      v13 = 12;
LABEL_38:
      *(_BYTE *)(a3 + 8) = v13;
LABEL_39:
      v38 = *(void **)(a3 + 16);
      if (v38)
      {
        *(_QWORD *)(a3 + 24) = v38;
        operator delete(v38);
      }
      *(_QWORD *)(a3 + 16) = v8;
      *(_QWORD *)(a3 + 24) = v9;
      *(_QWORD *)(a3 + 32) = v9;
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B1002E8(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AF4C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B4557C4(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B522188((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B10044C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B1004D8(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  char *v11;
  __int16 v12;
  char v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  int v20;
  char *v21;
  char v22;
  int v23;
  char *v24;
  __int16 v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  char *v30;
  unint64_t v31;
  int v32;
  uint64_t *v33;
  float v34;
  int v35;
  uint64_t *v36;
  double v37;
  void *v38;
  _QWORD *exception;
  unint64_t v40;

  switch(a1)
  {
    case 0:
      v5 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v5)
        *(_BYTE *)(a2 + 104) = 1;
      v6 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B4552C4(v6, &v40);
      v7 = v40;
      if (v40 >= 0x100)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v7;
      v9 = v8 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      goto LABEL_39;
    case 1:
      v10 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v10)
        *(_BYTE *)(a2 + 104) = 1;
      v11 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B4552C4(v11, &v40);
      v12 = v40;
      if (v40 >= 0x10000)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v12;
      v9 = v8 + 2;
      v13 = 1;
      goto LABEL_38;
    case 2:
      v14 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v14)
        *(_BYTE *)(a2 + 104) = 1;
      v15 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B4552C4(v15, &v40);
      v16 = v40;
      if (HIDWORD(v40))
        goto LABEL_42;
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v16;
      v9 = v8 + 4;
      v13 = 2;
      goto LABEL_38;
    case 3:
      v17 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v17)
        *(_BYTE *)(a2 + 104) = 1;
      v18 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B4552C4(v18, &v40);
      v19 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v19;
      v9 = v8 + 8;
      v13 = 3;
      goto LABEL_38;
    case 5:
      v20 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v20)
        *(_BYTE *)(a2 + 104) = 1;
      v21 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B45540C(v21, &v40);
      v22 = v40;
      if (v40 != (char)v40)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v22;
      v9 = v8 + 1;
      v13 = 5;
      goto LABEL_38;
    case 6:
      v23 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v23)
        *(_BYTE *)(a2 + 104) = 1;
      v24 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B45540C(v24, &v40);
      v25 = v40;
      if (v40 != (__int16)v40)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v25;
      v9 = v8 + 2;
      v13 = 6;
      goto LABEL_38;
    case 7:
      v26 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a2 + 104) = 1;
      v27 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B45540C(v27, &v40);
      v28 = v40;
      if (v40 != (int)v40)
      {
LABEL_42:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v28;
      v9 = v8 + 4;
      v13 = 7;
      goto LABEL_38;
    case 8:
      v29 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v29)
        *(_BYTE *)(a2 + 104) = 1;
      v30 = (char *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B45540C(v30, &v40);
      v31 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v31;
      v9 = v8 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      goto LABEL_39;
    case 11:
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = (uint64_t *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v34 = sub_20B5112FC(v33);
      v8 = operator new(4uLL);
      *(float *)v8 = v34;
      v9 = v8 + 4;
      v13 = 11;
      goto LABEL_38;
    case 12:
      v35 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v35)
        *(_BYTE *)(a2 + 104) = 1;
      v36 = (uint64_t *)sub_20B50AF4C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v37 = sub_20B5113DC(v36);
      v8 = operator new(8uLL);
      *(double *)v8 = v37;
      v9 = v8 + 8;
      v13 = 12;
LABEL_38:
      *(_BYTE *)(a3 + 8) = v13;
LABEL_39:
      v38 = *(void **)(a3 + 16);
      if (v38)
      {
        *(_QWORD *)(a3 + 24) = v38;
        operator delete(v38);
      }
      *(_QWORD *)(a3 + 16) = v8;
      *(_QWORD *)(a3 + 24) = v9;
      *(_QWORD *)(a3 + 32) = v9;
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B100964(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, unsigned int a4)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 v11;

  if (a4 < 2)
  {
    sub_20B100A30((uint64_t)&v10, (uint64_t)a2, (uint64_t)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20B0DD290(a2 + 2);
    v11 = 0;
    sub_20B51852C(a2[6], &v11);
    v7 = v11;
    *a3 = v11;
    sub_20B100BB4(v7, (uint64_t)a2, (uint64_t)a3);
    v8 = a2[4];
    v9 = *(_QWORD *)(v8 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v8 - 8);
    if (v9)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v9);
    a2[4] -= 16;
  }
}

void sub_20B100A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char v6;
  char v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18[8];
  char v19;
  char *v20;
  char *v21;
  _DWORD *v22;

  v18[0] = 7;
  v19 = 7;
  v5 = (char *)operator new(4uLL);
  v20 = v5;
  *(_DWORD *)v5 = 0;
  v21 = v5 + 4;
  v22 = v5 + 4;
  v14[0] = 0;
  sub_20B51852C(*(_QWORD *)(a2 + 48), v14);
  v18[0] = v14[0];
  sub_20B100E78(v14[0], a2, (uint64_t)v18);
  v6 = v18[0];
  v14[0] = v18[0];
  v7 = v19;
  v14[8] = v19;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v8 = v20;
  v9 = v21 - v20;
  if (v21 == v20)
  {
    v11 = 0;
    v10 = 0;
    *(_BYTE *)a3 = v18[0];
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
    {
LABEL_4:
      *(_QWORD *)(a3 + 24) = v12;
      operator delete(v12);
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v8 = v20;
    }
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v10 = (char *)operator new(v21 - v20);
    v11 = &v10[v9];
    memcpy(v10, v8, v9);
    *(_BYTE *)a3 = v6;
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
      goto LABEL_4;
  }
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v11;
  if (v8)
  {
    v21 = v8;
    operator delete(v8);
  }
}

void sub_20B100B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_20B100BB4(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_20B51852C(*(_QWORD *)(a2 + 48), &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      sub_20B5186C0(*(_QWORD *)(a2 + 48), &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      sub_20B518854(*(_QWORD *)(a2 + 48), &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      sub_20B518BE4(*(_QWORD *)(a2 + 48), &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      sub_20B51847C(*(_QWORD *)(a2 + 48), &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      sub_20B518610(*(_QWORD *)(a2 + 48), &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      sub_20B5187A4(*(_QWORD *)(a2 + 48), &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      sub_20B518AFC(*(_QWORD *)(a2 + 48), &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      sub_20B518CC0(*(_QWORD *)(a2 + 48), (float *)&v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      sub_20B518DF0(*(_QWORD *)(a2 + 48), (double *)&v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B100E78(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_20B51852C(*(_QWORD *)(a2 + 48), &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      sub_20B5186C0(*(_QWORD *)(a2 + 48), &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      sub_20B518854(*(_QWORD *)(a2 + 48), &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      sub_20B518BE4(*(_QWORD *)(a2 + 48), &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      sub_20B51847C(*(_QWORD *)(a2 + 48), &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      sub_20B518610(*(_QWORD *)(a2 + 48), &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      sub_20B5187A4(*(_QWORD *)(a2 + 48), &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      sub_20B518AFC(*(_QWORD *)(a2 + 48), &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      sub_20B518CC0(*(_QWORD *)(a2 + 48), (float *)&v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      sub_20B518DF0(*(_QWORD *)(a2 + 48), (double *)&v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B10113C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  unint64_t v12;

  sub_20B50A7A4(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v12 = 0;
  sub_20B454B2C(v6, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v7 = 2;
  else
    v7 = v12;
  if (v7 < 2)
  {
    sub_20B101268((uint64_t)&v12, a2, (uint64_t)a3);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "value_type";
    *(_QWORD *)(a2 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 104) = 1;
    v12 = (unint64_t)a3;
    sub_20B101898((uint64_t *)a2, (_BYTE **)&v12);
    sub_20B10140C(*a3, a2, (uint64_t)a3);
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
}

void sub_20B101268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int v6;
  unsigned __int8 v7;
  char v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  void *v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20[8];
  char v21;
  char *v22;
  char *v23;
  _DWORD *v24;

  v20[0] = 7;
  v21 = 7;
  v5 = (char *)operator new(4uLL);
  v22 = v5;
  *(_DWORD *)v5 = 0;
  v23 = v5 + 4;
  v24 = v5 + 4;
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v15 = v20;
  sub_20B101898((uint64_t *)a2, &v15);
  sub_20B101A88(v20[0], a2, (uint64_t)v20);
  v7 = v20[0];
  LOBYTE(v15) = v20[0];
  v8 = v21;
  v16 = v21;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v9 = v22;
  v10 = v23 - v22;
  if (v23 == v22)
  {
    v12 = 0;
    v11 = 0;
    *(_BYTE *)a3 = v20[0];
    *(_BYTE *)(a3 + 8) = v8;
    v14 = (_QWORD *)(a3 + 16);
    v13 = *(void **)(a3 + 16);
    if (v13)
    {
LABEL_6:
      *(_QWORD *)(a3 + 24) = v13;
      operator delete(v13);
      *v14 = 0;
      v14[1] = 0;
      v14[2] = 0;
      v9 = v22;
    }
  }
  else
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v11 = (char *)operator new(v23 - v22);
    v12 = &v11[v10];
    memcpy(v11, v9, v10);
    *(_BYTE *)a3 = v7;
    *(_BYTE *)(a3 + 8) = v8;
    v14 = (_QWORD *)(a3 + 16);
    v13 = *(void **)(a3 + 16);
    if (v13)
      goto LABEL_6;
  }
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v12;
  *(_QWORD *)(a3 + 32) = v12;
  if (v9)
  {
    v23 = v9;
    operator delete(v9);
  }
}

void sub_20B1013C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_20B10140C(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  char *v11;
  __int16 v12;
  char v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  int v20;
  char *v21;
  char v22;
  int v23;
  char *v24;
  __int16 v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  char *v30;
  unint64_t v31;
  int v32;
  uint64_t *v33;
  float v34;
  int v35;
  uint64_t *v36;
  double v37;
  void *v38;
  _QWORD *exception;
  unint64_t v40;

  switch(a1)
  {
    case 0:
      v5 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v5)
        *(_BYTE *)(a2 + 104) = 1;
      v6 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454B2C(v6, &v40);
      v7 = v40;
      if (v40 >= 0x100)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v7;
      v9 = v8 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      goto LABEL_39;
    case 1:
      v10 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v10)
        *(_BYTE *)(a2 + 104) = 1;
      v11 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454B2C(v11, &v40);
      v12 = v40;
      if (v40 >= 0x10000)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v12;
      v9 = v8 + 2;
      v13 = 1;
      goto LABEL_38;
    case 2:
      v14 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v14)
        *(_BYTE *)(a2 + 104) = 1;
      v15 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454B2C(v15, &v40);
      v16 = v40;
      if (HIDWORD(v40))
        goto LABEL_42;
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v16;
      v9 = v8 + 4;
      v13 = 2;
      goto LABEL_38;
    case 3:
      v17 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v17)
        *(_BYTE *)(a2 + 104) = 1;
      v18 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454B2C(v18, &v40);
      v19 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v19;
      v9 = v8 + 8;
      v13 = 3;
      goto LABEL_38;
    case 5:
      v20 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v20)
        *(_BYTE *)(a2 + 104) = 1;
      v21 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454C74(v21, &v40);
      v22 = v40;
      if (v40 != (char)v40)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v22;
      v9 = v8 + 1;
      v13 = 5;
      goto LABEL_38;
    case 6:
      v23 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v23)
        *(_BYTE *)(a2 + 104) = 1;
      v24 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454C74(v24, &v40);
      v25 = v40;
      if (v40 != (__int16)v40)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v25;
      v9 = v8 + 2;
      v13 = 6;
      goto LABEL_38;
    case 7:
      v26 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a2 + 104) = 1;
      v27 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454C74(v27, &v40);
      v28 = v40;
      if (v40 != (int)v40)
      {
LABEL_42:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v28;
      v9 = v8 + 4;
      v13 = 7;
      goto LABEL_38;
    case 8:
      v29 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v29)
        *(_BYTE *)(a2 + 104) = 1;
      v30 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454C74(v30, &v40);
      v31 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v31;
      v9 = v8 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      goto LABEL_39;
    case 11:
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = (uint64_t *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v34 = sub_20B510B54(v33);
      v8 = operator new(4uLL);
      *(float *)v8 = v34;
      v9 = v8 + 4;
      v13 = 11;
      goto LABEL_38;
    case 12:
      v35 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v35)
        *(_BYTE *)(a2 + 104) = 1;
      v36 = (uint64_t *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v37 = sub_20B510C34(v36);
      v8 = operator new(8uLL);
      *(double *)v8 = v37;
      v9 = v8 + 8;
      v13 = 12;
LABEL_38:
      *(_BYTE *)(a3 + 8) = v13;
LABEL_39:
      v38 = *(void **)(a3 + 16);
      if (v38)
      {
        *(_QWORD *)(a3 + 24) = v38;
        operator delete(v38);
      }
      *(_QWORD *)(a3 + 16) = v8;
      *(_QWORD *)(a3 + 24) = v9;
      *(_QWORD *)(a3 + 32) = v9;
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B101898(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AA5C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B45502C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B522188((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B1019FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B101A88(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  char *v11;
  __int16 v12;
  char v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  int v20;
  char *v21;
  char v22;
  int v23;
  char *v24;
  __int16 v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  char *v30;
  unint64_t v31;
  int v32;
  uint64_t *v33;
  float v34;
  int v35;
  uint64_t *v36;
  double v37;
  void *v38;
  _QWORD *exception;
  unint64_t v40;

  switch(a1)
  {
    case 0:
      v5 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v5)
        *(_BYTE *)(a2 + 104) = 1;
      v6 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454B2C(v6, &v40);
      v7 = v40;
      if (v40 >= 0x100)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v7;
      v9 = v8 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      goto LABEL_39;
    case 1:
      v10 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v10)
        *(_BYTE *)(a2 + 104) = 1;
      v11 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454B2C(v11, &v40);
      v12 = v40;
      if (v40 >= 0x10000)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v12;
      v9 = v8 + 2;
      v13 = 1;
      goto LABEL_38;
    case 2:
      v14 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v14)
        *(_BYTE *)(a2 + 104) = 1;
      v15 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454B2C(v15, &v40);
      v16 = v40;
      if (HIDWORD(v40))
        goto LABEL_42;
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v16;
      v9 = v8 + 4;
      v13 = 2;
      goto LABEL_38;
    case 3:
      v17 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v17)
        *(_BYTE *)(a2 + 104) = 1;
      v18 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454B2C(v18, &v40);
      v19 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v19;
      v9 = v8 + 8;
      v13 = 3;
      goto LABEL_38;
    case 5:
      v20 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v20)
        *(_BYTE *)(a2 + 104) = 1;
      v21 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454C74(v21, &v40);
      v22 = v40;
      if (v40 != (char)v40)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v22;
      v9 = v8 + 1;
      v13 = 5;
      goto LABEL_38;
    case 6:
      v23 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v23)
        *(_BYTE *)(a2 + 104) = 1;
      v24 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454C74(v24, &v40);
      v25 = v40;
      if (v40 != (__int16)v40)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v25;
      v9 = v8 + 2;
      v13 = 6;
      goto LABEL_38;
    case 7:
      v26 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a2 + 104) = 1;
      v27 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454C74(v27, &v40);
      v28 = v40;
      if (v40 != (int)v40)
      {
LABEL_42:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v28;
      v9 = v8 + 4;
      v13 = 7;
      goto LABEL_38;
    case 8:
      v29 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v29)
        *(_BYTE *)(a2 + 104) = 1;
      v30 = (char *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20B454C74(v30, &v40);
      v31 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v31;
      v9 = v8 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      goto LABEL_39;
    case 11:
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = (uint64_t *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v34 = sub_20B510B54(v33);
      v8 = operator new(4uLL);
      *(float *)v8 = v34;
      v9 = v8 + 4;
      v13 = 11;
      goto LABEL_38;
    case 12:
      v35 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v35)
        *(_BYTE *)(a2 + 104) = 1;
      v36 = (uint64_t *)sub_20B50AA5C((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v37 = sub_20B510C34(v36);
      v8 = operator new(8uLL);
      *(double *)v8 = v37;
      v9 = v8 + 8;
      v13 = 12;
LABEL_38:
      *(_BYTE *)(a3 + 8) = v13;
LABEL_39:
      v38 = *(void **)(a3 + 16);
      if (v38)
      {
        *(_QWORD *)(a3 + 24) = v38;
        operator delete(v38);
      }
      *(_QWORD *)(a3 + 16) = v8;
      *(_QWORD *)(a3 + 24) = v9;
      *(_QWORD *)(a3 + 32) = v9;
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B101F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char v6;
  char v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18[8];
  char v19;
  char *v20;
  char *v21;
  _DWORD *v22;

  v18[0] = 7;
  v19 = 7;
  v5 = (char *)operator new(4uLL);
  v20 = v5;
  *(_DWORD *)v5 = 0;
  v21 = v5 + 4;
  v22 = v5 + 4;
  v14[0] = 0;
  sub_20B513B4C(a2, v14);
  v18[0] = v14[0];
  sub_20B102360(v14[0], a2, (uint64_t)v18);
  v6 = v18[0];
  v14[0] = v18[0];
  v7 = v19;
  v14[8] = v19;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v8 = v20;
  v9 = v21 - v20;
  if (v21 == v20)
  {
    v11 = 0;
    v10 = 0;
    *(_BYTE *)a3 = v18[0];
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
    {
LABEL_4:
      *(_QWORD *)(a3 + 24) = v12;
      operator delete(v12);
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v8 = v20;
    }
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v10 = (char *)operator new(v21 - v20);
    v11 = &v10[v9];
    memcpy(v10, v8, v9);
    *(_BYTE *)a3 = v6;
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
      goto LABEL_4;
  }
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v11;
  if (v8)
  {
    v21 = v8;
    operator delete(v8);
  }
}

void sub_20B10204C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_20B102098(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_20B513B4C(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      sub_20B513FE8(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      sub_20B514490(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      sub_20B514DE0(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      sub_20B513904(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      sub_20B513D94(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      sub_20B51423C(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      sub_20B514B8C(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      sub_20B5152B0(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      sub_20B515504(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B102360(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_20B513B4C(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      sub_20B513FE8(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      sub_20B514490(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      sub_20B514DE0(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      sub_20B513904(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      sub_20B513D94(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      sub_20B51423C(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      sub_20B514B8C(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      sub_20B5152B0(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      sub_20B515504(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B102628(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::logic_error *exception;
  char v15;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
    goto LABEL_8;
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 > 1)
  {
    sub_20B42BA30(a2);
    v10 = a2[6];
    if (a2[7] > v10)
    {
      v11 = *(unsigned __int8 *)(a2[3] + v10);
      a2[6] = v10 + 1;
      *a3 = v11;
      sub_20B102950(v11, a2, (uint64_t)a3);
      v12 = a2[12];
      v13 = a2[9];
      a2[6] = *(_QWORD *)(v12 - 8) + *(_QWORD *)(v13 - 8) + 8;
      a2[9] = v13 - 8;
      a2[12] = v12 - 8;
      return;
    }
LABEL_8:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  sub_20B102768((uint64_t)&v15, a2, (uint64_t)a3);
}

void sub_20B102740(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B102754(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B102768(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  unint64_t v6;
  int v7;
  char v8;
  char v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  std::logic_error *exception;
  char v17[8];
  char v18;
  char *v19;
  char *v20;
  _DWORD *v21;

  v17[0] = 7;
  v18 = 7;
  v5 = (char *)operator new(4uLL);
  v19 = v5;
  *(_DWORD *)v5 = 0;
  v20 = v5 + 4;
  v21 = v5 + 4;
  v6 = a2[6];
  if (a2[7] <= v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v7 = *(unsigned __int8 *)(a2[3] + v6);
  a2[6] = v6 + 1;
  v17[0] = v7;
  sub_20B102ED0(v7, a2, (uint64_t)v17);
  v8 = v17[0];
  v9 = v18;
  v10 = v19;
  v11 = v20 - v19;
  if (v20 == v19)
  {
    v13 = 0;
    v12 = 0;
    *(_BYTE *)a3 = v17[0];
    *(_BYTE *)(a3 + 8) = v9;
    v15 = (_QWORD *)(a3 + 16);
    v14 = *(void **)(a3 + 16);
    if (v14)
    {
LABEL_5:
      *(_QWORD *)(a3 + 24) = v14;
      operator delete(v14);
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      v10 = v19;
    }
  }
  else
  {
    if ((v11 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v12 = (char *)operator new(v20 - v19);
    v13 = &v12[v11];
    memcpy(v12, v10, v11);
    *(_BYTE *)a3 = v8;
    *(_BYTE *)(a3 + 8) = v9;
    v15 = (_QWORD *)(a3 + 16);
    v14 = *(void **)(a3 + 16);
    if (v14)
      goto LABEL_5;
  }
  *(_QWORD *)(a3 + 16) = v12;
  *(_QWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a3 + 32) = v13;
  if (v10)
  {
    v20 = v10;
    operator delete(v10);
  }
}

void sub_20B1028EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  __cxa_free_exception(v17);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B102950(int a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  _BYTE *v6;
  void *v7;
  _QWORD *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  __int16 v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  std::logic_error *exception;

  switch(a1)
  {
    case 0:
      v4 = a2[6];
      if (a2[7] <= v4)
        goto LABEL_54;
      v5 = *(_BYTE *)(a2[3] + v4);
      a2[6] = v4 + 1;
      v6 = operator new(1uLL);
      *v6 = v5;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 0;
      if (v7)
        goto LABEL_4;
      goto LABEL_5;
    case 1:
      v10 = a2[6];
      v11 = a2[7];
      v12 = v11 >= v10;
      v13 = v11 - v10;
      if (!v12)
        v13 = 0;
      if (v13 <= 1)
        goto LABEL_54;
      v14 = *(_WORD *)(a2[3] + v10);
      a2[6] = v10 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v14;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 1;
      if (!v15)
        goto LABEL_29;
      goto LABEL_28;
    case 2:
      v16 = a2[6];
      v17 = a2[7];
      v12 = v17 >= v16;
      v18 = v17 - v16;
      if (!v12)
        v18 = 0;
      if (v18 <= 3)
        goto LABEL_54;
      v19 = *(_DWORD *)(a2[3] + v16);
      a2[6] = v16 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v19;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 2;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 3:
      v21 = a2[6];
      v22 = a2[7];
      v12 = v22 >= v21;
      v23 = v22 - v21;
      if (!v12)
        v23 = 0;
      if (v23 <= 7)
        goto LABEL_54;
      v24 = *(_QWORD *)(a2[3] + v21);
      a2[6] = v21 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v24;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 3;
      if (!v25)
        goto LABEL_35;
      goto LABEL_34;
    case 5:
      v26 = a2[6];
      if (a2[7] <= v26)
        goto LABEL_54;
      v27 = *(_BYTE *)(a2[3] + v26);
      a2[6] = v26 + 1;
      v6 = operator new(1uLL);
      *v6 = v27;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 5;
      if (!v7)
        goto LABEL_5;
LABEL_4:
      *(_QWORD *)(a3 + 24) = v7;
      operator delete(v7);
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
LABEL_5:
      v9 = v6 + 1;
      break;
    case 6:
      v28 = a2[6];
      v29 = a2[7];
      v12 = v29 >= v28;
      v30 = v29 - v28;
      if (!v12)
        v30 = 0;
      if (v30 <= 1)
        goto LABEL_54;
      v31 = *(_WORD *)(a2[3] + v28);
      a2[6] = v28 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v31;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 6;
      if (v15)
      {
LABEL_28:
        *(_QWORD *)(a3 + 24) = v15;
        operator delete(v15);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_29:
      v9 = v6 + 2;
      break;
    case 7:
      v44 = a2[6];
      v45 = a2[7];
      v12 = v45 >= v44;
      v46 = v45 - v44;
      if (!v12)
        v46 = 0;
      if (v46 <= 3)
        goto LABEL_54;
      v47 = *(_DWORD *)(a2[3] + v44);
      a2[6] = v44 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v47;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 7;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 8:
      v32 = a2[6];
      v33 = a2[7];
      v12 = v33 >= v32;
      v34 = v33 - v32;
      if (!v12)
        v34 = 0;
      if (v34 <= 7)
        goto LABEL_54;
      v35 = *(_QWORD *)(a2[3] + v32);
      a2[6] = v32 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v35;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 8;
      if (v25)
        goto LABEL_34;
      goto LABEL_35;
    case 11:
      v36 = a2[6];
      v37 = a2[7];
      v12 = v37 >= v36;
      v38 = v37 - v36;
      if (!v12)
        v38 = 0;
      if (v38 <= 3)
        goto LABEL_54;
      v39 = *(_DWORD *)(a2[3] + v36);
      a2[6] = v36 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v39;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 11;
      if (v20)
      {
LABEL_40:
        *(_QWORD *)(a3 + 24) = v20;
        operator delete(v20);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_41:
      v9 = v6 + 4;
      break;
    case 12:
      v40 = a2[6];
      v41 = a2[7];
      v12 = v41 >= v40;
      v42 = v41 - v40;
      if (!v12)
        v42 = 0;
      if (v42 <= 7)
      {
LABEL_54:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20AEC74EC(exception, "Not enough data to read");
        __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
      }
      v43 = *(_QWORD *)(a2[3] + v40);
      a2[6] = v40 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v43;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 12;
      if (v25)
      {
LABEL_34:
        *(_QWORD *)(a3 + 24) = v25;
        operator delete(v25);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_35:
      v9 = v6 + 8;
      break;
    default:
      sub_20B521E58(a1);
  }
  *v8 = v6;
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = v9;
}

void sub_20B102E08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B102E1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B102E30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B102E44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B102E58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B102E6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B102E80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B102E94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B102EA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B102EBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B102ED0(int a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  _BYTE *v6;
  void *v7;
  _QWORD *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  __int16 v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  std::logic_error *exception;

  switch(a1)
  {
    case 0:
      v4 = a2[6];
      if (a2[7] <= v4)
        goto LABEL_54;
      v5 = *(_BYTE *)(a2[3] + v4);
      a2[6] = v4 + 1;
      v6 = operator new(1uLL);
      *v6 = v5;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 0;
      if (v7)
        goto LABEL_4;
      goto LABEL_5;
    case 1:
      v10 = a2[6];
      v11 = a2[7];
      v12 = v11 >= v10;
      v13 = v11 - v10;
      if (!v12)
        v13 = 0;
      if (v13 <= 1)
        goto LABEL_54;
      v14 = *(_WORD *)(a2[3] + v10);
      a2[6] = v10 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v14;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 1;
      if (!v15)
        goto LABEL_29;
      goto LABEL_28;
    case 2:
      v16 = a2[6];
      v17 = a2[7];
      v12 = v17 >= v16;
      v18 = v17 - v16;
      if (!v12)
        v18 = 0;
      if (v18 <= 3)
        goto LABEL_54;
      v19 = *(_DWORD *)(a2[3] + v16);
      a2[6] = v16 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v19;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 2;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 3:
      v21 = a2[6];
      v22 = a2[7];
      v12 = v22 >= v21;
      v23 = v22 - v21;
      if (!v12)
        v23 = 0;
      if (v23 <= 7)
        goto LABEL_54;
      v24 = *(_QWORD *)(a2[3] + v21);
      a2[6] = v21 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v24;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 3;
      if (!v25)
        goto LABEL_35;
      goto LABEL_34;
    case 5:
      v26 = a2[6];
      if (a2[7] <= v26)
        goto LABEL_54;
      v27 = *(_BYTE *)(a2[3] + v26);
      a2[6] = v26 + 1;
      v6 = operator new(1uLL);
      *v6 = v27;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 5;
      if (!v7)
        goto LABEL_5;
LABEL_4:
      *(_QWORD *)(a3 + 24) = v7;
      operator delete(v7);
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
LABEL_5:
      v9 = v6 + 1;
      break;
    case 6:
      v28 = a2[6];
      v29 = a2[7];
      v12 = v29 >= v28;
      v30 = v29 - v28;
      if (!v12)
        v30 = 0;
      if (v30 <= 1)
        goto LABEL_54;
      v31 = *(_WORD *)(a2[3] + v28);
      a2[6] = v28 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v31;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 6;
      if (v15)
      {
LABEL_28:
        *(_QWORD *)(a3 + 24) = v15;
        operator delete(v15);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_29:
      v9 = v6 + 2;
      break;
    case 7:
      v44 = a2[6];
      v45 = a2[7];
      v12 = v45 >= v44;
      v46 = v45 - v44;
      if (!v12)
        v46 = 0;
      if (v46 <= 3)
        goto LABEL_54;
      v47 = *(_DWORD *)(a2[3] + v44);
      a2[6] = v44 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v47;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 7;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 8:
      v32 = a2[6];
      v33 = a2[7];
      v12 = v33 >= v32;
      v34 = v33 - v32;
      if (!v12)
        v34 = 0;
      if (v34 <= 7)
        goto LABEL_54;
      v35 = *(_QWORD *)(a2[3] + v32);
      a2[6] = v32 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v35;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 8;
      if (v25)
        goto LABEL_34;
      goto LABEL_35;
    case 11:
      v36 = a2[6];
      v37 = a2[7];
      v12 = v37 >= v36;
      v38 = v37 - v36;
      if (!v12)
        v38 = 0;
      if (v38 <= 3)
        goto LABEL_54;
      v39 = *(_DWORD *)(a2[3] + v36);
      a2[6] = v36 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v39;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 11;
      if (v20)
      {
LABEL_40:
        *(_QWORD *)(a3 + 24) = v20;
        operator delete(v20);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_41:
      v9 = v6 + 4;
      break;
    case 12:
      v40 = a2[6];
      v41 = a2[7];
      v12 = v41 >= v40;
      v42 = v41 - v40;
      if (!v12)
        v42 = 0;
      if (v42 <= 7)
      {
LABEL_54:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20AEC74EC(exception, "Not enough data to read");
        __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
      }
      v43 = *(_QWORD *)(a2[3] + v40);
      a2[6] = v40 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v43;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 12;
      if (v25)
      {
LABEL_34:
        *(_QWORD *)(a3 + 24) = v25;
        operator delete(v25);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_35:
      v9 = v6 + 8;
      break;
    default:
      sub_20B521E58(a1);
  }
  *v8 = v6;
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = v9;
}

void sub_20B103388(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B10339C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1033B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1033C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1033D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1033EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B103400(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B103414(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B103428(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B10343C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B103450(int *a1, _BYTE *a2, _BYTE *a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;
  _BYTE *v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20B10359C();
      sub_20B520518((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v14 = a3;
    sub_20B103C34(a2, &v14);
    sub_20B10391C(*a3, (uint64_t)a2, (uint64_t)a3);
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
  {
    sub_20B103798((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    v14 = a3;
    sub_20B103C34(a2, &v14);
    sub_20B10391C(*a3, (uint64_t)a2, (uint64_t)a3);
  }
}

__int128 *sub_20B10359C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635878);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635878))
    return &xmmword_254635860;
  v2 = (char *)sub_20B103678();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254635860, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254635870 = *((_QWORD *)v2 + 2);
    xmmword_254635860 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635860, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635878);
  return &xmmword_254635860;
}

void sub_20B103660(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635878);
  _Unwind_Resume(a1);
}

void *sub_20B103678()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254635898);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254635898))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::commonio::NumberSample]", qword_254635880);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635880, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635898);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546358B8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_2546358B8))
    return &unk_2546358A0;
  sub_20B531658((uint64_t)qword_254635880, (uint64_t)&unk_2546358A0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_2546358A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546358B8);
  return &unk_2546358A0;
}

void sub_20B103768(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546358B8);
  _Unwind_Resume(a1);
}

void sub_20B103780(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635898);
  _Unwind_Resume(a1);
}

void sub_20B103798(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  char *v5;
  unsigned __int8 v6;
  char v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19[8];
  char v20;
  char *v21;
  char *v22;
  _DWORD *v23;

  v19[0] = 7;
  v20 = 7;
  v5 = (char *)operator new(4uLL);
  v21 = v5;
  *(_DWORD *)v5 = 0;
  v22 = v5 + 4;
  v23 = v5 + 4;
  v14 = v19;
  sub_20B103C34(a2, &v14);
  sub_20B103DE8(v19[0], (uint64_t)a2, (uint64_t)v19);
  v6 = v19[0];
  LOBYTE(v14) = v19[0];
  v7 = v20;
  v15 = v20;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v8 = v21;
  v9 = v22 - v21;
  if (v22 == v21)
  {
    v11 = 0;
    v10 = 0;
    *(_BYTE *)a3 = v19[0];
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
    {
LABEL_4:
      *(_QWORD *)(a3 + 24) = v12;
      operator delete(v12);
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v8 = v21;
    }
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v10 = (char *)operator new(v22 - v21);
    v11 = &v10[v9];
    memcpy(v10, v8, v9);
    *(_BYTE *)a3 = v6;
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
      goto LABEL_4;
  }
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v11;
  if (v8)
  {
    v22 = v8;
    operator delete(v8);
  }
}

void sub_20B1038D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_20B10391C(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 96))(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 88))(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 48))(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 56))(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 136))(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B103C34(_BYTE *a1, _BYTE **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_20B52CF30(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_20B522188((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v6 + 128);
    MEMORY[0x20BD3583C](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 80))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20B103D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20B52CE84(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B103DE8(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 96))(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 88))(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 48))(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 56))(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 136))(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_20B521E58(a1);
  }
}

_QWORD *sub_20B104100@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24C3F6410;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 176) = v7;
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_QWORD *)v4 = &off_24C3F6390;
  *a2 = &off_24C411E78;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20B104298(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20B1042B4(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  unsigned __int8 *v12;
  int v13;
  void **v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 *v21;
  void **v22;

  v18 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v19 = *((_QWORD *)a2 + 2);
  v20 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v21 = &v18;
  sub_20B0FBCB0(a1, (_BYTE **)&v21);
  if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    if (*(_BYTE *)(a1 + 88) && *(_QWORD *)(a1 + 80) == 7)
    {
      v8 = *(int **)(a1 + 72);
      v9 = *v8;
      v10 = *(int *)((char *)v8 + 3);
      if (v9 == *(_DWORD *)"version" && v10 == *(_DWORD *)"sion")
        goto LABEL_17;
    }
  }
  else
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "size";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LOBYTE(v21) = 6;
  v22 = (void **)*((_QWORD *)&v18 + 1);
  v12 = (unsigned __int8 *)sub_20B506370(a1);
  v13 = *v12;
  *v12 = v21;
  LOBYTE(v21) = v13;
  v14 = (void **)*((_QWORD *)v12 + 1);
  *((_QWORD *)v12 + 1) = v22;
  v22 = v14;
  sub_20B4181DC(&v22, v13);
LABEL_17:
  sub_20B104488(v18, (uint64_t)&v18, a1);
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20B104454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20B4181DC(v13, a13);
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B104474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B104488(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  int v54;
  float *v55;
  uint64_t v56;

  switch(a1)
  {
    case 0:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(a2 + 16);
      v7 = *(float **)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v9 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v9)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v7;
      v56 = v6;
      sub_20B506898(a3, (size_t *)&v55);
      break;
    case 1:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 1);
      v10 = *(_QWORD *)(a2 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (v13
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v14 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v14)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v12 >> 1);
      v56 = v11;
      sub_20B509034(a3, (uint64_t)&v55);
      break;
    case 2:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 2);
      v15 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (v18
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v19 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v19)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v17 >> 2);
      v56 = v16;
      sub_20B5092A4(a3, (uint64_t)&v55);
      break;
    case 3:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 3);
      v20 = *(_QWORD *)(a2 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (v23
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v24 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v24)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v22 >> 3);
      v56 = v21;
      sub_20B509784(a3, (uint64_t)&v55);
      break;
    case 5:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 5);
      v25 = *(_QWORD *)(a2 + 16);
      v27 = *(float **)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (!v28
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v29 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v29)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v27;
      v56 = v26;
      sub_20B508DC4(a3, (size_t *)&v55);
      break;
    case 6:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 6);
      v30 = *(_QWORD *)(a2 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (v33
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v34 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v34)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v32 >> 1);
      v56 = v31;
      sub_20B508EFC(a3, (uint64_t)&v55);
      break;
    case 7:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 7);
      v35 = *(_QWORD *)(a2 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (v38
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v39 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v39)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v37 >> 2);
      v56 = v36;
      sub_20B50916C(a3, (uint64_t)&v55);
      break;
    case 8:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 8);
      v40 = *(_QWORD *)(a2 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (v43
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v44 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v44)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v42 >> 3);
      v56 = v41;
      sub_20B50964C(a3, (uint64_t)&v55);
      break;
    case 11:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 11);
      v45 = *(_QWORD *)(a2 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (v48
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v49 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v49)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v47 >> 2);
      v56 = v46;
      sub_20B509D64(a3, &v55);
      break;
    case 12:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 12);
      v50 = *(_QWORD *)(a2 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_100:
        abort();
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v54 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v54)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v52 >> 3);
      v56 = v51;
      sub_20B50A184(a3, &v55);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B104B80(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14;

  v11 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v12 = *((_QWORD *)a2 + 2);
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v14 = (uint64_t *)(v6 + 16);
    sub_20B51DD74(&v14, v11);
  }
  else
  {
    if ((char)v11 < 0)
    {
      LOBYTE(v14) = -52;
      BYTE1(v14) = v11;
    }
    else
    {
      LOBYTE(v14) = v11;
    }
    std::ostream::write();
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v14 = (uint64_t *)(v7 + 16);
    sub_20B51F33C(&v14, *((unint64_t *)&v11 + 1));
  }
  else
  {
    sub_20B51F644();
  }
  sub_20B104CC8(v11, (uint64_t)&v11, a1);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20B104CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B104CC8(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  __int16 *v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  __int128 v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(a2 + 16), 0);
      v6 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)(v6 + 40);
      v7 = *(char **)(v6 + 48);
      if (v7)
        v9 = 1;
      else
        v9 = v8 == 0;
      if (!v9)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v10 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v10 + 40))
      {
        for (*(_QWORD *)&v82 = v10 + 16; v8; --v8)
          result = (uint64_t)sub_20B51DD74((uint64_t **)&v82, *v7++);
      }
      else
      {
        for (; v8; --v8)
        {
          v69 = *v7;
          if (v69 < 0)
          {
            LOBYTE(v82) = -52;
            BYTE1(v82) = v69;
          }
          else
          {
            LOBYTE(v82) = *v7;
          }
          result = std::ostream::write();
          ++v7;
        }
      }
      break;
    case 1:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 1);
      v11 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(v11 + 40);
      v12 = *(_QWORD *)(v11 + 48);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 2;
      if (v14
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      *(_QWORD *)&v82 = v13 >> 1;
      *((_QWORD *)&v82 + 1) = v12;
      result = sub_20B518234(*(_QWORD *)(a3 + 24), &v82);
      break;
    case 2:
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(a2 + 16), 2);
      v15 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(unsigned int **)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (v18)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v19 = v17 >> 2;
      v20 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v20 + 40))
      {
        *(_QWORD *)&v82 = v20 + 16;
        if (v17 >= 4)
        {
          v21 = 4 * v19;
          do
          {
            result = (uint64_t)sub_20B51E95C((uint64_t **)&v82, *v16++);
            v21 -= 4;
          }
          while (v21);
        }
      }
      else if (v17 >= 4)
      {
        v70 = v20 + 8;
        v71 = 4 * v19;
        do
        {
          result = sub_20B51EBD0((uint64_t)&v82, v70);
          ++v16;
          v71 -= 4;
        }
        while (v71);
      }
      break;
    case 3:
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(a2 + 16), 3);
      v22 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)(v22 + 40);
      v23 = *(unint64_t **)(v22 + 48);
      if (v23)
        v25 = 0;
      else
        v25 = v24 >= 8;
      if (v25)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v26 = v24 >> 3;
      v27 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v27 + 40))
      {
        *(_QWORD *)&v82 = v27 + 16;
        if (v24 >= 8)
        {
          v28 = 8 * v26;
          do
          {
            result = (uint64_t)sub_20B51F33C((uint64_t **)&v82, *v23++);
            v28 -= 8;
          }
          while (v28);
        }
      }
      else if (v24 >= 8)
      {
        v72 = 8 * v26;
        do
        {
          ++v23;
          result = sub_20B51F644();
          v72 -= 8;
        }
        while (v72);
      }
      break;
    case 5:
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(a2 + 16), 5);
      v29 = *(_QWORD *)(a2 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_BYTE **)(v29 + 48);
      if (v30)
        v32 = 1;
      else
        v32 = v31 == 0;
      if (!v32)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v33 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v33 + 40))
      {
        for (*(_QWORD *)&v82 = v33 + 16; v31; --v31)
          result = (uint64_t)sub_20B51DC2C((uint64_t **)&v82, (char)*v30++);
      }
      else
      {
        for (; v31; --v31)
        {
          v73 = (char)*v30;
          if (v73 > -33)
          {
            LOBYTE(v82) = *v30;
          }
          else
          {
            LOBYTE(v82) = -48;
            BYTE1(v82) = v73;
          }
          result = std::ostream::write();
          ++v30;
        }
      }
      break;
    case 6:
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(a2 + 16), 6);
      v34 = *(_QWORD *)(a2 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(__int16 **)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 2;
      if (v37)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v38 = v36 >> 1;
      v39 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v39 + 40))
      {
        *(_QWORD *)&v82 = v39 + 16;
        if (v36 >= 2)
        {
          v40 = 2 * v38;
          do
          {
            result = (uint64_t)sub_20B51DEB8((uint64_t **)&v82, *v35++);
            v40 -= 2;
          }
          while (v40);
        }
      }
      else if (v36 >= 2)
      {
        v74 = 2 * v38;
        do
        {
          ++v35;
          result = sub_20B51E17C();
          v74 -= 2;
        }
        while (v74);
      }
      break;
    case 7:
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(a2 + 16), 7);
      v41 = *(_QWORD *)(a2 + 16);
      v43 = *(_QWORD *)(v41 + 40);
      v42 = *(unsigned int **)(v41 + 48);
      if (v42)
        v44 = 0;
      else
        v44 = v43 >= 4;
      if (v44)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v45 = v43 >> 2;
      v46 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v46 + 40))
      {
        *(_QWORD *)&v82 = v46 + 16;
        if (v43 >= 4)
        {
          v47 = 4 * v45;
          do
          {
            result = (uint64_t)sub_20B51E444((uint64_t **)&v82, *v42++);
            v47 -= 4;
          }
          while (v47);
        }
      }
      else if (v43 >= 4)
      {
        v75 = 4 * v45;
        do
        {
          ++v42;
          result = sub_20B51E860();
          v75 -= 4;
        }
        while (v75);
      }
      break;
    case 8:
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(a2 + 16), 8);
      v48 = *(_QWORD *)(a2 + 16);
      v50 = *(_QWORD *)(v48 + 40);
      v49 = *(unint64_t **)(v48 + 48);
      if (v49)
        v51 = 0;
      else
        v51 = v50 >= 8;
      if (v51)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v52 = v50 >> 3;
      v53 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v53 + 40))
      {
        *(_QWORD *)&v82 = v53 + 16;
        if (v50 >= 8)
        {
          v54 = 8 * v52;
          do
          {
            result = (uint64_t)sub_20B51ECC0((uint64_t **)&v82, *v49++);
            v54 -= 8;
          }
          while (v54);
        }
      }
      else if (v50 >= 8)
      {
        v76 = 8 * v52;
        do
        {
          ++v49;
          result = sub_20B51F1FC();
          v76 -= 8;
        }
        while (v76);
      }
      break;
    case 11:
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(a2 + 16), 11);
      v55 = *(_QWORD *)(a2 + 16);
      v57 = *(_QWORD *)(v55 + 40);
      v56 = *(unsigned int **)(v55 + 48);
      if (v56)
        v58 = 0;
      else
        v58 = v57 >= 4;
      if (v58)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v59 = v57 >> 2;
      v60 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v60 + 40))
      {
        *(_QWORD *)&v82 = v60 + 16;
        if (v57 >= 4)
        {
          v61 = 4 * v59;
          do
          {
            result = (uint64_t)sub_20B51F73C((uint64_t)&v81, (uint64_t **)&v82, v56++);
            v61 -= 4;
          }
          while (v61);
        }
      }
      else if (v57 >= 4)
      {
        v77 = 4 * v59;
        do
        {
          v78 = *v56;
          LOBYTE(v82) = -54;
          *(_DWORD *)((char *)&v82 + 1) = bswap32(v78);
          result = std::ostream::write();
          ++v56;
          v77 -= 4;
        }
        while (v77);
      }
      break;
    case 12:
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(a2 + 16), 12);
      v62 = *(_QWORD *)(a2 + 16);
      v64 = *(_QWORD *)(v62 + 40);
      v63 = *(unint64_t **)(v62 + 48);
      if (v63)
        v65 = 0;
      else
        v65 = v64 >= 8;
      if (v65)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
LABEL_144:
          abort();
      }
      v66 = v64 >> 3;
      v67 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v67 + 40))
      {
        *(_QWORD *)&v82 = v67 + 16;
        if (v64 >= 8)
        {
          v68 = 8 * v66;
          do
          {
            result = (uint64_t)sub_20B51F818((uint64_t)&v81, (uint64_t **)&v82, v63++);
            v68 -= 8;
          }
          while (v68);
        }
      }
      else if (v64 >= 8)
      {
        v79 = 8 * v66;
        do
        {
          v80 = *v63;
          LOBYTE(v82) = -53;
          *(_QWORD *)((char *)&v82 + 1) = bswap64(v80);
          result = std::ostream::write();
          ++v63;
          v79 -= 8;
        }
        while (v79);
      }
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

void sub_20B1054D4(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 *v21;
  uint64_t v22;

  v18 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v19 = *((_QWORD *)a2 + 2);
  v20 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v21 = &v18;
  sub_20B0FDBDC(a1, (_BYTE **)&v21);
  if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    if (*(_BYTE *)(a1 + 88) && *(_QWORD *)(a1 + 80) == 7)
    {
      v8 = *(int **)(a1 + 72);
      v9 = *v8;
      v10 = *(int *)((char *)v8 + 3);
      if (v9 == *(_DWORD *)"version" && v10 == *(_DWORD *)"sion")
        goto LABEL_17;
    }
  }
  else
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "size";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LOBYTE(v21) = 6;
  v22 = *((_QWORD *)&v18 + 1);
  v12 = (unsigned __int8 *)sub_20B505B08(a1);
  v13 = *v12;
  *v12 = v21;
  LOBYTE(v21) = v13;
  v14 = *((_QWORD *)v12 + 1);
  *((_QWORD *)v12 + 1) = v22;
  v22 = v14;
  sub_20B416E08(&v22, v13);
LABEL_17:
  sub_20B1056A8(v18, (uint64_t)&v18, a1);
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20B105674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20B416E08(v13, a13);
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B105694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1056A8(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  int v54;
  float *v55;
  uint64_t v56;

  switch(a1)
  {
    case 0:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(a2 + 16);
      v7 = *(float **)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v9 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v9)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v7;
      v56 = v6;
      sub_20B50612C(a3, (size_t *)&v55);
      break;
    case 1:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 1);
      v10 = *(_QWORD *)(a2 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (v13
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v14 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v14)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v12 >> 1);
      v56 = v11;
      sub_20B507218(a3, (uint64_t)&v55);
      break;
    case 2:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 2);
      v15 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (v18
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v19 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v19)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v17 >> 2);
      v56 = v16;
      sub_20B507488(a3, (uint64_t)&v55);
      break;
    case 3:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 3);
      v20 = *(_QWORD *)(a2 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (v23
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v24 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v24)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v22 >> 3);
      v56 = v21;
      sub_20B5076F8(a3, (uint64_t)&v55);
      break;
    case 5:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 5);
      v25 = *(_QWORD *)(a2 + 16);
      v27 = *(float **)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (!v28
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v29 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v29)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v27;
      v56 = v26;
      sub_20B506FA8(a3, (size_t *)&v55);
      break;
    case 6:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 6);
      v30 = *(_QWORD *)(a2 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (v33
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v34 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v34)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v32 >> 1);
      v56 = v31;
      sub_20B5070E0(a3, (uint64_t)&v55);
      break;
    case 7:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 7);
      v35 = *(_QWORD *)(a2 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (v38
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v39 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v39)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v37 >> 2);
      v56 = v36;
      sub_20B507350(a3, (uint64_t)&v55);
      break;
    case 8:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 8);
      v40 = *(_QWORD *)(a2 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (v43
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v44 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v44)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v42 >> 3);
      v56 = v41;
      sub_20B5075C0(a3, (uint64_t)&v55);
      break;
    case 11:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 11);
      v45 = *(_QWORD *)(a2 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (v48
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v49 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v49)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v47 >> 2);
      v56 = v46;
      sub_20B507CD8(a3, &v55);
      break;
    case 12:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 12);
      v50 = *(_QWORD *)(a2 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_100:
        abort();
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v54 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v54)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v52 >> 3);
      v56 = v51;
      sub_20B5080F8(a3, &v55);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B105DA0(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unsigned __int8 v13;

  v10 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 2);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v13 = v10;
  sub_20B512EB0(a1, &v13);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    v13 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v6, (uint64_t)&v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20B105EA4(v10, (uint64_t)&v10, a1);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20B105E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B105EA4(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;

  switch(a1)
  {
    case 0:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(a2 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(unsigned __int8 **)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (v8)
      {
        if (!v7)
          return;
        goto LABEL_65;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        do
        {
LABEL_65:
          sub_20B512EB0(a3, v6++);
          --v7;
        }
        while (v7);
        return;
      }
      goto LABEL_110;
    case 1:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 1);
      v9 = *(_QWORD *)(a2 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(_QWORD *)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
      {
        if (v11 < 2)
          return;
        goto LABEL_68;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_68:
        v46 = *(_QWORD *)(a3 + 40);
        v47 = v11 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v46)
          {
            v48 = *(_QWORD **)(a3 + 24);
            v71 = *(_BYTE *)(a3 + 32);
            sub_20AEC01D0(v48, (uint64_t)&v71, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          v46 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v46;
          v47 -= 2;
        }
        while (v47);
        return;
      }
      goto LABEL_110;
    case 2:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 2);
      v13 = *(_QWORD *)(a2 + 16);
      v15 = *(_QWORD *)(v13 + 40);
      v14 = *(_QWORD *)(v13 + 48);
      if (v14)
        v16 = 0;
      else
        v16 = v15 >= 4;
      if (!v16)
      {
        if (v15 < 4)
          return;
        goto LABEL_73;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_73:
        v49 = *(_QWORD *)(a3 + 40);
        v50 = v15 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v49)
          {
            v51 = *(_QWORD **)(a3 + 24);
            v72 = *(_BYTE *)(a3 + 32);
            sub_20AEC01D0(v51, (uint64_t)&v72, 1);
          }
          v14 += 4;
          std::ostream::operator<<();
          v49 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v49;
          v50 -= 4;
        }
        while (v50);
        return;
      }
      goto LABEL_110;
    case 3:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 3);
      v17 = *(_QWORD *)(a2 + 16);
      v19 = *(_QWORD *)(v17 + 40);
      v18 = *(_QWORD *)(v17 + 48);
      if (v18)
        v20 = 0;
      else
        v20 = v19 >= 8;
      if (!v20)
      {
        if (v19 < 8)
          return;
        goto LABEL_78;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_78:
        v52 = *(_QWORD *)(a3 + 40);
        v53 = v19 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v52)
          {
            v54 = *(_QWORD **)(a3 + 24);
            v73 = *(_BYTE *)(a3 + 32);
            sub_20AEC01D0(v54, (uint64_t)&v73, 1);
          }
          v18 += 8;
          std::ostream::operator<<();
          v52 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v52;
          v53 -= 8;
        }
        while (v53);
        return;
      }
      goto LABEL_110;
    case 5:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 5);
      v21 = *(_QWORD *)(a2 + 16);
      v23 = *(_QWORD *)(v21 + 40);
      v22 = *(char **)(v21 + 48);
      if (v22)
        v24 = 1;
      else
        v24 = v23 == 0;
      if (v24)
      {
        if (!v23)
          return;
        goto LABEL_83;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        do
        {
LABEL_83:
          sub_20B512CCC(a3, v22++);
          --v23;
        }
        while (v23);
        return;
      }
      goto LABEL_110;
    case 6:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 6);
      v25 = *(_QWORD *)(a2 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 0;
      else
        v28 = v27 >= 2;
      if (!v28)
      {
        if (v27 < 2)
          return;
        goto LABEL_86;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_86:
        v56 = *(_QWORD *)(a3 + 40);
        v57 = v27 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v56)
          {
            v58 = *(_QWORD **)(a3 + 24);
            v74 = *(_BYTE *)(a3 + 32);
            sub_20AEC01D0(v58, (uint64_t)&v74, 1);
          }
          v26 += 2;
          std::ostream::operator<<();
          v56 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v56;
          v57 -= 2;
        }
        while (v57);
        return;
      }
      goto LABEL_110;
    case 7:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 7);
      v29 = *(_QWORD *)(a2 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_QWORD *)(v29 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 4;
      if (!v32)
      {
        if (v31 < 4)
          return;
        goto LABEL_91;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_91:
        v59 = *(_QWORD *)(a3 + 40);
        v60 = v31 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v59)
          {
            v61 = *(_QWORD **)(a3 + 24);
            v75 = *(_BYTE *)(a3 + 32);
            sub_20AEC01D0(v61, (uint64_t)&v75, 1);
          }
          v30 += 4;
          std::ostream::operator<<();
          v59 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v59;
          v60 -= 4;
        }
        while (v60);
        return;
      }
      goto LABEL_110;
    case 8:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 8);
      v33 = *(_QWORD *)(a2 + 16);
      v35 = *(_QWORD *)(v33 + 40);
      v34 = *(_QWORD *)(v33 + 48);
      if (v34)
        v36 = 0;
      else
        v36 = v35 >= 8;
      if (!v36)
      {
        if (v35 < 8)
          return;
        goto LABEL_96;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_96:
        v62 = *(_QWORD *)(a3 + 40);
        v63 = v35 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v62)
          {
            v64 = *(_QWORD **)(a3 + 24);
            v76 = *(_BYTE *)(a3 + 32);
            sub_20AEC01D0(v64, (uint64_t)&v76, 1);
          }
          v34 += 8;
          std::ostream::operator<<();
          v62 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v62;
          v63 -= 8;
        }
        while (v63);
        return;
      }
      goto LABEL_110;
    case 11:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 11);
      v37 = *(_QWORD *)(a2 + 16);
      v39 = *(_QWORD *)(v37 + 40);
      v38 = *(_QWORD *)(v37 + 48);
      if (v38)
        v40 = 0;
      else
        v40 = v39 >= 4;
      if (!v40)
      {
        if (v39 < 4)
          return;
        goto LABEL_101;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_101:
        v65 = *(_QWORD *)(a3 + 40);
        v66 = v39 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v65)
          {
            v67 = *(_QWORD **)(a3 + 24);
            v77 = *(_BYTE *)(a3 + 32);
            sub_20AEC01D0(v67, (uint64_t)&v77, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(**(_QWORD **)(a3 + 24) - 24) + 16) = 9;
          v38 += 4;
          std::ostream::operator<<();
          v65 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v65;
          v66 -= 4;
        }
        while (v66);
        return;
      }
      goto LABEL_110;
    case 12:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 12);
      v41 = *(_QWORD *)(a2 + 16);
      v43 = *(_QWORD *)(v41 + 40);
      v42 = *(_QWORD *)(v41 + 48);
      if (v42)
        v44 = 0;
      else
        v44 = v43 >= 8;
      if (v44)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
LABEL_110:
          abort();
        }
      }
      else if (v43 < 8)
      {
        return;
      }
      v68 = *(_QWORD *)(a3 + 40);
      v69 = v43 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        if (v68)
        {
          v70 = *(_QWORD **)(a3 + 24);
          v78 = *(_BYTE *)(a3 + 32);
          sub_20AEC01D0(v70, (uint64_t)&v78, 1);
        }
        *(_QWORD *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(**(_QWORD **)(a3 + 24) - 24) + 16) = 17;
        v42 += 8;
        std::ostream::operator<<();
        v68 = *(_QWORD *)(a3 + 40) + 1;
        *(_QWORD *)(a3 + 40) = v68;
        v69 -= 8;
      }
      while (v69);
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B106574(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char __src;
  uint64_t v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  __src = v9;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v13, 1);
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&v9 + 8, (char *)&v10, 8);
  sub_20B106674(v9, (uint64_t)&v9, a1);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20B106660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20B106674(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int64_t v6;
  char *v7;
  BOOL v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;

  switch(a1)
  {
    case 0:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(a2 + 16);
      v6 = *(_QWORD *)(v5 + 40);
      v7 = *(char **)(v5 + 48);
      if (v7)
        v8 = 1;
      else
        v8 = v6 == 0;
      if (!v8)
        goto LABEL_27;
      return sub_20B42DB24(a3 + 24, *(char **)(a3 + 32), v7, &v7[v6], v6);
    case 1:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 1);
      v9 = *(_QWORD *)(a2 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(char **)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
        goto LABEL_37;
      goto LABEL_36;
    case 2:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 2);
      v13 = *(_QWORD *)(a2 + 16);
      v14 = *(_QWORD *)(v13 + 40);
      v10 = *(char **)(v13 + 48);
      if (v10)
        v15 = 0;
      else
        v15 = v14 >= 4;
      if (!v15)
        goto LABEL_59;
      goto LABEL_58;
    case 3:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 3);
      v16 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v16 + 40);
      v10 = *(char **)(v16 + 48);
      if (v10)
        v18 = 0;
      else
        v18 = v17 >= 8;
      if (!v18)
        goto LABEL_71;
      goto LABEL_70;
    case 5:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 5);
      v19 = *(_QWORD *)(a2 + 16);
      v6 = *(_QWORD *)(v19 + 40);
      v7 = *(char **)(v19 + 48);
      if (v7)
        v20 = 1;
      else
        v20 = v6 == 0;
      if (v20)
        return sub_20B42DB24(a3 + 24, *(char **)(a3 + 32), v7, &v7[v6], v6);
LABEL_27:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360)|| sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
      return sub_20B42DB24(a3 + 24, *(char **)(a3 + 32), v7, &v7[v6], v6);
    case 6:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 6);
      v21 = *(_QWORD *)(a2 + 16);
      v11 = *(_QWORD *)(v21 + 40);
      v10 = *(char **)(v21 + 48);
      if (v10)
        v22 = 0;
      else
        v22 = v11 >= 2;
      if (!v22)
        goto LABEL_37;
LABEL_36:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_37:
      v23 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (v10)
        v24 = 1;
      else
        v24 = v23 == 0;
      if (!v24)
        goto LABEL_75;
      return sub_20B42DB24(a3 + 24, *(char **)(a3 + 32), v10, &v10[v23], v23);
    case 7:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 7);
      v25 = *(_QWORD *)(a2 + 16);
      v14 = *(_QWORD *)(v25 + 40);
      v10 = *(char **)(v25 + 48);
      if (v10)
        v26 = 0;
      else
        v26 = v14 >= 4;
      if (!v26)
        goto LABEL_59;
      goto LABEL_58;
    case 8:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 8);
      v27 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v27 + 40);
      v10 = *(char **)(v27 + 48);
      if (v10)
        v28 = 0;
      else
        v28 = v17 >= 8;
      if (!v28)
        goto LABEL_71;
      goto LABEL_70;
    case 11:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 11);
      v29 = *(_QWORD *)(a2 + 16);
      v14 = *(_QWORD *)(v29 + 40);
      v10 = *(char **)(v29 + 48);
      if (v10)
        v30 = 0;
      else
        v30 = v14 >= 4;
      if (!v30)
        goto LABEL_59;
LABEL_58:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_59:
      v23 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      if (v10)
        v31 = 1;
      else
        v31 = v23 == 0;
      if (!v31)
        goto LABEL_75;
      return sub_20B42DB24(a3 + 24, *(char **)(a3 + 32), v10, &v10[v23], v23);
    case 12:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 12);
      v32 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v32 + 40);
      v10 = *(char **)(v32 + 48);
      if (v10)
        v33 = 0;
      else
        v33 = v17 >= 8;
      if (!v33)
        goto LABEL_71;
LABEL_70:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_71:
      v23 = v17 & 0xFFFFFFFFFFFFFFF8;
      if (v10)
        v34 = 1;
      else
        v34 = v23 == 0;
      if (!v34)
      {
LABEL_75:
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
LABEL_77:
          abort();
        }
      }
      return sub_20B42DB24(a3 + 24, *(char **)(a3 + 32), v10, &v10[v23], v23);
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B1069C8(_BYTE *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  __int128 *v12;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12 = &v9;
  sub_20B0FFA54(a1, (_BYTE **)&v12);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 120))(a1, (char *)&v9 + 8);
  sub_20B106AA8(v9, (uint64_t)&v9, (uint64_t)a1);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20B106A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20B106AA8(int a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;

  switch(a1)
  {
    case 0:
      result = sub_20B43D624((unsigned __int8 **)(a2 + 16), 0);
      v6 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)(v6 + 40);
      v7 = *(_QWORD *)(v6 + 48);
      if (v7)
        v9 = 1;
      else
        v9 = v8 == 0;
      if (v9)
      {
        if (!v8)
          return result;
        goto LABEL_65;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        do
        {
LABEL_65:
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, v7++);
          --v8;
        }
        while (v8);
        return result;
      }
      goto LABEL_102;
    case 1:
      result = sub_20B43D624((unsigned __int8 **)(a2 + 16), 1);
      v10 = *(_QWORD *)(a2 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
      {
        if (v12 < 2)
          return result;
        goto LABEL_68;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_68:
        v47 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 96))(a3, v11);
          v11 += 2;
          v47 -= 2;
        }
        while (v47);
        return result;
      }
      goto LABEL_102;
    case 2:
      result = sub_20B43D624((unsigned __int8 **)(a2 + 16), 2);
      v14 = *(_QWORD *)(a2 + 16);
      v16 = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 48);
      if (v15)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
      {
        if (v16 < 4)
          return result;
        goto LABEL_72;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_72:
        v48 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 104))(a3, v15);
          v15 += 4;
          v48 -= 4;
        }
        while (v48);
        return result;
      }
      goto LABEL_102;
    case 3:
      result = sub_20B43D624((unsigned __int8 **)(a2 + 16), 3);
      v18 = *(_QWORD *)(a2 + 16);
      v20 = *(_QWORD *)(v18 + 40);
      v19 = *(_QWORD *)(v18 + 48);
      if (v19)
        v21 = 0;
      else
        v21 = v20 >= 8;
      if (!v21)
      {
        if (v20 < 8)
          return result;
        goto LABEL_76;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_76:
        v49 = v20 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 120))(a3, v19);
          v19 += 8;
          v49 -= 8;
        }
        while (v49);
        return result;
      }
      goto LABEL_102;
    case 5:
      result = sub_20B43D624((unsigned __int8 **)(a2 + 16), 5);
      v22 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)(v22 + 40);
      v23 = *(_QWORD *)(v22 + 48);
      if (v23)
        v25 = 1;
      else
        v25 = v24 == 0;
      if (v25)
      {
        if (!v24)
          return result;
        goto LABEL_80;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        do
        {
LABEL_80:
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 88))(a3, v23++);
          --v24;
        }
        while (v24);
        return result;
      }
      goto LABEL_102;
    case 6:
      result = sub_20B43D624((unsigned __int8 **)(a2 + 16), 6);
      v26 = *(_QWORD *)(a2 + 16);
      v28 = *(_QWORD *)(v26 + 40);
      v27 = *(_QWORD *)(v26 + 48);
      if (v27)
        v29 = 0;
      else
        v29 = v28 >= 2;
      if (!v29)
      {
        if (v28 < 2)
          return result;
        goto LABEL_83;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_83:
        v51 = v28 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, v27);
          v27 += 2;
          v51 -= 2;
        }
        while (v51);
        return result;
      }
      goto LABEL_102;
    case 7:
      result = sub_20B43D624((unsigned __int8 **)(a2 + 16), 7);
      v30 = *(_QWORD *)(a2 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 4;
      if (!v33)
      {
        if (v32 < 4)
          return result;
        goto LABEL_87;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_87:
        v52 = v32 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v31);
          v31 += 4;
          v52 -= 4;
        }
        while (v52);
        return result;
      }
      goto LABEL_102;
    case 8:
      result = sub_20B43D624((unsigned __int8 **)(a2 + 16), 8);
      v34 = *(_QWORD *)(a2 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(_QWORD *)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 8;
      if (!v37)
      {
        if (v36 < 8)
          return result;
        goto LABEL_91;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_91:
        v53 = v36 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, v35);
          v35 += 8;
          v53 -= 8;
        }
        while (v53);
        return result;
      }
      goto LABEL_102;
    case 11:
      result = sub_20B43D624((unsigned __int8 **)(a2 + 16), 11);
      v38 = *(_QWORD *)(a2 + 16);
      v40 = *(_QWORD *)(v38 + 40);
      v39 = *(_QWORD *)(v38 + 48);
      if (v39)
        v41 = 0;
      else
        v41 = v40 >= 4;
      if (!v41)
      {
        if (v40 < 4)
          return result;
        goto LABEL_95;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_95:
        v54 = v40 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 128))(a3, v39);
          v39 += 4;
          v54 -= 4;
        }
        while (v54);
        return result;
      }
      goto LABEL_102;
    case 12:
      result = sub_20B43D624((unsigned __int8 **)(a2 + 16), 12);
      v42 = *(_QWORD *)(a2 + 16);
      v44 = *(_QWORD *)(v42 + 40);
      v43 = *(_QWORD *)(v42 + 48);
      if (v43)
        v45 = 0;
      else
        v45 = v44 >= 8;
      if (v45)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
LABEL_102:
          abort();
        }
      }
      else if (v44 < 8)
      {
        return result;
      }
      v55 = v44 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 136))(a3, v43);
        v43 += 8;
        v55 -= 8;
      }
      while (v55);
      return result;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B107038(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  unint64_t v14;

  sub_20B50AC94(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_20B4552C4(v6, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v14 >= 2)
    v7 = 2;
  else
    v7 = v14;
  if (v7 < 2)
  {
    sub_20B1071AC((uint64_t)&v14, a2, (uint64_t)a3);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "value_type";
    *(_QWORD *)(a2 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 104) = 1;
    v14 = (unint64_t)a3;
    sub_20B1002E8((uint64_t *)a2, (_BYTE **)&v14);
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "size";
    *(_QWORD *)(a2 + 96) = 4;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_20B50AF4C((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v14 = 0;
    sub_20B4552C4(v10, &v14);
    *((_QWORD *)a3 + 1) = v14;
    sub_20B10736C(*a3, (uint64_t)a3, a2);
  }
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
}

void sub_20B1071AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  void *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16[8];
  void *v17;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;

  v16[0] = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20B43C0EC(&v22, 7, (uint64_t)&__p);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v16;
  sub_20B1002E8((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_20B4552C4(v7, &__p);
  v17 = __p;
  sub_20B10827C(v16[0], (uint64_t)v16, a2);
  v8 = v17;
  v9 = v18;
  v18 = 0uLL;
  *(_BYTE *)a3 = v16[0];
  *(_QWORD *)(a3 + 8) = v8;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B10733C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B107358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B10736C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B107494(v3);
      break;
    case 1:
      sub_20B1075E4(v3);
      break;
    case 2:
      sub_20B107740(v3);
      break;
    case 3:
      sub_20B1078A0(v3);
      break;
    case 5:
      sub_20B107A38(v3);
      break;
    case 6:
      sub_20B107B88(v3);
      break;
    case 7:
      sub_20B107CE4(v3);
      break;
    case 8:
      sub_20B107E44(v3);
      break;
    case 11:
      sub_20B107FDC(v3);
      break;
    case 12:
      sub_20B10812C(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B107494(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AF4C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50B064(v7, (uint64_t)&v15);
  sub_20B43BC04(&v15, 0, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1075C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1075E4(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AF4C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50BE9C(v7, (uint64_t)&v15);
  sub_20B43BF48(&v15, 1, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10771C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B107740(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AF4C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50C014(v7, (uint64_t)&v15);
  sub_20B43C290(&v15, 2, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10787C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1078A0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_20B50AF4C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_20B50E45C(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20B43C5D8(&v15, 3, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B1079FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B107A38(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AF4C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50BCBC(v7, (uint64_t)&v15);
  sub_20B43BA64(&v15, 5, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B107B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B107B88(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AF4C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50BDAC(v7, (uint64_t)&v15);
  sub_20B43BDA4(&v15, 6, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B107CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B107CE4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AF4C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50BF58(v7, (uint64_t)&v15);
  sub_20B43C0EC(&v15, 7, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B107E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B107E44(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_20B50AF4C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_20B50E120(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20B43C434(&v15, 8, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B107FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B107FDC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v13 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_20B50AF4C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_20B50C420(v6, (float *)v3);
  sub_20B43C77C(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B108108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10812C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v13 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_20B50AF4C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_20B50C528(v6, (double *)v3);
  sub_20B43C920(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B108258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10827C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B1083A4(v3);
      break;
    case 1:
      sub_20B1084F4(v3);
      break;
    case 2:
      sub_20B108650(v3);
      break;
    case 3:
      sub_20B1087B0(v3);
      break;
    case 5:
      sub_20B108948(v3);
      break;
    case 6:
      sub_20B108A98(v3);
      break;
    case 7:
      sub_20B108BF4(v3);
      break;
    case 8:
      sub_20B108D54(v3);
      break;
    case 11:
      sub_20B108EEC(v3);
      break;
    case 12:
      sub_20B10903C(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B1083A4(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AF4C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50B064(v7, (uint64_t)&v15);
  sub_20B43BC04(&v15, 0, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1084D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1084F4(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AF4C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50BE9C(v7, (uint64_t)&v15);
  sub_20B43BF48(&v15, 1, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10862C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B108650(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AF4C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50C014(v7, (uint64_t)&v15);
  sub_20B43C290(&v15, 2, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10878C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1087B0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_20B50AF4C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_20B50E45C(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20B43C5D8(&v15, 3, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10890C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B108948(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AF4C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50BCBC(v7, (uint64_t)&v15);
  sub_20B43BA64(&v15, 5, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B108A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B108A98(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AF4C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50BDAC(v7, (uint64_t)&v15);
  sub_20B43BDA4(&v15, 6, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B108BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B108BF4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AF4C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50BF58(v7, (uint64_t)&v15);
  sub_20B43C0EC(&v15, 7, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B108D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B108D54(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_20B50AF4C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_20B50E120(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20B43C434(&v15, 8, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B108EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B108EEC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v13 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_20B50AF4C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_20B50C420(v6, (float *)v3);
  sub_20B43C77C(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B109018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10903C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v13 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_20B50AF4C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_20B50C528(v6, (double *)v3);
  sub_20B43C920(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B109168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10918C(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;

  if (a4 < 2)
  {
    sub_20B109268((uint64_t)&v9, (uint64_t)a2, (uint64_t)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20B0DD290(a2 + 2);
    v10 = 0;
    sub_20B51852C(a2[6], &v10);
    *a3 = v10;
    sub_20B518BE4(a2[6], (_QWORD *)a3 + 1);
    sub_20B1093E0(*a3, (uint64_t)a3, (uint64_t)a2);
    v7 = a2[4];
    v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v7 - 8);
    if (v8)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v8);
    a2[4] -= 16;
  }
}

void sub_20B109268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 v13[8];
  uint64_t v14;
  __int128 v15;
  void *__p;
  void *v17;
  uint64_t v18;
  __int128 v19;

  v13[0] = 7;
  v14 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_20B43C0EC(&v19, 7, (uint64_t)&__p);
  v15 = v19;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_20B51852C(*(_QWORD *)(a2 + 48), &__p);
  v13[0] = __p;
  sub_20B518BE4(*(_QWORD *)(a2 + 48), &v14);
  sub_20B10A1D0(v13[0], (uint64_t)v13, a2);
  v5 = v14;
  v6 = v15;
  v15 = 0uLL;
  *(_BYTE *)a3 = v13[0];
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20B1093B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1093CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1093E0(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B109508(v3);
      break;
    case 1:
      sub_20B109640(v3);
      break;
    case 2:
      sub_20B109788(v3);
      break;
    case 3:
      sub_20B1098D4(v3);
      break;
    case 5:
      sub_20B109A20(v3);
      break;
    case 6:
      sub_20B109B58(v3);
      break;
    case 7:
      sub_20B109CA0(v3);
      break;
    case 8:
      sub_20B109DEC(v3);
      break;
    case 11:
      sub_20B109F38(v3);
      break;
    case 12:
      sub_20B10A084(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B109508(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = *(_QWORD *)(a1[1] + 48);
    do
    {
      sub_20B51852C(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20B43BC04(&v13, 0, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10961C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B109640(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20B5186C0(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20B43BF48(&v13, 1, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B109764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B109788(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20B518854(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20B43C290(&v13, 2, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B1098B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1098D4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20B518BE4(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20B43C5D8(&v13, 3, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B1099FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B109A20(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = *(_QWORD *)(a1[1] + 48);
    do
    {
      sub_20B51847C(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20B43BA64(&v13, 5, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B109B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B109B58(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20B518610(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20B43BDA4(&v13, 6, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B109C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B109CA0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20B5187A4(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20B43C0EC(&v13, 7, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B109DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B109DEC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20B518AFC(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20B43C434(&v13, 8, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B109F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B109F38(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20B518CC0(v4, (float *)v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20B43C77C(&v13, 11, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10A060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10A084(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20B518DF0(v4, (double *)v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20B43C920(&v13, 12, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10A1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10A1D0(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B10A2F8(v3);
      break;
    case 1:
      sub_20B10A430(v3);
      break;
    case 2:
      sub_20B10A578(v3);
      break;
    case 3:
      sub_20B10A6C4(v3);
      break;
    case 5:
      sub_20B10A810(v3);
      break;
    case 6:
      sub_20B10A948(v3);
      break;
    case 7:
      sub_20B10AA90(v3);
      break;
    case 8:
      sub_20B10ABDC(v3);
      break;
    case 11:
      sub_20B10AD28(v3);
      break;
    case 12:
      sub_20B10AE74(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B10A2F8(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = *(_QWORD *)(a1[1] + 48);
    do
    {
      sub_20B51852C(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20B43BC04(&v13, 0, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10A40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10A430(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20B5186C0(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20B43BF48(&v13, 1, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10A554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10A578(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20B518854(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20B43C290(&v13, 2, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10A6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10A6C4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20B518BE4(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20B43C5D8(&v13, 3, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10A7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10A810(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = *(_QWORD *)(a1[1] + 48);
    do
    {
      sub_20B51847C(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20B43BA64(&v13, 5, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10A924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10A948(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20B518610(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20B43BDA4(&v13, 6, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10AA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10AA90(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20B5187A4(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20B43C0EC(&v13, 7, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10ABB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10ABDC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20B518AFC(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20B43C434(&v13, 8, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10AD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10AD28(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20B518CC0(v4, (float *)v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20B43C77C(&v13, 11, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10AE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10AE74(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20B518DF0(v4, (double *)v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20B43C920(&v13, 12, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10AF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10AFC0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  unint64_t v14;

  sub_20B50A7A4(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_20B454B2C(v6, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v14 >= 2)
    v7 = 2;
  else
    v7 = v14;
  if (v7 < 2)
  {
    sub_20B10B134((uint64_t)&v14, a2, (uint64_t)a3);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "value_type";
    *(_QWORD *)(a2 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 104) = 1;
    v14 = (unint64_t)a3;
    sub_20B101898((uint64_t *)a2, (_BYTE **)&v14);
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "size";
    *(_QWORD *)(a2 + 96) = 4;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_20B50AA5C((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v14 = 0;
    sub_20B454B2C(v10, &v14);
    *((_QWORD *)a3 + 1) = v14;
    sub_20B10B2F4(*a3, (uint64_t)a3, a2);
  }
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
}

void sub_20B10B134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  void *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16[8];
  void *v17;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;

  v16[0] = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20B43C0EC(&v22, 7, (uint64_t)&__p);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v16;
  sub_20B101898((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_20B454B2C(v7, &__p);
  v17 = __p;
  sub_20B10C204(v16[0], (uint64_t)v16, a2);
  v8 = v17;
  v9 = v18;
  v18 = 0uLL;
  *(_BYTE *)a3 = v16[0];
  *(_QWORD *)(a3 + 8) = v8;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B10B2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10B2E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B10B2F4(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B10B41C(v3);
      break;
    case 1:
      sub_20B10B56C(v3);
      break;
    case 2:
      sub_20B10B6C8(v3);
      break;
    case 3:
      sub_20B10B828(v3);
      break;
    case 5:
      sub_20B10B9C0(v3);
      break;
    case 6:
      sub_20B10BB10(v3);
      break;
    case 7:
      sub_20B10BC6C(v3);
      break;
    case 8:
      sub_20B10BDCC(v3);
      break;
    case 11:
      sub_20B10BF64(v3);
      break;
    case 12:
      sub_20B10C0B4(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B10B41C(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AA5C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50AB74(v7, (uint64_t)&v15);
  sub_20B43BC04(&v15, 0, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B10B548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10B56C(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AA5C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50B300(v7, (uint64_t)&v15);
  sub_20B43BF48(&v15, 1, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10B6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10B6C8(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AA5C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50B478(v7, (uint64_t)&v15);
  sub_20B43C290(&v15, 2, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10B804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10B828(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_20B50AA5C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_20B50D194(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20B43C5D8(&v15, 3, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10B984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10B9C0(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AA5C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50B120(v7, (uint64_t)&v15);
  sub_20B43BA64(&v15, 5, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B10BAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10BB10(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AA5C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50B210(v7, (uint64_t)&v15);
  sub_20B43BDA4(&v15, 6, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10BC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10BC6C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AA5C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50B3BC(v7, (uint64_t)&v15);
  sub_20B43C0EC(&v15, 7, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10BDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10BDCC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_20B50AA5C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_20B50CAD8(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20B43C434(&v15, 8, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10BF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10BF64(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v13 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_20B50AA5C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_20B50B8AC(v6, (float *)v3);
  sub_20B43C77C(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B10C090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10C0B4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v13 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_20B50AA5C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_20B50B9DC(v6, (double *)v3);
  sub_20B43C920(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B10C1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10C204(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B10C32C(v3);
      break;
    case 1:
      sub_20B10C47C(v3);
      break;
    case 2:
      sub_20B10C5D8(v3);
      break;
    case 3:
      sub_20B10C738(v3);
      break;
    case 5:
      sub_20B10C8D0(v3);
      break;
    case 6:
      sub_20B10CA20(v3);
      break;
    case 7:
      sub_20B10CB7C(v3);
      break;
    case 8:
      sub_20B10CCDC(v3);
      break;
    case 11:
      sub_20B10CE74(v3);
      break;
    case 12:
      sub_20B10CFC4(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B10C32C(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AA5C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50AB74(v7, (uint64_t)&v15);
  sub_20B43BC04(&v15, 0, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B10C458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10C47C(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AA5C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50B300(v7, (uint64_t)&v15);
  sub_20B43BF48(&v15, 1, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10C5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10C5D8(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AA5C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50B478(v7, (uint64_t)&v15);
  sub_20B43C290(&v15, 2, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10C714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10C738(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_20B50AA5C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_20B50D194(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20B43C5D8(&v15, 3, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10C894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10C8D0(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AA5C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50B120(v7, (uint64_t)&v15);
  sub_20B43BA64(&v15, 5, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B10C9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10CA20(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AA5C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50B210(v7, (uint64_t)&v15);
  sub_20B43BDA4(&v15, 6, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10CB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10CB7C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_20B50AA5C((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_20B50B3BC(v7, (uint64_t)&v15);
  sub_20B43C0EC(&v15, 7, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10CCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10CCDC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_20B50AA5C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_20B50CAD8(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20B43C434(&v15, 8, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B10CE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10CE74(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v13 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_20B50AA5C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_20B50B8AC(v6, (float *)v3);
  sub_20B43C77C(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B10CFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10CFC4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v13 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_20B50AA5C((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_20B50B9DC(v6, (double *)v3);
  sub_20B43C920(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B10D0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10D114(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_20B514490(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_20B10D268((uint64_t)__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    sub_20B513B4C(a2, __p);
    *a3 = __p[0];
    sub_20B514DE0(a2, (_QWORD *)a3 + 1);
    sub_20B10D3E0(*a3, (uint64_t)a3, a2);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20B10D268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 v13[8];
  uint64_t v14;
  __int128 v15;
  void *__p;
  void *v17;
  uint64_t v18;
  __int128 v19;

  v13[0] = 7;
  v14 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_20B43C0EC(&v19, 7, (uint64_t)&__p);
  v15 = v19;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_20B513B4C(a2, &__p);
  v13[0] = __p;
  sub_20B514DE0(a2, &v14);
  sub_20B10E1A8(v13[0], (uint64_t)v13, a2);
  v5 = v14;
  v6 = v15;
  v15 = 0uLL;
  *(_BYTE *)a3 = v13[0];
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20B10D3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10D3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B10D3E0(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B10D508(v3);
      break;
    case 1:
      sub_20B10D63C(v3);
      break;
    case 2:
      sub_20B10D780(v3);
      break;
    case 3:
      sub_20B10D8C8(v3);
      break;
    case 5:
      sub_20B10DA10(v3);
      break;
    case 6:
      sub_20B10DB44(v3);
      break;
    case 7:
      sub_20B10DC88(v3);
      break;
    case 8:
      sub_20B10DDD0(v3);
      break;
    case 11:
      sub_20B10DF18(v3);
      break;
    case 12:
      sub_20B10E060(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B10D508(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = a1[1];
    do
    {
      sub_20B513B4C(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20B43BC04(&v13, 0, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10D618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10D63C(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = a1[1];
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20B513FE8(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20B43BF48(&v13, 1, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10D75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10D780(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20B514490(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20B43C290(&v13, 2, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10D8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10D8C8(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20B514DE0(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20B43C5D8(&v13, 3, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10D9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10DA10(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = a1[1];
    do
    {
      sub_20B513904(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20B43BA64(&v13, 5, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10DB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10DB44(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = a1[1];
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20B513D94(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20B43BDA4(&v13, 6, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10DC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10DC88(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20B51423C(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20B43C0EC(&v13, 7, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10DDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10DDD0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20B514B8C(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20B43C434(&v13, 8, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10DEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10DF18(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20B5152B0(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20B43C77C(&v13, 11, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10E03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10E060(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20B515504(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20B43C920(&v13, 12, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10E184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10E1A8(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B10E2D0(v3);
      break;
    case 1:
      sub_20B10E404(v3);
      break;
    case 2:
      sub_20B10E548(v3);
      break;
    case 3:
      sub_20B10E690(v3);
      break;
    case 5:
      sub_20B10E7D8(v3);
      break;
    case 6:
      sub_20B10E90C(v3);
      break;
    case 7:
      sub_20B10EA50(v3);
      break;
    case 8:
      sub_20B10EB98(v3);
      break;
    case 11:
      sub_20B10ECE0(v3);
      break;
    case 12:
      sub_20B10EE28(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B10E2D0(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = a1[1];
    do
    {
      sub_20B513B4C(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20B43BC04(&v13, 0, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10E3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10E404(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = a1[1];
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20B513FE8(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20B43BF48(&v13, 1, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10E524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10E548(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20B514490(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20B43C290(&v13, 2, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10E66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10E690(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20B514DE0(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20B43C5D8(&v13, 3, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10E7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10E7D8(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = a1[1];
    do
    {
      sub_20B513904(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20B43BA64(&v13, 5, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10E8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10E90C(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = a1[1];
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20B513D94(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20B43BDA4(&v13, 6, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10EA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10EA50(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20B51423C(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20B43C0EC(&v13, 7, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10EB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10EB98(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20B514B8C(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20B43C434(&v13, 8, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10ECBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10ECE0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20B5152B0(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20B43C77C(&v13, 11, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10EE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10EE28(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20B515504(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20B43C920(&v13, 12, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_20B10EF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10EF70(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20B10F064((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_20B42BA30(a2);
    sub_20B10F1B8(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20B10F050(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B10F064(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char v13[8];
  uint64_t v14;
  __int128 v15;
  void *__p;
  void *v17;
  uint64_t v18;
  __int128 v19;

  v13[0] = 7;
  v14 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_20B43C0EC(&v19, 7, (uint64_t)&__p);
  v15 = v19;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  sub_20B1103FC(a2, (uint64_t)v13);
  v5 = v14;
  v6 = v15;
  v15 = 0uLL;
  *(_BYTE *)a3 = v13[0];
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20B10F188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B10F19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10F1B8(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v5 = a1[3];
  v6 = *(unsigned __int8 *)(v5 + v2);
  v7 = v2 + 1;
  a1[6] = v7;
  *(_BYTE *)a2 = v6;
  v8 = v3 >= v7;
  v9 = v3 - v7;
  if (!v8)
    v9 = 0;
  if (v9 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v5 + v7);
  a1[6] += 8;
  sub_20B10F28C(v6, a2, (uint64_t)a1);
}

void sub_20B10F264(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B10F278(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B10F28C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B10F3B4(v3);
      break;
    case 1:
      sub_20B10F54C(v3);
      break;
    case 2:
      sub_20B10F6EC(v3);
      break;
    case 3:
      sub_20B10F890(v3);
      break;
    case 5:
      sub_20B10FA34(v3);
      break;
    case 6:
      sub_20B10FBCC(v3);
      break;
    case 7:
      sub_20B10FD6C(v3);
      break;
    case 8:
      sub_20B10FF10(v3);
      break;
    case 11:
      sub_20B1100B4(v3);
      break;
    case 12:
      sub_20B110258(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B10F3B4(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  char *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v18 = &v3[v2];
    bzero(v3, v2);
    v17 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43BC04(&v19, 0, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B10F518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10F54C(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v18 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43BF48(&v19, 1, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B10F6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10F6EC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43C290(&v19, 2, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B10F85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10F890(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43C5D8(&v19, 3, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B10FA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10FA34(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  char *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v18 = &v3[v2];
    bzero(v3, v2);
    v17 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43BA64(&v19, 5, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B10FB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10FBCC(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v18 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43BDA4(&v19, 6, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B10FD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10FD6C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43C0EC(&v19, 7, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B10FEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B10FF10(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43C434(&v19, 8, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B110080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1100B4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43C77C(&v19, 11, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B110224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B110258(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43C920(&v19, 12, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B1103C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1103FC(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v5 = a1[3];
  v6 = *(unsigned __int8 *)(v5 + v2);
  v7 = v2 + 1;
  a1[6] = v7;
  *(_BYTE *)a2 = v6;
  v8 = v3 >= v7;
  v9 = v3 - v7;
  if (!v8)
    v9 = 0;
  if (v9 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v5 + v7);
  a1[6] += 8;
  sub_20B1104D0(v6, a2, (uint64_t)a1);
}

void sub_20B1104A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1104BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1104D0(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B1105F8(v3);
      break;
    case 1:
      sub_20B110790(v3);
      break;
    case 2:
      sub_20B110930(v3);
      break;
    case 3:
      sub_20B110AD4(v3);
      break;
    case 5:
      sub_20B110C78(v3);
      break;
    case 6:
      sub_20B110E10(v3);
      break;
    case 7:
      sub_20B110FB0(v3);
      break;
    case 8:
      sub_20B111154(v3);
      break;
    case 11:
      sub_20B1112F8(v3);
      break;
    case 12:
      sub_20B11149C(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B1105F8(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  char *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v18 = &v3[v2];
    bzero(v3, v2);
    v17 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43BC04(&v19, 0, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11075C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B110790(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v18 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43BF48(&v19, 1, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B1108FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B110930(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43C290(&v19, 2, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B110AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B110AD4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43C5D8(&v19, 3, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B110C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B110C78(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  char *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v18 = &v3[v2];
    bzero(v3, v2);
    v17 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43BA64(&v19, 5, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B110DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B110E10(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v18 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43BDA4(&v19, 6, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B110F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B110FB0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43C0EC(&v19, 7, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B111120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B111154(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43C434(&v19, 8, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B1112C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1112F8(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43C77C(&v19, 11, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B111468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11149C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20B43C920(&v19, 12, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20B11160C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B111640(int *a1, _BYTE *a2, _BYTE *a3)
{
  unsigned int v6;
  char v7;
  _BYTE *v8;

  v6 = 2;
  (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_20B111A5C((uint64_t)&v7, a2, (uint64_t)a3);
    }
    else
    {
      v8 = a3;
      sub_20B103C34(a2, &v8);
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
      sub_20B111BD8(*a3, (uint64_t)a3, (uint64_t)a2);
    }
  }
  else
  {
    sub_20B111724(a1, a2, a3, v6);
  }
}

void sub_20B111724(int *a1, _BYTE *a2, _BYTE *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;
  _BYTE *v15;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_20B111860();
      sub_20B520518((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_20B111A5C((uint64_t)&v14, a2, (uint64_t)a3);
    return;
  }
  v9 = 0;
LABEL_13:
  v15 = a3;
  sub_20B103C34(a2, &v15);
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  sub_20B111BD8(*a3, (uint64_t)a3, (uint64_t)a2);
  if (v9)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20B111860()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546358D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546358D8))
    return &xmmword_2546358C0;
  v2 = (char *)sub_20B11193C();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_2546358C0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_2546358D0 = *((_QWORD *)v2 + 2);
    xmmword_2546358C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546358C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546358D8);
  return &xmmword_2546358C0;
}

void sub_20B111924(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546358D8);
  _Unwind_Resume(a1);
}

void *sub_20B11193C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546358F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546358F8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::NumbersSample]", qword_2546358E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546358E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546358F8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254635918);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254635918))
    return &unk_254635900;
  sub_20B531658((uint64_t)qword_2546358E0, (uint64_t)&unk_254635900);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254635900, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635918);
  return &unk_254635900;
}

void sub_20B111A2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635918);
  _Unwind_Resume(a1);
}

void sub_20B111A44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546358F8);
  _Unwind_Resume(a1);
}

void sub_20B111A5C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 v13[8];
  uint64_t v14;
  __int128 v15;
  void *__p;
  void *v17;
  uint64_t v18;
  __int128 v19;

  v13[0] = 7;
  v14 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_20B43C0EC(&v19, 7, (uint64_t)&__p);
  v15 = v19;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  __p = v13;
  sub_20B103C34(a2, (_BYTE **)&__p);
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v14);
  sub_20B1128B8(v13[0], (uint64_t)v13, (uint64_t)a2);
  v5 = v14;
  v6 = v15;
  v15 = 0uLL;
  *(_BYTE *)a3 = v13[0];
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20B111BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B111BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B111BD8(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B111D00(v3);
      break;
    case 1:
      sub_20B111E20(v3);
      break;
    case 2:
      sub_20B111F4C(v3);
      break;
    case 3:
      sub_20B11207C(v3);
      break;
    case 5:
      sub_20B1121AC(v3);
      break;
    case 6:
      sub_20B1122CC(v3);
      break;
    case 7:
      sub_20B1123F8(v3);
      break;
    case 8:
      sub_20B112528(v3);
      break;
    case 11:
      sub_20B112658(v3);
      break;
    case 12:
      sub_20B112788(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B111D00(_QWORD *a1)
{
  size_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v10;
  char *v11;
  __int128 v12;

  v2 = *(_QWORD *)(*a1 + 8);
  v10 = 0;
  v11 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v3 = (char *)operator new(v2);
    __p = v3;
    v11 = &v3[v2];
    bzero(v3, v2);
    v10 = &v3[v2];
    v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 80))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_20B43BC04(&v12, 0, (uint64_t)&__p);
  v5 = *a1;
  v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v12;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B111DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B111E20(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = 2 * v2;
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v13 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 96))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_20B43BF48(&v14, 1, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B111F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B111F4C(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 104))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_20B43C290(&v14, 2, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B112058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11207C(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 120))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_20B43C5D8(&v14, 3, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B112188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1121AC(_QWORD *a1)
{
  size_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v10;
  char *v11;
  __int128 v12;

  v2 = *(_QWORD *)(*a1 + 8);
  v10 = 0;
  v11 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(v2);
    __p = v3;
    v11 = &v3[v2];
    bzero(v3, v2);
    v10 = &v3[v2];
    v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 88))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_20B43BA64(&v12, 5, (uint64_t)&__p);
  v5 = *a1;
  v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v12;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1122A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1122CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = 2 * v2;
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v13 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 48))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_20B43BDA4(&v14, 6, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B1123D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1123F8(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 56))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_20B43C0EC(&v14, 7, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B112504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B112528(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 72))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_20B43C434(&v14, 8, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B112634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B112658(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 128))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_20B43C77C(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B112764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B112788(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 136))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_20B43C920(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B112894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1128B8(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B1129E0(v3);
      break;
    case 1:
      sub_20B112B00(v3);
      break;
    case 2:
      sub_20B112C2C(v3);
      break;
    case 3:
      sub_20B112D5C(v3);
      break;
    case 5:
      sub_20B112E8C(v3);
      break;
    case 6:
      sub_20B112FAC(v3);
      break;
    case 7:
      sub_20B1130D8(v3);
      break;
    case 8:
      sub_20B113208(v3);
      break;
    case 11:
      sub_20B113338(v3);
      break;
    case 12:
      sub_20B113468(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B1129E0(_QWORD *a1)
{
  size_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v10;
  char *v11;
  __int128 v12;

  v2 = *(_QWORD *)(*a1 + 8);
  v10 = 0;
  v11 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v3 = (char *)operator new(v2);
    __p = v3;
    v11 = &v3[v2];
    bzero(v3, v2);
    v10 = &v3[v2];
    v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 80))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_20B43BC04(&v12, 0, (uint64_t)&__p);
  v5 = *a1;
  v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v12;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B112ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B112B00(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = 2 * v2;
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v13 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 96))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_20B43BF48(&v14, 1, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B112C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B112C2C(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 104))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_20B43C290(&v14, 2, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B112D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B112D5C(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 120))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_20B43C5D8(&v14, 3, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B112E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B112E8C(_QWORD *a1)
{
  size_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v10;
  char *v11;
  __int128 v12;

  v2 = *(_QWORD *)(*a1 + 8);
  v10 = 0;
  v11 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v3 = (char *)operator new(v2);
    __p = v3;
    v11 = &v3[v2];
    bzero(v3, v2);
    v10 = &v3[v2];
    v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 88))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_20B43BA64(&v12, 5, (uint64_t)&__p);
  v5 = *a1;
  v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v12;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B112F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B112FAC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_20AF6E1D0();
    v3 = 2 * v2;
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v13 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 48))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_20B43BDA4(&v14, 6, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B1130B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1130D8(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 56))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_20B43C0EC(&v14, 7, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B1131E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B113208(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 72))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_20B43C434(&v14, 8, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B113314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B113338(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_20AF6E1D0();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 128))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_20B43C77C(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B113444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B113468(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_20AF6E1D0();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 136))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_20B43C920(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_20B113574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B113598@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24C3F64E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 176) = v7;
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_QWORD *)v4 = &off_24C3F6460;
  *a2 = &off_24C411E78;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20B113730(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20B11374C(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  void **v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  void **v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20B0FBCB0(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = (void **)*((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_20B506370(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = (void **)*((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20B4181DC(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "points2";
    *v11 = 7;
    if (!v16)
      *v10 = 1;
  }
  sub_20B50671C(a1);
  sub_20B1139AC(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20B113978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20B4181DC(v13, a13);
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B113998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1139AC(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  switch(a1)
  {
    case 0:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v5)
        v6 = 1;
      else
        v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v6)
      {
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
        {
          if (!v5)
          {
LABEL_86:
            v36 = 0;
            while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              v47 = 2;
              v48 = v36;
              sub_20B506898(a3, (size_t *)&v47);
              v36 += 2;
              if (!--v7)
                return;
            }
            goto LABEL_144;
          }
          do
          {
            v47 = 2;
            v48 = v5;
            sub_20B506898(a3, (size_t *)&v47);
            v5 += 2;
            --v7;
          }
          while (v7);
        }
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_144;
        }
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
          goto LABEL_86;
      }
      return;
    case 1:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 1);
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v8)
        v9 = 0;
      else
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
        if (!v10)
          return;
        if (v8)
        {
          do
          {
            v47 = 2;
            v48 = v8;
            sub_20B509034(a3, (uint64_t)&v47);
            v8 += 4;
            --v10;
          }
          while (v10);
          return;
        }
        goto LABEL_92;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v10 = *(_QWORD *)(a2 + 8);
      if (v10)
      {
LABEL_92:
        v37 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v37;
          sub_20B509034(a3, (uint64_t)&v47);
          v37 += 4;
          if (!--v10)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 2:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 2);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v11)
        v12 = 0;
      else
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v12)
      {
        v13 = *(_QWORD *)(a2 + 8);
        if (!v13)
          return;
        if (v11)
        {
          do
          {
            v47 = 2;
            v48 = v11;
            sub_20B5092A4(a3, (uint64_t)&v47);
            v11 += 8;
            --v13;
          }
          while (v13);
          return;
        }
        goto LABEL_98;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v13 = *(_QWORD *)(a2 + 8);
      if (v13)
      {
LABEL_98:
        v38 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v38;
          sub_20B5092A4(a3, (uint64_t)&v47);
          v38 += 8;
          if (!--v13)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 3:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 3);
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v14)
        v15 = 0;
      else
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v15)
      {
        v16 = *(_QWORD *)(a2 + 8);
        if (!v16)
          return;
        if (v14)
        {
          do
          {
            v47 = 2;
            v48 = v14;
            sub_20B509784(a3, (uint64_t)&v47);
            v14 += 16;
            --v16;
          }
          while (v16);
          return;
        }
        goto LABEL_104;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v16 = *(_QWORD *)(a2 + 8);
      if (v16)
      {
LABEL_104:
        v39 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v39;
          sub_20B509784(a3, (uint64_t)&v47);
          v39 += 16;
          if (!--v16)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 5:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 5);
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v17)
        v18 = 1;
      else
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v18)
      {
        v19 = *(_QWORD *)(a2 + 8);
        if (!v19)
          return;
        if (!v17)
          goto LABEL_110;
        do
        {
          v47 = 2;
          v48 = v17;
          sub_20B508DC4(a3, (size_t *)&v47);
          v17 += 2;
          --v19;
        }
        while (v19);
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_144;
        }
        v19 = *(_QWORD *)(a2 + 8);
        if (v19)
        {
LABEL_110:
          v41 = 0;
          while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            v47 = 2;
            v48 = v41;
            sub_20B508DC4(a3, (size_t *)&v47);
            v41 += 2;
            if (!--v19)
              return;
          }
          goto LABEL_144;
        }
      }
      return;
    case 6:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 6);
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v20)
        v21 = 0;
      else
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v21)
      {
        v22 = *(_QWORD *)(a2 + 8);
        if (!v22)
          return;
        if (v20)
        {
          do
          {
            v47 = 2;
            v48 = v20;
            sub_20B508EFC(a3, (uint64_t)&v47);
            v20 += 4;
            --v22;
          }
          while (v22);
          return;
        }
        goto LABEL_116;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v22 = *(_QWORD *)(a2 + 8);
      if (v22)
      {
LABEL_116:
        v42 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v42;
          sub_20B508EFC(a3, (uint64_t)&v47);
          v42 += 4;
          if (!--v22)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 7:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 7);
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v23)
        v24 = 0;
      else
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v24)
      {
        v25 = *(_QWORD *)(a2 + 8);
        if (!v25)
          return;
        if (v23)
        {
          do
          {
            v47 = 2;
            v48 = v23;
            sub_20B50916C(a3, (uint64_t)&v47);
            v23 += 8;
            --v25;
          }
          while (v25);
          return;
        }
        goto LABEL_122;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v25 = *(_QWORD *)(a2 + 8);
      if (v25)
      {
LABEL_122:
        v43 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v43;
          sub_20B50916C(a3, (uint64_t)&v47);
          v43 += 8;
          if (!--v25)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 8:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 8);
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v26)
        v27 = 0;
      else
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v27)
      {
        v28 = *(_QWORD *)(a2 + 8);
        if (!v28)
          return;
        if (v26)
        {
          do
          {
            v47 = 2;
            v48 = v26;
            sub_20B50964C(a3, (uint64_t)&v47);
            v26 += 16;
            --v28;
          }
          while (v28);
          return;
        }
        goto LABEL_128;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v28 = *(_QWORD *)(a2 + 8);
      if (v28)
      {
LABEL_128:
        v44 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v44;
          sub_20B50964C(a3, (uint64_t)&v47);
          v44 += 16;
          if (!--v28)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 11:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 11);
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v29)
        v30 = 0;
      else
        v30 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v30)
      {
        v31 = *(_QWORD *)(a2 + 8);
        if (!v31)
          return;
        if (v29)
        {
          do
          {
            v47 = 2;
            v48 = v29;
            sub_20B509D64(a3, (float **)&v47);
            v29 += 8;
            --v31;
          }
          while (v31);
          return;
        }
        goto LABEL_134;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v31 = *(_QWORD *)(a2 + 8);
      if (v31)
      {
LABEL_134:
        v45 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v45;
          sub_20B509D64(a3, (float **)&v47);
          v45 += 8;
          if (!--v31)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 12:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 12);
      v32 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v32)
        v33 = 0;
      else
        v33 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v33)
      {
        v34 = *(_QWORD *)(a2 + 8);
        if (!v34)
          return;
        if (v32)
        {
          do
          {
            v47 = 2;
            v48 = v32;
            sub_20B50A184(a3, &v47);
            v32 += 16;
            --v34;
          }
          while (v34);
          return;
        }
LABEL_140:
        v46 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v46;
          sub_20B50A184(a3, &v47);
          v46 += 16;
          if (!--v34)
            return;
        }
LABEL_144:
        abort();
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v34 = *(_QWORD *)(a2 + 8);
      if (v34)
        goto LABEL_140;
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B1143C4(uint64_t *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14[3];
  __int128 v15;

  v11 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v12 = *((_QWORD *)a2 + 2);
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = a1[3];
  if (*(_BYTE *)(v6 + 40))
  {
    v14[0] = (uint64_t *)(v6 + 16);
    sub_20B51DD74(v14, v11);
  }
  else
  {
    if ((char)v11 < 0)
    {
      LOBYTE(v14[0]) = -52;
      BYTE1(v14[0]) = v11;
    }
    else
    {
      LOBYTE(v14[0]) = v11;
    }
    std::ostream::write();
  }
  v7 = a1[3];
  if (*(_BYTE *)(v7 + 40))
  {
    v14[0] = (uint64_t *)(v7 + 16);
    sub_20B51F33C(v14, *((unint64_t *)&v11 + 1));
  }
  else
  {
    sub_20B51F644();
  }
  v15 = xmmword_24C40DDC8;
  v14[0] = (uint64_t *)&v11;
  v14[1] = a1;
  v14[2] = (uint64_t *)&v15;
  sub_20B114528(v11, v14);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20B114514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B114528(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 *v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(char **)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v9 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        for (*(_QWORD *)&v91 = v9 + 16; v7; --v7)
          result = (uint64_t)sub_20B51DD74((uint64_t **)&v91, *v6++);
      }
      else
      {
        for (; v7; --v7)
        {
          v78 = *v6;
          if (v78 < 0)
          {
            LOBYTE(v91) = -52;
            BYTE1(v91) = v78;
          }
          else
          {
            LOBYTE(v91) = *v6;
          }
          result = std::ostream::write();
          ++v6;
        }
      }
      break;
    case 1:
      v10 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v11 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v11 + 40);
      v12 = *(_QWORD *)(v11 + 48);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 2;
      if (v14
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v15 = a2[1];
      *(_QWORD *)&v91 = v13 >> 1;
      *((_QWORD *)&v91 + 1) = v12;
      result = sub_20B518234(*(_QWORD *)(v15 + 24), &v91);
      break;
    case 2:
      v16 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v17 = *(_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v17 + 40);
      v18 = *(unsigned int **)(v17 + 48);
      if (v18)
        v20 = 0;
      else
        v20 = v19 >= 4;
      if (v20)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v21 = v19 >> 2;
      v22 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v22 + 40))
      {
        *(_QWORD *)&v91 = v22 + 16;
        if (v19 >= 4)
        {
          v23 = 4 * v21;
          do
          {
            result = (uint64_t)sub_20B51E95C((uint64_t **)&v91, *v18++);
            v23 -= 4;
          }
          while (v23);
        }
      }
      else if (v19 >= 4)
      {
        v79 = v22 + 8;
        v80 = 4 * v21;
        do
        {
          result = sub_20B51EBD0((uint64_t)&v91, v79);
          ++v18;
          v80 -= 4;
        }
        while (v80);
      }
      break;
    case 3:
      v24 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(unint64_t **)(v25 + 48);
      if (v26)
        v28 = 0;
      else
        v28 = v27 >= 8;
      if (v28)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v29 = v27 >> 3;
      v30 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v30 + 40))
      {
        *(_QWORD *)&v91 = v30 + 16;
        if (v27 >= 8)
        {
          v31 = 8 * v29;
          do
          {
            result = (uint64_t)sub_20B51F33C((uint64_t **)&v91, *v26++);
            v31 -= 8;
          }
          while (v31);
        }
      }
      else if (v27 >= 8)
      {
        v81 = 8 * v29;
        do
        {
          ++v26;
          result = sub_20B51F644();
          v81 -= 8;
        }
        while (v81);
      }
      break;
    case 5:
      v32 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v33 = *(_QWORD *)(v32 + 16);
      v35 = *(_QWORD *)(v33 + 40);
      v34 = *(_BYTE **)(v33 + 48);
      if (v34)
        v36 = 1;
      else
        v36 = v35 == 0;
      if (!v36)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v37 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v37 + 40))
      {
        for (*(_QWORD *)&v91 = v37 + 16; v35; --v35)
          result = (uint64_t)sub_20B51DC2C((uint64_t **)&v91, (char)*v34++);
      }
      else
      {
        for (; v35; --v35)
        {
          v82 = (char)*v34;
          if (v82 > -33)
          {
            LOBYTE(v91) = *v34;
          }
          else
          {
            LOBYTE(v91) = -48;
            BYTE1(v91) = v82;
          }
          result = std::ostream::write();
          ++v34;
        }
      }
      break;
    case 6:
      v38 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(__int16 **)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 2;
      if (v42)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v43 = v41 >> 1;
      v44 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v44 + 40))
      {
        *(_QWORD *)&v91 = v44 + 16;
        if (v41 >= 2)
        {
          v45 = 2 * v43;
          do
          {
            result = (uint64_t)sub_20B51DEB8((uint64_t **)&v91, *v40++);
            v45 -= 2;
          }
          while (v45);
        }
      }
      else if (v41 >= 2)
      {
        v83 = 2 * v43;
        do
        {
          ++v40;
          result = sub_20B51E17C();
          v83 -= 2;
        }
        while (v83);
      }
      break;
    case 7:
      v46 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v47 = *(_QWORD *)(v46 + 16);
      v49 = *(_QWORD *)(v47 + 40);
      v48 = *(unsigned int **)(v47 + 48);
      if (v48)
        v50 = 0;
      else
        v50 = v49 >= 4;
      if (v50)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v51 = v49 >> 2;
      v52 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v52 + 40))
      {
        *(_QWORD *)&v91 = v52 + 16;
        if (v49 >= 4)
        {
          v53 = 4 * v51;
          do
          {
            result = (uint64_t)sub_20B51E444((uint64_t **)&v91, *v48++);
            v53 -= 4;
          }
          while (v53);
        }
      }
      else if (v49 >= 4)
      {
        v84 = 4 * v51;
        do
        {
          ++v48;
          result = sub_20B51E860();
          v84 -= 4;
        }
        while (v84);
      }
      break;
    case 8:
      v54 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v55 = *(_QWORD *)(v54 + 16);
      v57 = *(_QWORD *)(v55 + 40);
      v56 = *(unint64_t **)(v55 + 48);
      if (v56)
        v58 = 0;
      else
        v58 = v57 >= 8;
      if (v58)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v59 = v57 >> 3;
      v60 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v60 + 40))
      {
        *(_QWORD *)&v91 = v60 + 16;
        if (v57 >= 8)
        {
          v61 = 8 * v59;
          do
          {
            result = (uint64_t)sub_20B51ECC0((uint64_t **)&v91, *v56++);
            v61 -= 8;
          }
          while (v61);
        }
      }
      else if (v57 >= 8)
      {
        v85 = 8 * v59;
        do
        {
          ++v56;
          result = sub_20B51F1FC();
          v85 -= 8;
        }
        while (v85);
      }
      break;
    case 11:
      v62 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v63 = *(_QWORD *)(v62 + 16);
      v65 = *(_QWORD *)(v63 + 40);
      v64 = *(unsigned int **)(v63 + 48);
      if (v64)
        v66 = 0;
      else
        v66 = v65 >= 4;
      if (v66)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v67 = v65 >> 2;
      v68 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v68 + 40))
      {
        *(_QWORD *)&v91 = v68 + 16;
        if (v65 >= 4)
        {
          v69 = 4 * v67;
          do
          {
            result = (uint64_t)sub_20B51F73C((uint64_t)&v90, (uint64_t **)&v91, v64++);
            v69 -= 4;
          }
          while (v69);
        }
      }
      else if (v65 >= 4)
      {
        v86 = 4 * v67;
        do
        {
          v87 = *v64;
          LOBYTE(v91) = -54;
          *(_DWORD *)((char *)&v91 + 1) = bswap32(v87);
          result = std::ostream::write();
          ++v64;
          v86 -= 4;
        }
        while (v86);
      }
      break;
    case 12:
      v70 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v71 = *(_QWORD *)(v70 + 16);
      v73 = *(_QWORD *)(v71 + 40);
      v72 = *(unint64_t **)(v71 + 48);
      if (v72)
        v74 = 0;
      else
        v74 = v73 >= 8;
      if (v74)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
LABEL_144:
          abort();
      }
      v75 = v73 >> 3;
      v76 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v76 + 40))
      {
        *(_QWORD *)&v91 = v76 + 16;
        if (v73 >= 8)
        {
          v77 = 8 * v75;
          do
          {
            result = (uint64_t)sub_20B51F818((uint64_t)&v90, (uint64_t **)&v91, v72++);
            v77 -= 8;
          }
          while (v77);
        }
      }
      else if (v73 >= 8)
      {
        v88 = 8 * v75;
        do
        {
          v89 = *v72;
          LOBYTE(v91) = -53;
          *(_QWORD *)((char *)&v91 + 1) = bswap64(v89);
          result = std::ostream::write();
          ++v72;
          v88 -= 8;
        }
        while (v88);
      }
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

void sub_20B114D80(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  uint64_t v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20B0FDBDC(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = *((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_20B505B08(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = *((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20B416E08(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "points2";
    *v11 = 7;
    if (!v16)
      *v10 = 1;
  }
  sub_20B505FB0(a1);
  sub_20B114FE0(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20B114FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20B416E08(v13, a13);
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B114FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B114FE0(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  switch(a1)
  {
    case 0:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v5)
        v6 = 1;
      else
        v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v6)
      {
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
        {
          if (!v5)
          {
LABEL_86:
            v36 = 0;
            while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              v47 = 2;
              v48 = v36;
              sub_20B50612C(a3, (size_t *)&v47);
              v36 += 2;
              if (!--v7)
                return;
            }
            goto LABEL_144;
          }
          do
          {
            v47 = 2;
            v48 = v5;
            sub_20B50612C(a3, (size_t *)&v47);
            v5 += 2;
            --v7;
          }
          while (v7);
        }
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_144;
        }
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
          goto LABEL_86;
      }
      return;
    case 1:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 1);
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v8)
        v9 = 0;
      else
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
        if (!v10)
          return;
        if (v8)
        {
          do
          {
            v47 = 2;
            v48 = v8;
            sub_20B507218(a3, (uint64_t)&v47);
            v8 += 4;
            --v10;
          }
          while (v10);
          return;
        }
        goto LABEL_92;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v10 = *(_QWORD *)(a2 + 8);
      if (v10)
      {
LABEL_92:
        v37 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v37;
          sub_20B507218(a3, (uint64_t)&v47);
          v37 += 4;
          if (!--v10)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 2:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 2);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v11)
        v12 = 0;
      else
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v12)
      {
        v13 = *(_QWORD *)(a2 + 8);
        if (!v13)
          return;
        if (v11)
        {
          do
          {
            v47 = 2;
            v48 = v11;
            sub_20B507488(a3, (uint64_t)&v47);
            v11 += 8;
            --v13;
          }
          while (v13);
          return;
        }
        goto LABEL_98;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v13 = *(_QWORD *)(a2 + 8);
      if (v13)
      {
LABEL_98:
        v38 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v38;
          sub_20B507488(a3, (uint64_t)&v47);
          v38 += 8;
          if (!--v13)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 3:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 3);
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v14)
        v15 = 0;
      else
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v15)
      {
        v16 = *(_QWORD *)(a2 + 8);
        if (!v16)
          return;
        if (v14)
        {
          do
          {
            v47 = 2;
            v48 = v14;
            sub_20B5076F8(a3, (uint64_t)&v47);
            v14 += 16;
            --v16;
          }
          while (v16);
          return;
        }
        goto LABEL_104;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v16 = *(_QWORD *)(a2 + 8);
      if (v16)
      {
LABEL_104:
        v39 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v39;
          sub_20B5076F8(a3, (uint64_t)&v47);
          v39 += 16;
          if (!--v16)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 5:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 5);
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v17)
        v18 = 1;
      else
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v18)
      {
        v19 = *(_QWORD *)(a2 + 8);
        if (!v19)
          return;
        if (!v17)
          goto LABEL_110;
        do
        {
          v47 = 2;
          v48 = v17;
          sub_20B506FA8(a3, (size_t *)&v47);
          v17 += 2;
          --v19;
        }
        while (v19);
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_144;
        }
        v19 = *(_QWORD *)(a2 + 8);
        if (v19)
        {
LABEL_110:
          v41 = 0;
          while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            v47 = 2;
            v48 = v41;
            sub_20B506FA8(a3, (size_t *)&v47);
            v41 += 2;
            if (!--v19)
              return;
          }
          goto LABEL_144;
        }
      }
      return;
    case 6:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 6);
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v20)
        v21 = 0;
      else
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v21)
      {
        v22 = *(_QWORD *)(a2 + 8);
        if (!v22)
          return;
        if (v20)
        {
          do
          {
            v47 = 2;
            v48 = v20;
            sub_20B5070E0(a3, (uint64_t)&v47);
            v20 += 4;
            --v22;
          }
          while (v22);
          return;
        }
        goto LABEL_116;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v22 = *(_QWORD *)(a2 + 8);
      if (v22)
      {
LABEL_116:
        v42 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v42;
          sub_20B5070E0(a3, (uint64_t)&v47);
          v42 += 4;
          if (!--v22)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 7:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 7);
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v23)
        v24 = 0;
      else
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v24)
      {
        v25 = *(_QWORD *)(a2 + 8);
        if (!v25)
          return;
        if (v23)
        {
          do
          {
            v47 = 2;
            v48 = v23;
            sub_20B507350(a3, (uint64_t)&v47);
            v23 += 8;
            --v25;
          }
          while (v25);
          return;
        }
        goto LABEL_122;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v25 = *(_QWORD *)(a2 + 8);
      if (v25)
      {
LABEL_122:
        v43 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v43;
          sub_20B507350(a3, (uint64_t)&v47);
          v43 += 8;
          if (!--v25)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 8:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 8);
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v26)
        v27 = 0;
      else
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v27)
      {
        v28 = *(_QWORD *)(a2 + 8);
        if (!v28)
          return;
        if (v26)
        {
          do
          {
            v47 = 2;
            v48 = v26;
            sub_20B5075C0(a3, (uint64_t)&v47);
            v26 += 16;
            --v28;
          }
          while (v28);
          return;
        }
        goto LABEL_128;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v28 = *(_QWORD *)(a2 + 8);
      if (v28)
      {
LABEL_128:
        v44 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v44;
          sub_20B5075C0(a3, (uint64_t)&v47);
          v44 += 16;
          if (!--v28)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 11:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 11);
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v29)
        v30 = 0;
      else
        v30 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v30)
      {
        v31 = *(_QWORD *)(a2 + 8);
        if (!v31)
          return;
        if (v29)
        {
          do
          {
            v47 = 2;
            v48 = v29;
            sub_20B507CD8(a3, (float **)&v47);
            v29 += 8;
            --v31;
          }
          while (v31);
          return;
        }
        goto LABEL_134;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v31 = *(_QWORD *)(a2 + 8);
      if (v31)
      {
LABEL_134:
        v45 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v45;
          sub_20B507CD8(a3, (float **)&v47);
          v45 += 8;
          if (!--v31)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 12:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 12);
      v32 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v32)
        v33 = 0;
      else
        v33 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v33)
      {
        v34 = *(_QWORD *)(a2 + 8);
        if (!v34)
          return;
        if (v32)
        {
          do
          {
            v47 = 2;
            v48 = v32;
            sub_20B5080F8(a3, &v47);
            v32 += 16;
            --v34;
          }
          while (v34);
          return;
        }
LABEL_140:
        v46 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 2;
          v48 = v46;
          sub_20B5080F8(a3, &v47);
          v46 += 16;
          if (!--v34)
            return;
        }
LABEL_144:
        abort();
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v34 = *(_QWORD *)(a2 + 8);
      if (v34)
        goto LABEL_140;
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B1159F8(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD v13[3];
  __int128 v14;

  v10 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 2);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(v13[0]) = v10;
  sub_20B512EB0(a1, (unsigned __int8 *)v13);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v13[0]) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v6, (uint64_t)v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v14 = xmmword_24C40DDC8;
  v13[0] = &v10;
  v13[1] = a1;
  v13[2] = &v14;
  sub_20B115B18(v10, v13);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20B115B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B115B18(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v6 = *(_QWORD *)(v4 + 40);
      v5 = *(unsigned __int8 **)(v4 + 48);
      if (v5)
        v7 = 1;
      else
        v7 = v6 == 0;
      if (v7)
      {
        if (!v6)
          return;
        goto LABEL_65;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_65:
        v54 = a2[1];
        do
        {
          sub_20B512EB0(v54, v5++);
          --v6;
        }
        while (v6);
        return;
      }
      goto LABEL_112;
    case 1:
      v8 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v9 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(_QWORD *)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
      {
        if (v11 < 2)
          return;
        goto LABEL_69;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_69:
        v55 = a2[1];
        v56 = *(_QWORD *)(v55 + 40);
        v57 = v11 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v56)
          {
            v58 = *(_QWORD **)(v55 + 24);
            v89 = *(_BYTE *)(v55 + 32);
            sub_20AEC01D0(v58, (uint64_t)&v89, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          v56 = *(_QWORD *)(v55 + 40) + 1;
          *(_QWORD *)(v55 + 40) = v56;
          v57 -= 2;
        }
        while (v57);
        return;
      }
      goto LABEL_112;
    case 2:
      v13 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v14 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 48);
      if (v15)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
      {
        if (v16 < 4)
          return;
        goto LABEL_74;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_74:
        v59 = a2[1];
        v60 = *(_QWORD *)(v59 + 40);
        v61 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v60)
          {
            v62 = *(_QWORD **)(v59 + 24);
            v90 = *(_BYTE *)(v59 + 32);
            sub_20AEC01D0(v62, (uint64_t)&v90, 1);
          }
          v15 += 4;
          std::ostream::operator<<();
          v60 = *(_QWORD *)(v59 + 40) + 1;
          *(_QWORD *)(v59 + 40) = v60;
          v61 -= 4;
        }
        while (v61);
        return;
      }
      goto LABEL_112;
    case 3:
      v18 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v21 = *(_QWORD *)(v19 + 40);
      v20 = *(_QWORD *)(v19 + 48);
      if (v20)
        v22 = 0;
      else
        v22 = v21 >= 8;
      if (!v22)
      {
        if (v21 < 8)
          return;
        goto LABEL_79;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_79:
        v63 = a2[1];
        v64 = *(_QWORD *)(v63 + 40);
        v65 = v21 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v64)
          {
            v66 = *(_QWORD **)(v63 + 24);
            v91 = *(_BYTE *)(v63 + 32);
            sub_20AEC01D0(v66, (uint64_t)&v91, 1);
          }
          v20 += 8;
          std::ostream::operator<<();
          v64 = *(_QWORD *)(v63 + 40) + 1;
          *(_QWORD *)(v63 + 40) = v64;
          v65 -= 8;
        }
        while (v65);
        return;
      }
      goto LABEL_112;
    case 5:
      v23 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v24 = *(_QWORD *)(v23 + 16);
      v26 = *(_QWORD *)(v24 + 40);
      v25 = *(char **)(v24 + 48);
      if (v25)
        v27 = 1;
      else
        v27 = v26 == 0;
      if (v27)
      {
        if (!v26)
          return;
        goto LABEL_84;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_84:
        v68 = a2[1];
        do
        {
          sub_20B512CCC(v68, v25++);
          --v26;
        }
        while (v26);
        return;
      }
      goto LABEL_112;
    case 6:
      v28 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v29 = *(_QWORD *)(v28 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_QWORD *)(v29 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 2;
      if (!v32)
      {
        if (v31 < 2)
          return;
        goto LABEL_88;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_88:
        v69 = a2[1];
        v70 = *(_QWORD *)(v69 + 40);
        v71 = v31 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v70)
          {
            v72 = *(_QWORD **)(v69 + 24);
            v92 = *(_BYTE *)(v69 + 32);
            sub_20AEC01D0(v72, (uint64_t)&v92, 1);
          }
          v30 += 2;
          std::ostream::operator<<();
          v70 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v70;
          v71 -= 2;
        }
        while (v71);
        return;
      }
      goto LABEL_112;
    case 7:
      v33 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v34 = *(_QWORD *)(v33 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(_QWORD *)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 4;
      if (!v37)
      {
        if (v36 < 4)
          return;
        goto LABEL_93;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_93:
        v73 = a2[1];
        v74 = *(_QWORD *)(v73 + 40);
        v75 = v36 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v74)
          {
            v76 = *(_QWORD **)(v73 + 24);
            v93 = *(_BYTE *)(v73 + 32);
            sub_20AEC01D0(v76, (uint64_t)&v93, 1);
          }
          v35 += 4;
          std::ostream::operator<<();
          v74 = *(_QWORD *)(v73 + 40) + 1;
          *(_QWORD *)(v73 + 40) = v74;
          v75 -= 4;
        }
        while (v75);
        return;
      }
      goto LABEL_112;
    case 8:
      v38 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(_QWORD *)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 8;
      if (!v42)
      {
        if (v41 < 8)
          return;
        goto LABEL_98;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_98:
        v77 = a2[1];
        v78 = *(_QWORD *)(v77 + 40);
        v79 = v41 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v78)
          {
            v80 = *(_QWORD **)(v77 + 24);
            v94 = *(_BYTE *)(v77 + 32);
            sub_20AEC01D0(v80, (uint64_t)&v94, 1);
          }
          v40 += 8;
          std::ostream::operator<<();
          v78 = *(_QWORD *)(v77 + 40) + 1;
          *(_QWORD *)(v77 + 40) = v78;
          v79 -= 8;
        }
        while (v79);
        return;
      }
      goto LABEL_112;
    case 11:
      v43 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v44 = *(_QWORD *)(v43 + 16);
      v46 = *(_QWORD *)(v44 + 40);
      v45 = *(_QWORD *)(v44 + 48);
      if (v45)
        v47 = 0;
      else
        v47 = v46 >= 4;
      if (!v47)
      {
        if (v46 < 4)
          return;
        goto LABEL_103;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_103:
        v81 = a2[1];
        v82 = *(_QWORD *)(v81 + 40);
        v83 = v46 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v82)
          {
            v84 = *(_QWORD **)(v81 + 24);
            v95 = *(_BYTE *)(v81 + 32);
            sub_20AEC01D0(v84, (uint64_t)&v95, 1);
          }
          *(_QWORD *)(*(_QWORD *)(v81 + 24) + *(_QWORD *)(**(_QWORD **)(v81 + 24) - 24) + 16) = 9;
          v45 += 4;
          std::ostream::operator<<();
          v82 = *(_QWORD *)(v81 + 40) + 1;
          *(_QWORD *)(v81 + 40) = v82;
          v83 -= 4;
        }
        while (v83);
        return;
      }
      goto LABEL_112;
    case 12:
      v48 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v49 = *(_QWORD *)(v48 + 16);
      v51 = *(_QWORD *)(v49 + 40);
      v50 = *(_QWORD *)(v49 + 48);
      if (v50)
        v52 = 0;
      else
        v52 = v51 >= 8;
      if (v52)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
LABEL_112:
          abort();
        }
      }
      else if (v51 < 8)
      {
        return;
      }
      v85 = a2[1];
      v86 = *(_QWORD *)(v85 + 40);
      v87 = v51 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        if (v86)
        {
          v88 = *(_QWORD **)(v85 + 24);
          v96 = *(_BYTE *)(v85 + 32);
          sub_20AEC01D0(v88, (uint64_t)&v96, 1);
        }
        *(_QWORD *)(*(_QWORD *)(v85 + 24) + *(_QWORD *)(**(_QWORD **)(v85 + 24) - 24) + 16) = 17;
        v50 += 8;
        std::ostream::operator<<();
        v86 = *(_QWORD *)(v85 + 40) + 1;
        *(_QWORD *)(v85 + 40) = v86;
        v87 -= 8;
      }
      while (v87);
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B116234(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD __src[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(__src[0]) = v9;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)__src, (char *)__src + 1, 1);
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&v9 + 8, (char *)&v10, 8);
  v13 = xmmword_24C40DDC8;
  __src[0] = &v9;
  __src[1] = a1;
  __src[2] = &v13;
  sub_20B116358(v9, __src);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20B116344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20B116358(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  char *result;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v4 + 40);
      v6 = *(char **)(v4 + 48);
      if (v6)
        v7 = 1;
      else
        v7 = v5 == 0;
      if (!v7)
        goto LABEL_27;
      goto LABEL_7;
    case 1:
      v9 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(char **)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
        goto LABEL_37;
      goto LABEL_36;
    case 2:
      v14 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v15 + 40);
      v11 = *(char **)(v15 + 48);
      if (v11)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
        goto LABEL_59;
      goto LABEL_58;
    case 3:
      v18 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v19 + 40);
      v11 = *(char **)(v19 + 48);
      if (v11)
        v21 = 0;
      else
        v21 = v20 >= 8;
      if (!v21)
        goto LABEL_71;
      goto LABEL_70;
    case 5:
      v22 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v23 = *(_QWORD *)(v22 + 16);
      v5 = *(_QWORD *)(v23 + 40);
      v6 = *(char **)(v23 + 48);
      if (v6)
        v24 = 1;
      else
        v24 = v5 == 0;
      if (v24)
      {
LABEL_7:
        v8 = a2[1];
      }
      else
      {
LABEL_27:
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360)|| (v8 = a2[1], sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)))
        {
LABEL_77:
          abort();
        }
      }
      result = sub_20B42DB24(v8 + 24, *(char **)(v8 + 32), v6, &v6[v5], v5);
      break;
    case 6:
      v25 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v26 = *(_QWORD *)(v25 + 16);
      v12 = *(_QWORD *)(v26 + 40);
      v11 = *(char **)(v26 + 48);
      if (v11)
        v27 = 0;
      else
        v27 = v12 >= 2;
      if (!v27)
        goto LABEL_37;
LABEL_36:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_37:
      v28 = v12 & 0xFFFFFFFFFFFFFFFELL;
      v29 = a2[1];
      if (v11)
        v30 = 1;
      else
        v30 = v28 == 0;
      if (!v30)
        goto LABEL_75;
      goto LABEL_76;
    case 7:
      v31 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v32 = *(_QWORD *)(v31 + 16);
      v16 = *(_QWORD *)(v32 + 40);
      v11 = *(char **)(v32 + 48);
      if (v11)
        v33 = 0;
      else
        v33 = v16 >= 4;
      if (!v33)
        goto LABEL_59;
      goto LABEL_58;
    case 8:
      v34 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v35 = *(_QWORD *)(v34 + 16);
      v20 = *(_QWORD *)(v35 + 40);
      v11 = *(char **)(v35 + 48);
      if (v11)
        v36 = 0;
      else
        v36 = v20 >= 8;
      if (!v36)
        goto LABEL_71;
      goto LABEL_70;
    case 11:
      v37 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v38 = *(_QWORD *)(v37 + 16);
      v16 = *(_QWORD *)(v38 + 40);
      v11 = *(char **)(v38 + 48);
      if (v11)
        v39 = 0;
      else
        v39 = v16 >= 4;
      if (!v39)
        goto LABEL_59;
LABEL_58:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_59:
      v28 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      v29 = a2[1];
      if (v11)
        v40 = 1;
      else
        v40 = v28 == 0;
      if (!v40)
        goto LABEL_75;
      goto LABEL_76;
    case 12:
      v41 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v42 = *(_QWORD *)(v41 + 16);
      v20 = *(_QWORD *)(v42 + 40);
      v11 = *(char **)(v42 + 48);
      if (v11)
        v43 = 0;
      else
        v43 = v20 >= 8;
      if (!v43)
        goto LABEL_71;
LABEL_70:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_71:
      v28 = v20 & 0xFFFFFFFFFFFFFFF8;
      v29 = a2[1];
      if (v11)
        v44 = 1;
      else
        v44 = v28 == 0;
      if (v44)
        goto LABEL_76;
LABEL_75:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_76:
      result = sub_20B42DB24(v29 + 24, *(char **)(v29 + 32), v11, &v11[v28], v28);
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

void sub_20B1166E4(_BYTE *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BYTE *v12[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12[0] = &v9;
  sub_20B0FFA54(a1, v12);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 120))(a1, (char *)&v9 + 8);
  v13 = xmmword_24C40DDC8;
  v12[0] = &v9;
  v12[1] = a1;
  v12[2] = &v13;
  sub_20B1167E0(v9, v12);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20B1167CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20B1167E0(int a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int8 **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (v8)
      {
        if (!v7)
          return result;
        goto LABEL_65;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_65:
        v55 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 80))(v55, v6++);
          --v7;
        }
        while (v7);
        return result;
      }
      goto LABEL_104;
    case 1:
      v9 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
      {
        if (v12 < 2)
          return result;
        goto LABEL_69;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_69:
        v56 = a2[1];
        v57 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 96))(v56, v11);
          v11 += 2;
          v57 -= 2;
        }
        while (v57);
        return result;
      }
      goto LABEL_104;
    case 2:
      v14 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (!v18)
      {
        if (v17 < 4)
          return result;
        goto LABEL_73;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_73:
        v58 = a2[1];
        v59 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 104))(v58, v16);
          v16 += 4;
          v59 -= 4;
        }
        while (v59);
        return result;
      }
      goto LABEL_104;
    case 3:
      v19 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v20 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (!v23)
      {
        if (v22 < 8)
          return result;
        goto LABEL_77;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_77:
        v60 = a2[1];
        v61 = v22 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 120))(v60, v21);
          v21 += 8;
          v61 -= 8;
        }
        while (v61);
        return result;
      }
      goto LABEL_104;
    case 5:
      v24 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (v28)
      {
        if (!v27)
          return result;
        goto LABEL_81;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_81:
        v63 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 88))(v63, v26++);
          --v27;
        }
        while (v27);
        return result;
      }
      goto LABEL_104;
    case 6:
      v29 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v30 = *(_QWORD *)(v29 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (!v33)
      {
        if (v32 < 2)
          return result;
        goto LABEL_85;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_85:
        v64 = a2[1];
        v65 = v32 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 48))(v64, v31);
          v31 += 2;
          v65 -= 2;
        }
        while (v65);
        return result;
      }
      goto LABEL_104;
    case 7:
      v34 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v35 = *(_QWORD *)(v34 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (!v38)
      {
        if (v37 < 4)
          return result;
        goto LABEL_89;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_89:
        v66 = a2[1];
        v67 = v37 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 56))(v66, v36);
          v36 += 4;
          v67 -= 4;
        }
        while (v67);
        return result;
      }
      goto LABEL_104;
    case 8:
      v39 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v40 = *(_QWORD *)(v39 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (!v43)
      {
        if (v42 < 8)
          return result;
        goto LABEL_93;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_93:
        v68 = a2[1];
        v69 = v42 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 72))(v68, v41);
          v41 += 8;
          v69 -= 8;
        }
        while (v69);
        return result;
      }
      goto LABEL_104;
    case 11:
      v44 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v45 = *(_QWORD *)(v44 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (!v48)
      {
        if (v47 < 4)
          return result;
        goto LABEL_97;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_97:
        v70 = a2[1];
        v71 = v47 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 128))(v70, v46);
          v46 += 4;
          v71 -= 4;
        }
        while (v71);
        return result;
      }
      goto LABEL_104;
    case 12:
      v49 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v50 = *(_QWORD *)(v49 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
LABEL_104:
          abort();
        }
      }
      else if (v52 < 8)
      {
        return result;
      }
      v72 = a2[1];
      v73 = v52 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 136))(v72, v51);
        v51 += 8;
        v73 -= 8;
      }
      while (v73);
      return result;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B116DBC(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  if (a3 < 2)
  {
    sub_20B116EE0((uint64_t)&v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "value_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v11 = a2;
    sub_20B1002E8((uint64_t *)a1, &v11);
    v6 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v6)
      *(_BYTE *)(a1 + 104) = 1;
    v7 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v11 = 0;
    sub_20B4552C4(v7, &v11);
    *((_QWORD *)a2 + 1) = v11;
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "points2";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20B50AC94(a1);
    sub_20B1170F4(*a2, (uint64_t)a2, a1);
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
    v10 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v10 - 8);
    *(_QWORD *)(a1 + 48) = v9 - 8;
    *(_QWORD *)(a1 + 72) = v10 - 8;
  }
}

void sub_20B116EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22[8];
  void *v23;
  __int128 v24;
  void *__p;
  void *v26;
  uint64_t v27;
  __int128 v28;

  v22[0] = 7;
  v23 = 0;
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_20B43EC5C((uint64_t)&__p, &v28);
  v24 = v28;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v22;
  sub_20B1002E8((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_20B4552C4(v7, &__p);
  v23 = __p;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "points2";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50AC94(a2);
  sub_20B1188BC(v22[0], (uint64_t)v22, a2);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
  v11 = v22[0];
  v12 = v23;
  v13 = v24;
  if (*((_QWORD *)&v24 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v13;
  v16 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v13 + 1);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20B1170C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1170E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1170F4(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B11721C(v3);
      break;
    case 1:
      sub_20B117448(v3);
      break;
    case 2:
      sub_20B117680(v3);
      break;
    case 3:
      sub_20B1178BC(v3);
      break;
    case 5:
      sub_20B117B3C(v3);
      break;
    case 6:
      sub_20B117D68(v3);
      break;
    case 7:
      sub_20B117FA0(v3);
      break;
    case 8:
      sub_20B1181DC(v3);
      break;
    case 11:
      sub_20B11845C(v3);
      break;
    case 12:
      sub_20B11868C(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B11721C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50B064(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20B43BC04(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B1173E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B117448(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50BE9C(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20B43BF48(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B11761C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B117680(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50C014(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43C290(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B117858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1178BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AF4C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50E45C(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C5D8(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B117AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B117B3C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50BCBC(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20B43BA64(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B117D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B117D68(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50BDAC(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20B43BDA4(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B117F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B117FA0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50BF58(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43C0EC(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B118178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1181DC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AF4C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50E120(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C434(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B1183E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11845C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v15 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AF4C(v5);
      ++v5[14];
      sub_20B50C420(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43C77C(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B118628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11868C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v15 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AF4C(v5);
      ++v5[14];
      sub_20B50C528(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C920(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B118858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1188BC(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B1189E4(v3);
      break;
    case 1:
      sub_20B118C10(v3);
      break;
    case 2:
      sub_20B118E48(v3);
      break;
    case 3:
      sub_20B119084(v3);
      break;
    case 5:
      sub_20B119304(v3);
      break;
    case 6:
      sub_20B119530(v3);
      break;
    case 7:
      sub_20B119768(v3);
      break;
    case 8:
      sub_20B1199A4(v3);
      break;
    case 11:
      sub_20B119C24(v3);
      break;
    case 12:
      sub_20B119E54(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B1189E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50B064(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20B43BC04(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B118BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B118C10(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50BE9C(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20B43BF48(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B118DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B118E48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50C014(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43C290(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B119020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B119084(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AF4C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50E45C(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C5D8(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B119288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B119304(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50BCBC(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20B43BA64(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B1194CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B119530(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50BDAC(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20B43BDA4(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B119704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B119768(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50BF58(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43C0EC(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B119940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1199A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AF4C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50E120(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C434(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B119BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B119C24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v15 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AF4C(v5);
      ++v5[14];
      sub_20B50C420(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43C77C(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B119DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B119E54(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v15 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AF4C(v5);
      ++v5[14];
      sub_20B50C528(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C920(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B11A020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11A084(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;

  if (a4 < 2)
  {
    sub_20B11A178((uint64_t)v10, a2, (uint64_t)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20B0DD290(a2 + 2);
    LOBYTE(v10[0]) = 0;
    sub_20B51852C(a2[6], v10);
    *a3 = v10[0];
    sub_20B518BE4(a2[6], (_QWORD *)a3 + 1);
    v11 = xmmword_24C40DDC8;
    v7 = *a3;
    v10[0] = a3;
    v10[1] = a2;
    v10[2] = &v11;
    sub_20B11A30C(v7, v10);
    v8 = a2[4];
    v9 = *(_QWORD *)(v8 - 16) - (*(uint64_t (**)(uint64_t *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v8 - 8);
    if (v9)
      (*(void (**)(uint64_t *, uint64_t))(*v6 + 40))(a2 + 2, v9);
    a2[4] -= 16;
  }
}

void sub_20B11A178(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20B43EC5C((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_20B51852C(a2[6], &__p);
  v16 = __p;
  sub_20B518BE4(a2[6], &v17);
  v22 = xmmword_24C40DDC8;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_20B11B5A4(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B11A2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11A2F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B11A30C(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B11A3B4(a2);
      break;
    case 1:
      sub_20B11A570(a2);
      break;
    case 2:
      sub_20B11A73C(a2);
      break;
    case 3:
      sub_20B11A90C(a2);
      break;
    case 5:
      sub_20B11AADC(a2);
      break;
    case 6:
      sub_20B11AC98(a2);
      break;
    case 7:
      sub_20B11AE64(a2);
      break;
    case 8:
      sub_20B11B034(a2);
      break;
    case 11:
      sub_20B11B204(a2);
      break;
    case 12:
      sub_20B11B3D4(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B11A3B4(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20B51852C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BC04(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B11A510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11A570(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20B5186C0(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11A6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11A73C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B518854(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11A8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11A90C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518BE4(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11AA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11AADC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20B51847C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BA64(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B11AC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11AC98(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20B518610(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11AE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11AE64(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B5187A4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11AFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11B034(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518AFC(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11B1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11B204(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B518CC0(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11B374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11B3D4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518DF0(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11B544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11B5A4(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B11B64C(a2);
      break;
    case 1:
      sub_20B11B808(a2);
      break;
    case 2:
      sub_20B11B9D4(a2);
      break;
    case 3:
      sub_20B11BBA4(a2);
      break;
    case 5:
      sub_20B11BD74(a2);
      break;
    case 6:
      sub_20B11BF30(a2);
      break;
    case 7:
      sub_20B11C0FC(a2);
      break;
    case 8:
      sub_20B11C2CC(a2);
      break;
    case 11:
      sub_20B11C49C(a2);
      break;
    case 12:
      sub_20B11C66C(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B11B64C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20B51852C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BC04(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B11B7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11B808(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20B5186C0(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11B974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11B9D4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B518854(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11BB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11BBA4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518BE4(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11BD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11BD74(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20B51847C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BA64(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B11BED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11BF30(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20B518610(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11C09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11C0FC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B5187A4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11C26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11C2CC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518AFC(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11C43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11C49C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B518CC0(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11C60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11C66C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518DF0(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B11C7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11C83C(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  if (a3 < 2)
  {
    sub_20B11C960((uint64_t)&v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "value_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v11 = a2;
    sub_20B101898((uint64_t *)a1, &v11);
    v6 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v6)
      *(_BYTE *)(a1 + 104) = 1;
    v7 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v11 = 0;
    sub_20B454B2C(v7, &v11);
    *((_QWORD *)a2 + 1) = v11;
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "points2";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20B50A7A4(a1);
    sub_20B11CB74(*a2, (uint64_t)a2, a1);
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
    v10 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v10 - 8);
    *(_QWORD *)(a1 + 48) = v9 - 8;
    *(_QWORD *)(a1 + 72) = v10 - 8;
  }
}

void sub_20B11C960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22[8];
  void *v23;
  __int128 v24;
  void *__p;
  void *v26;
  uint64_t v27;
  __int128 v28;

  v22[0] = 7;
  v23 = 0;
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_20B43EC5C((uint64_t)&__p, &v28);
  v24 = v28;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v22;
  sub_20B101898((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_20B454B2C(v7, &__p);
  v23 = __p;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "points2";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50A7A4(a2);
  sub_20B11E33C(v22[0], (uint64_t)v22, a2);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
  v11 = v22[0];
  v12 = v23;
  v13 = v24;
  if (*((_QWORD *)&v24 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v13;
  v16 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v13 + 1);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20B11CB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11CB60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B11CB74(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B11CC9C(v3);
      break;
    case 1:
      sub_20B11CEC8(v3);
      break;
    case 2:
      sub_20B11D100(v3);
      break;
    case 3:
      sub_20B11D33C(v3);
      break;
    case 5:
      sub_20B11D5BC(v3);
      break;
    case 6:
      sub_20B11D7E8(v3);
      break;
    case 7:
      sub_20B11DA20(v3);
      break;
    case 8:
      sub_20B11DC5C(v3);
      break;
    case 11:
      sub_20B11DEDC(v3);
      break;
    case 12:
      sub_20B11E10C(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B11CC9C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50AB74(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20B43BC04(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B11CE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11CEC8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B300(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20B43BF48(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B11D09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11D100(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B478(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43C290(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B11D2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11D33C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AA5C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50D194(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C5D8(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B11D540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11D5BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50B120(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20B43BA64(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B11D784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11D7E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B210(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20B43BDA4(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B11D9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11DA20(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B3BC(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43C0EC(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B11DBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11DC5C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AA5C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50CAD8(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C434(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B11DE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11DEDC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v15 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AA5C(v5);
      ++v5[14];
      sub_20B50B8AC(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43C77C(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B11E0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11E10C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v15 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AA5C(v5);
      ++v5[14];
      sub_20B50B9DC(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C920(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B11E2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11E33C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B11E464(v3);
      break;
    case 1:
      sub_20B11E690(v3);
      break;
    case 2:
      sub_20B11E8C8(v3);
      break;
    case 3:
      sub_20B11EB04(v3);
      break;
    case 5:
      sub_20B11ED84(v3);
      break;
    case 6:
      sub_20B11EFB0(v3);
      break;
    case 7:
      sub_20B11F1E8(v3);
      break;
    case 8:
      sub_20B11F424(v3);
      break;
    case 11:
      sub_20B11F6A4(v3);
      break;
    case 12:
      sub_20B11F8D4(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B11E464(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50AB74(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20B43BC04(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B11E62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11E690(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B300(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20B43BF48(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B11E864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11E8C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B478(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43C290(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B11EAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11EB04(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AA5C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50D194(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C5D8(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B11ED08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11ED84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50B120(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20B43BA64(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B11EF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11EFB0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B210(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20B43BDA4(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B11F184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11F1E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B3BC(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43C0EC(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B11F3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11F424(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AA5C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50CAD8(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C434(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B11F628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11F6A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v15 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AA5C(v5);
      ++v5[14];
      sub_20B50B8AC(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43C77C(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B11F870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11F8D4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v15 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AA5C(v5);
      ++v5[14];
      sub_20B50B9DC(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C920(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B11FAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11FB04(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  char v8;
  char v9;
  __int128 v10;
  void *__p;
  uint64_t v12;
  __int128 *v13;

  LODWORD(__p) = 2;
  sub_20B514490(a2, &__p);
  v5 = __p;
  if (__p >= 2)
    v6 = 2;
  else
    v6 = __p;
  if (v6 < 2)
  {
    sub_20B11FC70((uint64_t)&__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    LOBYTE(__p) = 0;
    sub_20B513B4C(a2, &__p);
    *a3 = __p;
    sub_20B514DE0(a2, (_QWORD *)a3 + 1);
    v10 = xmmword_24C40DDC8;
    v7 = *a3;
    __p = a3;
    v12 = a2;
    v13 = &v10;
    sub_20B11FE04(v7, &__p);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (SHIBYTE(v13) < 0)
      {
        if (v12 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_21:
          v9 = 0;
          if (SHIBYTE(v13) < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (SHIBYTE(v13) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_21;
      }
      v9 = 1;
      if (SHIBYTE(v13) < 0)
LABEL_24:
        operator delete(__p);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v8 = 0;
      else
        v8 = v9;
    }
    while ((v8 & 1) != 0);
  }
}

void sub_20B11FC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20B43EC5C((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = (uint64_t)__p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_20B513B4C(a2, &__p);
  v16 = __p;
  sub_20B514DE0(a2, &v17);
  v22 = xmmword_24C40DDC8;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_20B121074(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B11FDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B11FDF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B11FE04(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B11FEAC(a2);
      break;
    case 1:
      sub_20B120064(a2);
      break;
    case 2:
      sub_20B12022C(a2);
      break;
    case 3:
      sub_20B1203F8(a2);
      break;
    case 5:
      sub_20B1205C4(a2);
      break;
    case 6:
      sub_20B12077C(a2);
      break;
    case 7:
      sub_20B120944(a2);
      break;
    case 8:
      sub_20B120B10(a2);
      break;
    case 11:
      sub_20B120CDC(a2);
      break;
    case 12:
      sub_20B120EA8(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B11FEAC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20B513B4C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BC04(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B120004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B120064(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20B513FE8(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1201CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12022C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B514490(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B120398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1203F8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B514DE0(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B120564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1205C4(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20B513904(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BA64(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B12071C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12077C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20B513D94(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1208E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B120944(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B51423C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B120AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B120B10(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B514B8C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B120C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B120CDC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B5152B0(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B120E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B120EA8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B515504(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B121014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B121074(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B12111C(a2);
      break;
    case 1:
      sub_20B1212D4(a2);
      break;
    case 2:
      sub_20B12149C(a2);
      break;
    case 3:
      sub_20B121668(a2);
      break;
    case 5:
      sub_20B121834(a2);
      break;
    case 6:
      sub_20B1219EC(a2);
      break;
    case 7:
      sub_20B121BB4(a2);
      break;
    case 8:
      sub_20B121D80(a2);
      break;
    case 11:
      sub_20B121F4C(a2);
      break;
    case 12:
      sub_20B122118(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B12111C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20B513B4C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BC04(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B121274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1212D4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20B513FE8(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B12143C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12149C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B514490(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B121608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B121668(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B514DE0(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1217D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B121834(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20B513904(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BA64(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B12198C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1219EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20B513D94(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B121B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B121BB4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B51423C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B121D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B121D80(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B514B8C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B121EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B121F4C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B5152B0(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1220B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B122118(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B515504(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B122284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1222E4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20B1223D8((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_20B42BA30(a2);
    sub_20B122538(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20B1223C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1223D8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16[8];
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;

  v16[0] = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20B43EC5C((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  sub_20B123C50(a2, (uint64_t)v16);
  v5 = v16[0];
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B122508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B12251C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B122538(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24C40DDC8;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_20B122638(v5, v10);
}

void sub_20B122610(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B122624(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B122638(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B1226E0(a2);
      break;
    case 1:
      sub_20B1228FC(a2);
      break;
    case 2:
      sub_20B122B20(a2);
      break;
    case 3:
      sub_20B122D48(a2);
      break;
    case 5:
      sub_20B122F70(a2);
      break;
    case 6:
      sub_20B12318C(a2);
      break;
    case 7:
      sub_20B1233B0(a2);
      break;
    case 8:
      sub_20B1235D8(a2);
      break;
    case 11:
      sub_20B123800(a2);
      break;
    case 12:
      sub_20B123A28(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B1226E0(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BC04(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B12288C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1228FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43BF48(v23, 1, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B122AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B122B20(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C290(v23, 2, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B122CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B122D48(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C5D8(v23, 3, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B122F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B122F70(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BA64(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B12311C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12318C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43BDA4(v23, 6, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B123340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1233B0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C0EC(v23, 7, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B123568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1235D8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C434(v23, 8, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B123790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B123800(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C77C(v23, 11, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1239B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B123A28(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C920(v23, 12, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B123BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B123C50(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24C40DDC8;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_20B123D50(v5, v10);
}

void sub_20B123D28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B123D3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B123D50(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B123DF8(a2);
      break;
    case 1:
      sub_20B124014(a2);
      break;
    case 2:
      sub_20B124238(a2);
      break;
    case 3:
      sub_20B124460(a2);
      break;
    case 5:
      sub_20B124688(a2);
      break;
    case 6:
      sub_20B1248A4(a2);
      break;
    case 7:
      sub_20B124AC8(a2);
      break;
    case 8:
      sub_20B124CF0(a2);
      break;
    case 11:
      sub_20B124F18(a2);
      break;
    case 12:
      sub_20B125140(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B123DF8(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BC04(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B123FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B124014(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43BF48(v23, 1, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1241C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B124238(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C290(v23, 2, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1243F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B124460(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C5D8(v23, 3, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B124618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B124688(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BA64(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B124834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1248A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43BDA4(v23, 6, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B124A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B124AC8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C0EC(v23, 7, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B124C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B124CF0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C434(v23, 8, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B124EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B124F18(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C77C(v23, 11, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1250D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B125140(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C920(v23, 12, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1252F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B125368(int *a1, _BYTE *a2, _BYTE *a3)
{
  int v6;
  _BYTE *v7[3];
  __int128 v8;

  LODWORD(v7[0]) = 2;
  (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v7);
  if (*a1 < 1)
  {
    if (LODWORD(v7[0]) < 2)
    {
      sub_20B125968((uint64_t)v7, a2, (uint64_t)a3);
    }
    else
    {
      v7[0] = a3;
      sub_20B103C34(a2, v7);
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
      v8 = xmmword_24C40DDC8;
      v6 = *a3;
      v7[0] = a3;
      v7[1] = a2;
      v7[2] = &v8;
      sub_20B125B00(v6, v7);
    }
  }
  else
  {
    sub_20B125464(a1, a2, a3, v7[0]);
  }
}

void sub_20B125464(int *a1, _BYTE *a2, _BYTE *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  __int128 *v13;
  _BYTE *v14[3];
  __int128 v15;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    LODWORD(v14[0]) = 2;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v14);
    if (LODWORD(v14[0]) >= 3)
    {
      v12 = v14[0];
      v13 = sub_20B1255B8();
      sub_20B520518((std::string *)v13, v12, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_20B125968((uint64_t)v14, a2, (uint64_t)a3);
    return;
  }
  v9 = 0;
LABEL_13:
  v14[0] = a3;
  sub_20B103C34(a2, v14);
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  v15 = xmmword_24C40DDC8;
  v11 = *a3;
  v14[0] = a3;
  v14[1] = a2;
  v14[2] = &v15;
  sub_20B125B00(v11, v14);
  if (v9)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20B1255B8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635938);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635938))
    return &xmmword_254635920;
  v2 = sub_20B125694();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254635920, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254635930 = v2->__r_.__value_.__r.__words[2];
    xmmword_254635920 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635920, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635938);
  return &xmmword_254635920;
}

void sub_20B12567C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635938);
  _Unwind_Resume(a1);
}

std::string *sub_20B125694()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635958);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635958))
    return &stru_254635940;
  sub_20B125784((uint64_t)__p);
  sub_20AF6D7B0((char *)__p, &stru_254635940);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254635940, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635958);
  return &stru_254635940;
}

void sub_20B125744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254635958);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254635958);
  _Unwind_Resume(a1);
}

void sub_20B125784(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635978);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635978))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::PointsSample<2>]", qword_254635960);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635960, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635978);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635998);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635998))
  {
    v5 = sub_20AED4780(qword_254635960, "<", 0);
    sub_20AED467C(qword_254635960, 0, v5, qword_254635980);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635980, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635998);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546359B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546359B8))
  {
    sub_20B531658((uint64_t)qword_254635980, (uint64_t)&xmmword_2546359A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546359A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546359B8);
  }
  if (byte_2546359B7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546359A0, *((unint64_t *)&xmmword_2546359A0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546359A0;
    *(_QWORD *)(a1 + 16) = unk_2546359B0;
  }
}

void sub_20B125920(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546359B8);
  _Unwind_Resume(a1);
}

void sub_20B125938(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635998);
  _Unwind_Resume(a1);
}

void sub_20B125950(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635978);
  _Unwind_Resume(a1);
}

void sub_20B125968(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20B43EC5C((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  __p = &v16;
  sub_20B103C34(a2, (_BYTE **)&__p);
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v17);
  v22 = xmmword_24C40DDC8;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_20B126CC8(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B125AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B125AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B125B00(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B125BA8(a2);
      break;
    case 1:
      sub_20B125D4C(a2);
      break;
    case 2:
      sub_20B125F04(a2);
      break;
    case 3:
      sub_20B1260C0(a2);
      break;
    case 5:
      sub_20B12627C(a2);
      break;
    case 6:
      sub_20B126420(a2);
      break;
    case 7:
      sub_20B1265D8(a2);
      break;
    case 8:
      sub_20B126794(a2);
      break;
    case 11:
      sub_20B126950(a2);
      break;
    case 12:
      sub_20B126B0C(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B125BA8(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20B43BC04(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B125CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B125D4C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B125EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B125F04(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B126060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1260C0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B12621C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12627C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20B43BA64(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1263C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B126420(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B126578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1265D8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B126734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B126794(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1268F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B126950(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B126AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B126B0C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B126C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B126CC8(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B126D70(a2);
      break;
    case 1:
      sub_20B126F14(a2);
      break;
    case 2:
      sub_20B1270CC(a2);
      break;
    case 3:
      sub_20B127288(a2);
      break;
    case 5:
      sub_20B127444(a2);
      break;
    case 6:
      sub_20B1275E8(a2);
      break;
    case 7:
      sub_20B1277A0(a2);
      break;
    case 8:
      sub_20B12795C(a2);
      break;
    case 11:
      sub_20B127B18(a2);
      break;
    case 12:
      sub_20B127CD4(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B126D70(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20B43BC04(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B126EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B126F14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B12706C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1270CC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B127228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B127288(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1273E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B127444(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20B43BA64(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B127588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1275E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B127740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1277A0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1278FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12795C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B127AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B127B18(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B127C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B127CD4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B127E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B127E90@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24C3F65B0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 176) = v7;
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_QWORD *)v4 = &off_24C3F6530;
  *a2 = &off_24C411E78;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20B128028(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20B128044(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  void **v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  void **v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20B0FBCB0(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = (void **)*((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_20B506370(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = (void **)*((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20B4181DC(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "points3";
    *v11 = 7;
    if (!v16)
      *v10 = 1;
  }
  sub_20B50671C(a1);
  sub_20B1282A4(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20B128270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20B4181DC(v13, a13);
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B128290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1282A4(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  switch(a1)
  {
    case 0:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v5)
        v6 = 1;
      else
        v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v6)
      {
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
        {
          if (!v5)
          {
LABEL_86:
            v36 = 0;
            while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              v47 = 3;
              v48 = v36;
              sub_20B506898(a3, (size_t *)&v47);
              v36 += 3;
              if (!--v7)
                return;
            }
            goto LABEL_144;
          }
          do
          {
            v47 = 3;
            v48 = v5;
            sub_20B506898(a3, (size_t *)&v47);
            v5 += 3;
            --v7;
          }
          while (v7);
        }
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_144;
        }
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
          goto LABEL_86;
      }
      return;
    case 1:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 1);
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v8)
        v9 = 0;
      else
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
        if (!v10)
          return;
        if (v8)
        {
          do
          {
            v47 = 3;
            v48 = v8;
            sub_20B509034(a3, (uint64_t)&v47);
            v8 += 6;
            --v10;
          }
          while (v10);
          return;
        }
        goto LABEL_92;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v10 = *(_QWORD *)(a2 + 8);
      if (v10)
      {
LABEL_92:
        v37 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v37;
          sub_20B509034(a3, (uint64_t)&v47);
          v37 += 6;
          if (!--v10)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 2:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 2);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v11)
        v12 = 0;
      else
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v12)
      {
        v13 = *(_QWORD *)(a2 + 8);
        if (!v13)
          return;
        if (v11)
        {
          do
          {
            v47 = 3;
            v48 = v11;
            sub_20B5092A4(a3, (uint64_t)&v47);
            v11 += 12;
            --v13;
          }
          while (v13);
          return;
        }
        goto LABEL_98;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v13 = *(_QWORD *)(a2 + 8);
      if (v13)
      {
LABEL_98:
        v38 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v38;
          sub_20B5092A4(a3, (uint64_t)&v47);
          v38 += 12;
          if (!--v13)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 3:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 3);
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v14)
        v15 = 0;
      else
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v15)
      {
        v16 = *(_QWORD *)(a2 + 8);
        if (!v16)
          return;
        if (v14)
        {
          do
          {
            v47 = 3;
            v48 = v14;
            sub_20B509784(a3, (uint64_t)&v47);
            v14 += 24;
            --v16;
          }
          while (v16);
          return;
        }
        goto LABEL_104;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v16 = *(_QWORD *)(a2 + 8);
      if (v16)
      {
LABEL_104:
        v39 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v39;
          sub_20B509784(a3, (uint64_t)&v47);
          v39 += 24;
          if (!--v16)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 5:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 5);
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v17)
        v18 = 1;
      else
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v18)
      {
        v19 = *(_QWORD *)(a2 + 8);
        if (!v19)
          return;
        if (!v17)
          goto LABEL_110;
        do
        {
          v47 = 3;
          v48 = v17;
          sub_20B508DC4(a3, (size_t *)&v47);
          v17 += 3;
          --v19;
        }
        while (v19);
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_144;
        }
        v19 = *(_QWORD *)(a2 + 8);
        if (v19)
        {
LABEL_110:
          v41 = 0;
          while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            v47 = 3;
            v48 = v41;
            sub_20B508DC4(a3, (size_t *)&v47);
            v41 += 3;
            if (!--v19)
              return;
          }
          goto LABEL_144;
        }
      }
      return;
    case 6:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 6);
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v20)
        v21 = 0;
      else
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v21)
      {
        v22 = *(_QWORD *)(a2 + 8);
        if (!v22)
          return;
        if (v20)
        {
          do
          {
            v47 = 3;
            v48 = v20;
            sub_20B508EFC(a3, (uint64_t)&v47);
            v20 += 6;
            --v22;
          }
          while (v22);
          return;
        }
        goto LABEL_116;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v22 = *(_QWORD *)(a2 + 8);
      if (v22)
      {
LABEL_116:
        v42 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v42;
          sub_20B508EFC(a3, (uint64_t)&v47);
          v42 += 6;
          if (!--v22)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 7:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 7);
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v23)
        v24 = 0;
      else
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v24)
      {
        v25 = *(_QWORD *)(a2 + 8);
        if (!v25)
          return;
        if (v23)
        {
          do
          {
            v47 = 3;
            v48 = v23;
            sub_20B50916C(a3, (uint64_t)&v47);
            v23 += 12;
            --v25;
          }
          while (v25);
          return;
        }
        goto LABEL_122;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v25 = *(_QWORD *)(a2 + 8);
      if (v25)
      {
LABEL_122:
        v43 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v43;
          sub_20B50916C(a3, (uint64_t)&v47);
          v43 += 12;
          if (!--v25)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 8:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 8);
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v26)
        v27 = 0;
      else
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v27)
      {
        v28 = *(_QWORD *)(a2 + 8);
        if (!v28)
          return;
        if (v26)
        {
          do
          {
            v47 = 3;
            v48 = v26;
            sub_20B50964C(a3, (uint64_t)&v47);
            v26 += 24;
            --v28;
          }
          while (v28);
          return;
        }
        goto LABEL_128;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v28 = *(_QWORD *)(a2 + 8);
      if (v28)
      {
LABEL_128:
        v44 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v44;
          sub_20B50964C(a3, (uint64_t)&v47);
          v44 += 24;
          if (!--v28)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 11:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 11);
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v29)
        v30 = 0;
      else
        v30 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v30)
      {
        v31 = *(_QWORD *)(a2 + 8);
        if (!v31)
          return;
        if (v29)
        {
          do
          {
            v47 = 3;
            v48 = v29;
            sub_20B509D64(a3, (float **)&v47);
            v29 += 12;
            --v31;
          }
          while (v31);
          return;
        }
        goto LABEL_134;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v31 = *(_QWORD *)(a2 + 8);
      if (v31)
      {
LABEL_134:
        v45 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v45;
          sub_20B509D64(a3, (float **)&v47);
          v45 += 12;
          if (!--v31)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 12:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 12);
      v32 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v32)
        v33 = 0;
      else
        v33 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v33)
      {
        v34 = *(_QWORD *)(a2 + 8);
        if (!v34)
          return;
        if (v32)
        {
          do
          {
            v47 = 3;
            v48 = v32;
            sub_20B50A184(a3, &v47);
            v32 += 24;
            --v34;
          }
          while (v34);
          return;
        }
LABEL_140:
        v46 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v46;
          sub_20B50A184(a3, &v47);
          v46 += 24;
          if (!--v34)
            return;
        }
LABEL_144:
        abort();
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v34 = *(_QWORD *)(a2 + 8);
      if (v34)
        goto LABEL_140;
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B128CBC(uint64_t *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14[3];
  __int128 v15;

  v11 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v12 = *((_QWORD *)a2 + 2);
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = a1[3];
  if (*(_BYTE *)(v6 + 40))
  {
    v14[0] = (uint64_t *)(v6 + 16);
    sub_20B51DD74(v14, v11);
  }
  else
  {
    if ((char)v11 < 0)
    {
      LOBYTE(v14[0]) = -52;
      BYTE1(v14[0]) = v11;
    }
    else
    {
      LOBYTE(v14[0]) = v11;
    }
    std::ostream::write();
  }
  v7 = a1[3];
  if (*(_BYTE *)(v7 + 40))
  {
    v14[0] = (uint64_t *)(v7 + 16);
    sub_20B51F33C(v14, *((unint64_t *)&v11 + 1));
  }
  else
  {
    sub_20B51F644();
  }
  v15 = xmmword_24C40DDD8;
  v14[0] = (uint64_t *)&v11;
  v14[1] = a1;
  v14[2] = (uint64_t *)&v15;
  sub_20B128E20(v11, v14);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20B128E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B128E20(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 *v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(char **)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v9 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        for (*(_QWORD *)&v91 = v9 + 16; v7; --v7)
          result = (uint64_t)sub_20B51DD74((uint64_t **)&v91, *v6++);
      }
      else
      {
        for (; v7; --v7)
        {
          v78 = *v6;
          if (v78 < 0)
          {
            LOBYTE(v91) = -52;
            BYTE1(v91) = v78;
          }
          else
          {
            LOBYTE(v91) = *v6;
          }
          result = std::ostream::write();
          ++v6;
        }
      }
      break;
    case 1:
      v10 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v11 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v11 + 40);
      v12 = *(_QWORD *)(v11 + 48);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 2;
      if (v14
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v15 = a2[1];
      *(_QWORD *)&v91 = v13 >> 1;
      *((_QWORD *)&v91 + 1) = v12;
      result = sub_20B518234(*(_QWORD *)(v15 + 24), &v91);
      break;
    case 2:
      v16 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v17 = *(_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v17 + 40);
      v18 = *(unsigned int **)(v17 + 48);
      if (v18)
        v20 = 0;
      else
        v20 = v19 >= 4;
      if (v20)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v21 = v19 >> 2;
      v22 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v22 + 40))
      {
        *(_QWORD *)&v91 = v22 + 16;
        if (v19 >= 4)
        {
          v23 = 4 * v21;
          do
          {
            result = (uint64_t)sub_20B51E95C((uint64_t **)&v91, *v18++);
            v23 -= 4;
          }
          while (v23);
        }
      }
      else if (v19 >= 4)
      {
        v79 = v22 + 8;
        v80 = 4 * v21;
        do
        {
          result = sub_20B51EBD0((uint64_t)&v91, v79);
          ++v18;
          v80 -= 4;
        }
        while (v80);
      }
      break;
    case 3:
      v24 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(unint64_t **)(v25 + 48);
      if (v26)
        v28 = 0;
      else
        v28 = v27 >= 8;
      if (v28)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v29 = v27 >> 3;
      v30 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v30 + 40))
      {
        *(_QWORD *)&v91 = v30 + 16;
        if (v27 >= 8)
        {
          v31 = 8 * v29;
          do
          {
            result = (uint64_t)sub_20B51F33C((uint64_t **)&v91, *v26++);
            v31 -= 8;
          }
          while (v31);
        }
      }
      else if (v27 >= 8)
      {
        v81 = 8 * v29;
        do
        {
          ++v26;
          result = sub_20B51F644();
          v81 -= 8;
        }
        while (v81);
      }
      break;
    case 5:
      v32 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v33 = *(_QWORD *)(v32 + 16);
      v35 = *(_QWORD *)(v33 + 40);
      v34 = *(_BYTE **)(v33 + 48);
      if (v34)
        v36 = 1;
      else
        v36 = v35 == 0;
      if (!v36)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v37 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v37 + 40))
      {
        for (*(_QWORD *)&v91 = v37 + 16; v35; --v35)
          result = (uint64_t)sub_20B51DC2C((uint64_t **)&v91, (char)*v34++);
      }
      else
      {
        for (; v35; --v35)
        {
          v82 = (char)*v34;
          if (v82 > -33)
          {
            LOBYTE(v91) = *v34;
          }
          else
          {
            LOBYTE(v91) = -48;
            BYTE1(v91) = v82;
          }
          result = std::ostream::write();
          ++v34;
        }
      }
      break;
    case 6:
      v38 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(__int16 **)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 2;
      if (v42)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v43 = v41 >> 1;
      v44 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v44 + 40))
      {
        *(_QWORD *)&v91 = v44 + 16;
        if (v41 >= 2)
        {
          v45 = 2 * v43;
          do
          {
            result = (uint64_t)sub_20B51DEB8((uint64_t **)&v91, *v40++);
            v45 -= 2;
          }
          while (v45);
        }
      }
      else if (v41 >= 2)
      {
        v83 = 2 * v43;
        do
        {
          ++v40;
          result = sub_20B51E17C();
          v83 -= 2;
        }
        while (v83);
      }
      break;
    case 7:
      v46 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v47 = *(_QWORD *)(v46 + 16);
      v49 = *(_QWORD *)(v47 + 40);
      v48 = *(unsigned int **)(v47 + 48);
      if (v48)
        v50 = 0;
      else
        v50 = v49 >= 4;
      if (v50)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v51 = v49 >> 2;
      v52 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v52 + 40))
      {
        *(_QWORD *)&v91 = v52 + 16;
        if (v49 >= 4)
        {
          v53 = 4 * v51;
          do
          {
            result = (uint64_t)sub_20B51E444((uint64_t **)&v91, *v48++);
            v53 -= 4;
          }
          while (v53);
        }
      }
      else if (v49 >= 4)
      {
        v84 = 4 * v51;
        do
        {
          ++v48;
          result = sub_20B51E860();
          v84 -= 4;
        }
        while (v84);
      }
      break;
    case 8:
      v54 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v55 = *(_QWORD *)(v54 + 16);
      v57 = *(_QWORD *)(v55 + 40);
      v56 = *(unint64_t **)(v55 + 48);
      if (v56)
        v58 = 0;
      else
        v58 = v57 >= 8;
      if (v58)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v59 = v57 >> 3;
      v60 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v60 + 40))
      {
        *(_QWORD *)&v91 = v60 + 16;
        if (v57 >= 8)
        {
          v61 = 8 * v59;
          do
          {
            result = (uint64_t)sub_20B51ECC0((uint64_t **)&v91, *v56++);
            v61 -= 8;
          }
          while (v61);
        }
      }
      else if (v57 >= 8)
      {
        v85 = 8 * v59;
        do
        {
          ++v56;
          result = sub_20B51F1FC();
          v85 -= 8;
        }
        while (v85);
      }
      break;
    case 11:
      v62 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v63 = *(_QWORD *)(v62 + 16);
      v65 = *(_QWORD *)(v63 + 40);
      v64 = *(unsigned int **)(v63 + 48);
      if (v64)
        v66 = 0;
      else
        v66 = v65 >= 4;
      if (v66)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v67 = v65 >> 2;
      v68 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v68 + 40))
      {
        *(_QWORD *)&v91 = v68 + 16;
        if (v65 >= 4)
        {
          v69 = 4 * v67;
          do
          {
            result = (uint64_t)sub_20B51F73C((uint64_t)&v90, (uint64_t **)&v91, v64++);
            v69 -= 4;
          }
          while (v69);
        }
      }
      else if (v65 >= 4)
      {
        v86 = 4 * v67;
        do
        {
          v87 = *v64;
          LOBYTE(v91) = -54;
          *(_DWORD *)((char *)&v91 + 1) = bswap32(v87);
          result = std::ostream::write();
          ++v64;
          v86 -= 4;
        }
        while (v86);
      }
      break;
    case 12:
      v70 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v71 = *(_QWORD *)(v70 + 16);
      v73 = *(_QWORD *)(v71 + 40);
      v72 = *(unint64_t **)(v71 + 48);
      if (v72)
        v74 = 0;
      else
        v74 = v73 >= 8;
      if (v74)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
LABEL_144:
          abort();
      }
      v75 = v73 >> 3;
      v76 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v76 + 40))
      {
        *(_QWORD *)&v91 = v76 + 16;
        if (v73 >= 8)
        {
          v77 = 8 * v75;
          do
          {
            result = (uint64_t)sub_20B51F818((uint64_t)&v90, (uint64_t **)&v91, v72++);
            v77 -= 8;
          }
          while (v77);
        }
      }
      else if (v73 >= 8)
      {
        v88 = 8 * v75;
        do
        {
          v89 = *v72;
          LOBYTE(v91) = -53;
          *(_QWORD *)((char *)&v91 + 1) = bswap64(v89);
          result = std::ostream::write();
          ++v72;
          v88 -= 8;
        }
        while (v88);
      }
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

void sub_20B129678(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  uint64_t v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20B0FDBDC(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = *((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_20B505B08(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = *((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20B416E08(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "points3";
    *v11 = 7;
    if (!v16)
      *v10 = 1;
  }
  sub_20B505FB0(a1);
  sub_20B1298D8(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20B1298A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20B416E08(v13, a13);
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1298C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1298D8(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  switch(a1)
  {
    case 0:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v5)
        v6 = 1;
      else
        v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v6)
      {
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
        {
          if (!v5)
          {
LABEL_86:
            v36 = 0;
            while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              v47 = 3;
              v48 = v36;
              sub_20B50612C(a3, (size_t *)&v47);
              v36 += 3;
              if (!--v7)
                return;
            }
            goto LABEL_144;
          }
          do
          {
            v47 = 3;
            v48 = v5;
            sub_20B50612C(a3, (size_t *)&v47);
            v5 += 3;
            --v7;
          }
          while (v7);
        }
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_144;
        }
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
          goto LABEL_86;
      }
      return;
    case 1:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 1);
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v8)
        v9 = 0;
      else
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
        if (!v10)
          return;
        if (v8)
        {
          do
          {
            v47 = 3;
            v48 = v8;
            sub_20B507218(a3, (uint64_t)&v47);
            v8 += 6;
            --v10;
          }
          while (v10);
          return;
        }
        goto LABEL_92;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v10 = *(_QWORD *)(a2 + 8);
      if (v10)
      {
LABEL_92:
        v37 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v37;
          sub_20B507218(a3, (uint64_t)&v47);
          v37 += 6;
          if (!--v10)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 2:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 2);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v11)
        v12 = 0;
      else
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v12)
      {
        v13 = *(_QWORD *)(a2 + 8);
        if (!v13)
          return;
        if (v11)
        {
          do
          {
            v47 = 3;
            v48 = v11;
            sub_20B507488(a3, (uint64_t)&v47);
            v11 += 12;
            --v13;
          }
          while (v13);
          return;
        }
        goto LABEL_98;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v13 = *(_QWORD *)(a2 + 8);
      if (v13)
      {
LABEL_98:
        v38 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v38;
          sub_20B507488(a3, (uint64_t)&v47);
          v38 += 12;
          if (!--v13)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 3:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 3);
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v14)
        v15 = 0;
      else
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v15)
      {
        v16 = *(_QWORD *)(a2 + 8);
        if (!v16)
          return;
        if (v14)
        {
          do
          {
            v47 = 3;
            v48 = v14;
            sub_20B5076F8(a3, (uint64_t)&v47);
            v14 += 24;
            --v16;
          }
          while (v16);
          return;
        }
        goto LABEL_104;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v16 = *(_QWORD *)(a2 + 8);
      if (v16)
      {
LABEL_104:
        v39 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v39;
          sub_20B5076F8(a3, (uint64_t)&v47);
          v39 += 24;
          if (!--v16)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 5:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 5);
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v17)
        v18 = 1;
      else
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v18)
      {
        v19 = *(_QWORD *)(a2 + 8);
        if (!v19)
          return;
        if (!v17)
          goto LABEL_110;
        do
        {
          v47 = 3;
          v48 = v17;
          sub_20B506FA8(a3, (size_t *)&v47);
          v17 += 3;
          --v19;
        }
        while (v19);
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_144;
        }
        v19 = *(_QWORD *)(a2 + 8);
        if (v19)
        {
LABEL_110:
          v41 = 0;
          while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            v47 = 3;
            v48 = v41;
            sub_20B506FA8(a3, (size_t *)&v47);
            v41 += 3;
            if (!--v19)
              return;
          }
          goto LABEL_144;
        }
      }
      return;
    case 6:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 6);
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v20)
        v21 = 0;
      else
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v21)
      {
        v22 = *(_QWORD *)(a2 + 8);
        if (!v22)
          return;
        if (v20)
        {
          do
          {
            v47 = 3;
            v48 = v20;
            sub_20B5070E0(a3, (uint64_t)&v47);
            v20 += 6;
            --v22;
          }
          while (v22);
          return;
        }
        goto LABEL_116;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v22 = *(_QWORD *)(a2 + 8);
      if (v22)
      {
LABEL_116:
        v42 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v42;
          sub_20B5070E0(a3, (uint64_t)&v47);
          v42 += 6;
          if (!--v22)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 7:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 7);
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v23)
        v24 = 0;
      else
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v24)
      {
        v25 = *(_QWORD *)(a2 + 8);
        if (!v25)
          return;
        if (v23)
        {
          do
          {
            v47 = 3;
            v48 = v23;
            sub_20B507350(a3, (uint64_t)&v47);
            v23 += 12;
            --v25;
          }
          while (v25);
          return;
        }
        goto LABEL_122;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v25 = *(_QWORD *)(a2 + 8);
      if (v25)
      {
LABEL_122:
        v43 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v43;
          sub_20B507350(a3, (uint64_t)&v47);
          v43 += 12;
          if (!--v25)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 8:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 8);
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v26)
        v27 = 0;
      else
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v27)
      {
        v28 = *(_QWORD *)(a2 + 8);
        if (!v28)
          return;
        if (v26)
        {
          do
          {
            v47 = 3;
            v48 = v26;
            sub_20B5075C0(a3, (uint64_t)&v47);
            v26 += 24;
            --v28;
          }
          while (v28);
          return;
        }
        goto LABEL_128;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v28 = *(_QWORD *)(a2 + 8);
      if (v28)
      {
LABEL_128:
        v44 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v44;
          sub_20B5075C0(a3, (uint64_t)&v47);
          v44 += 24;
          if (!--v28)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 11:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 11);
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v29)
        v30 = 0;
      else
        v30 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v30)
      {
        v31 = *(_QWORD *)(a2 + 8);
        if (!v31)
          return;
        if (v29)
        {
          do
          {
            v47 = 3;
            v48 = v29;
            sub_20B507CD8(a3, (float **)&v47);
            v29 += 12;
            --v31;
          }
          while (v31);
          return;
        }
        goto LABEL_134;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v31 = *(_QWORD *)(a2 + 8);
      if (v31)
      {
LABEL_134:
        v45 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v45;
          sub_20B507CD8(a3, (float **)&v47);
          v45 += 12;
          if (!--v31)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 12:
      sub_20B43D624((unsigned __int8 **)(a2 + 16), 12);
      v32 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v32)
        v33 = 0;
      else
        v33 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v33)
      {
        v34 = *(_QWORD *)(a2 + 8);
        if (!v34)
          return;
        if (v32)
        {
          do
          {
            v47 = 3;
            v48 = v32;
            sub_20B5080F8(a3, &v47);
            v32 += 24;
            --v34;
          }
          while (v34);
          return;
        }
LABEL_140:
        v46 = 0;
        while (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v47 = 3;
          v48 = v46;
          sub_20B5080F8(a3, &v47);
          v46 += 24;
          if (!--v34)
            return;
        }
LABEL_144:
        abort();
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v34 = *(_QWORD *)(a2 + 8);
      if (v34)
        goto LABEL_140;
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B12A2F0(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD v13[3];
  __int128 v14;

  v10 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 2);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(v13[0]) = v10;
  sub_20B512EB0(a1, (unsigned __int8 *)v13);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v13[0]) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v6, (uint64_t)v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v14 = xmmword_24C40DDD8;
  v13[0] = &v10;
  v13[1] = a1;
  v13[2] = &v14;
  sub_20B12A410(v10, v13);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20B12A3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B12A410(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v6 = *(_QWORD *)(v4 + 40);
      v5 = *(unsigned __int8 **)(v4 + 48);
      if (v5)
        v7 = 1;
      else
        v7 = v6 == 0;
      if (v7)
      {
        if (!v6)
          return;
        goto LABEL_65;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_65:
        v54 = a2[1];
        do
        {
          sub_20B512EB0(v54, v5++);
          --v6;
        }
        while (v6);
        return;
      }
      goto LABEL_112;
    case 1:
      v8 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v9 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(_QWORD *)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
      {
        if (v11 < 2)
          return;
        goto LABEL_69;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_69:
        v55 = a2[1];
        v56 = *(_QWORD *)(v55 + 40);
        v57 = v11 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v56)
          {
            v58 = *(_QWORD **)(v55 + 24);
            v89 = *(_BYTE *)(v55 + 32);
            sub_20AEC01D0(v58, (uint64_t)&v89, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          v56 = *(_QWORD *)(v55 + 40) + 1;
          *(_QWORD *)(v55 + 40) = v56;
          v57 -= 2;
        }
        while (v57);
        return;
      }
      goto LABEL_112;
    case 2:
      v13 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v14 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 48);
      if (v15)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
      {
        if (v16 < 4)
          return;
        goto LABEL_74;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_74:
        v59 = a2[1];
        v60 = *(_QWORD *)(v59 + 40);
        v61 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v60)
          {
            v62 = *(_QWORD **)(v59 + 24);
            v90 = *(_BYTE *)(v59 + 32);
            sub_20AEC01D0(v62, (uint64_t)&v90, 1);
          }
          v15 += 4;
          std::ostream::operator<<();
          v60 = *(_QWORD *)(v59 + 40) + 1;
          *(_QWORD *)(v59 + 40) = v60;
          v61 -= 4;
        }
        while (v61);
        return;
      }
      goto LABEL_112;
    case 3:
      v18 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v21 = *(_QWORD *)(v19 + 40);
      v20 = *(_QWORD *)(v19 + 48);
      if (v20)
        v22 = 0;
      else
        v22 = v21 >= 8;
      if (!v22)
      {
        if (v21 < 8)
          return;
        goto LABEL_79;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_79:
        v63 = a2[1];
        v64 = *(_QWORD *)(v63 + 40);
        v65 = v21 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v64)
          {
            v66 = *(_QWORD **)(v63 + 24);
            v91 = *(_BYTE *)(v63 + 32);
            sub_20AEC01D0(v66, (uint64_t)&v91, 1);
          }
          v20 += 8;
          std::ostream::operator<<();
          v64 = *(_QWORD *)(v63 + 40) + 1;
          *(_QWORD *)(v63 + 40) = v64;
          v65 -= 8;
        }
        while (v65);
        return;
      }
      goto LABEL_112;
    case 5:
      v23 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v24 = *(_QWORD *)(v23 + 16);
      v26 = *(_QWORD *)(v24 + 40);
      v25 = *(char **)(v24 + 48);
      if (v25)
        v27 = 1;
      else
        v27 = v26 == 0;
      if (v27)
      {
        if (!v26)
          return;
        goto LABEL_84;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_84:
        v68 = a2[1];
        do
        {
          sub_20B512CCC(v68, v25++);
          --v26;
        }
        while (v26);
        return;
      }
      goto LABEL_112;
    case 6:
      v28 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v29 = *(_QWORD *)(v28 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_QWORD *)(v29 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 2;
      if (!v32)
      {
        if (v31 < 2)
          return;
        goto LABEL_88;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_88:
        v69 = a2[1];
        v70 = *(_QWORD *)(v69 + 40);
        v71 = v31 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v70)
          {
            v72 = *(_QWORD **)(v69 + 24);
            v92 = *(_BYTE *)(v69 + 32);
            sub_20AEC01D0(v72, (uint64_t)&v92, 1);
          }
          v30 += 2;
          std::ostream::operator<<();
          v70 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v70;
          v71 -= 2;
        }
        while (v71);
        return;
      }
      goto LABEL_112;
    case 7:
      v33 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v34 = *(_QWORD *)(v33 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(_QWORD *)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 4;
      if (!v37)
      {
        if (v36 < 4)
          return;
        goto LABEL_93;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_93:
        v73 = a2[1];
        v74 = *(_QWORD *)(v73 + 40);
        v75 = v36 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v74)
          {
            v76 = *(_QWORD **)(v73 + 24);
            v93 = *(_BYTE *)(v73 + 32);
            sub_20AEC01D0(v76, (uint64_t)&v93, 1);
          }
          v35 += 4;
          std::ostream::operator<<();
          v74 = *(_QWORD *)(v73 + 40) + 1;
          *(_QWORD *)(v73 + 40) = v74;
          v75 -= 4;
        }
        while (v75);
        return;
      }
      goto LABEL_112;
    case 8:
      v38 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(_QWORD *)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 8;
      if (!v42)
      {
        if (v41 < 8)
          return;
        goto LABEL_98;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_98:
        v77 = a2[1];
        v78 = *(_QWORD *)(v77 + 40);
        v79 = v41 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v78)
          {
            v80 = *(_QWORD **)(v77 + 24);
            v94 = *(_BYTE *)(v77 + 32);
            sub_20AEC01D0(v80, (uint64_t)&v94, 1);
          }
          v40 += 8;
          std::ostream::operator<<();
          v78 = *(_QWORD *)(v77 + 40) + 1;
          *(_QWORD *)(v77 + 40) = v78;
          v79 -= 8;
        }
        while (v79);
        return;
      }
      goto LABEL_112;
    case 11:
      v43 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v44 = *(_QWORD *)(v43 + 16);
      v46 = *(_QWORD *)(v44 + 40);
      v45 = *(_QWORD *)(v44 + 48);
      if (v45)
        v47 = 0;
      else
        v47 = v46 >= 4;
      if (!v47)
      {
        if (v46 < 4)
          return;
        goto LABEL_103;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_103:
        v81 = a2[1];
        v82 = *(_QWORD *)(v81 + 40);
        v83 = v46 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v82)
          {
            v84 = *(_QWORD **)(v81 + 24);
            v95 = *(_BYTE *)(v81 + 32);
            sub_20AEC01D0(v84, (uint64_t)&v95, 1);
          }
          *(_QWORD *)(*(_QWORD *)(v81 + 24) + *(_QWORD *)(**(_QWORD **)(v81 + 24) - 24) + 16) = 9;
          v45 += 4;
          std::ostream::operator<<();
          v82 = *(_QWORD *)(v81 + 40) + 1;
          *(_QWORD *)(v81 + 40) = v82;
          v83 -= 4;
        }
        while (v83);
        return;
      }
      goto LABEL_112;
    case 12:
      v48 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v49 = *(_QWORD *)(v48 + 16);
      v51 = *(_QWORD *)(v49 + 40);
      v50 = *(_QWORD *)(v49 + 48);
      if (v50)
        v52 = 0;
      else
        v52 = v51 >= 8;
      if (v52)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
LABEL_112:
          abort();
        }
      }
      else if (v51 < 8)
      {
        return;
      }
      v85 = a2[1];
      v86 = *(_QWORD *)(v85 + 40);
      v87 = v51 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        if (v86)
        {
          v88 = *(_QWORD **)(v85 + 24);
          v96 = *(_BYTE *)(v85 + 32);
          sub_20AEC01D0(v88, (uint64_t)&v96, 1);
        }
        *(_QWORD *)(*(_QWORD *)(v85 + 24) + *(_QWORD *)(**(_QWORD **)(v85 + 24) - 24) + 16) = 17;
        v50 += 8;
        std::ostream::operator<<();
        v86 = *(_QWORD *)(v85 + 40) + 1;
        *(_QWORD *)(v85 + 40) = v86;
        v87 -= 8;
      }
      while (v87);
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B12AB2C(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD __src[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(__src[0]) = v9;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)__src, (char *)__src + 1, 1);
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&v9 + 8, (char *)&v10, 8);
  v13 = xmmword_24C40DDD8;
  __src[0] = &v9;
  __src[1] = a1;
  __src[2] = &v13;
  sub_20B12AC50(v9, __src);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20B12AC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20B12AC50(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  char *result;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v4 + 40);
      v6 = *(char **)(v4 + 48);
      if (v6)
        v7 = 1;
      else
        v7 = v5 == 0;
      if (!v7)
        goto LABEL_27;
      goto LABEL_7;
    case 1:
      v9 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(char **)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
        goto LABEL_37;
      goto LABEL_36;
    case 2:
      v14 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v15 + 40);
      v11 = *(char **)(v15 + 48);
      if (v11)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
        goto LABEL_59;
      goto LABEL_58;
    case 3:
      v18 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v19 + 40);
      v11 = *(char **)(v19 + 48);
      if (v11)
        v21 = 0;
      else
        v21 = v20 >= 8;
      if (!v21)
        goto LABEL_71;
      goto LABEL_70;
    case 5:
      v22 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v23 = *(_QWORD *)(v22 + 16);
      v5 = *(_QWORD *)(v23 + 40);
      v6 = *(char **)(v23 + 48);
      if (v6)
        v24 = 1;
      else
        v24 = v5 == 0;
      if (v24)
      {
LABEL_7:
        v8 = a2[1];
      }
      else
      {
LABEL_27:
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360)|| (v8 = a2[1], sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)))
        {
LABEL_77:
          abort();
        }
      }
      result = sub_20B42DB24(v8 + 24, *(char **)(v8 + 32), v6, &v6[v5], v5);
      break;
    case 6:
      v25 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v26 = *(_QWORD *)(v25 + 16);
      v12 = *(_QWORD *)(v26 + 40);
      v11 = *(char **)(v26 + 48);
      if (v11)
        v27 = 0;
      else
        v27 = v12 >= 2;
      if (!v27)
        goto LABEL_37;
LABEL_36:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_37:
      v28 = v12 & 0xFFFFFFFFFFFFFFFELL;
      v29 = a2[1];
      if (v11)
        v30 = 1;
      else
        v30 = v28 == 0;
      if (!v30)
        goto LABEL_75;
      goto LABEL_76;
    case 7:
      v31 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v32 = *(_QWORD *)(v31 + 16);
      v16 = *(_QWORD *)(v32 + 40);
      v11 = *(char **)(v32 + 48);
      if (v11)
        v33 = 0;
      else
        v33 = v16 >= 4;
      if (!v33)
        goto LABEL_59;
      goto LABEL_58;
    case 8:
      v34 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v35 = *(_QWORD *)(v34 + 16);
      v20 = *(_QWORD *)(v35 + 40);
      v11 = *(char **)(v35 + 48);
      if (v11)
        v36 = 0;
      else
        v36 = v20 >= 8;
      if (!v36)
        goto LABEL_71;
      goto LABEL_70;
    case 11:
      v37 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v38 = *(_QWORD *)(v37 + 16);
      v16 = *(_QWORD *)(v38 + 40);
      v11 = *(char **)(v38 + 48);
      if (v11)
        v39 = 0;
      else
        v39 = v16 >= 4;
      if (!v39)
        goto LABEL_59;
LABEL_58:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_59:
      v28 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      v29 = a2[1];
      if (v11)
        v40 = 1;
      else
        v40 = v28 == 0;
      if (!v40)
        goto LABEL_75;
      goto LABEL_76;
    case 12:
      v41 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v42 = *(_QWORD *)(v41 + 16);
      v20 = *(_QWORD *)(v42 + 40);
      v11 = *(char **)(v42 + 48);
      if (v11)
        v43 = 0;
      else
        v43 = v20 >= 8;
      if (!v43)
        goto LABEL_71;
LABEL_70:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_71:
      v28 = v20 & 0xFFFFFFFFFFFFFFF8;
      v29 = a2[1];
      if (v11)
        v44 = 1;
      else
        v44 = v28 == 0;
      if (v44)
        goto LABEL_76;
LABEL_75:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_76:
      result = sub_20B42DB24(v29 + 24, *(char **)(v29 + 32), v11, &v11[v28], v28);
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

void sub_20B12AFDC(_BYTE *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BYTE *v12[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12[0] = &v9;
  sub_20B0FFA54(a1, v12);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 120))(a1, (char *)&v9 + 8);
  v13 = xmmword_24C40DDD8;
  v12[0] = &v9;
  v12[1] = a1;
  v12[2] = &v13;
  sub_20B12B0D8(v9, v12);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20B12B0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20B12B0D8(int a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int8 **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (v8)
      {
        if (!v7)
          return result;
        goto LABEL_65;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_65:
        v55 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 80))(v55, v6++);
          --v7;
        }
        while (v7);
        return result;
      }
      goto LABEL_104;
    case 1:
      v9 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
      {
        if (v12 < 2)
          return result;
        goto LABEL_69;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_69:
        v56 = a2[1];
        v57 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 96))(v56, v11);
          v11 += 2;
          v57 -= 2;
        }
        while (v57);
        return result;
      }
      goto LABEL_104;
    case 2:
      v14 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (!v18)
      {
        if (v17 < 4)
          return result;
        goto LABEL_73;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_73:
        v58 = a2[1];
        v59 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 104))(v58, v16);
          v16 += 4;
          v59 -= 4;
        }
        while (v59);
        return result;
      }
      goto LABEL_104;
    case 3:
      v19 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v20 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (!v23)
      {
        if (v22 < 8)
          return result;
        goto LABEL_77;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_77:
        v60 = a2[1];
        v61 = v22 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 120))(v60, v21);
          v21 += 8;
          v61 -= 8;
        }
        while (v61);
        return result;
      }
      goto LABEL_104;
    case 5:
      v24 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (v28)
      {
        if (!v27)
          return result;
        goto LABEL_81;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_81:
        v63 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 88))(v63, v26++);
          --v27;
        }
        while (v27);
        return result;
      }
      goto LABEL_104;
    case 6:
      v29 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v30 = *(_QWORD *)(v29 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (!v33)
      {
        if (v32 < 2)
          return result;
        goto LABEL_85;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_85:
        v64 = a2[1];
        v65 = v32 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 48))(v64, v31);
          v31 += 2;
          v65 -= 2;
        }
        while (v65);
        return result;
      }
      goto LABEL_104;
    case 7:
      v34 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v35 = *(_QWORD *)(v34 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (!v38)
      {
        if (v37 < 4)
          return result;
        goto LABEL_89;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_89:
        v66 = a2[1];
        v67 = v37 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 56))(v66, v36);
          v36 += 4;
          v67 -= 4;
        }
        while (v67);
        return result;
      }
      goto LABEL_104;
    case 8:
      v39 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v40 = *(_QWORD *)(v39 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (!v43)
      {
        if (v42 < 8)
          return result;
        goto LABEL_93;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_93:
        v68 = a2[1];
        v69 = v42 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 72))(v68, v41);
          v41 += 8;
          v69 -= 8;
        }
        while (v69);
        return result;
      }
      goto LABEL_104;
    case 11:
      v44 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v45 = *(_QWORD *)(v44 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (!v48)
      {
        if (v47 < 4)
          return result;
        goto LABEL_97;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_97:
        v70 = a2[1];
        v71 = v47 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 128))(v70, v46);
          v46 += 4;
          v71 -= 4;
        }
        while (v71);
        return result;
      }
      goto LABEL_104;
    case 12:
      v49 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v50 = *(_QWORD *)(v49 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
LABEL_104:
          abort();
        }
      }
      else if (v52 < 8)
      {
        return result;
      }
      v72 = a2[1];
      v73 = v52 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 136))(v72, v51);
        v51 += 8;
        v73 -= 8;
      }
      while (v73);
      return result;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B12B6B4(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  if (a3 < 2)
  {
    sub_20B12B7D8((uint64_t)&v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "value_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v11 = a2;
    sub_20B1002E8((uint64_t *)a1, &v11);
    v6 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v6)
      *(_BYTE *)(a1 + 104) = 1;
    v7 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v11 = 0;
    sub_20B4552C4(v7, &v11);
    *((_QWORD *)a2 + 1) = v11;
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "points3";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20B50AC94(a1);
    sub_20B12B9EC(*a2, (uint64_t)a2, a1);
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
    v10 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v10 - 8);
    *(_QWORD *)(a1 + 48) = v9 - 8;
    *(_QWORD *)(a1 + 72) = v10 - 8;
  }
}

void sub_20B12B7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22[8];
  void *v23;
  __int128 v24;
  void *__p;
  void *v26;
  uint64_t v27;
  __int128 v28;

  v22[0] = 7;
  v23 = 0;
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_20B43F144((uint64_t)&__p, &v28);
  v24 = v28;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v22;
  sub_20B1002E8((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_20B4552C4(v7, &__p);
  v23 = __p;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "points3";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50AC94(a2);
  sub_20B12D29C(v22[0], (uint64_t)v22, a2);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
  v11 = v22[0];
  v12 = v23;
  v13 = v24;
  if (*((_QWORD *)&v24 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v13;
  v16 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v13 + 1);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20B12B9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12B9D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B12B9EC(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B12BB14(v3);
      break;
    case 1:
      sub_20B12BD54(v3);
      break;
    case 2:
      sub_20B12BFA4(v3);
      break;
    case 3:
      sub_20B12C1F8(v3);
      break;
    case 5:
      sub_20B12C490(v3);
      break;
    case 6:
      sub_20B12C6D0(v3);
      break;
    case 7:
      sub_20B12C920(v3);
      break;
    case 8:
      sub_20B12CB74(v3);
      break;
    case 11:
      sub_20B12CE0C(v3);
      break;
    case 12:
      sub_20B12D054(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B12BB14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50B064(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20B43BC04(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B12BCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12BD54(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50BE9C(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20B43BF48(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B12BF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12BFA4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50C014(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43C290(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B12C194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12C1F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AF4C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50E45C(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C5D8(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B12C414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12C490(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50BCBC(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20B43BA64(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B12C66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12C6D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50BDAC(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20B43BDA4(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B12C8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12C920(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50BF58(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43C0EC(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B12CB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12CB74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AF4C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50E120(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C434(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B12CD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12CE0C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v15 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AF4C(v5);
      ++v5[14];
      sub_20B50C420(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43C77C(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B12CFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12D054(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v15 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AF4C(v5);
      ++v5[14];
      sub_20B50C528(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C920(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B12D238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12D29C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B12D3C4(v3);
      break;
    case 1:
      sub_20B12D604(v3);
      break;
    case 2:
      sub_20B12D854(v3);
      break;
    case 3:
      sub_20B12DAA8(v3);
      break;
    case 5:
      sub_20B12DD40(v3);
      break;
    case 6:
      sub_20B12DF80(v3);
      break;
    case 7:
      sub_20B12E1D0(v3);
      break;
    case 8:
      sub_20B12E424(v3);
      break;
    case 11:
      sub_20B12E6BC(v3);
      break;
    case 12:
      sub_20B12E904(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B12D3C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50B064(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20B43BC04(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B12D5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12D604(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50BE9C(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20B43BF48(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B12D7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12D854(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50C014(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43C290(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B12DA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12DAA8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AF4C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50E45C(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C5D8(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B12DCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12DD40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50BCBC(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20B43BA64(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B12DF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12DF80(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50BDAC(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20B43BDA4(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B12E16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12E1D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AF4C(v4);
      ++v4[14];
      sub_20B50BF58(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43C0EC(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B12E3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12E424(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AF4C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50E120(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C434(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B12E640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12E6BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v15 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AF4C(v5);
      ++v5[14];
      sub_20B50C420(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43C77C(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B12E8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12E904(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v15 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AF4C(v5);
      ++v5[14];
      sub_20B50C528(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C920(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B12EAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12EB4C(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;

  if (a4 < 2)
  {
    sub_20B12EC40((uint64_t)v10, a2, (uint64_t)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20B0DD290(a2 + 2);
    LOBYTE(v10[0]) = 0;
    sub_20B51852C(a2[6], v10);
    *a3 = v10[0];
    sub_20B518BE4(a2[6], (_QWORD *)a3 + 1);
    v11 = xmmword_24C40DDD8;
    v7 = *a3;
    v10[0] = a3;
    v10[1] = a2;
    v10[2] = &v11;
    sub_20B12EDD4(v7, v10);
    v8 = a2[4];
    v9 = *(_QWORD *)(v8 - 16) - (*(uint64_t (**)(uint64_t *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v8 - 8);
    if (v9)
      (*(void (**)(uint64_t *, uint64_t))(*v6 + 40))(a2 + 2, v9);
    a2[4] -= 16;
  }
}

void sub_20B12EC40(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20B43F144((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_20B51852C(a2[6], &__p);
  v16 = __p;
  sub_20B518BE4(a2[6], &v17);
  v22 = xmmword_24C40DDD8;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_20B13015C(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B12EDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12EDC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B12EDD4(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B12EE7C(a2);
      break;
    case 1:
      sub_20B12F050(a2);
      break;
    case 2:
      sub_20B12F234(a2);
      break;
    case 3:
      sub_20B12F41C(a2);
      break;
    case 5:
      sub_20B12F604(a2);
      break;
    case 6:
      sub_20B12F7D8(a2);
      break;
    case 7:
      sub_20B12F9BC(a2);
      break;
    case 8:
      sub_20B12FBA4(a2);
      break;
    case 11:
      sub_20B12FD8C(a2);
      break;
    case 12:
      sub_20B12FF74(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B12EE7C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF4BAC0();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20B51852C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BC04(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B12EFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12F050(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20B5186C0(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B12F1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12F234(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B518854(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B12F3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12F41C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518BE4(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B12F5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12F604(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20B51847C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BA64(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B12F778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12F7D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20B518610(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B12F95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12F9BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B5187A4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B12FB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12FBA4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518AFC(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B12FD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12FD8C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B518CC0(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B12FF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B12FF74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518DF0(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1300FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13015C(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B130204(a2);
      break;
    case 1:
      sub_20B1303D8(a2);
      break;
    case 2:
      sub_20B1305BC(a2);
      break;
    case 3:
      sub_20B1307A4(a2);
      break;
    case 5:
      sub_20B13098C(a2);
      break;
    case 6:
      sub_20B130B60(a2);
      break;
    case 7:
      sub_20B130D44(a2);
      break;
    case 8:
      sub_20B130F2C(a2);
      break;
    case 11:
      sub_20B131114(a2);
      break;
    case 12:
      sub_20B1312FC(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B130204(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF4BAC0();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20B51852C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BC04(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B130378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1303D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20B5186C0(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13055C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1305BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B518854(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B130744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1307A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518BE4(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13092C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13098C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20B51847C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BA64(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B130B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B130B60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20B518610(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B130CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B130D44(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B5187A4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B130ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B130F2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518AFC(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1310B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B131114(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B518CC0(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13129C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1312FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518DF0(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B131484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1314E4(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  if (a3 < 2)
  {
    sub_20B131608((uint64_t)&v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "value_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v11 = a2;
    sub_20B101898((uint64_t *)a1, &v11);
    v6 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v6)
      *(_BYTE *)(a1 + 104) = 1;
    v7 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v11 = 0;
    sub_20B454B2C(v7, &v11);
    *((_QWORD *)a2 + 1) = v11;
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "points3";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20B50A7A4(a1);
    sub_20B13181C(*a2, (uint64_t)a2, a1);
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
    v10 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v10 - 8);
    *(_QWORD *)(a1 + 48) = v9 - 8;
    *(_QWORD *)(a1 + 72) = v10 - 8;
  }
}

void sub_20B131608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22[8];
  void *v23;
  __int128 v24;
  void *__p;
  void *v26;
  uint64_t v27;
  __int128 v28;

  v22[0] = 7;
  v23 = 0;
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_20B43F144((uint64_t)&__p, &v28);
  v24 = v28;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v22;
  sub_20B101898((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_20B454B2C(v7, &__p);
  v23 = __p;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "points3";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50A7A4(a2);
  sub_20B1330CC(v22[0], (uint64_t)v22, a2);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
  v11 = v22[0];
  v12 = v23;
  v13 = v24;
  if (*((_QWORD *)&v24 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v13;
  v16 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v13 + 1);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20B1317EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B131808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B13181C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B131944(v3);
      break;
    case 1:
      sub_20B131B84(v3);
      break;
    case 2:
      sub_20B131DD4(v3);
      break;
    case 3:
      sub_20B132028(v3);
      break;
    case 5:
      sub_20B1322C0(v3);
      break;
    case 6:
      sub_20B132500(v3);
      break;
    case 7:
      sub_20B132750(v3);
      break;
    case 8:
      sub_20B1329A4(v3);
      break;
    case 11:
      sub_20B132C3C(v3);
      break;
    case 12:
      sub_20B132E84(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B131944(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50AB74(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20B43BC04(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B131B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B131B84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B300(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20B43BF48(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B131D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B131DD4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B478(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43C290(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B131FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B132028(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AA5C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50D194(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C5D8(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B132244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1322C0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50B120(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20B43BA64(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B13249C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B132500(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B210(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20B43BDA4(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B1326EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B132750(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B3BC(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43C0EC(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B132940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1329A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AA5C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50CAD8(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C434(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B132BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B132C3C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v15 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AA5C(v5);
      ++v5[14];
      sub_20B50B8AC(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43C77C(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B132E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B132E84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v15 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AA5C(v5);
      ++v5[14];
      sub_20B50B9DC(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C920(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B133068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1330CC(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B1331F4(v3);
      break;
    case 1:
      sub_20B133434(v3);
      break;
    case 2:
      sub_20B133684(v3);
      break;
    case 3:
      sub_20B1338D8(v3);
      break;
    case 5:
      sub_20B133B70(v3);
      break;
    case 6:
      sub_20B133DB0(v3);
      break;
    case 7:
      sub_20B134000(v3);
      break;
    case 8:
      sub_20B134254(v3);
      break;
    case 11:
      sub_20B1344EC(v3);
      break;
    case 12:
      sub_20B134734(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B1331F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50AB74(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20B43BC04(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B1333D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B133434(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B300(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20B43BF48(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B133620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B133684(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B478(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43C290(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B133874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1338D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AA5C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50D194(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C5D8(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B133AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B133B70(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50B120(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20B43BA64(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_20B133D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B133DB0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B210(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20B43BDA4(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B133F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B134000(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_20B50AA5C(v4);
      ++v4[14];
      sub_20B50B3BC(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43C0EC(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_20B1341F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B134254(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_20B50AA5C(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_20B50CAD8(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C434(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B134470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1344EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v15 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AA5C(v5);
      ++v5[14];
      sub_20B50B8AC(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43C77C(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B1346D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B134734(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v15 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_20B50AA5C(v5);
      ++v5[14];
      sub_20B50B9DC(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C920(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B134918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13497C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  char v8;
  char v9;
  __int128 v10;
  void *__p;
  uint64_t v12;
  __int128 *v13;

  LODWORD(__p) = 2;
  sub_20B514490(a2, &__p);
  v5 = __p;
  if (__p >= 2)
    v6 = 2;
  else
    v6 = __p;
  if (v6 < 2)
  {
    sub_20B134AE8((uint64_t)&__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    LOBYTE(__p) = 0;
    sub_20B513B4C(a2, &__p);
    *a3 = __p;
    sub_20B514DE0(a2, (_QWORD *)a3 + 1);
    v10 = xmmword_24C40DDD8;
    v7 = *a3;
    __p = a3;
    v12 = a2;
    v13 = &v10;
    sub_20B134C7C(v7, &__p);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (SHIBYTE(v13) < 0)
      {
        if (v12 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_21:
          v9 = 0;
          if (SHIBYTE(v13) < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (SHIBYTE(v13) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_21;
      }
      v9 = 1;
      if (SHIBYTE(v13) < 0)
LABEL_24:
        operator delete(__p);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v8 = 0;
      else
        v8 = v9;
    }
    while ((v8 & 1) != 0);
  }
}

void sub_20B134AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20B43F144((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = (uint64_t)__p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_20B513B4C(a2, &__p);
  v16 = __p;
  sub_20B514DE0(a2, &v17);
  v22 = xmmword_24C40DDD8;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_20B135FDC(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B134C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B134C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B134C7C(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B134D24(a2);
      break;
    case 1:
      sub_20B134EF4(a2);
      break;
    case 2:
      sub_20B1350D4(a2);
      break;
    case 3:
      sub_20B1352B8(a2);
      break;
    case 5:
      sub_20B13549C(a2);
      break;
    case 6:
      sub_20B13566C(a2);
      break;
    case 7:
      sub_20B13584C(a2);
      break;
    case 8:
      sub_20B135A30(a2);
      break;
    case 11:
      sub_20B135C14(a2);
      break;
    case 12:
      sub_20B135DF8(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B134D24(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF4BAC0();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20B513B4C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BC04(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B134E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B134EF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20B513FE8(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B135074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1350D4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B514490(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B135258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1352B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B514DE0(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13543C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13549C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20B513904(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BA64(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B13560C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13566C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20B513D94(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1357EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13584C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B51423C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1359D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B135A30(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B514B8C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B135BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B135C14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B5152B0(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B135D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B135DF8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B515504(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B135F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B135FDC(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B136084(a2);
      break;
    case 1:
      sub_20B136254(a2);
      break;
    case 2:
      sub_20B136434(a2);
      break;
    case 3:
      sub_20B136618(a2);
      break;
    case 5:
      sub_20B1367FC(a2);
      break;
    case 6:
      sub_20B1369CC(a2);
      break;
    case 7:
      sub_20B136BAC(a2);
      break;
    case 8:
      sub_20B136D90(a2);
      break;
    case 11:
      sub_20B136F74(a2);
      break;
    case 12:
      sub_20B137158(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B136084(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF4BAC0();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20B513B4C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BC04(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B1361F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B136254(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20B513FE8(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1363D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B136434(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B514490(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1365B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B136618(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B514DE0(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13679C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1367FC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20B513904(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BA64(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B13696C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1369CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20B513D94(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B136B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B136BAC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B51423C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B136D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B136D90(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B514B8C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B136F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B136F74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B5152B0(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1370F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B137158(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B515504(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1372DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13733C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20B137430((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_20B42BA30(a2);
    sub_20B137590(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20B13741C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B137430(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16[8];
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;

  v16[0] = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20B43F144((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  sub_20B138D98(a2, (uint64_t)v16);
  v5 = v16[0];
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B137560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B137574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B137590(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24C40DDD8;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_20B137690(v5, v10);
}

void sub_20B137668(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B13767C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B137690(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B137738(a2);
      break;
    case 1:
      sub_20B13796C(a2);
      break;
    case 2:
      sub_20B137BA8(a2);
      break;
    case 3:
      sub_20B137DE8(a2);
      break;
    case 5:
      sub_20B138028(a2);
      break;
    case 6:
      sub_20B13825C(a2);
      break;
    case 7:
      sub_20B138498(a2);
      break;
    case 8:
      sub_20B1386D8(a2);
      break;
    case 11:
      sub_20B138918(a2);
      break;
    case 12:
      sub_20B138B58(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B137738(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BC04(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1378FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13796C(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if (3 * (_QWORD)v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * (_QWORD)v2;
    v5 = (char *)operator new(6 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[2 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BF48(v22, 1, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B137B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B137BA8(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43C290(v22, 2, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B137D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B137DE8(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43C5D8(v22, 3, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B137FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B138028(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BA64(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1381EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13825C(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if (3 * (_QWORD)v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * (_QWORD)v2;
    v5 = (char *)operator new(6 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[2 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BDA4(v22, 6, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B138428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B138498(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43C0EC(v22, 7, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B138668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1386D8(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43C434(v22, 8, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1388A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B138918(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43C77C(v22, 11, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B138AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B138B58(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43C920(v22, 12, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B138D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B138D98(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24C40DDD8;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_20B138E98(v5, v10);
}

void sub_20B138E70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B138E84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B138E98(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B138F40(a2);
      break;
    case 1:
      sub_20B139174(a2);
      break;
    case 2:
      sub_20B1393B0(a2);
      break;
    case 3:
      sub_20B1395F0(a2);
      break;
    case 5:
      sub_20B139830(a2);
      break;
    case 6:
      sub_20B139A64(a2);
      break;
    case 7:
      sub_20B139CA0(a2);
      break;
    case 8:
      sub_20B139EE0(a2);
      break;
    case 11:
      sub_20B13A120(a2);
      break;
    case 12:
      sub_20B13A360(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B138F40(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BC04(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B139104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B139174(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if (3 * (_QWORD)v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * (_QWORD)v2;
    v5 = (char *)operator new(6 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[2 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BF48(v22, 1, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B139340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1393B0(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43C290(v22, 2, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B139580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1395F0(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43C5D8(v22, 3, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1397C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B139830(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BA64(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1399F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B139A64(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if (3 * (_QWORD)v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * (_QWORD)v2;
    v5 = (char *)operator new(6 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[2 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BDA4(v22, 6, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B139C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B139CA0(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43C0EC(v22, 7, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B139E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B139EE0(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43C434(v22, 8, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13A0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13A120(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43C77C(v22, 11, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13A2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13A360(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43C920(v22, 12, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13A530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13A5A0(int *a1, _BYTE *a2, _BYTE *a3)
{
  int v6;
  _BYTE *v7[3];
  __int128 v8;

  LODWORD(v7[0]) = 2;
  (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v7);
  if (*a1 < 1)
  {
    if (LODWORD(v7[0]) < 2)
    {
      sub_20B13ABA0((uint64_t)v7, a2, (uint64_t)a3);
    }
    else
    {
      v7[0] = a3;
      sub_20B103C34(a2, v7);
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
      v8 = xmmword_24C40DDD8;
      v6 = *a3;
      v7[0] = a3;
      v7[1] = a2;
      v7[2] = &v8;
      sub_20B13AD38(v6, v7);
    }
  }
  else
  {
    sub_20B13A69C(a1, a2, a3, v7[0]);
  }
}

void sub_20B13A69C(int *a1, _BYTE *a2, _BYTE *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  __int128 *v13;
  _BYTE *v14[3];
  __int128 v15;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    LODWORD(v14[0]) = 2;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v14);
    if (LODWORD(v14[0]) >= 3)
    {
      v12 = v14[0];
      v13 = sub_20B13A7F0();
      sub_20B520518((std::string *)v13, v12, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_20B13ABA0((uint64_t)v14, a2, (uint64_t)a3);
    return;
  }
  v9 = 0;
LABEL_13:
  v14[0] = a3;
  sub_20B103C34(a2, v14);
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  v15 = xmmword_24C40DDD8;
  v11 = *a3;
  v14[0] = a3;
  v14[1] = a2;
  v14[2] = &v15;
  sub_20B13AD38(v11, v14);
  if (v9)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20B13A7F0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546359D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546359D8))
    return &xmmword_2546359C0;
  v2 = sub_20B13A8CC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546359C0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546359D0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546359C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546359C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546359D8);
  return &xmmword_2546359C0;
}

void sub_20B13A8B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546359D8);
  _Unwind_Resume(a1);
}

std::string *sub_20B13A8CC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546359F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546359F8))
    return &stru_2546359E0;
  sub_20B13A9BC((uint64_t)__p);
  sub_20AF70068((char *)__p, &stru_2546359E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546359E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546359F8);
  return &stru_2546359E0;
}

void sub_20B13A97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546359F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546359F8);
  _Unwind_Resume(a1);
}

void sub_20B13A9BC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635A18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635A18))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::PointsSample<3>]", qword_254635A00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635A00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635A18);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635A38);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635A38))
  {
    v5 = sub_20AED4780(qword_254635A00, "<", 0);
    sub_20AED467C(qword_254635A00, 0, v5, qword_254635A20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635A20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635A38);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254635A58);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254635A58))
  {
    sub_20B531658((uint64_t)qword_254635A20, (uint64_t)&xmmword_254635A40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635A40, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635A58);
  }
  if (byte_254635A57 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254635A40, *((unint64_t *)&xmmword_254635A40 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254635A40;
    *(_QWORD *)(a1 + 16) = unk_254635A50;
  }
}

void sub_20B13AB58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635A58);
  _Unwind_Resume(a1);
}

void sub_20B13AB70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635A38);
  _Unwind_Resume(a1);
}

void sub_20B13AB88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635A18);
  _Unwind_Resume(a1);
}

void sub_20B13ABA0(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20B43F144((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  __p = &v16;
  sub_20B103C34(a2, (_BYTE **)&__p);
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v17);
  v22 = xmmword_24C40DDD8;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_20B13C010(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B13AD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13AD24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CE38C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B13AD38(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B13ADE0(a2);
      break;
    case 1:
      sub_20B13AF9C(a2);
      break;
    case 2:
      sub_20B13B170(a2);
      break;
    case 3:
      sub_20B13B348(a2);
      break;
    case 5:
      sub_20B13B520(a2);
      break;
    case 6:
      sub_20B13B6DC(a2);
      break;
    case 7:
      sub_20B13B8B0(a2);
      break;
    case 8:
      sub_20B13BA88(a2);
      break;
    case 11:
      sub_20B13BC60(a2);
      break;
    case 12:
      sub_20B13BE38(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B13ADE0(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(3 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20B43BC04(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13AF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13AF9C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13B110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13B170(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13B2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13B348(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13B4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13B520(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(3 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20B43BA64(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13B67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13B6DC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13B850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13B8B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13BA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13BA88(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13BC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13BC60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13BDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13BE38(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13BFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13C010(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B13C0B8(a2);
      break;
    case 1:
      sub_20B13C274(a2);
      break;
    case 2:
      sub_20B13C448(a2);
      break;
    case 3:
      sub_20B13C620(a2);
      break;
    case 5:
      sub_20B13C7F8(a2);
      break;
    case 6:
      sub_20B13C9B4(a2);
      break;
    case 7:
      sub_20B13CB88(a2);
      break;
    case 8:
      sub_20B13CD60(a2);
      break;
    case 11:
      sub_20B13CF38(a2);
      break;
    case 12:
      sub_20B13D110(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B13C0B8(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(3 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20B43BC04(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13C214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13C274(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13C3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13C448(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13C5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13C620(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13C798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13C7F8(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(3 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20B43BA64(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13C954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13C9B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20AF6E1D0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13CB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13CB88(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13CD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13CD60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13CED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13CF38(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13D0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13D110(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B13D288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B13D2E8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  unsigned __int128 *v8;
  unsigned __int128 v9;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24C3F5FB8;
  *(_QWORD *)(v4 + 8) = &off_24C41D808;
  v6 = *(_OWORD *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(v4 + 16) = v6;
  *(_OWORD *)(v4 + 32) = v7;
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v8 = (unsigned __int128 *)(a1 + 176);
    do
      v9 = __ldaxp(v8);
    while (__stlxp(v9, v8));
    *(_OWORD *)(v4 + 176) = v9;
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_QWORD *)v4 = &off_24C3F5F38;
  *a2 = &off_24C411E78;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20B13D480(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20B13D49C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  void (*v6)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD);
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  sub_20B50671C(a2);
  v10 = "version";
  v11 = 7;
  LODWORD(v12[0]) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, v12);
  LODWORD(v10) = *(_DWORD *)a3;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD))(a3 + 8);
  v7 = a3 + 8;
  v6 = v8;
  v11 = 0;
  v12[0] = 0;
  if (v8)
    v6(1, v7, &v11, 0, 0);
  sub_20B13D61C(a2, (uint64_t)&v10);
  if (v11)
    ((void (*)(_QWORD, uint64_t *, _QWORD, _QWORD, _QWORD))v11)(0, &v11, 0, 0, 0);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B13D5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B13D61C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v9;
  int v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v19;
  int v20;
  uint64_t (*v21)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v24;
  uint64_t (*v25)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v28;
  uint64_t (*v29)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v32;
  int v33;
  uint64_t (*v34)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v41;
  int *v42;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "camera_type";
    *(_QWORD *)(a1 + 80) = 11;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v42 = (int *)a2;
  sub_20B13DAC0(a1, &v42);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v13 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v12 = a2 + 8;
      v11 = v13;
      if (!v13)
        goto LABEL_55;
      v14 = v11(3, v12, 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v14)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v15 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v15)
          *(_BYTE *)(a1 + 88) = 1;
      }
      goto LABEL_18;
    case 1:
      v18 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v17 = a2 + 8;
      v16 = v18;
      if (!v18)
        goto LABEL_55;
      v19 = v16(3, v17, 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v19)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v20 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v20)
          *(_BYTE *)(a1 + 88) = 1;
      }
      goto LABEL_24;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v23 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v22 = a2 + 8;
      v21 = v23;
      if (!v23)
        goto LABEL_55;
      v14 = v21(3, v22, 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v14)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v24 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v24)
          *(_BYTE *)(a1 + 88) = 1;
      }
LABEL_18:
      sub_20B13DE6C((uint64_t)&v42, a1, v14);
      break;
    case 11:
      v27 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v26 = a2 + 8;
      v25 = v27;
      if (!v27 || (v19 = v25(3, v26, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
LABEL_55:
        sub_20B13DFF8();
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v28 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v28)
          *(_BYTE *)(a1 + 88) = 1;
      }
LABEL_24:
      sub_20B13E04C((uint64_t)&v42, a1, v19);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_55;
          v9 = v6(3, v7, 0, &unk_24C40F728, &unk_20B5E8C58);
          if (!v9)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v10 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v10)
              *(_BYTE *)(a1 + 88) = 1;
          }
          goto LABEL_11;
        case 'e':
          v31 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v30 = a2 + 8;
          v29 = v31;
          if (!v31)
            goto LABEL_55;
          v32 = v29(3, v30, 0, &unk_24C40F778, &unk_20B5E8D30);
          if (!v32)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v33 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v33)
              *(_BYTE *)(a1 + 88) = 1;
          }
          goto LABEL_42;
        case 'n':
          v36 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v35 = a2 + 8;
          v34 = v36;
          if (!v36)
            goto LABEL_55;
          v9 = v34(3, v35, 0, &unk_24C40F7C8, &unk_20B5E8E08);
          if (!v9)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v37 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v37)
              *(_BYTE *)(a1 + 88) = 1;
          }
LABEL_11:
          sub_20B13E1D8((uint64_t)&v42, a1, v9);
          break;
        case 'o':
          v40 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v39 = a2 + 8;
          v38 = v40;
          if (!v40)
            goto LABEL_55;
          v32 = v38(3, v39, 0, &unk_24C40F818, &unk_20B5E8EE0);
          if (!v32)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v41 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v41)
              *(_BYTE *)(a1 + 88) = 1;
          }
LABEL_42:
          sub_20B13E3AC((uint64_t)&v42, a1, v32);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20B13DAC0(uint64_t a1, int **a2)
{
  int *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B13DBC8((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B508B7C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B13DB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13DBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B13DBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B13DBC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20B4456F8((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C40DC30[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20B13DE18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B13DE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B13DE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B13DE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_20B50671C(a2);
  v10 = (uint64_t)"version";
  v11 = 7;
  v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_20B5086B4(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_20B5086B4(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v10 = 2;
  v11 = a3;
  sub_20B509D64(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 8;
  sub_20B509D64(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 16;
  sub_20B5092A4(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B13DFF8()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  v1 = sub_20B13E024(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB728], (void (*)(void *))std::exception::~exception);
}

std::bad_cast *sub_20B13E024(std::bad_cast *a1)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB8A8] + 16);
  return result;
}

void sub_20B13E04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_20B50671C(a2);
  v10 = (uint64_t)"version";
  v11 = 7;
  v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_20B5086B4(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_20B5086B4(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v10 = 2;
  v11 = a3;
  sub_20B50A184(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 16;
  sub_20B50A184(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 32;
  sub_20B5092A4(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B13E1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  sub_20B50671C(a2);
  v11 = (uint64_t)"version";
  v12 = 7;
  v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_20B5086B4(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_20B5086B4(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v11 = 2;
  v12 = a3;
  sub_20B509D64(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 8;
  sub_20B509D64(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "distortion_coeff";
    *(_QWORD *)(a2 + 80) = 16;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 5;
  v12 = a3 + 16;
  sub_20B509D64(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v9)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 36;
  sub_20B5092A4(a2, (uint64_t)&v11);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 56) = v10 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B13E3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  sub_20B50671C(a2);
  v11 = (uint64_t)"version";
  v12 = 7;
  v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_20B5086B4(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_20B5086B4(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v11 = 2;
  v12 = a3;
  sub_20B50A184(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 16;
  sub_20B50A184(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "distortion_coeff";
    *(_QWORD *)(a2 + 80) = 16;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 5;
  v12 = a3 + 32;
  sub_20B50A184(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v9)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 72;
  sub_20B5092A4(a2, (uint64_t)&v11);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 56) = v10 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B13E580(uint64_t a1, uint64_t a2, int *a3)
{
  void (*v5)(uint64_t, int *, _QWORD *, _QWORD, _QWORD);
  int *v6;
  void (*v7)(uint64_t, int *, _QWORD *, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  sub_20B51956C(*(_QWORD *)(a2 + 24));
  v13 = *a3;
  v7 = (void (*)(uint64_t, int *, _QWORD *, _QWORD, _QWORD))*((_QWORD *)a3 + 1);
  v6 = a3 + 2;
  v5 = v7;
  v14[0] = 0;
  v14[1] = 0;
  if (v7)
    v5(1, v6, v14, 0, 0);
  sub_20B13E708(a2, (uint64_t)&v13);
  if (v14[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v14[0])(0, v14, 0, 0, 0);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v8 + 48), *(_QWORD *)(v8 + 16) - v9 - 9);
  v10 = *(_QWORD *)(v8 + 48);
  if (v10)
    memmove((void *)(*(_QWORD *)(v8 + 24) + v9), *(const void **)(v8 + 56), v10);
  *(_QWORD *)(v8 + 48) = 0;
  v11 = *(_QWORD *)(v8 + 80);
  v12 = *(_QWORD *)(v8 + 88) - 8;
  *(_QWORD *)(v8 + 88) = v12;
  if (v11 == v12)
  {
    std::ostream::write();
    if (*(_BYTE *)(v8 + 40))
    {
      free(*(void **)(v8 + 24));
      *(_BYTE *)(v8 + 40) = 0;
    }
  }
}

void sub_20B13E6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B13E708(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, void *, void *);
  unsigned int *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, _QWORD, void *, void *);
  unsigned int *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  size_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  _BYTE v113[9];
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    *(_QWORD *)v113 = v5 + 16;
    sub_20B51E95C((uint64_t **)v113, v4);
  }
  else
  {
    sub_20B51EBD0((uint64_t)v113, v5 + 8);
  }
  v6 = *(_DWORD *)a2;
  switch(v6)
  {
    case 0u:
      v14 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v13 = a2 + 8;
      v12 = v14;
      if (!v14 || (v15 = (unsigned int *)v12(3, v13, 0, &unk_24C40F5E8, &unk_20B5E8904)) == 0)
        sub_20B13DFF8();
      v16 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v16 + 40))
      {
        *(_QWORD *)v113 = v16 + 16;
        sub_20B51E95C((uint64_t **)v113, 2u);
      }
      else
      {
        sub_20B51EBD0((uint64_t)v113, v16 + 8);
      }
      sub_20B51956C(*(_QWORD *)(a1 + 24));
      v45 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v45 + 40))
      {
        *(_QWORD *)v113 = v45 + 16;
        sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v15);
        sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v15 + 1);
      }
      else
      {
        v52 = *v15;
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v52);
        std::ostream::write();
        v53 = v15[1];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v53);
        std::ostream::write();
      }
      v54 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v54 + 40))
      {
        *(_QWORD *)v113 = v54 + 16;
        sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v15 + 2);
        sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v15 + 3);
      }
      else
      {
        v61 = v15[2];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v61);
        std::ostream::write();
        v62 = v15[3];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v62);
        std::ostream::write();
      }
      v58 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v58 + 40))
        goto LABEL_68;
      goto LABEL_125;
    case 1u:
      v28 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v27 = a2 + 8;
      v26 = v28;
      if (!v28 || (v20 = v26(3, v27, 0, &unk_24C40F638, &unk_20B5E89D8)) == 0)
        sub_20B13DFF8();
      v29 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v29 + 40))
      {
        *(_QWORD *)v113 = v29 + 16;
        sub_20B51E95C((uint64_t **)v113, 2u);
      }
      else
      {
        sub_20B51EBD0((uint64_t)v113, v29 + 8);
      }
      sub_20B51956C(*(_QWORD *)(a1 + 24));
      v46 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v46 + 40))
      {
        *(_QWORD *)v113 = v46 + 16;
        sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)v20);
        sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 8));
      }
      else
      {
        *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)v20);
        v113[0] = -53;
        std::ostream::write();
        v55 = *(_QWORD *)(v20 + 8);
        v113[0] = -53;
        *(_QWORD *)&v113[1] = bswap64(v55);
        std::ostream::write();
      }
      v56 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v56 + 40))
      {
        *(_QWORD *)v113 = v56 + 16;
        sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 16));
        sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 24));
      }
      else
      {
        *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v20 + 16));
        v113[0] = -53;
        std::ostream::write();
        v63 = *(_QWORD *)(v20 + 24);
        v113[0] = -53;
        *(_QWORD *)&v113[1] = bswap64(v63);
        std::ostream::write();
      }
      v58 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v58 + 40))
        goto LABEL_65;
      goto LABEL_125;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
      return;
    case 0xAu:
      v24 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v23 = a2 + 8;
      v22 = v24;
      if (!v24 || (v15 = (unsigned int *)v22(3, v23, 0, &unk_24C40F688, &unk_20B5E8AAC)) == 0)
        sub_20B13DFF8();
      v25 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v25 + 40))
      {
        *(_QWORD *)v113 = v25 + 16;
        sub_20B51E95C((uint64_t **)v113, 2u);
      }
      else
      {
        sub_20B51EBD0((uint64_t)v113, v25 + 8);
      }
      sub_20B51956C(*(_QWORD *)(a1 + 24));
      v44 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v44 + 40))
      {
        *(_QWORD *)v113 = v44 + 16;
        sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v15);
        sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v15 + 1);
      }
      else
      {
        v49 = *v15;
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v49);
        std::ostream::write();
        v50 = v15[1];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v50);
        std::ostream::write();
      }
      v51 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v51 + 40))
      {
        *(_QWORD *)v113 = v51 + 16;
        sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v15 + 2);
        sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v15 + 3);
      }
      else
      {
        v59 = v15[2];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v59);
        std::ostream::write();
        v60 = v15[3];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v60);
        std::ostream::write();
      }
      v58 = *(_QWORD *)(a1 + 24);
      if (!*(_BYTE *)(v58 + 40))
        goto LABEL_125;
LABEL_68:
      *(_QWORD *)v113 = v58 + 16;
      sub_20B51E95C((uint64_t **)v113, v15[4]);
      sub_20B51E95C((uint64_t **)v113, v15[5]);
      break;
    case 0xBu:
      v19 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v18 = a2 + 8;
      v17 = v19;
      if (!v19 || (v20 = v17(3, v18, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
        sub_20B13DFF8();
      v21 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v21 + 40))
      {
        *(_QWORD *)v113 = v21 + 16;
        sub_20B51E95C((uint64_t **)v113, 2u);
      }
      else
      {
        sub_20B51EBD0((uint64_t)v113, v21 + 8);
      }
      sub_20B51956C(*(_QWORD *)(a1 + 24));
      v43 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v43 + 40))
      {
        *(_QWORD *)v113 = v43 + 16;
        sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)v20);
        sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 8));
      }
      else
      {
        *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)v20);
        v113[0] = -53;
        std::ostream::write();
        v47 = *(_QWORD *)(v20 + 8);
        v113[0] = -53;
        *(_QWORD *)&v113[1] = bswap64(v47);
        std::ostream::write();
      }
      v48 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v48 + 40))
      {
        *(_QWORD *)v113 = v48 + 16;
        sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 16));
        sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 24));
      }
      else
      {
        *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v20 + 16));
        v113[0] = -53;
        std::ostream::write();
        v57 = *(_QWORD *)(v20 + 24);
        v113[0] = -53;
        *(_QWORD *)&v113[1] = bswap64(v57);
        std::ostream::write();
      }
      v58 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v58 + 40))
      {
LABEL_65:
        *(_QWORD *)v113 = v58 + 16;
        sub_20B51E95C((uint64_t **)v113, *(_DWORD *)(v20 + 32));
        sub_20B51E95C((uint64_t **)v113, *(_DWORD *)(v20 + 36));
      }
      else
      {
LABEL_125:
        v106 = v58 + 8;
        sub_20B51EBD0((uint64_t)v113, v58 + 8);
        sub_20B51EBD0((uint64_t)v113, v106);
      }
      break;
    default:
      switch(v6)
      {
        case 'd':
          v9 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v8 = a2 + 8;
          v7 = v9;
          if (!v9 || (v10 = (unsigned int *)v7(3, v8, 0, &unk_24C40F728, &unk_20B5E8C58)) == 0)
            sub_20B13DFF8();
          v11 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v11 + 40))
          {
            *(_QWORD *)v113 = v11 + 16;
            sub_20B51E95C((uint64_t **)v113, 2u);
          }
          else
          {
            sub_20B51EBD0((uint64_t)v113, v11 + 8);
          }
          sub_20B51956C(*(_QWORD *)(a1 + 24));
          v66 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v66 + 40))
          {
            *(_QWORD *)v113 = v66 + 16;
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10);
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 1);
          }
          else
          {
            v73 = *v10;
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v73);
            std::ostream::write();
            v74 = v10[1];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v74);
            std::ostream::write();
          }
          v75 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v75 + 40))
          {
            *(_QWORD *)v113 = v75 + 16;
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 2);
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 3);
          }
          else
          {
            v83 = v10[2];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v83);
            std::ostream::write();
            v84 = v10[3];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v84);
            std::ostream::write();
          }
          v85 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v85 + 40))
          {
            *(_QWORD *)v113 = v85 + 16;
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 4);
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 5);
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 6);
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 7);
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 8);
          }
          else
          {
            v97 = v10[4];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v97);
            std::ostream::write();
            v98 = v10[5];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v98);
            std::ostream::write();
            v99 = v10[6];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v99);
            std::ostream::write();
            v100 = v10[7];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v100);
            std::ostream::write();
            v101 = v10[8];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v101);
            std::ostream::write();
          }
          v58 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v58 + 40))
            goto LABEL_125;
          goto LABEL_119;
        case 'e':
          v41 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v40 = a2 + 8;
          v39 = v41;
          if (!v41 || (v33 = v39(3, v40, 0, &unk_24C40F778, &unk_20B5E8D30)) == 0)
            sub_20B13DFF8();
          v42 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v42 + 40))
          {
            *(_QWORD *)v113 = v42 + 16;
            sub_20B51E95C((uint64_t **)v113, 2u);
          }
          else
          {
            sub_20B51EBD0((uint64_t)v113, v42 + 8);
          }
          sub_20B51956C(*(_QWORD *)(a1 + 24));
          v67 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v67 + 40))
          {
            *(_QWORD *)v113 = v67 + 16;
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)v33);
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 8));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)v33);
            v113[0] = -53;
            std::ostream::write();
            v76 = *(_QWORD *)(v33 + 8);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v76);
            std::ostream::write();
          }
          v77 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v77 + 40))
          {
            *(_QWORD *)v113 = v77 + 16;
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 16));
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 24));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v33 + 16));
            v113[0] = -53;
            std::ostream::write();
            v86 = *(_QWORD *)(v33 + 24);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v86);
            std::ostream::write();
          }
          v87 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v87 + 40))
          {
            *(_QWORD *)v113 = v87 + 16;
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 32));
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 40));
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 48));
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 56));
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 64));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v33 + 32));
            v113[0] = -53;
            std::ostream::write();
            v102 = *(_QWORD *)(v33 + 40);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v102);
            std::ostream::write();
            v103 = *(_QWORD *)(v33 + 48);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v103);
            std::ostream::write();
            v104 = *(_QWORD *)(v33 + 56);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v104);
            std::ostream::write();
            v105 = *(_QWORD *)(v33 + 64);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v105);
            std::ostream::write();
          }
          v58 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v58 + 40))
            goto LABEL_125;
          goto LABEL_116;
        case 'n':
          v37 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v36 = a2 + 8;
          v35 = v37;
          if (!v37 || (v10 = (unsigned int *)v35(3, v36, 0, &unk_24C40F7C8, &unk_20B5E8E08)) == 0)
            sub_20B13DFF8();
          v38 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v38 + 40))
          {
            *(_QWORD *)v113 = v38 + 16;
            sub_20B51E95C((uint64_t **)v113, 2u);
          }
          else
          {
            sub_20B51EBD0((uint64_t)v113, v38 + 8);
          }
          sub_20B51956C(*(_QWORD *)(a1 + 24));
          v65 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v65 + 40))
          {
            *(_QWORD *)v113 = v65 + 16;
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10);
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 1);
          }
          else
          {
            v70 = *v10;
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v70);
            std::ostream::write();
            v71 = v10[1];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v71);
            std::ostream::write();
          }
          v72 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v72 + 40))
          {
            *(_QWORD *)v113 = v72 + 16;
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 2);
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 3);
          }
          else
          {
            v80 = v10[2];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v80);
            std::ostream::write();
            v81 = v10[3];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v81);
            std::ostream::write();
          }
          v82 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v82 + 40))
          {
            *(_QWORD *)v113 = v82 + 16;
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 4);
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 5);
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 6);
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 7);
            sub_20B51F73C((uint64_t)&v112, (uint64_t **)v113, v10 + 8);
          }
          else
          {
            v92 = v10[4];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v92);
            std::ostream::write();
            v93 = v10[5];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v93);
            std::ostream::write();
            v94 = v10[6];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v94);
            std::ostream::write();
            v95 = v10[7];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v95);
            std::ostream::write();
            v96 = v10[8];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v96);
            std::ostream::write();
          }
          v58 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v58 + 40))
            goto LABEL_125;
LABEL_119:
          *(_QWORD *)v113 = v58 + 16;
          sub_20B51E95C((uint64_t **)v113, v10[9]);
          sub_20B51E95C((uint64_t **)v113, v10[10]);
          goto LABEL_126;
        case 'o':
          v32 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v31 = a2 + 8;
          v30 = v32;
          if (!v32 || (v33 = v30(3, v31, 0, &unk_24C40F818, &unk_20B5E8EE0)) == 0)
            sub_20B13DFF8();
          v34 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v34 + 40))
          {
            *(_QWORD *)v113 = v34 + 16;
            sub_20B51E95C((uint64_t **)v113, 2u);
          }
          else
          {
            sub_20B51EBD0((uint64_t)v113, v34 + 8);
          }
          sub_20B51956C(*(_QWORD *)(a1 + 24));
          v64 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v64 + 40))
          {
            *(_QWORD *)v113 = v64 + 16;
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)v33);
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 8));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)v33);
            v113[0] = -53;
            std::ostream::write();
            v68 = *(_QWORD *)(v33 + 8);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v68);
            std::ostream::write();
          }
          v69 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v69 + 40))
          {
            *(_QWORD *)v113 = v69 + 16;
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 16));
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 24));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v33 + 16));
            v113[0] = -53;
            std::ostream::write();
            v78 = *(_QWORD *)(v33 + 24);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v78);
            std::ostream::write();
          }
          v79 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v79 + 40))
          {
            *(_QWORD *)v113 = v79 + 16;
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 32));
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 40));
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 48));
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 56));
            sub_20B51F818((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 64));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v33 + 32));
            v113[0] = -53;
            std::ostream::write();
            v88 = *(_QWORD *)(v33 + 40);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v88);
            std::ostream::write();
            v89 = *(_QWORD *)(v33 + 48);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v89);
            std::ostream::write();
            v90 = *(_QWORD *)(v33 + 56);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v90);
            std::ostream::write();
            v91 = *(_QWORD *)(v33 + 64);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v91);
            std::ostream::write();
          }
          v58 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v58 + 40))
            goto LABEL_125;
LABEL_116:
          *(_QWORD *)v113 = v58 + 16;
          sub_20B51E95C((uint64_t **)v113, *(_DWORD *)(v33 + 72));
          sub_20B51E95C((uint64_t **)v113, *(_DWORD *)(v33 + 76));
          goto LABEL_126;
        default:
          return;
      }
  }
LABEL_126:
  v107 = *(_QWORD *)(a1 + 24);
  v108 = *(_QWORD *)(*(_QWORD *)(v107 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v107 + 48), *(_QWORD *)(v107 + 16) - v108 - 9);
  v109 = *(_QWORD *)(v107 + 48);
  if (v109)
    memmove((void *)(*(_QWORD *)(v107 + 24) + v108), *(const void **)(v107 + 56), v109);
  *(_QWORD *)(v107 + 48) = 0;
  v110 = *(_QWORD *)(v107 + 80);
  v111 = *(_QWORD *)(v107 + 88) - 8;
  *(_QWORD *)(v107 + 88) = v111;
  if (v110 == v111)
  {
    std::ostream::write();
    if (*(_BYTE *)(v107 + 40))
    {
      free(*(void **)(v107 + 24));
      *(_BYTE *)(v107 + 40) = 0;
    }
  }
}

void sub_20B13FB68(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

void sub_20B13FBAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  void (*v6)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD);
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  sub_20B505FB0(a2);
  v10 = "version";
  v11 = 7;
  LODWORD(v12[0]) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, v12);
  LODWORD(v10) = *(_DWORD *)a3;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD))(a3 + 8);
  v7 = a3 + 8;
  v6 = v8;
  v11 = 0;
  v12[0] = 0;
  if (v8)
    v6(1, v7, &v11, 0, 0);
  sub_20B13FD2C(a2, (uint64_t)&v10);
  if (v11)
    ((void (*)(_QWORD, uint64_t *, _QWORD, _QWORD, _QWORD))v11)(0, &v11, 0, 0, 0);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B13FCE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B13FD2C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v9;
  int v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v19;
  int v20;
  uint64_t (*v21)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v24;
  uint64_t (*v25)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v28;
  uint64_t (*v29)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v32;
  int v33;
  uint64_t (*v34)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v41;
  int *v42;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "camera_type";
    *(_QWORD *)(a1 + 80) = 11;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v42 = (int *)a2;
  sub_20B1401D0(a1, &v42);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v13 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v12 = a2 + 8;
      v11 = v13;
      if (!v13)
        goto LABEL_55;
      v14 = v11(3, v12, 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v14)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v15 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v15)
          *(_BYTE *)(a1 + 88) = 1;
      }
      goto LABEL_18;
    case 1:
      v18 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v17 = a2 + 8;
      v16 = v18;
      if (!v18)
        goto LABEL_55;
      v19 = v16(3, v17, 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v19)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v20 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v20)
          *(_BYTE *)(a1 + 88) = 1;
      }
      goto LABEL_24;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v23 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v22 = a2 + 8;
      v21 = v23;
      if (!v23)
        goto LABEL_55;
      v14 = v21(3, v22, 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v14)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v24 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v24)
          *(_BYTE *)(a1 + 88) = 1;
      }
LABEL_18:
      sub_20B1402D8((uint64_t)&v42, a1, v14);
      break;
    case 11:
      v27 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v26 = a2 + 8;
      v25 = v27;
      if (!v27 || (v19 = v25(3, v26, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
LABEL_55:
        sub_20B13DFF8();
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v28 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v28)
          *(_BYTE *)(a1 + 88) = 1;
      }
LABEL_24:
      sub_20B140464((uint64_t)&v42, a1, v19);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_55;
          v9 = v6(3, v7, 0, &unk_24C40F728, &unk_20B5E8C58);
          if (!v9)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v10 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v10)
              *(_BYTE *)(a1 + 88) = 1;
          }
          goto LABEL_11;
        case 'e':
          v31 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v30 = a2 + 8;
          v29 = v31;
          if (!v31)
            goto LABEL_55;
          v32 = v29(3, v30, 0, &unk_24C40F778, &unk_20B5E8D30);
          if (!v32)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v33 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v33)
              *(_BYTE *)(a1 + 88) = 1;
          }
          goto LABEL_42;
        case 'n':
          v36 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v35 = a2 + 8;
          v34 = v36;
          if (!v36)
            goto LABEL_55;
          v9 = v34(3, v35, 0, &unk_24C40F7C8, &unk_20B5E8E08);
          if (!v9)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v37 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v37)
              *(_BYTE *)(a1 + 88) = 1;
          }
LABEL_11:
          sub_20B1405F0((uint64_t)&v42, a1, v9);
          break;
        case 'o':
          v40 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v39 = a2 + 8;
          v38 = v40;
          if (!v40)
            goto LABEL_55;
          v32 = v38(3, v39, 0, &unk_24C40F818, &unk_20B5E8EE0);
          if (!v32)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v41 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v41)
              *(_BYTE *)(a1 + 88) = 1;
          }
LABEL_42:
          sub_20B1407C4((uint64_t)&v42, a1, v32);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20B1401D0(uint64_t a1, int **a2)
{
  int *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B13DBC8((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B506E98(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B140294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1402B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1402C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1402D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_20B505FB0(a2);
  v10 = (uint64_t)"version";
  v11 = 7;
  v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_20B5069D0(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_20B5069D0(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v10 = 2;
  v11 = a3;
  sub_20B507CD8(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 8;
  sub_20B507CD8(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 16;
  sub_20B507488(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B140464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_20B505FB0(a2);
  v10 = (uint64_t)"version";
  v11 = 7;
  v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_20B5069D0(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_20B5069D0(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v10 = 2;
  v11 = a3;
  sub_20B5080F8(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 16;
  sub_20B5080F8(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 32;
  sub_20B507488(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1405F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  sub_20B505FB0(a2);
  v11 = (uint64_t)"version";
  v12 = 7;
  v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_20B5069D0(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_20B5069D0(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v11 = 2;
  v12 = a3;
  sub_20B507CD8(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 8;
  sub_20B507CD8(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "distortion_coeff";
    *(_QWORD *)(a2 + 80) = 16;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 5;
  v12 = a3 + 16;
  sub_20B507CD8(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v9)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 36;
  sub_20B507488(a2, (uint64_t)&v11);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 56) = v10 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1407C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  sub_20B505FB0(a2);
  v11 = (uint64_t)"version";
  v12 = 7;
  v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_20B5069D0(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_20B5069D0(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v11 = 2;
  v12 = a3;
  sub_20B5080F8(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 16;
  sub_20B5080F8(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "distortion_coeff";
    *(_QWORD *)(a2 + 80) = 16;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 5;
  v12 = a3 + 32;
  sub_20B5080F8(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v9)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 72;
  sub_20B507488(a2, (uint64_t)&v11);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 56) = v10 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

_QWORD *sub_20B140998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  void (*v6)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *result;
  int v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v11 = *(_DWORD *)a3;
  v6 = *(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))(a3 + 8);
  v4 = a3 + 8;
  v5 = v6;
  v12[0] = 0;
  v12[1] = 0;
  if (v6)
    v5(1, v4, v12, 0, 0);
  sub_20B140AE4(a2, &v11);
  if (v12[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v12[0])(0, v12, 0, 0, 0);
  v7 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v8 = *(_QWORD **)(a2 + 24);
    LOBYTE(v11) = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v8, (uint64_t)&v11, 1);
  }
  v9 = *(_QWORD **)(a2 + 24);
  LOBYTE(v11) = v7;
  result = sub_20AEC01D0(v9, (uint64_t)&v11, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20B140A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B140AE4(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t result;
  int v6;
  uint64_t (*v7)(uint64_t, int *, _QWORD, void *, void *);
  int *v8;
  uint64_t (*v9)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, int *, _QWORD, void *, void *);
  int *v12;
  uint64_t (*v13)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, int *, _QWORD, void *, void *);
  int *v16;
  uint64_t (*v17)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, int *, _QWORD, void *, void *);
  int *v20;
  uint64_t (*v21)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, int *, _QWORD, void *, void *);
  int *v35;
  uint64_t (*v36)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, int *, _QWORD, void *, void *);
  int *v50;
  uint64_t (*v51)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v52;
  uint64_t (*v53)(uint64_t, int *, _QWORD, void *, void *);
  int *v54;
  uint64_t (*v55)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, int *, _QWORD, void *, void *);
  int *v79;
  uint64_t (*v80)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  char v105;
  _QWORD *v106;
  _QWORD *v107;
  char v108;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v4, (uint64_t)&v108, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v6 = *a2;
  switch(v6)
  {
    case 0:
      v13 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v12 = a2 + 2;
      v11 = v13;
      if (!v13)
        goto LABEL_105;
      v14 = v11(3, v12, 0, &unk_24C40F5E8, &unk_20B5E8904);
      goto LABEL_14;
    case 1:
      v17 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v16 = a2 + 2;
      v15 = v17;
      if (!v17)
        goto LABEL_105;
      v18 = v15(3, v16, 0, &unk_24C40F638, &unk_20B5E89D8);
      goto LABEL_31;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return result;
    case 10:
      v21 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v20 = a2 + 2;
      v19 = v21;
      if (!v21)
        goto LABEL_105;
      v14 = v19(3, v20, 0, &unk_24C40F688, &unk_20B5E8AAC);
LABEL_14:
      if (!v14)
        goto LABEL_105;
      if (*(_QWORD *)(a1 + 40))
      {
        v22 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v22, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v23 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v23 + 1;
      if (v23 != -1)
      {
        v24 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v24, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v25 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v25 + 1;
      if (v25 != -1)
      {
        v26 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v26, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v27 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v27 + 1;
      if (v27 != -1)
      {
        v28 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v28, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v29 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v29 + 1;
      if (v29 != -1)
      {
        v30 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v30, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v31 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v31 + 1;
      if (v31 != -1)
      {
        v32 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v32, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v33 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v33 + 1;
      if (v33 == -1)
        goto LABEL_102;
      goto LABEL_101;
    case 11:
      v36 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v35 = a2 + 2;
      v34 = v36;
      if (!v36)
        goto LABEL_105;
      v18 = v34(3, v35, 0, &unk_24C40F6D8, &unk_20B5E8B80);
LABEL_31:
      if (!v18)
LABEL_105:
        sub_20B13DFF8();
      if (*(_QWORD *)(a1 + 40))
      {
        v37 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v37, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v38 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v38 + 1;
      if (v38 != -1)
      {
        v39 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v39, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v40 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v40 + 1;
      if (v40 != -1)
      {
        v41 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v41, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v42 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v42 + 1;
      if (v42 != -1)
      {
        v43 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v43, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v44 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v44 + 1;
      if (v44 != -1)
      {
        v45 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v45, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v46 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v46 + 1;
      if (v46 != -1)
      {
        v47 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v47, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v48 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v48 + 1;
      if (v48 == -1)
        goto LABEL_102;
LABEL_101:
      v103 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v103, (uint64_t)&v108, 1);
LABEL_102:
      std::ostream::operator<<();
      v104 = *(_QWORD *)(a1 + 40);
      v105 = *(_BYTE *)(a1 + 34);
      *(_QWORD *)(a1 + 40) = v104 + 1;
      if (v104 != -1)
      {
        v106 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v106, (uint64_t)&v108, 1);
      }
      v107 = *(_QWORD **)(a1 + 24);
      v108 = v105;
      result = (uint64_t)sub_20AEC01D0(v107, (uint64_t)&v108, 1);
      ++*(_QWORD *)(a1 + 40);
      return result;
    default:
      switch(v6)
      {
        case 'd':
          v9 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v8 = a2 + 2;
          v7 = v9;
          if (!v9)
            goto LABEL_105;
          v10 = v7(3, v8, 0, &unk_24C40F728, &unk_20B5E8C58);
          goto LABEL_50;
        case 'e':
          v51 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v50 = a2 + 2;
          v49 = v51;
          if (!v51)
            goto LABEL_105;
          v52 = v49(3, v50, 0, &unk_24C40F778, &unk_20B5E8D30);
          goto LABEL_77;
        case 'n':
          v55 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v54 = a2 + 2;
          v53 = v55;
          if (!v55)
            goto LABEL_105;
          v10 = v53(3, v54, 0, &unk_24C40F7C8, &unk_20B5E8E08);
LABEL_50:
          if (!v10)
            goto LABEL_105;
          if (*(_QWORD *)(a1 + 40))
          {
            v56 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v56, (uint64_t)&v108, 1);
          }
          std::ostream::operator<<();
          v57 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v57 + 1;
          if (v57 != -1)
          {
            v58 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v58, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v59 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v59 + 1;
          if (v59 != -1)
          {
            v60 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v60, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v61 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v61 + 1;
          if (v61 != -1)
          {
            v62 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v62, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v63 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v63 + 1;
          if (v63 != -1)
          {
            v64 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v64, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v65 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v65 + 1;
          if (v65 != -1)
          {
            v66 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v66, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v67 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v67 + 1;
          if (v67 != -1)
          {
            v68 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v68, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v69 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v69 + 1;
          if (v69 != -1)
          {
            v70 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v70, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v71 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v71 + 1;
          if (v71 != -1)
          {
            v72 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v72, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v73 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v73 + 1;
          if (v73 != -1)
          {
            v74 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v74, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v75 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v75 + 1;
          if (v75 != -1)
          {
            v76 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v76, (uint64_t)&v108, 1);
          }
          std::ostream::operator<<();
          v77 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v77 + 1;
          if (v77 == -1)
            goto LABEL_102;
          goto LABEL_101;
        case 'o':
          v80 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v79 = a2 + 2;
          v78 = v80;
          if (!v80)
            goto LABEL_105;
          v52 = v78(3, v79, 0, &unk_24C40F818, &unk_20B5E8EE0);
LABEL_77:
          if (!v52)
            goto LABEL_105;
          if (*(_QWORD *)(a1 + 40))
          {
            v81 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v81, (uint64_t)&v108, 1);
          }
          std::ostream::operator<<();
          v82 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v82 + 1;
          if (v82 != -1)
          {
            v83 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v83, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v84 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v84 + 1;
          if (v84 != -1)
          {
            v85 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v85, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v86 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v86 + 1;
          if (v86 != -1)
          {
            v87 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v87, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v88 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v88 + 1;
          if (v88 != -1)
          {
            v89 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v89, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v90 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v90 + 1;
          if (v90 != -1)
          {
            v91 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v91, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v92 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v92 + 1;
          if (v92 != -1)
          {
            v93 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v93, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v94 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v94 + 1;
          if (v94 != -1)
          {
            v95 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v95, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v96 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v96 + 1;
          if (v96 != -1)
          {
            v97 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v97, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v98 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v98 + 1;
          if (v98 != -1)
          {
            v99 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v99, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v100 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v100 + 1;
          if (v100 != -1)
          {
            v101 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v101, (uint64_t)&v108, 1);
          }
          std::ostream::operator<<();
          v102 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v102 + 1;
          if (v102 != -1)
            goto LABEL_101;
          goto LABEL_102;
        default:
          return result;
      }
  }
}

char *sub_20B1416C8(uint64_t a1, _QWORD *a2, int *a3)
{
  void (*v5)(uint64_t, int *, _QWORD *, _QWORD, _QWORD);
  int *v6;
  void (*v7)(uint64_t, int *, _QWORD *, _QWORD, _QWORD);
  char *result;
  int v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  sub_20B42B554(a2);
  v9 = *a3;
  v7 = (void (*)(uint64_t, int *, _QWORD *, _QWORD, _QWORD))*((_QWORD *)a3 + 1);
  v6 = a3 + 2;
  v5 = v7;
  v10[0] = 0;
  v10[1] = 0;
  if (v7)
    v5(1, v6, v10, 0, 0);
  result = sub_20B141804((uint64_t)a2, (uint64_t)&v9);
  if (v10[0])
    result = (char *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  *(_QWORD *)(*(_QWORD *)(a2[7] - 8) + a2[3] + 10) = a2[4] - (*(_QWORD *)(a2[7] - 8) + a2[3]) - 18;
  a2[7] -= 8;
  return result;
}

void sub_20B1417BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20AEC01C0(exception_object);
}

char *sub_20B141804(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  int v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, _QWORD, void *, void *);
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, _QWORD, void *, void *);
  char *v33;
  char *v34;
  uint64_t (*v35)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, _QWORD, void *, void *);
  char *v42;
  char *v43;
  uint64_t (*v44)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, _QWORD, void *, void *);
  char *v47;
  char *v48;
  uint64_t v49;
  int __src;
  uint64_t v51;

  __src = *(_DWORD *)a2;
  v4 = a1 + 24;
  result = sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v51, 4);
  v6 = *(_DWORD *)a2;
  switch(v6)
  {
    case 0:
      v13 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v12 = a2 + 8;
      v11 = v13;
      if (!v13)
        goto LABEL_29;
      v14 = v11(3, v12, 0, &unk_24C40F5E8, &unk_20B5E8904);
      goto LABEL_12;
    case 1:
      v17 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v16 = a2 + 8;
      v15 = v17;
      if (!v17)
        goto LABEL_29;
      v18 = v15(3, v16, 0, &unk_24C40F638, &unk_20B5E89D8);
      goto LABEL_16;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return result;
    case 10:
      v21 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v20 = a2 + 8;
      v19 = v21;
      if (!v21)
        goto LABEL_29;
      v14 = v19(3, v20, 0, &unk_24C40F688, &unk_20B5E8AAC);
LABEL_12:
      v22 = (char *)v14;
      if (!v14)
        goto LABEL_29;
      __src = 2;
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v51, 4);
      sub_20B42B554((_QWORD *)a1);
      v23 = v22 + 8;
      sub_20B42DB24(v4, *(char **)(a1 + 32), v22, v22 + 8, 8);
      v24 = *(char **)(a1 + 32);
      v25 = v22 + 16;
      v26 = v4;
      v27 = v23;
      v28 = v25;
      v29 = 8;
      break;
    case 11:
      v32 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v31 = a2 + 8;
      v30 = v32;
      if (!v32)
        goto LABEL_29;
      v18 = v30(3, v31, 0, &unk_24C40F6D8, &unk_20B5E8B80);
LABEL_16:
      v33 = (char *)v18;
      if (!v18)
LABEL_29:
        sub_20B13DFF8();
      __src = 2;
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v51, 4);
      sub_20B42B554((_QWORD *)a1);
      v34 = v33 + 16;
      sub_20B42DB24(v4, *(char **)(a1 + 32), v33, v33 + 16, 16);
      v24 = *(char **)(a1 + 32);
      v25 = v33 + 32;
      v26 = v4;
      v27 = v34;
      v28 = v25;
      v29 = 16;
      break;
    default:
      switch(v6)
      {
        case 'd':
          v9 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v8 = a2 + 8;
          v7 = v9;
          if (!v9)
            goto LABEL_29;
          v10 = v7(3, v8, 0, &unk_24C40F728, &unk_20B5E8C58);
          goto LABEL_22;
        case 'e':
          v37 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v36 = a2 + 8;
          v35 = v37;
          if (!v37)
            goto LABEL_29;
          v38 = v35(3, v36, 0, &unk_24C40F778, &unk_20B5E8D30);
          goto LABEL_26;
        case 'n':
          v41 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v40 = a2 + 8;
          v39 = v41;
          if (!v41)
            goto LABEL_29;
          v10 = v39(3, v40, 0, &unk_24C40F7C8, &unk_20B5E8E08);
LABEL_22:
          v42 = (char *)v10;
          if (!v10)
            goto LABEL_29;
          __src = 2;
          sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v51, 4);
          sub_20B42B554((_QWORD *)a1);
          sub_20B42DB24(v4, *(char **)(a1 + 32), v42, v42 + 8, 8);
          v43 = v42 + 16;
          sub_20B42DB24(v4, *(char **)(a1 + 32), v42 + 8, v42 + 16, 8);
          v24 = *(char **)(a1 + 32);
          v25 = v42 + 36;
          v26 = v4;
          v27 = v43;
          v28 = v25;
          v29 = 20;
          break;
        case 'o':
          v46 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v45 = a2 + 8;
          v44 = v46;
          if (!v46)
            goto LABEL_29;
          v38 = v44(3, v45, 0, &unk_24C40F818, &unk_20B5E8EE0);
LABEL_26:
          v47 = (char *)v38;
          if (!v38)
            goto LABEL_29;
          __src = 2;
          sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v51, 4);
          sub_20B42B554((_QWORD *)a1);
          sub_20B42DB24(v4, *(char **)(a1 + 32), v47, v47 + 16, 16);
          v48 = v47 + 32;
          sub_20B42DB24(v4, *(char **)(a1 + 32), v47 + 16, v47 + 32, 16);
          v24 = *(char **)(a1 + 32);
          v25 = v47 + 72;
          v26 = v4;
          v27 = v48;
          v28 = v25;
          v29 = 40;
          break;
        default:
          return result;
      }
      break;
  }
  sub_20B42DB24(v26, v24, v27, v28, v29);
  result = sub_20B42DB24(v4, *(char **)(a1 + 32), v25, v25 + 8, 8);
  v49 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v49 + 10) = *(_QWORD *)(a1 + 32) - v49 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  return result;
}

void sub_20B141C48(int *a1, uint64_t a2, uint64_t a3)
{
  void (*v6)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  int v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v9 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v9);
  if (*a1 < 1)
  {
    v9 = *(_DWORD *)a3;
    v8 = *(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))(a3 + 8);
    v7 = a3 + 8;
    v6 = v8;
    v10[0] = 0;
    v10[1] = 0;
    if (v8)
      v6(1, v7, v10, 0, 0);
    sub_20B141F0C(a2, (uint64_t)&v9);
    if (v10[0])
      ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  }
  else
  {
    sub_20B141D98(a1, a2, a3);
  }
}

void sub_20B141D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B141D98(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  void (*v7)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  int v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  if (*a1 == 2)
  {
    v10 = 2;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v10);
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v10 = *(_DWORD *)a3;
  v9 = *(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))(a3 + 8);
  v8 = a3 + 8;
  v7 = v9;
  v11[0] = 0;
  v11[1] = 0;
  if (v9)
    v7(1, v8, v11, 0, 0);
  sub_20B141F0C(a2, (uint64_t)&v10);
  if (v11[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v11[0])(0, v11, 0, 0, 0);
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

void sub_20B141EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B141F0C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t (*v5)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t (*v20)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t (*v23)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t (*v30)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, _QWORD, void *, void *);
  int *v33;

  v33 = (int *)a2;
  sub_20B14223C((_BYTE *)a1, &v33);
  v4 = *(_DWORD *)a2;
  switch(v4)
  {
    case 0:
      v11 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v10 = a2 + 8;
      v9 = v11;
      if (v11)
      {
        v12 = v9(3, v10, 0, &unk_24C40F5E8, &unk_20B5E8904);
        if (v12)
          goto LABEL_9;
      }
      goto LABEL_27;
    case 1:
      v15 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v14 = a2 + 8;
      v13 = v15;
      if (v15)
      {
        v16 = v13(3, v14, 0, &unk_24C40F638, &unk_20B5E89D8);
        if (v16)
          goto LABEL_12;
      }
      goto LABEL_27;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v19 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v18 = a2 + 8;
      v17 = v19;
      if (!v19)
        goto LABEL_27;
      v12 = v17(3, v18, 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v12)
        goto LABEL_27;
LABEL_9:
      v33 = *(int **)(a1 + 8);
      sub_20B142374((int *)&v33, a1, v12);
      break;
    case 11:
      v22 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v21 = a2 + 8;
      v20 = v22;
      if (!v22 || (v16 = v20(3, v21, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
LABEL_27:
        sub_20B13DFF8();
LABEL_12:
      v33 = *(int **)(a1 + 8);
      sub_20B142530((int *)&v33, a1, v16);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v6 = a2 + 8;
          v5 = v7;
          if (v7)
          {
            v8 = v5(3, v6, 0, &unk_24C40F728, &unk_20B5E8C58);
            if (v8)
              goto LABEL_5;
          }
          goto LABEL_27;
        case 'e':
          v25 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v24 = a2 + 8;
          v23 = v25;
          if (v25)
          {
            v26 = v23(3, v24, 0, &unk_24C40F778, &unk_20B5E8D30);
            if (v26)
              goto LABEL_21;
          }
          goto LABEL_27;
        case 'n':
          v29 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v28 = a2 + 8;
          v27 = v29;
          if (!v29)
            goto LABEL_27;
          v8 = v27(3, v28, 0, &unk_24C40F7C8, &unk_20B5E8E08);
          if (!v8)
            goto LABEL_27;
LABEL_5:
          v33 = *(int **)(a1 + 8);
          sub_20B1426EC((int *)&v33, a1, v8);
          break;
        case 'o':
          v32 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v31 = a2 + 8;
          v30 = v32;
          if (!v32)
            goto LABEL_27;
          v26 = v30(3, v31, 0, &unk_24C40F818, &unk_20B5E8EE0);
          if (!v26)
            goto LABEL_27;
LABEL_21:
          v33 = *(int **)(a1 + 8);
          sub_20B1429B8((int *)&v33, a1, v26);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20B14223C(_BYTE *a1, int **a2)
{
  int *v3;
  void *__p[2];
  char v5;
  _DWORD v6[6];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_20B13DBC8((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_20AECFAB8();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _DWORD *))off_24C40DC60[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _DWORD *))off_24C40DC48[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _DWORD *))(*(_QWORD *)a1 + 104))(a1, v6);
  }
}

void sub_20B142330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B14234C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B142360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B142374(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  int v8;
  int v9;

  v8 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
  if (*a1 < 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
  }
  else
  {
    if (*a1 == 2 && (v9 = 2, (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v9), *a1 < 1))
    {
      v6 = 0;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
    if (v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  }
  return result;
}

uint64_t sub_20B142530(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  int v8;
  int v9;

  v8 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
  if (*a1 < 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 32);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
  }
  else
  {
    if (*a1 == 2 && (v9 = 2, (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v9), *a1 < 1))
    {
      v6 = 0;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 32);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
    if (v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  }
  return result;
}

uint64_t sub_20B1426EC(int *a1, uint64_t a2, uint64_t a3)
{
  int v7;

  v7 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 >= 1)
    return sub_20B14284C(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 40);
}

uint64_t sub_20B14284C(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  int v8;

  v5 = *a1;
  if (*a1 == 2)
  {
    v8 = 2;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 40);
  if (v5 >= 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  return result;
}

uint64_t sub_20B1429B8(int *a1, uint64_t a2, uint64_t a3)
{
  int v7;

  v7 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 >= 1)
    return sub_20B142B18(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 56);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 72);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 76);
}

uint64_t sub_20B142B18(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  int v8;

  v5 = *a1;
  if (*a1 == 2)
  {
    v8 = 2;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 56);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 72);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 76);
  if (v5 >= 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  return result;
}

uint64_t sub_20B142C84(uint64_t a1, unint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_20B50AC94(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_20B4552C4(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_20B142D80((uint64_t)&v11, a1, a2);
  else
    sub_20B142F7C(a1, a2);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

_QWORD *sub_20B142D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_20B448738(&v14);
  sub_20B441634((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24C41D808;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20B145CC8(a2, (unint64_t)&v17);
  sub_20B442B90(&v17, v12);
  sub_20B443C18((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24C41D808;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_20AFA2CC8((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_20B142F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B142F7C(uint64_t a1, unint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v7;
  uint64_t (*v8)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v9;
  int v10;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v15;
  uint64_t (*v16)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v17;
  int v18;
  int v19;
  char *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v23;
  uint64_t (*v24)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  unsigned int v29;
  uint64_t (*v30)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v31;
  uint64_t (*v32)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v33;
  int v34;
  int v35;
  char *v36;
  unsigned int v37;
  uint64_t (*v38)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v39;
  uint64_t (*v40)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  unsigned int v45;
  uint64_t (*v46)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v47;
  uint64_t (*v48)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v49;
  int v50;
  int v51;
  char *v52;
  unsigned int v53;
  uint64_t (*v54)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v55;
  uint64_t (*v56)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v57;
  int v58;
  int v59;
  char *v60;
  unsigned int v61;
  uint64_t (*v62)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v63;
  uint64_t (*v64)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v65;
  int v66;
  int v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *exception;
  unint64_t v73;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "camera_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v73 = a2;
  sub_20B14368C((uint64_t *)a1, (_DWORD **)&v73);
  sub_20B44502C((void (**)(int))a2);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v16 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v15 = a2 + 8;
      v14 = v16;
      if (!v16)
        goto LABEL_95;
      v17 = (float *)v14(3, v15, 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v17)
        goto LABEL_95;
      v18 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v18)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50AC94(a1);
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      v20 = (char *)sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B4552C4(v20, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v21 = 2;
      else
        v21 = v73;
      sub_20B14387C(a1, v17, v21);
      break;
    case 1:
      v24 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v23 = a2 + 8;
      v22 = v24;
      if (!v24)
        goto LABEL_95;
      v25 = v22(3, v23, 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v25)
        goto LABEL_95;
      v26 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50AC94(a1);
      v27 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v27)
        *(_BYTE *)(a1 + 104) = 1;
      v28 = (char *)sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B4552C4(v28, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v29 = 2;
      else
        v29 = v73;
      sub_20B143C80(a1, v25, v29);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v32 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v31 = a2 + 8;
      v30 = v32;
      if (!v32)
        goto LABEL_95;
      v33 = (float *)v30(3, v31, 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v33)
        goto LABEL_95;
      v34 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v34)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50AC94(a1);
      v35 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v35)
        *(_BYTE *)(a1 + 104) = 1;
      v36 = (char *)sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B4552C4(v36, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v37 = 2;
      else
        v37 = v73;
      sub_20B1440B8(a1, v33, v37);
      break;
    case 11:
      v40 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v39 = a2 + 8;
      v38 = v40;
      if (!v40 || (v41 = v38(3, v39, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
LABEL_95:
        sub_20B13DFF8();
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v42)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50AC94(a1);
      v43 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v43)
        *(_BYTE *)(a1 + 104) = 1;
      v44 = (char *)sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B4552C4(v44, &v73);
      if (HIDWORD(v73))
      {
LABEL_96:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      if (v73 >= 2)
        v45 = 2;
      else
        v45 = v73;
      sub_20B1444BC(a1, v41, v45);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_95;
          v9 = (float *)v6(3, v7, 0, &unk_24C40F728, &unk_20B5E8C58);
          if (!v9)
            goto LABEL_95;
          v10 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v10)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50AC94(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_20B50AF4C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B4552C4(v12, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v13 = 2;
          else
            v13 = v73;
          sub_20B1448F4(a1, v9, v13);
          break;
        case 'e':
          v48 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v47 = a2 + 8;
          v46 = v48;
          if (!v48)
            goto LABEL_95;
          v49 = (double *)v46(3, v47, 0, &unk_24C40F778, &unk_20B5E8D30);
          if (!v49)
            goto LABEL_95;
          v50 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v50)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50AC94(a1);
          v51 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v51)
            *(_BYTE *)(a1 + 104) = 1;
          v52 = (char *)sub_20B50AF4C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B4552C4(v52, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v53 = 2;
          else
            v53 = v73;
          sub_20B144DA0(a1, v49, v53);
          break;
        case 'n':
          v56 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v55 = a2 + 8;
          v54 = v56;
          if (!v56)
            goto LABEL_95;
          v57 = (float *)v54(3, v55, 0, &unk_24C40F7C8, &unk_20B5E8E08);
          if (!v57)
            goto LABEL_95;
          v58 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v58)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50AC94(a1);
          v59 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v59)
            *(_BYTE *)(a1 + 104) = 1;
          v60 = (char *)sub_20B50AF4C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B4552C4(v60, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v61 = 2;
          else
            v61 = v73;
          sub_20B1452BC(a1, v57, v61);
          break;
        case 'o':
          v64 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v63 = a2 + 8;
          v62 = v64;
          if (!v64)
            goto LABEL_95;
          v65 = (double *)v62(3, v63, 0, &unk_24C40F818, &unk_20B5E8EE0);
          if (!v65)
            goto LABEL_95;
          v66 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v66)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50AC94(a1);
          v67 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v67)
            *(_BYTE *)(a1 + 104) = 1;
          v68 = (char *)sub_20B50AF4C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B4552C4(v68, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v69 = 2;
          else
            v69 = v73;
          sub_20B145768(a1, v65, v69);
          break;
        default:
          return;
      }
      break;
  }
  v70 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v70 - 8);
  v71 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v71 - 8);
  *(_QWORD *)(a1 + 48) = v70 - 8;
  *(_QWORD *)(a1 + 72) = v71 - 8;
}

void sub_20B14368C(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AF4C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B4557C4(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B4457D0((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B1437F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B14387C(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20B1439A0((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C420(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C420(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 4;
    v10 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C014(v10, (uint64_t)v11);
  }
}

void sub_20B1439A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  float32x2_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int8x16_t *v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D588;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5D38;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5C88;
  v42 = (int8x16_t *)(v5 + 24);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C420(v8, (float *)&v39);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C420(v10, (float *)&v40);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v44[0] = 2;
  v44[1] = &v41;
  v12 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C014(v12, (uint64_t)v44);
  v13 = v41;
  v14 = (float32x2_t *)v42;
  v15 = v39;
  v16 = v40;
  __asm { FMOV            V2.2S, #1.0 }
  v22 = vdiv_f32(_D2, v39);
  v23 = vmul_f32(v22, vneg_f32(v40));
  v24 = vzip1_s32((int32x2_t)v39, (int32x2_t)v40);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v42[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v39, (int32x2_t)v40), 0x20uLL), v25);
  v14[4] = v22;
  v14[5] = v23;
  v14[6].i32[0] = v15.i32[0];
  v14[7] = 0;
  v14[6].i32[1] = 0;
  v14[8].i32[0] = v15.i32[1];
  v14[8].i32[1] = 0;
  v14[9] = v16;
  v14[10].i32[0] = 1065353216;
  v14[11] = v13;
  v26 = v42;
  v38 = v42[1];
  v27 = v42[5].i64[1];
  v28 = (char *)operator new(0x78uLL);
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = &off_24C41D6C8;
  v29 = v26[1];
  *((_QWORD *)v28 + 4) = &off_24C3F5D38;
  *(int8x16_t *)(v28 + 40) = v29;
  *(int8x16_t *)(v28 + 56) = v26[2];
  v30 = v26[3];
  v31 = v26[4];
  *((_DWORD *)v28 + 26) = v26[5].i32[0];
  *(int8x16_t *)(v28 + 88) = v31;
  *(int8x16_t *)(v28 + 72) = v30;
  *((_QWORD *)v28 + 3) = &off_24C3F5C88;
  *((_QWORD *)v28 + 14) = v27;
  *(int8x16_t *)a3 = v38;
  *(_QWORD *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v28 + 24;
  v32 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v28;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20B143C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B143C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B143C80(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20B143DA4((uint64_t)v11, a1, (_QWORD *)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C528(v6, (double *)a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C528(v8, (double *)(a2 + 16));
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 32;
    v10 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C014(v10, (uint64_t)v11);
  }
}

void sub_20B143DA4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  _QWORD v42[2];
  __int128 v43;

  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D628;
  v43 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5508;
  *(_OWORD *)(v5 + 56) = v43;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v41 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F57F8;
  v40 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C528(v8, (double *)&v37);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C528(v10, (double *)&v38);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v42[0] = 2;
  v42[1] = &v39;
  v12 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C014(v12, (uint64_t)v42);
  v13 = v37;
  v14 = v38;
  v15 = 1.0 / *(double *)&v37;
  v16 = v39;
  v17 = v40;
  *((_OWORD *)v40 + 1) = v37;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((_QWORD *)v17 + 10) = v13;
  *((_QWORD *)v17 + 12) = 0;
  *((_QWORD *)v17 + 13) = 0;
  *((_QWORD *)v17 + 11) = 0;
  *((_QWORD *)v17 + 14) = *((_QWORD *)&v13 + 1);
  *((_QWORD *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((_QWORD *)v17 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v17 + 19) = v16;
  v18 = v40;
  v19 = v40 + 16;
  v20 = *((_QWORD *)v40 + 2);
  v21 = *((_QWORD *)v40 + 3);
  v22 = v40 + 32;
  v23 = *((_QWORD *)v40 + 4);
  v24 = *((_QWORD *)v40 + 5);
  v25 = *((_QWORD *)v40 + 19);
  v26 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = &off_24C41D768;
  *((_QWORD *)v26 + 4) = &off_24C3F5508;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  v28 = *((_OWORD *)v18 + 6);
  v29 = *((_OWORD *)v18 + 7);
  v30 = *((_OWORD *)v18 + 8);
  *((_QWORD *)v26 + 21) = *((_QWORD *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((_QWORD *)v26 + 22) = v25;
  *((_QWORD *)v26 + 3) = &off_24C3F57F8;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v41;
  if (v41)
  {
    v35 = (unint64_t *)&v41->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_20B144090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1440A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1440B8(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20B1441DC((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C420(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C420(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 4;
    v10 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C014(v10, (uint64_t)v11);
  }
}

void sub_20B1441DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  float32x2_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int8x16_t *v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D5D8;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5D38;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5998;
  v42 = (int8x16_t *)(v5 + 24);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C420(v8, (float *)&v39);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C420(v10, (float *)&v40);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v44[0] = 2;
  v44[1] = &v41;
  v12 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C014(v12, (uint64_t)v44);
  v13 = v41;
  v14 = (float32x2_t *)v42;
  v15 = v39;
  v16 = v40;
  __asm { FMOV            V2.2S, #1.0 }
  v22 = vdiv_f32(_D2, v39);
  v23 = vmul_f32(v22, vneg_f32(v40));
  v24 = vzip1_s32((int32x2_t)v39, (int32x2_t)v40);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v42[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v39, (int32x2_t)v40), 0x20uLL), v25);
  v14[4] = v22;
  v14[5] = v23;
  v14[6].i32[0] = v15.i32[0];
  v14[7] = 0;
  v14[6].i32[1] = 0;
  v14[8].i32[0] = v15.i32[1];
  v14[8].i32[1] = 0;
  v14[9] = v16;
  v14[10].i32[0] = 1065353216;
  v14[11] = v13;
  v26 = v42;
  v38 = v42[1];
  v27 = v42[5].i64[1];
  v28 = (char *)operator new(0x78uLL);
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = &off_24C41D718;
  v29 = v26[1];
  *((_QWORD *)v28 + 4) = &off_24C3F5D38;
  *(int8x16_t *)(v28 + 40) = v29;
  *(int8x16_t *)(v28 + 56) = v26[2];
  v30 = v26[3];
  v31 = v26[4];
  *((_DWORD *)v28 + 26) = v26[5].i32[0];
  *(int8x16_t *)(v28 + 88) = v31;
  *(int8x16_t *)(v28 + 72) = v30;
  *((_QWORD *)v28 + 3) = &off_24C3F5998;
  *((_QWORD *)v28 + 14) = v27;
  *(int8x16_t *)a3 = v38;
  *(_QWORD *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v28 + 24;
  v32 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v28;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20B144494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1444A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1444BC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20B1445E0((uint64_t)v11, a1, (_QWORD *)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C528(v6, (double *)a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C528(v8, (double *)(a2 + 16));
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 32;
    v10 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C014(v10, (uint64_t)v11);
  }
}

void sub_20B1445E0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  _QWORD v42[2];
  __int128 v43;

  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D678;
  v43 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5508;
  *(_OWORD *)(v5 + 56) = v43;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v41 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F55F8;
  v40 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C528(v8, (double *)&v37);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C528(v10, (double *)&v38);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v42[0] = 2;
  v42[1] = &v39;
  v12 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C014(v12, (uint64_t)v42);
  v13 = v37;
  v14 = v38;
  v15 = 1.0 / *(double *)&v37;
  v16 = v39;
  v17 = v40;
  *((_OWORD *)v40 + 1) = v37;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((_QWORD *)v17 + 10) = v13;
  *((_QWORD *)v17 + 12) = 0;
  *((_QWORD *)v17 + 13) = 0;
  *((_QWORD *)v17 + 11) = 0;
  *((_QWORD *)v17 + 14) = *((_QWORD *)&v13 + 1);
  *((_QWORD *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((_QWORD *)v17 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v17 + 19) = v16;
  v18 = v40;
  v19 = v40 + 16;
  v20 = *((_QWORD *)v40 + 2);
  v21 = *((_QWORD *)v40 + 3);
  v22 = v40 + 32;
  v23 = *((_QWORD *)v40 + 4);
  v24 = *((_QWORD *)v40 + 5);
  v25 = *((_QWORD *)v40 + 19);
  v26 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = &off_24C41D7B8;
  *((_QWORD *)v26 + 4) = &off_24C3F5508;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  v28 = *((_OWORD *)v18 + 6);
  v29 = *((_OWORD *)v18 + 7);
  v30 = *((_OWORD *)v18 + 8);
  *((_QWORD *)v26 + 21) = *((_QWORD *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((_QWORD *)v26 + 22) = v25;
  *((_QWORD *)v26 + 3) = &off_24C3F55F8;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v41;
  if (v41)
  {
    v35 = (unint64_t *)&v41->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_20B1448CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1448E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1448F4(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20B144A58((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C420(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C420(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C420(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C014(v12, (uint64_t)v13);
  }
}

void sub_20B144A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  float v33[8];
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v32 = 0u;
  memset(v33, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D2C0;
  v37 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5A28;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v37;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5B58;
  v34 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C420(v8, (float *)&v32);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C420(v10, (float *)&v32 + 2);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C420(v12, v33);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v36 = 2;
  *((_QWORD *)&v36 + 1) = &v33[5];
  v14 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C014(v14, (uint64_t)&v36);
  v15 = sub_20B446E78((uint64_t)&v32);
  v31 = *(_OWORD *)(v15 + 16);
  v36 = *(_OWORD *)(v15 + 32);
  LODWORD(v37) = *(_DWORD *)(v15 + 48);
  v16 = *(_QWORD *)(v15 + 120);
  v17 = (char *)operator new(0x98uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_24C41D400;
  v18 = *(_QWORD *)(v15 + 52);
  v19 = *(_WORD *)(v15 + 112);
  v20 = *(_OWORD *)(v15 + 16);
  *((_QWORD *)v17 + 4) = &off_24C3F5A28;
  *(_OWORD *)(v17 + 40) = v20;
  v21 = *(_OWORD *)(v15 + 32);
  *((_DWORD *)v17 + 18) = *(_DWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 56) = v21;
  *(_QWORD *)(v17 + 76) = v18;
  *(_OWORD *)(v17 + 84) = *(_OWORD *)(v15 + 60);
  v22 = *(_OWORD *)(v15 + 76);
  v23 = *(_OWORD *)(v15 + 92);
  *((_DWORD *)v17 + 33) = *(_DWORD *)(v15 + 108);
  *(_OWORD *)(v17 + 116) = v23;
  *(_OWORD *)(v17 + 100) = v22;
  *((_WORD *)v17 + 68) = v19;
  *((_QWORD *)v17 + 18) = v16;
  *((_QWORD *)v17 + 3) = &off_24C3F5B58;
  v24 = v36;
  *(_OWORD *)a3 = v31;
  *(_OWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 32) = v37;
  *(_QWORD *)(a3 + 36) = v16;
  v25 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v17 + 24;
  *(_QWORD *)(a3 + 56) = v17;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20B144D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B144D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B144DA0(uint64_t a1, double *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20B144F04((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C528(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C528(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C528(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C014(v12, (uint64_t)v13);
  }
}

void sub_20B144F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v41 = 0u;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  v38 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D360;
  v48 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v47;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F58C8;
  v42 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C528(v8, (double *)&v38);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C528(v10, (double *)&v39);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C528(v12, (double *)v40);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v44 = 2;
  *((_QWORD *)&v44 + 1) = (char *)&v41 + 8;
  v14 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C014(v14, (uint64_t)&v44);
  v15 = sub_20B446FA0((uint64_t)&v38);
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  v19 = *(_QWORD *)(v15 + 40);
  v20 = *(_OWORD *)(v15 + 64);
  v44 = *(_OWORD *)(v15 + 48);
  v45 = v20;
  *(_QWORD *)&v46 = *(_QWORD *)(v15 + 80);
  v21 = *(_QWORD *)(v15 + 216);
  v22 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24C41D4A0;
  v23 = *(_WORD *)(v15 + 208);
  *((_QWORD *)v22 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v15 + 16);
  *(_OWORD *)(v22 + 56) = *(_OWORD *)(v15 + 32);
  v24 = *(_OWORD *)(v15 + 48);
  v25 = *(_OWORD *)(v15 + 64);
  *((_QWORD *)v22 + 13) = *(_QWORD *)(v15 + 80);
  *(_OWORD *)(v22 + 88) = v25;
  *(_OWORD *)(v22 + 72) = v24;
  v26 = *(_QWORD *)(v15 + 88);
  *((_DWORD *)v22 + 30) = *(_DWORD *)(v15 + 96);
  *((_QWORD *)v22 + 14) = v26;
  v27 = *(_OWORD *)(v15 + 120);
  *((_OWORD *)v22 + 8) = *(_OWORD *)(v15 + 104);
  *((_OWORD *)v22 + 9) = v27;
  v28 = *(_OWORD *)(v15 + 152);
  v29 = *(_OWORD *)(v15 + 168);
  v30 = *(_OWORD *)(v15 + 184);
  *((_QWORD *)v22 + 28) = *(_QWORD *)(v15 + 200);
  *((_OWORD *)v22 + 12) = v29;
  *((_OWORD *)v22 + 13) = v30;
  *((_OWORD *)v22 + 11) = v28;
  *((_OWORD *)v22 + 10) = *(_OWORD *)(v15 + 136);
  *((_WORD *)v22 + 116) = v23;
  *((_QWORD *)v22 + 30) = v21;
  *((_QWORD *)v22 + 3) = &off_24C3F58C8;
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v19;
  v31 = v45;
  *(_OWORD *)(a3 + 32) = v44;
  *(_OWORD *)(a3 + 48) = v31;
  *(_QWORD *)(a3 + 64) = v46;
  *(_QWORD *)(a3 + 72) = v21;
  v32 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v22 + 24;
  *(_QWORD *)(a3 + 88) = v22;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20B145294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1452A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1452BC(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20B145420((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C420(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C420(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C420(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C014(v12, (uint64_t)v13);
  }
}

void sub_20B145420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  float v33[8];
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v32 = 0u;
  memset(v33, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D310;
  v37 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5A28;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v37;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5A88;
  v34 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C420(v8, (float *)&v32);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C420(v10, (float *)&v32 + 2);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C420(v12, v33);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v36 = 2;
  *((_QWORD *)&v36 + 1) = &v33[5];
  v14 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C014(v14, (uint64_t)&v36);
  v15 = sub_20B446E78((uint64_t)&v32);
  v31 = *(_OWORD *)(v15 + 16);
  v36 = *(_OWORD *)(v15 + 32);
  LODWORD(v37) = *(_DWORD *)(v15 + 48);
  v16 = *(_QWORD *)(v15 + 120);
  v17 = (char *)operator new(0x98uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_24C41D450;
  v18 = *(_QWORD *)(v15 + 52);
  v19 = *(_WORD *)(v15 + 112);
  v20 = *(_OWORD *)(v15 + 16);
  *((_QWORD *)v17 + 4) = &off_24C3F5A28;
  *(_OWORD *)(v17 + 40) = v20;
  v21 = *(_OWORD *)(v15 + 32);
  *((_DWORD *)v17 + 18) = *(_DWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 56) = v21;
  *(_QWORD *)(v17 + 76) = v18;
  *(_OWORD *)(v17 + 84) = *(_OWORD *)(v15 + 60);
  v22 = *(_OWORD *)(v15 + 76);
  v23 = *(_OWORD *)(v15 + 92);
  *((_DWORD *)v17 + 33) = *(_DWORD *)(v15 + 108);
  *(_OWORD *)(v17 + 116) = v23;
  *(_OWORD *)(v17 + 100) = v22;
  *((_WORD *)v17 + 68) = v19;
  *((_QWORD *)v17 + 18) = v16;
  *((_QWORD *)v17 + 3) = &off_24C3F5A88;
  v24 = v36;
  *(_OWORD *)a3 = v31;
  *(_OWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 32) = v37;
  *(_QWORD *)(a3 + 36) = v16;
  v25 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v17 + 24;
  *(_QWORD *)(a3 + 56) = v17;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20B145740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B145754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B145768(uint64_t a1, double *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20B1458CC((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C528(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C528(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C528(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50C014(v12, (uint64_t)v13);
  }
}

void sub_20B1458CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v41 = 0u;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  v38 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D3B0;
  v48 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v47;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5728;
  v42 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C528(v8, (double *)&v38);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C528(v10, (double *)&v39);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C528(v12, (double *)v40);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v44 = 2;
  *((_QWORD *)&v44 + 1) = (char *)&v41 + 8;
  v14 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50C014(v14, (uint64_t)&v44);
  v15 = sub_20B446FA0((uint64_t)&v38);
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  v19 = *(_QWORD *)(v15 + 40);
  v20 = *(_OWORD *)(v15 + 64);
  v44 = *(_OWORD *)(v15 + 48);
  v45 = v20;
  *(_QWORD *)&v46 = *(_QWORD *)(v15 + 80);
  v21 = *(_QWORD *)(v15 + 216);
  v22 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24C41D4F0;
  v23 = *(_WORD *)(v15 + 208);
  *((_QWORD *)v22 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v15 + 16);
  *(_OWORD *)(v22 + 56) = *(_OWORD *)(v15 + 32);
  v24 = *(_OWORD *)(v15 + 48);
  v25 = *(_OWORD *)(v15 + 64);
  *((_QWORD *)v22 + 13) = *(_QWORD *)(v15 + 80);
  *(_OWORD *)(v22 + 88) = v25;
  *(_OWORD *)(v22 + 72) = v24;
  v26 = *(_QWORD *)(v15 + 88);
  *((_DWORD *)v22 + 30) = *(_DWORD *)(v15 + 96);
  *((_QWORD *)v22 + 14) = v26;
  v27 = *(_OWORD *)(v15 + 120);
  *((_OWORD *)v22 + 8) = *(_OWORD *)(v15 + 104);
  *((_OWORD *)v22 + 9) = v27;
  v28 = *(_OWORD *)(v15 + 152);
  v29 = *(_OWORD *)(v15 + 168);
  v30 = *(_OWORD *)(v15 + 184);
  *((_QWORD *)v22 + 28) = *(_QWORD *)(v15 + 200);
  *((_OWORD *)v22 + 12) = v29;
  *((_OWORD *)v22 + 13) = v30;
  *((_OWORD *)v22 + 11) = v28;
  *((_OWORD *)v22 + 10) = *(_OWORD *)(v15 + 136);
  *((_WORD *)v22 + 116) = v23;
  *((_QWORD *)v22 + 30) = v21;
  *((_QWORD *)v22 + 3) = &off_24C3F5728;
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v19;
  v31 = v45;
  *(_OWORD *)(a3 + 32) = v44;
  *(_OWORD *)(a3 + 48) = v31;
  *(_QWORD *)(a3 + 64) = v46;
  *(_QWORD *)(a3 + 72) = v21;
  v32 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v22 + 24;
  *(_QWORD *)(a3 + 88) = v22;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20B145C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B145C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B145C84(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 8);
  if (v2)
    v2(0, a1 + 8, 0, 0, 0);
  return a1;
}

void sub_20B145CC8(uint64_t a1, unint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v7;
  uint64_t (*v8)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v9;
  int v10;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v15;
  uint64_t (*v16)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v17;
  int v18;
  int v19;
  char *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v23;
  uint64_t (*v24)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  unsigned int v29;
  uint64_t (*v30)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v31;
  uint64_t (*v32)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v33;
  int v34;
  int v35;
  char *v36;
  unsigned int v37;
  uint64_t (*v38)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v39;
  uint64_t (*v40)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  unsigned int v45;
  uint64_t (*v46)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v47;
  uint64_t (*v48)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v49;
  int v50;
  int v51;
  char *v52;
  unsigned int v53;
  uint64_t (*v54)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v55;
  uint64_t (*v56)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v57;
  int v58;
  int v59;
  char *v60;
  unsigned int v61;
  uint64_t (*v62)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v63;
  uint64_t (*v64)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v65;
  int v66;
  int v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *exception;
  unint64_t v73;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "camera_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v73 = a2;
  sub_20B14368C((uint64_t *)a1, (_DWORD **)&v73);
  sub_20B44354C((void (**)(int))a2);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v16 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v15 = a2 + 8;
      v14 = v16;
      if (!v16)
        goto LABEL_95;
      v17 = (float *)v14(3, v15, 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v17)
        goto LABEL_95;
      v18 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v18)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50AC94(a1);
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      v20 = (char *)sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B4552C4(v20, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v21 = 2;
      else
        v21 = v73;
      sub_20B14387C(a1, v17, v21);
      break;
    case 1:
      v24 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v23 = a2 + 8;
      v22 = v24;
      if (!v24)
        goto LABEL_95;
      v25 = v22(3, v23, 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v25)
        goto LABEL_95;
      v26 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50AC94(a1);
      v27 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v27)
        *(_BYTE *)(a1 + 104) = 1;
      v28 = (char *)sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B4552C4(v28, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v29 = 2;
      else
        v29 = v73;
      sub_20B143C80(a1, v25, v29);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v32 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v31 = a2 + 8;
      v30 = v32;
      if (!v32)
        goto LABEL_95;
      v33 = (float *)v30(3, v31, 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v33)
        goto LABEL_95;
      v34 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v34)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50AC94(a1);
      v35 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v35)
        *(_BYTE *)(a1 + 104) = 1;
      v36 = (char *)sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B4552C4(v36, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v37 = 2;
      else
        v37 = v73;
      sub_20B1440B8(a1, v33, v37);
      break;
    case 11:
      v40 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v39 = a2 + 8;
      v38 = v40;
      if (!v40 || (v41 = v38(3, v39, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
LABEL_95:
        sub_20B13DFF8();
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v42)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50AC94(a1);
      v43 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v43)
        *(_BYTE *)(a1 + 104) = 1;
      v44 = (char *)sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B4552C4(v44, &v73);
      if (HIDWORD(v73))
      {
LABEL_96:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      if (v73 >= 2)
        v45 = 2;
      else
        v45 = v73;
      sub_20B1444BC(a1, v41, v45);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_95;
          v9 = (float *)v6(3, v7, 0, &unk_24C40F728, &unk_20B5E8C58);
          if (!v9)
            goto LABEL_95;
          v10 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v10)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50AC94(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_20B50AF4C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B4552C4(v12, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v13 = 2;
          else
            v13 = v73;
          sub_20B1448F4(a1, v9, v13);
          break;
        case 'e':
          v48 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v47 = a2 + 8;
          v46 = v48;
          if (!v48)
            goto LABEL_95;
          v49 = (double *)v46(3, v47, 0, &unk_24C40F778, &unk_20B5E8D30);
          if (!v49)
            goto LABEL_95;
          v50 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v50)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50AC94(a1);
          v51 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v51)
            *(_BYTE *)(a1 + 104) = 1;
          v52 = (char *)sub_20B50AF4C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B4552C4(v52, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v53 = 2;
          else
            v53 = v73;
          sub_20B144DA0(a1, v49, v53);
          break;
        case 'n':
          v56 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v55 = a2 + 8;
          v54 = v56;
          if (!v56)
            goto LABEL_95;
          v57 = (float *)v54(3, v55, 0, &unk_24C40F7C8, &unk_20B5E8E08);
          if (!v57)
            goto LABEL_95;
          v58 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v58)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50AC94(a1);
          v59 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v59)
            *(_BYTE *)(a1 + 104) = 1;
          v60 = (char *)sub_20B50AF4C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B4552C4(v60, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v61 = 2;
          else
            v61 = v73;
          sub_20B1452BC(a1, v57, v61);
          break;
        case 'o':
          v64 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v63 = a2 + 8;
          v62 = v64;
          if (!v64)
            goto LABEL_95;
          v65 = (double *)v62(3, v63, 0, &unk_24C40F818, &unk_20B5E8EE0);
          if (!v65)
            goto LABEL_95;
          v66 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v66)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50AC94(a1);
          v67 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v67)
            *(_BYTE *)(a1 + 104) = 1;
          v68 = (char *)sub_20B50AF4C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B4552C4(v68, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v69 = 2;
          else
            v69 = v73;
          sub_20B145768(a1, v65, v69);
          break;
        default:
          return;
      }
      break;
  }
  v70 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v70 - 8);
  v71 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v71 - 8);
  *(_QWORD *)(a1 + 48) = v70 - 8;
  *(_QWORD *)(a1 + 72) = v71 - 8;
}

_QWORD *sub_20B1463D8(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  char v8;

  v7 = 2;
  sub_20B518854(a1[6], &v7);
  if (v7 <= 1)
  {
    sub_20B1464B0((uint64_t)&v8, a1, (uint64_t)a2);
    return a1;
  }
  else
  {
    sub_20B0DD290(a1 + 2);
    sub_20B1466AC(a1, a2);
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
    return a1;
  }
}

_QWORD *sub_20B1464B0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_20B448738(&v14);
  sub_20B441634((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24C41D808;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20B148BD8(a2, &v17);
  sub_20B442B90(&v17, v12);
  sub_20B443C18((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24C41D808;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_20AFA2CC8((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_20B146634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1466AC(_QWORD *a1, int *a2)
{
  int v4;
  uint64_t (*v5)(uint64_t, int *, _QWORD, void *, void *);
  int *v6;
  uint64_t (*v7)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, int *, _QWORD, void *, void *);
  int *v10;
  uint64_t (*v11)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, int *, _QWORD, void *, void *);
  int *v14;
  uint64_t (*v15)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, int *, _QWORD, void *, void *);
  int *v18;
  uint64_t (*v19)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, int *, _QWORD, void *, void *);
  int *v22;
  uint64_t (*v23)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, int *, _QWORD, void *, void *);
  int *v26;
  uint64_t (*v27)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, int *, _QWORD, void *, void *);
  int *v30;
  uint64_t (*v31)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, int *, _QWORD, void *, void *);
  int *v34;
  uint64_t (*v35)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v36;
  unsigned int v37;

  v37 = 0;
  sub_20B518854(a1[6], &v37);
  *a2 = v37;
  sub_20B44502C((void (**)(int))a2);
  v4 = *a2;
  switch(v4)
  {
    case 0:
      v11 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v10 = a2 + 2;
      v9 = v11;
      if (!v11)
        goto LABEL_28;
      v12 = v9(3, v10, 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v12)
        goto LABEL_28;
      v37 = 2;
      sub_20B518854(a1[6], &v37);
      sub_20B146A90((uint64_t)&v37, a1, v12, v37);
      break;
    case 1:
      v15 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v14 = a2 + 2;
      v13 = v15;
      if (!v15)
        goto LABEL_28;
      v16 = v13(3, v14, 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v16)
        goto LABEL_28;
      v37 = 2;
      sub_20B518854(a1[6], &v37);
      sub_20B146E2C((uint64_t)&v37, a1, v16, v37);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v19 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v18 = a2 + 2;
      v17 = v19;
      if (!v19)
        goto LABEL_28;
      v20 = v17(3, v18, 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v20)
        goto LABEL_28;
      v37 = 2;
      sub_20B518854(a1[6], &v37);
      sub_20B1471FC((uint64_t)&v37, a1, v20, v37);
      break;
    case 11:
      v23 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v22 = a2 + 2;
      v21 = v23;
      if (!v23 || (v24 = v21(3, v22, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
LABEL_28:
        sub_20B13DFF8();
      v37 = 2;
      sub_20B518854(a1[6], &v37);
      sub_20B147598((uint64_t)&v37, a1, v24, v37);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v6 = a2 + 2;
          v5 = v7;
          if (!v7)
            goto LABEL_28;
          v8 = v5(3, v6, 0, &unk_24C40F728, &unk_20B5E8C58);
          if (!v8)
            goto LABEL_28;
          v37 = 2;
          sub_20B518854(a1[6], &v37);
          sub_20B147968((uint64_t)&v37, a1, v8, v37);
          break;
        case 'e':
          v27 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v26 = a2 + 2;
          v25 = v27;
          if (!v27)
            goto LABEL_28;
          v28 = v25(3, v26, 0, &unk_24C40F778, &unk_20B5E8D30);
          if (!v28)
            goto LABEL_28;
          v37 = 2;
          sub_20B518854(a1[6], &v37);
          sub_20B147DCC((uint64_t)&v37, a1, v28, v37);
          break;
        case 'n':
          v31 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v30 = a2 + 2;
          v29 = v31;
          if (!v31)
            goto LABEL_28;
          v32 = v29(3, v30, 0, &unk_24C40F7C8, &unk_20B5E8E08);
          if (!v32)
            goto LABEL_28;
          v37 = 2;
          sub_20B518854(a1[6], &v37);
          sub_20B1482A0((uint64_t)&v37, a1, v32, v37);
          break;
        case 'o':
          v35 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v34 = a2 + 2;
          v33 = v35;
          if (!v35)
            goto LABEL_28;
          v36 = v33(3, v34, 0, &unk_24C40F818, &unk_20B5E8EE0);
          if (!v36)
            goto LABEL_28;
          v37 = 2;
          sub_20B518854(a1[6], &v37);
          sub_20B148704((uint64_t)&v37, a1, v36, v37);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20B146A90(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a4 < 2)
  {
    sub_20B146B8C((uint64_t)&v12, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20B0DD290(a2 + 2);
    v7 = a2[6];
    sub_20B518CC0(v7, (float *)a3);
    sub_20B518CC0(v7, (float *)(a3 + 4));
    v8 = a2[6];
    sub_20B518CC0(v8, (float *)(a3 + 8));
    sub_20B518CC0(v8, (float *)(a3 + 12));
    v9 = a2[6];
    sub_20B518854(v9, (_DWORD *)(a3 + 16));
    sub_20B518854(v9, (_DWORD *)(a3 + 20));
    v10 = a2[4];
    v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v10 - 8);
    if (v11)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    a2[4] -= 16;
  }
}

void sub_20B146B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  float32x2_t *v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v19;
  float32x2_t v20;
  int32x2_t v21;
  int8x16_t v22;
  int8x16_t *v23;
  uint64_t v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int8x16_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  int8x16_t *v39;
  std::__shared_weak_count *v40;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D588;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5D38;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v40 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5C88;
  v39 = (int8x16_t *)(v5 + 24);
  v7 = *(_QWORD *)(a2 + 48);
  sub_20B518CC0(v7, (float *)&v36);
  sub_20B518CC0(v7, (float *)&v36 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20B518CC0(v8, (float *)&v37);
  sub_20B518CC0(v8, (float *)&v37 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20B518854(v9, &v38);
  sub_20B518854(v9, (_DWORD *)&v38 + 1);
  v10 = v38;
  v11 = (float32x2_t *)v39;
  v12 = v36;
  v13 = v37;
  __asm { FMOV            V2.2S, #1.0 }
  v19 = vdiv_f32(_D2, v36);
  v20 = vmul_f32(v19, vneg_f32(v37));
  v21 = vzip1_s32((int32x2_t)v36, (int32x2_t)v37);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v39[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v36, (int32x2_t)v37), 0x20uLL), v22);
  v11[4] = v19;
  v11[5] = v20;
  v11[6].i32[0] = v12.i32[0];
  v11[7] = 0;
  v11[6].i32[1] = 0;
  v11[8].i32[0] = v12.i32[1];
  v11[8].i32[1] = 0;
  v11[9] = v13;
  v11[10].i32[0] = 1065353216;
  v11[11] = v10;
  v23 = v39;
  v35 = v39[1];
  v24 = v39[5].i64[1];
  v25 = (char *)operator new(0x78uLL);
  *((_QWORD *)v25 + 1) = 0;
  *((_QWORD *)v25 + 2) = 0;
  *(_QWORD *)v25 = &off_24C41D6C8;
  v26 = v23[1];
  *((_QWORD *)v25 + 4) = &off_24C3F5D38;
  *(int8x16_t *)(v25 + 40) = v26;
  *(int8x16_t *)(v25 + 56) = v23[2];
  v27 = v23[3];
  v28 = v23[4];
  *((_DWORD *)v25 + 26) = v23[5].i32[0];
  *(int8x16_t *)(v25 + 88) = v28;
  *(int8x16_t *)(v25 + 72) = v27;
  *((_QWORD *)v25 + 3) = &off_24C3F5C88;
  *((_QWORD *)v25 + 14) = v24;
  *(int8x16_t *)a3 = v35;
  *(_QWORD *)(a3 + 16) = v24;
  *(_QWORD *)(a3 + 24) = v25 + 24;
  v29 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v25;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v40;
  if (v40)
  {
    v33 = (unint64_t *)&v40->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_20B146DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B146DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B146E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B146E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B146E2C(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a4 < 2)
  {
    sub_20B146F28((uint64_t)&v12, (uint64_t)a2, (_QWORD *)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20B0DD290(a2 + 2);
    v7 = a2[6];
    sub_20B518DF0(v7, (double *)a3);
    sub_20B518DF0(v7, (double *)(a3 + 8));
    v8 = a2[6];
    sub_20B518DF0(v8, (double *)(a3 + 16));
    sub_20B518DF0(v8, (double *)(a3 + 24));
    v9 = a2[6];
    sub_20B518854(v9, (_DWORD *)(a3 + 32));
    sub_20B518854(v9, (_DWORD *)(a3 + 36));
    v10 = a2[4];
    v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v10 - 8);
    if (v11)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    a2[4] -= 16;
  }
}

void sub_20B146F28(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  double v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  std::__shared_weak_count *v38;
  __int128 v39;

  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D628;
  v39 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5508;
  *(_OWORD *)(v5 + 56) = v39;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v38 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F57F8;
  v37 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20B518DF0(v7, (double *)&v34);
  sub_20B518DF0(v7, (double *)&v34 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20B518DF0(v8, (double *)&v35);
  sub_20B518DF0(v8, (double *)&v35 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20B518854(v9, &v36);
  sub_20B518854(v9, (_DWORD *)&v36 + 1);
  v10 = v34;
  v11 = v35;
  v12 = 1.0 / *(double *)&v34;
  v13 = v36;
  v14 = v37;
  *((_OWORD *)v37 + 1) = v34;
  *((_OWORD *)v14 + 2) = v11;
  *((double *)v14 + 6) = v12;
  *((double *)v14 + 7) = 1.0 / *((double *)&v10 + 1);
  *((double *)v14 + 8) = -(*(double *)&v11 * v12);
  *((double *)v14 + 9) = -(*((double *)&v11 + 1) * (1.0 / *((double *)&v10 + 1)));
  *((_QWORD *)v14 + 10) = v10;
  *((_QWORD *)v14 + 12) = 0;
  *((_QWORD *)v14 + 13) = 0;
  *((_QWORD *)v14 + 11) = 0;
  *((_QWORD *)v14 + 14) = *((_QWORD *)&v10 + 1);
  *((_QWORD *)v14 + 15) = 0;
  *((_OWORD *)v14 + 8) = v11;
  *((_QWORD *)v14 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v14 + 19) = v13;
  v15 = v37;
  v16 = v37 + 16;
  v17 = *((_QWORD *)v37 + 2);
  v18 = *((_QWORD *)v37 + 3);
  v19 = v37 + 32;
  v20 = *((_QWORD *)v37 + 4);
  v21 = *((_QWORD *)v37 + 5);
  v22 = *((_QWORD *)v37 + 19);
  v23 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = &off_24C41D768;
  *((_QWORD *)v23 + 4) = &off_24C3F5508;
  *(_OWORD *)(v23 + 40) = *v16;
  *(_OWORD *)(v23 + 56) = *v19;
  v24 = *((_OWORD *)v15 + 3);
  *(_OWORD *)(v23 + 88) = *((_OWORD *)v15 + 4);
  *(_OWORD *)(v23 + 72) = v24;
  v25 = *((_OWORD *)v15 + 6);
  v26 = *((_OWORD *)v15 + 7);
  v27 = *((_OWORD *)v15 + 8);
  *((_QWORD *)v23 + 21) = *((_QWORD *)v15 + 18);
  *(_OWORD *)(v23 + 152) = v27;
  *(_OWORD *)(v23 + 136) = v26;
  *(_OWORD *)(v23 + 120) = v25;
  *(_OWORD *)(v23 + 104) = *((_OWORD *)v15 + 5);
  *((_QWORD *)v23 + 22) = v22;
  *((_QWORD *)v23 + 3) = &off_24C3F57F8;
  *a3 = v17;
  a3[1] = v18;
  a3[2] = v20;
  a3[3] = v21;
  a3[4] = v22;
  a3[5] = v23 + 24;
  v28 = (std::__shared_weak_count *)a3[6];
  a3[6] = v23;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v38;
  if (v38)
  {
    v32 = (unint64_t *)&v38->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B1471AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1471C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1471D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1471E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1471FC(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a4 < 2)
  {
    sub_20B1472F8((uint64_t)&v12, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20B0DD290(a2 + 2);
    v7 = a2[6];
    sub_20B518CC0(v7, (float *)a3);
    sub_20B518CC0(v7, (float *)(a3 + 4));
    v8 = a2[6];
    sub_20B518CC0(v8, (float *)(a3 + 8));
    sub_20B518CC0(v8, (float *)(a3 + 12));
    v9 = a2[6];
    sub_20B518854(v9, (_DWORD *)(a3 + 16));
    sub_20B518854(v9, (_DWORD *)(a3 + 20));
    v10 = a2[4];
    v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v10 - 8);
    if (v11)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    a2[4] -= 16;
  }
}

void sub_20B1472F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  float32x2_t *v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v19;
  float32x2_t v20;
  int32x2_t v21;
  int8x16_t v22;
  int8x16_t *v23;
  uint64_t v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int8x16_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  int8x16_t *v39;
  std::__shared_weak_count *v40;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D5D8;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5D38;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v40 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5998;
  v39 = (int8x16_t *)(v5 + 24);
  v7 = *(_QWORD *)(a2 + 48);
  sub_20B518CC0(v7, (float *)&v36);
  sub_20B518CC0(v7, (float *)&v36 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20B518CC0(v8, (float *)&v37);
  sub_20B518CC0(v8, (float *)&v37 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20B518854(v9, &v38);
  sub_20B518854(v9, (_DWORD *)&v38 + 1);
  v10 = v38;
  v11 = (float32x2_t *)v39;
  v12 = v36;
  v13 = v37;
  __asm { FMOV            V2.2S, #1.0 }
  v19 = vdiv_f32(_D2, v36);
  v20 = vmul_f32(v19, vneg_f32(v37));
  v21 = vzip1_s32((int32x2_t)v36, (int32x2_t)v37);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v39[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v36, (int32x2_t)v37), 0x20uLL), v22);
  v11[4] = v19;
  v11[5] = v20;
  v11[6].i32[0] = v12.i32[0];
  v11[7] = 0;
  v11[6].i32[1] = 0;
  v11[8].i32[0] = v12.i32[1];
  v11[8].i32[1] = 0;
  v11[9] = v13;
  v11[10].i32[0] = 1065353216;
  v11[11] = v10;
  v23 = v39;
  v35 = v39[1];
  v24 = v39[5].i64[1];
  v25 = (char *)operator new(0x78uLL);
  *((_QWORD *)v25 + 1) = 0;
  *((_QWORD *)v25 + 2) = 0;
  *(_QWORD *)v25 = &off_24C41D718;
  v26 = v23[1];
  *((_QWORD *)v25 + 4) = &off_24C3F5D38;
  *(int8x16_t *)(v25 + 40) = v26;
  *(int8x16_t *)(v25 + 56) = v23[2];
  v27 = v23[3];
  v28 = v23[4];
  *((_DWORD *)v25 + 26) = v23[5].i32[0];
  *(int8x16_t *)(v25 + 88) = v28;
  *(int8x16_t *)(v25 + 72) = v27;
  *((_QWORD *)v25 + 3) = &off_24C3F5998;
  *((_QWORD *)v25 + 14) = v24;
  *(int8x16_t *)a3 = v35;
  *(_QWORD *)(a3 + 16) = v24;
  *(_QWORD *)(a3 + 24) = v25 + 24;
  v29 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v25;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v40;
  if (v40)
  {
    v33 = (unint64_t *)&v40->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_20B147548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14755C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B147570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B147584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B147598(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a4 < 2)
  {
    sub_20B147694((uint64_t)&v12, (uint64_t)a2, (_QWORD *)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20B0DD290(a2 + 2);
    v7 = a2[6];
    sub_20B518DF0(v7, (double *)a3);
    sub_20B518DF0(v7, (double *)(a3 + 8));
    v8 = a2[6];
    sub_20B518DF0(v8, (double *)(a3 + 16));
    sub_20B518DF0(v8, (double *)(a3 + 24));
    v9 = a2[6];
    sub_20B518854(v9, (_DWORD *)(a3 + 32));
    sub_20B518854(v9, (_DWORD *)(a3 + 36));
    v10 = a2[4];
    v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v10 - 8);
    if (v11)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    a2[4] -= 16;
  }
}

void sub_20B147694(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  double v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  std::__shared_weak_count *v38;
  __int128 v39;

  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D678;
  v39 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5508;
  *(_OWORD *)(v5 + 56) = v39;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v38 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F55F8;
  v37 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20B518DF0(v7, (double *)&v34);
  sub_20B518DF0(v7, (double *)&v34 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20B518DF0(v8, (double *)&v35);
  sub_20B518DF0(v8, (double *)&v35 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20B518854(v9, &v36);
  sub_20B518854(v9, (_DWORD *)&v36 + 1);
  v10 = v34;
  v11 = v35;
  v12 = 1.0 / *(double *)&v34;
  v13 = v36;
  v14 = v37;
  *((_OWORD *)v37 + 1) = v34;
  *((_OWORD *)v14 + 2) = v11;
  *((double *)v14 + 6) = v12;
  *((double *)v14 + 7) = 1.0 / *((double *)&v10 + 1);
  *((double *)v14 + 8) = -(*(double *)&v11 * v12);
  *((double *)v14 + 9) = -(*((double *)&v11 + 1) * (1.0 / *((double *)&v10 + 1)));
  *((_QWORD *)v14 + 10) = v10;
  *((_QWORD *)v14 + 12) = 0;
  *((_QWORD *)v14 + 13) = 0;
  *((_QWORD *)v14 + 11) = 0;
  *((_QWORD *)v14 + 14) = *((_QWORD *)&v10 + 1);
  *((_QWORD *)v14 + 15) = 0;
  *((_OWORD *)v14 + 8) = v11;
  *((_QWORD *)v14 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v14 + 19) = v13;
  v15 = v37;
  v16 = v37 + 16;
  v17 = *((_QWORD *)v37 + 2);
  v18 = *((_QWORD *)v37 + 3);
  v19 = v37 + 32;
  v20 = *((_QWORD *)v37 + 4);
  v21 = *((_QWORD *)v37 + 5);
  v22 = *((_QWORD *)v37 + 19);
  v23 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = &off_24C41D7B8;
  *((_QWORD *)v23 + 4) = &off_24C3F5508;
  *(_OWORD *)(v23 + 40) = *v16;
  *(_OWORD *)(v23 + 56) = *v19;
  v24 = *((_OWORD *)v15 + 3);
  *(_OWORD *)(v23 + 88) = *((_OWORD *)v15 + 4);
  *(_OWORD *)(v23 + 72) = v24;
  v25 = *((_OWORD *)v15 + 6);
  v26 = *((_OWORD *)v15 + 7);
  v27 = *((_OWORD *)v15 + 8);
  *((_QWORD *)v23 + 21) = *((_QWORD *)v15 + 18);
  *(_OWORD *)(v23 + 152) = v27;
  *(_OWORD *)(v23 + 136) = v26;
  *(_OWORD *)(v23 + 120) = v25;
  *(_OWORD *)(v23 + 104) = *((_OWORD *)v15 + 5);
  *((_QWORD *)v23 + 22) = v22;
  *((_QWORD *)v23 + 3) = &off_24C3F55F8;
  *a3 = v17;
  a3[1] = v18;
  a3[2] = v20;
  a3[3] = v21;
  a3[4] = v22;
  a3[5] = v23 + 24;
  v28 = (std::__shared_weak_count *)a3[6];
  a3[6] = v23;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v38;
  if (v38)
  {
    v32 = (unint64_t *)&v38->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B147918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14792C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B147940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B147954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B147968(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a4 < 2)
  {
    sub_20B147AA4((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20B0DD290(a2 + 2);
    v7 = a2[6];
    sub_20B518CC0(v7, (float *)a3);
    sub_20B518CC0(v7, (float *)(a3 + 4));
    v8 = a2[6];
    sub_20B518CC0(v8, (float *)(a3 + 8));
    sub_20B518CC0(v8, (float *)(a3 + 12));
    v9 = a2[6];
    sub_20B518CC0(v9, (float *)(a3 + 16));
    sub_20B518CC0(v9, (float *)(a3 + 20));
    sub_20B518CC0(v9, (float *)(a3 + 24));
    sub_20B518CC0(v9, (float *)(a3 + 28));
    sub_20B518CC0(v9, (float *)(a3 + 32));
    v10 = a2[6];
    sub_20B518854(v10, (_DWORD *)(a3 + 36));
    sub_20B518854(v10, (_DWORD *)(a3 + 40));
    v11 = a2[4];
    v12 = *(_QWORD *)(v11 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v11 - 8);
    if (v12)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    a2[4] -= 16;
  }
}

void sub_20B147AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  float v29[8];
  char *v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v28 = 0u;
  memset(v29, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D2C0;
  v33 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5A28;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v33;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v31 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5B58;
  v30 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20B518CC0(v7, (float *)&v28);
  sub_20B518CC0(v7, (float *)&v28 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20B518CC0(v8, (float *)&v28 + 2);
  sub_20B518CC0(v8, (float *)((unint64_t)&v28 | 0xC));
  v9 = *(_QWORD *)(a2 + 48);
  sub_20B518CC0(v9, v29);
  sub_20B518CC0(v9, &v29[1]);
  sub_20B518CC0(v9, &v29[2]);
  sub_20B518CC0(v9, &v29[3]);
  sub_20B518CC0(v9, &v29[4]);
  v10 = *(_QWORD *)(a2 + 48);
  sub_20B518854(v10, &v29[5]);
  sub_20B518854(v10, &v29[6]);
  v11 = sub_20B446E78((uint64_t)&v28);
  v27 = *(_OWORD *)(v11 + 16);
  v32 = *(_OWORD *)(v11 + 32);
  LODWORD(v33) = *(_DWORD *)(v11 + 48);
  v12 = *(_QWORD *)(v11 + 120);
  v13 = (char *)operator new(0x98uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_24C41D400;
  v14 = *(_QWORD *)(v11 + 52);
  v15 = *(_WORD *)(v11 + 112);
  v16 = *(_OWORD *)(v11 + 16);
  *((_QWORD *)v13 + 4) = &off_24C3F5A28;
  *(_OWORD *)(v13 + 40) = v16;
  v17 = *(_OWORD *)(v11 + 32);
  *((_DWORD *)v13 + 18) = *(_DWORD *)(v11 + 48);
  *(_OWORD *)(v13 + 56) = v17;
  *(_QWORD *)(v13 + 76) = v14;
  *(_OWORD *)(v13 + 84) = *(_OWORD *)(v11 + 60);
  v18 = *(_OWORD *)(v11 + 76);
  v19 = *(_OWORD *)(v11 + 92);
  *((_DWORD *)v13 + 33) = *(_DWORD *)(v11 + 108);
  *(_OWORD *)(v13 + 116) = v19;
  *(_OWORD *)(v13 + 100) = v18;
  *((_WORD *)v13 + 68) = v15;
  *((_QWORD *)v13 + 18) = v12;
  *((_QWORD *)v13 + 3) = &off_24C3F5B58;
  v20 = v32;
  *(_OWORD *)a3 = v27;
  *(_OWORD *)(a3 + 16) = v20;
  *(_DWORD *)(a3 + 32) = v33;
  *(_QWORD *)(a3 + 36) = v12;
  v21 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v13 + 24;
  *(_QWORD *)(a3 + 56) = v13;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v31;
  if (v31)
  {
    v25 = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_20B147D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B147D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B147D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B147DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B147DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B147DCC(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a4 < 2)
  {
    sub_20B147F08((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20B0DD290(a2 + 2);
    v7 = a2[6];
    sub_20B518DF0(v7, (double *)a3);
    sub_20B518DF0(v7, (double *)(a3 + 8));
    v8 = a2[6];
    sub_20B518DF0(v8, (double *)(a3 + 16));
    sub_20B518DF0(v8, (double *)(a3 + 24));
    v9 = a2[6];
    sub_20B518DF0(v9, (double *)(a3 + 32));
    sub_20B518DF0(v9, (double *)(a3 + 40));
    sub_20B518DF0(v9, (double *)(a3 + 48));
    sub_20B518DF0(v9, (double *)(a3 + 56));
    sub_20B518DF0(v9, (double *)(a3 + 64));
    v10 = a2[6];
    sub_20B518854(v10, (_DWORD *)(a3 + 72));
    sub_20B518854(v10, (_DWORD *)(a3 + 76));
    v11 = a2[4];
    v12 = *(_QWORD *)(v11 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v11 - 8);
    if (v12)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    a2[4] -= 16;
  }
}

void sub_20B147F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D360;
  v45 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v44;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v5 + 30) = 10;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v40 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F58C8;
  v39 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20B518DF0(v7, (double *)&v34);
  sub_20B518DF0(v7, (double *)&v34 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20B518DF0(v8, (double *)&v35);
  sub_20B518DF0(v8, (double *)&v35 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20B518DF0(v9, (double *)&v36);
  sub_20B518DF0(v9, (double *)&v36 + 1);
  sub_20B518DF0(v9, (double *)&v37);
  sub_20B518DF0(v9, (double *)&v37 + 1);
  sub_20B518DF0(v9, (double *)&v38);
  v10 = *(_QWORD *)(a2 + 48);
  sub_20B518854(v10, (_DWORD *)&v38 + 2);
  sub_20B518854(v10, (_DWORD *)&v38 + 3);
  v11 = sub_20B446FA0((uint64_t)&v34);
  v12 = *(_QWORD *)(v11 + 32);
  v13 = *(_QWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 24);
  v15 = *(_QWORD *)(v11 + 40);
  v16 = *(_OWORD *)(v11 + 64);
  v41 = *(_OWORD *)(v11 + 48);
  v42 = v16;
  *(_QWORD *)&v43 = *(_QWORD *)(v11 + 80);
  v17 = *(_QWORD *)(v11 + 216);
  v18 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_24C41D4A0;
  v19 = *(_WORD *)(v11 + 208);
  *((_QWORD *)v18 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v18 + 40) = *(_OWORD *)(v11 + 16);
  *(_OWORD *)(v18 + 56) = *(_OWORD *)(v11 + 32);
  v20 = *(_OWORD *)(v11 + 48);
  v21 = *(_OWORD *)(v11 + 64);
  *((_QWORD *)v18 + 13) = *(_QWORD *)(v11 + 80);
  *(_OWORD *)(v18 + 88) = v21;
  *(_OWORD *)(v18 + 72) = v20;
  v22 = *(_QWORD *)(v11 + 88);
  *((_DWORD *)v18 + 30) = *(_DWORD *)(v11 + 96);
  *((_QWORD *)v18 + 14) = v22;
  v23 = *(_OWORD *)(v11 + 120);
  *((_OWORD *)v18 + 8) = *(_OWORD *)(v11 + 104);
  *((_OWORD *)v18 + 9) = v23;
  v24 = *(_OWORD *)(v11 + 152);
  v25 = *(_OWORD *)(v11 + 168);
  v26 = *(_OWORD *)(v11 + 184);
  *((_QWORD *)v18 + 28) = *(_QWORD *)(v11 + 200);
  *((_OWORD *)v18 + 12) = v25;
  *((_OWORD *)v18 + 13) = v26;
  *((_OWORD *)v18 + 11) = v24;
  *((_OWORD *)v18 + 10) = *(_OWORD *)(v11 + 136);
  *((_WORD *)v18 + 116) = v19;
  *((_QWORD *)v18 + 30) = v17;
  *((_QWORD *)v18 + 3) = &off_24C3F58C8;
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a3 + 16) = v12;
  *(_QWORD *)(a3 + 24) = v15;
  v27 = v42;
  *(_OWORD *)(a3 + 32) = v41;
  *(_OWORD *)(a3 + 48) = v27;
  *(_QWORD *)(a3 + 64) = v43;
  *(_QWORD *)(a3 + 72) = v17;
  v28 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v18 + 24;
  *(_QWORD *)(a3 + 88) = v18;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v40;
  if (v40)
  {
    v32 = (unint64_t *)&v40->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B14823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B148250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B148264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B148278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14828C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1482A0(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a4 < 2)
  {
    sub_20B1483DC((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20B0DD290(a2 + 2);
    v7 = a2[6];
    sub_20B518CC0(v7, (float *)a3);
    sub_20B518CC0(v7, (float *)(a3 + 4));
    v8 = a2[6];
    sub_20B518CC0(v8, (float *)(a3 + 8));
    sub_20B518CC0(v8, (float *)(a3 + 12));
    v9 = a2[6];
    sub_20B518CC0(v9, (float *)(a3 + 16));
    sub_20B518CC0(v9, (float *)(a3 + 20));
    sub_20B518CC0(v9, (float *)(a3 + 24));
    sub_20B518CC0(v9, (float *)(a3 + 28));
    sub_20B518CC0(v9, (float *)(a3 + 32));
    v10 = a2[6];
    sub_20B518854(v10, (_DWORD *)(a3 + 36));
    sub_20B518854(v10, (_DWORD *)(a3 + 40));
    v11 = a2[4];
    v12 = *(_QWORD *)(v11 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v11 - 8);
    if (v12)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    a2[4] -= 16;
  }
}

void sub_20B1483DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  float v29[8];
  char *v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v28 = 0u;
  memset(v29, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D310;
  v33 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5A28;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v33;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v31 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5A88;
  v30 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20B518CC0(v7, (float *)&v28);
  sub_20B518CC0(v7, (float *)&v28 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20B518CC0(v8, (float *)&v28 + 2);
  sub_20B518CC0(v8, (float *)((unint64_t)&v28 | 0xC));
  v9 = *(_QWORD *)(a2 + 48);
  sub_20B518CC0(v9, v29);
  sub_20B518CC0(v9, &v29[1]);
  sub_20B518CC0(v9, &v29[2]);
  sub_20B518CC0(v9, &v29[3]);
  sub_20B518CC0(v9, &v29[4]);
  v10 = *(_QWORD *)(a2 + 48);
  sub_20B518854(v10, &v29[5]);
  sub_20B518854(v10, &v29[6]);
  v11 = sub_20B446E78((uint64_t)&v28);
  v27 = *(_OWORD *)(v11 + 16);
  v32 = *(_OWORD *)(v11 + 32);
  LODWORD(v33) = *(_DWORD *)(v11 + 48);
  v12 = *(_QWORD *)(v11 + 120);
  v13 = (char *)operator new(0x98uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_24C41D450;
  v14 = *(_QWORD *)(v11 + 52);
  v15 = *(_WORD *)(v11 + 112);
  v16 = *(_OWORD *)(v11 + 16);
  *((_QWORD *)v13 + 4) = &off_24C3F5A28;
  *(_OWORD *)(v13 + 40) = v16;
  v17 = *(_OWORD *)(v11 + 32);
  *((_DWORD *)v13 + 18) = *(_DWORD *)(v11 + 48);
  *(_OWORD *)(v13 + 56) = v17;
  *(_QWORD *)(v13 + 76) = v14;
  *(_OWORD *)(v13 + 84) = *(_OWORD *)(v11 + 60);
  v18 = *(_OWORD *)(v11 + 76);
  v19 = *(_OWORD *)(v11 + 92);
  *((_DWORD *)v13 + 33) = *(_DWORD *)(v11 + 108);
  *(_OWORD *)(v13 + 116) = v19;
  *(_OWORD *)(v13 + 100) = v18;
  *((_WORD *)v13 + 68) = v15;
  *((_QWORD *)v13 + 18) = v12;
  *((_QWORD *)v13 + 3) = &off_24C3F5A88;
  v20 = v32;
  *(_OWORD *)a3 = v27;
  *(_OWORD *)(a3 + 16) = v20;
  *(_DWORD *)(a3 + 32) = v33;
  *(_QWORD *)(a3 + 36) = v12;
  v21 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v13 + 24;
  *(_QWORD *)(a3 + 56) = v13;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v31;
  if (v31)
  {
    v25 = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_20B1486A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1486B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1486C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1486DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1486F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B148704(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a4 < 2)
  {
    sub_20B148840((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20B0DD290(a2 + 2);
    v7 = a2[6];
    sub_20B518DF0(v7, (double *)a3);
    sub_20B518DF0(v7, (double *)(a3 + 8));
    v8 = a2[6];
    sub_20B518DF0(v8, (double *)(a3 + 16));
    sub_20B518DF0(v8, (double *)(a3 + 24));
    v9 = a2[6];
    sub_20B518DF0(v9, (double *)(a3 + 32));
    sub_20B518DF0(v9, (double *)(a3 + 40));
    sub_20B518DF0(v9, (double *)(a3 + 48));
    sub_20B518DF0(v9, (double *)(a3 + 56));
    sub_20B518DF0(v9, (double *)(a3 + 64));
    v10 = a2[6];
    sub_20B518854(v10, (_DWORD *)(a3 + 72));
    sub_20B518854(v10, (_DWORD *)(a3 + 76));
    v11 = a2[4];
    v12 = *(_QWORD *)(v11 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v11 - 8);
    if (v12)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    a2[4] -= 16;
  }
}

void sub_20B148840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D3B0;
  v45 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v44;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v5 + 30) = 10;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v40 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5728;
  v39 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20B518DF0(v7, (double *)&v34);
  sub_20B518DF0(v7, (double *)&v34 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20B518DF0(v8, (double *)&v35);
  sub_20B518DF0(v8, (double *)&v35 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20B518DF0(v9, (double *)&v36);
  sub_20B518DF0(v9, (double *)&v36 + 1);
  sub_20B518DF0(v9, (double *)&v37);
  sub_20B518DF0(v9, (double *)&v37 + 1);
  sub_20B518DF0(v9, (double *)&v38);
  v10 = *(_QWORD *)(a2 + 48);
  sub_20B518854(v10, (_DWORD *)&v38 + 2);
  sub_20B518854(v10, (_DWORD *)&v38 + 3);
  v11 = sub_20B446FA0((uint64_t)&v34);
  v12 = *(_QWORD *)(v11 + 32);
  v13 = *(_QWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 24);
  v15 = *(_QWORD *)(v11 + 40);
  v16 = *(_OWORD *)(v11 + 64);
  v41 = *(_OWORD *)(v11 + 48);
  v42 = v16;
  *(_QWORD *)&v43 = *(_QWORD *)(v11 + 80);
  v17 = *(_QWORD *)(v11 + 216);
  v18 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_24C41D4F0;
  v19 = *(_WORD *)(v11 + 208);
  *((_QWORD *)v18 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v18 + 40) = *(_OWORD *)(v11 + 16);
  *(_OWORD *)(v18 + 56) = *(_OWORD *)(v11 + 32);
  v20 = *(_OWORD *)(v11 + 48);
  v21 = *(_OWORD *)(v11 + 64);
  *((_QWORD *)v18 + 13) = *(_QWORD *)(v11 + 80);
  *(_OWORD *)(v18 + 88) = v21;
  *(_OWORD *)(v18 + 72) = v20;
  v22 = *(_QWORD *)(v11 + 88);
  *((_DWORD *)v18 + 30) = *(_DWORD *)(v11 + 96);
  *((_QWORD *)v18 + 14) = v22;
  v23 = *(_OWORD *)(v11 + 120);
  *((_OWORD *)v18 + 8) = *(_OWORD *)(v11 + 104);
  *((_OWORD *)v18 + 9) = v23;
  v24 = *(_OWORD *)(v11 + 152);
  v25 = *(_OWORD *)(v11 + 168);
  v26 = *(_OWORD *)(v11 + 184);
  *((_QWORD *)v18 + 28) = *(_QWORD *)(v11 + 200);
  *((_OWORD *)v18 + 12) = v25;
  *((_OWORD *)v18 + 13) = v26;
  *((_OWORD *)v18 + 11) = v24;
  *((_OWORD *)v18 + 10) = *(_OWORD *)(v11 + 136);
  *((_WORD *)v18 + 116) = v19;
  *((_QWORD *)v18 + 30) = v17;
  *((_QWORD *)v18 + 3) = &off_24C3F5728;
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a3 + 16) = v12;
  *(_QWORD *)(a3 + 24) = v15;
  v27 = v42;
  *(_OWORD *)(a3 + 32) = v41;
  *(_OWORD *)(a3 + 48) = v27;
  *(_QWORD *)(a3 + 64) = v43;
  *(_QWORD *)(a3 + 72) = v17;
  v28 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v18 + 24;
  *(_QWORD *)(a3 + 88) = v18;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v40;
  if (v40)
  {
    v32 = (unint64_t *)&v40->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B148B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B148B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B148B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B148BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B148BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B148BD8(_QWORD *a1, int *a2)
{
  int v4;
  uint64_t (*v5)(uint64_t, int *, _QWORD, void *, void *);
  int *v6;
  uint64_t (*v7)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, int *, _QWORD, void *, void *);
  int *v10;
  uint64_t (*v11)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, int *, _QWORD, void *, void *);
  int *v14;
  uint64_t (*v15)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, int *, _QWORD, void *, void *);
  int *v18;
  uint64_t (*v19)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, int *, _QWORD, void *, void *);
  int *v22;
  uint64_t (*v23)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, int *, _QWORD, void *, void *);
  int *v26;
  uint64_t (*v27)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, int *, _QWORD, void *, void *);
  int *v30;
  uint64_t (*v31)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, int *, _QWORD, void *, void *);
  int *v34;
  uint64_t (*v35)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v36;
  unsigned int v37;

  v37 = 0;
  sub_20B518854(a1[6], &v37);
  *a2 = v37;
  sub_20B44354C((void (**)(int))a2);
  v4 = *a2;
  switch(v4)
  {
    case 0:
      v11 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v10 = a2 + 2;
      v9 = v11;
      if (!v11)
        goto LABEL_28;
      v12 = v9(3, v10, 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v12)
        goto LABEL_28;
      v37 = 2;
      sub_20B518854(a1[6], &v37);
      sub_20B146A90((uint64_t)&v37, a1, v12, v37);
      break;
    case 1:
      v15 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v14 = a2 + 2;
      v13 = v15;
      if (!v15)
        goto LABEL_28;
      v16 = v13(3, v14, 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v16)
        goto LABEL_28;
      v37 = 2;
      sub_20B518854(a1[6], &v37);
      sub_20B146E2C((uint64_t)&v37, a1, v16, v37);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v19 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v18 = a2 + 2;
      v17 = v19;
      if (!v19)
        goto LABEL_28;
      v20 = v17(3, v18, 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v20)
        goto LABEL_28;
      v37 = 2;
      sub_20B518854(a1[6], &v37);
      sub_20B1471FC((uint64_t)&v37, a1, v20, v37);
      break;
    case 11:
      v23 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v22 = a2 + 2;
      v21 = v23;
      if (!v23 || (v24 = v21(3, v22, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
LABEL_28:
        sub_20B13DFF8();
      v37 = 2;
      sub_20B518854(a1[6], &v37);
      sub_20B147598((uint64_t)&v37, a1, v24, v37);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v6 = a2 + 2;
          v5 = v7;
          if (!v7)
            goto LABEL_28;
          v8 = v5(3, v6, 0, &unk_24C40F728, &unk_20B5E8C58);
          if (!v8)
            goto LABEL_28;
          v37 = 2;
          sub_20B518854(a1[6], &v37);
          sub_20B147968((uint64_t)&v37, a1, v8, v37);
          break;
        case 'e':
          v27 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v26 = a2 + 2;
          v25 = v27;
          if (!v27)
            goto LABEL_28;
          v28 = v25(3, v26, 0, &unk_24C40F778, &unk_20B5E8D30);
          if (!v28)
            goto LABEL_28;
          v37 = 2;
          sub_20B518854(a1[6], &v37);
          sub_20B147DCC((uint64_t)&v37, a1, v28, v37);
          break;
        case 'n':
          v31 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v30 = a2 + 2;
          v29 = v31;
          if (!v31)
            goto LABEL_28;
          v32 = v29(3, v30, 0, &unk_24C40F7C8, &unk_20B5E8E08);
          if (!v32)
            goto LABEL_28;
          v37 = 2;
          sub_20B518854(a1[6], &v37);
          sub_20B1482A0((uint64_t)&v37, a1, v32, v37);
          break;
        case 'o':
          v35 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v34 = a2 + 2;
          v33 = v35;
          if (!v35)
            goto LABEL_28;
          v36 = v33(3, v34, 0, &unk_24C40F818, &unk_20B5E8EE0);
          if (!v36)
            goto LABEL_28;
          v37 = 2;
          sub_20B518854(a1[6], &v37);
          sub_20B148704((uint64_t)&v37, a1, v36, v37);
          break;
        default:
          return;
      }
      break;
  }
}

uint64_t sub_20B148FBC(uint64_t a1, unint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_20B50A7A4(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_20B454B2C(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_20B1490B8((uint64_t)&v11, a1, a2);
  else
    sub_20B1492B4(a1, a2);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

_QWORD *sub_20B1490B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_20B448738(&v14);
  sub_20B441634((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24C41D808;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20B14BFBC(a2, (unint64_t)&v17);
  sub_20B442B90(&v17, v12);
  sub_20B443C18((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24C41D808;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_20AFA2CC8((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_20B14923C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1492B4(uint64_t a1, unint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v7;
  uint64_t (*v8)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v9;
  int v10;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v15;
  uint64_t (*v16)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v17;
  int v18;
  int v19;
  char *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v23;
  uint64_t (*v24)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  unsigned int v29;
  uint64_t (*v30)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v31;
  uint64_t (*v32)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v33;
  int v34;
  int v35;
  char *v36;
  unsigned int v37;
  uint64_t (*v38)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v39;
  uint64_t (*v40)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  unsigned int v45;
  uint64_t (*v46)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v47;
  uint64_t (*v48)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v49;
  int v50;
  int v51;
  char *v52;
  unsigned int v53;
  uint64_t (*v54)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v55;
  uint64_t (*v56)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v57;
  int v58;
  int v59;
  char *v60;
  unsigned int v61;
  uint64_t (*v62)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v63;
  uint64_t (*v64)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v65;
  int v66;
  int v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *exception;
  unint64_t v73;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "camera_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v73 = a2;
  sub_20B1499C4((uint64_t *)a1, (_DWORD **)&v73);
  sub_20B44502C((void (**)(int))a2);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v16 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v15 = a2 + 8;
      v14 = v16;
      if (!v16)
        goto LABEL_95;
      v17 = (float *)v14(3, v15, 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v17)
        goto LABEL_95;
      v18 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v18)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50A7A4(a1);
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      v20 = (char *)sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B454B2C(v20, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v21 = 2;
      else
        v21 = v73;
      sub_20B149BB4(a1, v17, v21);
      break;
    case 1:
      v24 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v23 = a2 + 8;
      v22 = v24;
      if (!v24)
        goto LABEL_95;
      v25 = v22(3, v23, 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v25)
        goto LABEL_95;
      v26 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50A7A4(a1);
      v27 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v27)
        *(_BYTE *)(a1 + 104) = 1;
      v28 = (char *)sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B454B2C(v28, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v29 = 2;
      else
        v29 = v73;
      sub_20B149FB8(a1, v25, v29);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v32 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v31 = a2 + 8;
      v30 = v32;
      if (!v32)
        goto LABEL_95;
      v33 = (float *)v30(3, v31, 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v33)
        goto LABEL_95;
      v34 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v34)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50A7A4(a1);
      v35 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v35)
        *(_BYTE *)(a1 + 104) = 1;
      v36 = (char *)sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B454B2C(v36, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v37 = 2;
      else
        v37 = v73;
      sub_20B14A3F0(a1, v33, v37);
      break;
    case 11:
      v40 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v39 = a2 + 8;
      v38 = v40;
      if (!v40 || (v41 = v38(3, v39, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
LABEL_95:
        sub_20B13DFF8();
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v42)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50A7A4(a1);
      v43 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v43)
        *(_BYTE *)(a1 + 104) = 1;
      v44 = (char *)sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B454B2C(v44, &v73);
      if (HIDWORD(v73))
      {
LABEL_96:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      if (v73 >= 2)
        v45 = 2;
      else
        v45 = v73;
      sub_20B14A7F4(a1, v41, v45);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_95;
          v9 = (float *)v6(3, v7, 0, &unk_24C40F728, &unk_20B5E8C58);
          if (!v9)
            goto LABEL_95;
          v10 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v10)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50A7A4(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_20B50AA5C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B454B2C(v12, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v13 = 2;
          else
            v13 = v73;
          sub_20B14AC2C(a1, v9, v13);
          break;
        case 'e':
          v48 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v47 = a2 + 8;
          v46 = v48;
          if (!v48)
            goto LABEL_95;
          v49 = (double *)v46(3, v47, 0, &unk_24C40F778, &unk_20B5E8D30);
          if (!v49)
            goto LABEL_95;
          v50 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v50)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50A7A4(a1);
          v51 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v51)
            *(_BYTE *)(a1 + 104) = 1;
          v52 = (char *)sub_20B50AA5C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B454B2C(v52, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v53 = 2;
          else
            v53 = v73;
          sub_20B14B0D8(a1, v49, v53);
          break;
        case 'n':
          v56 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v55 = a2 + 8;
          v54 = v56;
          if (!v56)
            goto LABEL_95;
          v57 = (float *)v54(3, v55, 0, &unk_24C40F7C8, &unk_20B5E8E08);
          if (!v57)
            goto LABEL_95;
          v58 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v58)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50A7A4(a1);
          v59 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v59)
            *(_BYTE *)(a1 + 104) = 1;
          v60 = (char *)sub_20B50AA5C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B454B2C(v60, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v61 = 2;
          else
            v61 = v73;
          sub_20B14B5F4(a1, v57, v61);
          break;
        case 'o':
          v64 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v63 = a2 + 8;
          v62 = v64;
          if (!v64)
            goto LABEL_95;
          v65 = (double *)v62(3, v63, 0, &unk_24C40F818, &unk_20B5E8EE0);
          if (!v65)
            goto LABEL_95;
          v66 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v66)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50A7A4(a1);
          v67 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v67)
            *(_BYTE *)(a1 + 104) = 1;
          v68 = (char *)sub_20B50AA5C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B454B2C(v68, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v69 = 2;
          else
            v69 = v73;
          sub_20B14BAA0(a1, v65, v69);
          break;
        default:
          return;
      }
      break;
  }
  v70 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v70 - 8);
  v71 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v71 - 8);
  *(_QWORD *)(a1 + 48) = v70 - 8;
  *(_QWORD *)(a1 + 72) = v71 - 8;
}

void sub_20B1499C4(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AA5C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B45502C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B4457D0((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B149B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B149BB4(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20B149CD8((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B8AC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B8AC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 4;
    v10 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B478(v10, (uint64_t)v11);
  }
}

void sub_20B149CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  float32x2_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int8x16_t *v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D588;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5D38;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5C88;
  v42 = (int8x16_t *)(v5 + 24);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B8AC(v8, (float *)&v39);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B8AC(v10, (float *)&v40);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v44[0] = 2;
  v44[1] = &v41;
  v12 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B478(v12, (uint64_t)v44);
  v13 = v41;
  v14 = (float32x2_t *)v42;
  v15 = v39;
  v16 = v40;
  __asm { FMOV            V2.2S, #1.0 }
  v22 = vdiv_f32(_D2, v39);
  v23 = vmul_f32(v22, vneg_f32(v40));
  v24 = vzip1_s32((int32x2_t)v39, (int32x2_t)v40);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v42[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v39, (int32x2_t)v40), 0x20uLL), v25);
  v14[4] = v22;
  v14[5] = v23;
  v14[6].i32[0] = v15.i32[0];
  v14[7] = 0;
  v14[6].i32[1] = 0;
  v14[8].i32[0] = v15.i32[1];
  v14[8].i32[1] = 0;
  v14[9] = v16;
  v14[10].i32[0] = 1065353216;
  v14[11] = v13;
  v26 = v42;
  v38 = v42[1];
  v27 = v42[5].i64[1];
  v28 = (char *)operator new(0x78uLL);
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = &off_24C41D6C8;
  v29 = v26[1];
  *((_QWORD *)v28 + 4) = &off_24C3F5D38;
  *(int8x16_t *)(v28 + 40) = v29;
  *(int8x16_t *)(v28 + 56) = v26[2];
  v30 = v26[3];
  v31 = v26[4];
  *((_DWORD *)v28 + 26) = v26[5].i32[0];
  *(int8x16_t *)(v28 + 88) = v31;
  *(int8x16_t *)(v28 + 72) = v30;
  *((_QWORD *)v28 + 3) = &off_24C3F5C88;
  *((_QWORD *)v28 + 14) = v27;
  *(int8x16_t *)a3 = v38;
  *(_QWORD *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v28 + 24;
  v32 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v28;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20B149F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B149FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B149FB8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20B14A0DC((uint64_t)v11, a1, (_QWORD *)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B9DC(v6, (double *)a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B9DC(v8, (double *)(a2 + 16));
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 32;
    v10 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B478(v10, (uint64_t)v11);
  }
}

void sub_20B14A0DC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  _QWORD v42[2];
  __int128 v43;

  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D628;
  v43 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5508;
  *(_OWORD *)(v5 + 56) = v43;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v41 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F57F8;
  v40 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B9DC(v8, (double *)&v37);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B9DC(v10, (double *)&v38);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v42[0] = 2;
  v42[1] = &v39;
  v12 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B478(v12, (uint64_t)v42);
  v13 = v37;
  v14 = v38;
  v15 = 1.0 / *(double *)&v37;
  v16 = v39;
  v17 = v40;
  *((_OWORD *)v40 + 1) = v37;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((_QWORD *)v17 + 10) = v13;
  *((_QWORD *)v17 + 12) = 0;
  *((_QWORD *)v17 + 13) = 0;
  *((_QWORD *)v17 + 11) = 0;
  *((_QWORD *)v17 + 14) = *((_QWORD *)&v13 + 1);
  *((_QWORD *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((_QWORD *)v17 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v17 + 19) = v16;
  v18 = v40;
  v19 = v40 + 16;
  v20 = *((_QWORD *)v40 + 2);
  v21 = *((_QWORD *)v40 + 3);
  v22 = v40 + 32;
  v23 = *((_QWORD *)v40 + 4);
  v24 = *((_QWORD *)v40 + 5);
  v25 = *((_QWORD *)v40 + 19);
  v26 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = &off_24C41D768;
  *((_QWORD *)v26 + 4) = &off_24C3F5508;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  v28 = *((_OWORD *)v18 + 6);
  v29 = *((_OWORD *)v18 + 7);
  v30 = *((_OWORD *)v18 + 8);
  *((_QWORD *)v26 + 21) = *((_QWORD *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((_QWORD *)v26 + 22) = v25;
  *((_QWORD *)v26 + 3) = &off_24C3F57F8;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v41;
  if (v41)
  {
    v35 = (unint64_t *)&v41->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_20B14A3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14A3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14A3F0(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20B14A514((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B8AC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B8AC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 4;
    v10 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B478(v10, (uint64_t)v11);
  }
}

void sub_20B14A514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  float32x2_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int8x16_t *v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D5D8;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5D38;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5998;
  v42 = (int8x16_t *)(v5 + 24);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B8AC(v8, (float *)&v39);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B8AC(v10, (float *)&v40);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v44[0] = 2;
  v44[1] = &v41;
  v12 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B478(v12, (uint64_t)v44);
  v13 = v41;
  v14 = (float32x2_t *)v42;
  v15 = v39;
  v16 = v40;
  __asm { FMOV            V2.2S, #1.0 }
  v22 = vdiv_f32(_D2, v39);
  v23 = vmul_f32(v22, vneg_f32(v40));
  v24 = vzip1_s32((int32x2_t)v39, (int32x2_t)v40);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v42[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v39, (int32x2_t)v40), 0x20uLL), v25);
  v14[4] = v22;
  v14[5] = v23;
  v14[6].i32[0] = v15.i32[0];
  v14[7] = 0;
  v14[6].i32[1] = 0;
  v14[8].i32[0] = v15.i32[1];
  v14[8].i32[1] = 0;
  v14[9] = v16;
  v14[10].i32[0] = 1065353216;
  v14[11] = v13;
  v26 = v42;
  v38 = v42[1];
  v27 = v42[5].i64[1];
  v28 = (char *)operator new(0x78uLL);
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = &off_24C41D718;
  v29 = v26[1];
  *((_QWORD *)v28 + 4) = &off_24C3F5D38;
  *(int8x16_t *)(v28 + 40) = v29;
  *(int8x16_t *)(v28 + 56) = v26[2];
  v30 = v26[3];
  v31 = v26[4];
  *((_DWORD *)v28 + 26) = v26[5].i32[0];
  *(int8x16_t *)(v28 + 88) = v31;
  *(int8x16_t *)(v28 + 72) = v30;
  *((_QWORD *)v28 + 3) = &off_24C3F5998;
  *((_QWORD *)v28 + 14) = v27;
  *(int8x16_t *)a3 = v38;
  *(_QWORD *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v28 + 24;
  v32 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v28;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20B14A7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14A7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14A7F4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20B14A918((uint64_t)v11, a1, (_QWORD *)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B9DC(v6, (double *)a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B9DC(v8, (double *)(a2 + 16));
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 32;
    v10 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B478(v10, (uint64_t)v11);
  }
}

void sub_20B14A918(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  _QWORD v42[2];
  __int128 v43;

  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D678;
  v43 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5508;
  *(_OWORD *)(v5 + 56) = v43;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v41 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F55F8;
  v40 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B9DC(v8, (double *)&v37);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B9DC(v10, (double *)&v38);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v42[0] = 2;
  v42[1] = &v39;
  v12 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B478(v12, (uint64_t)v42);
  v13 = v37;
  v14 = v38;
  v15 = 1.0 / *(double *)&v37;
  v16 = v39;
  v17 = v40;
  *((_OWORD *)v40 + 1) = v37;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((_QWORD *)v17 + 10) = v13;
  *((_QWORD *)v17 + 12) = 0;
  *((_QWORD *)v17 + 13) = 0;
  *((_QWORD *)v17 + 11) = 0;
  *((_QWORD *)v17 + 14) = *((_QWORD *)&v13 + 1);
  *((_QWORD *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((_QWORD *)v17 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v17 + 19) = v16;
  v18 = v40;
  v19 = v40 + 16;
  v20 = *((_QWORD *)v40 + 2);
  v21 = *((_QWORD *)v40 + 3);
  v22 = v40 + 32;
  v23 = *((_QWORD *)v40 + 4);
  v24 = *((_QWORD *)v40 + 5);
  v25 = *((_QWORD *)v40 + 19);
  v26 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = &off_24C41D7B8;
  *((_QWORD *)v26 + 4) = &off_24C3F5508;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  v28 = *((_OWORD *)v18 + 6);
  v29 = *((_OWORD *)v18 + 7);
  v30 = *((_OWORD *)v18 + 8);
  *((_QWORD *)v26 + 21) = *((_QWORD *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((_QWORD *)v26 + 22) = v25;
  *((_QWORD *)v26 + 3) = &off_24C3F55F8;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v41;
  if (v41)
  {
    v35 = (unint64_t *)&v41->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_20B14AC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14AC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14AC2C(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20B14AD90((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B8AC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B8AC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B8AC(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B478(v12, (uint64_t)v13);
  }
}

void sub_20B14AD90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  float v33[8];
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v32 = 0u;
  memset(v33, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D2C0;
  v37 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5A28;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v37;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5B58;
  v34 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B8AC(v8, (float *)&v32);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B8AC(v10, (float *)&v32 + 2);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B8AC(v12, v33);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v36 = 2;
  *((_QWORD *)&v36 + 1) = &v33[5];
  v14 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B478(v14, (uint64_t)&v36);
  v15 = sub_20B446E78((uint64_t)&v32);
  v31 = *(_OWORD *)(v15 + 16);
  v36 = *(_OWORD *)(v15 + 32);
  LODWORD(v37) = *(_DWORD *)(v15 + 48);
  v16 = *(_QWORD *)(v15 + 120);
  v17 = (char *)operator new(0x98uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_24C41D400;
  v18 = *(_QWORD *)(v15 + 52);
  v19 = *(_WORD *)(v15 + 112);
  v20 = *(_OWORD *)(v15 + 16);
  *((_QWORD *)v17 + 4) = &off_24C3F5A28;
  *(_OWORD *)(v17 + 40) = v20;
  v21 = *(_OWORD *)(v15 + 32);
  *((_DWORD *)v17 + 18) = *(_DWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 56) = v21;
  *(_QWORD *)(v17 + 76) = v18;
  *(_OWORD *)(v17 + 84) = *(_OWORD *)(v15 + 60);
  v22 = *(_OWORD *)(v15 + 76);
  v23 = *(_OWORD *)(v15 + 92);
  *((_DWORD *)v17 + 33) = *(_DWORD *)(v15 + 108);
  *(_OWORD *)(v17 + 116) = v23;
  *(_OWORD *)(v17 + 100) = v22;
  *((_WORD *)v17 + 68) = v19;
  *((_QWORD *)v17 + 18) = v16;
  *((_QWORD *)v17 + 3) = &off_24C3F5B58;
  v24 = v36;
  *(_OWORD *)a3 = v31;
  *(_OWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 32) = v37;
  *(_QWORD *)(a3 + 36) = v16;
  v25 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v17 + 24;
  *(_QWORD *)(a3 + 56) = v17;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20B14B0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14B0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14B0D8(uint64_t a1, double *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20B14B23C((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B9DC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B9DC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B9DC(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B478(v12, (uint64_t)v13);
  }
}

void sub_20B14B23C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v41 = 0u;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  v38 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D360;
  v48 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v47;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F58C8;
  v42 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B9DC(v8, (double *)&v38);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B9DC(v10, (double *)&v39);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B9DC(v12, (double *)v40);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v44 = 2;
  *((_QWORD *)&v44 + 1) = (char *)&v41 + 8;
  v14 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B478(v14, (uint64_t)&v44);
  v15 = sub_20B446FA0((uint64_t)&v38);
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  v19 = *(_QWORD *)(v15 + 40);
  v20 = *(_OWORD *)(v15 + 64);
  v44 = *(_OWORD *)(v15 + 48);
  v45 = v20;
  *(_QWORD *)&v46 = *(_QWORD *)(v15 + 80);
  v21 = *(_QWORD *)(v15 + 216);
  v22 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24C41D4A0;
  v23 = *(_WORD *)(v15 + 208);
  *((_QWORD *)v22 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v15 + 16);
  *(_OWORD *)(v22 + 56) = *(_OWORD *)(v15 + 32);
  v24 = *(_OWORD *)(v15 + 48);
  v25 = *(_OWORD *)(v15 + 64);
  *((_QWORD *)v22 + 13) = *(_QWORD *)(v15 + 80);
  *(_OWORD *)(v22 + 88) = v25;
  *(_OWORD *)(v22 + 72) = v24;
  v26 = *(_QWORD *)(v15 + 88);
  *((_DWORD *)v22 + 30) = *(_DWORD *)(v15 + 96);
  *((_QWORD *)v22 + 14) = v26;
  v27 = *(_OWORD *)(v15 + 120);
  *((_OWORD *)v22 + 8) = *(_OWORD *)(v15 + 104);
  *((_OWORD *)v22 + 9) = v27;
  v28 = *(_OWORD *)(v15 + 152);
  v29 = *(_OWORD *)(v15 + 168);
  v30 = *(_OWORD *)(v15 + 184);
  *((_QWORD *)v22 + 28) = *(_QWORD *)(v15 + 200);
  *((_OWORD *)v22 + 12) = v29;
  *((_OWORD *)v22 + 13) = v30;
  *((_OWORD *)v22 + 11) = v28;
  *((_OWORD *)v22 + 10) = *(_OWORD *)(v15 + 136);
  *((_WORD *)v22 + 116) = v23;
  *((_QWORD *)v22 + 30) = v21;
  *((_QWORD *)v22 + 3) = &off_24C3F58C8;
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v19;
  v31 = v45;
  *(_OWORD *)(a3 + 32) = v44;
  *(_OWORD *)(a3 + 48) = v31;
  *(_QWORD *)(a3 + 64) = v46;
  *(_QWORD *)(a3 + 72) = v21;
  v32 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v22 + 24;
  *(_QWORD *)(a3 + 88) = v22;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20B14B5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14B5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14B5F4(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20B14B758((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B8AC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B8AC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B8AC(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B478(v12, (uint64_t)v13);
  }
}

void sub_20B14B758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  float v33[8];
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v32 = 0u;
  memset(v33, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D310;
  v37 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5A28;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v37;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5A88;
  v34 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B8AC(v8, (float *)&v32);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B8AC(v10, (float *)&v32 + 2);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B8AC(v12, v33);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v36 = 2;
  *((_QWORD *)&v36 + 1) = &v33[5];
  v14 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B478(v14, (uint64_t)&v36);
  v15 = sub_20B446E78((uint64_t)&v32);
  v31 = *(_OWORD *)(v15 + 16);
  v36 = *(_OWORD *)(v15 + 32);
  LODWORD(v37) = *(_DWORD *)(v15 + 48);
  v16 = *(_QWORD *)(v15 + 120);
  v17 = (char *)operator new(0x98uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_24C41D450;
  v18 = *(_QWORD *)(v15 + 52);
  v19 = *(_WORD *)(v15 + 112);
  v20 = *(_OWORD *)(v15 + 16);
  *((_QWORD *)v17 + 4) = &off_24C3F5A28;
  *(_OWORD *)(v17 + 40) = v20;
  v21 = *(_OWORD *)(v15 + 32);
  *((_DWORD *)v17 + 18) = *(_DWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 56) = v21;
  *(_QWORD *)(v17 + 76) = v18;
  *(_OWORD *)(v17 + 84) = *(_OWORD *)(v15 + 60);
  v22 = *(_OWORD *)(v15 + 76);
  v23 = *(_OWORD *)(v15 + 92);
  *((_DWORD *)v17 + 33) = *(_DWORD *)(v15 + 108);
  *(_OWORD *)(v17 + 116) = v23;
  *(_OWORD *)(v17 + 100) = v22;
  *((_WORD *)v17 + 68) = v19;
  *((_QWORD *)v17 + 18) = v16;
  *((_QWORD *)v17 + 3) = &off_24C3F5A88;
  v24 = v36;
  *(_OWORD *)a3 = v31;
  *(_OWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 32) = v37;
  *(_QWORD *)(a3 + 36) = v16;
  v25 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v17 + 24;
  *(_QWORD *)(a3 + 56) = v17;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20B14BA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14BA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14BAA0(uint64_t a1, double *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20B14BC04((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B9DC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B9DC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B9DC(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B50B478(v12, (uint64_t)v13);
  }
}

void sub_20B14BC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v41 = 0u;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  v38 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D3B0;
  v48 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v47;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5728;
  v42 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B9DC(v8, (double *)&v38);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B9DC(v10, (double *)&v39);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B9DC(v12, (double *)v40);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v44 = 2;
  *((_QWORD *)&v44 + 1) = (char *)&v41 + 8;
  v14 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_20B50B478(v14, (uint64_t)&v44);
  v15 = sub_20B446FA0((uint64_t)&v38);
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  v19 = *(_QWORD *)(v15 + 40);
  v20 = *(_OWORD *)(v15 + 64);
  v44 = *(_OWORD *)(v15 + 48);
  v45 = v20;
  *(_QWORD *)&v46 = *(_QWORD *)(v15 + 80);
  v21 = *(_QWORD *)(v15 + 216);
  v22 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24C41D4F0;
  v23 = *(_WORD *)(v15 + 208);
  *((_QWORD *)v22 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v15 + 16);
  *(_OWORD *)(v22 + 56) = *(_OWORD *)(v15 + 32);
  v24 = *(_OWORD *)(v15 + 48);
  v25 = *(_OWORD *)(v15 + 64);
  *((_QWORD *)v22 + 13) = *(_QWORD *)(v15 + 80);
  *(_OWORD *)(v22 + 88) = v25;
  *(_OWORD *)(v22 + 72) = v24;
  v26 = *(_QWORD *)(v15 + 88);
  *((_DWORD *)v22 + 30) = *(_DWORD *)(v15 + 96);
  *((_QWORD *)v22 + 14) = v26;
  v27 = *(_OWORD *)(v15 + 120);
  *((_OWORD *)v22 + 8) = *(_OWORD *)(v15 + 104);
  *((_OWORD *)v22 + 9) = v27;
  v28 = *(_OWORD *)(v15 + 152);
  v29 = *(_OWORD *)(v15 + 168);
  v30 = *(_OWORD *)(v15 + 184);
  *((_QWORD *)v22 + 28) = *(_QWORD *)(v15 + 200);
  *((_OWORD *)v22 + 12) = v29;
  *((_OWORD *)v22 + 13) = v30;
  *((_OWORD *)v22 + 11) = v28;
  *((_OWORD *)v22 + 10) = *(_OWORD *)(v15 + 136);
  *((_WORD *)v22 + 116) = v23;
  *((_QWORD *)v22 + 30) = v21;
  *((_QWORD *)v22 + 3) = &off_24C3F5728;
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v19;
  v31 = v45;
  *(_OWORD *)(a3 + 32) = v44;
  *(_OWORD *)(a3 + 48) = v31;
  *(_QWORD *)(a3 + 64) = v46;
  *(_QWORD *)(a3 + 72) = v21;
  v32 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v22 + 24;
  *(_QWORD *)(a3 + 88) = v22;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20B14BF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14BFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14BFBC(uint64_t a1, unint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v7;
  uint64_t (*v8)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v9;
  int v10;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v15;
  uint64_t (*v16)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v17;
  int v18;
  int v19;
  char *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v23;
  uint64_t (*v24)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  unsigned int v29;
  uint64_t (*v30)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v31;
  uint64_t (*v32)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v33;
  int v34;
  int v35;
  char *v36;
  unsigned int v37;
  uint64_t (*v38)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v39;
  uint64_t (*v40)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  unsigned int v45;
  uint64_t (*v46)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v47;
  uint64_t (*v48)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v49;
  int v50;
  int v51;
  char *v52;
  unsigned int v53;
  uint64_t (*v54)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v55;
  uint64_t (*v56)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v57;
  int v58;
  int v59;
  char *v60;
  unsigned int v61;
  uint64_t (*v62)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v63;
  uint64_t (*v64)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v65;
  int v66;
  int v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *exception;
  unint64_t v73;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "camera_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v73 = a2;
  sub_20B1499C4((uint64_t *)a1, (_DWORD **)&v73);
  sub_20B44354C((void (**)(int))a2);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v16 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v15 = a2 + 8;
      v14 = v16;
      if (!v16)
        goto LABEL_95;
      v17 = (float *)v14(3, v15, 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v17)
        goto LABEL_95;
      v18 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v18)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50A7A4(a1);
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      v20 = (char *)sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B454B2C(v20, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v21 = 2;
      else
        v21 = v73;
      sub_20B149BB4(a1, v17, v21);
      break;
    case 1:
      v24 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v23 = a2 + 8;
      v22 = v24;
      if (!v24)
        goto LABEL_95;
      v25 = v22(3, v23, 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v25)
        goto LABEL_95;
      v26 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50A7A4(a1);
      v27 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v27)
        *(_BYTE *)(a1 + 104) = 1;
      v28 = (char *)sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B454B2C(v28, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v29 = 2;
      else
        v29 = v73;
      sub_20B149FB8(a1, v25, v29);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v32 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v31 = a2 + 8;
      v30 = v32;
      if (!v32)
        goto LABEL_95;
      v33 = (float *)v30(3, v31, 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v33)
        goto LABEL_95;
      v34 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v34)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50A7A4(a1);
      v35 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v35)
        *(_BYTE *)(a1 + 104) = 1;
      v36 = (char *)sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B454B2C(v36, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v37 = 2;
      else
        v37 = v73;
      sub_20B14A3F0(a1, v33, v37);
      break;
    case 11:
      v40 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v39 = a2 + 8;
      v38 = v40;
      if (!v40 || (v41 = v38(3, v39, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
LABEL_95:
        sub_20B13DFF8();
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v42)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50A7A4(a1);
      v43 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v43)
        *(_BYTE *)(a1 + 104) = 1;
      v44 = (char *)sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20B454B2C(v44, &v73);
      if (HIDWORD(v73))
      {
LABEL_96:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      if (v73 >= 2)
        v45 = 2;
      else
        v45 = v73;
      sub_20B14A7F4(a1, v41, v45);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_95;
          v9 = (float *)v6(3, v7, 0, &unk_24C40F728, &unk_20B5E8C58);
          if (!v9)
            goto LABEL_95;
          v10 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v10)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50A7A4(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_20B50AA5C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B454B2C(v12, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v13 = 2;
          else
            v13 = v73;
          sub_20B14AC2C(a1, v9, v13);
          break;
        case 'e':
          v48 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v47 = a2 + 8;
          v46 = v48;
          if (!v48)
            goto LABEL_95;
          v49 = (double *)v46(3, v47, 0, &unk_24C40F778, &unk_20B5E8D30);
          if (!v49)
            goto LABEL_95;
          v50 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v50)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50A7A4(a1);
          v51 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v51)
            *(_BYTE *)(a1 + 104) = 1;
          v52 = (char *)sub_20B50AA5C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B454B2C(v52, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v53 = 2;
          else
            v53 = v73;
          sub_20B14B0D8(a1, v49, v53);
          break;
        case 'n':
          v56 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v55 = a2 + 8;
          v54 = v56;
          if (!v56)
            goto LABEL_95;
          v57 = (float *)v54(3, v55, 0, &unk_24C40F7C8, &unk_20B5E8E08);
          if (!v57)
            goto LABEL_95;
          v58 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v58)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50A7A4(a1);
          v59 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v59)
            *(_BYTE *)(a1 + 104) = 1;
          v60 = (char *)sub_20B50AA5C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B454B2C(v60, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v61 = 2;
          else
            v61 = v73;
          sub_20B14B5F4(a1, v57, v61);
          break;
        case 'o':
          v64 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v63 = a2 + 8;
          v62 = v64;
          if (!v64)
            goto LABEL_95;
          v65 = (double *)v62(3, v63, 0, &unk_24C40F818, &unk_20B5E8EE0);
          if (!v65)
            goto LABEL_95;
          v66 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v66)
            *(_BYTE *)(a1 + 104) = 1;
          sub_20B50A7A4(a1);
          v67 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v67)
            *(_BYTE *)(a1 + 104) = 1;
          v68 = (char *)sub_20B50AA5C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20B454B2C(v68, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v69 = 2;
          else
            v69 = v73;
          sub_20B14BAA0(a1, v65, v69);
          break;
        default:
          return;
      }
      break;
  }
  v70 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v70 - 8);
  v71 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v71 - 8);
  *(_QWORD *)(a1 + 48) = v70 - 8;
  *(_QWORD *)(a1 + 72) = v71 - 8;
}

_QWORD *sub_20B14C6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_20B448738(&v14);
  sub_20B441634((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24C41D808;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20B14F020(a2, &v17);
  sub_20B442B90(&v17, v12);
  sub_20B443C18((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24C41D808;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_20AFA2CC8((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_20B14C850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B14C8C8(uint64_t a1, int *a2)
{
  int v4;
  uint64_t (*v5)(uint64_t, int *, _QWORD, void *, void *);
  int *v6;
  uint64_t (*v7)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v8;
  uint64_t (*v9)(uint64_t, int *, _QWORD, void *, void *);
  int *v10;
  uint64_t (*v11)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v12;
  uint64_t (*v13)(uint64_t, int *, _QWORD, void *, void *);
  int *v14;
  uint64_t (*v15)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, int *, _QWORD, void *, void *);
  int *v18;
  uint64_t (*v19)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v20;
  uint64_t (*v21)(uint64_t, int *, _QWORD, void *, void *);
  int *v22;
  uint64_t (*v23)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, int *, _QWORD, void *, void *);
  int *v26;
  uint64_t (*v27)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, int *, _QWORD, void *, void *);
  int *v30;
  uint64_t (*v31)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v32;
  uint64_t (*v33)(uint64_t, int *, _QWORD, void *, void *);
  int *v34;
  uint64_t (*v35)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v36;
  unsigned int v37;

  v37 = 0;
  sub_20B514490(a1, &v37);
  *a2 = v37;
  sub_20B44502C((void (**)(int))a2);
  v4 = *a2;
  switch(v4)
  {
    case 0:
      v11 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v10 = a2 + 2;
      v9 = v11;
      if (!v11)
        goto LABEL_28;
      v12 = (_DWORD *)v9(3, v10, 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v12)
        goto LABEL_28;
      sub_20B14CC38((uint64_t)&v37, a1, v12);
      break;
    case 1:
      v15 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v14 = a2 + 2;
      v13 = v15;
      if (!v15)
        goto LABEL_28;
      v16 = v13(3, v14, 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v16)
        goto LABEL_28;
      sub_20B14D034((uint64_t)&v37, a1, v16);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v19 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v18 = a2 + 2;
      v17 = v19;
      if (!v19)
        goto LABEL_28;
      v20 = (_DWORD *)v17(3, v18, 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v20)
        goto LABEL_28;
      sub_20B14D464((uint64_t)&v37, a1, v20);
      break;
    case 11:
      v23 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v22 = a2 + 2;
      v21 = v23;
      if (!v23 || (v24 = v21(3, v22, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
LABEL_28:
        sub_20B13DFF8();
      sub_20B14D860((uint64_t)&v37, a1, v24);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v6 = a2 + 2;
          v5 = v7;
          if (!v7)
            goto LABEL_28;
          v8 = (_DWORD *)v5(3, v6, 0, &unk_24C40F728, &unk_20B5E8C58);
          if (!v8)
            goto LABEL_28;
          v37 = 2;
          sub_20B514490(a1, &v37);
          sub_20B14DC90((uint64_t)&v37, a1, v8, v37);
          break;
        case 'e':
          v27 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v26 = a2 + 2;
          v25 = v27;
          if (!v27)
            goto LABEL_28;
          v28 = v25(3, v26, 0, &unk_24C40F778, &unk_20B5E8D30);
          if (!v28)
            goto LABEL_28;
          v37 = 2;
          sub_20B514490(a1, &v37);
          sub_20B14E13C((uint64_t)&v37, a1, v28, v37);
          break;
        case 'n':
          v31 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v30 = a2 + 2;
          v29 = v31;
          if (!v31)
            goto LABEL_28;
          v32 = (_DWORD *)v29(3, v30, 0, &unk_24C40F7C8, &unk_20B5E8E08);
          if (!v32)
            goto LABEL_28;
          v37 = 2;
          sub_20B514490(a1, &v37);
          sub_20B14E658((uint64_t)&v37, a1, v32, v37);
          break;
        case 'o':
          v35 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v34 = a2 + 2;
          v33 = v35;
          if (!v35)
            goto LABEL_28;
          v36 = v33(3, v34, 0, &unk_24C40F818, &unk_20B5E8EE0);
          if (!v36)
            goto LABEL_28;
          v37 = 2;
          sub_20B514490(a1, &v37);
          sub_20B14EB04((uint64_t)&v37, a1, v36, v37);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20B14CC38(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_20B514490(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_20B14CDA0((uint64_t)__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    sub_20B5152B0(a2, a3);
    sub_20B5152B0(a2, a3 + 1);
    sub_20B5152B0(a2, a3 + 2);
    sub_20B5152B0(a2, a3 + 3);
    sub_20B514490(a2, a3 + 4);
    sub_20B514490(a2, a3 + 5);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20B14CDA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D588;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5D38;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5C88;
  v36 = (int8x16_t *)(v5 + 24);
  sub_20B5152B0(a2, &v33);
  sub_20B5152B0(a2, (_DWORD *)&v33 + 1);
  sub_20B5152B0(a2, &v34);
  sub_20B5152B0(a2, (_DWORD *)&v34 + 1);
  sub_20B514490(a2, &v35);
  sub_20B514490(a2, (_DWORD *)&v35 + 1);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24C41D6C8;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C3F5D38;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C3F5C88;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20B14CFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14CFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14D00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14D020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14D034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_20B514490(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_20B14D19C((uint64_t)__p, a2, (_QWORD *)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    sub_20B515504(a2, (_QWORD *)a3);
    sub_20B515504(a2, (_QWORD *)(a3 + 8));
    sub_20B515504(a2, (_QWORD *)(a3 + 16));
    sub_20B515504(a2, (_QWORD *)(a3 + 24));
    sub_20B514490(a2, (_DWORD *)(a3 + 32));
    sub_20B514490(a2, (_DWORD *)(a3 + 36));
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20B14D19C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D628;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5508;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F57F8;
  v34 = v5 + 24;
  sub_20B515504(a2, &v31);
  sub_20B515504(a2, (_QWORD *)&v31 + 1);
  sub_20B515504(a2, &v32);
  sub_20B515504(a2, (_QWORD *)&v32 + 1);
  sub_20B514490(a2, &v33);
  sub_20B514490(a2, (_DWORD *)&v33 + 1);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_24C41D768;
  *((_QWORD *)v20 + 4) = &off_24C3F5508;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24C3F57F8;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20B14D414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14D428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14D43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14D450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14D464(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_20B514490(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_20B14D5CC((uint64_t)__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    sub_20B5152B0(a2, a3);
    sub_20B5152B0(a2, a3 + 1);
    sub_20B5152B0(a2, a3 + 2);
    sub_20B5152B0(a2, a3 + 3);
    sub_20B514490(a2, a3 + 4);
    sub_20B514490(a2, a3 + 5);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20B14D5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D5D8;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5D38;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5998;
  v36 = (int8x16_t *)(v5 + 24);
  sub_20B5152B0(a2, &v33);
  sub_20B5152B0(a2, (_DWORD *)&v33 + 1);
  sub_20B5152B0(a2, &v34);
  sub_20B5152B0(a2, (_DWORD *)&v34 + 1);
  sub_20B514490(a2, &v35);
  sub_20B514490(a2, (_DWORD *)&v35 + 1);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24C41D718;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C3F5D38;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C3F5998;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20B14D810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14D824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14D84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14D860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_20B514490(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_20B14D9C8((uint64_t)__p, a2, (_QWORD *)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    sub_20B515504(a2, (_QWORD *)a3);
    sub_20B515504(a2, (_QWORD *)(a3 + 8));
    sub_20B515504(a2, (_QWORD *)(a3 + 16));
    sub_20B515504(a2, (_QWORD *)(a3 + 24));
    sub_20B514490(a2, (_DWORD *)(a3 + 32));
    sub_20B514490(a2, (_DWORD *)(a3 + 36));
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20B14D9C8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D678;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5508;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F55F8;
  v34 = v5 + 24;
  sub_20B515504(a2, &v31);
  sub_20B515504(a2, (_QWORD *)&v31 + 1);
  sub_20B515504(a2, &v32);
  sub_20B515504(a2, (_QWORD *)&v32 + 1);
  sub_20B514490(a2, &v33);
  sub_20B514490(a2, (_DWORD *)&v33 + 1);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_24C41D7B8;
  *((_QWORD *)v20 + 4) = &off_24C3F5508;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24C3F55F8;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20B14DC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14DC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14DC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14DC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14DC90(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  unsigned int v4;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  v4 = a4;
  if (a4 >= 2)
    a4 = 2;
  if (a4 < 2)
  {
    sub_20B14DE24((uint64_t)__p, a2, (uint64_t)a3);
    if (v4 < 2)
      return;
  }
  else
  {
    sub_20B5152B0(a2, a3);
    sub_20B5152B0(a2, a3 + 1);
    sub_20B5152B0(a2, a3 + 2);
    sub_20B5152B0(a2, a3 + 3);
    sub_20B5152B0(a2, a3 + 4);
    sub_20B5152B0(a2, a3 + 5);
    sub_20B5152B0(a2, a3 + 6);
    sub_20B5152B0(a2, a3 + 7);
    sub_20B5152B0(a2, a3 + 8);
    sub_20B514490(a2, a3 + 9);
    sub_20B514490(a2, a3 + 10);
    if (v4 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_23;
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_23:
        operator delete(__p[0]);
LABEL_9:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20B14DE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _DWORD v25[8];
  char *v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = 0u;
  memset(v25, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D2C0;
  v29 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5A28;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v29;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v27 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5B58;
  v26 = v5 + 24;
  sub_20B5152B0(a2, &v24);
  sub_20B5152B0(a2, (_DWORD *)&v24 + 1);
  sub_20B5152B0(a2, (_DWORD *)&v24 + 2);
  sub_20B5152B0(a2, (_DWORD *)((unint64_t)&v24 | 0xC));
  sub_20B5152B0(a2, v25);
  sub_20B5152B0(a2, &v25[1]);
  sub_20B5152B0(a2, &v25[2]);
  sub_20B5152B0(a2, &v25[3]);
  sub_20B5152B0(a2, &v25[4]);
  sub_20B514490(a2, &v25[5]);
  sub_20B514490(a2, &v25[6]);
  v7 = sub_20B446E78((uint64_t)&v24);
  v23 = *(_OWORD *)(v7 + 16);
  v28 = *(_OWORD *)(v7 + 32);
  LODWORD(v29) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24C41D400;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24C3F5A28;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24C3F5B58;
  v16 = v28;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20B14E0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14E0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14E100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14E114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14E128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14E13C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  v4 = a4;
  if (a4 >= 2)
    a4 = 2;
  if (a4 < 2)
  {
    sub_20B14E2D0((uint64_t)__p, a2, a3);
    if (v4 < 2)
      return;
  }
  else
  {
    sub_20B515504(a2, (_QWORD *)a3);
    sub_20B515504(a2, (_QWORD *)(a3 + 8));
    sub_20B515504(a2, (_QWORD *)(a3 + 16));
    sub_20B515504(a2, (_QWORD *)(a3 + 24));
    sub_20B515504(a2, (_QWORD *)(a3 + 32));
    sub_20B515504(a2, (_QWORD *)(a3 + 40));
    sub_20B515504(a2, (_QWORD *)(a3 + 48));
    sub_20B515504(a2, (_QWORD *)(a3 + 56));
    sub_20B515504(a2, (_QWORD *)(a3 + 64));
    sub_20B514490(a2, (_DWORD *)(a3 + 72));
    sub_20B514490(a2, (_DWORD *)(a3 + 76));
    if (v4 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_23;
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_23:
        operator delete(__p[0]);
LABEL_9:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20B14E2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D360;
  v41 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v40;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v36 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F58C8;
  v35 = v5 + 24;
  sub_20B515504(a2, &v30);
  sub_20B515504(a2, (_QWORD *)&v30 + 1);
  sub_20B515504(a2, &v31);
  sub_20B515504(a2, (_QWORD *)&v31 + 1);
  sub_20B515504(a2, &v32);
  sub_20B515504(a2, (_QWORD *)&v32 + 1);
  sub_20B515504(a2, &v33);
  sub_20B515504(a2, (_QWORD *)&v33 + 1);
  sub_20B515504(a2, &v34);
  sub_20B514490(a2, (_DWORD *)&v34 + 2);
  sub_20B514490(a2, (_DWORD *)&v34 + 3);
  v7 = sub_20B446FA0((uint64_t)&v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v37 = *(_OWORD *)(v7 + 48);
  v38 = v12;
  *(_QWORD *)&v39 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_24C41D4A0;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24C3F58C8;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v38;
  *(_OWORD *)(a3 + 32) = v37;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v39;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v36;
  if (v36)
  {
    v28 = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20B14E5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14E608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14E61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14E630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14E644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14E658(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  unsigned int v4;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  v4 = a4;
  if (a4 >= 2)
    a4 = 2;
  if (a4 < 2)
  {
    sub_20B14E7EC((uint64_t)__p, a2, (uint64_t)a3);
    if (v4 < 2)
      return;
  }
  else
  {
    sub_20B5152B0(a2, a3);
    sub_20B5152B0(a2, a3 + 1);
    sub_20B5152B0(a2, a3 + 2);
    sub_20B5152B0(a2, a3 + 3);
    sub_20B5152B0(a2, a3 + 4);
    sub_20B5152B0(a2, a3 + 5);
    sub_20B5152B0(a2, a3 + 6);
    sub_20B5152B0(a2, a3 + 7);
    sub_20B5152B0(a2, a3 + 8);
    sub_20B514490(a2, a3 + 9);
    sub_20B514490(a2, a3 + 10);
    if (v4 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_23;
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_23:
        operator delete(__p[0]);
LABEL_9:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20B14E7EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _DWORD v25[8];
  char *v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = 0u;
  memset(v25, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D310;
  v29 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5A28;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v29;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v27 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5A88;
  v26 = v5 + 24;
  sub_20B5152B0(a2, &v24);
  sub_20B5152B0(a2, (_DWORD *)&v24 + 1);
  sub_20B5152B0(a2, (_DWORD *)&v24 + 2);
  sub_20B5152B0(a2, (_DWORD *)((unint64_t)&v24 | 0xC));
  sub_20B5152B0(a2, v25);
  sub_20B5152B0(a2, &v25[1]);
  sub_20B5152B0(a2, &v25[2]);
  sub_20B5152B0(a2, &v25[3]);
  sub_20B5152B0(a2, &v25[4]);
  sub_20B514490(a2, &v25[5]);
  sub_20B514490(a2, &v25[6]);
  v7 = sub_20B446E78((uint64_t)&v24);
  v23 = *(_OWORD *)(v7 + 16);
  v28 = *(_OWORD *)(v7 + 32);
  LODWORD(v29) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24C41D450;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24C3F5A28;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24C3F5A88;
  v16 = v28;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20B14EAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14EAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14EAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14EADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14EAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14EB04(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  v4 = a4;
  if (a4 >= 2)
    a4 = 2;
  if (a4 < 2)
  {
    sub_20B14EC98((uint64_t)__p, a2, a3);
    if (v4 < 2)
      return;
  }
  else
  {
    sub_20B515504(a2, (_QWORD *)a3);
    sub_20B515504(a2, (_QWORD *)(a3 + 8));
    sub_20B515504(a2, (_QWORD *)(a3 + 16));
    sub_20B515504(a2, (_QWORD *)(a3 + 24));
    sub_20B515504(a2, (_QWORD *)(a3 + 32));
    sub_20B515504(a2, (_QWORD *)(a3 + 40));
    sub_20B515504(a2, (_QWORD *)(a3 + 48));
    sub_20B515504(a2, (_QWORD *)(a3 + 56));
    sub_20B515504(a2, (_QWORD *)(a3 + 64));
    sub_20B514490(a2, (_DWORD *)(a3 + 72));
    sub_20B514490(a2, (_DWORD *)(a3 + 76));
    if (v4 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_23;
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_23:
        operator delete(__p[0]);
LABEL_9:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20B14EC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D3B0;
  v41 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v40;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v36 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5728;
  v35 = v5 + 24;
  sub_20B515504(a2, &v30);
  sub_20B515504(a2, (_QWORD *)&v30 + 1);
  sub_20B515504(a2, &v31);
  sub_20B515504(a2, (_QWORD *)&v31 + 1);
  sub_20B515504(a2, &v32);
  sub_20B515504(a2, (_QWORD *)&v32 + 1);
  sub_20B515504(a2, &v33);
  sub_20B515504(a2, (_QWORD *)&v33 + 1);
  sub_20B515504(a2, &v34);
  sub_20B514490(a2, (_DWORD *)&v34 + 2);
  sub_20B514490(a2, (_DWORD *)&v34 + 3);
  v7 = sub_20B446FA0((uint64_t)&v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v37 = *(_OWORD *)(v7 + 48);
  v38 = v12;
  *(_QWORD *)&v39 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_24C41D4F0;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24C3F5728;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v38;
  *(_OWORD *)(a3 + 32) = v37;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v39;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v36;
  if (v36)
  {
    v28 = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20B14EFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14EFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14EFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14EFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14F00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B14F020(uint64_t a1, int *a2)
{
  int v4;
  uint64_t (*v5)(uint64_t, int *, _QWORD, void *, void *);
  int *v6;
  uint64_t (*v7)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v8;
  uint64_t (*v9)(uint64_t, int *, _QWORD, void *, void *);
  int *v10;
  uint64_t (*v11)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v12;
  uint64_t (*v13)(uint64_t, int *, _QWORD, void *, void *);
  int *v14;
  uint64_t (*v15)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, int *, _QWORD, void *, void *);
  int *v18;
  uint64_t (*v19)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v20;
  uint64_t (*v21)(uint64_t, int *, _QWORD, void *, void *);
  int *v22;
  uint64_t (*v23)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, int *, _QWORD, void *, void *);
  int *v26;
  uint64_t (*v27)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, int *, _QWORD, void *, void *);
  int *v30;
  uint64_t (*v31)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v32;
  uint64_t (*v33)(uint64_t, int *, _QWORD, void *, void *);
  int *v34;
  uint64_t (*v35)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v36;
  unsigned int v37;

  v37 = 0;
  sub_20B514490(a1, &v37);
  *a2 = v37;
  sub_20B44354C((void (**)(int))a2);
  v4 = *a2;
  switch(v4)
  {
    case 0:
      v11 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v10 = a2 + 2;
      v9 = v11;
      if (!v11)
        goto LABEL_28;
      v12 = (_DWORD *)v9(3, v10, 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v12)
        goto LABEL_28;
      sub_20B14CC38((uint64_t)&v37, a1, v12);
      break;
    case 1:
      v15 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v14 = a2 + 2;
      v13 = v15;
      if (!v15)
        goto LABEL_28;
      v16 = v13(3, v14, 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v16)
        goto LABEL_28;
      sub_20B14D034((uint64_t)&v37, a1, v16);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v19 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v18 = a2 + 2;
      v17 = v19;
      if (!v19)
        goto LABEL_28;
      v20 = (_DWORD *)v17(3, v18, 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v20)
        goto LABEL_28;
      sub_20B14D464((uint64_t)&v37, a1, v20);
      break;
    case 11:
      v23 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v22 = a2 + 2;
      v21 = v23;
      if (!v23 || (v24 = v21(3, v22, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
LABEL_28:
        sub_20B13DFF8();
      sub_20B14D860((uint64_t)&v37, a1, v24);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v6 = a2 + 2;
          v5 = v7;
          if (!v7)
            goto LABEL_28;
          v8 = (_DWORD *)v5(3, v6, 0, &unk_24C40F728, &unk_20B5E8C58);
          if (!v8)
            goto LABEL_28;
          v37 = 2;
          sub_20B514490(a1, &v37);
          sub_20B14DC90((uint64_t)&v37, a1, v8, v37);
          break;
        case 'e':
          v27 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v26 = a2 + 2;
          v25 = v27;
          if (!v27)
            goto LABEL_28;
          v28 = v25(3, v26, 0, &unk_24C40F778, &unk_20B5E8D30);
          if (!v28)
            goto LABEL_28;
          v37 = 2;
          sub_20B514490(a1, &v37);
          sub_20B14E13C((uint64_t)&v37, a1, v28, v37);
          break;
        case 'n':
          v31 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v30 = a2 + 2;
          v29 = v31;
          if (!v31)
            goto LABEL_28;
          v32 = (_DWORD *)v29(3, v30, 0, &unk_24C40F7C8, &unk_20B5E8E08);
          if (!v32)
            goto LABEL_28;
          v37 = 2;
          sub_20B514490(a1, &v37);
          sub_20B14E658((uint64_t)&v37, a1, v32, v37);
          break;
        case 'o':
          v35 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v34 = a2 + 2;
          v33 = v35;
          if (!v35)
            goto LABEL_28;
          v36 = v33(3, v34, 0, &unk_24C40F818, &unk_20B5E8EE0);
          if (!v36)
            goto LABEL_28;
          v37 = 2;
          sub_20B514490(a1, &v37);
          sub_20B14EB04((uint64_t)&v37, a1, v36, v37);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20B14F390(uint64_t a1, _QWORD *a2, int *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20B14F484((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    sub_20B42BA30(a2);
    sub_20B14F680(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20B14F470(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B14F484(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_20B448738(&v14);
  sub_20B441634((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24C41D808;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20B152B60(a2, &v17);
  sub_20B442B90(&v17, v12);
  sub_20B443C18((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24C41D808;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_20AFA2CC8((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_20B14F608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B14F680(_QWORD *a1, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  int v8;
  int v9;
  uint64_t (*v10)(uint64_t, int *, _QWORD, void *, void *);
  int *v11;
  uint64_t (*v12)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, int *, _QWORD, void *, void *);
  int *v15;
  uint64_t (*v16)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v17;
  uint64_t (*v18)(uint64_t, int *, _QWORD, void *, void *);
  int *v19;
  uint64_t (*v20)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v21;
  uint64_t (*v22)(uint64_t, int *, _QWORD, void *, void *);
  int *v23;
  uint64_t (*v24)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v25;
  uint64_t (*v26)(uint64_t, int *, _QWORD, void *, void *);
  int *v27;
  uint64_t (*v28)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v29;
  uint64_t (*v30)(uint64_t, int *, _QWORD, void *, void *);
  int *v31;
  uint64_t (*v32)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v33;
  uint64_t (*v34)(uint64_t, int *, _QWORD, void *, void *);
  int *v35;
  uint64_t (*v36)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, int *, _QWORD, void *, void *);
  int *v39;
  uint64_t (*v40)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v41;
  std::logic_error *exception;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  *a2 = v8;
  sub_20B44502C((void (**)(int))a2);
  v9 = *a2;
  switch(v9)
  {
    case 0:
      v16 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v15 = a2 + 2;
      v14 = v16;
      if (!v16)
        goto LABEL_31;
      v17 = (_QWORD *)v14(3, v15, 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v17)
        goto LABEL_31;
      sub_20B14F9D8((uint64_t)&v43, a1, v17);
      break;
    case 1:
      v20 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v19 = a2 + 2;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = (_QWORD *)v18(3, v19, 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v21)
        goto LABEL_31;
      sub_20B14FF68((uint64_t)&v44, a1, v21);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v24 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v23 = a2 + 2;
      v22 = v24;
      if (!v24)
        goto LABEL_31;
      v25 = (_QWORD *)v22(3, v23, 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v25)
        goto LABEL_31;
      sub_20B15052C((uint64_t)&v45, a1, v25);
      break;
    case 11:
      v28 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v27 = a2 + 2;
      v26 = v28;
      if (!v28 || (v29 = (_QWORD *)v26(3, v27, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
LABEL_31:
        sub_20B13DFF8();
      sub_20B150ABC((uint64_t)&v46, a1, v29);
      break;
    default:
      switch(v9)
      {
        case 'd':
          v12 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v11 = a2 + 2;
          v10 = v12;
          if (!v12)
            goto LABEL_31;
          v13 = v10(3, v11, 0, &unk_24C40F728, &unk_20B5E8C58);
          if (!v13)
            goto LABEL_31;
          sub_20B151080((uint64_t)&v47, a1, v13);
          break;
        case 'e':
          v32 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v31 = a2 + 2;
          v30 = v32;
          if (!v32)
            goto LABEL_31;
          v33 = v30(3, v31, 0, &unk_24C40F778, &unk_20B5E8D30);
          if (!v33)
            goto LABEL_31;
          sub_20B151700((uint64_t)&v48, a1, v33);
          break;
        case 'n':
          v36 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v35 = a2 + 2;
          v34 = v36;
          if (!v36)
            goto LABEL_31;
          v37 = v34(3, v35, 0, &unk_24C40F7C8, &unk_20B5E8E08);
          if (!v37)
            goto LABEL_31;
          sub_20B151DF0((uint64_t)&v49, a1, v37);
          break;
        case 'o':
          v40 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v39 = a2 + 2;
          v38 = v40;
          if (!v40)
            goto LABEL_31;
          v41 = v38(3, v39, 0, &unk_24C40F818, &unk_20B5E8EE0);
          if (!v41)
            goto LABEL_31;
          sub_20B152470((uint64_t)&v50, a1, v41);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20B14F9C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B14F9D8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20B14FACC((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    sub_20B42BA30(a2);
    sub_20B14FCF8(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20B14FAB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B14FACC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D588;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5D38;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5C88;
  v36 = (int8x16_t *)(v5 + 24);
  sub_20B14FE30(a2, &v33);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24C41D6C8;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C3F5D38;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C3F5C88;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20B14FCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B14FCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B14FCF8(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_11;
  *a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_11;
  a2[1] = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[2] = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20B14FDF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B14FE08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B14FE1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B14FE30(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_11;
  *a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_11;
  a2[1] = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[2] = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20B14FF2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B14FF40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B14FF54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B14FF68(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20B15005C((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_20B42BA30(a2);
    sub_20B1502BC(a2, (uint64_t)a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20B150048(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B15005C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D628;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5508;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F57F8;
  v34 = v5 + 24;
  sub_20B1503F4(a2, (uint64_t)&v31);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_24C41D768;
  *((_QWORD *)v20 + 4) = &off_24C3F5508;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24C3F57F8;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20B150294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1502A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1502BC(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20B1503B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1503CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1503E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1503F4(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20B1504F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B150504(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B150518(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B15052C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20B150620((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    sub_20B42BA30(a2);
    sub_20B15084C(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20B15060C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B150620(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D5D8;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5D38;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5998;
  v36 = (int8x16_t *)(v5 + 24);
  sub_20B150984(a2, &v33);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24C41D718;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C3F5D38;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C3F5998;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20B150824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B150838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B15084C(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_11;
  *a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_11;
  a2[1] = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[2] = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20B150948(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B15095C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B150970(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B150984(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_11;
  *a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_11;
  a2[1] = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[2] = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20B150A80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B150A94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B150AA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B150ABC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20B150BB0((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_20B42BA30(a2);
    sub_20B150E10(a2, (uint64_t)a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20B150B9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B150BB0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D678;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5508;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F55F8;
  v34 = v5 + 24;
  sub_20B150F48(a2, (uint64_t)&v31);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_24C41D7B8;
  *((_QWORD *)v20 + 4) = &off_24C3F5508;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24C3F55F8;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20B150DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B150DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B150E10(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20B150F0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B150F20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B150F34(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B150F48(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20B151044(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B151058(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B15106C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B151080(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20B151174((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_20B42BA30(a2);
    sub_20B1513C8(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20B151160(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B151174(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  _OWORD v24[3];
  char *v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(v24, 0, 44);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D2C0;
  v28 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5A28;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v28;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v26 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5B58;
  v25 = v5 + 24;
  sub_20B151564(a2, (uint64_t)v24);
  v7 = sub_20B446E78((uint64_t)v24);
  v23 = *(_OWORD *)(v7 + 16);
  v27 = *(_OWORD *)(v7 + 32);
  LODWORD(v28) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24C41D400;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24C3F5A28;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24C3F5B58;
  v16 = v27;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v28;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v26;
  if (v26)
  {
    v21 = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20B1513A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1513B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1513C8(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_14;
  *(_QWORD *)a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_14;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x13)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  v14 = result[7];
  v15 = result[6] + 20;
  result[6] = v15;
  v4 = v14 >= v15;
  v16 = v14 - v15;
  if (!v4)
    v16 = 0;
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_20B151514(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B151528(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B15153C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B151550(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B151564(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_14;
  *(_QWORD *)a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_14;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x13)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  v14 = result[7];
  v15 = result[6] + 20;
  result[6] = v15;
  v4 = v14 >= v15;
  v16 = v14 - v15;
  if (!v4)
    v16 = 0;
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_20B1516B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1516C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1516D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1516EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B151700(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20B1517F4((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_20B42BA30(a2);
    sub_20B151AB8(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20B1517E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1517F4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD v30[5];
  char *v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  memset(v30, 0, sizeof(v30));
  v5 = (char *)operator new(0xF8uLL);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D360;
  v37 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v36;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v32 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F58C8;
  v31 = v5 + 24;
  sub_20B151C54(a2, (uint64_t)v30);
  v7 = sub_20B446FA0((uint64_t)v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v33 = *(_OWORD *)(v7 + 48);
  v34 = v12;
  *(_QWORD *)&v35 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_24C41D4A0;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24C3F58C8;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v34;
  *(_OWORD *)(a3 + 32) = v33;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v35;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v32;
  if (v32)
  {
    v28 = (unint64_t *)&v32->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20B151A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B151AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B151AB8(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x27)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  v15 = result[7];
  v16 = result[6] + 40;
  result[6] = v16;
  v4 = v15 >= v16;
  v17 = v15 - v16;
  if (!v4)
    v17 = 0;
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_20B151C04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B151C18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B151C2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B151C40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B151C54(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x27)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  v15 = result[7];
  v16 = result[6] + 40;
  result[6] = v16;
  v4 = v15 >= v16;
  v17 = v15 - v16;
  if (!v4)
    v17 = 0;
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_20B151DA0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B151DB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B151DC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B151DDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B151DF0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20B151EE4((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_20B42BA30(a2);
    sub_20B152138(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20B151ED0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B151EE4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  _OWORD v24[3];
  char *v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(v24, 0, 44);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D310;
  v28 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5A28;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v28;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v26 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5A88;
  v25 = v5 + 24;
  sub_20B1522D4(a2, (uint64_t)v24);
  v7 = sub_20B446E78((uint64_t)v24);
  v23 = *(_OWORD *)(v7 + 16);
  v27 = *(_OWORD *)(v7 + 32);
  LODWORD(v28) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24C41D450;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24C3F5A28;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24C3F5A88;
  v16 = v27;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v28;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v26;
  if (v26)
  {
    v21 = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20B152110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B152124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B152138(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_14;
  *(_QWORD *)a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_14;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x13)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  v14 = result[7];
  v15 = result[6] + 20;
  result[6] = v15;
  v4 = v14 >= v15;
  v16 = v14 - v15;
  if (!v4)
    v16 = 0;
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_20B152284(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B152298(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1522AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1522C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1522D4(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_14;
  *(_QWORD *)a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_14;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x13)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  v14 = result[7];
  v15 = result[6] + 20;
  result[6] = v15;
  v4 = v14 >= v15;
  v16 = v14 - v15;
  if (!v4)
    v16 = 0;
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_20B152420(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B152434(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B152448(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B15245C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B152470(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20B152564((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_20B42BA30(a2);
    sub_20B152828(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20B152550(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B152564(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD v30[5];
  char *v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  memset(v30, 0, sizeof(v30));
  v5 = (char *)operator new(0xF8uLL);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D3B0;
  v37 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v36;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v32 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5728;
  v31 = v5 + 24;
  sub_20B1529C4(a2, (uint64_t)v30);
  v7 = sub_20B446FA0((uint64_t)v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v33 = *(_OWORD *)(v7 + 48);
  v34 = v12;
  *(_QWORD *)&v35 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_24C41D4F0;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24C3F5728;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v34;
  *(_OWORD *)(a3 + 32) = v33;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v35;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v32;
  if (v32)
  {
    v28 = (unint64_t *)&v32->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

