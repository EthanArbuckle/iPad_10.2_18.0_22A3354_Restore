_QWORD *sub_20B44017C(uint64_t a1)
{
  unsigned __int8 **v2;
  uint64_t *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v2 = *(unsigned __int8 ***)a1;
  sub_20B43D624(*(unsigned __int8 ***)a1, 8);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (uint64_t *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 8;
  if (v5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0x10;
  if (v6)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0xF)
    return sub_20AEC01D0(*v7, (uint64_t)"{}", 2);
LABEL_15:
  v9 = v4 >> 4;
  sub_20AEC01D0(v8, (uint64_t)"{", 1);
  sub_20B4386C4(v8, v3);
  if (v9 != 1)
  {
    v10 = v3 + 2;
    v11 = 16 * v9 - 16;
    do
    {
      sub_20AEC01D0(v8, (uint64_t)",", 1);
      sub_20B4386C4(v8, v10);
      v10 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return sub_20AEC01D0(v8, (uint64_t)"}", 1);
}

_QWORD *sub_20B4402EC(uint64_t a1)
{
  unsigned __int8 **v2;
  float *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t v9;
  float *v10;
  uint64_t v11;

  v2 = *(unsigned __int8 ***)a1;
  sub_20B43D624(*(unsigned __int8 ***)a1, 11);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (float *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 4;
  if (v5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 8;
  if (v6)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 7)
    return sub_20AEC01D0(*v7, (uint64_t)"{}", 2);
LABEL_15:
  v9 = v4 >> 3;
  sub_20AEC01D0(v8, (uint64_t)"{", 1);
  sub_20B4389AC(v8, v3);
  if (v9 != 1)
  {
    v10 = v3 + 2;
    v11 = 8 * v9 - 8;
    do
    {
      sub_20AEC01D0(v8, (uint64_t)",", 1);
      sub_20B4389AC(v8, v10);
      v10 += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return sub_20AEC01D0(v8, (uint64_t)"}", 1);
}

_QWORD *sub_20B44045C(uint64_t a1)
{
  unsigned __int8 **v2;
  double *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t v9;
  double *v10;
  uint64_t v11;

  v2 = *(unsigned __int8 ***)a1;
  sub_20B43D624(*(unsigned __int8 ***)a1, 12);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (double *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 8;
  if (v5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0x10;
  if (v6)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0xF)
    return sub_20AEC01D0(*v7, (uint64_t)"{}", 2);
LABEL_15:
  v9 = v4 >> 4;
  sub_20AEC01D0(v8, (uint64_t)"{", 1);
  sub_20B438AD8(v8, v3);
  if (v9 != 1)
  {
    v10 = v3 + 2;
    v11 = 16 * v9 - 16;
    do
    {
      sub_20AEC01D0(v8, (uint64_t)",", 1);
      sub_20B438AD8(v8, v10);
      v10 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return sub_20AEC01D0(v8, (uint64_t)"}", 1);
}

_QWORD *sub_20B4405CC(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      result = sub_20B4406F4((uint64_t)v4);
      break;
    case 1:
      result = sub_20B440874((uint64_t)v4);
      break;
    case 2:
      result = sub_20B4409FC((uint64_t)v4);
      break;
    case 3:
      result = sub_20B440B84((uint64_t)v4);
      break;
    case 5:
      result = sub_20B440D0C((uint64_t)v4);
      break;
    case 6:
      result = sub_20B440E8C((uint64_t)v4);
      break;
    case 7:
      result = sub_20B441014((uint64_t)v4);
      break;
    case 8:
      result = sub_20B44119C((uint64_t)v4);
      break;
    case 11:
      result = sub_20B441324((uint64_t)v4);
      break;
    case 12:
      result = sub_20B4414AC((uint64_t)v4);
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

_QWORD *sub_20B4406F4(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20B43D624(*(unsigned __int8 ***)a1, 0);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (unsigned __int8 *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 3;
  if (v6)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_14;
    }
LABEL_18:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 2)
    return sub_20AEC01D0(*v7, (uint64_t)"{}", 2);
LABEL_14:
  sub_20AEC01D0(v8, (uint64_t)"{", 1);
  sub_20B439EEC(v8, v3);
  if (v4 - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 3 * (v4 / 3) - 3;
    do
    {
      sub_20AEC01D0(v8, (uint64_t)",", 1);
      sub_20B439EEC(v8, v9);
      v9 += 3;
      v10 -= 3;
    }
    while (v10);
  }
  return sub_20AEC01D0(v8, (uint64_t)"}", 1);
}

_QWORD *sub_20B440874(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int16 *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unsigned __int16 *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20B43D624(*(unsigned __int8 ***)a1, 1);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (unsigned __int16 *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 2;
  if (v5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 6;
  if (v6)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 5)
    return sub_20AEC01D0(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_20AEC01D0(v8, (uint64_t)"{", 1);
  sub_20B43A258(v8, v3);
  if ((v4 >> 1) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 6 * (v4 / 6) - 6;
    do
    {
      sub_20AEC01D0(v8, (uint64_t)",", 1);
      sub_20B43A258(v8, v9);
      v9 += 3;
      v10 -= 6;
    }
    while (v10);
  }
  return sub_20AEC01D0(v8, (uint64_t)"}", 1);
}

_QWORD *sub_20B4409FC(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned int *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unsigned int *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20B43D624(*(unsigned __int8 ***)a1, 2);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (unsigned int *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 4;
  if (v5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0xC;
  if (v6)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0xB)
    return sub_20AEC01D0(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_20AEC01D0(v8, (uint64_t)"{", 1);
  sub_20B43A5C4(v8, v3);
  if ((v4 >> 2) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 12 * (v4 / 0xC) - 12;
    do
    {
      sub_20AEC01D0(v8, (uint64_t)",", 1);
      sub_20B43A5C4(v8, v9);
      v9 += 3;
      v10 -= 12;
    }
    while (v10);
  }
  return sub_20AEC01D0(v8, (uint64_t)"}", 1);
}

_QWORD *sub_20B440B84(uint64_t a1)
{
  unsigned __int8 **v2;
  unint64_t *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20B43D624(*(unsigned __int8 ***)a1, 3);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (unint64_t *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 8;
  if (v5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0x18;
  if (v6)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0x17)
    return sub_20AEC01D0(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_20AEC01D0(v8, (uint64_t)"{", 1);
  sub_20B43A6F0(v8, v3);
  if ((v4 >> 3) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 24 * (v4 / 0x18) - 24;
    do
    {
      sub_20AEC01D0(v8, (uint64_t)",", 1);
      sub_20B43A6F0(v8, v9);
      v9 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  return sub_20AEC01D0(v8, (uint64_t)"}", 1);
}

_QWORD *sub_20B440D0C(uint64_t a1)
{
  unsigned __int8 **v2;
  char *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20B43D624(*(unsigned __int8 ***)a1, 5);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (char *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 3;
  if (v6)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_14;
    }
LABEL_18:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 2)
    return sub_20AEC01D0(*v7, (uint64_t)"{}", 2);
LABEL_14:
  sub_20AEC01D0(v8, (uint64_t)"{", 1);
  sub_20B43AA5C(v8, v3);
  if (v4 - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 3 * (v4 / 3) - 3;
    do
    {
      sub_20AEC01D0(v8, (uint64_t)",", 1);
      sub_20B43AA5C(v8, v9);
      v9 += 3;
      v10 -= 3;
    }
    while (v10);
  }
  return sub_20AEC01D0(v8, (uint64_t)"}", 1);
}

_QWORD *sub_20B440E8C(uint64_t a1)
{
  unsigned __int8 **v2;
  __int16 *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  __int16 *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20B43D624(*(unsigned __int8 ***)a1, 6);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (__int16 *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 2;
  if (v5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 6;
  if (v6)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 5)
    return sub_20AEC01D0(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_20AEC01D0(v8, (uint64_t)"{", 1);
  sub_20B43ADC8(v8, v3);
  if ((v4 >> 1) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 6 * (v4 / 6) - 6;
    do
    {
      sub_20AEC01D0(v8, (uint64_t)",", 1);
      sub_20B43ADC8(v8, v9);
      v9 += 3;
      v10 -= 6;
    }
    while (v10);
  }
  return sub_20AEC01D0(v8, (uint64_t)"}", 1);
}

_QWORD *sub_20B441014(uint64_t a1)
{
  unsigned __int8 **v2;
  int *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  int *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20B43D624(*(unsigned __int8 ***)a1, 7);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (int *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 4;
  if (v5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0xC;
  if (v6)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0xB)
    return sub_20AEC01D0(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_20AEC01D0(v8, (uint64_t)"{", 1);
  sub_20B43B134(v8, v3);
  if ((v4 >> 2) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 12 * (v4 / 0xC) - 12;
    do
    {
      sub_20AEC01D0(v8, (uint64_t)",", 1);
      sub_20B43B134(v8, v9);
      v9 += 3;
      v10 -= 12;
    }
    while (v10);
  }
  return sub_20AEC01D0(v8, (uint64_t)"}", 1);
}

_QWORD *sub_20B44119C(uint64_t a1)
{
  unsigned __int8 **v2;
  uint64_t *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20B43D624(*(unsigned __int8 ***)a1, 8);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (uint64_t *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 8;
  if (v5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0x18;
  if (v6)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0x17)
    return sub_20AEC01D0(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_20AEC01D0(v8, (uint64_t)"{", 1);
  sub_20B43B4A0(v8, v3);
  if ((v4 >> 3) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 24 * (v4 / 0x18) - 24;
    do
    {
      sub_20AEC01D0(v8, (uint64_t)",", 1);
      sub_20B43B4A0(v8, v9);
      v9 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  return sub_20AEC01D0(v8, (uint64_t)"}", 1);
}

_QWORD *sub_20B441324(uint64_t a1)
{
  unsigned __int8 **v2;
  float *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  float *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20B43D624(*(unsigned __int8 ***)a1, 11);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (float *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 4;
  if (v5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0xC;
  if (v6)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0xB)
    return sub_20AEC01D0(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_20AEC01D0(v8, (uint64_t)"{", 1);
  sub_20B43B80C(v8, v3);
  if ((v4 >> 2) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 12 * (v4 / 0xC) - 12;
    do
    {
      sub_20AEC01D0(v8, (uint64_t)",", 1);
      sub_20B43B80C(v8, v9);
      v9 += 3;
      v10 -= 12;
    }
    while (v10);
  }
  return sub_20AEC01D0(v8, (uint64_t)"}", 1);
}

_QWORD *sub_20B4414AC(uint64_t a1)
{
  unsigned __int8 **v2;
  double *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  double *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20B43D624(*(unsigned __int8 ***)a1, 12);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (double *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 8;
  if (v5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0x18;
  if (v6)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0x17)
    return sub_20AEC01D0(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_20AEC01D0(v8, (uint64_t)"{", 1);
  sub_20B43B938(v8, v3);
  if ((v4 >> 3) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 24 * (v4 / 0x18) - 24;
    do
    {
      sub_20AEC01D0(v8, (uint64_t)",", 1);
      sub_20B43B938(v8, v9);
      v9 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  return sub_20AEC01D0(v8, (uint64_t)"}", 1);
}

uint64_t sub_20B441634(uint64_t a1, uint64_t a2)
{
  void (**v4)(int);
  int v5;
  int v6;
  int v7;
  BOOL v8;
  char v9;
  const void *v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  char v22;
  const void *v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t *v31;
  const void *v32;
  _OWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t *v44;
  BOOL v46;
  char v47;
  const void *v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unint64_t *p_shared_owners;
  const void *v62;
  _OWORD *v63;
  _OWORD *v64;
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unint64_t *v74;
  BOOL v75;
  char v76;
  void *v77;
  void *v78;
  void *v79;
  __int128 *v80;
  __int128 *v81;
  __int128 *v82;
  __int128 *v83;
  __int128 *v84;
  std::logic_error *exception;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (void (**)(int))(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8));
  v8 = v5 == 1 && v6 == 1;
  v9 = !v8;
  if (v8 && v7 == 11)
  {
    *(_DWORD *)a1 = 0;
    v10 = *(const void **)(a2 + 8);
    if (!v10
      || (v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5CD0, 0)) == 0)
    {
      v80 = sub_20AF56C34();
      sub_20B449200(a2, (const char *)v80, (uint64_t)"trying to cast camera");
    }
    v12 = v11;
    v86 = v11[1];
    *(_QWORD *)&v87 = *((_QWORD *)v11 + 11);
    v13 = v87;
    v14 = (char *)operator new(0x78uLL);
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = &off_24C41D6C8;
    v15 = v12[1];
    *((_QWORD *)v14 + 4) = &off_24C3F5D38;
    *(_OWORD *)(v14 + 40) = v15;
    *(_OWORD *)(v14 + 56) = v12[2];
    v16 = v12[3];
    v17 = v12[4];
    *((_DWORD *)v14 + 26) = *((_DWORD *)v12 + 20);
    *(_OWORD *)(v14 + 88) = v17;
    *(_OWORD *)(v14 + 72) = v16;
    *((_QWORD *)v14 + 14) = v13;
    *((_QWORD *)v14 + 3) = &off_24C3F5C88;
    *((_QWORD *)&v87 + 1) = v14 + 24;
    *(_QWORD *)&v88 = v14;
    sub_20B441F44(v4, (uint64_t)&v86);
    v18 = (std::__shared_weak_count *)v88;
    if ((_QWORD)v88)
    {
      v19 = (unint64_t *)(v88 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_39:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    if (v7 != 12)
      v9 = 1;
    if ((v9 & 1) != 0)
    {
      if (v5)
        v21 = 0;
      else
        v21 = v6 == 1;
      v22 = !v21;
      if (v21 && v7 == 11)
      {
        *(_DWORD *)a1 = 10;
        v23 = *(const void **)(a2 + 8);
        if (!v23
          || (v24 = __dynamic_cast(v23, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5E20, 0)) == 0)
        {
          v82 = sub_20AF54BF0();
          sub_20B449200(a2, (const char *)v82, (uint64_t)"trying to cast camera");
        }
        v25 = v24;
        v86 = v24[1];
        *(_QWORD *)&v87 = *((_QWORD *)v24 + 11);
        v26 = v87;
        v27 = (char *)operator new(0x78uLL);
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = 0;
        *(_QWORD *)v27 = &off_24C41D718;
        v28 = v25[1];
        *((_QWORD *)v27 + 4) = &off_24C3F5D38;
        *(_OWORD *)(v27 + 40) = v28;
        *(_OWORD *)(v27 + 56) = v25[2];
        v29 = v25[3];
        v30 = v25[4];
        *((_DWORD *)v27 + 26) = *((_DWORD *)v25 + 20);
        *(_OWORD *)(v27 + 88) = v30;
        *(_OWORD *)(v27 + 72) = v29;
        *((_QWORD *)v27 + 14) = v26;
        *((_QWORD *)v27 + 3) = &off_24C3F5998;
        *((_QWORD *)&v87 + 1) = v27 + 24;
        *(_QWORD *)&v88 = v27;
        sub_20B44220C(v4, (uint64_t)&v86);
        v18 = (std::__shared_weak_count *)v88;
        if ((_QWORD)v88)
        {
          v31 = (unint64_t *)(v88 + 8);
          do
            v20 = __ldaxr(v31);
          while (__stlxr(v20 - 1, v31));
          goto LABEL_39;
        }
      }
      else
      {
        if (v7 != 12)
          v22 = 1;
        if ((v22 & 1) != 0)
        {
          v46 = v5 == 1 && v6 == 2;
          v47 = !v46;
          if (v46 && v7 == 11)
          {
            *(_DWORD *)a1 = 100;
            v48 = *(const void **)(a2 + 8);
            if (!v48
              || (v49 = __dynamic_cast(v48, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5E80, 0)) == 0)
            {
              v84 = sub_20AF596D4();
              sub_20B449200(a2, (const char *)v84, (uint64_t)"trying to cast camera");
            }
            v50 = v49;
            v51 = v49[1];
            v52 = v49[2];
            LODWORD(v88) = *((_DWORD *)v49 + 12);
            v86 = v51;
            v87 = v52;
            *(_QWORD *)((char *)&v88 + 4) = *((_QWORD *)v49 + 15);
            v53 = *(_QWORD *)((char *)&v88 + 4);
            v54 = (char *)operator new(0x98uLL);
            *((_QWORD *)v54 + 1) = 0;
            *((_QWORD *)v54 + 2) = 0;
            *(_QWORD *)v54 = &off_24C41D400;
            v55 = *(_QWORD *)((char *)v50 + 52);
            v56 = *((_WORD *)v50 + 56);
            v57 = v50[1];
            *((_QWORD *)v54 + 4) = &off_24C3F5A28;
            *(_OWORD *)(v54 + 40) = v57;
            v58 = v50[2];
            *((_DWORD *)v54 + 18) = *((_DWORD *)v50 + 12);
            *(_OWORD *)(v54 + 56) = v58;
            *(_QWORD *)(v54 + 76) = v55;
            *(_OWORD *)(v54 + 84) = *(_OWORD *)((char *)v50 + 60);
            v59 = *(_OWORD *)((char *)v50 + 76);
            v60 = *(_OWORD *)((char *)v50 + 92);
            *((_DWORD *)v54 + 33) = *((_DWORD *)v50 + 27);
            *(_OWORD *)(v54 + 116) = v60;
            *(_OWORD *)(v54 + 100) = v59;
            *((_WORD *)v54 + 68) = v56;
            *((_QWORD *)v54 + 18) = v53;
            *((_QWORD *)v54 + 3) = &off_24C3F5B58;
            v89 = (std::__shared_weak_count *)(v54 + 24);
            v90 = (std::__shared_weak_count *)v54;
            sub_20B4424D4(v4, (uint64_t)&v86);
            v18 = v90;
            if (v90)
            {
              p_shared_owners = (unint64_t *)&v90->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              goto LABEL_39;
            }
          }
          else
          {
            if (v7 != 12)
              v47 = 1;
            if ((v47 & 1) != 0)
            {
              if (v5)
                v75 = 0;
              else
                v75 = v6 == 2;
              v76 = !v75;
              if (v75 && v7 == 11)
              {
                *(_DWORD *)a1 = 110;
                v77 = sub_20B442800(a2);
                sub_20B447100((uint64_t)&v86, (uint64_t)v77);
                sub_20B442864(v4, (uint64_t)&v86);
                sub_20B446F38((uint64_t)&v86);
              }
              else
              {
                if (v7 != 12)
                  v76 = 1;
                if ((v76 & 1) != 0)
                {
                  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
                  __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
                }
                *(_DWORD *)a1 = 111;
                v79 = sub_20B4429C8(a2);
                sub_20B4472B8((uint64_t)&v86, (uint64_t)v79);
                sub_20B442A2C(v4, (uint64_t)&v86);
                sub_20B447098((uint64_t)&v86);
              }
            }
            else
            {
              *(_DWORD *)a1 = 101;
              v78 = sub_20B442638(a2);
              sub_20B4471D0((uint64_t)&v86, (uint64_t)v78);
              sub_20B44269C(v4, (uint64_t)&v86);
              sub_20B447098((uint64_t)&v86);
            }
          }
        }
        else
        {
          *(_DWORD *)a1 = 11;
          v62 = *(const void **)(a2 + 8);
          if (!v62
            || (v63 = __dynamic_cast(v62, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5E50, 0)) == 0)
          {
            v83 = sub_20AF5887C();
            sub_20B449200(a2, (const char *)v83, (uint64_t)"trying to cast camera");
          }
          v64 = v63;
          v65 = v63 + 1;
          v66 = v63 + 2;
          v67 = v63[2];
          v86 = v63[1];
          v87 = v67;
          *(_QWORD *)&v88 = *((_QWORD *)v63 + 19);
          v68 = v88;
          v69 = (char *)operator new(0xB8uLL);
          *((_QWORD *)v69 + 1) = 0;
          *((_QWORD *)v69 + 2) = 0;
          *(_QWORD *)v69 = &off_24C41D7B8;
          *((_QWORD *)v69 + 4) = &off_24C3F5508;
          *(_OWORD *)(v69 + 40) = *v65;
          *(_OWORD *)(v69 + 56) = *v66;
          v70 = v64[3];
          *(_OWORD *)(v69 + 88) = v64[4];
          *(_OWORD *)(v69 + 72) = v70;
          v71 = v64[6];
          v72 = v64[7];
          v73 = v64[8];
          *((_QWORD *)v69 + 21) = *((_QWORD *)v64 + 18);
          *(_OWORD *)(v69 + 152) = v73;
          *(_OWORD *)(v69 + 136) = v72;
          *(_OWORD *)(v69 + 120) = v71;
          *(_OWORD *)(v69 + 104) = v64[5];
          *((_QWORD *)v69 + 22) = v68;
          *((_QWORD *)v69 + 3) = &off_24C3F55F8;
          *((_QWORD *)&v88 + 1) = v69 + 24;
          v89 = (std::__shared_weak_count *)v69;
          sub_20B442370(v4, (uint64_t)&v86);
          v18 = v89;
          if (v89)
          {
            v74 = (unint64_t *)&v89->__shared_owners_;
            do
              v20 = __ldaxr(v74);
            while (__stlxr(v20 - 1, v74));
            goto LABEL_39;
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a1 = 1;
      v32 = *(const void **)(a2 + 8);
      if (!v32
        || (v33 = __dynamic_cast(v32, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5DF0, 0)) == 0)
      {
        v81 = sub_20AF58DD0();
        sub_20B449200(a2, (const char *)v81, (uint64_t)"trying to cast camera");
      }
      v34 = v33;
      v35 = v33 + 1;
      v36 = v33 + 2;
      v37 = v33[2];
      v86 = v33[1];
      v87 = v37;
      *(_QWORD *)&v88 = *((_QWORD *)v33 + 19);
      v38 = v88;
      v39 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v39 + 1) = 0;
      *((_QWORD *)v39 + 2) = 0;
      *(_QWORD *)v39 = &off_24C41D768;
      *((_QWORD *)v39 + 4) = &off_24C3F5508;
      *(_OWORD *)(v39 + 40) = *v35;
      *(_OWORD *)(v39 + 56) = *v36;
      v40 = v34[3];
      *(_OWORD *)(v39 + 88) = v34[4];
      *(_OWORD *)(v39 + 72) = v40;
      v41 = v34[6];
      v42 = v34[7];
      v43 = v34[8];
      *((_QWORD *)v39 + 21) = *((_QWORD *)v34 + 18);
      *(_OWORD *)(v39 + 152) = v43;
      *(_OWORD *)(v39 + 136) = v42;
      *(_OWORD *)(v39 + 120) = v41;
      *(_OWORD *)(v39 + 104) = v34[5];
      *((_QWORD *)v39 + 22) = v38;
      *((_QWORD *)v39 + 3) = &off_24C3F57F8;
      *((_QWORD *)&v88 + 1) = v39 + 24;
      v89 = (std::__shared_weak_count *)v39;
      sub_20B4420A8(v4, (uint64_t)&v86);
      v18 = v89;
      if (v89)
      {
        v44 = (unint64_t *)&v89->__shared_owners_;
        do
          v20 = __ldaxr(v44);
        while (__stlxr(v20 - 1, v44));
        goto LABEL_39;
      }
    }
  }
  return a1;
}

void sub_20B441D58(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B441D6C(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v2;

  __cxa_free_exception(v2);
  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B441D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B447098((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B441DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B446F38((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B441DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B447098((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B441DDC(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B441DF0(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B441E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B446F38((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B441E20(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B441E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B447E60((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B441E50(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B441E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B416820((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B441E80(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B441E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B447E60((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B441EB0(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B441EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B416820((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B441EE0(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B441EF4(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B441F08(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B441F1C(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B441F30(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void (**sub_20B441F44(void (**a1)(int a1), uint64_t a2))(int a1)
{
  char *v4;
  void (*v5)(int);
  void (*v6)(int);
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x28uLL);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_QWORD *)v4 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v5 = sub_20B445E50;
  v8[0] = sub_20B445E50;
  v8[1] = v4;
  if (v8 == a1)
    goto LABEL_6;
  v6 = *a1;
  if (!*a1)
  {
    *a1 = sub_20B445E50;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v6)(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v9[0])(2, v9, v8, 0, 0);
  if (v9[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v9[0])(0, v9, 0, 0, 0);
  v5 = (void (*)(int))v8[0];
  if (v8[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5)(0, v8, 0, 0, 0);
  return a1;
}

void sub_20B442090(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

void (**sub_20B4420A8(void (**a1)(int a1), uint64_t a2))(int a1)
{
  _OWORD *v4;
  __int128 v5;
  void (*v6)(int);
  void (*v7)(int);
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x38uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)((char *)v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v6 = sub_20B445FEC;
  v9[0] = sub_20B445FEC;
  v9[1] = v4;
  if (v9 == a1)
    goto LABEL_6;
  v7 = *a1;
  if (!*a1)
  {
    *a1 = sub_20B445FEC;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v7)(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v10[0])(2, v10, v9, 0, 0);
  if (v10[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  v6 = (void (*)(int))v9[0];
  if (v9[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6)(0, v9, 0, 0, 0);
  return a1;
}

void sub_20B4421F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

void (**sub_20B44220C(void (**a1)(int a1), uint64_t a2))(int a1)
{
  char *v4;
  void (*v5)(int);
  void (*v6)(int);
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x28uLL);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_QWORD *)v4 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v5 = sub_20B446188;
  v8[0] = sub_20B446188;
  v8[1] = v4;
  if (v8 == a1)
    goto LABEL_6;
  v6 = *a1;
  if (!*a1)
  {
    *a1 = sub_20B446188;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v6)(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v9[0])(2, v9, v8, 0, 0);
  if (v9[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v9[0])(0, v9, 0, 0, 0);
  v5 = (void (*)(int))v8[0];
  if (v8[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5)(0, v8, 0, 0, 0);
  return a1;
}

void sub_20B442358(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

void (**sub_20B442370(void (**a1)(int a1), uint64_t a2))(int a1)
{
  _OWORD *v4;
  __int128 v5;
  void (*v6)(int);
  void (*v7)(int);
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x38uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)((char *)v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v6 = sub_20B446324;
  v9[0] = sub_20B446324;
  v9[1] = v4;
  if (v9 == a1)
    goto LABEL_6;
  v7 = *a1;
  if (!*a1)
  {
    *a1 = sub_20B446324;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v7)(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v10[0])(2, v10, v9, 0, 0);
  if (v10[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  v6 = (void (*)(int))v9[0];
  if (v9[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6)(0, v9, 0, 0, 0);
  return a1;
}

void sub_20B4424BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

void (**sub_20B4424D4(void (**a1)(int a1), uint64_t a2))(int a1)
{
  _OWORD *v4;
  __int128 v5;
  void (*v6)(int);
  void (*v7)(int);
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x40uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 28) = *(_OWORD *)(a2 + 28);
  v4[3] = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v6 = sub_20B4464C0;
  v9[0] = sub_20B4464C0;
  v9[1] = v4;
  if (v9 == a1)
    goto LABEL_6;
  v7 = *a1;
  if (!*a1)
  {
    *a1 = sub_20B4464C0;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v7)(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v10[0])(2, v10, v9, 0, 0);
  if (v10[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  v6 = (void (*)(int))v9[0];
  if (v9[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6)(0, v9, 0, 0, 0);
  return a1;
}

void sub_20B442620(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

void *sub_20B442638(uint64_t a1)
{
  const void *v2;
  void *result;
  __int128 *v4;

  v2 = *(const void **)(a1 + 8);
  if (!v2
    || (result = __dynamic_cast(v2, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5EB0, 0)) == 0)
  {
    v4 = sub_20AF5BCF4();
    sub_20B449200(a1, (const char *)v4, (uint64_t)"trying to cast camera");
  }
  return result;
}

void (**sub_20B44269C(void (**a1)(int a1), uint64_t a2))(int a1)
{
  void (*v4)(int);
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (*v8)(int);
  void (*v9)(int);
  _QWORD v11[4];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v4 = (void (*)(int))operator new(0x60uLL);
  v5 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v4 + 3) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v4 + 5) = v7;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v8 = sub_20B446704;
  v11[0] = sub_20B446704;
  v11[1] = v4;
  if (v11 == a1)
    goto LABEL_6;
  v9 = *a1;
  if (!*a1)
  {
    *a1 = sub_20B446704;
    a1[1] = v4;
    return a1;
  }
  v12[0] = 0;
  v12[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v9)(2, a1, v12, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v11[0])(2, v11, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v12[0])(2, v12, v11, 0, 0);
  if (v12[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v12[0])(0, v12, 0, 0, 0);
  v8 = (void (*)(int))v11[0];
  if (v11[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v8)(0, v11, 0, 0, 0);
  return a1;
}

void sub_20B4427E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

void *sub_20B442800(uint64_t a1)
{
  const void *v2;
  void *result;
  __int128 *v4;

  v2 = *(const void **)(a1 + 8);
  if (!v2
    || (result = __dynamic_cast(v2, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5EE0, 0)) == 0)
  {
    v4 = sub_20AF59324();
    sub_20B449200(a1, (const char *)v4, (uint64_t)"trying to cast camera");
  }
  return result;
}

void (**sub_20B442864(void (**a1)(int a1), uint64_t a2))(int a1)
{
  _OWORD *v4;
  __int128 v5;
  void (*v6)(int);
  void (*v7)(int);
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x40uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 28) = *(_OWORD *)(a2 + 28);
  v4[3] = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v6 = sub_20B44699C;
  v9[0] = sub_20B44699C;
  v9[1] = v4;
  if (v9 == a1)
    goto LABEL_6;
  v7 = *a1;
  if (!*a1)
  {
    *a1 = sub_20B44699C;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v7)(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v10[0])(2, v10, v9, 0, 0);
  if (v10[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  v6 = (void (*)(int))v9[0];
  if (v9[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6)(0, v9, 0, 0, 0);
  return a1;
}

void sub_20B4429B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

void *sub_20B4429C8(uint64_t a1)
{
  const void *v2;
  void *result;
  __int128 *v4;

  v2 = *(const void **)(a1 + 8);
  if (!v2
    || (result = __dynamic_cast(v2, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5F10, 0)) == 0)
  {
    v4 = sub_20AF5B7BC();
    sub_20B449200(a1, (const char *)v4, (uint64_t)"trying to cast camera");
  }
  return result;
}

void (**sub_20B442A2C(void (**a1)(int a1), uint64_t a2))(int a1)
{
  void (*v4)(int);
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (*v8)(int);
  void (*v9)(int);
  _QWORD v11[4];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v4 = (void (*)(int))operator new(0x60uLL);
  v5 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v4 + 3) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v4 + 5) = v7;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v8 = sub_20B446BE0;
  v11[0] = sub_20B446BE0;
  v11[1] = v4;
  if (v11 == a1)
    goto LABEL_6;
  v9 = *a1;
  if (!*a1)
  {
    *a1 = sub_20B446BE0;
    a1[1] = v4;
    return a1;
  }
  v12[0] = 0;
  v12[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v9)(2, a1, v12, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v11[0])(2, v11, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v12[0])(2, v12, v11, 0, 0);
  if (v12[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v12[0])(0, v12, 0, 0, 0);
  v8 = (void (*)(int))v11[0];
  if (v11[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v8)(0, v11, 0, 0, 0);
  return a1;
}

void sub_20B442B78(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

void sub_20B442B90(int *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t (*v4)(uint64_t, uint64_t, _QWORD, void *, void *);
  float32x2_t *v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v15;
  int32x2_t v16;
  int8x16_t v17;
  float32x2_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  int v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::__shared_weak_count_vtbl *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, _QWORD, void *, void *);
  float32x2_t *v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v68;
  int32x2_t v69;
  int8x16_t v70;
  float32x2_t v71;
  unint64_t *v72;
  int v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;

  v3 = *a1;
  switch(v3)
  {
    case 0:
      v4 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v4)
        goto LABEL_30;
      v5 = (float32x2_t *)v4(3, (uint64_t)(a1 + 2), 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v5)
        goto LABEL_30;
      v6 = v5[2];
      v7 = v5[3];
      v8 = *v5;
      v9 = v5[1];
      __asm { FMOV            V2.2S, #1.0 }
      v15 = vdiv_f32(_D2, *v5);
      v16 = vzip1_s32((int32x2_t)*v5, (int32x2_t)v9);
      v17.i64[0] = v16.u32[0];
      v17.i64[1] = v16.u32[1];
      *(int8x16_t *)(*(_QWORD *)&v7 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*v5, (int32x2_t)v9), 0x20uLL), v17);
      *(float32x2_t *)(*(_QWORD *)&v7 + 32) = v15;
      *(float32x2_t *)(*(_QWORD *)&v7 + 40) = vmul_f32(v15, vneg_f32(v9));
      *(_DWORD *)(*(_QWORD *)&v7 + 48) = v8.i32[0];
      *(_QWORD *)(*(_QWORD *)&v7 + 56) = 0;
      *(_DWORD *)(*(_QWORD *)&v7 + 52) = 0;
      *(_DWORD *)(*(_QWORD *)&v7 + 64) = v8.i32[1];
      *(_DWORD *)(*(_QWORD *)&v7 + 68) = 0;
      *(float32x2_t *)(*(_QWORD *)&v7 + 72) = v9;
      *(_DWORD *)(*(_QWORD *)&v7 + 80) = 1065353216;
      *(float32x2_t *)(*(_QWORD *)&v7 + 88) = v6;
      v18 = v5[3];
      v19 = (std::__shared_weak_count *)operator new(0x78uLL);
      v19->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F5D98;
      v19[1].__shared_owners_ = (uint64_t)&off_24C3F5D38;
      v19[1].__shared_weak_owners_ = *(_QWORD *)(*(_QWORD *)&v18 + 16);
      v19[2].__vftable = *(std::__shared_weak_count_vtbl **)(*(_QWORD *)&v18 + 24);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(*(_QWORD *)&v18 + 32);
      v21 = *(_DWORD *)(*(_QWORD *)&v18 + 80);
      v22 = *(_OWORD *)(*(_QWORD *)&v18 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(*(_QWORD *)&v18 + 48);
      LODWORD(v19[4].__shared_owners_) = v21;
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v22;
      v23 = *(_QWORD *)(*(_QWORD *)&v18 + 88);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F5C88;
      v19[4].__shared_weak_owners_ = v23;
      *a2 = &off_24C41D808;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      goto LABEL_28;
    case 1:
      v44 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v44)
        goto LABEL_30;
      v45 = v44(3, (uint64_t)(a1 + 2), 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v45)
        goto LABEL_30;
      v46 = *(double *)v45;
      v47 = *(double *)(v45 + 8);
      v48 = *(double *)(v45 + 16);
      v49 = *(double *)(v45 + 24);
      v50 = 1.0 / *(double *)v45;
      v51 = *(_QWORD *)(v45 + 32);
      v52 = *(_QWORD *)(v45 + 40);
      *(_QWORD *)(v52 + 16) = *(_QWORD *)v45;
      *(double *)(v52 + 24) = v47;
      *(double *)(v52 + 32) = v48;
      *(double *)(v52 + 40) = v49;
      *(double *)(v52 + 48) = v50;
      *(double *)(v52 + 56) = 1.0 / v47;
      *(double *)(v52 + 64) = -(v48 * v50);
      *(double *)(v52 + 72) = -(v49 * (1.0 / v47));
      *(double *)(v52 + 80) = v46;
      *(_QWORD *)(v52 + 96) = 0;
      *(_QWORD *)(v52 + 104) = 0;
      *(_QWORD *)(v52 + 88) = 0;
      *(double *)(v52 + 112) = v47;
      *(_QWORD *)(v52 + 120) = 0;
      *(double *)(v52 + 128) = v48;
      *(double *)(v52 + 136) = v49;
      *(_QWORD *)(v52 + 144) = 0x3FF0000000000000;
      *(_QWORD *)(v52 + 152) = v51;
      v53 = *(_QWORD *)(v45 + 40);
      v19 = (std::__shared_weak_count *)operator new(0xB8uLL);
      v19->__shared_owners_ = 0;
      v54 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F5878;
      v19[1].__shared_owners_ = (uint64_t)&off_24C3F5508;
      *(_OWORD *)&v19[1].__shared_weak_owners_ = *(_OWORD *)(v53 + 16);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(v53 + 32);
      v55 = *(_OWORD *)(v53 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(v53 + 48);
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v55;
      *(_OWORD *)&v19[4].__shared_owners_ = *(_OWORD *)(v53 + 80);
      v57 = *(_OWORD *)(v53 + 112);
      v56 = *(_OWORD *)(v53 + 128);
      v58 = *(std::__shared_weak_count_vtbl **)(v53 + 144);
      v19[5].std::__shared_count = *(std::__shared_count *)(v53 + 96);
      v19[7].__vftable = v58;
      *(_OWORD *)&v19[6].__shared_owners_ = v56;
      *(_OWORD *)&v19[5].__shared_weak_owners_ = v57;
      v59 = *(_QWORD *)(v53 + 152);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F57F8;
      v19[7].__shared_owners_ = v59;
      *a2 = &off_24C41D808;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v60 = __ldxr(v54);
      while (__stxr(v60 + 1, v54));
      do
        v25 = __ldaxr(v54);
      while (__stlxr(v25 - 1, v54));
      goto LABEL_28;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      __break(1u);
      return;
    case 10:
      v61 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v61)
        goto LABEL_30;
      v62 = (float32x2_t *)v61(3, (uint64_t)(a1 + 2), 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v62)
        goto LABEL_30;
      v63 = v62[2];
      v64 = v62[3];
      v65 = *v62;
      v66 = v62[1];
      __asm { FMOV            V2.2S, #1.0 }
      v68 = vdiv_f32(_D2, *v62);
      v69 = vzip1_s32((int32x2_t)*v62, (int32x2_t)v66);
      v70.i64[0] = v69.u32[0];
      v70.i64[1] = v69.u32[1];
      *(int8x16_t *)(*(_QWORD *)&v64 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*v62, (int32x2_t)v66), 0x20uLL), v70);
      *(float32x2_t *)(*(_QWORD *)&v64 + 32) = v68;
      *(float32x2_t *)(*(_QWORD *)&v64 + 40) = vmul_f32(v68, vneg_f32(v66));
      *(_DWORD *)(*(_QWORD *)&v64 + 48) = v65.i32[0];
      *(_QWORD *)(*(_QWORD *)&v64 + 56) = 0;
      *(_DWORD *)(*(_QWORD *)&v64 + 52) = 0;
      *(_DWORD *)(*(_QWORD *)&v64 + 64) = v65.i32[1];
      *(_DWORD *)(*(_QWORD *)&v64 + 68) = 0;
      *(float32x2_t *)(*(_QWORD *)&v64 + 72) = v66;
      *(_DWORD *)(*(_QWORD *)&v64 + 80) = 1065353216;
      *(float32x2_t *)(*(_QWORD *)&v64 + 88) = v63;
      v71 = v62[3];
      v19 = (std::__shared_weak_count *)operator new(0x78uLL);
      v19->__shared_owners_ = 0;
      v72 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F59D8;
      v19[1].__shared_owners_ = (uint64_t)&off_24C3F5D38;
      v19[1].__shared_weak_owners_ = *(_QWORD *)(*(_QWORD *)&v71 + 16);
      v19[2].__vftable = *(std::__shared_weak_count_vtbl **)(*(_QWORD *)&v71 + 24);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(*(_QWORD *)&v71 + 32);
      v73 = *(_DWORD *)(*(_QWORD *)&v71 + 80);
      v74 = *(_OWORD *)(*(_QWORD *)&v71 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(*(_QWORD *)&v71 + 48);
      LODWORD(v19[4].__shared_owners_) = v73;
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v74;
      v75 = *(_QWORD *)(*(_QWORD *)&v71 + 88);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F5998;
      v19[4].__shared_weak_owners_ = v75;
      *a2 = &off_24C41D808;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v76 = __ldxr(v72);
      while (__stxr(v76 + 1, v72));
      do
        v25 = __ldaxr(v72);
      while (__stlxr(v25 - 1, v72));
LABEL_28:
      if (v25)
        return;
      goto LABEL_16;
    case 11:
      v26 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v26 || (v27 = v26(3, (uint64_t)(a1 + 2), 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
LABEL_30:
        sub_20B13DFF8();
      v28 = *(double *)v27;
      v29 = *(double *)(v27 + 8);
      v30 = *(double *)(v27 + 16);
      v31 = *(double *)(v27 + 24);
      v32 = 1.0 / *(double *)v27;
      v33 = *(_QWORD *)(v27 + 32);
      v34 = *(_QWORD *)(v27 + 40);
      *(_QWORD *)(v34 + 16) = *(_QWORD *)v27;
      *(double *)(v34 + 24) = v29;
      *(double *)(v34 + 32) = v30;
      *(double *)(v34 + 40) = v31;
      *(double *)(v34 + 48) = v32;
      *(double *)(v34 + 56) = 1.0 / v29;
      *(double *)(v34 + 64) = -(v30 * v32);
      *(double *)(v34 + 72) = -(v31 * (1.0 / v29));
      *(double *)(v34 + 80) = v28;
      *(_QWORD *)(v34 + 96) = 0;
      *(_QWORD *)(v34 + 104) = 0;
      *(_QWORD *)(v34 + 88) = 0;
      *(double *)(v34 + 112) = v29;
      *(_QWORD *)(v34 + 120) = 0;
      *(double *)(v34 + 128) = v30;
      *(double *)(v34 + 136) = v31;
      *(_QWORD *)(v34 + 144) = 0x3FF0000000000000;
      *(_QWORD *)(v34 + 152) = v33;
      v35 = *(_QWORD *)(v27 + 40);
      v19 = (std::__shared_weak_count *)operator new(0xB8uLL);
      v19->__shared_owners_ = 0;
      v36 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F5678;
      v19[1].__shared_owners_ = (uint64_t)&off_24C3F5508;
      *(_OWORD *)&v19[1].__shared_weak_owners_ = *(_OWORD *)(v35 + 16);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(v35 + 32);
      v37 = *(_OWORD *)(v35 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(v35 + 48);
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v37;
      *(_OWORD *)&v19[4].__shared_owners_ = *(_OWORD *)(v35 + 80);
      v39 = *(_OWORD *)(v35 + 112);
      v38 = *(_OWORD *)(v35 + 128);
      v40 = *(std::__shared_weak_count_vtbl **)(v35 + 144);
      v19[5].std::__shared_count = *(std::__shared_count *)(v35 + 96);
      v19[7].__vftable = v40;
      *(_OWORD *)&v19[6].__shared_owners_ = v38;
      *(_OWORD *)&v19[5].__shared_weak_owners_ = v39;
      v41 = *(_QWORD *)(v35 + 152);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F55F8;
      v19[7].__shared_owners_ = v41;
      *a2 = &off_24C41D808;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v42 = __ldxr(v36);
      while (__stxr(v42 + 1, v36));
      do
        v43 = __ldaxr(v36);
      while (__stlxr(v43 - 1, v36));
      if (!v43)
      {
LABEL_16:
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      return;
    default:
      __asm { BR              X10 }
      return;
  }
}

void sub_20B44354C(void (**a1)(int a1))
{
  int v2;
  char *v3;
  int32x4_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  int32x4_t v9;
  unint64_t *v10;
  char *v11;
  int64x2_t v12;
  unint64_t *v13;
  char *v14;
  int32x4_t v15;
  unint64_t *v16;
  char *v17;
  int64x2_t v18;
  unint64_t *v19;
  char *v20;
  int32x4_t v21;
  unint64_t *v22;
  char *v23;
  int64x2_t v24;
  unint64_t *v25;
  char *v26;
  int64x2_t v27;
  unint64_t *p_shared_owners;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  char *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v2 = *(_DWORD *)a1;
  switch(v2)
  {
    case 0:
      v29 = 0uLL;
      *(_QWORD *)&v30[0] = 0;
      v8 = (char *)operator new(0x78uLL);
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = 0;
      *(_QWORD *)v8 = &off_24C41D6C8;
      *((_QWORD *)v8 + 5) = 0;
      *((_QWORD *)v8 + 6) = 0;
      *((_QWORD *)v8 + 4) = &off_24C3F5D38;
      v9 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v8 + 56) = v9;
      *(int32x4_t *)(v8 + 72) = v9;
      *(int32x4_t *)(v8 + 88) = v9;
      *((_DWORD *)v8 + 26) = 2143289344;
      *((_QWORD *)v8 + 14) = 0;
      *(_QWORD *)&v30[1] = v8;
      *((_QWORD *)v8 + 3) = &off_24C3F5C88;
      *((_QWORD *)&v30[0] + 1) = v8 + 24;
      sub_20B441F44(a1 + 1, (uint64_t)&v29);
      v5 = *(std::__shared_weak_count **)&v30[1];
      if (*(_QWORD *)&v30[1])
      {
        v10 = (unint64_t *)(*(_QWORD *)&v30[1] + 8);
        do
          v7 = __ldaxr(v10);
        while (__stlxr(v7 - 1, v10));
        goto LABEL_35;
      }
      break;
    case 1:
      v29 = 0u;
      memset(v30, 0, 24);
      v11 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      *(_QWORD *)v11 = &off_24C41D768;
      v36 = 0u;
      *((_QWORD *)v11 + 5) = 0;
      *((_QWORD *)v11 + 6) = 0;
      *((_QWORD *)v11 + 4) = &off_24C3F5508;
      *(_OWORD *)(v11 + 56) = v36;
      v12 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)(v11 + 72) = v12;
      *(int64x2_t *)(v11 + 88) = v12;
      *(int64x2_t *)(v11 + 104) = v12;
      *(int64x2_t *)(v11 + 120) = v12;
      *(int64x2_t *)(v11 + 136) = v12;
      *(int64x2_t *)(v11 + 152) = v12;
      *((_QWORD *)v11 + 21) = 0x7FF8000000000000;
      *((_QWORD *)v11 + 22) = 0;
      *(_QWORD *)&v31 = v11;
      *((_QWORD *)v11 + 3) = &off_24C3F57F8;
      *((_QWORD *)&v30[1] + 1) = v11 + 24;
      sub_20B4420A8(a1 + 1, (uint64_t)&v29);
      v5 = (std::__shared_weak_count *)v31;
      if ((_QWORD)v31)
      {
        v13 = (unint64_t *)(v31 + 8);
        do
          v7 = __ldaxr(v13);
        while (__stlxr(v7 - 1, v13));
        goto LABEL_35;
      }
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v29 = 0uLL;
      *(_QWORD *)&v30[0] = 0;
      v14 = (char *)operator new(0x78uLL);
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = &off_24C41D718;
      *((_QWORD *)v14 + 5) = 0;
      *((_QWORD *)v14 + 6) = 0;
      *((_QWORD *)v14 + 4) = &off_24C3F5D38;
      v15 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v14 + 56) = v15;
      *(int32x4_t *)(v14 + 72) = v15;
      *(int32x4_t *)(v14 + 88) = v15;
      *((_DWORD *)v14 + 26) = 2143289344;
      *((_QWORD *)v14 + 14) = 0;
      *(_QWORD *)&v30[1] = v14;
      *((_QWORD *)v14 + 3) = &off_24C3F5998;
      *((_QWORD *)&v30[0] + 1) = v14 + 24;
      sub_20B44220C(a1 + 1, (uint64_t)&v29);
      v5 = *(std::__shared_weak_count **)&v30[1];
      if (*(_QWORD *)&v30[1])
      {
        v16 = (unint64_t *)(*(_QWORD *)&v30[1] + 8);
        do
          v7 = __ldaxr(v16);
        while (__stlxr(v7 - 1, v16));
        goto LABEL_35;
      }
      break;
    case 11:
      v29 = 0u;
      memset(v30, 0, 24);
      v17 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = 0;
      *(_QWORD *)v17 = &off_24C41D7B8;
      v36 = 0u;
      *((_QWORD *)v17 + 5) = 0;
      *((_QWORD *)v17 + 6) = 0;
      *((_QWORD *)v17 + 4) = &off_24C3F5508;
      *(_OWORD *)(v17 + 56) = v36;
      v18 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)(v17 + 72) = v18;
      *(int64x2_t *)(v17 + 88) = v18;
      *(int64x2_t *)(v17 + 104) = v18;
      *(int64x2_t *)(v17 + 120) = v18;
      *(int64x2_t *)(v17 + 136) = v18;
      *(int64x2_t *)(v17 + 152) = v18;
      *((_QWORD *)v17 + 21) = 0x7FF8000000000000;
      *((_QWORD *)v17 + 22) = 0;
      *(_QWORD *)&v31 = v17;
      *((_QWORD *)v17 + 3) = &off_24C3F55F8;
      *((_QWORD *)&v30[1] + 1) = v17 + 24;
      sub_20B442370(a1 + 1, (uint64_t)&v29);
      v5 = (std::__shared_weak_count *)v31;
      if ((_QWORD)v31)
      {
        v19 = (unint64_t *)(v31 + 8);
        do
          v7 = __ldaxr(v19);
        while (__stlxr(v7 - 1, v19));
LABEL_35:
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      break;
    default:
      switch(v2)
      {
        case 'd':
          v29 = 0u;
          memset(v30, 0, 28);
          v3 = (char *)operator new(0x98uLL);
          *((_QWORD *)v3 + 1) = 0;
          *((_QWORD *)v3 + 2) = 0;
          *(_QWORD *)v3 = &off_24C41D400;
          v36 = 0u;
          *((_QWORD *)v3 + 5) = 0;
          *((_QWORD *)v3 + 6) = 0;
          *((_QWORD *)v3 + 4) = &off_24C3F5A28;
          *((_DWORD *)v3 + 18) = 0;
          *(_OWORD *)(v3 + 56) = v36;
          *(_QWORD *)(v3 + 76) = 0xA3727C5ACLL;
          v4 = vdupq_n_s32(0x7FC00000u);
          *(int32x4_t *)(v3 + 84) = v4;
          *(int32x4_t *)(v3 + 100) = v4;
          *(int32x4_t *)(v3 + 116) = v4;
          *((_DWORD *)v3 + 33) = 2143289344;
          *((_WORD *)v3 + 68) = 257;
          *((_QWORD *)v3 + 18) = 0;
          *((_QWORD *)&v31 + 1) = v3;
          *((_QWORD *)v3 + 3) = &off_24C3F5B58;
          *(_QWORD *)&v31 = v3 + 24;
          sub_20B4424D4(a1 + 1, (uint64_t)&v29);
          v5 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v6 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v7 = __ldaxr(v6);
            while (__stlxr(v7 - 1, v6));
            goto LABEL_35;
          }
          break;
        case 'e':
          v31 = 0u;
          v32 = 0u;
          memset(v30, 0, sizeof(v30));
          v29 = 0u;
          v26 = (char *)operator new(0xF8uLL);
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)(v26 + 56) = 0u;
          *((_QWORD *)v26 + 1) = 0;
          *((_QWORD *)v26 + 2) = 0;
          *(_QWORD *)v26 = &off_24C41D4A0;
          v39 = 0;
          *((_QWORD *)v26 + 5) = 0;
          *((_QWORD *)v26 + 6) = 0;
          *((_QWORD *)v26 + 4) = &off_24C3F56C8;
          *(_OWORD *)(v26 + 72) = 0u;
          *(_OWORD *)(v26 + 88) = v38;
          *((_QWORD *)v26 + 13) = 0;
          *((_QWORD *)v26 + 14) = 0x3EE4F8B588E368F1;
          *((_DWORD *)v26 + 30) = 10;
          v27 = vdupq_n_s64(0x7FF8000000000000uLL);
          *((int64x2_t *)v26 + 8) = v27;
          *((int64x2_t *)v26 + 9) = v27;
          *((int64x2_t *)v26 + 10) = v27;
          *((int64x2_t *)v26 + 11) = v27;
          *((int64x2_t *)v26 + 12) = v27;
          *((int64x2_t *)v26 + 13) = v27;
          *((_QWORD *)v26 + 28) = 0x7FF8000000000000;
          *((_WORD *)v26 + 116) = 257;
          *((_QWORD *)v26 + 30) = 0;
          v34 = (std::__shared_weak_count *)v26;
          *((_QWORD *)v26 + 3) = &off_24C3F58C8;
          v33 = v26 + 24;
          sub_20B44269C(a1 + 1, (uint64_t)&v29);
          v5 = v34;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            goto LABEL_35;
          }
          break;
        case 'n':
          v29 = 0u;
          memset(v30, 0, 28);
          v20 = (char *)operator new(0x98uLL);
          *((_QWORD *)v20 + 1) = 0;
          *((_QWORD *)v20 + 2) = 0;
          *(_QWORD *)v20 = &off_24C41D450;
          v36 = 0u;
          *((_QWORD *)v20 + 5) = 0;
          *((_QWORD *)v20 + 6) = 0;
          *((_QWORD *)v20 + 4) = &off_24C3F5A28;
          *((_DWORD *)v20 + 18) = 0;
          *(_OWORD *)(v20 + 56) = v36;
          *(_QWORD *)(v20 + 76) = 0xA3727C5ACLL;
          v21 = vdupq_n_s32(0x7FC00000u);
          *(int32x4_t *)(v20 + 84) = v21;
          *(int32x4_t *)(v20 + 100) = v21;
          *(int32x4_t *)(v20 + 116) = v21;
          *((_DWORD *)v20 + 33) = 2143289344;
          *((_WORD *)v20 + 68) = 257;
          *((_QWORD *)v20 + 18) = 0;
          *((_QWORD *)&v31 + 1) = v20;
          *((_QWORD *)v20 + 3) = &off_24C3F5A88;
          *(_QWORD *)&v31 = v20 + 24;
          sub_20B442864(a1 + 1, (uint64_t)&v29);
          v5 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v22 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v7 = __ldaxr(v22);
            while (__stlxr(v7 - 1, v22));
            goto LABEL_35;
          }
          break;
        case 'o':
          v31 = 0u;
          v32 = 0u;
          memset(v30, 0, sizeof(v30));
          v29 = 0u;
          v23 = (char *)operator new(0xF8uLL);
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)(v23 + 56) = 0u;
          *((_QWORD *)v23 + 1) = 0;
          *((_QWORD *)v23 + 2) = 0;
          *(_QWORD *)v23 = &off_24C41D4F0;
          v39 = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 4) = &off_24C3F56C8;
          *(_OWORD *)(v23 + 72) = 0u;
          *(_OWORD *)(v23 + 88) = v38;
          *((_QWORD *)v23 + 13) = 0;
          *((_QWORD *)v23 + 14) = 0x3EE4F8B588E368F1;
          *((_DWORD *)v23 + 30) = 10;
          v24 = vdupq_n_s64(0x7FF8000000000000uLL);
          *((int64x2_t *)v23 + 8) = v24;
          *((int64x2_t *)v23 + 9) = v24;
          *((int64x2_t *)v23 + 10) = v24;
          *((int64x2_t *)v23 + 11) = v24;
          *((int64x2_t *)v23 + 12) = v24;
          *((int64x2_t *)v23 + 13) = v24;
          *((_QWORD *)v23 + 28) = 0x7FF8000000000000;
          *((_WORD *)v23 + 116) = 257;
          *((_QWORD *)v23 + 30) = 0;
          v34 = (std::__shared_weak_count *)v23;
          *((_QWORD *)v23 + 3) = &off_24C3F5728;
          v33 = v23 + 24;
          sub_20B442A2C(a1 + 1, (uint64_t)&v29);
          v5 = v34;
          if (v34)
          {
            v25 = (unint64_t *)&v34->__shared_owners_;
            do
              v7 = __ldaxr(v25);
            while (__stlxr(v7 - 1, v25));
            goto LABEL_35;
          }
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20B443B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B443B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B443BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B446F38((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B443BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B443BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B416820((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B443BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B443BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B416820((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B443C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B446F38((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B443C18(uint64_t a1, uint64_t a2)
{
  void (**v4)(int);
  int v5;
  int v6;
  int v7;
  BOOL v8;
  char v9;
  const void *v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  char v22;
  const void *v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t *v31;
  const void *v32;
  _OWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t *v44;
  BOOL v46;
  char v47;
  const void *v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unint64_t *p_shared_owners;
  const void *v62;
  _OWORD *v63;
  _OWORD *v64;
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unint64_t *v74;
  BOOL v75;
  char v76;
  void *v77;
  void *v78;
  void *v79;
  __int128 *v80;
  __int128 *v81;
  __int128 *v82;
  __int128 *v83;
  __int128 *v84;
  std::logic_error *exception;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (void (**)(int))(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8));
  v8 = v5 == 1 && v6 == 1;
  v9 = !v8;
  if (v8 && v7 == 11)
  {
    *(_DWORD *)a1 = 0;
    v10 = *(const void **)(a2 + 8);
    if (!v10
      || (v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5CD0, 0)) == 0)
    {
      v80 = sub_20AF56C34();
      sub_20B449200(a2, (const char *)v80, (uint64_t)"trying to cast camera");
    }
    v12 = v11;
    v86 = v11[1];
    *(_QWORD *)&v87 = *((_QWORD *)v11 + 11);
    v13 = v87;
    v14 = (char *)operator new(0x78uLL);
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = &off_24C41D6C8;
    v15 = v12[1];
    *((_QWORD *)v14 + 4) = &off_24C3F5D38;
    *(_OWORD *)(v14 + 40) = v15;
    *(_OWORD *)(v14 + 56) = v12[2];
    v16 = v12[3];
    v17 = v12[4];
    *((_DWORD *)v14 + 26) = *((_DWORD *)v12 + 20);
    *(_OWORD *)(v14 + 88) = v17;
    *(_OWORD *)(v14 + 72) = v16;
    *((_QWORD *)v14 + 14) = v13;
    *((_QWORD *)v14 + 3) = &off_24C3F5C88;
    *((_QWORD *)&v87 + 1) = v14 + 24;
    *(_QWORD *)&v88 = v14;
    sub_20B441F44(v4, (uint64_t)&v86);
    v18 = (std::__shared_weak_count *)v88;
    if ((_QWORD)v88)
    {
      v19 = (unint64_t *)(v88 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_39:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    if (v7 != 12)
      v9 = 1;
    if ((v9 & 1) != 0)
    {
      if (v5)
        v21 = 0;
      else
        v21 = v6 == 1;
      v22 = !v21;
      if (v21 && v7 == 11)
      {
        *(_DWORD *)a1 = 10;
        v23 = *(const void **)(a2 + 8);
        if (!v23
          || (v24 = __dynamic_cast(v23, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5E20, 0)) == 0)
        {
          v82 = sub_20AF54BF0();
          sub_20B449200(a2, (const char *)v82, (uint64_t)"trying to cast camera");
        }
        v25 = v24;
        v86 = v24[1];
        *(_QWORD *)&v87 = *((_QWORD *)v24 + 11);
        v26 = v87;
        v27 = (char *)operator new(0x78uLL);
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = 0;
        *(_QWORD *)v27 = &off_24C41D718;
        v28 = v25[1];
        *((_QWORD *)v27 + 4) = &off_24C3F5D38;
        *(_OWORD *)(v27 + 40) = v28;
        *(_OWORD *)(v27 + 56) = v25[2];
        v29 = v25[3];
        v30 = v25[4];
        *((_DWORD *)v27 + 26) = *((_DWORD *)v25 + 20);
        *(_OWORD *)(v27 + 88) = v30;
        *(_OWORD *)(v27 + 72) = v29;
        *((_QWORD *)v27 + 14) = v26;
        *((_QWORD *)v27 + 3) = &off_24C3F5998;
        *((_QWORD *)&v87 + 1) = v27 + 24;
        *(_QWORD *)&v88 = v27;
        sub_20B44220C(v4, (uint64_t)&v86);
        v18 = (std::__shared_weak_count *)v88;
        if ((_QWORD)v88)
        {
          v31 = (unint64_t *)(v88 + 8);
          do
            v20 = __ldaxr(v31);
          while (__stlxr(v20 - 1, v31));
          goto LABEL_39;
        }
      }
      else
      {
        if (v7 != 12)
          v22 = 1;
        if ((v22 & 1) != 0)
        {
          v46 = v5 == 1 && v6 == 2;
          v47 = !v46;
          if (v46 && v7 == 11)
          {
            *(_DWORD *)a1 = 100;
            v48 = *(const void **)(a2 + 8);
            if (!v48
              || (v49 = __dynamic_cast(v48, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5E80, 0)) == 0)
            {
              v84 = sub_20AF596D4();
              sub_20B449200(a2, (const char *)v84, (uint64_t)"trying to cast camera");
            }
            v50 = v49;
            v51 = v49[1];
            v52 = v49[2];
            LODWORD(v88) = *((_DWORD *)v49 + 12);
            v86 = v51;
            v87 = v52;
            *(_QWORD *)((char *)&v88 + 4) = *((_QWORD *)v49 + 15);
            v53 = *(_QWORD *)((char *)&v88 + 4);
            v54 = (char *)operator new(0x98uLL);
            *((_QWORD *)v54 + 1) = 0;
            *((_QWORD *)v54 + 2) = 0;
            *(_QWORD *)v54 = &off_24C41D400;
            v55 = *(_QWORD *)((char *)v50 + 52);
            v56 = *((_WORD *)v50 + 56);
            v57 = v50[1];
            *((_QWORD *)v54 + 4) = &off_24C3F5A28;
            *(_OWORD *)(v54 + 40) = v57;
            v58 = v50[2];
            *((_DWORD *)v54 + 18) = *((_DWORD *)v50 + 12);
            *(_OWORD *)(v54 + 56) = v58;
            *(_QWORD *)(v54 + 76) = v55;
            *(_OWORD *)(v54 + 84) = *(_OWORD *)((char *)v50 + 60);
            v59 = *(_OWORD *)((char *)v50 + 76);
            v60 = *(_OWORD *)((char *)v50 + 92);
            *((_DWORD *)v54 + 33) = *((_DWORD *)v50 + 27);
            *(_OWORD *)(v54 + 116) = v60;
            *(_OWORD *)(v54 + 100) = v59;
            *((_WORD *)v54 + 68) = v56;
            *((_QWORD *)v54 + 18) = v53;
            *((_QWORD *)v54 + 3) = &off_24C3F5B58;
            v89 = (std::__shared_weak_count *)(v54 + 24);
            v90 = (std::__shared_weak_count *)v54;
            sub_20B4424D4(v4, (uint64_t)&v86);
            v18 = v90;
            if (v90)
            {
              p_shared_owners = (unint64_t *)&v90->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              goto LABEL_39;
            }
          }
          else
          {
            if (v7 != 12)
              v47 = 1;
            if ((v47 & 1) != 0)
            {
              if (v5)
                v75 = 0;
              else
                v75 = v6 == 2;
              v76 = !v75;
              if (v75 && v7 == 11)
              {
                *(_DWORD *)a1 = 110;
                v77 = sub_20B442800(a2);
                sub_20B447100((uint64_t)&v86, (uint64_t)v77);
                sub_20B442864(v4, (uint64_t)&v86);
                sub_20B446F38((uint64_t)&v86);
              }
              else
              {
                if (v7 != 12)
                  v76 = 1;
                if ((v76 & 1) != 0)
                {
                  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
                  __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
                }
                *(_DWORD *)a1 = 111;
                v79 = sub_20B4429C8(a2);
                sub_20B4472B8((uint64_t)&v86, (uint64_t)v79);
                sub_20B442A2C(v4, (uint64_t)&v86);
                sub_20B447098((uint64_t)&v86);
              }
            }
            else
            {
              *(_DWORD *)a1 = 101;
              v78 = sub_20B442638(a2);
              sub_20B4471D0((uint64_t)&v86, (uint64_t)v78);
              sub_20B44269C(v4, (uint64_t)&v86);
              sub_20B447098((uint64_t)&v86);
            }
          }
        }
        else
        {
          *(_DWORD *)a1 = 11;
          v62 = *(const void **)(a2 + 8);
          if (!v62
            || (v63 = __dynamic_cast(v62, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5E50, 0)) == 0)
          {
            v83 = sub_20AF5887C();
            sub_20B449200(a2, (const char *)v83, (uint64_t)"trying to cast camera");
          }
          v64 = v63;
          v65 = v63 + 1;
          v66 = v63 + 2;
          v67 = v63[2];
          v86 = v63[1];
          v87 = v67;
          *(_QWORD *)&v88 = *((_QWORD *)v63 + 19);
          v68 = v88;
          v69 = (char *)operator new(0xB8uLL);
          *((_QWORD *)v69 + 1) = 0;
          *((_QWORD *)v69 + 2) = 0;
          *(_QWORD *)v69 = &off_24C41D7B8;
          *((_QWORD *)v69 + 4) = &off_24C3F5508;
          *(_OWORD *)(v69 + 40) = *v65;
          *(_OWORD *)(v69 + 56) = *v66;
          v70 = v64[3];
          *(_OWORD *)(v69 + 88) = v64[4];
          *(_OWORD *)(v69 + 72) = v70;
          v71 = v64[6];
          v72 = v64[7];
          v73 = v64[8];
          *((_QWORD *)v69 + 21) = *((_QWORD *)v64 + 18);
          *(_OWORD *)(v69 + 152) = v73;
          *(_OWORD *)(v69 + 136) = v72;
          *(_OWORD *)(v69 + 120) = v71;
          *(_OWORD *)(v69 + 104) = v64[5];
          *((_QWORD *)v69 + 22) = v68;
          *((_QWORD *)v69 + 3) = &off_24C3F55F8;
          *((_QWORD *)&v88 + 1) = v69 + 24;
          v89 = (std::__shared_weak_count *)v69;
          sub_20B442370(v4, (uint64_t)&v86);
          v18 = v89;
          if (v89)
          {
            v74 = (unint64_t *)&v89->__shared_owners_;
            do
              v20 = __ldaxr(v74);
            while (__stlxr(v20 - 1, v74));
            goto LABEL_39;
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a1 = 1;
      v32 = *(const void **)(a2 + 8);
      if (!v32
        || (v33 = __dynamic_cast(v32, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5DF0, 0)) == 0)
      {
        v81 = sub_20AF58DD0();
        sub_20B449200(a2, (const char *)v81, (uint64_t)"trying to cast camera");
      }
      v34 = v33;
      v35 = v33 + 1;
      v36 = v33 + 2;
      v37 = v33[2];
      v86 = v33[1];
      v87 = v37;
      *(_QWORD *)&v88 = *((_QWORD *)v33 + 19);
      v38 = v88;
      v39 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v39 + 1) = 0;
      *((_QWORD *)v39 + 2) = 0;
      *(_QWORD *)v39 = &off_24C41D768;
      *((_QWORD *)v39 + 4) = &off_24C3F5508;
      *(_OWORD *)(v39 + 40) = *v35;
      *(_OWORD *)(v39 + 56) = *v36;
      v40 = v34[3];
      *(_OWORD *)(v39 + 88) = v34[4];
      *(_OWORD *)(v39 + 72) = v40;
      v41 = v34[6];
      v42 = v34[7];
      v43 = v34[8];
      *((_QWORD *)v39 + 21) = *((_QWORD *)v34 + 18);
      *(_OWORD *)(v39 + 152) = v43;
      *(_OWORD *)(v39 + 136) = v42;
      *(_OWORD *)(v39 + 120) = v41;
      *(_OWORD *)(v39 + 104) = v34[5];
      *((_QWORD *)v39 + 22) = v38;
      *((_QWORD *)v39 + 3) = &off_24C3F57F8;
      *((_QWORD *)&v88 + 1) = v39 + 24;
      v89 = (std::__shared_weak_count *)v39;
      sub_20B4420A8(v4, (uint64_t)&v86);
      v18 = v89;
      if (v89)
      {
        v44 = (unint64_t *)&v89->__shared_owners_;
        do
          v20 = __ldaxr(v44);
        while (__stlxr(v20 - 1, v44));
        goto LABEL_39;
      }
    }
  }
  return a1;
}

void sub_20B44433C(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B444350(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v2;

  __cxa_free_exception(v2);
  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B44436C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B447098((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B444388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B446F38((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B4443A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B447098((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B4443C0(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B4443D4(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B4443E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B446F38((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B444404(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B444418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B447E60((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B444434(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B444448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B416820((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B444464(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B444478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B447E60((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B444494(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B4444A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20B416820((uint64_t)&a9);
  sub_20AF4BBC8(v9);
  _Unwind_Resume(a1);
}

void sub_20B4444C4(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B4444D8(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B4444EC(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B444500(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B444514(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20AF4BBC8(v1);
  _Unwind_Resume(a1);
}

void sub_20B444528(int *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t (*v4)(uint64_t, uint64_t, _QWORD, void *, void *);
  float32x2_t *v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v15;
  int32x2_t v16;
  int8x16_t v17;
  float32x2_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  int v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::__shared_weak_count_vtbl *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, _QWORD, void *, void *);
  float32x2_t *v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v68;
  int32x2_t v69;
  int8x16_t v70;
  float32x2_t v71;
  unint64_t *v72;
  int v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;

  v3 = *a1;
  switch(v3)
  {
    case 0:
      v4 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v4)
        goto LABEL_30;
      v5 = (float32x2_t *)v4(3, (uint64_t)(a1 + 2), 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v5)
        goto LABEL_30;
      v6 = v5[2];
      v7 = v5[3];
      v8 = *v5;
      v9 = v5[1];
      __asm { FMOV            V2.2S, #1.0 }
      v15 = vdiv_f32(_D2, *v5);
      v16 = vzip1_s32((int32x2_t)*v5, (int32x2_t)v9);
      v17.i64[0] = v16.u32[0];
      v17.i64[1] = v16.u32[1];
      *(int8x16_t *)(*(_QWORD *)&v7 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*v5, (int32x2_t)v9), 0x20uLL), v17);
      *(float32x2_t *)(*(_QWORD *)&v7 + 32) = v15;
      *(float32x2_t *)(*(_QWORD *)&v7 + 40) = vmul_f32(v15, vneg_f32(v9));
      *(_DWORD *)(*(_QWORD *)&v7 + 48) = v8.i32[0];
      *(_QWORD *)(*(_QWORD *)&v7 + 56) = 0;
      *(_DWORD *)(*(_QWORD *)&v7 + 52) = 0;
      *(_DWORD *)(*(_QWORD *)&v7 + 64) = v8.i32[1];
      *(_DWORD *)(*(_QWORD *)&v7 + 68) = 0;
      *(float32x2_t *)(*(_QWORD *)&v7 + 72) = v9;
      *(_DWORD *)(*(_QWORD *)&v7 + 80) = 1065353216;
      *(float32x2_t *)(*(_QWORD *)&v7 + 88) = v6;
      v18 = v5[3];
      v19 = (std::__shared_weak_count *)operator new(0x78uLL);
      v19->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F5D98;
      v19[1].__shared_owners_ = (uint64_t)&off_24C3F5D38;
      v19[1].__shared_weak_owners_ = *(_QWORD *)(*(_QWORD *)&v18 + 16);
      v19[2].__vftable = *(std::__shared_weak_count_vtbl **)(*(_QWORD *)&v18 + 24);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(*(_QWORD *)&v18 + 32);
      v21 = *(_DWORD *)(*(_QWORD *)&v18 + 80);
      v22 = *(_OWORD *)(*(_QWORD *)&v18 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(*(_QWORD *)&v18 + 48);
      LODWORD(v19[4].__shared_owners_) = v21;
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v22;
      v23 = *(_QWORD *)(*(_QWORD *)&v18 + 88);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F5C88;
      v19[4].__shared_weak_owners_ = v23;
      *a2 = &off_24C41D808;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      goto LABEL_28;
    case 1:
      v44 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v44)
        goto LABEL_30;
      v45 = v44(3, (uint64_t)(a1 + 2), 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v45)
        goto LABEL_30;
      v46 = *(double *)v45;
      v47 = *(double *)(v45 + 8);
      v48 = *(double *)(v45 + 16);
      v49 = *(double *)(v45 + 24);
      v50 = 1.0 / *(double *)v45;
      v51 = *(_QWORD *)(v45 + 32);
      v52 = *(_QWORD *)(v45 + 40);
      *(_QWORD *)(v52 + 16) = *(_QWORD *)v45;
      *(double *)(v52 + 24) = v47;
      *(double *)(v52 + 32) = v48;
      *(double *)(v52 + 40) = v49;
      *(double *)(v52 + 48) = v50;
      *(double *)(v52 + 56) = 1.0 / v47;
      *(double *)(v52 + 64) = -(v48 * v50);
      *(double *)(v52 + 72) = -(v49 * (1.0 / v47));
      *(double *)(v52 + 80) = v46;
      *(_QWORD *)(v52 + 96) = 0;
      *(_QWORD *)(v52 + 104) = 0;
      *(_QWORD *)(v52 + 88) = 0;
      *(double *)(v52 + 112) = v47;
      *(_QWORD *)(v52 + 120) = 0;
      *(double *)(v52 + 128) = v48;
      *(double *)(v52 + 136) = v49;
      *(_QWORD *)(v52 + 144) = 0x3FF0000000000000;
      *(_QWORD *)(v52 + 152) = v51;
      v53 = *(_QWORD *)(v45 + 40);
      v19 = (std::__shared_weak_count *)operator new(0xB8uLL);
      v19->__shared_owners_ = 0;
      v54 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F5878;
      v19[1].__shared_owners_ = (uint64_t)&off_24C3F5508;
      *(_OWORD *)&v19[1].__shared_weak_owners_ = *(_OWORD *)(v53 + 16);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(v53 + 32);
      v55 = *(_OWORD *)(v53 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(v53 + 48);
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v55;
      *(_OWORD *)&v19[4].__shared_owners_ = *(_OWORD *)(v53 + 80);
      v57 = *(_OWORD *)(v53 + 112);
      v56 = *(_OWORD *)(v53 + 128);
      v58 = *(std::__shared_weak_count_vtbl **)(v53 + 144);
      v19[5].std::__shared_count = *(std::__shared_count *)(v53 + 96);
      v19[7].__vftable = v58;
      *(_OWORD *)&v19[6].__shared_owners_ = v56;
      *(_OWORD *)&v19[5].__shared_weak_owners_ = v57;
      v59 = *(_QWORD *)(v53 + 152);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F57F8;
      v19[7].__shared_owners_ = v59;
      *a2 = &off_24C41D808;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v60 = __ldxr(v54);
      while (__stxr(v60 + 1, v54));
      do
        v25 = __ldaxr(v54);
      while (__stlxr(v25 - 1, v54));
      goto LABEL_28;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      __break(1u);
      return;
    case 10:
      v61 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v61)
        goto LABEL_30;
      v62 = (float32x2_t *)v61(3, (uint64_t)(a1 + 2), 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v62)
        goto LABEL_30;
      v63 = v62[2];
      v64 = v62[3];
      v65 = *v62;
      v66 = v62[1];
      __asm { FMOV            V2.2S, #1.0 }
      v68 = vdiv_f32(_D2, *v62);
      v69 = vzip1_s32((int32x2_t)*v62, (int32x2_t)v66);
      v70.i64[0] = v69.u32[0];
      v70.i64[1] = v69.u32[1];
      *(int8x16_t *)(*(_QWORD *)&v64 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*v62, (int32x2_t)v66), 0x20uLL), v70);
      *(float32x2_t *)(*(_QWORD *)&v64 + 32) = v68;
      *(float32x2_t *)(*(_QWORD *)&v64 + 40) = vmul_f32(v68, vneg_f32(v66));
      *(_DWORD *)(*(_QWORD *)&v64 + 48) = v65.i32[0];
      *(_QWORD *)(*(_QWORD *)&v64 + 56) = 0;
      *(_DWORD *)(*(_QWORD *)&v64 + 52) = 0;
      *(_DWORD *)(*(_QWORD *)&v64 + 64) = v65.i32[1];
      *(_DWORD *)(*(_QWORD *)&v64 + 68) = 0;
      *(float32x2_t *)(*(_QWORD *)&v64 + 72) = v66;
      *(_DWORD *)(*(_QWORD *)&v64 + 80) = 1065353216;
      *(float32x2_t *)(*(_QWORD *)&v64 + 88) = v63;
      v71 = v62[3];
      v19 = (std::__shared_weak_count *)operator new(0x78uLL);
      v19->__shared_owners_ = 0;
      v72 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F59D8;
      v19[1].__shared_owners_ = (uint64_t)&off_24C3F5D38;
      v19[1].__shared_weak_owners_ = *(_QWORD *)(*(_QWORD *)&v71 + 16);
      v19[2].__vftable = *(std::__shared_weak_count_vtbl **)(*(_QWORD *)&v71 + 24);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(*(_QWORD *)&v71 + 32);
      v73 = *(_DWORD *)(*(_QWORD *)&v71 + 80);
      v74 = *(_OWORD *)(*(_QWORD *)&v71 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(*(_QWORD *)&v71 + 48);
      LODWORD(v19[4].__shared_owners_) = v73;
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v74;
      v75 = *(_QWORD *)(*(_QWORD *)&v71 + 88);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F5998;
      v19[4].__shared_weak_owners_ = v75;
      *a2 = &off_24C41D808;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v76 = __ldxr(v72);
      while (__stxr(v76 + 1, v72));
      do
        v25 = __ldaxr(v72);
      while (__stlxr(v25 - 1, v72));
LABEL_28:
      if (v25)
        return;
      goto LABEL_16;
    case 11:
      v26 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v26 || (v27 = v26(3, (uint64_t)(a1 + 2), 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
LABEL_30:
        sub_20B13DFF8();
      v28 = *(double *)v27;
      v29 = *(double *)(v27 + 8);
      v30 = *(double *)(v27 + 16);
      v31 = *(double *)(v27 + 24);
      v32 = 1.0 / *(double *)v27;
      v33 = *(_QWORD *)(v27 + 32);
      v34 = *(_QWORD *)(v27 + 40);
      *(_QWORD *)(v34 + 16) = *(_QWORD *)v27;
      *(double *)(v34 + 24) = v29;
      *(double *)(v34 + 32) = v30;
      *(double *)(v34 + 40) = v31;
      *(double *)(v34 + 48) = v32;
      *(double *)(v34 + 56) = 1.0 / v29;
      *(double *)(v34 + 64) = -(v30 * v32);
      *(double *)(v34 + 72) = -(v31 * (1.0 / v29));
      *(double *)(v34 + 80) = v28;
      *(_QWORD *)(v34 + 96) = 0;
      *(_QWORD *)(v34 + 104) = 0;
      *(_QWORD *)(v34 + 88) = 0;
      *(double *)(v34 + 112) = v29;
      *(_QWORD *)(v34 + 120) = 0;
      *(double *)(v34 + 128) = v30;
      *(double *)(v34 + 136) = v31;
      *(_QWORD *)(v34 + 144) = 0x3FF0000000000000;
      *(_QWORD *)(v34 + 152) = v33;
      v35 = *(_QWORD *)(v27 + 40);
      v19 = (std::__shared_weak_count *)operator new(0xB8uLL);
      v19->__shared_owners_ = 0;
      v36 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F5678;
      v19[1].__shared_owners_ = (uint64_t)&off_24C3F5508;
      *(_OWORD *)&v19[1].__shared_weak_owners_ = *(_OWORD *)(v35 + 16);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(v35 + 32);
      v37 = *(_OWORD *)(v35 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(v35 + 48);
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v37;
      *(_OWORD *)&v19[4].__shared_owners_ = *(_OWORD *)(v35 + 80);
      v39 = *(_OWORD *)(v35 + 112);
      v38 = *(_OWORD *)(v35 + 128);
      v40 = *(std::__shared_weak_count_vtbl **)(v35 + 144);
      v19[5].std::__shared_count = *(std::__shared_count *)(v35 + 96);
      v19[7].__vftable = v40;
      *(_OWORD *)&v19[6].__shared_owners_ = v38;
      *(_OWORD *)&v19[5].__shared_weak_owners_ = v39;
      v41 = *(_QWORD *)(v35 + 152);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F55F8;
      v19[7].__shared_owners_ = v41;
      *a2 = &off_24C41D808;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v42 = __ldxr(v36);
      while (__stxr(v42 + 1, v36));
      do
        v43 = __ldaxr(v36);
      while (__stlxr(v43 - 1, v36));
      if (!v43)
      {
LABEL_16:
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      return;
    default:
      __asm { BR              X10 }
      return;
  }
}

BOOL sub_20B444EE4(int *a1, int *a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];
  std::__shared_weak_count *v12;
  _QWORD v13[2];
  std::__shared_weak_count *v14;

  if (*a1 != *a2)
    return 0;
  sub_20B444528(a1, v13);
  sub_20B444528(a2, v11);
  v3 = sub_20B4488FC((uint64_t)v13, (uint64_t)v11);
  v11[0] = &off_24C41D808;
  v4 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v13[0] = &off_24C41D808;
  v7 = v14;
  if (!v14)
    return v3;
  v8 = (unint64_t *)&v14->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B444FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_20B448814(&a9);
  sub_20B448814(&a12);
  _Unwind_Resume(a1);
}

void sub_20B445018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B448814((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B44502C(void (**a1)(int a1))
{
  int v2;
  char *v3;
  int32x4_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  int32x4_t v9;
  unint64_t *v10;
  char *v11;
  int64x2_t v12;
  unint64_t *v13;
  char *v14;
  int32x4_t v15;
  unint64_t *v16;
  char *v17;
  int64x2_t v18;
  unint64_t *v19;
  char *v20;
  int32x4_t v21;
  unint64_t *v22;
  char *v23;
  int64x2_t v24;
  unint64_t *v25;
  char *v26;
  int64x2_t v27;
  unint64_t *p_shared_owners;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  char *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v2 = *(_DWORD *)a1;
  switch(v2)
  {
    case 0:
      v29 = 0uLL;
      *(_QWORD *)&v30[0] = 0;
      v8 = (char *)operator new(0x78uLL);
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = 0;
      *(_QWORD *)v8 = &off_24C41D6C8;
      *((_QWORD *)v8 + 5) = 0;
      *((_QWORD *)v8 + 6) = 0;
      *((_QWORD *)v8 + 4) = &off_24C3F5D38;
      v9 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v8 + 56) = v9;
      *(int32x4_t *)(v8 + 72) = v9;
      *(int32x4_t *)(v8 + 88) = v9;
      *((_DWORD *)v8 + 26) = 2143289344;
      *((_QWORD *)v8 + 14) = 0;
      *(_QWORD *)&v30[1] = v8;
      *((_QWORD *)v8 + 3) = &off_24C3F5C88;
      *((_QWORD *)&v30[0] + 1) = v8 + 24;
      sub_20B441F44(a1 + 1, (uint64_t)&v29);
      v5 = *(std::__shared_weak_count **)&v30[1];
      if (*(_QWORD *)&v30[1])
      {
        v10 = (unint64_t *)(*(_QWORD *)&v30[1] + 8);
        do
          v7 = __ldaxr(v10);
        while (__stlxr(v7 - 1, v10));
        goto LABEL_35;
      }
      break;
    case 1:
      v29 = 0u;
      memset(v30, 0, 24);
      v11 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      *(_QWORD *)v11 = &off_24C41D768;
      v36 = 0u;
      *((_QWORD *)v11 + 5) = 0;
      *((_QWORD *)v11 + 6) = 0;
      *((_QWORD *)v11 + 4) = &off_24C3F5508;
      *(_OWORD *)(v11 + 56) = v36;
      v12 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)(v11 + 72) = v12;
      *(int64x2_t *)(v11 + 88) = v12;
      *(int64x2_t *)(v11 + 104) = v12;
      *(int64x2_t *)(v11 + 120) = v12;
      *(int64x2_t *)(v11 + 136) = v12;
      *(int64x2_t *)(v11 + 152) = v12;
      *((_QWORD *)v11 + 21) = 0x7FF8000000000000;
      *((_QWORD *)v11 + 22) = 0;
      *(_QWORD *)&v31 = v11;
      *((_QWORD *)v11 + 3) = &off_24C3F57F8;
      *((_QWORD *)&v30[1] + 1) = v11 + 24;
      sub_20B4420A8(a1 + 1, (uint64_t)&v29);
      v5 = (std::__shared_weak_count *)v31;
      if ((_QWORD)v31)
      {
        v13 = (unint64_t *)(v31 + 8);
        do
          v7 = __ldaxr(v13);
        while (__stlxr(v7 - 1, v13));
        goto LABEL_35;
      }
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v29 = 0uLL;
      *(_QWORD *)&v30[0] = 0;
      v14 = (char *)operator new(0x78uLL);
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = &off_24C41D718;
      *((_QWORD *)v14 + 5) = 0;
      *((_QWORD *)v14 + 6) = 0;
      *((_QWORD *)v14 + 4) = &off_24C3F5D38;
      v15 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v14 + 56) = v15;
      *(int32x4_t *)(v14 + 72) = v15;
      *(int32x4_t *)(v14 + 88) = v15;
      *((_DWORD *)v14 + 26) = 2143289344;
      *((_QWORD *)v14 + 14) = 0;
      *(_QWORD *)&v30[1] = v14;
      *((_QWORD *)v14 + 3) = &off_24C3F5998;
      *((_QWORD *)&v30[0] + 1) = v14 + 24;
      sub_20B44220C(a1 + 1, (uint64_t)&v29);
      v5 = *(std::__shared_weak_count **)&v30[1];
      if (*(_QWORD *)&v30[1])
      {
        v16 = (unint64_t *)(*(_QWORD *)&v30[1] + 8);
        do
          v7 = __ldaxr(v16);
        while (__stlxr(v7 - 1, v16));
        goto LABEL_35;
      }
      break;
    case 11:
      v29 = 0u;
      memset(v30, 0, 24);
      v17 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = 0;
      *(_QWORD *)v17 = &off_24C41D7B8;
      v36 = 0u;
      *((_QWORD *)v17 + 5) = 0;
      *((_QWORD *)v17 + 6) = 0;
      *((_QWORD *)v17 + 4) = &off_24C3F5508;
      *(_OWORD *)(v17 + 56) = v36;
      v18 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)(v17 + 72) = v18;
      *(int64x2_t *)(v17 + 88) = v18;
      *(int64x2_t *)(v17 + 104) = v18;
      *(int64x2_t *)(v17 + 120) = v18;
      *(int64x2_t *)(v17 + 136) = v18;
      *(int64x2_t *)(v17 + 152) = v18;
      *((_QWORD *)v17 + 21) = 0x7FF8000000000000;
      *((_QWORD *)v17 + 22) = 0;
      *(_QWORD *)&v31 = v17;
      *((_QWORD *)v17 + 3) = &off_24C3F55F8;
      *((_QWORD *)&v30[1] + 1) = v17 + 24;
      sub_20B442370(a1 + 1, (uint64_t)&v29);
      v5 = (std::__shared_weak_count *)v31;
      if ((_QWORD)v31)
      {
        v19 = (unint64_t *)(v31 + 8);
        do
          v7 = __ldaxr(v19);
        while (__stlxr(v7 - 1, v19));
LABEL_35:
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      break;
    default:
      switch(v2)
      {
        case 'd':
          v29 = 0u;
          memset(v30, 0, 28);
          v3 = (char *)operator new(0x98uLL);
          *((_QWORD *)v3 + 1) = 0;
          *((_QWORD *)v3 + 2) = 0;
          *(_QWORD *)v3 = &off_24C41D400;
          v36 = 0u;
          *((_QWORD *)v3 + 5) = 0;
          *((_QWORD *)v3 + 6) = 0;
          *((_QWORD *)v3 + 4) = &off_24C3F5A28;
          *((_DWORD *)v3 + 18) = 0;
          *(_OWORD *)(v3 + 56) = v36;
          *(_QWORD *)(v3 + 76) = 0xA3727C5ACLL;
          v4 = vdupq_n_s32(0x7FC00000u);
          *(int32x4_t *)(v3 + 84) = v4;
          *(int32x4_t *)(v3 + 100) = v4;
          *(int32x4_t *)(v3 + 116) = v4;
          *((_DWORD *)v3 + 33) = 2143289344;
          *((_WORD *)v3 + 68) = 257;
          *((_QWORD *)v3 + 18) = 0;
          *((_QWORD *)&v31 + 1) = v3;
          *((_QWORD *)v3 + 3) = &off_24C3F5B58;
          *(_QWORD *)&v31 = v3 + 24;
          sub_20B4424D4(a1 + 1, (uint64_t)&v29);
          v5 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v6 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v7 = __ldaxr(v6);
            while (__stlxr(v7 - 1, v6));
            goto LABEL_35;
          }
          break;
        case 'e':
          v31 = 0u;
          v32 = 0u;
          memset(v30, 0, sizeof(v30));
          v29 = 0u;
          v26 = (char *)operator new(0xF8uLL);
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)(v26 + 56) = 0u;
          *((_QWORD *)v26 + 1) = 0;
          *((_QWORD *)v26 + 2) = 0;
          *(_QWORD *)v26 = &off_24C41D4A0;
          v39 = 0;
          *((_QWORD *)v26 + 5) = 0;
          *((_QWORD *)v26 + 6) = 0;
          *((_QWORD *)v26 + 4) = &off_24C3F56C8;
          *(_OWORD *)(v26 + 72) = 0u;
          *(_OWORD *)(v26 + 88) = v38;
          *((_QWORD *)v26 + 13) = 0;
          *((_QWORD *)v26 + 14) = 0x3EE4F8B588E368F1;
          *((_DWORD *)v26 + 30) = 10;
          v27 = vdupq_n_s64(0x7FF8000000000000uLL);
          *((int64x2_t *)v26 + 8) = v27;
          *((int64x2_t *)v26 + 9) = v27;
          *((int64x2_t *)v26 + 10) = v27;
          *((int64x2_t *)v26 + 11) = v27;
          *((int64x2_t *)v26 + 12) = v27;
          *((int64x2_t *)v26 + 13) = v27;
          *((_QWORD *)v26 + 28) = 0x7FF8000000000000;
          *((_WORD *)v26 + 116) = 257;
          *((_QWORD *)v26 + 30) = 0;
          v34 = (std::__shared_weak_count *)v26;
          *((_QWORD *)v26 + 3) = &off_24C3F58C8;
          v33 = v26 + 24;
          sub_20B44269C(a1 + 1, (uint64_t)&v29);
          v5 = v34;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            goto LABEL_35;
          }
          break;
        case 'n':
          v29 = 0u;
          memset(v30, 0, 28);
          v20 = (char *)operator new(0x98uLL);
          *((_QWORD *)v20 + 1) = 0;
          *((_QWORD *)v20 + 2) = 0;
          *(_QWORD *)v20 = &off_24C41D450;
          v36 = 0u;
          *((_QWORD *)v20 + 5) = 0;
          *((_QWORD *)v20 + 6) = 0;
          *((_QWORD *)v20 + 4) = &off_24C3F5A28;
          *((_DWORD *)v20 + 18) = 0;
          *(_OWORD *)(v20 + 56) = v36;
          *(_QWORD *)(v20 + 76) = 0xA3727C5ACLL;
          v21 = vdupq_n_s32(0x7FC00000u);
          *(int32x4_t *)(v20 + 84) = v21;
          *(int32x4_t *)(v20 + 100) = v21;
          *(int32x4_t *)(v20 + 116) = v21;
          *((_DWORD *)v20 + 33) = 2143289344;
          *((_WORD *)v20 + 68) = 257;
          *((_QWORD *)v20 + 18) = 0;
          *((_QWORD *)&v31 + 1) = v20;
          *((_QWORD *)v20 + 3) = &off_24C3F5A88;
          *(_QWORD *)&v31 = v20 + 24;
          sub_20B442864(a1 + 1, (uint64_t)&v29);
          v5 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v22 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v7 = __ldaxr(v22);
            while (__stlxr(v7 - 1, v22));
            goto LABEL_35;
          }
          break;
        case 'o':
          v31 = 0u;
          v32 = 0u;
          memset(v30, 0, sizeof(v30));
          v29 = 0u;
          v23 = (char *)operator new(0xF8uLL);
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)(v23 + 56) = 0u;
          *((_QWORD *)v23 + 1) = 0;
          *((_QWORD *)v23 + 2) = 0;
          *(_QWORD *)v23 = &off_24C41D4F0;
          v39 = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 4) = &off_24C3F56C8;
          *(_OWORD *)(v23 + 72) = 0u;
          *(_OWORD *)(v23 + 88) = v38;
          *((_QWORD *)v23 + 13) = 0;
          *((_QWORD *)v23 + 14) = 0x3EE4F8B588E368F1;
          *((_DWORD *)v23 + 30) = 10;
          v24 = vdupq_n_s64(0x7FF8000000000000uLL);
          *((int64x2_t *)v23 + 8) = v24;
          *((int64x2_t *)v23 + 9) = v24;
          *((int64x2_t *)v23 + 10) = v24;
          *((int64x2_t *)v23 + 11) = v24;
          *((int64x2_t *)v23 + 12) = v24;
          *((int64x2_t *)v23 + 13) = v24;
          *((_QWORD *)v23 + 28) = 0x7FF8000000000000;
          *((_WORD *)v23 + 116) = 257;
          *((_QWORD *)v23 + 30) = 0;
          v34 = (std::__shared_weak_count *)v23;
          *((_QWORD *)v23 + 3) = &off_24C3F5728;
          v33 = v23 + 24;
          sub_20B442A2C(a1 + 1, (uint64_t)&v29);
          v5 = v34;
          if (v34)
          {
            v25 = (unint64_t *)&v34->__shared_owners_;
            do
              v7 = __ldaxr(v25);
            while (__stlxr(v7 - 1, v25));
            goto LABEL_35;
          }
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20B445658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B44566C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B445680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B446F38((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B445694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4456A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B416820((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4456BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4456D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B416820((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4456E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B446F38((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B4456F8(_QWORD *a1, int *a2)
{
  int v2;
  const char *v3;
  uint64_t v4;

  v2 = *a2;
  switch(v2)
  {
    case 0:
      v3 = "CenterPinholeF";
      v4 = 14;
      break;
    case 1:
      v3 = "CenterPinholeD";
      v4 = 14;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
LABEL_10:
      v3 = "invalid camera type";
      v4 = 19;
      break;
    case 10:
      v3 = "CornerPinholeF";
      v4 = 14;
      break;
    case 11:
      v3 = "CornerPinholeD";
      v4 = 14;
      break;
    default:
      switch(v2)
      {
        case 'd':
          v3 = "CenterHeikkilaF";
          v4 = 15;
          break;
        case 'e':
          v3 = "CenterHeikkilaD";
          v4 = 15;
          break;
        case 'n':
          v3 = "CornerHeikkilaF";
          v4 = 15;
          break;
        case 'o':
          v3 = "CornerHeikkilaD";
          v4 = 15;
          break;
        default:
          goto LABEL_10;
      }
      break;
  }
  return sub_20AEC01D0(a1, (uint64_t)v3, v4);
}

uint64_t *sub_20B4457D0(uint64_t *a1, _DWORD *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  int v6;
  void *v7;
  void **v8;
  size_t v9;
  uint64_t *v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  std::logic_error *exception;
  std::string v23;
  std::string v24;
  void *v25;
  size_t v26;
  uint64_t v27;

  v4 = atomic_load((unsigned __int8 *)&qword_25463CB20);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463CB20))
  {
    sub_20B445A70();
    __cxa_atexit((void (*)(void *))sub_20B445E28, &qword_25463CB28, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CB20);
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  sub_20B1C68C0(a1, (uint64_t)&v25);
  v5 = qword_25463CB30;
  if (!qword_25463CB30)
    goto LABEL_41;
  v6 = SHIBYTE(v27);
  v7 = v25;
  if (v27 >= 0)
    v8 = &v25;
  else
    v8 = (void **)v25;
  if (v27 >= 0)
    v9 = HIBYTE(v27);
  else
    v9 = v26;
  v10 = &qword_25463CB30;
  do
  {
    while (1)
    {
      v11 = *(char *)(v5 + 55);
      v12 = v11 >= 0 ? (const void *)(v5 + 32) : *(const void **)(v5 + 32);
      v13 = v11 >= 0 ? *(unsigned __int8 *)(v5 + 55) : *(_QWORD *)(v5 + 40);
      v14 = v9 >= v13 ? v13 : v9;
      v15 = memcmp(v12, v8, v14);
      if (v15)
        break;
      if (v13 >= v9)
        goto LABEL_24;
LABEL_10:
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
        goto LABEL_25;
    }
    if (v15 < 0)
      goto LABEL_10;
LABEL_24:
    v10 = (uint64_t *)v5;
    v5 = *(_QWORD *)v5;
  }
  while (v5);
LABEL_25:
  if (v10 == &qword_25463CB30)
    goto LABEL_41;
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= v9)
    v19 = v9;
  else
    v19 = v18;
  v20 = memcmp(v8, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_37;
LABEL_41:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_20B214D58(", expected [Center|Corner][Pinhole|Heikkila][F|D]", &v23, &v24);
    std::logic_error::logic_error(exception, &v24);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (v9 < v18)
    goto LABEL_41;
LABEL_37:
  *a2 = *((_DWORD *)v10 + 14);
  if (v6 < 0)
    operator delete(v7);
  return a1;
}

void sub_20B4459E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CB20);
  _Unwind_Resume(a1);
}

void sub_20B4459F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (a27 < 0)
        operator delete(a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void sub_20B445A70()
{
  uint64_t v0;
  void *v1;
  void *v2;
  size_t v3;
  int v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  int v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  uint64_t *v19;
  size_t v20;
  size_t v21;
  const void *v22;
  size_t v23;
  size_t v24;
  int v25;
  int v26;
  _OWORD v27[2];
  void *v28;
  _BYTE v29[15];
  unsigned __int8 v30;
  _BYTE v31[24];
  int v32;
  char v33;
  _QWORD v34[2];
  _QWORD v35[4];

  v0 = 0;
  v35[2] = *MEMORY[0x24BDAC8D0];
  qword_25463CB30 = 0;
  v27[0] = xmmword_20B60E1E8;
  v27[1] = unk_20B60E1F8;
  qword_25463CB38 = 0;
  qword_25463CB28 = (uint64_t)&qword_25463CB30;
  v1 = &unk_25463C000;
  do
  {
    while (1)
    {
      v32 = 0;
      sub_20B13DBC8((uint64_t)v34, (uint64_t)v31, (int *)v27 + v0);
      if (v32 == -1)
        sub_20AECFAB8();
      v34[0] = &v33;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24C41D298[v32])(&v28, v34, v31);
      if (v32 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24C41D280[v32])(v34, v31);
      v2 = v28;
      v35[0] = *(_QWORD *)v29;
      *(_QWORD *)((char *)v35 + 7) = *(_QWORD *)&v29[7];
      v3 = v30;
      v4 = (char)v30;
      v5 = operator new(0x40uLL);
      v5[4] = v2;
      v5[5] = v35[0];
      *(_QWORD *)((char *)v5 + 47) = *(_QWORD *)((char *)v35 + 7);
      *((_BYTE *)v5 + 55) = v4;
      v35[0] = 0;
      *(_QWORD *)((char *)v35 + 7) = 0;
      *((_DWORD *)v5 + 14) = *((_DWORD *)v27 + v0);
      v6 = (uint64_t *)*((_QWORD *)v1 + 357);
      v8 = &qword_25463CB30;
      v7 = qword_25463CB30;
      if (v6 == &qword_25463CB30)
        goto LABEL_52;
      v9 = qword_25463CB30;
      if (qword_25463CB30)
      {
        do
        {
          v8 = (uint64_t *)v9;
          v9 = *(_QWORD *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        v10 = &qword_25463CB30;
        do
        {
          v8 = (uint64_t *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      v12 = *((char *)v8 + 55);
      if (v12 >= 0)
        v13 = v8 + 4;
      else
        v13 = (const void *)v8[4];
      if (v12 >= 0)
        v14 = *((unsigned __int8 *)v8 + 55);
      else
        v14 = v8[5];
      if (v4 >= 0)
        v15 = v5 + 4;
      else
        v15 = v2;
      if (v4 >= 0)
        v16 = v3;
      else
        v16 = v5[5];
      if (v16 >= v14)
        v17 = v14;
      else
        v17 = v16;
      v18 = memcmp(v13, v15, v17);
      if (!v18)
      {
        if (v14 < v16)
          goto LABEL_52;
LABEL_29:
        if (!v7)
        {
LABEL_58:
          v8 = &qword_25463CB30;
          v19 = &qword_25463CB30;
          goto LABEL_59;
        }
        while (1)
        {
          v8 = (uint64_t *)v7;
          v20 = *(unsigned __int8 *)(v7 + 55);
          v21 = *(_QWORD *)(v7 + 40);
          if ((v20 & 0x80u) == 0)
            v22 = (const void *)(v7 + 32);
          else
            v22 = *(const void **)(v7 + 32);
          if ((v20 & 0x80u) == 0)
            v23 = v20;
          else
            v23 = v21;
          if (v23 >= v16)
            v24 = v16;
          else
            v24 = v23;
          v25 = memcmp(v15, v22, v24);
          if (v25)
          {
            if (v25 < 0)
              goto LABEL_31;
LABEL_45:
            v26 = memcmp(v22, v15, v24);
            if (v26)
            {
              if ((v26 & 0x80000000) == 0)
                goto LABEL_54;
            }
            else if (v23 >= v16)
            {
              goto LABEL_54;
            }
            v7 = v8[1];
            if (!v7)
            {
              v19 = v8 + 1;
              goto LABEL_59;
            }
          }
          else
          {
            if (v16 >= v23)
              goto LABEL_45;
LABEL_31:
            v7 = *v8;
            v19 = v8;
            if (!*v8)
              goto LABEL_59;
          }
        }
      }
      if ((v18 & 0x80000000) == 0)
        goto LABEL_29;
LABEL_52:
      if (!v7)
        goto LABEL_58;
      v19 = v8 + 1;
      if (v8[1])
        break;
LABEL_59:
      *v5 = 0;
      v5[1] = 0;
      v5[2] = v8;
      *v19 = (uint64_t)v5;
      v1 = &unk_25463C000;
      if (*(_QWORD *)qword_25463CB28)
      {
        qword_25463CB28 = *(_QWORD *)qword_25463CB28;
        v5 = (_QWORD *)*v19;
      }
      sub_20AEC84C8((uint64_t *)qword_25463CB30, v5);
      ++qword_25463CB38;
      if (++v0 == 8)
        return;
    }
LABEL_54:
    if (v4 < 0)
      operator delete(v2);
    operator delete(v5);
    v1 = &unk_25463C000;
    ++v0;
  }
  while (v0 != 8);
}

void sub_20B445DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,int a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B445E28(uint64_t a1)
{
  sub_20B231C6C(*(char **)(a1 + 8));
  return a1;
}

void sub_20B445E50(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B445E8C()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20B445EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20B5E8904)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_20B445FD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B445FEC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B446028()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20B446084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20B5E89D8)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_20B446174(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B446188(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B4461C4()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20B446220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20B5E8AAC)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_20B446310(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B446324(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B446360()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20B4463BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20B5E8B80)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_20B4464AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B4464C0(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B4464FC()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[7];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_20B446558()
{
  void (**v0)(int);
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = (char *)operator new(0x40uLL);
  v4 = sub_20B446E78(v2);
  v5 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)v3 = *(_OWORD *)(v4 + 16);
  *((_OWORD *)v3 + 1) = v5;
  *((_DWORD *)v3 + 8) = *(_DWORD *)(v4 + 48);
  v6 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v3 + 36) = v6;
  v7 = (char *)operator new(0x98uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_24C41D400;
  v8 = *(_QWORD *)(v4 + 52);
  v9 = *(_WORD *)(v4 + 112);
  v10 = *(_OWORD *)(v4 + 16);
  *((_QWORD *)v7 + 4) = &off_24C3F5A28;
  *(_OWORD *)(v7 + 40) = v10;
  v11 = *(_OWORD *)(v4 + 32);
  *((_DWORD *)v7 + 18) = *(_DWORD *)(v4 + 48);
  *(_OWORD *)(v7 + 56) = v11;
  *(_QWORD *)(v7 + 76) = v8;
  *(_OWORD *)(v7 + 84) = *(_OWORD *)(v4 + 60);
  result = *(__n128 *)(v4 + 76);
  v13 = *(_OWORD *)(v4 + 92);
  *((_DWORD *)v7 + 33) = *(_DWORD *)(v4 + 108);
  *(_OWORD *)(v7 + 116) = v13;
  *(__n128 *)(v7 + 100) = result;
  *((_WORD *)v7 + 68) = v9;
  *((_QWORD *)v7 + 18) = v6;
  *((_QWORD *)v7 + 3) = &off_24C3F5B58;
  *((_QWORD *)v3 + 6) = v7 + 24;
  *((_QWORD *)v3 + 7) = v7;
  *v0 = sub_20B4464C0;
  v0[1] = (void (*)(int))v3;
  return result;
}

uint64_t sub_20B446638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20B5E8C58)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_20B4466F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B446704(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B446744()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[11];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_20B4467A4()
{
  void (**v0)(int);
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = operator new(0x60uLL);
  v4 = sub_20B446FA0(v2);
  v5 = *(_OWORD *)(v4 + 32);
  *v3 = *(_OWORD *)(v4 + 16);
  v3[1] = v5;
  v6 = *(_OWORD *)(v4 + 64);
  v3[2] = *(_OWORD *)(v4 + 48);
  v3[3] = v6;
  v7 = *(_QWORD *)(v4 + 216);
  *((_QWORD *)v3 + 8) = *(_QWORD *)(v4 + 80);
  *((_QWORD *)v3 + 9) = v7;
  v8 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C41D4A0;
  v9 = *(_WORD *)(v4 + 208);
  *((_QWORD *)v8 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v4 + 32);
  v10 = *(_OWORD *)(v4 + 48);
  v11 = *(_OWORD *)(v4 + 64);
  *((_QWORD *)v8 + 13) = *(_QWORD *)(v4 + 80);
  *(_OWORD *)(v8 + 88) = v11;
  *(_OWORD *)(v8 + 72) = v10;
  v12 = *(_QWORD *)(v4 + 88);
  *((_DWORD *)v8 + 30) = *(_DWORD *)(v4 + 96);
  *((_QWORD *)v8 + 14) = v12;
  v13 = *(_OWORD *)(v4 + 120);
  *((_OWORD *)v8 + 8) = *(_OWORD *)(v4 + 104);
  *((_OWORD *)v8 + 9) = v13;
  v14 = *(_OWORD *)(v4 + 152);
  v15 = *(_OWORD *)(v4 + 168);
  v16 = *(_OWORD *)(v4 + 184);
  *((_QWORD *)v8 + 28) = *(_QWORD *)(v4 + 200);
  *((_OWORD *)v8 + 12) = v15;
  *((_OWORD *)v8 + 13) = v16;
  *((_OWORD *)v8 + 11) = v14;
  result = *(__n128 *)(v4 + 136);
  *((__n128 *)v8 + 10) = result;
  *((_WORD *)v8 + 116) = v9;
  *((_QWORD *)v8 + 30) = v7;
  *((_QWORD *)v8 + 3) = &off_24C3F58C8;
  *((_QWORD *)v3 + 10) = v8 + 24;
  *((_QWORD *)v3 + 11) = v8;
  *v0 = sub_20B446704;
  v0[1] = (void (*)(int))v3;
  return result;
}

uint64_t sub_20B4468BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20B5E8D30)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_20B446988(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B44699C(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B4469D8()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[7];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_20B446A34()
{
  void (**v0)(int);
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = (char *)operator new(0x40uLL);
  v4 = sub_20B446E78(v2);
  v5 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)v3 = *(_OWORD *)(v4 + 16);
  *((_OWORD *)v3 + 1) = v5;
  *((_DWORD *)v3 + 8) = *(_DWORD *)(v4 + 48);
  v6 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v3 + 36) = v6;
  v7 = (char *)operator new(0x98uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_24C41D450;
  v8 = *(_QWORD *)(v4 + 52);
  v9 = *(_WORD *)(v4 + 112);
  v10 = *(_OWORD *)(v4 + 16);
  *((_QWORD *)v7 + 4) = &off_24C3F5A28;
  *(_OWORD *)(v7 + 40) = v10;
  v11 = *(_OWORD *)(v4 + 32);
  *((_DWORD *)v7 + 18) = *(_DWORD *)(v4 + 48);
  *(_OWORD *)(v7 + 56) = v11;
  *(_QWORD *)(v7 + 76) = v8;
  *(_OWORD *)(v7 + 84) = *(_OWORD *)(v4 + 60);
  result = *(__n128 *)(v4 + 76);
  v13 = *(_OWORD *)(v4 + 92);
  *((_DWORD *)v7 + 33) = *(_DWORD *)(v4 + 108);
  *(_OWORD *)(v7 + 116) = v13;
  *(__n128 *)(v7 + 100) = result;
  *((_WORD *)v7 + 68) = v9;
  *((_QWORD *)v7 + 18) = v6;
  *((_QWORD *)v7 + 3) = &off_24C3F5A88;
  *((_QWORD *)v3 + 6) = v7 + 24;
  *((_QWORD *)v3 + 7) = v7;
  *v0 = sub_20B44699C;
  v0[1] = (void (*)(int))v3;
  return result;
}

uint64_t sub_20B446B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20B5E8E08)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_20B446BCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B446BE0(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B446C20()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[11];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_20B446C80()
{
  void (**v0)(int);
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = operator new(0x60uLL);
  v4 = sub_20B446FA0(v2);
  v5 = *(_OWORD *)(v4 + 32);
  *v3 = *(_OWORD *)(v4 + 16);
  v3[1] = v5;
  v6 = *(_OWORD *)(v4 + 64);
  v3[2] = *(_OWORD *)(v4 + 48);
  v3[3] = v6;
  v7 = *(_QWORD *)(v4 + 216);
  *((_QWORD *)v3 + 8) = *(_QWORD *)(v4 + 80);
  *((_QWORD *)v3 + 9) = v7;
  v8 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C41D4F0;
  v9 = *(_WORD *)(v4 + 208);
  *((_QWORD *)v8 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v4 + 32);
  v10 = *(_OWORD *)(v4 + 48);
  v11 = *(_OWORD *)(v4 + 64);
  *((_QWORD *)v8 + 13) = *(_QWORD *)(v4 + 80);
  *(_OWORD *)(v8 + 88) = v11;
  *(_OWORD *)(v8 + 72) = v10;
  v12 = *(_QWORD *)(v4 + 88);
  *((_DWORD *)v8 + 30) = *(_DWORD *)(v4 + 96);
  *((_QWORD *)v8 + 14) = v12;
  v13 = *(_OWORD *)(v4 + 120);
  *((_OWORD *)v8 + 8) = *(_OWORD *)(v4 + 104);
  *((_OWORD *)v8 + 9) = v13;
  v14 = *(_OWORD *)(v4 + 152);
  v15 = *(_OWORD *)(v4 + 168);
  v16 = *(_OWORD *)(v4 + 184);
  *((_QWORD *)v8 + 28) = *(_QWORD *)(v4 + 200);
  *((_OWORD *)v8 + 12) = v15;
  *((_OWORD *)v8 + 13) = v16;
  *((_OWORD *)v8 + 11) = v14;
  result = *(__n128 *)(v4 + 136);
  *((__n128 *)v8 + 10) = result;
  *((_WORD *)v8 + 116) = v9;
  *((_QWORD *)v8 + 30) = v7;
  *((_QWORD *)v8 + 3) = &off_24C3F5728;
  *((_QWORD *)v3 + 10) = v8 + 24;
  *((_QWORD *)v3 + 11) = v8;
  *v0 = sub_20B446BE0;
  v0[1] = (void (*)(int))v3;
  return result;
}

uint64_t sub_20B446D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20B5E8EE0)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_20B446E64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B446E78(uint64_t a1)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v15;
  int32x2_t v16;
  int8x16_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(float *)(a1 + 24);
  v3 = *(float *)(a1 + 28);
  v4 = *(float *)(a1 + 32);
  v5 = v2 == 0.0;
  if (v3 != 0.0)
    v5 = 0;
  if (v4 != 0.0)
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 36);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(float32x2_t *)a1;
  v9 = *(float32x2_t *)(a1 + 8);
  __asm { FMOV            V5.2S, #1.0 }
  v15 = vdiv_f32(_D5, *(float32x2_t *)a1);
  v16 = vzip1_s32(*(int32x2_t *)a1, (int32x2_t)v9);
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  *(int8x16_t *)(v7 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32(*(int32x2_t *)a1, (int32x2_t)v9), 0x20uLL), v17);
  *(_QWORD *)(v7 + 32) = v1;
  *(float *)(v7 + 40) = v2;
  *(float *)(v7 + 44) = v3;
  *(float *)(v7 + 48) = v4;
  *(_QWORD *)(v7 + 52) = 0xA3727C5ACLL;
  *(float32x2_t *)(v7 + 60) = v15;
  *(float32x2_t *)(v7 + 68) = vmul_f32(v15, vneg_f32(v9));
  *(_DWORD *)(v7 + 76) = v8.i32[0];
  *(_QWORD *)(v7 + 80) = 0;
  *(_DWORD *)(v7 + 88) = 0;
  *(_DWORD *)(v7 + 92) = v8.i32[1];
  *(_DWORD *)(v7 + 96) = 0;
  *(float32x2_t *)(v7 + 100) = v9;
  *(_DWORD *)(v7 + 108) = 1065353216;
  *(_WORD *)(v7 + 112) = v5 | ((v4 == 0.0) << 8);
  *(_QWORD *)(v7 + 120) = v6;
  return *(_QWORD *)(a1 + 48);
}

uint64_t sub_20B446F38(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B446FA0(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  __int128 v5;
  double v6;
  double v7;
  double v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(double *)a1;
  v2 = *(double *)(a1 + 8);
  v3 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v5 = *(_OWORD *)(a1 + 32);
  v6 = *(double *)(a1 + 48);
  v7 = *(double *)(a1 + 56);
  v8 = *(double *)(a1 + 64);
  v9 = v6 == 0.0;
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  if (v7 != 0.0)
    v9 = 0;
  *(double *)(v11 + 16) = v1;
  *(double *)(v11 + 24) = v2;
  *(double *)(v11 + 32) = v3;
  *(double *)(v11 + 40) = v4;
  *(_OWORD *)(v11 + 48) = v5;
  *(double *)(v11 + 64) = v6;
  *(double *)(v11 + 72) = v7;
  *(_QWORD *)(v11 + 88) = 0x3EE4F8B588E368F1;
  *(_DWORD *)(v11 + 96) = 10;
  *(double *)(v11 + 80) = v8;
  if (v8 != 0.0)
    v9 = 0;
  *(double *)(v11 + 104) = 1.0 / v1;
  *(double *)(v11 + 112) = 1.0 / v2;
  *(double *)(v11 + 120) = -(v3 * (1.0 / v1));
  *(double *)(v11 + 128) = -(v4 * (1.0 / v2));
  *(double *)(v11 + 136) = v1;
  *(_QWORD *)(v11 + 152) = 0;
  *(_QWORD *)(v11 + 160) = 0;
  *(_QWORD *)(v11 + 144) = 0;
  *(double *)(v11 + 168) = v2;
  *(_QWORD *)(v11 + 176) = 0;
  *(double *)(v11 + 184) = v3;
  *(double *)(v11 + 192) = v4;
  *(_QWORD *)(v11 + 200) = 0x3FF0000000000000;
  *(_WORD *)(v11 + 208) = v9 | ((v8 == 0.0) << 8);
  *(_QWORD *)(v11 + 216) = v10;
  return *(_QWORD *)(a1 + 80);
}

uint64_t sub_20B447098(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 88);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B447100(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char *v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a1 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 120);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D450;
  v6 = *(_QWORD *)(a2 + 52);
  v7 = *(_WORD *)(a2 + 112);
  v8 = *(_QWORD *)(a2 + 120);
  *((_QWORD *)v5 + 4) = &off_24C3F5A28;
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 56) = v9;
  *((_DWORD *)v5 + 18) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(v5 + 76) = v6;
  *(_OWORD *)(v5 + 84) = *(_OWORD *)(a2 + 60);
  v10 = *(_OWORD *)(a2 + 76);
  v11 = *(_OWORD *)(a2 + 92);
  *((_DWORD *)v5 + 33) = *(_DWORD *)(a2 + 108);
  *(_OWORD *)(v5 + 116) = v11;
  *(_OWORD *)(v5 + 100) = v10;
  *((_WORD *)v5 + 68) = v7;
  *((_QWORD *)v5 + 18) = v8;
  *(_QWORD *)(a1 + 56) = v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5A88;
  *(_QWORD *)(a1 + 48) = v5 + 24;
  return a1;
}

uint64_t sub_20B4471D0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  char *v6;
  __int16 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *(_OWORD *)a1 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 216);
  v6 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24C41D4A0;
  v7 = *(_WORD *)(a2 + 208);
  v8 = *(_QWORD *)(a2 + 216);
  *((_QWORD *)v6 + 4) = &off_24C3F56C8;
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 56) = v9;
  v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 88) = v10;
  *((_DWORD *)v6 + 30) = *(_DWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 88);
  *((_QWORD *)v6 + 13) = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v6 + 14) = v11;
  v12 = *(_OWORD *)(a2 + 120);
  *((_OWORD *)v6 + 8) = *(_OWORD *)(a2 + 104);
  *((_OWORD *)v6 + 9) = v12;
  v13 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 184);
  *((_OWORD *)v6 + 12) = *(_OWORD *)(a2 + 168);
  *((_OWORD *)v6 + 13) = v14;
  *((_QWORD *)v6 + 28) = *(_QWORD *)(a2 + 200);
  *((_OWORD *)v6 + 10) = *(_OWORD *)(a2 + 136);
  *((_OWORD *)v6 + 11) = v13;
  *((_WORD *)v6 + 116) = v7;
  *((_QWORD *)v6 + 30) = v8;
  *(_QWORD *)(a1 + 88) = v6;
  *((_QWORD *)v6 + 3) = &off_24C3F58C8;
  *(_QWORD *)(a1 + 80) = v6 + 24;
  return a1;
}

uint64_t sub_20B4472B8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  char *v6;
  __int16 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *(_OWORD *)a1 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 216);
  v6 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24C41D4F0;
  v7 = *(_WORD *)(a2 + 208);
  v8 = *(_QWORD *)(a2 + 216);
  *((_QWORD *)v6 + 4) = &off_24C3F56C8;
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 56) = v9;
  v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 88) = v10;
  *((_DWORD *)v6 + 30) = *(_DWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 88);
  *((_QWORD *)v6 + 13) = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v6 + 14) = v11;
  v12 = *(_OWORD *)(a2 + 120);
  *((_OWORD *)v6 + 8) = *(_OWORD *)(a2 + 104);
  *((_OWORD *)v6 + 9) = v12;
  v13 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 184);
  *((_OWORD *)v6 + 12) = *(_OWORD *)(a2 + 168);
  *((_OWORD *)v6 + 13) = v14;
  *((_QWORD *)v6 + 28) = *(_QWORD *)(a2 + 200);
  *((_OWORD *)v6 + 10) = *(_OWORD *)(a2 + 136);
  *((_OWORD *)v6 + 11) = v13;
  *((_WORD *)v6 + 116) = v7;
  *((_QWORD *)v6 + 30) = v8;
  *(_QWORD *)(a1 + 88) = v6;
  *((_QWORD *)v6 + 3) = &off_24C3F5728;
  *(_QWORD *)(a1 + 80) = v6 + 24;
  return a1;
}

_QWORD *sub_20B4473A0(_QWORD *a1, uint64_t a2)
{
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  sub_20AEC01D0(a1, (uint64_t)"{Model: ", 8);
  sub_20AEC01D0(a1, (uint64_t)"{fx,fy: ", 8);
  v8 = *(_QWORD *)(a2 + 16);
  sub_20B4389AC(a1, (float *)&v8);
  sub_20AEC01D0(a1, (uint64_t)", cx,cy: ", 9);
  v7 = *(_QWORD *)(a2 + 24);
  sub_20B4389AC(a1, (float *)&v7);
  sub_20AEC01D0(a1, (uint64_t)", k1,k2,p1,p2,k3: ", 18);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_DWORD *)(a2 + 48);
  sub_20B447858(a1, (float *)&v5);
  sub_20AEC01D0(a1, (uint64_t)"}", 1);
  sub_20AEC01D0(a1, (uint64_t)", Size: ", 8);
  sub_20B012070(a1, (unsigned int *)(a2 + 120));
  sub_20AEC01D0(a1, (uint64_t)"}", 1);
  return a1;
}

_QWORD *sub_20B4474AC(_QWORD *a1, uint64_t a2)
{
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  sub_20AEC01D0(a1, (uint64_t)"{Model: ", 8);
  sub_20AEC01D0(a1, (uint64_t)"{fx,fy: ", 8);
  v9 = *(_OWORD *)(a2 + 16);
  sub_20B438AD8(a1, (double *)&v9);
  sub_20AEC01D0(a1, (uint64_t)", cx,cy: ", 9);
  v8 = *(_OWORD *)(a2 + 32);
  sub_20B438AD8(a1, (double *)&v8);
  sub_20AEC01D0(a1, (uint64_t)", k1,k2,p1,p2,k3: ", 18);
  v4 = *(_OWORD *)(a2 + 64);
  v6[0] = *(_OWORD *)(a2 + 48);
  v6[1] = v4;
  v7 = *(_QWORD *)(a2 + 80);
  sub_20B447B5C(a1, (double *)v6);
  sub_20AEC01D0(a1, (uint64_t)"}", 1);
  sub_20AEC01D0(a1, (uint64_t)", Size: ", 8);
  sub_20B012070(a1, (unsigned int *)(a2 + 216));
  sub_20AEC01D0(a1, (uint64_t)"}", 1);
  return a1;
}

void sub_20B4475B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D2C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B4475C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D2C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4475F8(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F5B98;
  return result;
}

void sub_20B44760C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B44761C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B44764C(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F5AC8;
  return result;
}

void sub_20B447660(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B447670(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4476A0(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F5908;
  return result;
}

void sub_20B4476B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D3B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B4476C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D3B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4476F4(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F5768;
  return result;
}

void sub_20B447708(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B447718(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B447748(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F5B98;
  return result;
}

void sub_20B44775C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B44776C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D450;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B44779C(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F5AC8;
  return result;
}

void sub_20B4477B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D4A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B4477C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D4A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4477F0(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F5908;
  return result;
}

void sub_20B447804(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D4F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B447814(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D4F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B447844(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F5768;
  return result;
}

_QWORD *sub_20B447858(_QWORD *a1, float *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20B447984((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_20AECFAB8();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C41D560[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C41D530[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_20AEC01D0(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20B447940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B44795C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B447970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B447984(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = "{";
  v14 = a2;
  v15 = "{";
  v16 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **))off_24C41D548[v3])(&v17);
  sub_20AF57AB0((uint64_t)&v12, a2, a3);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C41D548[v6])(&v17, a2);
  sub_20AF57AB0((uint64_t)&v12, a2, a3 + 1);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C41D548[v7])(&v17, a2);
  sub_20AF57AB0((uint64_t)&v12, a2, a3 + 2);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C41D548[v8])(&v17, a2);
  sub_20AF57AB0((uint64_t)&v12, a2, a3 + 3);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C41D548[v9])(&v17, a2);
  sub_20AF57AB0((uint64_t)&v12, a2, a3 + 4);
  v12 = a2;
  v13 = "}";
  v14 = a2;
  v15 = "}";
  v16 = "}";
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_8:
    sub_20AECFAB8();
  v17 = &v12;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C41D548[v10])(&v17, a2);
}

_QWORD *sub_20B447B5C(_QWORD *a1, double *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20B447C88((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_20AECFAB8();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C41D560[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C41D530[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_20AEC01D0(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20B447C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B447C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B447C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B447C88(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = "{";
  v14 = a2;
  v15 = "{";
  v16 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **))off_24C41D548[v3])(&v17);
  sub_20AF55CBC((uint64_t)&v12, a2, a3);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C41D548[v6])(&v17, a2);
  sub_20AF55CBC((uint64_t)&v12, a2, a3 + 1);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C41D548[v7])(&v17, a2);
  sub_20AF55CBC((uint64_t)&v12, a2, a3 + 2);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C41D548[v8])(&v17, a2);
  sub_20AF55CBC((uint64_t)&v12, a2, a3 + 3);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C41D548[v9])(&v17, a2);
  sub_20AF55CBC((uint64_t)&v12, a2, a3 + 4);
  v12 = a2;
  v13 = "}";
  v14 = a2;
  v15 = "}";
  v16 = "}";
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_8:
    sub_20AECFAB8();
  v17 = &v12;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C41D548[v10])(&v17, a2);
}

uint64_t sub_20B447E60(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_20B447EC8(_QWORD *a1, float32x2_t *a2)
{
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v12;
  int32x2_t v13;
  int8x16_t v14;
  float32x2_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  __int128 v20;

  v3 = a2[2];
  v4 = a2[3];
  v5 = *a2;
  v6 = a2[1];
  __asm { FMOV            V2.2S, #1.0 }
  v12 = vdiv_f32(_D2, *a2);
  v13 = vzip1_s32((int32x2_t)*a2, (int32x2_t)v6);
  v14.i64[0] = v13.u32[0];
  v14.i64[1] = v13.u32[1];
  *(int8x16_t *)(*(_QWORD *)&v4 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*a2, (int32x2_t)v6), 0x20uLL), v14);
  *(float32x2_t *)(*(_QWORD *)&v4 + 32) = v12;
  *(float32x2_t *)(*(_QWORD *)&v4 + 40) = vmul_f32(v12, vneg_f32(v6));
  *(_DWORD *)(*(_QWORD *)&v4 + 48) = v5.i32[0];
  *(_QWORD *)(*(_QWORD *)&v4 + 56) = 0;
  *(_DWORD *)(*(_QWORD *)&v4 + 52) = 0;
  *(_DWORD *)(*(_QWORD *)&v4 + 64) = v5.i32[1];
  *(_DWORD *)(*(_QWORD *)&v4 + 68) = 0;
  *(float32x2_t *)(*(_QWORD *)&v4 + 72) = v6;
  *(_DWORD *)(*(_QWORD *)&v4 + 80) = 1065353216;
  *(float32x2_t *)(*(_QWORD *)&v4 + 88) = v3;
  v15 = a2[3];
  *a1 = *(_QWORD *)(*(_QWORD *)&v15 + 16);
  a1[1] = *(_QWORD *)(*(_QWORD *)&v15 + 24);
  a1[2] = *(_QWORD *)(*(_QWORD *)&v15 + 88);
  v16 = (char *)operator new(0x78uLL);
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = &off_24C41D6C8;
  v17 = *(_QWORD *)(*(_QWORD *)&v15 + 88);
  v18 = *(_OWORD *)(*(_QWORD *)&v15 + 16);
  *((_QWORD *)v16 + 4) = &off_24C3F5D38;
  *(_OWORD *)(v16 + 40) = v18;
  *(_OWORD *)(v16 + 56) = *(_OWORD *)(*(_QWORD *)&v15 + 32);
  v19 = *(_DWORD *)(*(_QWORD *)&v15 + 80);
  v20 = *(_OWORD *)(*(_QWORD *)&v15 + 64);
  *(_OWORD *)(v16 + 72) = *(_OWORD *)(*(_QWORD *)&v15 + 48);
  *((_DWORD *)v16 + 26) = v19;
  *(_OWORD *)(v16 + 88) = v20;
  *((_QWORD *)v16 + 14) = v17;
  a1[4] = v16;
  *((_QWORD *)v16 + 3) = &off_24C3F5C88;
  a1[3] = v16 + 24;
  return a1;
}

_QWORD *sub_20B447FCC(_QWORD *a1, float32x2_t *a2)
{
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v12;
  int32x2_t v13;
  int8x16_t v14;
  float32x2_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  __int128 v20;

  v3 = a2[2];
  v4 = a2[3];
  v5 = *a2;
  v6 = a2[1];
  __asm { FMOV            V2.2S, #1.0 }
  v12 = vdiv_f32(_D2, *a2);
  v13 = vzip1_s32((int32x2_t)*a2, (int32x2_t)v6);
  v14.i64[0] = v13.u32[0];
  v14.i64[1] = v13.u32[1];
  *(int8x16_t *)(*(_QWORD *)&v4 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*a2, (int32x2_t)v6), 0x20uLL), v14);
  *(float32x2_t *)(*(_QWORD *)&v4 + 32) = v12;
  *(float32x2_t *)(*(_QWORD *)&v4 + 40) = vmul_f32(v12, vneg_f32(v6));
  *(_DWORD *)(*(_QWORD *)&v4 + 48) = v5.i32[0];
  *(_QWORD *)(*(_QWORD *)&v4 + 56) = 0;
  *(_DWORD *)(*(_QWORD *)&v4 + 52) = 0;
  *(_DWORD *)(*(_QWORD *)&v4 + 64) = v5.i32[1];
  *(_DWORD *)(*(_QWORD *)&v4 + 68) = 0;
  *(float32x2_t *)(*(_QWORD *)&v4 + 72) = v6;
  *(_DWORD *)(*(_QWORD *)&v4 + 80) = 1065353216;
  *(float32x2_t *)(*(_QWORD *)&v4 + 88) = v3;
  v15 = a2[3];
  *a1 = *(_QWORD *)(*(_QWORD *)&v15 + 16);
  a1[1] = *(_QWORD *)(*(_QWORD *)&v15 + 24);
  a1[2] = *(_QWORD *)(*(_QWORD *)&v15 + 88);
  v16 = (char *)operator new(0x78uLL);
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = &off_24C41D718;
  v17 = *(_QWORD *)(*(_QWORD *)&v15 + 88);
  v18 = *(_OWORD *)(*(_QWORD *)&v15 + 16);
  *((_QWORD *)v16 + 4) = &off_24C3F5D38;
  *(_OWORD *)(v16 + 40) = v18;
  *(_OWORD *)(v16 + 56) = *(_OWORD *)(*(_QWORD *)&v15 + 32);
  v19 = *(_DWORD *)(*(_QWORD *)&v15 + 80);
  v20 = *(_OWORD *)(*(_QWORD *)&v15 + 64);
  *(_OWORD *)(v16 + 72) = *(_OWORD *)(*(_QWORD *)&v15 + 48);
  *((_DWORD *)v16 + 26) = v19;
  *(_OWORD *)(v16 + 88) = v20;
  *((_QWORD *)v16 + 14) = v17;
  a1[4] = v16;
  *((_QWORD *)v16 + 3) = &off_24C3F5998;
  a1[3] = v16 + 24;
  return a1;
}

uint64_t sub_20B4480D0(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v3 = *(double *)a2;
  v4 = *(double *)(a2 + 8);
  v5 = *(double *)(a2 + 16);
  v6 = *(double *)(a2 + 24);
  v7 = 1.0 / *(double *)a2;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)a2;
  *(double *)(v9 + 24) = v4;
  *(double *)(v9 + 32) = v5;
  *(double *)(v9 + 40) = v6;
  *(double *)(v9 + 48) = v7;
  *(double *)(v9 + 56) = 1.0 / v4;
  *(double *)(v9 + 64) = -(v5 * v7);
  *(double *)(v9 + 72) = -(v6 * (1.0 / v4));
  *(double *)(v9 + 80) = v3;
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(double *)(v9 + 112) = v4;
  *(_QWORD *)(v9 + 120) = 0;
  *(double *)(v9 + 128) = v5;
  *(double *)(v9 + 136) = v6;
  *(_QWORD *)(v9 + 144) = 0x3FF0000000000000;
  *(_QWORD *)(v9 + 152) = v8;
  v10 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v10 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 + 152);
  v11 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_24C41D768;
  v12 = *(_QWORD *)(v10 + 152);
  *((_QWORD *)v11 + 4) = &off_24C3F5508;
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v10 + 32);
  v13 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v11 + 88) = v13;
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(v10 + 80);
  v14 = *(_OWORD *)(v10 + 96);
  v15 = *(_OWORD *)(v10 + 112);
  v16 = *(_QWORD *)(v10 + 144);
  *(_OWORD *)(v11 + 152) = *(_OWORD *)(v10 + 128);
  *(_OWORD *)(v11 + 136) = v15;
  *(_OWORD *)(v11 + 120) = v14;
  *((_QWORD *)v11 + 21) = v16;
  *((_QWORD *)v11 + 22) = v12;
  *(_QWORD *)(a1 + 48) = v11;
  *((_QWORD *)v11 + 3) = &off_24C3F57F8;
  *(_QWORD *)(a1 + 40) = v11 + 24;
  return a1;
}

uint64_t sub_20B4481D8(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v3 = *(double *)a2;
  v4 = *(double *)(a2 + 8);
  v5 = *(double *)(a2 + 16);
  v6 = *(double *)(a2 + 24);
  v7 = 1.0 / *(double *)a2;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)a2;
  *(double *)(v9 + 24) = v4;
  *(double *)(v9 + 32) = v5;
  *(double *)(v9 + 40) = v6;
  *(double *)(v9 + 48) = v7;
  *(double *)(v9 + 56) = 1.0 / v4;
  *(double *)(v9 + 64) = -(v5 * v7);
  *(double *)(v9 + 72) = -(v6 * (1.0 / v4));
  *(double *)(v9 + 80) = v3;
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(double *)(v9 + 112) = v4;
  *(_QWORD *)(v9 + 120) = 0;
  *(double *)(v9 + 128) = v5;
  *(double *)(v9 + 136) = v6;
  *(_QWORD *)(v9 + 144) = 0x3FF0000000000000;
  *(_QWORD *)(v9 + 152) = v8;
  v10 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v10 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 + 152);
  v11 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_24C41D7B8;
  v12 = *(_QWORD *)(v10 + 152);
  *((_QWORD *)v11 + 4) = &off_24C3F5508;
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v10 + 32);
  v13 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v11 + 88) = v13;
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(v10 + 80);
  v14 = *(_OWORD *)(v10 + 96);
  v15 = *(_OWORD *)(v10 + 112);
  v16 = *(_QWORD *)(v10 + 144);
  *(_OWORD *)(v11 + 152) = *(_OWORD *)(v10 + 128);
  *(_OWORD *)(v11 + 136) = v15;
  *(_OWORD *)(v11 + 120) = v14;
  *((_QWORD *)v11 + 21) = v16;
  *((_QWORD *)v11 + 22) = v12;
  *(_QWORD *)(a1 + 48) = v11;
  *((_QWORD *)v11 + 3) = &off_24C3F55F8;
  *(_QWORD *)(a1 + 40) = v11 + 24;
  return a1;
}

_QWORD *sub_20B4482E0(_QWORD *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;

  sub_20AEC01D0(a1, (uint64_t)"{Model: ", 8);
  sub_20AEC01D0(a1, (uint64_t)"{fx,fy: ", 8);
  v6 = *(_QWORD *)(a2 + 16);
  sub_20B4389AC(a1, (float *)&v6);
  sub_20AEC01D0(a1, (uint64_t)", cx,cy: ", 9);
  v5 = *(_QWORD *)(a2 + 24);
  sub_20B4389AC(a1, (float *)&v5);
  sub_20AEC01D0(a1, (uint64_t)"}", 1);
  sub_20AEC01D0(a1, (uint64_t)", Size: ", 8);
  sub_20B012070(a1, (unsigned int *)(a2 + 88));
  sub_20AEC01D0(a1, (uint64_t)"}", 1);
  return a1;
}

_QWORD *sub_20B4483BC(_QWORD *a1, uint64_t a2)
{
  __int128 v5;
  __int128 v6;

  sub_20AEC01D0(a1, (uint64_t)"{Model: ", 8);
  sub_20AEC01D0(a1, (uint64_t)"{fx,fy: ", 8);
  v6 = *(_OWORD *)(a2 + 16);
  sub_20B438AD8(a1, (double *)&v6);
  sub_20AEC01D0(a1, (uint64_t)", cx,cy: ", 9);
  v5 = *(_OWORD *)(a2 + 32);
  sub_20B438AD8(a1, (double *)&v5);
  sub_20AEC01D0(a1, (uint64_t)"}", 1);
  sub_20AEC01D0(a1, (uint64_t)", Size: ", 8);
  sub_20B012070(a1, (unsigned int *)(a2 + 152));
  sub_20AEC01D0(a1, (uint64_t)"}", 1);
  return a1;
}

void sub_20B448498(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B4484A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4484D8(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F5CF8;
  return result;
}

void sub_20B4484EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D5D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B4484FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D5D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B44852C(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F54C8;
  return result;
}

void sub_20B448540(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B448550(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B448580(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F5838;
  return result;
}

void sub_20B448594(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B4485A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4485D4(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F5638;
  return result;
}

void sub_20B4485E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D6C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B4485F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D6C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B448628(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F5CF8;
  return result;
}

void sub_20B44863C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D718;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B44864C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D718;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B44867C(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F54C8;
  return result;
}

void sub_20B448690(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B4486A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D768;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4486D0(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F5838;
  return result;
}

void sub_20B4486E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D7B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B4486F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41D7B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B448724(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C3F5638;
  return result;
}

_QWORD *sub_20B448738(_QWORD *a1)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  int32x4_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = (char *)operator new(0x78uLL);
  v3 = (std::__shared_weak_count *)v2;
  *((_QWORD *)v2 + 1) = 0;
  v4 = (unint64_t *)(v2 + 8);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24C3F5D98;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 4) = &off_24C3F5D38;
  v5 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v2 + 56) = v5;
  *(int32x4_t *)(v2 + 72) = v5;
  *(int32x4_t *)(v2 + 88) = v5;
  *((_DWORD *)v2 + 26) = 2143289344;
  *((_QWORD *)v2 + 3) = &off_24C3F5C88;
  *((_QWORD *)v2 + 14) = 0;
  *a1 = &off_24C41D808;
  a1[1] = v2 + 24;
  a1[2] = v2;
  do
    v6 = __ldxr(v4);
  while (__stxr(v6 + 1, v4));
  do
    v7 = __ldaxr(v4);
  while (__stlxr(v7 - 1, v4));
  if (!v7)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

_QWORD *sub_20B448814(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C41D808;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B448888(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C41D808;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

BOOL sub_20B4488FC(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v11;
  const void *v13;
  double *v14;
  double *v15;
  const void *v16;
  double *v17;
  const void *v19;
  float *v20;
  float *v21;
  const void *v22;
  float *v23;
  BOOL v24;
  int v25;
  const void *v27;
  double *v28;
  const void *v29;
  __int128 *v30;
  const void *v31;
  float *v32;
  const void *v33;
  _BOOL4 v35;
  unint64_t v37;
  char v38;
  const void *v39;
  float *v40;
  float *v41;
  const void *v42;
  float *v43;
  BOOL v44;
  int v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  __int128 *v50;
  __int128 *v51;
  __int128 *v52;
  __int128 *v53;
  BOOL v54;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  if (v4 != (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8)))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  if (v5 != (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8)))
    return 0;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  if (v6 != (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8)))
    return 0;
  v54 = 0;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  v11 = v7 == 1 && v8 == 1;
  if (v11 && v9 == 11)
  {
    v19 = *(const void **)(a1 + 8);
    if (!v19)
      return v54;
    v20 = (float *)__dynamic_cast(v19, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5CD0, 0);
    if (!v20)
      return v54;
    v21 = v20;
    v22 = *(const void **)(a2 + 8);
    if (!v22
      || (v23 = (float *)__dynamic_cast(v22, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5CD0, 0)) == 0)
    {
      v50 = sub_20AF56C34();
      sub_20B449200(a2, (const char *)v50, (uint64_t)"trying to cast camera");
    }
    if (v21[4] != v23[4]
      || v21[5] != v23[5]
      || v21[6] != v23[6]
      || v21[7] != v23[7]
      || *((_DWORD *)v21 + 22) != *((_DWORD *)v23 + 22))
    {
      return 0;
    }
    return *((_DWORD *)v21 + 23) == *((_DWORD *)v23 + 23);
  }
  if (v9 != 12)
    v11 = 0;
  if (v11)
  {
    v13 = *(const void **)(a1 + 8);
    if (!v13)
      return v54;
    v14 = (double *)__dynamic_cast(v13, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5DF0, 0);
    if (!v14)
      return v54;
    v15 = v14;
    v16 = *(const void **)(a2 + 8);
    if (!v16
      || (v17 = (double *)__dynamic_cast(v16, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5DF0, 0)) == 0)
    {
      v51 = sub_20AF58DD0();
      sub_20B449200(a2, (const char *)v51, (uint64_t)"trying to cast camera");
    }
LABEL_21:
    if (v15[2] == v17[2]
      && v15[3] == v17[3]
      && v15[4] == v17[4]
      && v15[5] == v17[5]
      && *((_DWORD *)v15 + 38) == *((_DWORD *)v17 + 38))
    {
      return *((_DWORD *)v15 + 39) == *((_DWORD *)v17 + 39);
    }
    return 0;
  }
  if (v7)
    v24 = 0;
  else
    v24 = v8 == 1;
  v25 = v24;
  if (v25 == 1 && v9 == 11)
  {
    v31 = *(const void **)(a1 + 8);
    if (!v31)
      return v54;
    v32 = (float *)__dynamic_cast(v31, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5E20, 0);
    if (!v32)
      return v54;
    v21 = v32;
    v33 = *(const void **)(a2 + 8);
    if (!v33
      || (v23 = (float *)__dynamic_cast(v33, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5E20, 0)) == 0)
    {
      v52 = sub_20AF54BF0();
      sub_20B449200(a2, (const char *)v52, (uint64_t)"trying to cast camera");
    }
    if (v21[4] != v23[4]
      || v21[5] != v23[5]
      || v21[6] != v23[6]
      || v21[7] != v23[7]
      || *((_DWORD *)v21 + 22) != *((_DWORD *)v23 + 22))
    {
      return 0;
    }
    return *((_DWORD *)v21 + 23) == *((_DWORD *)v23 + 23);
  }
  if (v9 != 12)
    v25 = 0;
  if (v25 == 1)
  {
    v27 = *(const void **)(a1 + 8);
    if (!v27)
      return v54;
    v28 = (double *)__dynamic_cast(v27, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5E50, 0);
    if (!v28)
      return v54;
    v15 = v28;
    v29 = *(const void **)(a2 + 8);
    if (!v29
      || (v17 = (double *)__dynamic_cast(v29, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5E50, 0)) == 0)
    {
      v30 = sub_20AF5887C();
      sub_20B449200(a2, (const char *)v30, (uint64_t)"trying to cast camera");
    }
    goto LABEL_21;
  }
  v35 = v7 == 1 && v8 == 2;
  if (!v35 || v9 != 11)
  {
    if (v9 != 12)
      v35 = 0;
    if (v35)
    {
      v37 = sub_20B44A184(*(const void **)(a1 + 8));
      sub_20B44A02C(&v54, a2, v37, v38);
    }
    else
    {
      if (v7)
        v44 = 0;
      else
        v44 = v8 == 2;
      v45 = v44;
      if (v44 && v9 == 11)
      {
        v46 = sub_20B44A334(*(const void **)(a1 + 8));
        sub_20B44A1DC(&v54, a2, v46, v47);
      }
      else
      {
        if (v9 != 12)
          v45 = 0;
        if (v45 == 1)
        {
          v48 = sub_20B44A4E4(*(const void **)(a1 + 8));
          sub_20B44A38C(&v54, a2, v48, v49);
        }
      }
    }
    return v54;
  }
  v39 = *(const void **)(a1 + 8);
  if (v39)
  {
    v40 = (float *)__dynamic_cast(v39, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5E80, 0);
    if (v40)
    {
      v41 = v40;
      v42 = *(const void **)(a2 + 8);
      if (!v42
        || (v43 = (float *)__dynamic_cast(v42, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5E80, 0)) == 0)
      {
        v53 = sub_20AF596D4();
        sub_20B449200(a2, (const char *)v53, (uint64_t)"trying to cast camera");
      }
      if (v41[4] == v43[4]
        && v41[5] == v43[5]
        && v41[6] == v43[6]
        && v41[7] == v43[7]
        && v41[8] == v43[8]
        && v41[9] == v43[9]
        && v41[10] == v43[10]
        && v41[11] == v43[11]
        && v41[12] == v43[12]
        && v41[13] == v43[13]
        && *((_DWORD *)v41 + 14) == *((_DWORD *)v43 + 14)
        && *((_DWORD *)v41 + 30) == *((_DWORD *)v43 + 30))
      {
        return *((_DWORD *)v41 + 31) == *((_DWORD *)v43 + 31);
      }
      return 0;
    }
  }
  return v54;
}

uint64_t sub_20B448F1C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B448F2C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B448F3C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B448F4C(char *__s, const char *a2, const char *a3, const char *a4, const char *a5, uint64_t a6)
{
  uint64_t result;
  _DWORD v12[6];
  int v13;
  _QWORD **v14;
  const char *v15;
  _DWORD *v16;
  const char *v17;
  const char *v18;
  _QWORD *v19;

  v13 = 0;
  sub_20B02E204(v12, __s);
  v14 = (_QWORD **)v12;
  v15 = a2;
  v16 = v12;
  v17 = a2;
  v18 = a2;
  if (v13 == -1)
    sub_20AECFAB8();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C41D880[v13])(&v19, v12);
  v14 = (_QWORD **)v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_20AECFAB8();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C41D898[v13])(&v19, v12);
  if (*(_QWORD *)a4)
  {
    v14 = (_QWORD **)v12;
    v15 = a4;
    v16 = v12;
    v17 = a4;
    v18 = a4;
    if (v13 != -1)
    {
      v19 = &v14;
      ((void (*)(_QWORD **, _DWORD *))off_24C41D8B0[v13])(&v19, v12);
      goto LABEL_8;
    }
LABEL_15:
    sub_20AECFAB8();
  }
  v14 = (_QWORD **)v12;
  v15 = "nullptr";
  v16 = v12;
  v17 = "nullptr";
  v18 = "nullptr";
  if (v13 == -1)
    goto LABEL_15;
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C41D868[v13])(&v19, v12);
LABEL_8:
  v14 = (_QWORD **)v12;
  v15 = a5;
  v16 = v12;
  v17 = a5;
  v18 = a5;
  if (v13 == -1)
    sub_20AECFAB8();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C41D898[v13])(&v19, v12);
  sub_20AF5C448((uint64_t)&v14, (uint64_t)v12, a6);
  if (v13 == -1)
    sub_20AECFAB8();
  v14 = &v19;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C41D8C8[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C41D850[v13])(&v14, v12);
  return result;
}

void sub_20B449174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B449188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B44919C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4491B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4491C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4491D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4491EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B449200(uint64_t a1, const char *a2, uint64_t a3)
{
  std::logic_error *exception;
  std::string v7;
  uint64_t v8;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  v8 = a3;
  sub_20B448F4C("Invalid argument ", a2, " ", (const char *)&v8, " ", a1);
  std::logic_error::logic_error(exception, &v7);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
}

void sub_20B449298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
      goto LABEL_3;
  }
  else if (!v15)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_20B4492CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B4492E0(_QWORD *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  _BOOL4 v8;
  const void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  std::string::size_type v15;
  std::string::value_type v16;
  std::string *v17;
  unsigned __int8 v18;
  const void *v19;
  void *v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  std::string::size_type v24;
  std::string::value_type v25;
  std::string *v26;
  unsigned __int8 v27;
  BOOL v28;
  int v29;
  const void *v31;
  void *v32;
  int v33;
  unsigned __int8 *v34;
  std::string::size_type v35;
  std::string::value_type v36;
  std::string *v37;
  unsigned __int8 v38;
  const void *v39;
  void *v40;
  int v41;
  unsigned __int8 *v42;
  std::string::size_type v43;
  std::string::value_type v44;
  std::string *v45;
  unsigned __int8 v46;
  _BOOL4 v48;
  unint64_t v50;
  unsigned __int8 v51;
  const void *v52;
  void *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  std::string::size_type v56;
  std::string *v57;
  unsigned __int8 v58;
  BOOL v59;
  int v60;
  unint64_t v62;
  unsigned __int8 v63;
  unint64_t v64;
  unsigned __int8 v65;
  const char *v66;
  unsigned int v67;
  const char *v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  char v76;
  void *v77;
  std::string::size_type v78;
  unsigned __int8 v79;
  std::string v80;
  void *__p[2];
  char v82;
  int v83;
  char v84;
  _QWORD v85[2];

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8));
  v8 = v4 == 1 && v5 == 1;
  if (v8 && v6 == 11)
  {
    v19 = *(const void **)(a2 + 8);
    if (!v19)
      goto LABEL_148;
    v20 = __dynamic_cast(v19, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5CD0, 0);
    if (!v20)
      goto LABEL_148;
    v21 = (uint64_t)v20;
    sub_20AEC01D0(a1, (uint64_t)"Camera{Type: ", 13);
    sub_20AEC01D0(a1, (uint64_t)"Center", 6);
    sub_20AEC01D0(a1, (uint64_t)"Pinhole", 7);
    v76 = 11;
    v83 = 0;
    sub_20AF5A35C((uint64_t)v85, (uint64_t)__p, &v76);
    if (v83 == -1)
      sub_20AECFAB8();
    v85[0] = &v84;
    ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C41D8C8[v83])(&v77, v85, __p);
    if (v83 != -1)
      ((void (*)(_QWORD *, void **))off_24C41D850[v83])(v85, __p);
    v22 = (char)v79;
    v23 = (unsigned __int8 *)v77;
    if ((v79 & 0x80u) == 0)
      v24 = v79;
    else
      v24 = v78;
    memset(&v80, 0, sizeof(v80));
    std::string::reserve(&v80, v24);
    if (v22 >= 0)
      v23 = (unsigned __int8 *)&v77;
    for (; v24; --v24)
    {
      v25 = __toupper(*v23);
      std::string::push_back(&v80, v25);
      ++v23;
    }
    v26 = &v80;
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = (std::string *)v80.__r_.__value_.__r.__words[0];
    v27 = v26->__r_.__value_.__s.__data_[0];
    v82 = 1;
    LOWORD(__p[0]) = v27;
    sub_20AEC01D0(a1, (uint64_t)__p, 1);
    if (v82 < 0)
      operator delete(__p[0]);
    goto LABEL_47;
  }
  if (v6 != 12)
    v8 = 0;
  if (v8)
  {
    v10 = *(const void **)(a2 + 8);
    if (v10)
    {
      v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5DF0, 0);
      if (v11)
      {
        v12 = (uint64_t)v11;
        sub_20AEC01D0(a1, (uint64_t)"Camera{Type: ", 13);
        sub_20AEC01D0(a1, (uint64_t)"Center", 6);
        sub_20AEC01D0(a1, (uint64_t)"Pinhole", 7);
        v76 = 12;
        v83 = 0;
        sub_20AF5A35C((uint64_t)v85, (uint64_t)__p, &v76);
        if (v83 == -1)
          sub_20AECFAB8();
        v85[0] = &v84;
        ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C41D8C8[v83])(&v77, v85, __p);
        if (v83 != -1)
          ((void (*)(_QWORD *, void **))off_24C41D850[v83])(v85, __p);
        v13 = (char)v79;
        v14 = (unsigned __int8 *)v77;
        if ((v79 & 0x80u) == 0)
          v15 = v79;
        else
          v15 = v78;
        memset(&v80, 0, sizeof(v80));
        std::string::reserve(&v80, v15);
        if (v13 >= 0)
          v14 = (unsigned __int8 *)&v77;
        for (; v15; --v15)
        {
          v16 = __toupper(*v14);
          std::string::push_back(&v80, v16);
          ++v14;
        }
        v17 = &v80;
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v17 = (std::string *)v80.__r_.__value_.__r.__words[0];
        v18 = v17->__r_.__value_.__s.__data_[0];
        v82 = 1;
        LOWORD(__p[0]) = v18;
        sub_20AEC01D0(a1, (uint64_t)__p, 1);
        if (v82 < 0)
          operator delete(__p[0]);
LABEL_30:
        sub_20AEC01D0(a1, (uint64_t)",", 1);
        sub_20B4483BC(a1, v12);
        sub_20AEC01D0(a1, (uint64_t)"}", 1);
        goto LABEL_48;
      }
    }
    goto LABEL_148;
  }
  if (v4)
    v28 = 0;
  else
    v28 = v5 == 1;
  v29 = v28;
  if (v29 == 1 && v6 == 11)
  {
    v39 = *(const void **)(a2 + 8);
    if (!v39)
      goto LABEL_148;
    v40 = __dynamic_cast(v39, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5E20, 0);
    if (!v40)
      goto LABEL_148;
    v21 = (uint64_t)v40;
    sub_20AEC01D0(a1, (uint64_t)"Camera{Type: ", 13);
    sub_20AEC01D0(a1, (uint64_t)"Corner", 6);
    sub_20AEC01D0(a1, (uint64_t)"Pinhole", 7);
    v76 = 11;
    v83 = 0;
    sub_20AF5A35C((uint64_t)v85, (uint64_t)__p, &v76);
    if (v83 == -1)
      sub_20AECFAB8();
    v85[0] = &v84;
    ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C41D8C8[v83])(&v77, v85, __p);
    if (v83 != -1)
      ((void (*)(_QWORD *, void **))off_24C41D850[v83])(v85, __p);
    v41 = (char)v79;
    v42 = (unsigned __int8 *)v77;
    if ((v79 & 0x80u) == 0)
      v43 = v79;
    else
      v43 = v78;
    memset(&v80, 0, sizeof(v80));
    std::string::reserve(&v80, v43);
    if (v41 >= 0)
      v42 = (unsigned __int8 *)&v77;
    for (; v43; --v43)
    {
      v44 = __toupper(*v42);
      std::string::push_back(&v80, v44);
      ++v42;
    }
    v45 = &v80;
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v45 = (std::string *)v80.__r_.__value_.__r.__words[0];
    v46 = v45->__r_.__value_.__s.__data_[0];
    v82 = 1;
    LOWORD(__p[0]) = v46;
    sub_20AEC01D0(a1, (uint64_t)__p, 1);
    if (v82 < 0)
      operator delete(__p[0]);
LABEL_47:
    sub_20AEC01D0(a1, (uint64_t)",", 1);
    sub_20B4482E0(a1, v21);
    sub_20AEC01D0(a1, (uint64_t)"}", 1);
    goto LABEL_48;
  }
  if (v6 != 12)
    v29 = 0;
  if (v29 == 1)
  {
    v31 = *(const void **)(a2 + 8);
    if (v31)
    {
      v32 = __dynamic_cast(v31, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5E50, 0);
      if (v32)
      {
        v12 = (uint64_t)v32;
        sub_20AEC01D0(a1, (uint64_t)"Camera{Type: ", 13);
        sub_20AEC01D0(a1, (uint64_t)"Corner", 6);
        sub_20AEC01D0(a1, (uint64_t)"Pinhole", 7);
        v76 = 12;
        v83 = 0;
        sub_20AF5A35C((uint64_t)v85, (uint64_t)__p, &v76);
        if (v83 == -1)
          sub_20AECFAB8();
        v85[0] = &v84;
        ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C41D8C8[v83])(&v77, v85, __p);
        if (v83 != -1)
          ((void (*)(_QWORD *, void **))off_24C41D850[v83])(v85, __p);
        v33 = (char)v79;
        v34 = (unsigned __int8 *)v77;
        if ((v79 & 0x80u) == 0)
          v35 = v79;
        else
          v35 = v78;
        memset(&v80, 0, sizeof(v80));
        std::string::reserve(&v80, v35);
        if (v33 >= 0)
          v34 = (unsigned __int8 *)&v77;
        for (; v35; --v35)
        {
          v36 = __toupper(*v34);
          std::string::push_back(&v80, v36);
          ++v34;
        }
        v37 = &v80;
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v37 = (std::string *)v80.__r_.__value_.__r.__words[0];
        v38 = v37->__r_.__value_.__s.__data_[0];
        v82 = 1;
        LOWORD(__p[0]) = v38;
        sub_20AEC01D0(a1, (uint64_t)__p, 1);
        if (v82 < 0)
          operator delete(__p[0]);
        goto LABEL_30;
      }
    }
LABEL_148:
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    sub_20AEC01D0(a1, (uint64_t)"Camera{Type: ", 13);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8)) == 1)
      v66 = "Center";
    else
      v66 = "Corner";
    sub_20AEC01D0(a1, (uint64_t)v66, 6);
    sub_20AEC01D0(a1, (uint64_t)",", 1);
    v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8));
    sub_20AEC01D0(a1, (uint64_t)(&off_24C41D8E0)[2 * v67], (uint64_t)(&off_24C41D8E0)[2 * v67 + 1]);
    sub_20AEC01D0(a1, (uint64_t)",", 1);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8)) == 11)
      v68 = "f32";
    else
      v68 = "f64";
    sub_20AEC01D0(a1, (uint64_t)v68, 3);
    sub_20AEC01D0(a1, (uint64_t)",", 1);
    v69 = *(void **)(a2 + 8);
    v70 = *(std::__shared_weak_count **)(a2 + 16);
    __p[0] = v69;
    __p[1] = v70;
    if (v70)
    {
      p_shared_owners = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldxr(p_shared_owners);
      while (__stxr(v72 + 1, p_shared_owners));
    }
    v77 = v69;
    sub_20AF60518((uint64_t)v85, &v80, &v77);
    sub_20AEC01D0(v80.__r_.__value_.__l.__data_, (uint64_t)"}", 1);
    if (v70)
    {
      v73 = (unint64_t *)&v70->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    return a1;
  }
  v48 = v4 == 1 && v5 == 2;
  if (!v48 || v6 != 11)
  {
    if (v6 != 12)
      v48 = 0;
    if (v48)
    {
      v50 = sub_20B44A184(*(const void **)(a2 + 8));
      if (sub_20B44A53C(a1, v50, v51))
        return a1;
    }
    else
    {
      if (v4)
        v59 = 0;
      else
        v59 = v5 == 2;
      v60 = v59;
      if (v60 == 1 && v6 == 11)
      {
        v64 = sub_20B44A334(*(const void **)(a2 + 8));
        if (sub_20B44A7D4(a1, v64, v65))
          return a1;
      }
      else
      {
        if (v6 != 12)
          v60 = 0;
        if (v60 == 1)
        {
          v62 = sub_20B44A4E4(*(const void **)(a2 + 8));
          if (sub_20B44AA6C(a1, v62, v63))
            return a1;
        }
      }
    }
    goto LABEL_148;
  }
  v52 = *(const void **)(a2 + 8);
  if (!v52)
    goto LABEL_148;
  v53 = __dynamic_cast(v52, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5E80, 0);
  if (!v53)
    goto LABEL_148;
  v54 = (uint64_t)v53;
  sub_20AEC01D0(a1, (uint64_t)"Camera{Type: ", 13);
  sub_20AEC01D0(a1, (uint64_t)"Center", 6);
  sub_20AEC01D0(a1, (uint64_t)"Heikkila", 8);
  v76 = 11;
  v83 = 0;
  sub_20AF5A35C((uint64_t)v85, (uint64_t)__p, &v76);
  if (v83 == -1)
    sub_20AECFAB8();
  v85[0] = &v84;
  ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C41D8C8[v83])(&v77, v85, __p);
  if (v83 != -1)
    ((void (*)(_QWORD *, void **))off_24C41D850[v83])(v85, __p);
  if ((v79 & 0x80u) == 0)
    v55 = (unsigned __int8 *)&v77;
  else
    v55 = (unsigned __int8 *)v77;
  if ((v79 & 0x80u) == 0)
    v56 = v79;
  else
    v56 = v78;
  sub_20B52B794(v55, v56, &v80);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v57 = &v80;
  else
    v57 = (std::string *)v80.__r_.__value_.__r.__words[0];
  v58 = v57->__r_.__value_.__s.__data_[0];
  v82 = 1;
  LOWORD(__p[0]) = v58;
  sub_20AEC01D0(a1, (uint64_t)__p, 1);
  if (v82 < 0)
    operator delete(__p[0]);
  sub_20AEC01D0(a1, (uint64_t)",", 1);
  sub_20B4473A0(a1, v54);
  sub_20AEC01D0(a1, (uint64_t)"}", 1);
LABEL_48:
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v80.__r_.__value_.__l.__data_);
    if ((char)v79 < 0)
LABEL_82:
      operator delete(v77);
  }
  else if ((char)v79 < 0)
  {
    goto LABEL_82;
  }
  return a1;
}

void sub_20B449E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t sub_20B44A01C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

BOOL *sub_20B44A02C(BOOL *result, uint64_t a2, uint64_t a3, char a4)
{
  BOOL *v5;
  const void *v6;
  BOOL v8;
  __int128 *v9;

  if (a4)
  {
    v5 = result;
    v6 = *(const void **)(a2 + 8);
    if (!v6
      || (result = (BOOL *)__dynamic_cast(v6, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5EB0, 0)) == 0)
    {
      v9 = sub_20AF5BCF4();
      sub_20B449200(a2, (const char *)v9, (uint64_t)"trying to cast camera");
    }
    v8 = *(double *)(a3 + 16) == *((double *)result + 2)
      && *(double *)(a3 + 24) == *((double *)result + 3)
      && *(double *)(a3 + 32) == *((double *)result + 4)
      && *(double *)(a3 + 40) == *((double *)result + 5)
      && *(double *)(a3 + 48) == *((double *)result + 6)
      && *(double *)(a3 + 56) == *((double *)result + 7)
      && *(double *)(a3 + 64) == *((double *)result + 8)
      && *(double *)(a3 + 72) == *((double *)result + 9)
      && *(double *)(a3 + 80) == *((double *)result + 10)
      && *(double *)(a3 + 88) == *((double *)result + 11)
      && *(_DWORD *)(a3 + 96) == *((_DWORD *)result + 24)
      && *(_DWORD *)(a3 + 216) == *((_DWORD *)result + 54)
      && *(_DWORD *)(a3 + 220) == *((_DWORD *)result + 55);
    *v5 = v8;
  }
  return result;
}

unint64_t sub_20B44A184(const void *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = (unint64_t)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5EB0, 0);
  v2 = v1 & 0xFFFFFFFFFFFFFF00;
  v3 = v1;
  if (!v1)
  {
    v2 = 0;
    v3 = 0;
  }
  return v3 | v2;
}

BOOL *sub_20B44A1DC(BOOL *result, uint64_t a2, uint64_t a3, char a4)
{
  BOOL *v5;
  const void *v6;
  BOOL v8;
  __int128 *v9;

  if (a4)
  {
    v5 = result;
    v6 = *(const void **)(a2 + 8);
    if (!v6
      || (result = (BOOL *)__dynamic_cast(v6, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5EE0, 0)) == 0)
    {
      v9 = sub_20AF59324();
      sub_20B449200(a2, (const char *)v9, (uint64_t)"trying to cast camera");
    }
    v8 = *(float *)(a3 + 16) == *((float *)result + 4)
      && *(float *)(a3 + 20) == *((float *)result + 5)
      && *(float *)(a3 + 24) == *((float *)result + 6)
      && *(float *)(a3 + 28) == *((float *)result + 7)
      && *(float *)(a3 + 32) == *((float *)result + 8)
      && *(float *)(a3 + 36) == *((float *)result + 9)
      && *(float *)(a3 + 40) == *((float *)result + 10)
      && *(float *)(a3 + 44) == *((float *)result + 11)
      && *(float *)(a3 + 48) == *((float *)result + 12)
      && *(float *)(a3 + 52) == *((float *)result + 13)
      && *(_DWORD *)(a3 + 56) == *((_DWORD *)result + 14)
      && *(_DWORD *)(a3 + 120) == *((_DWORD *)result + 30)
      && *(_DWORD *)(a3 + 124) == *((_DWORD *)result + 31);
    *v5 = v8;
  }
  return result;
}

unint64_t sub_20B44A334(const void *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = (unint64_t)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5EE0, 0);
  v2 = v1 & 0xFFFFFFFFFFFFFF00;
  v3 = v1;
  if (!v1)
  {
    v2 = 0;
    v3 = 0;
  }
  return v3 | v2;
}

BOOL *sub_20B44A38C(BOOL *result, uint64_t a2, uint64_t a3, char a4)
{
  BOOL *v5;
  const void *v6;
  BOOL v8;
  __int128 *v9;

  if (a4)
  {
    v5 = result;
    v6 = *(const void **)(a2 + 8);
    if (!v6
      || (result = (BOOL *)__dynamic_cast(v6, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5F10, 0)) == 0)
    {
      v9 = sub_20AF5B7BC();
      sub_20B449200(a2, (const char *)v9, (uint64_t)"trying to cast camera");
    }
    v8 = *(double *)(a3 + 16) == *((double *)result + 2)
      && *(double *)(a3 + 24) == *((double *)result + 3)
      && *(double *)(a3 + 32) == *((double *)result + 4)
      && *(double *)(a3 + 40) == *((double *)result + 5)
      && *(double *)(a3 + 48) == *((double *)result + 6)
      && *(double *)(a3 + 56) == *((double *)result + 7)
      && *(double *)(a3 + 64) == *((double *)result + 8)
      && *(double *)(a3 + 72) == *((double *)result + 9)
      && *(double *)(a3 + 80) == *((double *)result + 10)
      && *(double *)(a3 + 88) == *((double *)result + 11)
      && *(_DWORD *)(a3 + 96) == *((_DWORD *)result + 24)
      && *(_DWORD *)(a3 + 216) == *((_DWORD *)result + 54)
      && *(_DWORD *)(a3 + 220) == *((_DWORD *)result + 55);
    *v5 = v8;
  }
  return result;
}

unint64_t sub_20B44A4E4(const void *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = (unint64_t)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41D910, (const struct __class_type_info *)&unk_24C3F5F10, 0);
  v2 = v1 & 0xFFFFFFFFFFFFFF00;
  v3 = v1;
  if (!v1)
  {
    v2 = 0;
    v3 = 0;
  }
  return v3 | v2;
}

BOOL sub_20B44A53C(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  int v6;
  void **v7;
  std::string::size_type v8;
  std::string::value_type v9;
  std::string *v10;
  unsigned __int8 v11;
  char v13;
  void *v14[2];
  unsigned __int8 v15;
  std::string v16;
  void *__p[2];
  char v18;
  int v19;
  char v20;
  _QWORD v21[2];

  v3 = a3;
  if (a3)
  {
    sub_20AEC01D0(a1, (uint64_t)"Camera{Type: ", 13);
    sub_20AEC01D0(a1, (uint64_t)"Center", 6);
    sub_20AEC01D0(a1, (uint64_t)"Heikkila", 8);
    v13 = 12;
    v19 = 0;
    sub_20AF5A35C((uint64_t)v21, (uint64_t)__p, &v13);
    if (v19 == -1)
      sub_20AECFAB8();
    v21[0] = &v20;
    ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C41D8C8[v19])(v14, v21, __p);
    if (v19 != -1)
      ((void (*)(_QWORD *, void **))off_24C41D850[v19])(v21, __p);
    v6 = (char)v15;
    v7 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (std::string::size_type)v14[1];
    memset(&v16, 0, sizeof(v16));
    std::string::reserve(&v16, v8);
    if (v6 >= 0)
      v7 = v14;
    for (; v8; --v8)
    {
      v9 = __toupper(*(unsigned __int8 *)v7);
      std::string::push_back(&v16, v9);
      v7 = (void **)((char *)v7 + 1);
    }
    v10 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
    v11 = v10->__r_.__value_.__s.__data_[0];
    v18 = 1;
    LOWORD(__p[0]) = v11;
    sub_20AEC01D0(a1, (uint64_t)__p, 1);
    if (v18 < 0)
      operator delete(__p[0]);
    sub_20AEC01D0(a1, (uint64_t)",", 1);
    sub_20B4474AC(a1, a2);
    sub_20AEC01D0(a1, (uint64_t)"}", 1);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if (((char)v15 & 0x80000000) == 0)
        return v3 != 0;
    }
    else if (((char)v15 & 0x80000000) == 0)
    {
      return v3 != 0;
    }
    operator delete(v14[0]);
  }
  return v3 != 0;
}

void sub_20B44A738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20B44A7D4(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  int v6;
  void **v7;
  std::string::size_type v8;
  std::string::value_type v9;
  std::string *v10;
  unsigned __int8 v11;
  char v13;
  void *v14[2];
  unsigned __int8 v15;
  std::string v16;
  void *__p[2];
  char v18;
  int v19;
  char v20;
  _QWORD v21[2];

  v3 = a3;
  if (a3)
  {
    sub_20AEC01D0(a1, (uint64_t)"Camera{Type: ", 13);
    sub_20AEC01D0(a1, (uint64_t)"Corner", 6);
    sub_20AEC01D0(a1, (uint64_t)"Heikkila", 8);
    v13 = 11;
    v19 = 0;
    sub_20AF5A35C((uint64_t)v21, (uint64_t)__p, &v13);
    if (v19 == -1)
      sub_20AECFAB8();
    v21[0] = &v20;
    ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C41D8C8[v19])(v14, v21, __p);
    if (v19 != -1)
      ((void (*)(_QWORD *, void **))off_24C41D850[v19])(v21, __p);
    v6 = (char)v15;
    v7 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (std::string::size_type)v14[1];
    memset(&v16, 0, sizeof(v16));
    std::string::reserve(&v16, v8);
    if (v6 >= 0)
      v7 = v14;
    for (; v8; --v8)
    {
      v9 = __toupper(*(unsigned __int8 *)v7);
      std::string::push_back(&v16, v9);
      v7 = (void **)((char *)v7 + 1);
    }
    v10 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
    v11 = v10->__r_.__value_.__s.__data_[0];
    v18 = 1;
    LOWORD(__p[0]) = v11;
    sub_20AEC01D0(a1, (uint64_t)__p, 1);
    if (v18 < 0)
      operator delete(__p[0]);
    sub_20AEC01D0(a1, (uint64_t)",", 1);
    sub_20B4473A0(a1, a2);
    sub_20AEC01D0(a1, (uint64_t)"}", 1);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if (((char)v15 & 0x80000000) == 0)
        return v3 != 0;
    }
    else if (((char)v15 & 0x80000000) == 0)
    {
      return v3 != 0;
    }
    operator delete(v14[0]);
  }
  return v3 != 0;
}

void sub_20B44A9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20B44AA6C(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  int v6;
  void **v7;
  std::string::size_type v8;
  std::string::value_type v9;
  std::string *v10;
  unsigned __int8 v11;
  char v13;
  void *v14[2];
  unsigned __int8 v15;
  std::string v16;
  void *__p[2];
  char v18;
  int v19;
  char v20;
  _QWORD v21[2];

  v3 = a3;
  if (a3)
  {
    sub_20AEC01D0(a1, (uint64_t)"Camera{Type: ", 13);
    sub_20AEC01D0(a1, (uint64_t)"Corner", 6);
    sub_20AEC01D0(a1, (uint64_t)"Heikkila", 8);
    v13 = 12;
    v19 = 0;
    sub_20AF5A35C((uint64_t)v21, (uint64_t)__p, &v13);
    if (v19 == -1)
      sub_20AECFAB8();
    v21[0] = &v20;
    ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C41D8C8[v19])(v14, v21, __p);
    if (v19 != -1)
      ((void (*)(_QWORD *, void **))off_24C41D850[v19])(v21, __p);
    v6 = (char)v15;
    v7 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (std::string::size_type)v14[1];
    memset(&v16, 0, sizeof(v16));
    std::string::reserve(&v16, v8);
    if (v6 >= 0)
      v7 = v14;
    for (; v8; --v8)
    {
      v9 = __toupper(*(unsigned __int8 *)v7);
      std::string::push_back(&v16, v9);
      v7 = (void **)((char *)v7 + 1);
    }
    v10 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
    v11 = v10->__r_.__value_.__s.__data_[0];
    v18 = 1;
    LOWORD(__p[0]) = v11;
    sub_20AEC01D0(a1, (uint64_t)__p, 1);
    if (v18 < 0)
      operator delete(__p[0]);
    sub_20AEC01D0(a1, (uint64_t)",", 1);
    sub_20B4474AC(a1, a2);
    sub_20AEC01D0(a1, (uint64_t)"}", 1);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if (((char)v15 & 0x80000000) == 0)
        return v3 != 0;
    }
    else if (((char)v15 & 0x80000000) == 0)
    {
      return v3 != 0;
    }
    operator delete(v14[0]);
  }
  return v3 != 0;
}

void sub_20B44AC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t sub_20B44AD04@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  char *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _QWORD v20[2];
  _QWORD v21[3];
  _QWORD v22[2];
  uint64_t v23;
  const void *v24;
  unint64_t v25;
  void *__p;
  char v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  _BYTE v31[9];

  sub_20AEC0BD8((uint64_t)v20);
  v4 = (char *)v21 + *(_QWORD *)(v21[0] - 24);
  v5 = *((_DWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 3);
  *((_QWORD *)v4 + 3) = 0;
  v31[0] = 91;
  sub_20AEC01D0(v21, (uint64_t)v31, 1);
  v7 = *a1;
  if (*a1)
  {
    v8 = 0;
    if (v6)
      v9 = (int)v6;
    else
      v9 = 4;
    do
    {
      if (a1[1])
      {
        v10 = 0;
        do
        {
          *(_QWORD *)((char *)v22 + *(_QWORD *)(v21[0] - 24)) = v9;
          std::ostream::operator<<();
          v11 = a1[1];
          if (v10 != v11 - 1)
          {
            v31[0] = 44;
            sub_20AEC01D0(v21, (uint64_t)v31, 1);
            v11 = a1[1];
          }
          ++v10;
        }
        while (v10 < v11);
        v7 = *a1;
      }
      if (v8 != v7 - 1)
      {
        sub_20AEC01D0(v21, (uint64_t)";\n ", 3);
        v7 = *a1;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  sub_20AEC01D0(v21, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)&v21[1] + *(_QWORD *)(v21[0] - 24)) = v5;
  if ((v29 & 0x10) != 0)
  {
    v13 = v28;
    if (v28 < v25)
    {
      v28 = v25;
      v13 = v25;
    }
    v14 = v24;
    v12 = v13 - (_QWORD)v24;
    if (v13 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_31;
  }
  else
  {
    if ((v29 & 8) == 0)
    {
      v12 = 0;
      a2[23] = 0;
      goto LABEL_27;
    }
    v14 = (const void *)v22[0];
    v12 = v23 - v22[0];
    if ((unint64_t)(v23 - v22[0]) >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
      sub_20AEC0138();
  }
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v17 = operator new(v15 + 1);
    *((_QWORD *)a2 + 1) = v12;
    *((_QWORD *)a2 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)a2 = v17;
    a2 = v17;
    goto LABEL_26;
  }
  a2[23] = v12;
  if (v12)
LABEL_26:
    memmove(a2, v14, v12);
LABEL_27:
  a2[v12] = 0;
  v20[0] = *MEMORY[0x24BEDB7F0];
  v18 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v21[0] = v18;
  v21[1] = MEMORY[0x24BEDB848] + 16;
  if (v27 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD35758](&v30);
}

void sub_20B44AFB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC2E08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B44AFC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC2E08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B44AFD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC2E08((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B44AFEC@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  int64_t v5;
  size_t v6;
  size_t v7;
  double v8;
  size_t v9;
  size_t v10;
  double v11;
  std::string *p_b;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  float v28;
  uint64_t v29;
  char *v30;
  __int128 *v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  char v35;
  size_t v36;
  unint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD *__dst;
  int v45;
  _QWORD v46[2];
  uint64_t v47;
  _QWORD v48[2];
  _QWORD v49[2];
  uint64_t v50;
  const void *v51;
  unint64_t v52;
  void *__p;
  char v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  void **v58;
  size_t v59;
  int64_t v60;
  std::string __b;
  std::string v62;
  __int128 v63;
  int64_t v64;

  sub_20AEC0BD8((uint64_t)v46);
  v4 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
  v45 = *((_DWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 2);
  v5 = *((_QWORD *)v4 + 3);
  if (v5)
  {
    if (v5 <= (uint64_t)(v6 + 2))
      v7 = v6 + 2;
    else
      v7 = v5;
    v8 = __exp10((double)-(uint64_t)v6);
    v9 = v7 + ~v6;
    v10 = v9 - 1;
    if (v9 - 1 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v11 = v8;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_b = (std::string *)operator new(v13 + 1);
      __b.__r_.__value_.__l.__size_ = v9 - 1;
      __b.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v9 - 1;
      p_b = &__b;
      if (v9 == 1)
      {
        LODWORD(v9) = 1;
        goto LABEL_14;
      }
    }
  }
  else
  {
    v11 = __exp10((double)-(uint64_t)v6);
    v10 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v9) = 4;
  }
  memset(p_b, 32, v10);
LABEL_14:
  p_b->__r_.__value_.__s.__data_[v10] = 0;
  v15 = std::string::append(&__b, "0 ", 2uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v6 >= 0x17)
  {
    v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v18 = v6 | 7;
    v19 = v18 + 1;
    v17 = (void **)operator new(v18 + 1);
    v59 = v6;
    v60 = v19 | 0x8000000000000000;
    v58 = v17;
    goto LABEL_21;
  }
  HIBYTE(v60) = v6;
  v17 = (void **)&v58;
  if (v6)
LABEL_21:
    memset(v17, 32, v6);
  *((_BYTE *)v17 + v6) = 0;
  if (v60 >= 0)
    v20 = (const std::string::value_type *)&v58;
  else
    v20 = (const std::string::value_type *)v58;
  if (v60 >= 0)
    v21 = HIBYTE(v60);
  else
    v21 = v59;
  v22 = std::string::append(&v62, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v64 = v22->__r_.__value_.__r.__words[2];
  v63 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_59:
    operator delete(v62.__r_.__value_.__l.__data_);
    __dst = a2;
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
LABEL_60:
    operator delete(__b.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  operator delete(v58);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_59;
LABEL_30:
  __dst = a2;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_60;
LABEL_31:
  *(_QWORD *)((char *)v49 + *(_QWORD *)(v47 - 24)) = 0;
  v62.__r_.__value_.__s.__data_[0] = 91;
  sub_20AEC01D0(&v47, (uint64_t)&v62, 1);
  v24 = *a1;
  if (!*a1)
    goto LABEL_54;
  v25 = 0;
  v26 = (int)v9 + (int)v6 + 1;
  while (2)
  {
    if (!a1[1])
      goto LABEL_52;
    v27 = 0;
    do
    {
      v28 = *(float *)(*((_QWORD *)a1 + 2) + 4 * (v25 + a1[2] * v27));
      v29 = v47;
      v30 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
      if ((v30[9] & 1) != 0)
      {
        if (v28 != 0.0)
        {
          *((_QWORD *)v30 + 3) = v26;
          *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) |= 0x400u;
          *(_QWORD *)((char *)&v48[1] + *(_QWORD *)(v29 - 24)) = (int)v6 - 3;
          std::ostream::operator<<();
          goto LABEL_49;
        }
      }
      else if (fabs(v28) >= v11)
      {
        *((_QWORD *)v30 + 3) = v26;
        *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) = *(_DWORD *)((_BYTE *)v48 + *(_QWORD *)(v29 - 24)) & 0xFFFFFEFB | 4;
        *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) |= 0x400u;
        *(_QWORD *)((char *)&v48[1] + *(_QWORD *)(v29 - 24)) = (int)v6;
        std::ostream::operator<<();
        goto LABEL_49;
      }
      if (v64 >= 0)
        v31 = &v63;
      else
        v31 = (__int128 *)v63;
      if (v64 >= 0)
        v32 = HIBYTE(v64);
      else
        v32 = *((_QWORD *)&v63 + 1);
      sub_20AEC01D0(&v47, (uint64_t)v31, v32);
LABEL_49:
      v33 = a1[1];
      if (v27 != v33 - 1)
      {
        v62.__r_.__value_.__s.__data_[0] = 44;
        sub_20AEC01D0(&v47, (uint64_t)&v62, 1);
        v33 = a1[1];
      }
      ++v27;
    }
    while (v27 < v33);
    v24 = *a1;
LABEL_52:
    if (v25 != v24 - 1)
    {
      sub_20AEC01D0(&v47, (uint64_t)";\n ", 3);
      v24 = *a1;
    }
    if (++v25 < v24)
      continue;
    break;
  }
LABEL_54:
  sub_20AEC01D0(&v47, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)v48 + *(_QWORD *)(v47 - 24)) = v45;
  v34 = __dst;
  if (SHIBYTE(v64) < 0)
  {
    operator delete((void *)v63);
    v35 = v56;
    if ((v56 & 0x10) != 0)
      goto LABEL_62;
LABEL_56:
    if ((v35 & 8) == 0)
    {
      v36 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_72;
    }
    v38 = (const void *)v49[0];
    v36 = v50 - v49[0];
    if ((unint64_t)(v50 - v49[0]) <= 0x7FFFFFFFFFFFFFF7)
      goto LABEL_65;
LABEL_76:
    sub_20AEC0138();
  }
  v35 = v56;
  if ((v56 & 0x10) == 0)
    goto LABEL_56;
LABEL_62:
  v37 = v55;
  if (v55 < v52)
  {
    v55 = v52;
    v37 = v52;
  }
  v38 = v51;
  v36 = v37 - (_QWORD)v51;
  if (v37 - (unint64_t)v51 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_76;
LABEL_65:
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v41 = operator new(v39 + 1);
    __dst[1] = v36;
    __dst[2] = v40 | 0x8000000000000000;
    *__dst = v41;
    v34 = v41;
    goto LABEL_71;
  }
  *((_BYTE *)__dst + 23) = v36;
  if (v36)
LABEL_71:
    memmove(v34, v38, v36);
LABEL_72:
  *((_BYTE *)v34 + v36) = 0;
  v46[0] = *MEMORY[0x24BEDB7F0];
  v42 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v47 = v42;
  v48[0] = MEMORY[0x24BEDB848] + 16;
  if (v54 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD35758](&v57);
}

void sub_20B44B574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 - 121) < 0)
    operator delete(*(void **)(v4 - 144));
  sub_20AEC2E08((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B44B638@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  int64_t v5;
  size_t v6;
  size_t v7;
  double v8;
  size_t v9;
  size_t v10;
  double v11;
  std::string *p_b;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  double v28;
  uint64_t v29;
  char *v30;
  __int128 *v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  char v35;
  size_t v36;
  unint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD *__dst;
  int v45;
  _QWORD v46[2];
  uint64_t v47;
  _QWORD v48[2];
  _QWORD v49[2];
  uint64_t v50;
  const void *v51;
  unint64_t v52;
  void *__p;
  char v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  void **v58;
  size_t v59;
  int64_t v60;
  std::string __b;
  std::string v62;
  __int128 v63;
  int64_t v64;

  sub_20AEC0BD8((uint64_t)v46);
  v4 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
  v45 = *((_DWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 2);
  v5 = *((_QWORD *)v4 + 3);
  if (v5)
  {
    if (v5 <= (uint64_t)(v6 + 2))
      v7 = v6 + 2;
    else
      v7 = v5;
    v8 = __exp10((double)-(uint64_t)v6);
    v9 = v7 + ~v6;
    v10 = v9 - 1;
    if (v9 - 1 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v11 = v8;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_b = (std::string *)operator new(v13 + 1);
      __b.__r_.__value_.__l.__size_ = v9 - 1;
      __b.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v9 - 1;
      p_b = &__b;
      if (v9 == 1)
      {
        LODWORD(v9) = 1;
        goto LABEL_14;
      }
    }
  }
  else
  {
    v11 = __exp10((double)-(uint64_t)v6);
    v10 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v9) = 4;
  }
  memset(p_b, 32, v10);
LABEL_14:
  p_b->__r_.__value_.__s.__data_[v10] = 0;
  v15 = std::string::append(&__b, "0 ", 2uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v6 >= 0x17)
  {
    v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v18 = v6 | 7;
    v19 = v18 + 1;
    v17 = (void **)operator new(v18 + 1);
    v59 = v6;
    v60 = v19 | 0x8000000000000000;
    v58 = v17;
    goto LABEL_21;
  }
  HIBYTE(v60) = v6;
  v17 = (void **)&v58;
  if (v6)
LABEL_21:
    memset(v17, 32, v6);
  *((_BYTE *)v17 + v6) = 0;
  if (v60 >= 0)
    v20 = (const std::string::value_type *)&v58;
  else
    v20 = (const std::string::value_type *)v58;
  if (v60 >= 0)
    v21 = HIBYTE(v60);
  else
    v21 = v59;
  v22 = std::string::append(&v62, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v64 = v22->__r_.__value_.__r.__words[2];
  v63 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_59:
    operator delete(v62.__r_.__value_.__l.__data_);
    __dst = a2;
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
LABEL_60:
    operator delete(__b.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  operator delete(v58);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_59;
LABEL_30:
  __dst = a2;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_60;
LABEL_31:
  *(_QWORD *)((char *)v49 + *(_QWORD *)(v47 - 24)) = 0;
  v62.__r_.__value_.__s.__data_[0] = 91;
  sub_20AEC01D0(&v47, (uint64_t)&v62, 1);
  v24 = *a1;
  if (!*a1)
    goto LABEL_54;
  v25 = 0;
  v26 = (int)v9 + (int)v6 + 1;
  while (2)
  {
    if (!a1[1])
      goto LABEL_52;
    v27 = 0;
    do
    {
      v28 = *(double *)(*((_QWORD *)a1 + 2) + 8 * (v25 + a1[2] * v27));
      v29 = v47;
      v30 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
      if ((v30[9] & 1) != 0)
      {
        if (v28 != 0.0)
        {
          *((_QWORD *)v30 + 3) = v26;
          *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) |= 0x400u;
          *(_QWORD *)((char *)&v48[1] + *(_QWORD *)(v29 - 24)) = (int)v6 - 3;
          std::ostream::operator<<();
          goto LABEL_49;
        }
      }
      else if (fabs(v28) >= v11)
      {
        *((_QWORD *)v30 + 3) = v26;
        *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) = *(_DWORD *)((_BYTE *)v48 + *(_QWORD *)(v29 - 24)) & 0xFFFFFEFB | 4;
        *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) |= 0x400u;
        *(_QWORD *)((char *)&v48[1] + *(_QWORD *)(v29 - 24)) = (int)v6;
        std::ostream::operator<<();
        goto LABEL_49;
      }
      if (v64 >= 0)
        v31 = &v63;
      else
        v31 = (__int128 *)v63;
      if (v64 >= 0)
        v32 = HIBYTE(v64);
      else
        v32 = *((_QWORD *)&v63 + 1);
      sub_20AEC01D0(&v47, (uint64_t)v31, v32);
LABEL_49:
      v33 = a1[1];
      if (v27 != v33 - 1)
      {
        v62.__r_.__value_.__s.__data_[0] = 44;
        sub_20AEC01D0(&v47, (uint64_t)&v62, 1);
        v33 = a1[1];
      }
      ++v27;
    }
    while (v27 < v33);
    v24 = *a1;
LABEL_52:
    if (v25 != v24 - 1)
    {
      sub_20AEC01D0(&v47, (uint64_t)";\n ", 3);
      v24 = *a1;
    }
    if (++v25 < v24)
      continue;
    break;
  }
LABEL_54:
  sub_20AEC01D0(&v47, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)v48 + *(_QWORD *)(v47 - 24)) = v45;
  v34 = __dst;
  if (SHIBYTE(v64) < 0)
  {
    operator delete((void *)v63);
    v35 = v56;
    if ((v56 & 0x10) != 0)
      goto LABEL_62;
LABEL_56:
    if ((v35 & 8) == 0)
    {
      v36 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_72;
    }
    v38 = (const void *)v49[0];
    v36 = v50 - v49[0];
    if ((unint64_t)(v50 - v49[0]) <= 0x7FFFFFFFFFFFFFF7)
      goto LABEL_65;
LABEL_76:
    sub_20AEC0138();
  }
  v35 = v56;
  if ((v56 & 0x10) == 0)
    goto LABEL_56;
LABEL_62:
  v37 = v55;
  if (v55 < v52)
  {
    v55 = v52;
    v37 = v52;
  }
  v38 = v51;
  v36 = v37 - (_QWORD)v51;
  if (v37 - (unint64_t)v51 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_76;
LABEL_65:
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v41 = operator new(v39 + 1);
    __dst[1] = v36;
    __dst[2] = v40 | 0x8000000000000000;
    *__dst = v41;
    v34 = v41;
    goto LABEL_71;
  }
  *((_BYTE *)__dst + 23) = v36;
  if (v36)
LABEL_71:
    memmove(v34, v38, v36);
LABEL_72:
  *((_BYTE *)v34 + v36) = 0;
  v46[0] = *MEMORY[0x24BEDB7F0];
  v42 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v47 = v42;
  v48[0] = MEMORY[0x24BEDB848] + 16;
  if (v54 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD35758](&v57);
}

void sub_20B44BBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 - 121) < 0)
    operator delete(*(void **)(v4 - 144));
  sub_20AEC2E08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B44BC80(uint64_t a1, uint64_t a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  const void **v12;
  const void **v13;
  int data_low;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  CFTypeID TypeID;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  CFTypeRef v25;
  CFTypeID v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  const void *v32;
  CFTypeRef v33;
  CFTypeID v34;
  _BOOL8 v35;
  CFTypeRef v36;
  CFTypeID v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  const __CFArray *v43;
  std::string *v44;
  uint64_t **v45;
  int v46;
  uint64_t v47;
  __int128 v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t **v58;
  int v59;
  uint64_t v60;
  CFIndex Count;
  CFIndex i;
  uint64_t **v63;
  const void *ValueAtIndex;
  std::string::size_type v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  CFNumberRef *v77;
  std::string::size_type v78;
  uint64_t **v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t **v83;
  int v84;
  uint64_t v85;
  unint64_t *v86;
  std::string::size_type v87;
  std::string::size_type v88;
  std::string::size_type v89;
  std::string::size_type v90;
  std::string::size_type v91;
  std::string::size_type v92;
  std::string::size_type v93;
  std::string::size_type v94;
  std::string::size_type v95;
  int v96;
  std::string::size_type v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  std::logic_error *exception;
  CFTypeID v131;
  CFTypeRef cf;
  std::__shared_weak_count *v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  std::string theArray;
  _BYTE v159[8];
  uint64_t *v160;
  char v161;
  uint64_t *v162;
  char v163;
  uint64_t *v164;
  __int128 v165;
  CFIndex v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  std::string v170;
  char v171;
  char v172;

  sub_20B4EFA6C(a2, (uint64_t)&v146);
  v140 = v146;
  v141 = v147;
  v142 = v148;
  v143 = v149;
  if (v149)
  {
    p_shared_owners = (unint64_t *)&v149->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v144 = v150;
  v145 = v151;
  if (v151)
  {
    v5 = (unint64_t *)&v151->__shared_owners_;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v134 = v152;
  v135 = v153;
  v136 = v154;
  v137 = v155;
  if (v155)
  {
    v7 = (unint64_t *)&v155->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v138 = v156;
  v139 = v157;
  if (v157)
  {
    v9 = (unint64_t *)&v157->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  while (1)
  {
    if ((_QWORD)v140)
      v11 = (_QWORD)v134 == 0;
    else
      v11 = 1;
    if (v11)
    {
      if (((_QWORD)v140 != 0) != ((_QWORD)v134 == 0))
        break;
      goto LABEL_23;
    }
    if (*((_QWORD *)&v140 + 1) == *((_QWORD *)&v134 + 1))
      break;
LABEL_23:
    v12 = (const void **)sub_20B4EF7CC((uint64_t)&v140);
    sub_20B161578(&cf, (uint64_t)(v12 + 3));
    v13 = (const void **)sub_20B161578(&v168, (uint64_t)&cf);
    sub_20B44F790(v13, (uint64_t)&v170);
    if (!v172)
    {
      v129 = sub_20B0B52D8((uint64_t)&v170);
      sub_20B0BFB50(v129);
    }
    data_low = LOWORD(v170.__r_.__value_.__l.__data_);
    v15 = v169;
    if (v169)
    {
      v16 = (unint64_t *)&v169->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    switch(data_low)
    {
      case 0:
        v18 = cf;
        if (cf && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v18) == TypeID))
        {
          sub_20B15B25C(&theArray, cf);
          v165 = *(_OWORD *)&theArray.__r_.__value_.__l.__data_;
          if (theArray.__r_.__value_.__l.__size_)
          {
            v20 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
            size = (std::__shared_weak_count *)theArray.__r_.__value_.__l.__size_;
            if (theArray.__r_.__value_.__l.__size_)
            {
              v23 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
          }
        }
        else
        {
          v165 = 0uLL;
        }
        v77 = (CFNumberRef *)sub_20B15B3A0(&v166, (uint64_t)&v165);
        sub_20B4F5FA8(v77);
        switch(v170.__r_.__value_.__s.__data_[0])
        {
          case 0:
            v78 = *(unsigned __int8 *)sub_20B522A74((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 6;
            theArray.__r_.__value_.__l.__size_ = v78;
            v79 = sub_20B451C6C(a1, v12);
            break;
          case 1:
            v90 = *(unsigned __int16 *)sub_20B522CCC((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 6;
            theArray.__r_.__value_.__l.__size_ = v90;
            v79 = sub_20B451C6C(a1, v12);
            break;
          case 2:
            v92 = *(unsigned int *)sub_20B522DB4((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 6;
            theArray.__r_.__value_.__l.__size_ = v92;
            v79 = sub_20B451C6C(a1, v12);
            break;
          case 3:
            v94 = *(_QWORD *)sub_20B522E9C((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 6;
            theArray.__r_.__value_.__l.__size_ = v94;
            v79 = sub_20B451C6C(a1, v12);
            break;
          case 5:
            v89 = *(char *)sub_20B522F84((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 5;
            theArray.__r_.__value_.__l.__size_ = v89;
            v79 = sub_20B451C6C(a1, v12);
            break;
          case 6:
            v91 = *(__int16 *)sub_20B52306C((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 5;
            theArray.__r_.__value_.__l.__size_ = v91;
            v79 = sub_20B451C6C(a1, v12);
            break;
          case 7:
            v95 = *(int *)sub_20B523154((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 5;
            theArray.__r_.__value_.__l.__size_ = v95;
            v79 = sub_20B451C6C(a1, v12);
            break;
          case 8:
            v93 = *(_QWORD *)sub_20B52323C((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 5;
            theArray.__r_.__value_.__l.__size_ = v93;
            v79 = sub_20B451C6C(a1, v12);
            break;
          case 0xB:
            *(double *)&v88 = *(float *)sub_20B523324((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 7;
            theArray.__r_.__value_.__l.__size_ = v88;
            v79 = sub_20B451C6C(a1, v12);
            break;
          case 0xC:
            v87 = *(_QWORD *)sub_20B52340C((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 7;
            theArray.__r_.__value_.__l.__size_ = v87;
            v79 = sub_20B451C6C(a1, v12);
            break;
          default:
            sub_20B521E58(v170.__r_.__value_.__s.__data_[0]);
        }
        v96 = *(unsigned __int8 *)v79;
        *(_BYTE *)v79 = theArray.__r_.__value_.__s.__data_[0];
        theArray.__r_.__value_.__s.__data_[0] = v96;
        v97 = (std::string::size_type)v79[1];
        v79[1] = (uint64_t *)theArray.__r_.__value_.__l.__size_;
        theArray.__r_.__value_.__l.__size_ = v97;
        sub_20B416E08((uint64_t *)&theArray.__r_.__value_.__l.__size_, v96);
        if (v170.__r_.__value_.__l.__size_)
        {
          v170.__r_.__value_.__r.__words[2] = v170.__r_.__value_.__l.__size_;
          operator delete((void *)v170.__r_.__value_.__l.__size_);
        }
        v98 = v167;
        if (!v167)
          goto LABEL_136;
        v99 = (unint64_t *)&v167->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
          v74 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
          if (!*((_QWORD *)&v165 + 1))
            goto LABEL_141;
        }
        else
        {
LABEL_136:
          v74 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
          if (!*((_QWORD *)&v165 + 1))
            goto LABEL_141;
        }
        v101 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldaxr(v101);
        while (__stlxr(v76 - 1, v101));
LABEL_139:
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
LABEL_141:
        v102 = v133;
        if (!v133)
          goto LABEL_145;
        v103 = (unint64_t *)&v133->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
          ++*((_QWORD *)&v140 + 1);
          if (*((uint64_t *)&v140 + 1) >= v141)
          {
LABEL_14:
            *(_QWORD *)&v140 = 0;
            continue;
          }
        }
        else
        {
LABEL_145:
          ++*((_QWORD *)&v140 + 1);
          if (*((uint64_t *)&v140 + 1) >= v141)
            goto LABEL_14;
        }
        break;
      case 1:
        sub_20B4EE3FC((CFIndex)cf, &v170);
        v164 = 0;
        v163 = 3;
        v44 = (std::string *)operator new(0x18uLL);
        *v44 = v170;
        memset(&v170, 0, sizeof(v170));
        v164 = (uint64_t *)v44;
        v45 = sub_20B451C6C(a1, v12);
        v46 = *(unsigned __int8 *)v45;
        *(_BYTE *)v45 = v163;
        v163 = v46;
        v47 = (uint64_t)v45[1];
        v45[1] = v164;
        v164 = (uint64_t *)v47;
        sub_20B416E08((uint64_t *)&v164, v46);
        if (v171 && SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v170.__r_.__value_.__l.__data_);
        goto LABEL_141;
      case 2:
        v33 = cf;
        v35 = cf && (v34 = CFBooleanGetTypeID(), CFGetTypeID(v33) == v34) && CFBooleanGetValue((CFBooleanRef)v33) != 0;
        v161 = 4;
        v162 = (uint64_t *)v35;
        v58 = sub_20B451C6C(a1, v12);
        v59 = *(unsigned __int8 *)v58;
        *(_BYTE *)v58 = v161;
        v161 = v59;
        v60 = (uint64_t)v58[1];
        v58[1] = v162;
        v162 = (uint64_t *)v60;
        sub_20B416E08((uint64_t *)&v162, v59);
        goto LABEL_141;
      case 3:
        v36 = cf;
        if (cf && (v37 = CFArrayGetTypeID(), CFGetTypeID(v36) == v37))
        {
          sub_20B15B4B0(&v170, cf);
          *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = *(_OWORD *)&v170.__r_.__value_.__l.__data_;
          if (v170.__r_.__value_.__l.__size_)
          {
            v38 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
            v40 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
            if (v170.__r_.__value_.__l.__size_)
            {
              v41 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
          }
          v43 = (const __CFArray *)theArray.__r_.__value_.__r.__words[0];
        }
        else
        {
          v43 = 0;
          *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = 0uLL;
        }
        Count = CFArrayGetCount(v43);
        if (Count)
        {
          for (i = 0; i != Count; ++i)
          {
            v63 = sub_20B451C6C(a1, v12);
            v166 = i;
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray.__r_.__value_.__l.__data_, i);
            v65 = (std::string::size_type)ValueAtIndex;
            if (ValueAtIndex)
              CFRetain(ValueAtIndex);
            v66 = (std::__shared_weak_count *)operator new();
            v67 = v66;
            v66->__shared_owners_ = 0;
            v68 = (unint64_t *)&v66->__shared_owners_;
            v66->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40FAB8;
            v66->__shared_weak_owners_ = 0;
            v66[1].__vftable = (std::__shared_weak_count_vtbl *)v65;
            v170.__r_.__value_.__r.__words[0] = v65;
            v170.__r_.__value_.__l.__size_ = (std::string::size_type)v66;
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
            do
              v70 = __ldaxr(v68);
            while (__stlxr(v70 - 1, v68));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v67);
            }
            sub_20B451DC0((uint64_t)v63, (unint64_t *)&v166, (CFTypeRef *)&v170.__r_.__value_.__l.__data_);
            v71 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
            if (v170.__r_.__value_.__l.__size_)
            {
              v72 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
          }
        }
        v74 = (std::__shared_weak_count *)theArray.__r_.__value_.__l.__size_;
        if (!theArray.__r_.__value_.__l.__size_)
          goto LABEL_141;
        v75 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        goto LABEL_139;
      case 4:
        v25 = cf;
        if (cf && (v26 = CFDictionaryGetTypeID(), CFGetTypeID(v25) == v26))
        {
          sub_20AEEC3E8(&v170, cf);
          *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = *(_OWORD *)&v170.__r_.__value_.__l.__data_;
          if (v170.__r_.__value_.__l.__size_)
          {
            v27 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
            v29 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
            if (v170.__r_.__value_.__l.__size_)
            {
              v30 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
          }
          v32 = (const void *)theArray.__r_.__value_.__r.__words[0];
        }
        else
        {
          v32 = 0;
          *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = 0uLL;
        }
        v159[0] = 0;
        v160 = 0;
        sub_20AEEC3E8(&v170, v32);
        v48 = *(_OWORD *)&v170.__r_.__value_.__l.__data_;
        if (v170.__r_.__value_.__l.__size_)
        {
          v49 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
          v51 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
          if (v170.__r_.__value_.__l.__size_)
          {
            v52 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          do
            v54 = __ldxr(v49);
          while (__stxr(v54 + 1, v49));
          *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v48;
          do
            v55 = __ldxr(v49);
          while (__stxr(v55 + 1, v49));
          do
            v56 = __ldaxr(v49);
          while (__stlxr(v56 - 1, v49));
          if (!v56)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v48 + 1) + 16))(*((_QWORD *)&v48 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v48 + 1));
          }
          do
            v57 = __ldaxr(v49);
          while (__stlxr(v57 - 1, v49));
          if (!v57)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v48 + 1) + 16))(*((_QWORD *)&v48 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v48 + 1));
          }
        }
        else
        {
          *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v170.__r_.__value_.__r.__words[0];
        }
        sub_20B44BC80(v159, &v170);
        v80 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
        if (v170.__r_.__value_.__l.__size_)
        {
          v81 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        v83 = sub_20B451C6C(a1, v12);
        v84 = *(unsigned __int8 *)v83;
        *(_BYTE *)v83 = v159[0];
        v159[0] = v84;
        v85 = (uint64_t)v83[1];
        v83[1] = v160;
        v160 = (uint64_t *)v85;
        sub_20B416E08((uint64_t *)&v160, v84);
        v74 = (std::__shared_weak_count *)theArray.__r_.__value_.__l.__size_;
        if (!theArray.__r_.__value_.__l.__size_)
          goto LABEL_141;
        v86 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
        do
          v76 = __ldaxr(v86);
        while (__stlxr(v76 - 1, v86));
        goto LABEL_139;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        v131 = CFGetTypeID(cf);
        sub_20B4F6600(v131, &theArray);
        sub_20B1F16DC("Dictionary to convert to json must only contain Number, String, Bool, Array or Dictionary, but has ", &theArray, &v170);
        std::logic_error::logic_error(exception, &v170);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
  }
  v105 = v139;
  if (v139)
  {
    v106 = (unint64_t *)&v139->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v137;
  if (v137)
  {
    v109 = (unint64_t *)&v137->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v145;
  if (v145)
  {
    v112 = (unint64_t *)&v145->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v143;
  if (v143)
  {
    v115 = (unint64_t *)&v143->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v157;
  if (v157)
  {
    v118 = (unint64_t *)&v157->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v155;
  if (v155)
  {
    v121 = (unint64_t *)&v155->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v151;
  if (v151)
  {
    v124 = (unint64_t *)&v151->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v149;
  if (v149)
  {
    v127 = (unint64_t *)&v149->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
}

void sub_20B44CABC()
{
  __cxa_end_catch();
  JUMPOUT(0x20B44CAD4);
}

void sub_20B44CACC(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_20AEC147C(&v6);
  sub_20AEC147C(&v2);
  sub_20B44CB04(&v3);
  sub_20B44CB04(&v4);
  sub_20B44CBB0(&v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20B44CB04(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 32);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *sub_20B44CBB0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (std::__shared_weak_count *)a1[13];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[6];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[4];
      if (v11)
        goto LABEL_16;
      return a1;
    }
  }
  v11 = (std::__shared_weak_count *)a1[4];
  if (!v11)
    return a1;
LABEL_16:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_20B44CCD8(uint64_t a1, uint64_t a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  const void **v13;
  int data_low;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  CFTypeID TypeID;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  CFTypeRef v25;
  CFTypeID v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  const void *v32;
  const __CFBoolean *v33;
  CFTypeID v34;
  void **v35;
  CFTypeRef v36;
  CFTypeID v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  const __CFArray *v43;
  void **v44;
  char *v45;
  int v46;
  void **v47;
  __int128 v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  int v59;
  void **v60;
  CFIndex Count;
  CFIndex i;
  char *v63;
  const void *ValueAtIndex;
  std::string::size_type v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  CFNumberRef *v77;
  std::string::size_type v78;
  char *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  char *v83;
  int v84;
  void **v85;
  unint64_t *v86;
  std::string::size_type v87;
  std::string::size_type v88;
  std::string::size_type v89;
  std::string::size_type v90;
  std::string::size_type v91;
  std::string::size_type v92;
  std::string::size_type v93;
  std::string::size_type v94;
  std::string::size_type v95;
  int v96;
  std::string::size_type v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  std::logic_error *exception;
  CFTypeID v131;
  CFTypeRef cf;
  std::__shared_weak_count *v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  std::string theArray;
  char v159[8];
  void **v160;
  char v161;
  void **v162;
  char v163;
  void **v164;
  __int128 v165;
  CFIndex v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  std::string v170;
  char v171;
  char v172;

  sub_20B4EFA6C(a2, (uint64_t)&v146);
  v140 = v146;
  v141 = v147;
  v142 = v148;
  v143 = v149;
  if (v149)
  {
    p_shared_owners = (unint64_t *)&v149->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v144 = v150;
  v145 = v151;
  if (v151)
  {
    v5 = (unint64_t *)&v151->__shared_owners_;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v134 = v152;
  v135 = v153;
  v136 = v154;
  v137 = v155;
  if (v155)
  {
    v7 = (unint64_t *)&v155->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v138 = v156;
  v139 = v157;
  if (v157)
  {
    v9 = (unint64_t *)&v157->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  while (1)
  {
    if ((_QWORD)v140)
      v11 = (_QWORD)v134 == 0;
    else
      v11 = 1;
    if (v11)
    {
      if (((_QWORD)v140 != 0) != ((_QWORD)v134 == 0))
        break;
      goto LABEL_23;
    }
    if (*((_QWORD *)&v140 + 1) == *((_QWORD *)&v134 + 1))
      break;
LABEL_23:
    v12 = sub_20B4EF7CC((uint64_t)&v140);
    sub_20B161578(&cf, v12 + 24);
    v13 = (const void **)sub_20B161578(&v168, (uint64_t)&cf);
    sub_20B44F790(v13, (uint64_t)&v170);
    if (!v172)
    {
      v129 = sub_20B0B52D8((uint64_t)&v170);
      sub_20B0BFB50(v129);
    }
    data_low = LOWORD(v170.__r_.__value_.__l.__data_);
    v15 = v169;
    if (v169)
    {
      v16 = (unint64_t *)&v169->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    switch(data_low)
    {
      case 0:
        v18 = cf;
        if (cf && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v18) == TypeID))
        {
          sub_20B15B25C(&theArray, cf);
          v165 = *(_OWORD *)&theArray.__r_.__value_.__l.__data_;
          if (theArray.__r_.__value_.__l.__size_)
          {
            v20 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
            size = (std::__shared_weak_count *)theArray.__r_.__value_.__l.__size_;
            if (theArray.__r_.__value_.__l.__size_)
            {
              v23 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
          }
        }
        else
        {
          v165 = 0uLL;
        }
        v77 = (CFNumberRef *)sub_20B15B3A0(&v166, (uint64_t)&v165);
        sub_20B4F5FA8(v77);
        switch(v170.__r_.__value_.__s.__data_[0])
        {
          case 0:
            v78 = *(unsigned __int8 *)sub_20B522A74((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 6;
            theArray.__r_.__value_.__l.__size_ = v78;
            v79 = sub_20B45315C(a1, v12);
            break;
          case 1:
            v90 = *(unsigned __int16 *)sub_20B522CCC((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 6;
            theArray.__r_.__value_.__l.__size_ = v90;
            v79 = sub_20B45315C(a1, v12);
            break;
          case 2:
            v92 = *(unsigned int *)sub_20B522DB4((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 6;
            theArray.__r_.__value_.__l.__size_ = v92;
            v79 = sub_20B45315C(a1, v12);
            break;
          case 3:
            v94 = *(_QWORD *)sub_20B522E9C((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 6;
            theArray.__r_.__value_.__l.__size_ = v94;
            v79 = sub_20B45315C(a1, v12);
            break;
          case 5:
            v89 = *(char *)sub_20B522F84((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 5;
            theArray.__r_.__value_.__l.__size_ = v89;
            v79 = sub_20B45315C(a1, v12);
            break;
          case 6:
            v91 = *(__int16 *)sub_20B52306C((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 5;
            theArray.__r_.__value_.__l.__size_ = v91;
            v79 = sub_20B45315C(a1, v12);
            break;
          case 7:
            v95 = *(int *)sub_20B523154((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 5;
            theArray.__r_.__value_.__l.__size_ = v95;
            v79 = sub_20B45315C(a1, v12);
            break;
          case 8:
            v93 = *(_QWORD *)sub_20B52323C((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 5;
            theArray.__r_.__value_.__l.__size_ = v93;
            v79 = sub_20B45315C(a1, v12);
            break;
          case 0xB:
            *(double *)&v88 = *(float *)sub_20B523324((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 7;
            theArray.__r_.__value_.__l.__size_ = v88;
            v79 = sub_20B45315C(a1, v12);
            break;
          case 0xC:
            v87 = *(_QWORD *)sub_20B52340C((uint64_t)&v170);
            theArray.__r_.__value_.__s.__data_[0] = 7;
            theArray.__r_.__value_.__l.__size_ = v87;
            v79 = sub_20B45315C(a1, v12);
            break;
          default:
            sub_20B521E58(v170.__r_.__value_.__s.__data_[0]);
        }
        v96 = *v79;
        *v79 = theArray.__r_.__value_.__s.__data_[0];
        theArray.__r_.__value_.__s.__data_[0] = v96;
        v97 = *((_QWORD *)v79 + 1);
        *((_QWORD *)v79 + 1) = theArray.__r_.__value_.__l.__size_;
        theArray.__r_.__value_.__l.__size_ = v97;
        sub_20B4181DC((void ***)&theArray.__r_.__value_.__l.__size_, v96);
        if (v170.__r_.__value_.__l.__size_)
        {
          v170.__r_.__value_.__r.__words[2] = v170.__r_.__value_.__l.__size_;
          operator delete((void *)v170.__r_.__value_.__l.__size_);
        }
        v98 = v167;
        if (!v167)
          goto LABEL_136;
        v99 = (unint64_t *)&v167->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
          v74 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
          if (!*((_QWORD *)&v165 + 1))
            goto LABEL_141;
        }
        else
        {
LABEL_136:
          v74 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
          if (!*((_QWORD *)&v165 + 1))
            goto LABEL_141;
        }
        v101 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldaxr(v101);
        while (__stlxr(v76 - 1, v101));
LABEL_139:
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
LABEL_141:
        v102 = v133;
        if (!v133)
          goto LABEL_145;
        v103 = (unint64_t *)&v133->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
          ++*((_QWORD *)&v140 + 1);
          if (*((uint64_t *)&v140 + 1) >= v141)
          {
LABEL_14:
            *(_QWORD *)&v140 = 0;
            continue;
          }
        }
        else
        {
LABEL_145:
          ++*((_QWORD *)&v140 + 1);
          if (*((uint64_t *)&v140 + 1) >= v141)
            goto LABEL_14;
        }
        break;
      case 1:
        sub_20B4EE3FC((CFIndex)cf, &v170);
        v164 = 0;
        v163 = 3;
        v44 = (void **)operator new(0x18uLL);
        *(std::string *)v44 = v170;
        memset(&v170, 0, sizeof(v170));
        v164 = v44;
        v45 = sub_20B45315C(a1, v12);
        v46 = *v45;
        *v45 = v163;
        v163 = v46;
        v47 = (void **)*((_QWORD *)v45 + 1);
        *((_QWORD *)v45 + 1) = v164;
        v164 = v47;
        sub_20B4181DC(&v164, v46);
        if (v171 && SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v170.__r_.__value_.__l.__data_);
        goto LABEL_141;
      case 2:
        v33 = (const __CFBoolean *)cf;
        if (cf && (v34 = CFBooleanGetTypeID(), CFGetTypeID(v33) == v34))
          v35 = (void **)(CFBooleanGetValue(v33) != 0);
        else
          v35 = 0;
        v161 = 4;
        v162 = v35;
        v58 = sub_20B45315C(a1, v12);
        v59 = *v58;
        *v58 = v161;
        v161 = v59;
        v60 = (void **)*((_QWORD *)v58 + 1);
        *((_QWORD *)v58 + 1) = v162;
        v162 = v60;
        sub_20B4181DC(&v162, v59);
        goto LABEL_141;
      case 3:
        v36 = cf;
        if (cf && (v37 = CFArrayGetTypeID(), CFGetTypeID(v36) == v37))
        {
          sub_20B15B4B0(&v170, cf);
          *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = *(_OWORD *)&v170.__r_.__value_.__l.__data_;
          if (v170.__r_.__value_.__l.__size_)
          {
            v38 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
            v40 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
            if (v170.__r_.__value_.__l.__size_)
            {
              v41 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
          }
          v43 = (const __CFArray *)theArray.__r_.__value_.__r.__words[0];
        }
        else
        {
          v43 = 0;
          *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = 0uLL;
        }
        Count = CFArrayGetCount(v43);
        if (Count)
        {
          for (i = 0; i != Count; ++i)
          {
            v63 = sub_20B45315C(a1, v12);
            v166 = i;
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray.__r_.__value_.__l.__data_, i);
            v65 = (std::string::size_type)ValueAtIndex;
            if (ValueAtIndex)
              CFRetain(ValueAtIndex);
            v66 = (std::__shared_weak_count *)operator new();
            v67 = v66;
            v66->__shared_owners_ = 0;
            v68 = (unint64_t *)&v66->__shared_owners_;
            v66->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40FAB8;
            v66->__shared_weak_owners_ = 0;
            v66[1].__vftable = (std::__shared_weak_count_vtbl *)v65;
            v170.__r_.__value_.__r.__words[0] = v65;
            v170.__r_.__value_.__l.__size_ = (std::string::size_type)v66;
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
            do
              v70 = __ldaxr(v68);
            while (__stlxr(v70 - 1, v68));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v67);
            }
            sub_20B4532E4((uint64_t)v63, (unint64_t *)&v166, (CFTypeRef *)&v170.__r_.__value_.__l.__data_);
            v71 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
            if (v170.__r_.__value_.__l.__size_)
            {
              v72 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
          }
        }
        v74 = (std::__shared_weak_count *)theArray.__r_.__value_.__l.__size_;
        if (!theArray.__r_.__value_.__l.__size_)
          goto LABEL_141;
        v75 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        goto LABEL_139;
      case 4:
        v25 = cf;
        if (cf && (v26 = CFDictionaryGetTypeID(), CFGetTypeID(v25) == v26))
        {
          sub_20AEEC3E8(&v170, cf);
          *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = *(_OWORD *)&v170.__r_.__value_.__l.__data_;
          if (v170.__r_.__value_.__l.__size_)
          {
            v27 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
            v29 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
            if (v170.__r_.__value_.__l.__size_)
            {
              v30 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
          }
          v32 = (const void *)theArray.__r_.__value_.__r.__words[0];
        }
        else
        {
          v32 = 0;
          *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = 0uLL;
        }
        v159[0] = 0;
        v160 = 0;
        sub_20AEEC3E8(&v170, v32);
        v48 = *(_OWORD *)&v170.__r_.__value_.__l.__data_;
        if (v170.__r_.__value_.__l.__size_)
        {
          v49 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
          v51 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
          if (v170.__r_.__value_.__l.__size_)
          {
            v52 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          do
            v54 = __ldxr(v49);
          while (__stxr(v54 + 1, v49));
          *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v48;
          do
            v55 = __ldxr(v49);
          while (__stxr(v55 + 1, v49));
          do
            v56 = __ldaxr(v49);
          while (__stlxr(v56 - 1, v49));
          if (!v56)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v48 + 1) + 16))(*((_QWORD *)&v48 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v48 + 1));
          }
          do
            v57 = __ldaxr(v49);
          while (__stlxr(v57 - 1, v49));
          if (!v57)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v48 + 1) + 16))(*((_QWORD *)&v48 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v48 + 1));
          }
        }
        else
        {
          *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v170.__r_.__value_.__r.__words[0];
        }
        sub_20B44CCD8(v159, &v170);
        v80 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
        if (v170.__r_.__value_.__l.__size_)
        {
          v81 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        v83 = sub_20B45315C(a1, v12);
        v84 = *v83;
        *v83 = v159[0];
        v159[0] = v84;
        v85 = (void **)*((_QWORD *)v83 + 1);
        *((_QWORD *)v83 + 1) = v160;
        v160 = v85;
        sub_20B4181DC(&v160, v84);
        v74 = (std::__shared_weak_count *)theArray.__r_.__value_.__l.__size_;
        if (!theArray.__r_.__value_.__l.__size_)
          goto LABEL_141;
        v86 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
        do
          v76 = __ldaxr(v86);
        while (__stlxr(v76 - 1, v86));
        goto LABEL_139;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        v131 = CFGetTypeID(cf);
        sub_20B4F6600(v131, &theArray);
        sub_20B1F16DC("Dictionary to convert to json must only contain Number, String, Bool, Array or Dictionary, but has ", &theArray, &v170);
        std::logic_error::logic_error(exception, &v170);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
  }
  v105 = v139;
  if (v139)
  {
    v106 = (unint64_t *)&v139->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v137;
  if (v137)
  {
    v109 = (unint64_t *)&v137->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v145;
  if (v145)
  {
    v112 = (unint64_t *)&v145->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v143;
  if (v143)
  {
    v115 = (unint64_t *)&v143->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v157;
  if (v157)
  {
    v118 = (unint64_t *)&v157->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v155;
  if (v155)
  {
    v121 = (unint64_t *)&v155->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v151;
  if (v151)
  {
    v124 = (unint64_t *)&v151->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v149;
  if (v149)
  {
    v127 = (unint64_t *)&v149->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
}

void sub_20B44DB14()
{
  __cxa_end_catch();
  JUMPOUT(0x20B44DB2CLL);
}

void sub_20B44DB24(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_20AEC147C(&v6);
  sub_20AEC147C(&v2);
  sub_20B44CB04(&v3);
  sub_20B44CB04(&v4);
  sub_20B44CBB0(&v5);
  _Unwind_Resume(a1);
}

void sub_20B44DB5C(char *a1, uint64_t a2)
{
  int v2;
  void *v5;
  _QWORD *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  _QWORD *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count_vtbl *Mutable;
  int v39;
  uint64_t v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  void *v59;
  _QWORD *v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  uint64_t i;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *__p[2];
  void *v83;
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  void *value[2];

  v2 = *a1;
  if (!*a1)
    return;
  if (v2 == 6)
  {
    value[0] = 0;
    sub_20B454B2C(a1, value);
    v5 = value[0];
    LOBYTE(__p[0]) = 3;
    v6 = operator new(8uLL);
    __p[1] = v6;
    *v6 = v5;
    v83 = v6 + 1;
    v84 = v6 + 1;
    sub_20B4F6318((uint64_t)value, (uint64_t)__p);
    v85 = *(_OWORD *)value;
    sub_20B160DC8(&v86, (uint64_t)&v85);
    v7 = v86;
    v86 = 0uLL;
    v8 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
    if (*((_QWORD *)&v86 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
    if (*((_QWORD *)&v85 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
LABEL_31:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_33;
    }
    goto LABEL_33;
  }
  if ((v2 - 5) <= 1)
  {
    value[0] = 0;
    sub_20B454C74(a1, value);
    v17 = value[0];
    LOBYTE(__p[0]) = 8;
    v18 = operator new(8uLL);
    __p[1] = v18;
    *v18 = v17;
    v83 = v18 + 1;
    v84 = v18 + 1;
    sub_20B4F6318((uint64_t)value, (uint64_t)__p);
    v85 = *(_OWORD *)value;
    sub_20B160DC8(&v86, (uint64_t)&v85);
    v19 = v86;
    v86 = 0uLL;
    v20 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v19;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
    if (*((_QWORD *)&v86 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
    if (*((_QWORD *)&v85 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v16 = __ldaxr(v26);
      while (__stlxr(v16 - 1, v26));
      goto LABEL_31;
    }
LABEL_33:
    v27 = __p[1];
    if (__p[1])
    {
      v83 = __p[1];
LABEL_35:
      operator delete(v27);
    }
    return;
  }
  switch(*a1)
  {
    case 1:
      __p[1] = 0;
      v83 = 0;
      __p[0] = &__p[1];
      sub_20B4F51B8(__p, value);
      v85 = *(_OWORD *)value;
      sub_20AEC833C((uint64_t)__p, (char *)__p[1]);
      sub_20B44ECC8(a1, &v85);
      sub_20B454A28(&v86, (const void *)v85, *((std::__shared_weak_count **)&v85 + 1));
      v28 = v86;
      v86 = 0uLL;
      v29 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v28;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (!*((_QWORD *)&v85 + 1))
        return;
      v36 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      goto LABEL_116;
    case 2:
      Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      sub_20B4EE6C8((std::__shared_weak_count_vtbl **)__p, Mutable, 0);
      v39 = *a1;
      if (!*a1)
        goto LABEL_103;
      if (v39 == 1)
      {
        v40 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
      }
      else
      {
        if (v39 != 2)
        {
          v40 = 1;
          goto LABEL_119;
        }
        v40 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
      }
      if (!v40)
        goto LABEL_103;
LABEL_119:
      for (i = 0; i != v40; ++i)
      {
        v78 = sub_20B45491C((uint64_t)a1, i);
        value[0] = 0;
        value[1] = 0;
        sub_20B44DB5C(v78, value);
        CFArrayAppendValue((CFMutableArrayRef)__p[0], value[0]);
        v79 = (std::__shared_weak_count *)value[1];
        if (value[1])
        {
          v80 = (unint64_t *)((char *)value[1] + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
      }
LABEL_103:
      sub_20B1610F8(value, (uint64_t)__p);
      v69 = *(_OWORD *)value;
      value[0] = 0;
      value[1] = 0;
      v70 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v69;
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = (std::__shared_weak_count *)value[1];
      if (value[1])
      {
        v74 = (unint64_t *)((char *)value[1] + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v35 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v76 = (unint64_t *)((char *)__p[1] + 8);
        do
          v37 = __ldaxr(v76);
        while (__stlxr(v37 - 1, v76));
LABEL_116:
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      break;
    case 3:
      __p[0] = 0;
      __p[1] = 0;
      v83 = 0;
      sub_20B45502C((void **)a1, (uint64_t)__p);
      sub_20B4EE2F0((uint64_t)__p, (CFStringRef *)&v86);
      sub_20B160ED8(value, (uint64_t)&v86);
      v41 = *(_OWORD *)value;
      value[0] = 0;
      value[1] = 0;
      v42 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v41;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = (std::__shared_weak_count *)value[1];
      if (value[1])
      {
        v46 = (unint64_t *)((char *)value[1] + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      if ((SHIBYTE(v83) & 0x80000000) == 0)
        return;
      v27 = __p[0];
      goto LABEL_35;
    case 4:
      LOBYTE(v86) = 0;
      sub_20B454F24(a1, &v86);
      LOBYTE(v85) = v86;
      sub_20B4EE200(&v85, (std::__shared_weak_count_vtbl **)value);
      sub_20B160FE8(__p, (uint64_t)value);
      v51 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v52 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v51;
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v56 = (unint64_t *)((char *)__p[1] + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v35 = (std::__shared_weak_count *)value[1];
      if (!value[1])
        return;
      v58 = (unint64_t *)((char *)value[1] + 8);
      do
        v37 = __ldaxr(v58);
      while (__stlxr(v37 - 1, v58));
      goto LABEL_116;
    case 7:
      value[0] = 0;
      sub_20B454DBC((uint64_t *)a1, (double *)value);
      v59 = value[0];
      LOBYTE(__p[0]) = 12;
      v60 = operator new(8uLL);
      __p[1] = v60;
      *v60 = v59;
      v83 = v60 + 1;
      v84 = v60 + 1;
      sub_20B4F6318((uint64_t)value, (uint64_t)__p);
      v85 = *(_OWORD *)value;
      sub_20B160DC8(&v86, (uint64_t)&v85);
      v61 = v86;
      v86 = 0uLL;
      v62 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v61;
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (!*((_QWORD *)&v85 + 1))
        goto LABEL_33;
      v68 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v16 = __ldaxr(v68);
      while (__stlxr(v16 - 1, v68));
      goto LABEL_31;
    default:
      return;
  }
}

void sub_20B44E308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B44E31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  sub_20AEC147C((uint64_t)&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B44E3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20AEC147C((uint64_t)&a17);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B44E3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B44E408(char *a1, uint64_t a2)
{
  int v2;
  void *v5;
  _QWORD *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  _QWORD *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count_vtbl *Mutable;
  int v39;
  uint64_t v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  void *v59;
  _QWORD *v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  uint64_t i;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *__p[2];
  void *v83;
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  void *value[2];

  v2 = *a1;
  if (!*a1)
    return;
  if (v2 == 6)
  {
    value[0] = 0;
    sub_20B4552C4(a1, value);
    v5 = value[0];
    LOBYTE(__p[0]) = 3;
    v6 = operator new(8uLL);
    __p[1] = v6;
    *v6 = v5;
    v83 = v6 + 1;
    v84 = v6 + 1;
    sub_20B4F6318((uint64_t)value, (uint64_t)__p);
    v85 = *(_OWORD *)value;
    sub_20B160DC8(&v86, (uint64_t)&v85);
    v7 = v86;
    v86 = 0uLL;
    v8 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
    if (*((_QWORD *)&v86 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
    if (*((_QWORD *)&v85 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
LABEL_31:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_33;
    }
    goto LABEL_33;
  }
  if ((v2 - 5) <= 1)
  {
    value[0] = 0;
    sub_20B45540C(a1, value);
    v17 = value[0];
    LOBYTE(__p[0]) = 8;
    v18 = operator new(8uLL);
    __p[1] = v18;
    *v18 = v17;
    v83 = v18 + 1;
    v84 = v18 + 1;
    sub_20B4F6318((uint64_t)value, (uint64_t)__p);
    v85 = *(_OWORD *)value;
    sub_20B160DC8(&v86, (uint64_t)&v85);
    v19 = v86;
    v86 = 0uLL;
    v20 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v19;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
    if (*((_QWORD *)&v86 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
    if (*((_QWORD *)&v85 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v16 = __ldaxr(v26);
      while (__stlxr(v16 - 1, v26));
      goto LABEL_31;
    }
LABEL_33:
    v27 = __p[1];
    if (__p[1])
    {
      v83 = __p[1];
LABEL_35:
      operator delete(v27);
    }
    return;
  }
  switch(*a1)
  {
    case 1:
      __p[1] = 0;
      v83 = 0;
      __p[0] = &__p[1];
      sub_20B4F51B8(__p, value);
      v85 = *(_OWORD *)value;
      sub_20AEC833C((uint64_t)__p, (char *)__p[1]);
      sub_20B44EED0(a1, &v85);
      sub_20B454A28(&v86, (const void *)v85, *((std::__shared_weak_count **)&v85 + 1));
      v28 = v86;
      v86 = 0uLL;
      v29 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v28;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (!*((_QWORD *)&v85 + 1))
        return;
      v36 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      goto LABEL_116;
    case 2:
      Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      sub_20B4EE6C8((std::__shared_weak_count_vtbl **)__p, Mutable, 0);
      v39 = *a1;
      if (!*a1)
        goto LABEL_103;
      if (v39 == 1)
      {
        v40 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 3);
      }
      else
      {
        if (v39 != 2)
        {
          v40 = 1;
          goto LABEL_119;
        }
        v40 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
      }
      if (!v40)
        goto LABEL_103;
LABEL_119:
      for (i = 0; i != v40; ++i)
      {
        v78 = sub_20B4551B8((uint64_t)a1, i);
        value[0] = 0;
        value[1] = 0;
        sub_20B44E408(v78, value);
        CFArrayAppendValue((CFMutableArrayRef)__p[0], value[0]);
        v79 = (std::__shared_weak_count *)value[1];
        if (value[1])
        {
          v80 = (unint64_t *)((char *)value[1] + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
      }
LABEL_103:
      sub_20B1610F8(value, (uint64_t)__p);
      v69 = *(_OWORD *)value;
      value[0] = 0;
      value[1] = 0;
      v70 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v69;
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = (std::__shared_weak_count *)value[1];
      if (value[1])
      {
        v74 = (unint64_t *)((char *)value[1] + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v35 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v76 = (unint64_t *)((char *)__p[1] + 8);
        do
          v37 = __ldaxr(v76);
        while (__stlxr(v37 - 1, v76));
LABEL_116:
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      break;
    case 3:
      __p[0] = 0;
      __p[1] = 0;
      v83 = 0;
      sub_20B4557C4((void **)a1, (uint64_t)__p);
      sub_20B4EE2F0((uint64_t)__p, (CFStringRef *)&v86);
      sub_20B160ED8(value, (uint64_t)&v86);
      v41 = *(_OWORD *)value;
      value[0] = 0;
      value[1] = 0;
      v42 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v41;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = (std::__shared_weak_count *)value[1];
      if (value[1])
      {
        v46 = (unint64_t *)((char *)value[1] + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      if ((SHIBYTE(v83) & 0x80000000) == 0)
        return;
      v27 = __p[0];
      goto LABEL_35;
    case 4:
      LOBYTE(v86) = 0;
      sub_20B4556BC(a1, &v86);
      LOBYTE(v85) = v86;
      sub_20B4EE200(&v85, (std::__shared_weak_count_vtbl **)value);
      sub_20B160FE8(__p, (uint64_t)value);
      v51 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v52 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v51;
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v56 = (unint64_t *)((char *)__p[1] + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v35 = (std::__shared_weak_count *)value[1];
      if (!value[1])
        return;
      v58 = (unint64_t *)((char *)value[1] + 8);
      do
        v37 = __ldaxr(v58);
      while (__stlxr(v37 - 1, v58));
      goto LABEL_116;
    case 7:
      value[0] = 0;
      sub_20B455554((uint64_t *)a1, (double *)value);
      v59 = value[0];
      LOBYTE(__p[0]) = 12;
      v60 = operator new(8uLL);
      __p[1] = v60;
      *v60 = v59;
      v83 = v60 + 1;
      v84 = v60 + 1;
      sub_20B4F6318((uint64_t)value, (uint64_t)__p);
      v85 = *(_OWORD *)value;
      sub_20B160DC8(&v86, (uint64_t)&v85);
      v61 = v86;
      v86 = 0uLL;
      v62 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v61;
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (!*((_QWORD *)&v85 + 1))
        goto LABEL_33;
      v68 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v16 = __ldaxr(v68);
      while (__stlxr(v16 - 1, v68));
      goto LABEL_31;
    default:
      return;
  }
}

void sub_20B44EBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B44EBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  sub_20AEC147C((uint64_t)&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B44EC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20AEC147C((uint64_t)&a17);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B44ECB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B44ECC8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  void *key;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p[2];
  uint64_t v23;
  unsigned __int8 *v24[2];
  __int128 v25;
  unsigned __int8 *v26;
  _QWORD *v27;
  __int128 v28;

  if (*(_BYTE *)result == 1)
  {
    v2 = *(_QWORD *)(result + 8);
    if (*(_QWORD *)(v2 + 16))
    {
      v26 = (unsigned __int8 *)result;
      v28 = xmmword_20B60EF30;
      v27 = *(_QWORD **)v2;
      v25 = xmmword_20B60EF30;
      v24[0] = (unsigned __int8 *)result;
      v24[1] = (unsigned __int8 *)(v2 + 8);
      while (1)
      {
        result = sub_20B455B8C(&v26, v24);
        if ((result & 1) != 0)
          return result;
        v4 = sub_20B455950((uint64_t)&v26);
        if (*(char *)(v4 + 23) < 0)
        {
          sub_20AEC60F4(__p, *(void **)v4, *(_QWORD *)(v4 + 8));
        }
        else
        {
          v5 = *(_OWORD *)v4;
          v23 = *(_QWORD *)(v4 + 16);
          *(_OWORD *)__p = v5;
        }
        v6 = sub_20B455E70((uint64_t)&v26);
        v20 = 0;
        v21 = 0;
        sub_20B44DB5C(v6, (uint64_t)&v20);
        sub_20B4EE2F0((uint64_t)__p, (CFStringRef *)&key);
        sub_20B455A18(a2, key, (uint64_t)&v20);
        v7 = v19;
        if (!v19)
          goto LABEL_13;
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
          v10 = v21;
          if (!v21)
            goto LABEL_19;
        }
        else
        {
LABEL_13:
          v10 = v21;
          if (!v21)
            goto LABEL_19;
        }
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
LABEL_19:
        if (SHIBYTE(v23) < 0)
          operator delete(__p[0]);
        v13 = *v26;
        if (v13 == 2)
        {
          *(_QWORD *)&v28 = v28 + 16;
        }
        else if (v13 == 1)
        {
          v14 = v27;
          v15 = (_QWORD *)v27[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v14[2];
              v17 = *v16 == (_QWORD)v14;
              v14 = v16;
            }
            while (!v17);
          }
          v27 = v16;
        }
        else
        {
          ++*((_QWORD *)&v28 + 1);
        }
      }
    }
  }
  return result;
}

void sub_20B44EE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B44EED0(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v6;
  __int128 v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  void *key;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  uint64_t v21;
  unsigned __int8 *v22[2];
  __int128 v23;
  unsigned __int8 *v24;
  uint64_t v25;
  __int128 v26;

  if (*(_BYTE *)result == 1)
  {
    v2 = *(uint64_t **)(result + 8);
    v3 = *v2;
    if (*v2 != v2[1])
    {
      v26 = xmmword_20B60EF30;
      v24 = (unsigned __int8 *)result;
      v25 = v3;
      v23 = xmmword_20B60EF30;
      v5 = (unsigned __int8 *)v2[1];
      v22[0] = (unsigned __int8 *)result;
      v22[1] = v5;
      while (1)
      {
        result = sub_20B45609C(&v24, v22);
        if ((result & 1) != 0)
          return result;
        v6 = sub_20B455FD8((uint64_t)&v24);
        if (*(char *)(v6 + 23) < 0)
        {
          sub_20AEC60F4(__p, *(void **)v6, *(_QWORD *)(v6 + 8));
        }
        else
        {
          v7 = *(_OWORD *)v6;
          v21 = *(_QWORD *)(v6 + 16);
          *(_OWORD *)__p = v7;
        }
        v8 = sub_20B45619C((uint64_t)&v24);
        v18 = 0;
        v19 = 0;
        sub_20B44E408(v8, (uint64_t)&v18);
        sub_20B4EE2F0((uint64_t)__p, (CFStringRef *)&key);
        sub_20B455A18(a2, key, (uint64_t)&v18);
        v9 = v17;
        if (!v17)
          goto LABEL_13;
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v12 = v19;
          if (!v19)
            goto LABEL_19;
        }
        else
        {
LABEL_13:
          v12 = v19;
          if (!v19)
            goto LABEL_19;
        }
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_19:
        if (SHIBYTE(v21) < 0)
          operator delete(__p[0]);
        v15 = *v24;
        if (v15 == 2)
        {
          *(_QWORD *)&v26 = v26 + 16;
        }
        else if (v15 == 1)
        {
          v25 += 40;
        }
        else
        {
          ++*((_QWORD *)&v26 + 1);
        }
      }
    }
  }
  return result;
}

void sub_20B44F070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B44F0B0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BYTE v12[8];
  uint64_t v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v12[0] = 0;
  v13[0] = 0;
  sub_20AEEC2D8(&v10, a1);
  sub_20B44BC80((uint64_t)v12, (uint64_t)&v10);
  v3 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v13[1] = (uint64_t)v12;
  v14 = 1;
  sub_20B456304((uint64_t)v8, (uint64_t)v12, 1, 1, 2);
  sub_20B416E08(v13, v12[0]);
  v6 = sub_20B44F264((uint64_t)v8, 0);
  v7 = operator new();
  *(_BYTE *)v7 = *(_BYTE *)v6;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
  *(_BYTE *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *a2 = v7;
  sub_20B416E08(&v9, v8[0]);
}

void sub_20B44F1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_20B416E08(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20B44F264(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *exception;
  char *v10;
  std::string v11;
  std::string v12;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v10 = (char *)sub_20B452AD0((char *)a1);
      sub_20AEC0D64(&v11, v10);
      sub_20B1F16DC("cannot use operator[] with a numeric argument with ", &v11, &v12);
      sub_20B452958(305, (uint64_t)&v12, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
    }
    v4 = *(uint64_t **)(a1 + 8);
    v5 = *v4;
    v6 = v4[1];
    v7 = (v6 - *v4) >> 4;
    if (v7 > a2)
      return v5 + 16 * a2;
  }
  else
  {
    *(_BYTE *)a1 = 2;
    v4 = (uint64_t *)operator new(0x18uLL);
    v5 = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *(_QWORD *)(a1 + 8) = v4;
    v6 = v4[1];
    v7 = v6 >> 4;
    if (v6 >> 4 > a2)
      return v5 + 16 * a2;
  }
  v12.__r_.__value_.__s.__data_[0] = 0;
  v12.__r_.__value_.__l.__size_ = 0;
  sub_20B457080(v4, (unsigned __int8 *)v6, a2 - v7 + 1, (unsigned __int8 *)&v12);
  sub_20B416E08((uint64_t *)&v12.__r_.__value_.__l.__size_, v12.__r_.__value_.__s.__data_[0]);
  return **(_QWORD **)(a1 + 8) + 16 * a2;
}

void sub_20B44F3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t *v12;

  sub_20B416E08(v12, a12);
  _Unwind_Resume(a1);
}

void sub_20B44F3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_20B44F420(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  void **v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BYTE v12[8];
  void **v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v12[0] = 0;
  v13[0] = 0;
  sub_20AEEC2D8(&v10, a1);
  sub_20B44CCD8((uint64_t)v12, (uint64_t)&v10);
  v3 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v13[1] = (void **)v12;
  v14 = 1;
  sub_20B456D38((uint64_t)v8, (uint64_t)v12, 1, 1, 2);
  sub_20B4181DC(v13, v12[0]);
  v6 = sub_20B44F5D4((uint64_t)v8, 0);
  v7 = operator new();
  *(_BYTE *)v7 = *(_BYTE *)v6;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
  *(_BYTE *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *a2 = v7;
  sub_20B4181DC(&v9, v8[0]);
}

void sub_20B44F564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  void ***v14;

  sub_20B4181DC(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20B44F5D4(uint64_t a1, unint64_t a2)
{
  void ***v4;
  void **v5;
  unsigned __int8 *v6;
  unint64_t v7;
  void *exception;
  char *v10;
  std::string v11;
  std::string v12;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v10 = (char *)sub_20B452AD0((char *)a1);
      sub_20AEC0D64(&v11, v10);
      sub_20B1F16DC("cannot use operator[] with a numeric argument with ", &v11, &v12);
      sub_20B452958(305, (uint64_t)&v12, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
    }
    v4 = *(void ****)(a1 + 8);
    v5 = *v4;
    v6 = (unsigned __int8 *)v4[1];
    v7 = (v6 - (unsigned __int8 *)*v4) >> 4;
    if (v7 > a2)
      return (uint64_t)&v5[2 * a2];
  }
  else
  {
    *(_BYTE *)a1 = 2;
    v4 = (void ***)operator new(0x18uLL);
    v5 = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *(_QWORD *)(a1 + 8) = v4;
    v6 = (unsigned __int8 *)v4[1];
    v7 = (uint64_t)v6 >> 4;
    if ((uint64_t)v6 >> 4 > a2)
      return (uint64_t)&v5[2 * a2];
  }
  v12.__r_.__value_.__s.__data_[0] = 0;
  v12.__r_.__value_.__l.__size_ = 0;
  sub_20B4573CC(v4, v6, a2 - v7 + 1, (unsigned __int8 *)&v12);
  sub_20B4181DC((void ***)&v12.__r_.__value_.__l.__size_, v12.__r_.__value_.__s.__data_[0]);
  return **(_QWORD **)(a1 + 8) + 16 * a2;
}

void sub_20B44F718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  void ***v12;

  sub_20B4181DC(v12, a12);
  _Unwind_Resume(a1);
}

void sub_20B44F730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_20B44F790(const void **a1@<X0>, uint64_t a2@<X8>)
{
  const void *v3;
  CFTypeID TypeID;
  const void *v6;
  CFTypeID v7;
  const void *v8;
  CFTypeID v9;
  __int16 v10;
  const void *v11;
  CFTypeID v12;
  const void *v13;
  CFTypeID v14;
  const void *v15;
  CFTypeID v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::string *v21;
  unint64_t size;
  void *v23;
  int v24;
  int v25;
  uint64_t v26;
  std::string v27;
  _DWORD v28[2];
  __int128 __dst;
  _BYTE v30[7];
  char v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  char v37;
  char v38;
  __int128 v39;
  __int128 __p;
  uint64_t v41;
  unsigned __int8 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  char v49;
  std::__shared_weak_count_vtbl *v50;
  std::__shared_weak_count *v51;
  std::string v52;

  v3 = *a1;
  if (!*a1)
    goto LABEL_18;
  TypeID = CFNumberGetTypeID();
  if (CFGetTypeID(v3) == TypeID)
  {
    *(_WORD *)a2 = 0;
LABEL_7:
    *(_BYTE *)(a2 + 120) = 1;
    return;
  }
  v6 = *a1;
  if (!*a1)
    goto LABEL_18;
  v7 = CFStringGetTypeID();
  if (CFGetTypeID(v6) == v7)
  {
    *(_WORD *)a2 = 1;
    goto LABEL_7;
  }
  v8 = *a1;
  if (!*a1)
    goto LABEL_18;
  v9 = CFBooleanGetTypeID();
  if (CFGetTypeID(v8) == v9)
  {
    v10 = 2;
LABEL_17:
    *(_WORD *)a2 = v10;
    goto LABEL_7;
  }
  v11 = *a1;
  if (!*a1)
    goto LABEL_18;
  v12 = CFArrayGetTypeID();
  if (CFGetTypeID(v11) == v12)
  {
    v10 = 3;
    goto LABEL_17;
  }
  v13 = *a1;
  if (*a1)
  {
    v14 = CFDictionaryGetTypeID();
    if (CFGetTypeID(v13) == v14)
    {
      v10 = 4;
      goto LABEL_17;
    }
    v15 = *a1;
  }
  else
  {
LABEL_18:
    v15 = 0;
  }
  v16 = CFGetTypeID(v15);
  v17 = (std::__shared_weak_count_vtbl *)CFCopyTypeIDDescription(v16);
  sub_20B415F0C(&v50, v17, 0);
  sub_20B4EE3FC((CFIndex)v50, &v52);
  v27 = v52;
  memset(&v52, 0, sizeof(v52));
  v18 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v23 = (void *)v21->__r_.__value_.__r.__words[0];
  size = v21->__r_.__value_.__l.__size_;
  v28[0] = v21->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v28 + 3) = *(_DWORD *)((char *)&v21->__r_.__value_.__r.__words[2] + 3);
  v24 = SHIBYTE(v21->__r_.__value_.__r.__words[2]);
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (v24 < 0)
  {
    sub_20AEC60F4(&__dst, v23, size);
  }
  else
  {
    *(_QWORD *)&__dst = v23;
    *((_QWORD *)&__dst + 1) = size;
    *(_DWORD *)v30 = v28[0];
    *(_DWORD *)&v30[3] = *(_DWORD *)((char *)v28 + 3);
    v31 = v24;
  }
  v32 = 1;
  LOBYTE(v33) = 0;
  v37 = 0;
  v38 = 1;
  sub_20AF558C0(0x16u, &__dst, (uint64_t)&v39);
  *(_OWORD *)a2 = v39;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (!v49)
  {
    *(_BYTE *)(a2 + 120) = 0;
    if (!v38)
      goto LABEL_44;
LABEL_38:
    if (!v37)
      goto LABEL_41;
    if (v36 < 0)
    {
      operator delete(v35);
      if ((v34 & 0x80000000) == 0)
      {
LABEL_41:
        if (!v32)
          goto LABEL_44;
LABEL_42:
        if (v31 < 0)
          operator delete((void *)__dst);
        goto LABEL_44;
      }
    }
    else if ((v34 & 0x80000000) == 0)
    {
      goto LABEL_41;
    }
    operator delete(v33);
    if (!v32)
      goto LABEL_44;
    goto LABEL_42;
  }
  *(_BYTE *)(a2 + 40) = 0;
  v25 = v42;
  if (v42)
  {
    *(_OWORD *)(a2 + 16) = __p;
    *(_QWORD *)(a2 + 32) = v41;
    v41 = 0;
    __p = 0uLL;
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v48)
  {
    v26 = v45;
    *(_QWORD *)(a2 + 64) = v44;
    *(_OWORD *)(a2 + 48) = v43;
    v43 = 0uLL;
    *(_QWORD *)(a2 + 72) = v26;
    *(_OWORD *)(a2 + 80) = v46;
    *(_QWORD *)(a2 + 96) = v47;
    v44 = 0;
    v46 = 0uLL;
    v47 = 0;
    *(_BYTE *)(a2 + 104) = 1;
  }
  *(_BYTE *)(a2 + 112) = 1;
  *(_BYTE *)(a2 + 120) = 0;
  if (v25 && SHIBYTE(v41) < 0)
    operator delete((void *)__p);
  if (v38)
    goto LABEL_38;
LABEL_44:
  if ((v24 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_48:
    operator delete(v27.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v23);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_48;
}

void sub_20B44FB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  void *v16;

  operator delete(v16);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B44FB7C(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  const void *v10;
  std::__shared_weak_count *v11;
  _WORD v12[60];
  char v13;

  sub_20B161578(&v10, a2);
  sub_20B44F790(&v10, (uint64_t)v12);
  if (!v13)
  {
    v9 = sub_20B0B52D8((uint64_t)v12);
    sub_20B0BFB50(v9);
  }
  v4 = v12[0];
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a1 = v4;
  sub_20B161578((_QWORD *)(a1 + 8), a2);
  return a1;
}

void sub_20B44FC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20AECD704((uint64_t)&a11);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B44FC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B44FC58()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463D0D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463D0D8))
    return 5;
  qword_25463D0B0 = CFBooleanGetTypeID();
  qword_25463D0B8 = CFStringGetTypeID();
  qword_25463D0C0 = CFNumberGetTypeID();
  qword_25463D0C8 = CFArrayGetTypeID();
  qword_25463D0D0 = CFDictionaryGetTypeID();
  __cxa_guard_release(&qword_25463D0D8);
  return 5;
}

void sub_20B44FCFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D0D8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B44FD14(const char *a1, CFTypeRef *a2)
{
  size_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  _QWORD __dst[2];
  unint64_t v25;
  int v26;
  void *__p[2];
  unint64_t v28;
  _QWORD v29[5];
  _QWORD *v30;

  v26 = -1;
  v4 = strlen(a1);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = v5;
    v25 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v25) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memcpy(v6, a1, v5);
  *((_BYTE *)v6 + v5) = 0;
  v26 = 1;
  v9 = operator new();
  *(_QWORD *)(v9 + 272) = 0;
  *(_OWORD *)(v9 + 240) = 0u;
  *(_OWORD *)(v9 + 256) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)v9 = 0u;
  sub_20AEC0BD8(v9);
  v29[0] = v9;
  sub_20B4F66B8((_QWORD *)(v9 + 16), *a2);
  v10 = *(_DWORD *)(v9 + 120);
  if ((v10 & 0x10) != 0)
  {
    v13 = *(_QWORD *)(v9 + 112);
    v14 = *(_QWORD *)(v9 + 72);
    if (v13 < v14)
    {
      *(_QWORD *)(v9 + 112) = v14;
      v13 = v14;
    }
    v15 = *(const void **)(v9 + 64);
    v11 = v13 - (_QWORD)v15;
    if (v13 - (unint64_t)v15 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_34;
  }
  else
  {
    if ((v10 & 8) == 0)
    {
      v11 = 0;
      HIBYTE(v28) = 0;
      v12 = __p;
      goto LABEL_22;
    }
    v23 = *(_QWORD *)(v9 + 56);
    v15 = *(const void **)(v9 + 40);
    v11 = v23 - (_QWORD)v15;
    if ((unint64_t)(v23 - (_QWORD)v15) > 0x7FFFFFFFFFFFFFF7)
LABEL_34:
      sub_20AEC0138();
  }
  if (v11 >= 0x17)
  {
    v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v16 = v11 | 7;
    v17 = v16 + 1;
    v12 = operator new(v16 + 1);
    __p[1] = (void *)v11;
    v28 = v17 | 0x8000000000000000;
    __p[0] = v12;
    goto LABEL_21;
  }
  HIBYTE(v28) = v11;
  v12 = __p;
  if (v11)
LABEL_21:
    memmove(v12, v15, v11);
LABEL_22:
  *((_BYTE *)v12 + v11) = 0;
  v18 = v29[0];
  if (v29[0])
  {
    v19 = MEMORY[0x24BEDB7F0];
    v20 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v29[0] = *MEMORY[0x24BEDB7F0];
    v21 = *(_QWORD *)(v19 + 72);
    *(_QWORD *)(v18 + *(_QWORD *)(v20 - 24)) = *(_QWORD *)(v19 + 64);
    *(_QWORD *)(v18 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v18 + 16) = v21;
    if (*(char *)(v18 + 111) < 0)
      operator delete(*(void **)(v18 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v18 + 128);
    MEMORY[0x20BD3583C](v18, 0x10B2C40EED050F3);
  }
  v29[0] = __dst;
  v29[1] = __p;
  v29[2] = __dst;
  v29[3] = __p;
  v29[4] = __p;
  if (v26 == -1)
    sub_20AECFAB8();
  v30 = v29;
  ((void (*)(_QWORD **, _QWORD *))off_24C41D998[v26])(&v30, __dst);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  if (v26 == -1)
    sub_20AECFAB8();
  v29[0] = __p;
  result = ((uint64_t (*)(_QWORD *, _QWORD *))off_24C41D9B0[v26])(v29, __dst);
  if (v26 != -1)
    return ((uint64_t (*)(_QWORD *, _QWORD *))off_24C41D980[v26])(v29, __dst);
  return result;
}

void sub_20B450044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x20BD3583C](v2, 0x10B2C40EED050F3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B450070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B45008C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4500CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_20B45014C(uint64_t *a1@<X0>, void ***a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFStringRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  const __CFString *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  char *v46;
  char *__p;
  uint64_t *v48;
  __int128 v49;
  char *v50;
  __int128 v51;
  CFStringRef v52;
  std::__shared_weak_count *v53;

  v4 = (a1[1] - *a1) >> 3;
  v51 = 0uLL;
  v50 = 0;
  sub_20B45194C((uint64_t)&v50, 0xAAAAAAAAAAAAAAABLL * v4);
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    while (1)
    {
      sub_20B4EE2F0(v5, &v52);
      v7 = v52;
      v8 = v53;
      if (v53)
      {
        p_shared_owners = (unint64_t *)&v53->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      sub_20B451A58(&v49, v7);
      if (!v8)
        goto LABEL_11;
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        v13 = v53;
        if (v53)
        {
LABEL_12:
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      else
      {
LABEL_11:
        v13 = v53;
        if (v53)
          goto LABEL_12;
      }
      v16 = v51;
      if ((unint64_t)v51 < *((_QWORD *)&v51 + 1))
      {
        *(_OWORD *)v51 = v49;
        *(_QWORD *)&v51 = v16 + 16;
        v5 += 24;
        if (v5 == v6)
          break;
      }
      else
      {
        v17 = sub_20B451AE4(&v50, (uint64_t)&v49);
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
        *(_QWORD *)&v51 = v17;
        if (!*((_QWORD *)&v49 + 1))
          goto LABEL_22;
        v19 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
          v5 += 24;
          if (v5 == v6)
            break;
        }
        else
        {
LABEL_22:
          v5 += 24;
          if (v5 == v6)
            break;
        }
      }
    }
  }
  v21 = (uint64_t *)v50;
  __p = v50;
  v45 = (uint64_t *)v51;
  v48 = (uint64_t *)v51;
  v22 = 0xAAAAAAAAAAAAAAABLL * ((a1[4] - a1[3]) >> 3);
  v51 = 0uLL;
  v50 = 0;
  sub_20B45194C((uint64_t)&v50, v22);
  v23 = a1[3];
  v24 = a1[4];
  if (v23 == v24)
  {
    v25 = v45;
  }
  else
  {
    do
    {
      v26 = *(const __CFString **)(v23 + 8);
      v27 = *(std::__shared_weak_count **)(v23 + 16);
      v52 = v26;
      v53 = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = v51;
      if ((unint64_t)v51 < *((_QWORD *)&v51 + 1))
      {
        *(_QWORD *)v51 = v26;
        *(_QWORD *)(v30 + 8) = v53;
        *(_QWORD *)&v51 = v30 + 16;
      }
      else
      {
        v31 = sub_20B451AE4(&v50, (uint64_t)&v52);
        v32 = v53;
        *(_QWORD *)&v51 = v31;
        if (v53)
        {
          v33 = (unint64_t *)&v53->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
      v23 += 24;
    }
    while (v23 != v24);
    v21 = (uint64_t *)__p;
    v25 = v48;
  }
  v35 = v50;
  v46 = v50;
  v36 = (char *)v51;
  sub_20B4EEDCC((void **)(((char *)v25 - (char *)v21) >> 4), v21, (void **)((uint64_t)(v51 - (_QWORD)v50) >> 4), (uint64_t *)v50, (const __CFAllocator *)*MEMORY[0x24BDBD240], MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0], a2);
  if (v35)
  {
    if (v36 != v35)
    {
      do
      {
        v37 = (std::__shared_weak_count *)*((_QWORD *)v36 - 1);
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v36 -= 16;
      }
      while (v36 != v35);
      v35 = v46;
      v21 = (uint64_t *)__p;
    }
    operator delete(v35);
  }
  if (v21)
  {
    v40 = v48;
    v41 = v21;
    if (v48 != v21)
    {
      do
      {
        v42 = (std::__shared_weak_count *)*(v40 - 1);
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v40 -= 2;
      }
      while (v40 != v21);
      v41 = __p;
    }
    operator delete(v41);
  }
}

void sub_20B450504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC3C38((void **)va);
  sub_20AEC3C38((void **)va1);
  _Unwind_Resume(a1);
}

void sub_20B450520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20AEC3C38((void **)va1);
  sub_20AEC3C38((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B45053C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20AEC3C38((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B450618(_QWORD *a1, uint64_t a2)
{
  CFTypeID v4;
  CFTypeID v6;
  std::logic_error *exception;
  std::__shared_weak_count_vtbl *v8;
  CFTypeRef v9[2];
  std::string v10;

  sub_20AEEC2D8(a1, a2);
  sub_20B44FC58();
  if (!sub_20B4EF920(a2, 5, (uint64_t)&qword_25463D0B0))
  {
    v6 = v4;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v8 = (std::__shared_weak_count_vtbl *)CFCopyTypeIDDescription(v6);
    sub_20B415F0C((std::__shared_weak_count_vtbl **)v9, v8, 0);
    sub_20B44FD14("Dictionary cannot be serialized. It must only hold Boolean, Number, String, Array or Dictionary values, but contains ", v9);
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return a1;
}

void sub_20B4506EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void *v18;
  int v19;

  if (a17 < 0)
  {
    operator delete(__p);
    sub_20AEC147C((uint64_t)&a10);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      sub_20AEC147C(v17);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_20AEC147C((uint64_t)&a10);
    if (!v19)
      goto LABEL_6;
  }
  __cxa_free_exception(v18);
  sub_20AEC147C(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_20B450760(uint64_t a1, uint64_t a2)
{
  char **v4;
  std::__shared_weak_count *v5;
  CFDictionaryRef v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  CFIndex Count;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  char *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v62;
  std::__shared_weak_count *v63;
  __int16 v64;
  __int128 v65;
  void *__p[2];
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;

  v4 = (char **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v6 = *(CFDictionaryRef *)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_7;
LABEL_9:
      Count = 0;
      goto LABEL_10;
    }
  }
  if (!v6)
    goto LABEL_9;
LABEL_7:
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)a2);
LABEL_10:
  sub_20AECF88C(a1, Count);
  sub_20B15AE88(v4, Count);
  sub_20B4EFA6C(a2, (uint64_t)&v82);
  v76 = v82;
  v77 = v83;
  v78 = v84;
  v79 = v85;
  if (v85)
  {
    v11 = (unint64_t *)&v85->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v80 = v86;
  v81 = v87;
  if (v87)
  {
    v13 = (unint64_t *)&v87->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v70 = v88;
  v71 = v89;
  v72 = v90;
  v73 = v91;
  if (v91)
  {
    v15 = (unint64_t *)&v91->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v74 = v92;
  v75 = v93;
  if (v93)
  {
    v17 = (unint64_t *)&v93->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  while (!(_QWORD)v76 || (_QWORD)v70 == 0)
  {
    if (((_QWORD)v76 != 0) != ((_QWORD)v70 == 0))
      goto LABEL_65;
LABEL_32:
    v20 = sub_20B4EF7CC((uint64_t)&v76);
    v21 = v20;
    if (*(char *)(v20 + 23) < 0)
    {
      sub_20AEC60F4(__p, *(void **)v20, *(_QWORD *)(v20 + 8));
    }
    else
    {
      v22 = *(_OWORD *)v20;
      v67 = *(_QWORD *)(v20 + 16);
      *(_OWORD *)__p = v22;
    }
    sub_20B161578(&v68, v21 + 24);
    v23 = *(_QWORD *)(a1 + 8);
    if (v23 >= *(_QWORD *)(a1 + 16))
    {
      v25 = sub_20AEC63D0((char **)a1, (uint64_t)__p);
    }
    else
    {
      if (SHIBYTE(v67) < 0)
      {
        sub_20AEC60F4(*(_BYTE **)(a1 + 8), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v23 + 16) = v67;
        *(_OWORD *)v23 = v24;
      }
      v25 = (char *)(v23 + 24);
      *(_QWORD *)(a1 + 8) = v23 + 24;
    }
    *(_QWORD *)(a1 + 8) = v25;
    sub_20B161578(&v62, (uint64_t)&v68);
    sub_20B44FB7C((uint64_t)&v64, (uint64_t)&v62);
    v26 = *(_QWORD *)(a1 + 32);
    if (v26 >= *(_QWORD *)(a1 + 40))
    {
      v28 = sub_20B15B5F4(v4, (uint64_t)&v64);
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
      *(_QWORD *)(a1 + 32) = v28;
      if (!v29)
        goto LABEL_48;
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        v27 = v63;
        if (v63)
        {
LABEL_49:
          v32 = (unint64_t *)&v27->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
      else
      {
LABEL_48:
        v27 = v63;
        if (v63)
          goto LABEL_49;
      }
    }
    else
    {
      *(_WORD *)v26 = v64;
      *(_OWORD *)(v26 + 8) = v65;
      v65 = 0uLL;
      *(_QWORD *)(a1 + 32) = v26 + 24;
      v27 = v63;
      if (v63)
        goto LABEL_49;
    }
    v34 = v69;
    if (!v69)
      goto LABEL_57;
    v35 = (unint64_t *)&v69->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if ((SHIBYTE(v67) & 0x80000000) == 0)
        goto LABEL_58;
LABEL_61:
      operator delete(__p[0]);
      ++*((_QWORD *)&v76 + 1);
      if (*((uint64_t *)&v76 + 1) >= v77)
LABEL_23:
        *(_QWORD *)&v76 = 0;
    }
    else
    {
LABEL_57:
      if (SHIBYTE(v67) < 0)
        goto LABEL_61;
LABEL_58:
      ++*((_QWORD *)&v76 + 1);
      if (*((uint64_t *)&v76 + 1) >= v77)
        goto LABEL_23;
    }
  }
  if (*((_QWORD *)&v76 + 1) != *((_QWORD *)&v70 + 1))
    goto LABEL_32;
LABEL_65:
  v37 = v75;
  if (v75)
  {
    v38 = (unint64_t *)&v75->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v73;
  if (v73)
  {
    v41 = (unint64_t *)&v73->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v81;
  if (v81)
  {
    v44 = (unint64_t *)&v81->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v79;
  if (v79)
  {
    v47 = (unint64_t *)&v79->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v93;
  if (v93)
  {
    v50 = (unint64_t *)&v93->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v91;
  if (v91)
  {
    v53 = (unint64_t *)&v91->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v87;
  if (v87)
  {
    v56 = (unint64_t *)&v87->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v85;
  if (v85)
  {
    v59 = (unint64_t *)&v85->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  return a1;
}

void sub_20B450CD8(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  sub_20B0B8EC0(v2);
  sub_20AEC2E90(v1);
  _Unwind_Resume(a1);
}

void sub_20B450CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)(v32 + 8) = v34;
  sub_20B4500CC((uint64_t)&__p);
  sub_20B44CB04((uint64_t)&a24);
  sub_20B44CB04((uint64_t)&a32);
  sub_20B44CBB0((_QWORD *)(v35 - 160));
  sub_20B0B8EC0(v33);
  sub_20AEC2E90((void **)v32);
  _Unwind_Resume(a1);
}

void sub_20B450D84(uint64_t *a1@<X0>, void ***a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFStringRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  const __CFString *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  char *v46;
  char *__p;
  uint64_t *v48;
  __int128 v49;
  char *v50;
  __int128 v51;
  CFStringRef v52;
  std::__shared_weak_count *v53;

  v4 = (a1[1] - *a1) >> 3;
  v51 = 0uLL;
  v50 = 0;
  sub_20B45194C((uint64_t)&v50, 0xAAAAAAAAAAAAAAABLL * v4);
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    while (1)
    {
      sub_20B4EE2F0(v5, &v52);
      v7 = v52;
      v8 = v53;
      if (v53)
      {
        p_shared_owners = (unint64_t *)&v53->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      sub_20B451A58(&v49, v7);
      if (!v8)
        goto LABEL_11;
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        v13 = v53;
        if (v53)
        {
LABEL_12:
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      else
      {
LABEL_11:
        v13 = v53;
        if (v53)
          goto LABEL_12;
      }
      v16 = v51;
      if ((unint64_t)v51 < *((_QWORD *)&v51 + 1))
      {
        *(_OWORD *)v51 = v49;
        *(_QWORD *)&v51 = v16 + 16;
        v5 += 24;
        if (v5 == v6)
          break;
      }
      else
      {
        v17 = sub_20B451AE4(&v50, (uint64_t)&v49);
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
        *(_QWORD *)&v51 = v17;
        if (!*((_QWORD *)&v49 + 1))
          goto LABEL_22;
        v19 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
          v5 += 24;
          if (v5 == v6)
            break;
        }
        else
        {
LABEL_22:
          v5 += 24;
          if (v5 == v6)
            break;
        }
      }
    }
  }
  v21 = (uint64_t *)v50;
  __p = v50;
  v45 = (uint64_t *)v51;
  v48 = (uint64_t *)v51;
  v22 = 0xAAAAAAAAAAAAAAABLL * ((a1[4] - a1[3]) >> 3);
  v51 = 0uLL;
  v50 = 0;
  sub_20B45194C((uint64_t)&v50, v22);
  v23 = a1[3];
  v24 = a1[4];
  if (v23 == v24)
  {
    v25 = v45;
  }
  else
  {
    do
    {
      v26 = *(const __CFString **)(v23 + 8);
      v27 = *(std::__shared_weak_count **)(v23 + 16);
      v52 = v26;
      v53 = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = v51;
      if ((unint64_t)v51 < *((_QWORD *)&v51 + 1))
      {
        *(_QWORD *)v51 = v26;
        *(_QWORD *)(v30 + 8) = v53;
        *(_QWORD *)&v51 = v30 + 16;
      }
      else
      {
        v31 = sub_20B451AE4(&v50, (uint64_t)&v52);
        v32 = v53;
        *(_QWORD *)&v51 = v31;
        if (v53)
        {
          v33 = (unint64_t *)&v53->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
      v23 += 24;
    }
    while (v23 != v24);
    v21 = (uint64_t *)__p;
    v25 = v48;
  }
  v35 = v50;
  v46 = v50;
  v36 = (char *)v51;
  sub_20B4EEDCC((void **)(((char *)v25 - (char *)v21) >> 4), v21, (void **)((uint64_t)(v51 - (_QWORD)v50) >> 4), (uint64_t *)v50, (const __CFAllocator *)*MEMORY[0x24BDBD240], MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0], a2);
  if (v35)
  {
    if (v36 != v35)
    {
      do
      {
        v37 = (std::__shared_weak_count *)*((_QWORD *)v36 - 1);
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v36 -= 16;
      }
      while (v36 != v35);
      v35 = v46;
      v21 = (uint64_t *)__p;
    }
    operator delete(v35);
  }
  if (v21)
  {
    v40 = v48;
    v41 = v21;
    if (v48 != v21)
    {
      do
      {
        v42 = (std::__shared_weak_count *)*(v40 - 1);
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v40 -= 2;
      }
      while (v40 != v21);
      v41 = __p;
    }
    operator delete(v41);
  }
}

void sub_20B45113C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC3C38((void **)va);
  sub_20AEC3C38((void **)va1);
  _Unwind_Resume(a1);
}

void sub_20B451158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20AEC3C38((void **)va1);
  sub_20AEC3C38((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B451174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20AEC3C38((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B451250@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, char a4@<W3>, unint64_t a5@<X8>)
{
  unint64_t v7;
  BOOL v8;
  _BYTE *v9;
  uint64_t *v10;
  _BYTE *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[3];
  _QWORD *v22;
  _BYTE v23[24];
  _BYTE *v24;
  void *v25;
  void *v26;
  void *__p;
  char v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v7 = a5;
  v31 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a5 = 0;
  LODWORD(a5) = *((char *)a1 + 23);
  v8 = (a5 & 0x80000000) != 0;
  v9 = (_BYTE *)a1[1];
  if ((a5 & 0x80000000) == 0)
    v10 = a1;
  else
    v10 = (uint64_t *)*a1;
  *(_QWORD *)(v7 + 8) = 0;
  a5 = a5;
  if (v8)
    a5 = (unint64_t)v9;
  v11 = (char *)v10 + a5;
  v12 = (_QWORD *)a2[3];
  if (!v12)
  {
    v22 = 0;
    *(_QWORD *)&v20 = v10;
    *((_QWORD *)&v20 + 1) = (char *)v10 + a5;
    goto LABEL_11;
  }
  if (v12 == a2)
  {
    v22 = v21;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v21);
    v13 = v22;
    *(_QWORD *)&v20 = v10;
    *((_QWORD *)&v20 + 1) = v11;
    if (v22)
      goto LABEL_13;
LABEL_11:
    v30 = 0;
    goto LABEL_16;
  }
  v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
  v22 = v13;
  *(_QWORD *)&v20 = v10;
  *((_QWORD *)&v20 + 1) = v11;
  if (!v13)
    goto LABEL_11;
LABEL_13:
  if (v13 == v21)
  {
    v30 = v29;
    (*(void (**)(_QWORD *, _BYTE *))(v21[0] + 24))(v21, v29);
  }
  else
  {
    v30 = v13;
    v22 = 0;
  }
LABEL_16:
  sub_20B457E1C((uint64_t)v23, &v20, (uint64_t)v29, a3, a4);
  v14 = v30;
  if (v30 == v29)
  {
    v15 = 4;
    v14 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_21;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_21:
  sub_20B457718((uint64_t)v23, 1, (unsigned __int8 *)v7);
  if (v28 < 0)
    operator delete(__p);
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  v16 = v24;
  if (v24 == v23)
  {
    v17 = 4;
    v16 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_30;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_30:
  result = v22;
  if (v22 == v21)
  {
    v19 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      return result;
    v19 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v19))();
}

void sub_20B451460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B4514FC(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v3 = *a1;
  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20B4F51B8(&v8, &v10);
  v7 = v10;
  sub_20AEC833C((uint64_t)&v8, v9[0]);
  sub_20B44ECC8(v3, (uint64_t)&v7);
  sub_20B284A78(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20B4515B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4515C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4515DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20B4515F4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v3 = *a1;
  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20B4F51B8(&v8, &v10);
  v7 = v10;
  sub_20AEC833C((uint64_t)&v8, v9[0]);
  sub_20B44EED0(v3, (uint64_t)&v7);
  sub_20B284A78(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20B4516AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4516C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4516D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B4516EC(uint64_t *a1, _WORD *a2)
{
  uint64_t (**v4)();
  std::logic_error *exception;
  std::string v7;
  void *__p[2];
  uint64_t v9;

  __p[0] = 0;
  __p[1] = 0;
  v9 = 0;
  sub_20B1C68C0(a1, (uint64_t)__p);
  v4 = (uint64_t (**)())sub_20B451840((uint64_t)&off_24C41D930, (const void **)__p);
  if (v4 == off_24C41D980)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::logic_error::logic_error(exception, &v7);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  *a2 = (v4 - &off_24C41D930) >> 4;
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20B4517EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (a20 < 0)
        operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t sub_20B451840(uint64_t a1, const void **a2)
{
  uint64_t v2;
  char v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  v2 = a1;
  v3 = *((_BYTE *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  if (v3 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (*(_QWORD *)(a1 + 8) == v4 && !memcmp(*(const void **)a1, v5, v4))
    return v2;
  if (*(_QWORD *)(v2 + 24) != v4 || (v6 = v2 + 16, memcmp(*(const void **)(v2 + 16), v5, v4)))
  {
    if (*(_QWORD *)(v2 + 40) != v4 || (v6 = v2 + 32, memcmp(*(const void **)(v2 + 32), v5, v4)))
    {
      if (*(_QWORD *)(v2 + 56) != v4 || (v6 = v2 + 48, memcmp(*(const void **)(v2 + 48), v5, v4)))
      {
        if (*(_QWORD *)(v2 + 72) != v4 || (v6 = v2 + 64, memcmp(*(const void **)(v2 + 64), v5, v4)))
        {
          v2 += 80;
          return v2;
        }
      }
    }
  }
  return v6;
}

void sub_20B45194C(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_20B451A44();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v11 != v2)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v11 -= 16;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_20B451A44()
{
  sub_20AEC014C("vector");
}

_QWORD *sub_20B451A58(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C40FAB8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20B451AB8(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B451AD0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

char *sub_20B451AE4(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_20B451A44();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      sub_20AEC60CC();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = v9 + 16;
  v11 = &v8[16 * v7];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v14 = *((_OWORD *)v13 - 1);
      v13 -= 16;
      *((_OWORD *)v9 - 1) = v14;
      v9 -= 16;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
    while (v15 != v13)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v15 -= 16;
    }
  }
  if (v13)
    operator delete(v13);
  return v10;
}

uint64_t sub_20B451C18(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v5 = *(unsigned __int8 *)(i - 16);
    v4 = i - 16;
    *(_QWORD *)(a1 + 16) = v4;
    sub_20B416E08((uint64_t *)(v4 + 8), v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t **sub_20B451C6C(uint64_t a1, const void **a2)
{
  uint64_t **v4;
  void *exception;
  char *v7;
  std::string v8;
  std::string v9;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v7 = (char *)sub_20B452AD0((char *)a1);
      sub_20AEC0D64(&v8, v7);
      sub_20B1F16DC("cannot use operator[] with a string argument with ", &v8, &v9);
      sub_20B452958(305, (uint64_t)&v9, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
    }
    v4 = *(uint64_t ***)(a1 + 8);
  }
  else
  {
    *(_BYTE *)a1 = 1;
    v4 = (uint64_t **)operator new(0x18uLL);
    v4[2] = 0;
    v4[1] = 0;
    *v4 = (uint64_t *)(v4 + 1);
    *(_QWORD *)(a1 + 8) = v4;
  }
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  return sub_20B452B28(v4, a2, (uint64_t)&unk_20B5EABF1, (__int128 **)&v9) + 7;
}

void sub_20B451D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_20B451DC0(uint64_t a1, unint64_t *a2, CFTypeRef *a3)
{
  int data_low;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  CFTypeRef v10;
  CFTypeID TypeID;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  CFTypeRef v17;
  CFTypeID v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  CFTypeRef v25;
  CFTypeID v26;
  _BOOL8 v27;
  CFTypeRef v28;
  CFTypeID v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const __CFArray *v35;
  std::string *v36;
  unsigned __int8 *v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int8 *v50;
  int v51;
  uint64_t v52;
  CFIndex Count;
  const __CFNumber *i;
  uint64_t v55;
  const void *ValueAtIndex;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string::size_type v68;
  unsigned __int8 *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unsigned __int8 *v73;
  int v74;
  uint64_t v75;
  unint64_t *v76;
  std::string::size_type v77;
  std::string::size_type v78;
  std::string::size_type v79;
  std::string::size_type v80;
  std::string::size_type v81;
  std::string::size_type v82;
  std::string::size_type v83;
  std::string::size_type v84;
  std::string::size_type v85;
  int v86;
  std::string::size_type v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  uint64_t v92;
  std::logic_error *exception;
  CFTypeID v94;
  std::string theArray;
  _BYTE v96[8];
  uint64_t v97;
  __int128 v98;
  char v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  __int128 v103;
  CFNumberRef v104;
  std::__shared_weak_count *v105;
  const void *v106;
  std::__shared_weak_count *v107;
  std::string __p;
  char v109;
  char v110;

  sub_20B161578(&v106, (uint64_t)a3);
  sub_20B44F790(&v106, (uint64_t)&__p);
  if (!v110)
  {
    v92 = sub_20B0B52D8((uint64_t)&__p);
    sub_20B0BFB50(v92);
  }
  data_low = LOWORD(__p.__r_.__value_.__l.__data_);
  v7 = v107;
  if (v107)
  {
    p_shared_owners = (unint64_t *)&v107->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  switch(data_low)
  {
    case 0:
      v10 = *a3;
      if (*a3 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v10) == TypeID))
      {
        sub_20B15B25C(&theArray, *a3);
        v103 = *(_OWORD *)&theArray.__r_.__value_.__l.__data_;
        if (theArray.__r_.__value_.__l.__size_)
        {
          v12 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
          size = (std::__shared_weak_count *)theArray.__r_.__value_.__l.__size_;
          if (theArray.__r_.__value_.__l.__size_)
          {
            v15 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
      }
      else
      {
        v103 = 0uLL;
      }
      sub_20B15B3A0(&v104, (uint64_t)&v103);
      sub_20B4F5FA8(&v104);
      switch(__p.__r_.__value_.__s.__data_[0])
      {
        case 0:
          v68 = *(unsigned __int8 *)sub_20B522A74((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 6;
          theArray.__r_.__value_.__l.__size_ = v68;
          v69 = (unsigned __int8 *)sub_20B44F264(a1, *a2);
          break;
        case 1:
          v80 = *(unsigned __int16 *)sub_20B522CCC((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 6;
          theArray.__r_.__value_.__l.__size_ = v80;
          v69 = (unsigned __int8 *)sub_20B44F264(a1, *a2);
          break;
        case 2:
          v82 = *(unsigned int *)sub_20B522DB4((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 6;
          theArray.__r_.__value_.__l.__size_ = v82;
          v69 = (unsigned __int8 *)sub_20B44F264(a1, *a2);
          break;
        case 3:
          v84 = *(_QWORD *)sub_20B522E9C((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 6;
          theArray.__r_.__value_.__l.__size_ = v84;
          v69 = (unsigned __int8 *)sub_20B44F264(a1, *a2);
          break;
        case 5:
          v79 = *(char *)sub_20B522F84((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 5;
          theArray.__r_.__value_.__l.__size_ = v79;
          v69 = (unsigned __int8 *)sub_20B44F264(a1, *a2);
          break;
        case 6:
          v81 = *(__int16 *)sub_20B52306C((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 5;
          theArray.__r_.__value_.__l.__size_ = v81;
          v69 = (unsigned __int8 *)sub_20B44F264(a1, *a2);
          break;
        case 7:
          v85 = *(int *)sub_20B523154((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 5;
          theArray.__r_.__value_.__l.__size_ = v85;
          v69 = (unsigned __int8 *)sub_20B44F264(a1, *a2);
          break;
        case 8:
          v83 = *(_QWORD *)sub_20B52323C((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 5;
          theArray.__r_.__value_.__l.__size_ = v83;
          v69 = (unsigned __int8 *)sub_20B44F264(a1, *a2);
          break;
        case 0xB:
          *(double *)&v78 = *(float *)sub_20B523324((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 7;
          theArray.__r_.__value_.__l.__size_ = v78;
          v69 = (unsigned __int8 *)sub_20B44F264(a1, *a2);
          break;
        case 0xC:
          v77 = *(_QWORD *)sub_20B52340C((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 7;
          theArray.__r_.__value_.__l.__size_ = v77;
          v69 = (unsigned __int8 *)sub_20B44F264(a1, *a2);
          break;
        default:
          sub_20B521E58(__p.__r_.__value_.__s.__data_[0]);
      }
      v86 = *v69;
      *v69 = theArray.__r_.__value_.__s.__data_[0];
      theArray.__r_.__value_.__s.__data_[0] = v86;
      v87 = *((_QWORD *)v69 + 1);
      *((_QWORD *)v69 + 1) = theArray.__r_.__value_.__l.__size_;
      theArray.__r_.__value_.__l.__size_ = v87;
      sub_20B416E08((uint64_t *)&theArray.__r_.__value_.__l.__size_, v86);
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (!*((_QWORD *)&v103 + 1))
        return;
      v91 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
      do
        v67 = __ldaxr(v91);
      while (__stlxr(v67 - 1, v91));
      break;
    case 1:
      sub_20B4EE3FC((CFIndex)*a3, &__p);
      v101 = 3;
      v36 = (std::string *)operator new(0x18uLL);
      *v36 = __p;
      memset(&__p, 0, sizeof(__p));
      v102 = (uint64_t)v36;
      v37 = (unsigned __int8 *)sub_20B44F264(a1, *a2);
      v38 = *v37;
      *v37 = v101;
      v101 = v38;
      v39 = *((_QWORD *)v37 + 1);
      *((_QWORD *)v37 + 1) = v102;
      v102 = v39;
      sub_20B416E08(&v102, v38);
      if (v109 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    case 2:
      v25 = *a3;
      v27 = v25 && (v26 = CFBooleanGetTypeID(), CFGetTypeID(v25) == v26) && CFBooleanGetValue((CFBooleanRef)v25) != 0;
      v99 = 4;
      v100 = v27;
      v50 = (unsigned __int8 *)sub_20B44F264(a1, *a2);
      v51 = *v50;
      *v50 = 4;
      v99 = v51;
      v52 = *((_QWORD *)v50 + 1);
      *((_QWORD *)v50 + 1) = v100;
      v100 = v52;
      sub_20B416E08(&v100, v51);
      return;
    case 3:
      v28 = *a3;
      if (*a3 && (v29 = CFArrayGetTypeID(), CFGetTypeID(v28) == v29))
      {
        sub_20B15B4B0(&__p, *a3);
        *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v30 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          v32 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v33 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        v35 = (const __CFArray *)theArray.__r_.__value_.__r.__words[0];
      }
      else
      {
        v35 = 0;
        *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = 0uLL;
      }
      Count = CFArrayGetCount(v35);
      if (Count)
      {
        for (i = 0; i != (const __CFNumber *)Count; i = (const __CFNumber *)((char *)i + 1))
        {
          v55 = sub_20B44F264(a1, *a2);
          v104 = i;
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray.__r_.__value_.__l.__data_, (CFIndex)i);
          sub_20B15B754(&__p, ValueAtIndex);
          v98 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v57 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v58 = __ldxr(v57);
            while (__stxr(v58 + 1, v57));
            v59 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v60 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
          }
          sub_20B451DC0(v55, &v104, &v98);
          v62 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
          if (*((_QWORD *)&v98 + 1))
          {
            v63 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
        }
      }
      v65 = (std::__shared_weak_count *)theArray.__r_.__value_.__l.__size_;
      if (!theArray.__r_.__value_.__l.__size_)
        return;
      v66 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      break;
    case 4:
      v17 = *a3;
      if (*a3 && (v18 = CFDictionaryGetTypeID(), CFGetTypeID(v17) == v18))
      {
        sub_20AEEC3E8(&__p, *a3);
        *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
          v21 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v22 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
        }
        v24 = (const void *)theArray.__r_.__value_.__r.__words[0];
      }
      else
      {
        v24 = 0;
        *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = 0uLL;
      }
      v96[0] = 0;
      v97 = 0;
      sub_20AEEC3E8(&__p, v24);
      v40 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v41 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
        v43 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v44 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        do
          v46 = __ldxr(v41);
        while (__stxr(v46 + 1, v41));
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
        do
          v47 = __ldxr(v41);
        while (__stxr(v47 + 1, v41));
        do
          v48 = __ldaxr(v41);
        while (__stlxr(v48 - 1, v41));
        if (!v48)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v40 + 1) + 16))(*((_QWORD *)&v40 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v40 + 1));
        }
        do
          v49 = __ldaxr(v41);
        while (__stlxr(v49 - 1, v41));
        if (!v49)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v40 + 1) + 16))(*((_QWORD *)&v40 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v40 + 1));
        }
      }
      else
      {
        __p.__r_.__value_.__l.__size_ = 0;
      }
      sub_20B44BC80(v96, &__p);
      v70 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v71 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = (unsigned __int8 *)sub_20B44F264(a1, *a2);
      v74 = *v73;
      *v73 = v96[0];
      v96[0] = v74;
      v75 = *((_QWORD *)v73 + 1);
      *((_QWORD *)v73 + 1) = v97;
      v97 = v75;
      sub_20B416E08(&v97, v74);
      v65 = (std::__shared_weak_count *)theArray.__r_.__value_.__l.__size_;
      if (!theArray.__r_.__value_.__l.__size_)
        return;
      v76 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
      do
        v67 = __ldaxr(v76);
      while (__stlxr(v67 - 1, v76));
      break;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v94 = CFGetTypeID(*a3);
      sub_20B4F6600(v94, &theArray);
      sub_20B1F16DC("Dictionary to convert to json must only contain Number, String, Bool, Array or Dictionary, but has ", &theArray, &__p);
      std::logic_error::logic_error(exception, &__p);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
}

void sub_20B452730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *__p,uint64_t a32,char a33)
{
  uint64_t *v33;

  sub_20B416E08(v33, a10);
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20AEC147C((uint64_t)&a26);
  sub_20AEC147C((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_20B4528E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  sub_20AECD704((uint64_t)&a27);
  sub_20AEC147C((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_20B452900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B452914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B452928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B452944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B452958(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p[2];
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  v13 = 10;
  strcpy((char *)__p, "type_error");
  sub_20B452E08((const void **)__p, a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  *(_QWORD *)a3 = &off_24C41D9D8;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(_QWORD *)a3 = &off_24C41DA18;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20B452A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;

  std::exception::~exception(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const char *sub_20B452AD0(char *a1)
{
  unint64_t v1;

  v1 = *a1;
  if (v1 > 9)
    return "number";
  else
    return off_24C41DAF0[v1];
}

void sub_20B452AF8(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24C41D9D8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t **sub_20B452B28(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  char *v21;
  _BYTE *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = (char *)operator new(0x48uLL);
  v22 = v21 + 32;
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_20AEC60F4(v22, *(void **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    *((_QWORD *)v21 + 6) = *((_QWORD *)v23 + 2);
    *(_OWORD *)v22 = v24;
  }
  v21[56] = 0;
  *((_QWORD *)v21 + 8) = 0;
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = v11;
  *v7 = (uint64_t *)v21;
  v25 = (uint64_t *)**a1;
  v26 = (uint64_t *)v21;
  if (v25)
  {
    *a1 = v25;
    v26 = *v7;
  }
  sub_20AEC84C8(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_20B452CA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B452CB8(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      sub_20B416E08((uint64_t *)(v2 + 64), *(unsigned __int8 *)(v2 + 56));
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

_BYTE *sub_20B452D10(_BYTE *result, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  _QWORD *v6;

  v2 = result;
  switch(a2)
  {
    case 1:
      v3 = operator new(0x18uLL);
      v3[2] = 0;
      v3[1] = 0;
      *v3 = v3 + 1;
      *v2 = v3;
      result = v2;
      break;
    case 2:
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      *v2 = v4;
      result = v2;
      break;
    case 3:
      v5 = operator new(0x18uLL);
      v5[23] = 0;
      *v5 = 0;
      *v2 = v5;
      result = v2;
      break;
    case 4:
      *result = 0;
      break;
    case 8:
      v6 = operator new(0x20uLL);
      v6[1] = 0;
      v6[2] = 0;
      *v6 = 0;
      *((_WORD *)v6 + 12) = 0;
      *v2 = v6;
      result = v2;
      break;
    default:
      *(_QWORD *)result = 0;
      break;
  }
  return result;
}

void sub_20B452E08(const void **a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  int v4;
  size_t v5;
  unint64_t v6;
  std::string::value_type *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  const void *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  v6 = v5 + 16;
  if (v5 + 16 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    v9 = (std::string::value_type *)(v12 + 1);
    v22.__r_.__value_.__l.__size_ = v5 + 16;
    v22.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    *v12 = *(_OWORD *)"[json.exception.";
  }
  else
  {
    v9 = &v22.__r_.__value_.__s.__data_[16];
    v22.__r_.__value_.__r.__words[2] = 0;
    *((_BYTE *)&v22.__r_.__value_.__s + 23) = v5 + 16;
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)"[json.exception.";
    if (!v5)
      goto LABEL_15;
  }
  if (v4 >= 0)
    v13 = a1;
  else
    v13 = *a1;
  memmove(v9, v13, v5);
LABEL_15:
  v9[v5] = 0;
  v14 = std::string::append(&v22, ".", 1uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v21, a2);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v21;
  else
    v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    size = v21.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v23, (const std::string::value_type *)v16, size);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v24, "] ", 2uLL);
  *a3 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(v22.__r_.__value_.__l.__data_);
    return;
  }
LABEL_28:
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_29;
}

void sub_20B453000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

const char *sub_20B45309C(const std::runtime_error *a1)
{
  return std::runtime_error::what(a1 + 1);
}

void sub_20B4530A4(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24C41D9D8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_20B4530D4(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24C41D9D8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B453118(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24C41D9D8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x20BD3583CLL);
}

char *sub_20B45315C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  char *v5;
  void *exception;
  char *v8;
  std::string v9;
  std::string v10;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v8 = (char *)sub_20B452AD0((char *)a1);
      sub_20AEC0D64(&v9, v8);
      sub_20B1F16DC("cannot use operator[] with a string argument with ", &v9, &v10);
      sub_20B452958(305, (uint64_t)&v10, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
    }
    v4 = *(uint64_t **)(a1 + 8);
  }
  else
  {
    *(_BYTE *)a1 = 1;
    v4 = (uint64_t *)operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v10.__r_.__value_.__s.__data_[0] = 0;
  v10.__r_.__value_.__l.__size_ = 0;
  v5 = sub_20B453E7C(v4, a2, (unsigned __int8 *)&v10) + 24;
  sub_20B4181DC((void ***)&v10.__r_.__value_.__l.__size_, v10.__r_.__value_.__s.__data_[0]);
  return v5;
}

void sub_20B453258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  void ***v12;
  void ***v13;

  v13 = v12;
  sub_20B4181DC(v13, a12);
  _Unwind_Resume(a1);
}

void sub_20B453274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void sub_20B4532E4(uint64_t a1, unint64_t *a2, CFTypeRef *a3)
{
  int data_low;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  CFTypeRef v10;
  CFTypeID TypeID;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  CFTypeRef v17;
  CFTypeID v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  const __CFBoolean *v25;
  CFTypeID v26;
  void **v27;
  CFTypeRef v28;
  CFTypeID v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const __CFArray *v35;
  void **v36;
  unsigned __int8 *v37;
  int v38;
  void **v39;
  __int128 v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int8 *v50;
  int v51;
  void **v52;
  CFIndex Count;
  const __CFNumber *i;
  uint64_t v55;
  const void *ValueAtIndex;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string::size_type v68;
  unsigned __int8 *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unsigned __int8 *v73;
  int v74;
  void **v75;
  unint64_t *v76;
  std::string::size_type v77;
  std::string::size_type v78;
  std::string::size_type v79;
  std::string::size_type v80;
  std::string::size_type v81;
  std::string::size_type v82;
  std::string::size_type v83;
  std::string::size_type v84;
  std::string::size_type v85;
  int v86;
  std::string::size_type v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  uint64_t v92;
  std::logic_error *exception;
  CFTypeID v94;
  std::string theArray;
  _BYTE v96[8];
  void **v97;
  __int128 v98;
  char v99;
  void **v100;
  char v101;
  void **v102;
  __int128 v103;
  CFNumberRef v104;
  std::__shared_weak_count *v105;
  const void *v106;
  std::__shared_weak_count *v107;
  std::string __p;
  char v109;
  char v110;

  sub_20B161578(&v106, (uint64_t)a3);
  sub_20B44F790(&v106, (uint64_t)&__p);
  if (!v110)
  {
    v92 = sub_20B0B52D8((uint64_t)&__p);
    sub_20B0BFB50(v92);
  }
  data_low = LOWORD(__p.__r_.__value_.__l.__data_);
  v7 = v107;
  if (v107)
  {
    p_shared_owners = (unint64_t *)&v107->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  switch(data_low)
  {
    case 0:
      v10 = *a3;
      if (*a3 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v10) == TypeID))
      {
        sub_20B15B25C(&theArray, *a3);
        v103 = *(_OWORD *)&theArray.__r_.__value_.__l.__data_;
        if (theArray.__r_.__value_.__l.__size_)
        {
          v12 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
          size = (std::__shared_weak_count *)theArray.__r_.__value_.__l.__size_;
          if (theArray.__r_.__value_.__l.__size_)
          {
            v15 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
      }
      else
      {
        v103 = 0uLL;
      }
      sub_20B15B3A0(&v104, (uint64_t)&v103);
      sub_20B4F5FA8(&v104);
      switch(__p.__r_.__value_.__s.__data_[0])
      {
        case 0:
          v68 = *(unsigned __int8 *)sub_20B522A74((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 6;
          theArray.__r_.__value_.__l.__size_ = v68;
          v69 = (unsigned __int8 *)sub_20B44F5D4(a1, *a2);
          break;
        case 1:
          v80 = *(unsigned __int16 *)sub_20B522CCC((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 6;
          theArray.__r_.__value_.__l.__size_ = v80;
          v69 = (unsigned __int8 *)sub_20B44F5D4(a1, *a2);
          break;
        case 2:
          v82 = *(unsigned int *)sub_20B522DB4((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 6;
          theArray.__r_.__value_.__l.__size_ = v82;
          v69 = (unsigned __int8 *)sub_20B44F5D4(a1, *a2);
          break;
        case 3:
          v84 = *(_QWORD *)sub_20B522E9C((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 6;
          theArray.__r_.__value_.__l.__size_ = v84;
          v69 = (unsigned __int8 *)sub_20B44F5D4(a1, *a2);
          break;
        case 5:
          v79 = *(char *)sub_20B522F84((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 5;
          theArray.__r_.__value_.__l.__size_ = v79;
          v69 = (unsigned __int8 *)sub_20B44F5D4(a1, *a2);
          break;
        case 6:
          v81 = *(__int16 *)sub_20B52306C((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 5;
          theArray.__r_.__value_.__l.__size_ = v81;
          v69 = (unsigned __int8 *)sub_20B44F5D4(a1, *a2);
          break;
        case 7:
          v85 = *(int *)sub_20B523154((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 5;
          theArray.__r_.__value_.__l.__size_ = v85;
          v69 = (unsigned __int8 *)sub_20B44F5D4(a1, *a2);
          break;
        case 8:
          v83 = *(_QWORD *)sub_20B52323C((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 5;
          theArray.__r_.__value_.__l.__size_ = v83;
          v69 = (unsigned __int8 *)sub_20B44F5D4(a1, *a2);
          break;
        case 0xB:
          *(double *)&v78 = *(float *)sub_20B523324((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 7;
          theArray.__r_.__value_.__l.__size_ = v78;
          v69 = (unsigned __int8 *)sub_20B44F5D4(a1, *a2);
          break;
        case 0xC:
          v77 = *(_QWORD *)sub_20B52340C((uint64_t)&__p);
          theArray.__r_.__value_.__s.__data_[0] = 7;
          theArray.__r_.__value_.__l.__size_ = v77;
          v69 = (unsigned __int8 *)sub_20B44F5D4(a1, *a2);
          break;
        default:
          sub_20B521E58(__p.__r_.__value_.__s.__data_[0]);
      }
      v86 = *v69;
      *v69 = theArray.__r_.__value_.__s.__data_[0];
      theArray.__r_.__value_.__s.__data_[0] = v86;
      v87 = *((_QWORD *)v69 + 1);
      *((_QWORD *)v69 + 1) = theArray.__r_.__value_.__l.__size_;
      theArray.__r_.__value_.__l.__size_ = v87;
      sub_20B4181DC((void ***)&theArray.__r_.__value_.__l.__size_, v86);
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (!*((_QWORD *)&v103 + 1))
        return;
      v91 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
      do
        v67 = __ldaxr(v91);
      while (__stlxr(v67 - 1, v91));
      break;
    case 1:
      sub_20B4EE3FC((CFIndex)*a3, &__p);
      v101 = 3;
      v36 = (void **)operator new(0x18uLL);
      *(std::string *)v36 = __p;
      memset(&__p, 0, sizeof(__p));
      v102 = v36;
      v37 = (unsigned __int8 *)sub_20B44F5D4(a1, *a2);
      v38 = *v37;
      *v37 = v101;
      v101 = v38;
      v39 = (void **)*((_QWORD *)v37 + 1);
      *((_QWORD *)v37 + 1) = v102;
      v102 = v39;
      sub_20B4181DC(&v102, v38);
      if (v109 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    case 2:
      v25 = (const __CFBoolean *)*a3;
      if (v25 && (v26 = CFBooleanGetTypeID(), CFGetTypeID(v25) == v26))
        v27 = (void **)(CFBooleanGetValue(v25) != 0);
      else
        v27 = 0;
      v99 = 4;
      v100 = v27;
      v50 = (unsigned __int8 *)sub_20B44F5D4(a1, *a2);
      v51 = *v50;
      *v50 = 4;
      v99 = v51;
      v52 = (void **)*((_QWORD *)v50 + 1);
      *((_QWORD *)v50 + 1) = v100;
      v100 = v52;
      sub_20B4181DC(&v100, v51);
      return;
    case 3:
      v28 = *a3;
      if (*a3 && (v29 = CFArrayGetTypeID(), CFGetTypeID(v28) == v29))
      {
        sub_20B15B4B0(&__p, *a3);
        *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v30 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          v32 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v33 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        v35 = (const __CFArray *)theArray.__r_.__value_.__r.__words[0];
      }
      else
      {
        v35 = 0;
        *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = 0uLL;
      }
      Count = CFArrayGetCount(v35);
      if (Count)
      {
        for (i = 0; i != (const __CFNumber *)Count; i = (const __CFNumber *)((char *)i + 1))
        {
          v55 = sub_20B44F5D4(a1, *a2);
          v104 = i;
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray.__r_.__value_.__l.__data_, (CFIndex)i);
          sub_20B15B754(&__p, ValueAtIndex);
          v98 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v57 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v58 = __ldxr(v57);
            while (__stxr(v58 + 1, v57));
            v59 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v60 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
          }
          sub_20B4532E4(v55, &v104, &v98);
          v62 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
          if (*((_QWORD *)&v98 + 1))
          {
            v63 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
        }
      }
      v65 = (std::__shared_weak_count *)theArray.__r_.__value_.__l.__size_;
      if (!theArray.__r_.__value_.__l.__size_)
        return;
      v66 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      break;
    case 4:
      v17 = *a3;
      if (*a3 && (v18 = CFDictionaryGetTypeID(), CFGetTypeID(v17) == v18))
      {
        sub_20AEEC3E8(&__p, *a3);
        *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
          v21 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v22 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
        }
        v24 = (const void *)theArray.__r_.__value_.__r.__words[0];
      }
      else
      {
        v24 = 0;
        *(_OWORD *)&theArray.__r_.__value_.__l.__data_ = 0uLL;
      }
      v96[0] = 0;
      v97 = 0;
      sub_20AEEC3E8(&__p, v24);
      v40 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v41 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
        v43 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v44 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        do
          v46 = __ldxr(v41);
        while (__stxr(v46 + 1, v41));
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
        do
          v47 = __ldxr(v41);
        while (__stxr(v47 + 1, v41));
        do
          v48 = __ldaxr(v41);
        while (__stlxr(v48 - 1, v41));
        if (!v48)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v40 + 1) + 16))(*((_QWORD *)&v40 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v40 + 1));
        }
        do
          v49 = __ldaxr(v41);
        while (__stlxr(v49 - 1, v41));
        if (!v49)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v40 + 1) + 16))(*((_QWORD *)&v40 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v40 + 1));
        }
      }
      else
      {
        __p.__r_.__value_.__l.__size_ = 0;
      }
      sub_20B44CCD8(v96, &__p);
      v70 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v71 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = (unsigned __int8 *)sub_20B44F5D4(a1, *a2);
      v74 = *v73;
      *v73 = v96[0];
      v96[0] = v74;
      v75 = (void **)*((_QWORD *)v73 + 1);
      *((_QWORD *)v73 + 1) = v97;
      v97 = v75;
      sub_20B4181DC(&v97, v74);
      v65 = (std::__shared_weak_count *)theArray.__r_.__value_.__l.__size_;
      if (!theArray.__r_.__value_.__l.__size_)
        return;
      v76 = (unint64_t *)(theArray.__r_.__value_.__l.__size_ + 8);
      do
        v67 = __ldaxr(v76);
      while (__stlxr(v67 - 1, v76));
      break;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v94 = CFGetTypeID(*a3);
      sub_20B4F6600(v94, &theArray);
      sub_20B1F16DC("Dictionary to convert to json must only contain Number, String, Bool, Array or Dictionary, but has ", &theArray, &__p);
      std::logic_error::logic_error(exception, &__p);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
}

void sub_20B453C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *__p,uint64_t a32,char a33)
{
  void ***v33;

  sub_20B4181DC(v33, a10);
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20AEC147C((uint64_t)&a26);
  sub_20AEC147C((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_20B453E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  sub_20AECD704((uint64_t)&a27);
  sub_20AEC147C((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_20B453E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B453E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B453E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B453E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B453E7C(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char *v15;

  v7 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    v8 = *(_BYTE *)(a2 + 23);
    if (v8 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    if (v8 >= 0)
      v10 = (unsigned __int8 *)a2;
    else
      v10 = *(unsigned __int8 **)a2;
    do
    {
      v11 = *(unsigned __int8 *)(v7 + 23);
      if ((v11 & 0x80u) == 0)
        v12 = *(unsigned __int8 *)(v7 + 23);
      else
        v12 = *(_QWORD *)(v7 + 8);
      if (v12 == v9)
      {
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v7, v10, *(_QWORD *)(v7 + 8)))
            return (char *)v7;
        }
        else
        {
          if (!*(_BYTE *)(v7 + 23))
            return (char *)v7;
          v13 = 0;
          while (*(unsigned __int8 *)(v7 + v13) == v10[v13])
          {
            if (v11 == ++v13)
              return (char *)v7;
          }
        }
      }
      v7 += 40;
    }
    while (v7 != v6);
  }
  if (v6 >= a1[2])
  {
    v15 = sub_20B453FDC(a1, a2, a3);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20AEC60F4((_BYTE *)v6, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v14 = *(_OWORD *)a2;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v6 = v14;
    }
    sub_20B4541AC(v6 + 24, a3);
    v15 = (char *)(v6 + 40);
    a1[1] = v6 + 40;
  }
  a1[1] = (uint64_t)v15;
  return v15 - 40;
}

void sub_20B453FB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B453FBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *sub_20B453FDC(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  _BYTE *v9;
  char *v10;
  void ***v11;
  void ***v12;
  uint64_t v13;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    sub_20B41750C();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v5)
    v5 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_20AEC60CC();
    v9 = operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20AEC60F4(&v9[40 * v4], *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  }
  sub_20B4541AC((uint64_t)&v9[40 * v4 + 24], a3);
  sub_20B4547B4((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, (uint64_t)&v9[40 * v4], (uint64_t)&v9[40 * v4]);
  v11 = (void ***)*a1;
  v12 = (void ***)a1[1];
  *a1 = v13;
  a1[1] = (uint64_t)(v10 + 40);
  a1[2] = (uint64_t)&v9[40 * v8];
  while (v12 != v11)
  {
    sub_20B4181DC(v12 - 1, *((unsigned __int8 *)v12 - 16));
    if (*((char *)v12 - 17) < 0)
      operator delete(*(v12 - 5));
    v12 -= 5;
  }
  if (v11)
    operator delete(v11);
  return v10 + 40;
}

void sub_20B454174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
  {
    operator delete(*(void **)v2);
    sub_20B454744((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_20B454744((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4541AC(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  char *v12;
  char *v13;
  __int128 **v14;
  uint64_t *v15;

  v3 = *a2;
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  switch(v3)
  {
    case 1:
      v14 = (__int128 **)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      sub_20B454380(v4, *v14, v14[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v14[1] - (char *)*v14) >> 3));
      goto LABEL_13;
    case 2:
      v15 = (uint64_t *)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      sub_20B454544(v4, *v15, v15[1], (v15[1] - *v15) >> 4);
      goto LABEL_13;
    case 3:
      v5 = (__int128 *)*((_QWORD *)a2 + 1);
      v6 = operator new(0x18uLL);
      v4 = v6;
      if (*((char *)v5 + 23) < 0)
      {
        sub_20AEC60F4(v6, *(void **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        *((_QWORD *)v6 + 2) = *((_QWORD *)v5 + 2);
        *v6 = v7;
      }
      goto LABEL_13;
    case 4:
      v4 = (_QWORD *)a2[8];
      goto LABEL_13;
    case 5:
    case 6:
    case 7:
      v4 = (_QWORD *)*((_QWORD *)a2 + 1);
      goto LABEL_13;
    case 8:
      v8 = *((_QWORD *)a2 + 1);
      v4 = operator new(0x20uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      v10 = *(const void **)v8;
      v9 = *(_QWORD *)(v8 + 8);
      v11 = v9 - *(_QWORD *)v8;
      if (v9 != *(_QWORD *)v8)
      {
        if ((v11 & 0x8000000000000000) != 0)
          sub_20AF4BAC0();
        v12 = (char *)operator new(v9 - *(_QWORD *)v8);
        *v4 = v12;
        v13 = &v12[v11];
        v4[2] = &v12[v11];
        memcpy(v12, v10, v11);
        v4[1] = v13;
      }
      *((_WORD *)v4 + 12) = *(_WORD *)(v8 + 24);
LABEL_13:
      *(_QWORD *)(a1 + 8) = v4;
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_20B454320(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B454334(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B454348(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B45435C(_Unwind_Exception *a1)
{
  void **v1;
  void *v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    operator delete(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B454380(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  __int128 v9;
  _QWORD *v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x666666666666667)
      sub_20B41750C();
    result = operator new(40 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[5 * a4];
    v10 = result;
    if (a2 == a3)
    {
      v8 = result;
    }
    else
    {
      v8 = result;
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          sub_20AEC60F4(v8, *(void **)a2, *((_QWORD *)a2 + 1));
        }
        else
        {
          v9 = *a2;
          v8[2] = *((_QWORD *)a2 + 2);
          *(_OWORD *)v8 = v9;
        }
        result = (_QWORD *)sub_20B4541AC(v8 + 3, (char *)a2 + 24);
        a2 = (__int128 *)((char *)a2 + 40);
        v8 = v10 + 5;
        v10 += 5;
      }
      while (a2 != a3);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20B45448C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20B41813C(&a9);
  _Unwind_Resume(a1);
}

void sub_20B4544A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_20B4544D8((uint64_t)&a11);
  *(_QWORD *)(v11 + 8) = v12;
  sub_20B41813C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4544D8(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      sub_20B4181DC((void ***)(v3 - 8), *(unsigned __int8 *)(v3 - 16));
      if (*(char *)(v3 - 17) < 0)
        operator delete(*(void **)(v3 - 40));
      v3 -= 40;
    }
  }
  return a1;
}

_QWORD *sub_20B454544(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *i;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      sub_20B41750C();
    result = operator new(16 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    for (i = result; a2 != a3; i += 2)
    {
      sub_20B4541AC(result, a2);
      a2 += 16;
      result = i + 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_20B454610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20B454644(&a9);
  _Unwind_Resume(a1);
}

void sub_20B454624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_20B4546E0((uint64_t)&a11);
  *(_QWORD *)(v11 + 8) = v12;
  sub_20B454644(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20B454644(void ***result)
{
  void ***v1;
  void **v2;
  void ***v3;
  void ***v4;
  void *v5;
  void ***v6;
  void ***v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void ***)**result;
    if (v3)
    {
      v4 = (void ***)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = v4 - 1;
        do
        {
          v7 = v6 - 1;
          sub_20B4181DC(v6, *((unsigned __int8 *)v6 - 8));
          v6 -= 2;
        }
        while (v7 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B4546E0(uint64_t a1)
{
  void ***v2;
  void ***v3;
  void ***v4;
  void ***v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(void *****)(a1 + 16);
    v3 = **(void *****)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 1;
      do
      {
        v5 = v4 - 1;
        sub_20B4181DC(v4, *((unsigned __int8 *)v4 - 8));
        v4 -= 2;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

uint64_t sub_20B454744(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    sub_20B4181DC((void ***)(i - 8), *(unsigned __int8 *)(i - 16));
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B4547B4(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  void **v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;

  v7 = a7;
  v13 = a6;
  v14 = a7;
  if (a3 != a5)
  {
    v9 = (void **)a3;
    do
    {
      v10 = (__int128 *)(v9 - 5);
      if (*((char *)v9 - 17) < 0)
      {
        sub_20AEC60F4((_BYTE *)(v7 - 40), *(v9 - 5), (unint64_t)*(v9 - 4));
      }
      else
      {
        v11 = *v10;
        *(_QWORD *)(v7 - 24) = *(v9 - 3);
        *(_OWORD *)(v7 - 40) = v11;
      }
      sub_20B4541AC(v7 - 16, (unsigned __int8 *)v9 - 16);
      v7 = v14 - 40;
      v14 -= 40;
      v9 -= 5;
    }
    while (v10 != a5);
    return v13;
  }
  return a6;
}

void sub_20B454878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B4548B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B45488C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;

  if (*(char *)(v9 - 17) < 0)
    operator delete(*v10);
  sub_20B4548B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4548B0(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      sub_20B4181DC((void ***)(v3 + 32), *(unsigned __int8 *)(v3 + 24));
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      v3 += 40;
    }
  }
  return a1;
}

uint64_t sub_20B45491C(uint64_t a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*(_BYTE *)a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_20B452AD0((char *)a1);
    sub_20AEC0D64(&v6, v5);
    sub_20B1F16DC("cannot use operator[] with a numeric argument with ", &v6, &v7);
    sub_20B452958(305, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  return **(_QWORD **)(a1 + 8) + 16 * a2;
}

void sub_20B4549C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

_QWORD *sub_20B454A28(_QWORD *a1, const void *a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v16;
  std::__shared_weak_count *v17;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_20B15B754(&v16, a2);
  v6 = v17;
  *a1 = v16;
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = v17;
    if (v17)
    {
      v10 = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  if (!a3)
    return a1;
  v12 = (unint64_t *)&a3->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
  std::__shared_weak_count::__release_weak(a3);
  return a1;
}

void sub_20B454B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_20B454B2C(char *a1, _QWORD *a2)
{
  int v3;
  double result;
  void *exception;
  char *v6;
  std::string v7;
  std::string v8;

  v3 = *a1;
  if (v3 == 5)
    goto LABEL_4;
  if (v3 != 7)
  {
    if (v3 != 6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v6 = (char *)sub_20B452AD0(a1);
      sub_20AEC0D64(&v7, v6);
      sub_20B1F16DC("type must be number, but is ", &v7, &v8);
      sub_20B452958(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
    }
LABEL_4:
    *a2 = *((_QWORD *)a1 + 1);
    return result;
  }
  result = *((double *)a1 + 1);
  *a2 = (unint64_t)result;
  return result;
}

void sub_20B454C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

double sub_20B454C74(char *a1, _QWORD *a2)
{
  int v3;
  double result;
  void *exception;
  char *v6;
  std::string v7;
  std::string v8;

  v3 = *a1;
  if (v3 == 5)
    goto LABEL_4;
  if (v3 != 7)
  {
    if (v3 != 6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v6 = (char *)sub_20B452AD0(a1);
      sub_20AEC0D64(&v7, v6);
      sub_20B1F16DC("type must be number, but is ", &v7, &v8);
      sub_20B452958(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
    }
LABEL_4:
    *a2 = *((_QWORD *)a1 + 1);
    return result;
  }
  result = *((double *)a1 + 1);
  *a2 = (uint64_t)result;
  return result;
}

void sub_20B454D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

double sub_20B454DBC(uint64_t *a1, double *a2)
{
  int v3;
  double result;
  void *exception;
  char *v6;
  std::string v7;
  std::string v8;

  v3 = *(unsigned __int8 *)a1;
  switch(v3)
  {
    case 5:
      result = (double)a1[1];
      *a2 = result;
      break;
    case 7:
      result = *((double *)a1 + 1);
      *a2 = result;
      break;
    case 6:
      result = (double)(unint64_t)a1[1];
      *a2 = result;
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      v6 = (char *)sub_20B452AD0((char *)a1);
      sub_20AEC0D64(&v7, v6);
      sub_20B1F16DC("type must be number, but is ", &v7, &v8);
      sub_20B452958(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  return result;
}

void sub_20B454EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

char *sub_20B454F24(char *result, _BYTE *a2)
{
  char *v2;
  void *exception;
  char *v4;
  std::string v5;
  std::string v6;

  v2 = result;
  if (*result != 4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = (char *)sub_20B452AD0(v2);
    sub_20AEC0D64(&v5, v4);
    sub_20B1F16DC("type must be BOOLean, but is ", &v5, &v6);
    sub_20B452958(302, (uint64_t)&v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  *a2 = result[8];
  return result;
}

void sub_20B454FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void **sub_20B45502C(void **result, uint64_t a2)
{
  char *v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  __int128 v5;
  void *v6;
  size_t v7;
  void *exception;
  char *v9;
  std::string v10;
  std::string v11;

  v2 = (char *)result;
  if (*(_BYTE *)result != 3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v9 = (char *)sub_20B452AD0(v2);
    sub_20AEC0D64(&v10, v9);
    sub_20B1F16DC("type must be string, but is ", &v10, &v11);
    sub_20B452958(302, (uint64_t)&v11, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  v3 = (unsigned __int8 *)result[1];
  if (v3 != (unsigned __int8 *)a2)
  {
    v4 = v3[23];
    if (*(char *)(a2 + 23) < 0)
    {
      if ((v4 & 0x80u) == 0)
        v6 = result[1];
      else
        v6 = *(void **)v3;
      if ((v4 & 0x80u) == 0)
        v7 = v3[23];
      else
        v7 = *((_QWORD *)v3 + 1);
      return sub_20AEC8090((void **)a2, v6, v7);
    }
    else if ((v3[23] & 0x80) != 0)
    {
      return (void **)sub_20AEC7FCC((_QWORD *)a2, *(void **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v5 = *(_OWORD *)v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
    }
  }
  return result;
}

void sub_20B455148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B4551B8(uint64_t a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*(_BYTE *)a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_20B452AD0((char *)a1);
    sub_20AEC0D64(&v6, v5);
    sub_20B1F16DC("cannot use operator[] with a numeric argument with ", &v6, &v7);
    sub_20B452958(305, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  return **(_QWORD **)(a1 + 8) + 16 * a2;
}

void sub_20B455264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_20B4552C4(char *a1, _QWORD *a2)
{
  int v3;
  double result;
  void *exception;
  char *v6;
  std::string v7;
  std::string v8;

  v3 = *a1;
  if (v3 == 5)
    goto LABEL_4;
  if (v3 != 7)
  {
    if (v3 != 6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v6 = (char *)sub_20B452AD0(a1);
      sub_20AEC0D64(&v7, v6);
      sub_20B1F16DC("type must be number, but is ", &v7, &v8);
      sub_20B452958(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
    }
LABEL_4:
    *a2 = *((_QWORD *)a1 + 1);
    return result;
  }
  result = *((double *)a1 + 1);
  *a2 = (unint64_t)result;
  return result;
}

void sub_20B45539C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

double sub_20B45540C(char *a1, _QWORD *a2)
{
  int v3;
  double result;
  void *exception;
  char *v6;
  std::string v7;
  std::string v8;

  v3 = *a1;
  if (v3 == 5)
    goto LABEL_4;
  if (v3 != 7)
  {
    if (v3 != 6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v6 = (char *)sub_20B452AD0(a1);
      sub_20AEC0D64(&v7, v6);
      sub_20B1F16DC("type must be number, but is ", &v7, &v8);
      sub_20B452958(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
    }
LABEL_4:
    *a2 = *((_QWORD *)a1 + 1);
    return result;
  }
  result = *((double *)a1 + 1);
  *a2 = (uint64_t)result;
  return result;
}

void sub_20B4554E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

double sub_20B455554(uint64_t *a1, double *a2)
{
  int v3;
  double result;
  void *exception;
  char *v6;
  std::string v7;
  std::string v8;

  v3 = *(unsigned __int8 *)a1;
  switch(v3)
  {
    case 5:
      result = (double)a1[1];
      *a2 = result;
      break;
    case 7:
      result = *((double *)a1 + 1);
      *a2 = result;
      break;
    case 6:
      result = (double)(unint64_t)a1[1];
      *a2 = result;
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      v6 = (char *)sub_20B452AD0((char *)a1);
      sub_20AEC0D64(&v7, v6);
      sub_20B1F16DC("type must be number, but is ", &v7, &v8);
      sub_20B452958(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  return result;
}

void sub_20B45564C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

char *sub_20B4556BC(char *result, _BYTE *a2)
{
  char *v2;
  void *exception;
  char *v4;
  std::string v5;
  std::string v6;

  v2 = result;
  if (*result != 4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = (char *)sub_20B452AD0(v2);
    sub_20AEC0D64(&v5, v4);
    sub_20B1F16DC("type must be BOOLean, but is ", &v5, &v6);
    sub_20B452958(302, (uint64_t)&v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  *a2 = result[8];
  return result;
}

void sub_20B455764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void **sub_20B4557C4(void **result, uint64_t a2)
{
  char *v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  __int128 v5;
  void *v6;
  size_t v7;
  void *exception;
  char *v9;
  std::string v10;
  std::string v11;

  v2 = (char *)result;
  if (*(_BYTE *)result != 3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v9 = (char *)sub_20B452AD0(v2);
    sub_20AEC0D64(&v10, v9);
    sub_20B1F16DC("type must be string, but is ", &v10, &v11);
    sub_20B452958(302, (uint64_t)&v11, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  v3 = (unsigned __int8 *)result[1];
  if (v3 != (unsigned __int8 *)a2)
  {
    v4 = v3[23];
    if (*(char *)(a2 + 23) < 0)
    {
      if ((v4 & 0x80u) == 0)
        v6 = result[1];
      else
        v6 = *(void **)v3;
      if ((v4 & 0x80u) == 0)
        v7 = v3[23];
      else
        v7 = *((_QWORD *)v3 + 1);
      return sub_20AEC8090((void **)a2, v6, v7);
    }
    else if ((v3[23] & 0x80) != 0)
    {
      return (void **)sub_20AEC7FCC((_QWORD *)a2, *(void **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v5 = *(_OWORD *)v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
    }
  }
  return result;
}

void sub_20B4558E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B455950(uint64_t a1)
{
  void *exception;
  _QWORD v3[3];

  if (**(_BYTE **)a1 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20AEC0D64(v3, "cannot use key() for non-object iterators");
    sub_20B455C8C(207, (uint64_t)v3, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41DA48, (void (*)(void *))sub_20B455DFC);
  }
  return *(_QWORD *)(a1 + 8) + 32;
}

void sub_20B4559E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_20B455A18(uint64_t a1, void *key, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *value;
  std::__shared_weak_count *v20;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return;
  sub_20B161578(&value, a3);
  v12 = value;
  v11 = v20;
  if (!v20)
    goto LABEL_16;
  v13 = (unint64_t *)&v20->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
  {
LABEL_16:
    if (!v12)
      goto LABEL_18;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (v12)
LABEL_17:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_18:
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20B455B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20B455B8C(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *exception;
  _QWORD v7[3];

  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20AEC0D64(v7, "cannot compare iterators of different containers");
    sub_20B455C8C(212, (uint64_t)v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41DA48, (void (*)(void *))sub_20B455DFC);
  }
  v2 = **a1;
  if (v2 == 2)
  {
    v3 = a1[2];
    v4 = a2[2];
  }
  else if (v2 == 1)
  {
    v3 = a1[1];
    v4 = a2[1];
  }
  else
  {
    v3 = a1[3];
    v4 = a2[3];
  }
  return v3 == v4;
}

void sub_20B455C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_20B455C8C(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  char __p[17];
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  v13 = 16;
  strcpy(__p, "invalid_iterator");
  sub_20B452E08((const void **)__p, a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)__p);
LABEL_9:
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  *(_QWORD *)a3 = &off_24C41D9D8;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(_QWORD *)a3 = &off_24C41DA70;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20B455DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;

  std::exception::~exception(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B455DFC(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24C41D9D8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_20B455E2C(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24C41D9D8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x20BD3583CLL);
}

_BYTE *sub_20B455E70(uint64_t a1)
{
  _BYTE *result;
  int v3;
  void *v4;
  void *exception;
  _QWORD v6[3];

  result = *(_BYTE **)a1;
  v3 = *result;
  if (v3 == 1)
    return (_BYTE *)(*(_QWORD *)(a1 + 8) + 56);
  if (v3 == 2)
    return *(_BYTE **)(a1 + 16);
  if (!*result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20AEC0D64(v6, "cannot get value");
    sub_20B455C8C(214, (uint64_t)v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41DA48, (void (*)(void *))sub_20B455DFC);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v4 = __cxa_allocate_exception(0x20uLL);
    sub_20AEC0D64(v6, "cannot get value");
    sub_20B455C8C(214, (uint64_t)v6, (uint64_t)v4);
    __cxa_throw(v4, (struct type_info *)&unk_24C41DA48, (void (*)(void *))sub_20B455DFC);
  }
  return result;
}

void sub_20B455F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B455FD8(uint64_t a1)
{
  void *exception;
  _QWORD v3[3];

  if (**(_BYTE **)a1 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20AEC0D64(v3, "cannot use key() for non-object iterators");
    sub_20B455C8C(207, (uint64_t)v3, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41DA48, (void (*)(void *))sub_20B455DFC);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B456064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

BOOL sub_20B45609C(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *exception;
  _QWORD v7[3];

  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20AEC0D64(v7, "cannot compare iterators of different containers");
    sub_20B455C8C(212, (uint64_t)v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41DA48, (void (*)(void *))sub_20B455DFC);
  }
  v2 = **a1;
  if (v2 == 2)
  {
    v3 = a1[2];
    v4 = a2[2];
  }
  else if (v2 == 1)
  {
    v3 = a1[1];
    v4 = a2[1];
  }
  else
  {
    v3 = a1[3];
    v4 = a2[3];
  }
  return v3 == v4;
}

void sub_20B456160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

_BYTE *sub_20B45619C(uint64_t a1)
{
  _BYTE *result;
  int v3;
  void *v4;
  void *exception;
  _QWORD v6[3];

  result = *(_BYTE **)a1;
  v3 = *result;
  if (v3 == 1)
    return (_BYTE *)(*(_QWORD *)(a1 + 8) + 24);
  if (v3 == 2)
    return *(_BYTE **)(a1 + 16);
  if (!*result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20AEC0D64(v6, "cannot get value");
    sub_20B455C8C(214, (uint64_t)v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41DA48, (void (*)(void *))sub_20B455DFC);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v4 = __cxa_allocate_exception(0x20uLL);
    sub_20AEC0D64(v6, "cannot get value");
    sub_20B455C8C(214, (uint64_t)v6, (uint64_t)v4);
    __cxa_throw(v4, (struct type_info *)&unk_24C41DA48, (void (*)(void *))sub_20B455DFC);
  }
  return result;
}

void sub_20B4562C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B456304(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v8;
  _BYTE **v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  const void **v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  const void *v23;
  size_t v24;
  uint64_t *v25;
  _QWORD *v26;
  const void *v27;
  const void *v28;
  int v29;
  const void *v30;
  size_t v31;
  size_t v32;
  int v33;
  int v34;
  _QWORD *v35;
  __int128 v36;
  uint64_t *v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  unsigned __int8 v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  void *exception;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54[3];
  char v55;

  v8 = a2;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    v9 = (_BYTE **)(a2 + 16);
    v10 = 32 * a3;
    while (1)
    {
      v11 = *v9;
      if (**v9 != 2
        || *(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1) != 32
        || *(_BYTE *)sub_20B45491C((uint64_t)v11, 0) != 3)
      {
        break;
      }
      v9 += 4;
      v10 -= 32;
      if (!v10)
        goto LABEL_7;
    }
    v12 = 0;
    if ((a4 & 1) == 0)
    {
LABEL_47:
      if (a5 == 2)
        v38 = 0;
      else
        v38 = v12;
      if (a5 != 1)
        LOBYTE(v12) = 1;
      if ((v12 & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_20AEC0D64(&v53, "cannot create object from initializer list");
        sub_20B452958(301, (uint64_t)&v53, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
      }
      v13 = v8 + 32 * a3;
      if (!v38)
        goto LABEL_54;
      goto LABEL_9;
    }
  }
  else
  {
LABEL_7:
    v12 = 1;
    if ((a4 & 1) == 0)
      goto LABEL_47;
  }
  v13 = v8 + 32 * a3;
  if (v12)
  {
LABEL_9:
    *(_BYTE *)a1 = 1;
    v14 = operator new(0x18uLL);
    v14[2] = 0;
    v14[1] = 0;
    *v14 = v14 + 1;
    *(_QWORD *)(a1 + 8) = v14;
    if (!a3)
      return a1;
    v51 = v13;
LABEL_13:
    v15 = *(_QWORD *)(v8 + 16);
    if (*(_BYTE *)(v8 + 24))
    {
      LOBYTE(v53) = *(_BYTE *)v15;
      v16 = *(_QWORD *)(v15 + 8);
      v54[0] = v16;
      *(_BYTE *)v15 = 0;
      *(_QWORD *)(v15 + 8) = 0;
    }
    else
    {
      sub_20B456794((uint64_t)&v53, (unsigned __int8 *)v15);
      v16 = v54[0];
    }
    v17 = *(uint64_t ***)(a1 + 8);
    v18 = *(_QWORD *)v16;
    v19 = *(const void ***)(*(_QWORD *)v16 + 8);
    v21 = (uint64_t *)(v17 + 1);
    v20 = v17[1];
    if (!v20)
    {
      v25 = (uint64_t *)(v17 + 1);
      goto LABEL_44;
    }
    v22 = *((char *)v19 + 23);
    if (v22 >= 0)
      v23 = v19;
    else
      v23 = *v19;
    if (v22 >= 0)
      v24 = *((unsigned __int8 *)v19 + 23);
    else
      v24 = (size_t)v19[1];
    while (1)
    {
      v25 = v20;
      v28 = (const void *)v20[4];
      v26 = v20 + 4;
      v27 = v28;
      v29 = *((char *)v26 + 23);
      if (v29 >= 0)
        v30 = v26;
      else
        v30 = v27;
      if (v29 >= 0)
        v31 = *((unsigned __int8 *)v26 + 23);
      else
        v31 = v26[1];
      if (v31 >= v24)
        v32 = v24;
      else
        v32 = v31;
      v33 = memcmp(v23, v30, v32);
      if (v33)
      {
        if (v33 < 0)
          goto LABEL_23;
LABEL_37:
        v34 = memcmp(v30, v23, v32);
        if (v34)
        {
          if ((v34 & 0x80000000) == 0)
            goto LABEL_12;
        }
        else if (v31 >= v24)
        {
          goto LABEL_12;
        }
        v20 = (uint64_t *)v25[1];
        if (!v20)
        {
          v21 = v25 + 1;
LABEL_44:
          v35 = operator new(0x48uLL);
          v36 = *(_OWORD *)v19;
          v35[6] = v19[2];
          *((_OWORD *)v35 + 2) = v36;
          v19[1] = 0;
          v19[2] = 0;
          *v19 = 0;
          *((_BYTE *)v35 + 56) = *(_BYTE *)(v18 + 16);
          v35[8] = *(_QWORD *)(v18 + 24);
          *(_BYTE *)(v18 + 16) = 0;
          *(_QWORD *)(v18 + 24) = 0;
          *v35 = 0;
          v35[1] = 0;
          v35[2] = v25;
          *v21 = (uint64_t)v35;
          v37 = (uint64_t *)**v17;
          if (v37)
          {
            *v17 = v37;
            v35 = (_QWORD *)*v21;
          }
          sub_20AEC84C8(v17[1], v35);
          v17[2] = (uint64_t *)((char *)v17[2] + 1);
LABEL_12:
          sub_20B416E08(v54, v53);
          v8 += 32;
          if (v8 == v51)
            return a1;
          goto LABEL_13;
        }
      }
      else
      {
        if (v24 >= v31)
          goto LABEL_37;
LABEL_23:
        v20 = (uint64_t *)*v25;
        v21 = v25;
        if (!*v25)
          goto LABEL_44;
      }
    }
  }
LABEL_54:
  *(_BYTE *)a1 = 2;
  v39 = operator new(0x18uLL);
  v39[1] = 0;
  v39[2] = 0;
  *v39 = 0;
  v54[2] = (uint64_t)v39;
  v55 = 0;
  v40 = v13 - v8;
  if (v13 != v8)
  {
    if (v40 < 0)
      sub_20B41750C();
    v41 = (char *)operator new((unint64_t)v40 >> 1);
    *v39 = v41;
    v39[1] = v41;
    v39[2] = &v41[16 * (v40 >> 5)];
    if (a3)
    {
      v42 = 0;
      v43 = 32 * a3;
      v44 = (_BYTE *)(v8 + 24);
      do
      {
        v48 = *((_QWORD *)v44 - 1);
        if (*v44)
        {
          v45 = *(_BYTE *)v48;
          v46 = *(_QWORD *)(v48 + 8);
          *(_BYTE *)v48 = 0;
          *(_QWORD *)(v48 + 8) = 0;
        }
        else
        {
          sub_20B456794((uint64_t)&v53, (unsigned __int8 *)v48);
          v45 = v53;
          v46 = v54[0];
        }
        v47 = (unsigned __int8 *)&v41[v42];
        *v47 = v45;
        *((_QWORD *)v47 + 1) = v46;
        LOBYTE(v53) = 0;
        v54[0] = 0;
        sub_20B416E08(v54, 0);
        v42 += 16;
        v44 += 32;
        v43 -= 32;
      }
      while (v43);
      v41 += v42;
    }
    v39[1] = v41;
  }
  *(_QWORD *)(a1 + 8) = v39;
  return a1;
}

void sub_20B4566EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20B456BE4((void ***)va);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_20B456708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a7);
  for (; v9; v9 -= 16)
    sub_20B416E08((uint64_t *)(v8 + v9 - 8), *(unsigned __int8 *)(v8 + v9 - 16));
  v7[1] = v8;
  sub_20B456BE4((void ***)va);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_20B456744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, unsigned __int8 a12)
{
  sub_20B416E08(a10, a12);
  _Unwind_Resume(a1);
}

void sub_20B45675C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t sub_20B456794(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  char *v12;
  char *v13;
  const void ***v14;
  const void ***v15;
  const void **v16;
  const void **v17;
  const void **v18;
  const void ***v19;
  BOOL v20;
  uint64_t *v21;

  v3 = *a2;
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  switch(v3)
  {
    case 1:
      v14 = (const void ***)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = v4 + 1;
      v17 = *v14;
      v15 = v14 + 1;
      v16 = v17;
      if (v17 != (const void **)v15)
      {
        do
        {
          sub_20B4569BC((uint64_t **)v4, v4 + 1, v16 + 4, (uint64_t)(v16 + 4));
          v18 = (const void **)v16[1];
          if (v18)
          {
            do
            {
              v19 = (const void ***)v18;
              v18 = (const void **)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (const void ***)v16[2];
              v20 = *v19 == v16;
              v16 = (const void **)v19;
            }
            while (!v20);
          }
          v16 = (const void **)v19;
        }
        while (v19 != v15);
      }
      goto LABEL_21;
    case 2:
      v21 = (uint64_t *)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      sub_20B456AE4(v4, *v21, v21[1], (v21[1] - *v21) >> 4);
      goto LABEL_21;
    case 3:
      v5 = (__int128 *)*((_QWORD *)a2 + 1);
      v6 = operator new(0x18uLL);
      v4 = v6;
      if (*((char *)v5 + 23) < 0)
      {
        sub_20AEC60F4(v6, *(void **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        *((_QWORD *)v6 + 2) = *((_QWORD *)v5 + 2);
        *v6 = v7;
      }
      goto LABEL_21;
    case 4:
      v4 = (_QWORD *)a2[8];
      goto LABEL_21;
    case 5:
    case 6:
    case 7:
      v4 = (_QWORD *)*((_QWORD *)a2 + 1);
      goto LABEL_21;
    case 8:
      v8 = *((_QWORD *)a2 + 1);
      v4 = operator new(0x20uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      v10 = *(const void **)v8;
      v9 = *(_QWORD *)(v8 + 8);
      v11 = v9 - *(_QWORD *)v8;
      if (v9 != *(_QWORD *)v8)
      {
        if ((v11 & 0x8000000000000000) != 0)
          sub_20AF4BAC0();
        v12 = (char *)operator new(v9 - *(_QWORD *)v8);
        *v4 = v12;
        v13 = &v12[v11];
        v4[2] = &v12[v11];
        memcpy(v12, v10, v11);
        v4[1] = v13;
      }
      *((_WORD *)v4 + 12) = *(_WORD *)(v8 + 24);
LABEL_21:
      *(_QWORD *)(a1 + 8) = v4;
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_20B456950(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B456964(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B456978(_Unwind_Exception *a1)
{
  void **v1;
  void *v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    operator delete(v3);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B4569BC(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t *v15;

  v6 = sub_20AF40538(a1, a2, &v15, &v14, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v9 = (uint64_t *)operator new(0x48uLL);
    v7 = v9;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_20AEC60F4((_BYTE *)v9 + 32, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *((_OWORD *)v9 + 2) = *(_OWORD *)a4;
      v9[6] = *(_QWORD *)(a4 + 16);
    }
    sub_20B456794(v7 + 7, a4 + 24);
    v10 = v15;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v10;
    *v8 = (uint64_t)v7;
    v11 = (uint64_t *)**a1;
    v12 = v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v8;
    }
    sub_20AEC84C8(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_20B456AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B452CB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B456AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  sub_20B452CB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B456AE4(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *i;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      sub_20B41750C();
    result = operator new(16 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    for (i = result; a2 != a3; i += 2)
    {
      sub_20B456794(result, a2);
      a2 += 16;
      result = i + 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_20B456BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20B456BE4(&a9);
  _Unwind_Resume(a1);
}

void sub_20B456BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_20B456C80((uint64_t)&a11);
  *(_QWORD *)(v11 + 8) = v12;
  sub_20B456BE4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20B456BE4(void ***result)
{
  void ***v1;
  void **v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (uint64_t *)**result;
    if (v3)
    {
      v4 = (uint64_t *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = v4 - 1;
        do
        {
          v7 = v6 - 1;
          sub_20B416E08(v6, *((unsigned __int8 *)v6 - 8));
          v6 -= 2;
        }
        while (v7 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B456C80(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(uint64_t ***)(a1 + 16);
    v3 = **(uint64_t ***)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 1;
      do
      {
        v5 = v4 - 1;
        sub_20B416E08(v4, *((unsigned __int8 *)v4 - 8));
        v4 -= 2;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

uint64_t sub_20B456CE4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v5 = *(unsigned __int8 *)(i - 16);
    v4 = i - 16;
    *(_QWORD *)(a1 + 16) = v4;
    sub_20B4181DC((void ***)(v4 + 8), v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B456D38(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  _BYTE **v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void **v18;
  int v19;
  void **v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unsigned __int8 v26;
  void **v27;
  unsigned __int8 *v28;
  uint64_t v29;
  void *exception;
  uint64_t v32;
  void **v33[3];
  char v34;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    v10 = (_BYTE **)(a2 + 16);
    v11 = 32 * a3;
    while (1)
    {
      v12 = *v10;
      if (**v10 != 2
        || *(_QWORD *)(*((_QWORD *)v12 + 1) + 8) - **((_QWORD **)v12 + 1) != 32
        || *(_BYTE *)sub_20B4551B8((uint64_t)v12, 0) != 3)
      {
        break;
      }
      v10 += 4;
      v11 -= 32;
      if (!v11)
        goto LABEL_7;
    }
    v13 = 0;
    if ((a4 & 1) == 0)
    {
LABEL_17:
      if (a5 == 2)
        v19 = 0;
      else
        v19 = v13;
      if (a5 != 1)
        LOBYTE(v13) = 1;
      if ((v13 & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_20AEC0D64(&v32, "cannot create object from initializer list");
        sub_20B452958(301, (uint64_t)&v32, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
      }
      if (!v19)
        goto LABEL_24;
LABEL_9:
      *(_BYTE *)a1 = 1;
      v14 = operator new(0x18uLL);
      v14[1] = 0;
      v14[2] = 0;
      *v14 = 0;
      *(_QWORD *)(a1 + 8) = v14;
      if (a3)
      {
        v15 = 32 * a3;
        v16 = (_BYTE *)(a2 + 24);
        do
        {
          v17 = *((_QWORD *)v16 - 1);
          if (*v16)
          {
            LOBYTE(v32) = *(_BYTE *)v17;
            v18 = *(void ***)(v17 + 8);
            v33[0] = v18;
            *(_BYTE *)v17 = 0;
            *(_QWORD *)(v17 + 8) = 0;
          }
          else
          {
            sub_20B4541AC((uint64_t)&v32, (unsigned __int8 *)v17);
            v18 = v33[0];
          }
          sub_20B453E7C(*(uint64_t **)(a1 + 8), *((_QWORD *)*v18 + 1), (unsigned __int8 *)*v18 + 16);
          sub_20B4181DC(v33, v32);
          v16 += 32;
          v15 -= 32;
        }
        while (v15);
      }
      return a1;
    }
  }
  else
  {
LABEL_7:
    v13 = 1;
    if ((a4 & 1) == 0)
      goto LABEL_17;
  }
  if (v13)
    goto LABEL_9;
LABEL_24:
  *(_BYTE *)a1 = 2;
  v20 = (void **)operator new(0x18uLL);
  v20[1] = 0;
  v20[2] = 0;
  *v20 = 0;
  v33[2] = v20;
  v34 = 0;
  v21 = 32 * a3;
  if (a2 + 32 * a3 != a2)
  {
    if (v21 < 0)
      sub_20B41750C();
    v22 = (char *)operator new((unint64_t)v21 >> 1);
    *v20 = v22;
    v20[1] = v22;
    v20[2] = &v22[16 * (v21 >> 5)];
    if (a3)
    {
      v23 = 0;
      v24 = 32 * a3;
      v25 = (_BYTE *)(a2 + 24);
      do
      {
        v29 = *((_QWORD *)v25 - 1);
        if (*v25)
        {
          v26 = *(_BYTE *)v29;
          v27 = *(void ***)(v29 + 8);
          *(_BYTE *)v29 = 0;
          *(_QWORD *)(v29 + 8) = 0;
        }
        else
        {
          sub_20B4541AC((uint64_t)&v32, (unsigned __int8 *)v29);
          v26 = v32;
          v27 = v33[0];
        }
        v28 = (unsigned __int8 *)&v22[v23];
        *v28 = v26;
        *((_QWORD *)v28 + 1) = v27;
        LOBYTE(v32) = 0;
        v33[0] = 0;
        sub_20B4181DC(v33, 0);
        v23 += 16;
        v25 += 32;
        v24 -= 32;
      }
      while (v24);
      v22 += v23;
    }
    v20[1] = v22;
  }
  *(_QWORD *)(a1 + 8) = v20;
  return a1;
}

void sub_20B456FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20B454644((void ***)va);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_20B456FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a5);
  for (; v7; v7 -= 16)
    sub_20B4181DC((void ***)(v6 + v7 - 8), *(unsigned __int8 *)(v6 + v7 - 16));
  v5[1] = v6;
  sub_20B454644((void ***)va);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_20B457030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B457048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_20B457080(uint64_t *a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char v42;
  unsigned __int8 *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v48;
  char *v49;
  uint64_t v50[2];
  char *v51;
  _QWORD *v52;

  v4 = a2;
  if (!a3)
    return (uint64_t)v4;
  v8 = a1[2];
  v9 = a1[1];
  if (a3 <= (uint64_t)(v8 - v9) >> 4)
  {
    v15 = (uint64_t)(v9 - (_QWORD)a2) >> 4;
    v16 = 16 * a3;
    v17 = a1[1];
    v18 = a3;
    if (a3 <= v15)
    {
LABEL_17:
      v21 = &v4[v16];
      v22 = v17 - v16;
      v23 = v17;
      if (v17 - v16 < v9)
      {
        v23 = v17;
        do
        {
          *(_BYTE *)v23 = *(_BYTE *)v22;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)(v22 + 8);
          *(_BYTE *)v22 = 0;
          *(_QWORD *)(v22 + 8) = 0;
          v23 += 16;
          v22 += 16;
        }
        while (v22 < v9);
      }
      a1[1] = v23;
      if ((unsigned __int8 *)v17 != v21)
      {
        v24 = (_QWORD *)(v17 - 8);
        v25 = 16 * ((uint64_t)(v17 - (_QWORD)v21) >> 4);
        do
        {
          v26 = &v4[v25];
          v27 = v4[v25 - 16];
          v28 = *(_QWORD *)&v4[v25 - 8];
          *(v26 - 16) = 0;
          *((_QWORD *)v26 - 1) = 0;
          v29 = *((unsigned __int8 *)v24 - 8);
          *((_BYTE *)v24 - 8) = v27;
          LOBYTE(v49) = v29;
          v30 = *v24;
          *v24 = v28;
          v24 -= 2;
          v50[0] = v30;
          sub_20B416E08(v50, v29);
          v25 -= 16;
        }
        while (v25);
      }
      if (v4 <= a4)
      {
        if (a1[1] <= (unint64_t)a4)
          v31 = 0;
        else
          v31 = a3;
        a4 += 16 * v31;
      }
      v32 = v4;
      do
      {
        sub_20B456794((uint64_t)&v49, a4);
        v33 = *v32;
        *v32 = v49;
        LOBYTE(v49) = v33;
        v34 = *((_QWORD *)v32 + 1);
        *((_QWORD *)v32 + 1) = v50[0];
        v50[0] = v34;
        sub_20B416E08(v50, v33);
        v32 += 16;
        --v18;
      }
      while (v18);
      return (uint64_t)v4;
    }
    v19 = 0;
    v17 = v9 + 16 * (a3 - v15);
    v48 = (uint64_t)(v9 - (_QWORD)a2) >> 4;
    v20 = v16 - 16 * v15;
    do
    {
      sub_20B456794(v9 + v19, a4);
      v19 += 16;
    }
    while (v20 != v19);
    a1[1] = v17;
    if ((unsigned __int8 *)v9 != v4)
    {
      v18 = v48;
      goto LABEL_17;
    }
    return (uint64_t)v4;
  }
  v10 = (_BYTE *)*a1;
  v11 = a3 + ((uint64_t)(v9 - *a1) >> 4);
  if (v11 >> 60)
    sub_20B41750C();
  v12 = v8 - (_QWORD)v10;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  v52 = a1 + 2;
  if (v13)
  {
    if (v13 >> 60)
      sub_20AEC60CC();
    v14 = (char *)operator new(16 * v13);
  }
  else
  {
    v14 = 0;
  }
  v36 = (uint64_t)&v14[16 * ((v4 - v10) >> 4)];
  v49 = v14;
  v50[0] = v36;
  v50[1] = v36;
  v51 = &v14[16 * v13];
  v37 = 16 * a3;
  v38 = v36 + v37;
  do
  {
    sub_20B456794(v36, a4);
    v36 += 16;
    v37 -= 16;
  }
  while (v37);
  v35 = v50[0];
  v39 = *a1;
  v40 = v50[0];
  if ((unsigned __int8 *)*a1 != v4)
  {
    v41 = v4;
    v40 = v50[0];
    do
    {
      v42 = *(v41 - 16);
      v41 -= 16;
      *(_BYTE *)(v40 - 16) = v42;
      v40 -= 16;
      *(_QWORD *)(v40 + 8) = *((_QWORD *)v41 + 1);
      *v41 = 0;
      *((_QWORD *)v41 + 1) = 0;
    }
    while (v41 != (unsigned __int8 *)v39);
  }
  v50[0] = v40;
  v43 = (unsigned __int8 *)a1[1];
  if (v43 != v4)
  {
    do
    {
      *(_BYTE *)v38 = *v4;
      *(_QWORD *)(v38 + 8) = *((_QWORD *)v4 + 1);
      *v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      v38 += 16;
      v4 += 16;
    }
    while (v4 != v43);
    v40 = v50[0];
    v4 = (unsigned __int8 *)a1[1];
  }
  v44 = (uint64_t *)*a1;
  *a1 = v40;
  a1[1] = v38;
  a1[2] = (uint64_t)v51;
  if (v4 != (unsigned __int8 *)v44)
  {
    v45 = (uint64_t *)(v4 - 8);
    do
    {
      v46 = v45 - 1;
      sub_20B416E08(v45, *((unsigned __int8 *)v45 - 8));
      v45 -= 2;
    }
    while (v46 != v44);
  }
  if (v44)
    operator delete(v44);
  return v35;
}

void sub_20B4573AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B4573B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B451C18((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_20B4573CC(void ***a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  void **v8;
  unint64_t v9;
  void **v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  void **v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  void **v23;
  void ***v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 v27;
  void **v28;
  int v29;
  void **v30;
  unint64_t v31;
  unsigned __int8 *v32;
  int v33;
  void **v34;
  void **v35;
  void **v36;
  uint64_t v37;
  void **v38;
  void **v39;
  void **v40;
  unsigned __int8 *v41;
  char v42;
  unsigned __int8 *v43;
  void **v44;
  void ***v45;
  void ***v46;
  uint64_t v48;
  char *v49;
  void **v50[2];
  void **v51;
  _QWORD *v52;

  v4 = a2;
  if (!a3)
    return (void **)v4;
  v8 = a1[2];
  v9 = (unint64_t)a1[1];
  if (a3 <= (uint64_t)((uint64_t)v8 - v9) >> 4)
  {
    v15 = (uint64_t)(v9 - (_QWORD)a2) >> 4;
    v16 = 16 * a3;
    v17 = a1[1];
    v18 = a3;
    if (a3 <= v15)
    {
LABEL_17:
      v21 = &v4[v16];
      v22 = (unint64_t)&v17[v16 / 0xFFFFFFFFFFFFFFF8];
      v23 = v17;
      if ((unint64_t)&v17[v16 / 0xFFFFFFFFFFFFFFF8] < v9)
      {
        v23 = v17;
        do
        {
          *(_BYTE *)v23 = *(_BYTE *)v22;
          v23[1] = *(void **)(v22 + 8);
          *(_BYTE *)v22 = 0;
          *(_QWORD *)(v22 + 8) = 0;
          v23 += 2;
          v22 += 16;
        }
        while (v22 < v9);
      }
      a1[1] = v23;
      if (v17 != (void **)v21)
      {
        v24 = (void ***)(v17 - 1);
        v25 = 16 * (((char *)v17 - (char *)v21) >> 4);
        do
        {
          v26 = &v4[v25];
          v27 = v4[v25 - 16];
          v28 = *(void ***)&v4[v25 - 8];
          *(v26 - 16) = 0;
          *((_QWORD *)v26 - 1) = 0;
          v29 = *((unsigned __int8 *)v24 - 8);
          *((_BYTE *)v24 - 8) = v27;
          LOBYTE(v49) = v29;
          v30 = *v24;
          *v24 = v28;
          v24 -= 2;
          v50[0] = v30;
          sub_20B4181DC(v50, v29);
          v25 -= 16;
        }
        while (v25);
      }
      if (v4 <= a4)
      {
        if (a1[1] <= (void **)a4)
          v31 = 0;
        else
          v31 = a3;
        a4 += 16 * v31;
      }
      v32 = v4;
      do
      {
        sub_20B4541AC((uint64_t)&v49, a4);
        v33 = *v32;
        *v32 = v49;
        LOBYTE(v49) = v33;
        v34 = (void **)*((_QWORD *)v32 + 1);
        *((void ***)v32 + 1) = v50[0];
        v50[0] = v34;
        sub_20B4181DC(v50, v33);
        v32 += 16;
        --v18;
      }
      while (v18);
      return (void **)v4;
    }
    v19 = 0;
    v17 = (void **)(v9 + 16 * (a3 - v15));
    v48 = (uint64_t)(v9 - (_QWORD)a2) >> 4;
    v20 = v16 - 16 * v15;
    do
    {
      sub_20B4541AC(v9 + v19, a4);
      v19 += 16;
    }
    while (v20 != v19);
    a1[1] = v17;
    if ((unsigned __int8 *)v9 != v4)
    {
      v18 = v48;
      goto LABEL_17;
    }
    return (void **)v4;
  }
  v10 = *a1;
  v11 = a3 + ((uint64_t)(v9 - (_QWORD)*a1) >> 4);
  if (v11 >> 60)
    sub_20B41750C();
  v12 = (char *)v8 - (char *)v10;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  v52 = a1 + 2;
  if (v13)
  {
    if (v13 >> 60)
      sub_20AEC60CC();
    v14 = (char *)operator new(16 * v13);
  }
  else
  {
    v14 = 0;
  }
  v36 = (void **)&v14[16 * ((v4 - (unsigned __int8 *)v10) >> 4)];
  v49 = v14;
  v50[0] = v36;
  v50[1] = v36;
  v51 = (void **)&v14[16 * v13];
  v37 = 2 * a3;
  v38 = &v36[v37];
  do
  {
    sub_20B4541AC((uint64_t)v36, a4);
    v36 += 2;
    v37 -= 2;
  }
  while (v37 * 8);
  v35 = v50[0];
  v39 = *a1;
  v40 = v50[0];
  if (*a1 != (void **)v4)
  {
    v41 = v4;
    v40 = v50[0];
    do
    {
      v42 = *(v41 - 16);
      v41 -= 16;
      *((_BYTE *)v40 - 16) = v42;
      v40 -= 2;
      v40[1] = (void *)*((_QWORD *)v41 + 1);
      *v41 = 0;
      *((_QWORD *)v41 + 1) = 0;
    }
    while (v41 != (unsigned __int8 *)v39);
  }
  v50[0] = v40;
  v43 = (unsigned __int8 *)a1[1];
  if (v43 != v4)
  {
    do
    {
      *(_BYTE *)v38 = *v4;
      v38[1] = (void *)*((_QWORD *)v4 + 1);
      *v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      v38 += 2;
      v4 += 16;
    }
    while (v4 != v43);
    v40 = v50[0];
    v4 = (unsigned __int8 *)a1[1];
  }
  v44 = *a1;
  *a1 = v40;
  a1[1] = v38;
  a1[2] = v51;
  if (v4 != (unsigned __int8 *)v44)
  {
    v45 = (void ***)(v4 - 8);
    do
    {
      v46 = v45 - 1;
      sub_20B4181DC(v45, *((unsigned __int8 *)v45 - 8));
      v45 -= 2;
    }
    while (v46 != (void ***)v44);
  }
  if (v44)
    operator delete(v44);
  return v35;
}

void sub_20B4576F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B457700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B456CE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B457718(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  void *exception;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27[2];
  char v28;
  void *__p[2];
  char v30;
  __int128 v31;
  uint64_t v32;
  std::exception v33;
  int v34;
  std::runtime_error v35;
  uint64_t v36;
  std::string v37;
  _BYTE v38[24];
  _BYTE *v39;
  unsigned __int8 *v40;
  __int128 v41;
  __int128 v42;
  char v43;
  char v44;
  void *v45;
  char v46;
  _BYTE v47[24];
  _BYTE *v48;
  char v49;
  unsigned __int8 v50;
  uint64_t v51[2];

  v51[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
  {
    v7 = *(_BYTE *)(a1 + 184);
    v40 = a3;
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    v44 = v7;
    sub_20B45B968(a1, &v40);
    if (a2)
    {
      v8 = sub_20B457F9C(a1 + 40);
      *(_DWORD *)(a1 + 32) = v8;
      if (v8 != 15)
      {
        sub_20B45AD8C(a1 + 40, &v37);
        v31 = *(_OWORD *)(a1 + 72);
        v32 = *(_QWORD *)(a1 + 88);
        v28 = 5;
        strcpy((char *)v27, "value");
        sub_20B45B1C8(a1, 0xFu, (const void **)v27, (uint64_t)__p);
        sub_20B45AE7C(101, (uint64_t *)&v31, (uint64_t)__p, (uint64_t)&v33);
        v43 = 1;
        if (v44)
        {
          exception = __cxa_allocate_exception(0x28uLL);
          *(_QWORD *)exception = &off_24C41D9D8;
          *((_DWORD *)exception + 2) = v34;
          std::runtime_error::runtime_error((std::runtime_error *)exception + 1, &v35);
          *(_QWORD *)exception = &off_24C41DAD8;
          *((_QWORD *)exception + 4) = v36;
          __cxa_throw(exception, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
        }
        v33.__vftable = (std::exception_vtbl *)&off_24C41D9D8;
        std::runtime_error::~runtime_error(&v35);
        std::exception::~exception(&v33);
        if (v30 < 0)
        {
          operator delete(__p[0]);
          if ((v28 & 0x80000000) == 0)
          {
LABEL_9:
            if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_10;
LABEL_46:
            operator delete(v37.__r_.__value_.__l.__data_);
            if (!v43)
              goto LABEL_41;
LABEL_11:
            v9 = *a3;
            *a3 = 9;
            v10 = *((_QWORD *)a3 + 1);
            *((_QWORD *)a3 + 1) = 0;
            v22 = v10;
            sub_20B416E08(&v22, v9);
            goto LABEL_41;
          }
        }
        else if ((v28 & 0x80000000) == 0)
        {
          goto LABEL_9;
        }
        operator delete(v27[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_46;
      }
    }
LABEL_10:
    if (!v43)
      goto LABEL_41;
    goto LABEL_11;
  }
  if (v6 == a1)
  {
    v39 = v38;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, v38);
  }
  else
  {
    v39 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  sub_20B45D1F0((uint64_t)&v40, (uint64_t)a3, (uint64_t)v38, *(_BYTE *)(a1 + 184));
  v11 = v39;
  if (v39 == v38)
  {
    v12 = 4;
    v11 = v38;
    goto LABEL_17;
  }
  if (v39)
  {
    v12 = 5;
LABEL_17:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  sub_20B45A020(a1, (uint64_t)&v40);
  if (a2)
  {
    v13 = sub_20B457F9C(a1 + 40);
    *(_DWORD *)(a1 + 32) = v13;
    if (v13 != 15)
    {
      sub_20B45AD8C(a1 + 40, &v37);
      v31 = *(_OWORD *)(a1 + 72);
      v32 = *(_QWORD *)(a1 + 88);
      v28 = 5;
      strcpy((char *)v27, "value");
      sub_20B45B1C8(a1, 0xFu, (const void **)v27, (uint64_t)__p);
      sub_20B45AE7C(101, (uint64_t *)&v31, (uint64_t)__p, (uint64_t)&v33);
      v46 = 1;
      if (v49)
      {
        v20 = __cxa_allocate_exception(0x28uLL);
        *(_QWORD *)v20 = &off_24C41D9D8;
        *((_DWORD *)v20 + 2) = v34;
        std::runtime_error::runtime_error((std::runtime_error *)v20 + 1, &v35);
        *(_QWORD *)v20 = &off_24C41DAD8;
        *((_QWORD *)v20 + 4) = v36;
        __cxa_throw(v20, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
      }
      v33.__vftable = (std::exception_vtbl *)&off_24C41D9D8;
      std::runtime_error::~runtime_error(&v35);
      std::exception::~exception(&v33);
      if (v30 < 0)
      {
        operator delete(__p[0]);
        if ((v28 & 0x80000000) == 0)
        {
LABEL_23:
          if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_24;
LABEL_28:
          operator delete(v37.__r_.__value_.__l.__data_);
          if (v46)
            goto LABEL_25;
          goto LABEL_29;
        }
      }
      else if ((v28 & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete(v27[0]);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_28;
    }
  }
LABEL_24:
  if (v46)
  {
LABEL_25:
    v14 = &v26;
    v15 = *a3;
    *a3 = 9;
    v25 = v15;
    v16 = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = 0;
    v26 = v16;
    goto LABEL_31;
  }
LABEL_29:
  if (*a3 != 9)
    goto LABEL_32;
  v14 = &v24;
  *a3 = 0;
  v23 = 9;
  v17 = *((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = 0;
  v24 = v17;
  v15 = 9;
LABEL_31:
  sub_20B416E08(v14, v15);
LABEL_32:
  sub_20B416E08(v51, v50);
  v18 = v48;
  if (v48 == v47)
  {
    v19 = 4;
    v18 = v47;
    goto LABEL_36;
  }
  if (v48)
  {
    v19 = 5;
LABEL_36:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  if (v45)
    operator delete(v45);
  if (*((_QWORD *)&v42 + 1))
    operator delete(*((void **)&v42 + 1));
LABEL_41:
  if ((_QWORD)v41)
  {
    *((_QWORD *)&v41 + 1) = v41;
    operator delete((void *)v41);
  }
}

void sub_20B457BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::exception a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  std::runtime_error *v45;
  uint64_t v46;
  void *v48;

  std::runtime_error::~runtime_error(v45);
  std::exception::~exception(&a31);
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a41 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a41 & 0x80000000) == 0)
  {
LABEL_4:
    v48 = *(void **)(v46 - 200);
    if (!v48)
LABEL_10:
      _Unwind_Resume(a1);
LABEL_9:
    *(_QWORD *)(v46 - 192) = v48;
    operator delete(v48);
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(a36);
  v48 = *(void **)(v46 - 200);
  if (!v48)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20B457D90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B45B8E4(v1 - 208);
  _Unwind_Resume(a1);
}

uint64_t sub_20B457DA4(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;

  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 96);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 120));
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(_QWORD **)(a1 + 24);
  if (v3 == (_QWORD *)a1)
  {
    v4 = 4;
    v3 = (_QWORD *)a1;
    goto LABEL_10;
  }
  if (v3)
  {
    v4 = 5;
LABEL_10:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t sub_20B457E1C(uint64_t a1, _OWORD *a2, uint64_t a3, char a4, char a5)
{
  uint64_t v9;
  lconv *v10;
  int v11;

  v9 = *(_QWORD *)(a3 + 24);
  if (v9)
  {
    if (v9 == a3)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = *a2;
  *(_BYTE *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 60) = -1;
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = "";
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v10 = localeconv();
  if (v10->decimal_point)
    v11 = *v10->decimal_point;
  else
    v11 = 46;
  *(_DWORD *)(a1 + 176) = v11;
  *(_BYTE *)(a1 + 184) = a4;
  *(_DWORD *)(a1 + 32) = sub_20B457F9C(a1 + 40);
  return a1;
}

void sub_20B457F08(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  sub_20B457F50(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_20B457F50(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    v2 = *(void **)(a1 + 56);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20B457F9C(uint64_t a1)
{
  const char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  if (sub_20B459C24(a1) == 239)
  {
    if (sub_20B459C24(a1) == 187 && sub_20B459C24(a1) == 191)
      goto LABEL_12;
    v2 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
LABEL_6:
    *(_QWORD *)(a1 + 104) = v2;
    return 14;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 24) = 1;
    --*(_QWORD *)(a1 + 32);
    if (v4 || (v3 = (_QWORD *)(a1 + 48), (v4 = *(_QWORD *)(a1 + 48)) != 0))
      *v3 = v4 - 1;
    if (*(_DWORD *)(a1 + 20) != -1)
      --*(_QWORD *)(a1 + 64);
LABEL_12:
    while (1)
    {
      sub_20B458228(a1);
      if (!*(_BYTE *)(a1 + 16) || *(_DWORD *)(a1 + 20) != 47)
        break;
      if (!sub_20B458494(a1))
        return 14;
    }
    result = 8;
    switch(*(_DWORD *)(a1 + 20))
    {
      case 0xFFFFFFFF:
      case 0:
        result = 15;
        break;
      case 0x22:
        result = sub_20B4585B4(a1);
        break;
      case 0x2C:
        result = 13;
        break;
      case 0x2D:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
        result = sub_20B459550(a1);
        break;
      case 0x3A:
        result = 12;
        break;
      case 0x5B:
        return result;
      case 0x5D:
        result = 10;
        break;
      case 0x66:
        if (sub_20B459C24(a1) != 97
          || sub_20B459C24(a1) != 108
          || sub_20B459C24(a1) != 115
          || sub_20B459C24(a1) != 101)
        {
          goto LABEL_38;
        }
        result = 2;
        break;
      case 0x6E:
        if (sub_20B459C24(a1) != 117
          || sub_20B459C24(a1) != 108
          || sub_20B459C24(a1) != 108)
        {
          goto LABEL_38;
        }
        result = 3;
        break;
      case 0x74:
        if (sub_20B459C24(a1) != 114
          || sub_20B459C24(a1) != 117
          || sub_20B459C24(a1) != 101)
        {
          goto LABEL_38;
        }
        result = 1;
        break;
      case 0x7B:
        result = 9;
        break;
      case 0x7D:
        result = 11;
        break;
      default:
LABEL_38:
        v2 = "invalid literal";
        goto LABEL_6;
    }
  }
  return result;
}

void sub_20B458228(uint64_t a1)
{
  _QWORD *v2;
  int64x2_t v3;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  int v7;
  unint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  int64x2_t v30;

  v2 = (_QWORD *)(a1 + 56);
  v3 = vdupq_n_s64(1uLL);
  v30 = v3;
  while (2)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v3);
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      v5 = *(_DWORD *)(a1 + 20);
      if (v5 == -1)
        return;
LABEL_8:
      v9 = *(_BYTE **)(a1 + 64);
      v8 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v9 < v8)
      {
        *v9 = v5;
        *(_QWORD *)(a1 + 64) = v9 + 1;
        v10 = *(_DWORD *)(a1 + 20) - 9;
        if (v10 > 0x17)
          return;
LABEL_40:
        switch(v10)
        {
          case 0u:
          case 4u:
          case 0x17u:
            continue;
          case 1u:
            v4 = *(_QWORD *)(a1 + 48) + 1;
            *(_QWORD *)(a1 + 40) = 0;
            *(_QWORD *)(a1 + 48) = v4;
            continue;
          default:
            return;
        }
      }
      v11 = (_BYTE *)*v2;
      v12 = (unint64_t)&v9[-*v2];
      v13 = v12 + 1;
      if ((uint64_t)(v12 + 1) < 0)
        sub_20AEC60B8();
      v14 = v8 - (_QWORD)v11;
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
        v15 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)operator new(v15);
        v17 = &v16[v12];
        v16[v12] = v5;
        v18 = (uint64_t)&v16[v12 + 1];
        if (v9 == v11)
          goto LABEL_37;
      }
      else
      {
        v16 = 0;
        v17 = &v9[-*v2];
        *(_BYTE *)v12 = v5;
        v18 = v12 + 1;
        if (v9 == v11)
        {
LABEL_37:
          *(_QWORD *)(a1 + 56) = v17;
          *(_QWORD *)(a1 + 64) = v18;
          *(_QWORD *)(a1 + 72) = &v16[v15];
          if (v9)
            operator delete(v9);
          v3 = v30;
          *(_QWORD *)(a1 + 64) = v18;
          v10 = *(_DWORD *)(a1 + 20) - 9;
          goto LABEL_40;
        }
      }
      if (v12 >= 8 && (unint64_t)(v11 - v16) >= 0x20)
      {
        if (v12 < 0x20)
        {
          v19 = 0;
          goto LABEL_29;
        }
        v19 = v12 & 0xFFFFFFFFFFFFFFE0;
        v20 = &v16[v12 - 16];
        v21 = (__int128 *)(v9 - 16);
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v23 = *v21;
          *((_OWORD *)v20 - 1) = *(v21 - 1);
          *(_OWORD *)v20 = v23;
          v20 -= 32;
          v21 -= 2;
          v22 -= 32;
        }
        while (v22);
        if (v12 == v19)
          goto LABEL_36;
        if ((v12 & 0x18) != 0)
        {
LABEL_29:
          v17 -= v12 & 0xFFFFFFFFFFFFFFF8;
          v24 = &v16[&v9[-v19] - v11 - 8];
          v25 = (uint64_t *)&v9[-v19 - 8];
          v26 = v19 - (v12 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v27 = *v25--;
            *(_QWORD *)v24 = v27;
            v24 -= 8;
            v26 += 8;
          }
          while (v26);
          v9 -= v12 & 0xFFFFFFFFFFFFFFF8;
          if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_36;
          goto LABEL_34;
        }
        v17 -= v19;
        v9 -= v19;
      }
LABEL_34:
      v28 = v17 - 1;
      do
      {
        v29 = *--v9;
        *v28-- = v29;
      }
      while (v9 != v11);
LABEL_36:
      v9 = (_BYTE *)*v2;
      v17 = v16;
      goto LABEL_37;
    }
    break;
  }
  v6 = *(_BYTE **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 20) = -1;
  }
  else
  {
    v7 = *v6;
    LOBYTE(v5) = *v6;
    *(_QWORD *)a1 = v6 + 1;
    *(_DWORD *)(a1 + 20) = v7;
    if (v7 != -1)
      goto LABEL_8;
  }
}

uint64_t sub_20B458494(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t result;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = sub_20B459C24(a1);
  if (v2 == 42)
  {
    v5 = (uint64_t *)(a1 + 48);
    do
    {
      while (1)
      {
        v6 = sub_20B459C24(a1);
        if (v6 != 42)
          break;
        if (sub_20B459C24(a1) == 47)
          return 1;
        *(_BYTE *)(a1 + 24) = 1;
        v7 = *(_QWORD *)(a1 + 40);
        --*(_QWORD *)(a1 + 32);
        v8 = (_QWORD *)(a1 + 40);
        if (v7 || (v7 = *v5, v8 = (_QWORD *)(a1 + 48), *v5))
          *v8 = v7 - 1;
        if (*(_DWORD *)(a1 + 20) != -1)
          --*(_QWORD *)(a1 + 64);
      }
    }
    while ((v6 + 1) >= 2);
    result = 0;
    *(_QWORD *)(a1 + 104) = "invalid comment; missing closing '*/'";
  }
  else if (v2 == 47)
  {
    do
    {
      do
        v3 = sub_20B459C24(a1) + 1;
      while (v3 >= 0xF);
    }
    while (((0x4803u >> v3) & 1) == 0);
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a1 + 104) = "invalid comment; expecting '/' or '*' after '/'";
  }
  return result;
}

uint64_t sub_20B4585B4(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  int v4;
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  _BYTE *v10;
  void **v11;
  size_t v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  int v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  __int128 *v30;
  unint64_t v31;
  __int128 v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  int v39;
  const char *v40;
  int v41;
  int v42;
  _BYTE *v43;
  int v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  size_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  _BYTE *v56;
  int v57;
  unint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  size_t v65;
  char *v66;
  char *v67;
  int v68;
  unint64_t v69;
  char *v70;
  __int128 *v71;
  unint64_t v72;
  __int128 v73;
  char *v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  std::string::value_type v79;
  int v80;
  char *v81;
  __int128 *v82;
  unint64_t v83;
  __int128 v84;
  char *v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  char *v94;
  char v95;
  int v96;
  int v97;
  size_t v98;
  void *v99;
  uint64_t v100;
  size_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  int v107;
  _BYTE *v108;
  int v109;
  unint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  _BYTE *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  size_t v117;
  char *v118;
  char *v119;
  unint64_t v120;
  char *v121;
  __int128 *v122;
  unint64_t v123;
  __int128 v124;
  char *v125;
  uint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  char v130;
  int v131;
  void *v132;
  uint64_t v133;
  size_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  int64x2_t v141;

  if (*(char *)(a1 + 103) < 0)
  {
    **(_BYTE **)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 103) = 0;
  }
  v2 = (_QWORD *)(a1 + 56);
  v3 = *(_BYTE **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v3;
  v4 = *(_DWORD *)(a1 + 20);
  v5 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v3 >= v5)
  {
    v7 = v5 - (_QWORD)v3;
    v8 = 2 * v7;
    if (2 * v7 <= 1)
      v8 = 1;
    if (v7 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v10 = operator new(v9);
    *v10 = v4;
    v6 = v10 + 1;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v10 + 1;
    *(_QWORD *)(a1 + 72) = &v10[v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *v3 = v4;
    v6 = v3 + 1;
  }
  v11 = (void **)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v6;
  v141 = vdupq_n_s64(1uLL);
  while (2)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v141);
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      v15 = *(_DWORD *)(a1 + 20);
      if (v15 == -1)
        goto LABEL_253;
    }
    else
    {
      v16 = *(_BYTE **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 20) = -1;
LABEL_253:
        v40 = "invalid string: missing closing quote";
        goto LABEL_251;
      }
      v17 = *v16;
      LOBYTE(v15) = *v16;
      *(_QWORD *)a1 = v16 + 1;
      *(_DWORD *)(a1 + 20) = v17;
      if (v17 == -1)
        goto LABEL_253;
    }
    v19 = *(_BYTE **)(a1 + 64);
    v18 = *(_QWORD *)(a1 + 72);
    if ((unint64_t)v19 >= v18)
    {
      v21 = (_BYTE *)*v2;
      v22 = (unint64_t)&v19[-*v2];
      v23 = v22 + 1;
      if ((uint64_t)(v22 + 1) < 0)
        goto LABEL_286;
      v24 = v18 - (_QWORD)v21;
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x3FFFFFFFFFFFFFFFLL)
        v25 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        v26 = (char *)operator new(v25);
        v27 = &v26[v22];
        v26[v22] = v15;
        v20 = (uint64_t)&v26[v22 + 1];
        if (v19 == v21)
        {
LABEL_49:
          *(_QWORD *)(a1 + 56) = v27;
          *(_QWORD *)(a1 + 64) = v20;
          *(_QWORD *)(a1 + 72) = &v26[v25];
          if (v19)
            operator delete(v19);
          goto LABEL_51;
        }
      }
      else
      {
        v26 = 0;
        v27 = &v19[-*v2];
        *(_BYTE *)v22 = v15;
        v20 = v22 + 1;
        if (v19 == v21)
          goto LABEL_49;
      }
      if (v22 >= 8 && (unint64_t)(v21 - v26) >= 0x20)
      {
        if (v22 < 0x20)
        {
          v28 = 0;
          goto LABEL_41;
        }
        v28 = v22 & 0xFFFFFFFFFFFFFFE0;
        v29 = &v26[v22 - 16];
        v30 = (__int128 *)(v19 - 16);
        v31 = v22 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v32 = *v30;
          *((_OWORD *)v29 - 1) = *(v30 - 1);
          *(_OWORD *)v29 = v32;
          v29 -= 32;
          v30 -= 2;
          v31 -= 32;
        }
        while (v31);
        if (v22 == v28)
          goto LABEL_48;
        if ((v22 & 0x18) != 0)
        {
LABEL_41:
          v27 -= v22 & 0xFFFFFFFFFFFFFFF8;
          v33 = &v26[&v19[-v28] - v21 - 8];
          v34 = (uint64_t *)&v19[-v28 - 8];
          v35 = v28 - (v22 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v36 = *v34--;
            *(_QWORD *)v33 = v36;
            v33 -= 8;
            v35 += 8;
          }
          while (v35);
          v19 -= v22 & 0xFFFFFFFFFFFFFFF8;
          if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_48;
          goto LABEL_46;
        }
        v27 -= v28;
        v19 -= v28;
      }
LABEL_46:
      v37 = v27 - 1;
      do
      {
        v38 = *--v19;
        *v37-- = v38;
      }
      while (v19 != v21);
LABEL_48:
      v19 = (_BYTE *)*v2;
      v27 = v26;
      goto LABEL_49;
    }
    *v19 = v15;
    v20 = (uint64_t)(v19 + 1);
LABEL_51:
    *(_QWORD *)(a1 + 64) = v20;
    v39 = *(_DWORD *)(a1 + 20);
    if (v39 == 10)
    {
      v138 = *(_QWORD *)(a1 + 48) + 1;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = v138;
      v40 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
      goto LABEL_251;
    }
    v40 = "invalid string: missing closing quote";
    switch(v39)
    {
      case -1:
        goto LABEL_251;
      case 0:
        v40 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
        goto LABEL_251;
      case 1:
        v40 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
        goto LABEL_251;
      case 2:
        v40 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
        goto LABEL_251;
      case 3:
        v40 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
        goto LABEL_251;
      case 4:
        v40 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
        goto LABEL_251;
      case 5:
        v40 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
        goto LABEL_251;
      case 6:
        v40 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
        goto LABEL_251;
      case 7:
        v40 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
        goto LABEL_251;
      case 8:
        v40 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
        goto LABEL_251;
      case 9:
        v40 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
        goto LABEL_251;
      case 11:
        v40 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
        goto LABEL_251;
      case 12:
        v40 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
        goto LABEL_251;
      case 13:
        v40 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
        goto LABEL_251;
      case 14:
        v40 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
        goto LABEL_251;
      case 15:
        v40 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
        goto LABEL_251;
      case 16:
        v40 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
        goto LABEL_251;
      case 17:
        v40 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
        goto LABEL_251;
      case 18:
        v40 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
        goto LABEL_251;
      case 19:
        v40 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
        goto LABEL_251;
      case 20:
        v40 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
        goto LABEL_251;
      case 21:
        v40 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
        goto LABEL_251;
      case 22:
        v40 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
        goto LABEL_251;
      case 23:
        v40 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
        goto LABEL_251;
      case 24:
        v40 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
        goto LABEL_251;
      case 25:
        v40 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
        goto LABEL_251;
      case 26:
        v40 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
        goto LABEL_251;
      case 27:
        v40 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
        goto LABEL_251;
      case 28:
        v40 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
        goto LABEL_251;
      case 29:
        v40 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
        goto LABEL_251;
      case 30:
        v40 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
        goto LABEL_251;
      case 31:
        v40 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
        goto LABEL_251;
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
        goto LABEL_217;
      case 34:
        return 4;
      case 92:
        v80 = sub_20B459C24(a1);
        v40 = "invalid string: forbidden character after backslash";
        switch(v80)
        {
          case '"':
            std::string::push_back((std::string *)(a1 + 80), 34);
            continue;
          case '/':
            std::string::push_back((std::string *)(a1 + 80), 47);
            continue;
          case '\\':
            std::string::push_back((std::string *)(a1 + 80), 92);
            continue;
          case 'b':
            std::string::push_back((std::string *)(a1 + 80), 8);
            continue;
          case 'f':
            std::string::push_back((std::string *)(a1 + 80), 12);
            continue;
          case 'n':
            std::string::push_back((std::string *)(a1 + 80), 10);
            continue;
          case 'r':
            std::string::push_back((std::string *)(a1 + 80), 13);
            continue;
          case 't':
            std::string::push_back((std::string *)(a1 + 80), 9);
            continue;
          case 'u':
            v91 = sub_20B459E74(a1);
            if (v91 == -1)
              goto LABEL_287;
            v92 = v91;
            if ((v91 & 0xFFFFFC00) == 0xD800)
            {
              if (sub_20B459C24(a1) != 92 || sub_20B459C24(a1) != 117)
              {
LABEL_288:
                v40 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
                goto LABEL_251;
              }
              v93 = sub_20B459E74(a1);
              if (v93 == -1)
              {
LABEL_287:
                v40 = "invalid string: '\\u' must be followed by 4 hex digits";
                goto LABEL_251;
              }
              if (v93 >> 10 != 55)
                goto LABEL_288;
              v92 = v93 + (v92 << 10) - 56613888;
LABEL_147:
              std::string::push_back((std::string *)(a1 + 80), (v92 >> 18) | 0xF0);
              std::string::push_back((std::string *)(a1 + 80), (v92 >> 12) & 0x3F | 0x80);
              goto LABEL_148;
            }
            if ((v91 & 0xFFFFFC00) == 0xDC00)
            {
              v40 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
              goto LABEL_251;
            }
            if ((int)v91 <= 127)
            {
              v79 = v91;
LABEL_111:
              std::string::push_back((std::string *)(a1 + 80), v79);
              continue;
            }
            if (v91 <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 80), (v91 >> 6) | 0xC0);
              v79 = v92 & 0x3F | 0x80;
              goto LABEL_111;
            }
            if (HIWORD(v91))
              goto LABEL_147;
            std::string::push_back((std::string *)(a1 + 80), (v91 >> 12) | 0xE0);
LABEL_148:
            std::string::push_back((std::string *)(a1 + 80), (v92 >> 6) & 0x3F | 0x80);
            std::string::push_back((std::string *)(a1 + 80), v92 & 0x3F | 0x80);
            break;
          default:
            goto LABEL_251;
        }
        continue;
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
        std::string::push_back((std::string *)(a1 + 80), v39);
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v41 = *(_DWORD *)(a1 + 20);
          if (v41 == -1)
            goto LABEL_250;
        }
        else
        {
          v43 = *(_BYTE **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 20) = -1;
            goto LABEL_250;
          }
          v44 = *v43;
          LOBYTE(v41) = *v43;
          *(_QWORD *)a1 = v43 + 1;
          *(_DWORD *)(a1 + 20) = v44;
          if (v44 == -1)
            goto LABEL_250;
        }
        v46 = *(_BYTE **)(a1 + 64);
        v45 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v46 < v45)
        {
          *v46 = v41;
          v47 = (uint64_t)(v46 + 1);
          goto LABEL_132;
        }
        v48 = (_BYTE *)*v2;
        v49 = (unint64_t)&v46[-*v2];
        v50 = v49 + 1;
        if ((uint64_t)(v49 + 1) < 0)
          goto LABEL_286;
        v51 = v45 - (_QWORD)v48;
        if (2 * v51 > v50)
          v50 = 2 * v51;
        if (v51 >= 0x3FFFFFFFFFFFFFFFLL)
          v52 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          v53 = (char *)operator new(v52);
          v54 = &v53[v49];
          v53[v49] = v41;
          v47 = (uint64_t)&v53[v49 + 1];
          if (v46 == v48)
            goto LABEL_130;
        }
        else
        {
          v53 = 0;
          v54 = &v46[-*v2];
          *(_BYTE *)v49 = v41;
          v47 = v49 + 1;
          if (v46 == v48)
            goto LABEL_130;
        }
        if (v49 < 8 || (unint64_t)(v48 - v53) < 0x20)
          goto LABEL_127;
        if (v49 >= 0x20)
        {
          v55 = v49 & 0xFFFFFFFFFFFFFFE0;
          v70 = &v53[v49 - 16];
          v71 = (__int128 *)(v46 - 16);
          v72 = v49 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v73 = *v71;
            *((_OWORD *)v70 - 1) = *(v71 - 1);
            *(_OWORD *)v70 = v73;
            v70 -= 32;
            v71 -= 2;
            v72 -= 32;
          }
          while (v72);
          if (v49 == v55)
            goto LABEL_129;
          if ((v49 & 0x18) == 0)
          {
            v54 -= v55;
            v46 -= v55;
LABEL_127:
            v89 = v54 - 1;
            do
            {
              v90 = *--v46;
              *v89-- = v90;
            }
            while (v46 != v48);
            goto LABEL_129;
          }
        }
        else
        {
          v55 = 0;
        }
        v54 -= v49 & 0xFFFFFFFFFFFFFFF8;
        v74 = &v53[&v46[-v55] - v48 - 8];
        v75 = (uint64_t *)&v46[-v55 - 8];
        v76 = v55 - (v49 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v77 = *v75--;
          *(_QWORD *)v74 = v77;
          v74 -= 8;
          v76 += 8;
        }
        while (v76);
        v46 -= v49 & 0xFFFFFFFFFFFFFFF8;
        if (v49 != (v49 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_127;
LABEL_129:
        v46 = (_BYTE *)*v2;
        v54 = v53;
LABEL_130:
        *(_QWORD *)(a1 + 56) = v54;
        *(_QWORD *)(a1 + 64) = v47;
        *(_QWORD *)(a1 + 72) = &v53[v52];
        if (v46)
          operator delete(v46);
LABEL_132:
        *(_QWORD *)(a1 + 64) = v47;
        v39 = *(_DWORD *)(a1 + 20);
        if (v39 == 10)
          goto LABEL_249;
        goto LABEL_216;
      case 224:
        std::string::push_back((std::string *)(a1 + 80), -32);
        sub_20B459C24(a1);
        v78 = *(_DWORD *)(a1 + 20);
        if ((v78 - 192) < 0xFFFFFFE0)
          goto LABEL_250;
        goto LABEL_109;
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 238:
      case 239:
        std::string::push_back((std::string *)(a1 + 80), v39);
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v42 = *(_DWORD *)(a1 + 20);
          if (v42 == -1)
            goto LABEL_250;
        }
        else
        {
          v56 = *(_BYTE **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 20) = -1;
            goto LABEL_250;
          }
          v57 = *v56;
          LOBYTE(v42) = *v56;
          *(_QWORD *)a1 = v56 + 1;
          *(_DWORD *)(a1 + 20) = v57;
          if (v57 == -1)
            goto LABEL_250;
        }
        v59 = *(_BYTE **)(a1 + 64);
        v58 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v59 < v58)
        {
          *v59 = v42;
          v60 = (uint64_t)(v59 + 1);
          goto LABEL_156;
        }
        v61 = (_BYTE *)*v2;
        v62 = (unint64_t)&v59[-*v2];
        v63 = v62 + 1;
        if ((uint64_t)(v62 + 1) < 0)
          goto LABEL_286;
        v64 = v58 - (_QWORD)v61;
        if (2 * v64 > v63)
          v63 = 2 * v64;
        if (v64 >= 0x3FFFFFFFFFFFFFFFLL)
          v65 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v65 = v63;
        if (v65)
        {
          v66 = (char *)operator new(v65);
          v67 = &v66[v62];
          v66[v62] = v42;
          v60 = (uint64_t)&v66[v62 + 1];
          if (v59 == v61)
            goto LABEL_154;
        }
        else
        {
          v66 = 0;
          v67 = &v59[-*v2];
          *(_BYTE *)v62 = v42;
          v60 = v62 + 1;
          if (v59 == v61)
            goto LABEL_154;
        }
        if (v62 < 8 || (unint64_t)(v61 - v66) < 0x20)
          goto LABEL_151;
        if (v62 >= 0x20)
        {
          v69 = v62 & 0xFFFFFFFFFFFFFFE0;
          v81 = &v66[v62 - 16];
          v82 = (__int128 *)(v59 - 16);
          v83 = v62 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v84 = *v82;
            *((_OWORD *)v81 - 1) = *(v82 - 1);
            *(_OWORD *)v81 = v84;
            v81 -= 32;
            v82 -= 2;
            v83 -= 32;
          }
          while (v83);
          if (v62 == v69)
            goto LABEL_153;
          if ((v62 & 0x18) == 0)
          {
            v67 -= v69;
            v59 -= v69;
LABEL_151:
            v94 = v67 - 1;
            do
            {
              v95 = *--v59;
              *v94-- = v95;
            }
            while (v59 != v61);
            goto LABEL_153;
          }
        }
        else
        {
          v69 = 0;
        }
        v67 -= v62 & 0xFFFFFFFFFFFFFFF8;
        v85 = &v66[&v59[-v69] - v61 - 8];
        v86 = (uint64_t *)&v59[-v69 - 8];
        v87 = v69 - (v62 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v88 = *v86--;
          *(_QWORD *)v85 = v88;
          v85 -= 8;
          v87 += 8;
        }
        while (v87);
        v59 -= v62 & 0xFFFFFFFFFFFFFFF8;
        if (v62 != (v62 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_151;
LABEL_153:
        v59 = (_BYTE *)*v2;
        v67 = v66;
LABEL_154:
        *(_QWORD *)(a1 + 56) = v67;
        *(_QWORD *)(a1 + 64) = v60;
        *(_QWORD *)(a1 + 72) = &v66[v65];
        if (v59)
          operator delete(v59);
LABEL_156:
        *(_QWORD *)(a1 + 64) = v60;
        v96 = *(_DWORD *)(a1 + 20);
        if (v96 == 10)
          goto LABEL_249;
        if ((v96 - 192) < 0xFFFFFFC0)
          goto LABEL_250;
        v97 = *(char *)(a1 + 103);
        if ((v97 & 0x80000000) == 0)
        {
          if (*(_BYTE *)(a1 + 103) != 22)
          {
            v98 = *(unsigned __int8 *)(a1 + 103);
            *(_BYTE *)(a1 + 103) = (v97 + 1) & 0x7F;
            v103 = (char *)(a1 + 80);
            goto LABEL_180;
          }
          v98 = 22;
          v99 = (void *)(a1 + 80);
LABEL_164:
          if (v98 + 1 > 2 * v98)
            v102 = v98 + 1;
          else
            v102 = 2 * v98;
          if (v102 < 0x17)
          {
            v101 = 23;
            goto LABEL_169;
          }
          v104 = (v102 & 0x7FFFFFFFFFFFFFF8) + 8;
          v105 = v102 | 7;
          if (v105 == 23)
            v105 = v104;
          v101 = v105 + 1;
          v103 = (char *)operator new(v105 + 1);
          if (v98)
          {
LABEL_175:
            memmove(v103, v99, v98);
            if (v98 != 22)
              goto LABEL_176;
LABEL_177:
            *(_QWORD *)(a1 + 80) = v103;
            *(_QWORD *)(a1 + 96) = v101 | 0x8000000000000000;
            goto LABEL_179;
          }
LABEL_176:
          operator delete(v99);
          goto LABEL_177;
        }
        v100 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
        v98 = v100 - 1;
        if (*(_QWORD *)(a1 + 88) == v100 - 1)
        {
          if (v100 == 0x7FFFFFFFFFFFFFF8)
            goto LABEL_290;
          v99 = *v11;
          v101 = 0x7FFFFFFFFFFFFFF7;
          if (v98 < 0x3FFFFFFFFFFFFFF3)
            goto LABEL_164;
LABEL_169:
          v103 = (char *)operator new(v101);
          if (v98)
            goto LABEL_175;
          goto LABEL_176;
        }
        v103 = (char *)*v11;
        v98 = *(_QWORD *)(a1 + 88);
LABEL_179:
        *(_QWORD *)(a1 + 88) = v98 + 1;
LABEL_180:
        v106 = &v103[v98];
        *v106 = v96;
        v106[1] = 0;
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v107 = *(_DWORD *)(a1 + 20);
          if (v107 == -1)
            goto LABEL_250;
        }
        else
        {
          v108 = *(_BYTE **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 20) = -1;
            goto LABEL_250;
          }
          v109 = *v108;
          LOBYTE(v107) = *v108;
          *(_QWORD *)a1 = v108 + 1;
          *(_DWORD *)(a1 + 20) = v109;
          if (v109 == -1)
            goto LABEL_250;
        }
        v111 = *(_BYTE **)(a1 + 64);
        v110 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v111 < v110)
        {
          *v111 = v107;
          v112 = (uint64_t)(v111 + 1);
          goto LABEL_215;
        }
        v113 = (_BYTE *)*v2;
        v114 = (unint64_t)&v111[-*v2];
        v115 = v114 + 1;
        if ((uint64_t)(v114 + 1) < 0)
LABEL_286:
          sub_20AEC60B8();
        v116 = v110 - (_QWORD)v113;
        if (2 * v116 > v115)
          v115 = 2 * v116;
        if (v116 >= 0x3FFFFFFFFFFFFFFFLL)
          v117 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v117 = v115;
        if (v117)
        {
          v118 = (char *)operator new(v117);
          v119 = &v118[v114];
          v118[v114] = v107;
          v112 = (uint64_t)&v118[v114 + 1];
          if (v111 == v113)
            goto LABEL_213;
        }
        else
        {
          v118 = 0;
          v119 = &v111[-*v2];
          *(_BYTE *)v114 = v107;
          v112 = v114 + 1;
          if (v111 == v113)
            goto LABEL_213;
        }
        if (v114 < 8 || (unint64_t)(v113 - v118) < 0x20)
          goto LABEL_210;
        if (v114 >= 0x20)
        {
          v120 = v114 & 0xFFFFFFFFFFFFFFE0;
          v121 = &v118[v114 - 16];
          v122 = (__int128 *)(v111 - 16);
          v123 = v114 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v124 = *v122;
            *((_OWORD *)v121 - 1) = *(v122 - 1);
            *(_OWORD *)v121 = v124;
            v121 -= 32;
            v122 -= 2;
            v123 -= 32;
          }
          while (v123);
          if (v114 == v120)
            goto LABEL_212;
          if ((v114 & 0x18) == 0)
          {
            v119 -= v120;
            v111 -= v120;
LABEL_210:
            v129 = v119 - 1;
            do
            {
              v130 = *--v111;
              *v129-- = v130;
            }
            while (v111 != v113);
            goto LABEL_212;
          }
        }
        else
        {
          v120 = 0;
        }
        v119 -= v114 & 0xFFFFFFFFFFFFFFF8;
        v125 = &v118[&v111[-v120] - v113 - 8];
        v126 = (uint64_t *)&v111[-v120 - 8];
        v127 = v120 - (v114 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v128 = *v126--;
          *(_QWORD *)v125 = v128;
          v125 -= 8;
          v127 += 8;
        }
        while (v127);
        v111 -= v114 & 0xFFFFFFFFFFFFFFF8;
        if (v114 != (v114 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_210;
LABEL_212:
        v111 = (_BYTE *)*v2;
        v119 = v118;
LABEL_213:
        *(_QWORD *)(a1 + 56) = v119;
        *(_QWORD *)(a1 + 64) = v112;
        *(_QWORD *)(a1 + 72) = &v118[v117];
        if (v111)
          operator delete(v111);
LABEL_215:
        *(_QWORD *)(a1 + 64) = v112;
        v39 = *(_DWORD *)(a1 + 20);
        if (v39 != 10)
        {
LABEL_216:
          if ((v39 - 192) < 0xFFFFFFC0)
            goto LABEL_250;
LABEL_217:
          v131 = *(char *)(a1 + 103);
          if ((v131 & 0x80000000) == 0)
          {
            if (*(_BYTE *)(a1 + 103) != 22)
            {
              v12 = *(unsigned __int8 *)(a1 + 103);
              *(_BYTE *)(a1 + 103) = (v131 + 1) & 0x7F;
              v13 = (char *)(a1 + 80);
              goto LABEL_15;
            }
            v12 = 22;
            v132 = (void *)(a1 + 80);
LABEL_223:
            if (v12 + 1 > 2 * v12)
              v135 = v12 + 1;
            else
              v135 = 2 * v12;
            v136 = (v135 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v135 | 7) != 0x17)
              v136 = v135 | 7;
            if (v135 >= 0x17)
              v134 = v136 + 1;
            else
              v134 = 23;
LABEL_231:
            v137 = (char *)operator new(v134);
            v13 = v137;
            if (!v12 || (memmove(v137, v132, v12), v12 != 22))
              operator delete(v132);
            *(_QWORD *)(a1 + 80) = v13;
            *(_QWORD *)(a1 + 96) = v134 | 0x8000000000000000;
            goto LABEL_236;
          }
          v133 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
          v12 = v133 - 1;
          if (*(_QWORD *)(a1 + 88) == v133 - 1)
          {
            if (v133 == 0x7FFFFFFFFFFFFFF8)
LABEL_290:
              sub_20AEC0138();
            v132 = *v11;
            v134 = 0x7FFFFFFFFFFFFFF7;
            if (v12 >= 0x3FFFFFFFFFFFFFF3)
              goto LABEL_231;
            goto LABEL_223;
          }
          v13 = (char *)*v11;
          v12 = *(_QWORD *)(a1 + 88);
LABEL_236:
          *(_QWORD *)(a1 + 88) = v12 + 1;
LABEL_15:
          v14 = &v13[v12];
          *v14 = v39;
          v14[1] = 0;
          continue;
        }
LABEL_249:
        v139 = *(_QWORD *)(a1 + 48) + 1;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = v139;
LABEL_250:
        v40 = "invalid string: ill-formed UTF-8 byte";
LABEL_251:
        *(_QWORD *)(a1 + 104) = v40;
        return 14;
      case 237:
        std::string::push_back((std::string *)(a1 + 80), -19);
        sub_20B459C24(a1);
        v78 = *(_DWORD *)(a1 + 20);
        if ((v78 - 160) < 0xFFFFFFE0)
          goto LABEL_250;
        goto LABEL_109;
      case 240:
        std::string::push_back((std::string *)(a1 + 80), -16);
        sub_20B459C24(a1);
        v68 = *(_DWORD *)(a1 + 20);
        if ((v68 - 192) < 0xFFFFFFD0)
          goto LABEL_250;
        goto LABEL_108;
      case 241:
      case 242:
      case 243:
        std::string::push_back((std::string *)(a1 + 80), v39);
        sub_20B459C24(a1);
        v68 = *(_DWORD *)(a1 + 20);
        if ((v68 - 192) < 0xFFFFFFC0)
          goto LABEL_250;
        goto LABEL_108;
      case 244:
        std::string::push_back((std::string *)(a1 + 80), -12);
        sub_20B459C24(a1);
        v68 = *(_DWORD *)(a1 + 20);
        if ((v68 - 144) < 0xFFFFFFF0)
          goto LABEL_250;
LABEL_108:
        std::string::push_back((std::string *)(a1 + 80), v68);
        sub_20B459C24(a1);
        v78 = *(_DWORD *)(a1 + 20);
        if ((v78 - 192) < 0xFFFFFFC0)
          goto LABEL_250;
LABEL_109:
        std::string::push_back((std::string *)(a1 + 80), v78);
        sub_20B459C24(a1);
        if ((*(_DWORD *)(a1 + 20) - 192) < 0xFFFFFFC0)
          goto LABEL_250;
        v79 = *(_DWORD *)(a1 + 20);
        goto LABEL_111;
      default:
        goto LABEL_250;
    }
  }
}

uint64_t sub_20B459550(uint64_t a1)
{
  _BYTE *v2;
  _QWORD *v3;
  int v4;
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  _BYTE *v10;
  const char *v11;
  int v12;
  int v13;
  int v14;
  size_t v15;
  char *v16;
  char *v17;
  int v18;
  _BYTE *v19;
  int v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  __int128 *v33;
  unint64_t v34;
  __int128 v35;
  char *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  int v42;
  int v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;
  int v49;
  int v50;
  uint64_t v51;
  const char *v52;
  int v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  const char *v57;
  unint64_t v58;
  const char *v60;
  uint64_t v61;
  int v62;
  int64x2_t v63;
  char *__endptr;

  if (*(char *)(a1 + 103) < 0)
  {
    **(_BYTE **)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 103) = 0;
  }
  v3 = (_QWORD *)(a1 + 56);
  v2 = *(_BYTE **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v2;
  v4 = *(_DWORD *)(a1 + 20);
  v5 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v2 >= v5)
  {
    v7 = v5 - (_QWORD)v2;
    v8 = 2 * v7;
    if (2 * v7 <= 1)
      v8 = 1;
    if (v7 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v10 = operator new(v9);
    *v10 = v4;
    v6 = v10 + 1;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v10 + 1;
    *(_QWORD *)(a1 + 72) = &v10[v9];
    if (v2)
      operator delete(v2);
  }
  else
  {
    *v2 = v4;
    v6 = v2 + 1;
  }
  v11 = (const char *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v6;
  v12 = *(_DWORD *)(a1 + 20);
  v13 = 5;
  if ((v12 - 49) >= 9)
  {
    if (v12 != 48)
    {
      if (v12 == 45)
        std::string::push_back((std::string *)(a1 + 80), 45);
      v50 = sub_20B459C24(a1);
      if ((v50 - 49) < 9)
      {
        v12 = *(_DWORD *)(a1 + 20);
        v14 = 6;
        goto LABEL_15;
      }
      if (v50 != 48)
      {
        v52 = "invalid number; expected digit after '-'";
        goto LABEL_128;
      }
      v12 = *(_DWORD *)(a1 + 20);
      v13 = 6;
    }
    std::string::push_back((std::string *)(a1 + 80), v12);
    v53 = sub_20B459C24(a1);
    if (v53 == 46)
    {
LABEL_80:
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 136));
      if (sub_20B459C24(a1) - 48 > 9)
      {
        v52 = "invalid number; expected digit after '.'";
        goto LABEL_128;
      }
      do
      {
        std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
        v49 = sub_20B459C24(a1);
      }
      while ((v49 - 48) < 0xA);
      if (v49 != 101 && v49 != 69)
        goto LABEL_103;
    }
    else if (v53 != 69 && v53 != 101)
    {
      goto LABEL_104;
    }
    v42 = *(_DWORD *)(a1 + 20);
LABEL_101:
    std::string::push_back((std::string *)(a1 + 80), v42);
    v54 = sub_20B459C24(a1);
    if ((v54 - 48) < 0xA)
      goto LABEL_102;
    if (v54 == 43 || v54 == 45)
    {
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
      if (sub_20B459C24(a1) - 48 < 0xA)
      {
        do
LABEL_102:
          std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
        while (sub_20B459C24(a1) - 48 < 0xA);
LABEL_103:
        v13 = 7;
        goto LABEL_104;
      }
      v52 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      v52 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_128:
    *(_QWORD *)(a1 + 104) = v52;
    return 14;
  }
  v14 = 5;
LABEL_15:
  v62 = v14;
  std::string::push_back((std::string *)(a1 + 80), v12);
  v63 = vdupq_n_s64(1uLL);
  while (1)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v63);
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      v18 = *(_DWORD *)(a1 + 20);
      if (v18 == -1)
        goto LABEL_76;
    }
    else
    {
      v19 = *(_BYTE **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 20) = -1;
LABEL_76:
        v13 = v62;
        goto LABEL_104;
      }
      v20 = *v19;
      LOBYTE(v18) = *v19;
      *(_QWORD *)a1 = v19 + 1;
      *(_DWORD *)(a1 + 20) = v20;
      if (v20 == -1)
        goto LABEL_76;
    }
    v22 = *(_BYTE **)(a1 + 64);
    v21 = *(_QWORD *)(a1 + 72);
    if ((unint64_t)v22 < v21)
    {
      *v22 = v18;
      v23 = (uint64_t)(v22 + 1);
      goto LABEL_53;
    }
    v24 = (_BYTE *)*v3;
    v25 = (unint64_t)&v22[-*v3];
    v26 = v25 + 1;
    if ((uint64_t)(v25 + 1) < 0)
      sub_20AEC60B8();
    v27 = v21 - (_QWORD)v24;
    if (2 * v27 > v26)
      v26 = 2 * v27;
    if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
      v28 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (!v28)
    {
      v29 = 0;
      v30 = &v22[-*v3];
      *(_BYTE *)v25 = v18;
      v23 = v25 + 1;
      if (v22 == v24)
        goto LABEL_51;
LABEL_35:
      if (v25 >= 8 && (unint64_t)(v24 - v29) >= 0x20)
      {
        if (v25 < 0x20)
        {
          v31 = 0;
          goto LABEL_43;
        }
        v31 = v25 & 0xFFFFFFFFFFFFFFE0;
        v32 = &v29[v25 - 16];
        v33 = (__int128 *)(v22 - 16);
        v34 = v25 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v35 = *v33;
          *((_OWORD *)v32 - 1) = *(v33 - 1);
          *(_OWORD *)v32 = v35;
          v32 -= 32;
          v33 -= 2;
          v34 -= 32;
        }
        while (v34);
        if (v25 == v31)
          goto LABEL_50;
        if ((v25 & 0x18) != 0)
        {
LABEL_43:
          v30 -= v25 & 0xFFFFFFFFFFFFFFF8;
          v36 = &v29[&v22[-v31] - v24 - 8];
          v37 = (uint64_t *)&v22[-v31 - 8];
          v38 = v31 - (v25 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v39 = *v37--;
            *(_QWORD *)v36 = v39;
            v36 -= 8;
            v38 += 8;
          }
          while (v38);
          v22 -= v25 & 0xFFFFFFFFFFFFFFF8;
          if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_50;
          goto LABEL_48;
        }
        v30 -= v31;
        v22 -= v31;
      }
LABEL_48:
      v40 = v30 - 1;
      do
      {
        v41 = *--v22;
        *v40-- = v41;
      }
      while (v22 != v24);
LABEL_50:
      v22 = (_BYTE *)*v3;
      v30 = v29;
      goto LABEL_51;
    }
    v29 = (char *)operator new(v28);
    v30 = &v29[v25];
    v29[v25] = v18;
    v23 = (uint64_t)&v29[v25 + 1];
    if (v22 != v24)
      goto LABEL_35;
LABEL_51:
    *(_QWORD *)(a1 + 56) = v30;
    *(_QWORD *)(a1 + 64) = v23;
    *(_QWORD *)(a1 + 72) = &v29[v28];
    if (v22)
      operator delete(v22);
LABEL_53:
    *(_QWORD *)(a1 + 64) = v23;
    v42 = *(_DWORD *)(a1 + 20);
    if ((v42 - 48) >= 0xA)
      break;
    v43 = *(char *)(a1 + 103);
    if (v43 < 0)
    {
      v45 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
      v15 = v45 - 1;
      if (*(_QWORD *)(a1 + 88) != v45 - 1)
      {
        v16 = *(char **)v11;
        v15 = *(_QWORD *)(a1 + 88);
        goto LABEL_73;
      }
      if (v45 == 0x7FFFFFFFFFFFFFF8)
        sub_20AEC0138();
      v44 = *(char **)v11;
      if (v15 > 0x3FFFFFFFFFFFFFF2)
      {
        v48 = 0x7FFFFFFFFFFFFFF7;
        v16 = (char *)operator new(0x7FFFFFFFFFFFFFF7uLL);
        goto LABEL_69;
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 103) != 22)
      {
        v15 = *(unsigned __int8 *)(a1 + 103);
        *(_BYTE *)(a1 + 103) = (v43 + 1) & 0x7F;
        v16 = (char *)(a1 + 80);
        goto LABEL_17;
      }
      v44 = (char *)(a1 + 80);
      v15 = 22;
    }
    if (v15 + 1 > 2 * v15)
      v46 = v15 + 1;
    else
      v46 = 2 * v15;
    v47 = (v46 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v47 = v46 | 7;
    if (v46 >= 0x17)
      v48 = v47 + 1;
    else
      v48 = 23;
    v16 = (char *)operator new(v48);
    if (!v15)
    {
LABEL_70:
      operator delete(v44);
      goto LABEL_71;
    }
LABEL_69:
    memmove(v16, v44, v15);
    if (v15 != 22)
      goto LABEL_70;
LABEL_71:
    *(_QWORD *)(a1 + 80) = v16;
    *(_QWORD *)(a1 + 96) = v48 | 0x8000000000000000;
LABEL_73:
    *(_QWORD *)(a1 + 88) = v15 + 1;
LABEL_17:
    v17 = &v16[v15];
    *v17 = v42;
    v17[1] = 0;
  }
  if (v42 > 68)
  {
    v13 = v62;
    if (v42 != 69 && v42 != 101)
      goto LABEL_104;
    goto LABEL_101;
  }
  v13 = v62;
  if (v42 == 10)
  {
    v51 = *(_QWORD *)(a1 + 48) + 1;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = v51;
  }
  else if (v42 == 46)
  {
    goto LABEL_80;
  }
LABEL_104:
  v55 = (_QWORD *)(a1 + 40);
  v56 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 24) = 1;
  --*(_QWORD *)(a1 + 32);
  if (v56 || (v55 = (_QWORD *)(a1 + 48), (v56 = *(_QWORD *)(a1 + 48)) != 0))
    *v55 = v56 - 1;
  if (*(_DWORD *)(a1 + 20) != -1)
    --*(_QWORD *)(a1 + 64);
  __endptr = 0;
  *__error() = 0;
  if (v13 == 6)
  {
    v60 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0)
      v60 = *(const char **)v11;
    v61 = strtoll(v60, &__endptr, 10);
    if (*__error())
      goto LABEL_118;
    *(_QWORD *)(a1 + 112) = v61;
    return 6;
  }
  else
  {
    if (v13 == 5)
    {
      v57 = (const char *)(a1 + 80);
      if (*(char *)(a1 + 103) < 0)
        v57 = *(const char **)v11;
      v58 = strtoull(v57, &__endptr, 10);
      if (!*__error())
      {
        *(_QWORD *)(a1 + 120) = v58;
        return 5;
      }
    }
LABEL_118:
    if (*(char *)(a1 + 103) < 0)
      v11 = *(const char **)v11;
    *(double *)(a1 + 128) = strtod(v11, &__endptr);
    return 7;
  }
}

uint64_t sub_20B459C24(uint64_t a1)
{
  int v2;
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t result;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;

  *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
  if (*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a1 + 24) = 0;
    v2 = *(_DWORD *)(a1 + 20);
    if (v2 != -1)
      goto LABEL_3;
    return 0xFFFFFFFFLL;
  }
  v16 = *(_BYTE **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 20) = -1;
    return 0xFFFFFFFFLL;
  }
  v17 = *v16;
  LOBYTE(v2) = *v16;
  *(_QWORD *)a1 = v16 + 1;
  *(_DWORD *)(a1 + 20) = v17;
  if (v17 == -1)
    return 0xFFFFFFFFLL;
LABEL_3:
  v4 = *(_BYTE **)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v4 < v3)
  {
    *v4 = v2;
    v5 = (uint64_t)(v4 + 1);
    goto LABEL_36;
  }
  v6 = (_BYTE **)(a1 + 56);
  v7 = *(_BYTE **)(a1 + 56);
  v8 = v4 - v7;
  v9 = v4 - v7 + 1;
  if (v9 < 0)
    sub_20AEC60B8();
  v10 = v3 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v5 = (uint64_t)&v12[v8 + 1];
    if (v4 != v7)
    {
LABEL_13:
      if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
        goto LABEL_32;
      if (v8 >= 0x20)
      {
        v15 = v8 & 0xFFFFFFFFFFFFFFE0;
        v19 = (__int128 *)(v4 - 16);
        v20 = &v12[v4 - 16 - v7];
        v21 = v8 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v22 = *v19;
          *(v20 - 1) = *(v19 - 1);
          *v20 = v22;
          v20 -= 2;
          v19 -= 2;
          v21 -= 32;
        }
        while (v21);
        if (v8 == v15)
        {
LABEL_34:
          v4 = *v6;
          *(_QWORD *)(a1 + 56) = v12;
          *(_QWORD *)(a1 + 64) = v5;
          *(_QWORD *)(a1 + 72) = v14;
          if (!v4)
            goto LABEL_36;
          goto LABEL_35;
        }
        if ((v8 & 0x18) == 0)
        {
          v13 -= v15;
          v4 -= v15;
          goto LABEL_32;
        }
      }
      else
      {
        v15 = 0;
      }
      v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
      v23 = &v4[-v15 - 8];
      v24 = &v12[v23 - v7];
      v25 = v15 - (v8 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v26 = *(_QWORD *)v23;
        v23 -= 8;
        *v24-- = v26;
        v25 += 8;
      }
      while (v25);
      v4 -= v8 & 0xFFFFFFFFFFFFFFF8;
      if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_34;
LABEL_32:
      v27 = v13 - 1;
      do
      {
        v28 = *--v4;
        *v27-- = v28;
      }
      while (v4 != v7);
      goto LABEL_34;
    }
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v4 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v5 = v8 + 1;
    if (v4 != v7)
      goto LABEL_13;
  }
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v14;
  if (v4)
LABEL_35:
    operator delete(v4);
LABEL_36:
  *(_QWORD *)(a1 + 64) = v5;
  result = *(unsigned int *)(a1 + 20);
  if ((_DWORD)result == 10)
  {
    v29 = *(_QWORD *)(a1 + 48) + 1;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = v29;
  }
  return result;
}

uint64_t sub_20B459E74(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  sub_20B459C24(a1);
  v2 = *(_DWORD *)(a1 + 20);
  v3 = v2 - 48;
  if ((v2 - 48) < 0xA)
  {
LABEL_4:
    sub_20B459C24(a1);
    v4 = *(_DWORD *)(a1 + 20);
    v5 = v4 - 48;
    if ((v4 - 48) < 0xA)
      goto LABEL_5;
    goto LABEL_10;
  }
  if ((v2 - 65) <= 5)
  {
    v3 = v2 - 55;
    goto LABEL_4;
  }
  if ((v2 - 97) > 5)
    return 0xFFFFFFFFLL;
  v3 = v2 - 87;
  sub_20B459C24(a1);
  v4 = *(_DWORD *)(a1 + 20);
  v5 = v4 - 48;
  if ((v4 - 48) < 0xA)
  {
LABEL_5:
    sub_20B459C24(a1);
    v6 = *(_DWORD *)(a1 + 20);
    v7 = v6 - 48;
    if ((v6 - 48) < 0xA)
      goto LABEL_6;
LABEL_12:
    if ((v6 - 65) < 6)
    {
      v7 = v6 - 55;
      sub_20B459C24(a1);
      v8 = *(_DWORD *)(a1 + 20);
      v9 = v8 - 48;
      if ((v8 - 48) < 0xA)
        return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
      goto LABEL_20;
    }
    if ((v6 - 97) > 5)
      return 0xFFFFFFFFLL;
    v7 = v6 - 87;
    sub_20B459C24(a1);
    v8 = *(_DWORD *)(a1 + 20);
    v9 = v8 - 48;
    if ((v8 - 48) >= 0xA)
      goto LABEL_20;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
LABEL_10:
  if ((v4 - 65) >= 6)
  {
    if ((v4 - 97) > 5)
      return 0xFFFFFFFFLL;
    v5 = v4 - 87;
    sub_20B459C24(a1);
    v6 = *(_DWORD *)(a1 + 20);
    v7 = v6 - 48;
    if ((v6 - 48) >= 0xA)
      goto LABEL_12;
  }
  else
  {
    v5 = v4 - 55;
    sub_20B459C24(a1);
    v6 = *(_DWORD *)(a1 + 20);
    v7 = v6 - 48;
    if ((v6 - 48) >= 0xA)
      goto LABEL_12;
  }
LABEL_6:
  sub_20B459C24(a1);
  v8 = *(_DWORD *)(a1 + 20);
  v9 = v8 - 48;
  if ((v8 - 48) < 0xA)
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
LABEL_20:
  if ((v8 - 65) < 6)
  {
    v9 = v8 - 55;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
  if ((v8 - 97) <= 5)
  {
    v9 = v8 - 87;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_20B45A020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  char v8;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *exception;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  std::string v44;
  std::string __p;
  std::string v46;
  std::exception v47;
  uint64_t v48;
  std::runtime_error v49;
  uint64_t v50;
  std::string v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;

  v4 = a1 + 120;
  v5 = a1 + 40;
  v52 = 0;
  v53 = 0;
  v6 = (unsigned __int8 *)(a2 + 136);
  v54 = 0;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v47.__vftable) = 1;
        sub_20B45EE34((unsigned __int8 **)a2, (unsigned __int8 *)&v47, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v47.__vftable) = 0;
        sub_20B45EE34((unsigned __int8 **)a2, (unsigned __int8 *)&v47, 0);
        goto LABEL_19;
      case 3:
        v47.__vftable = 0;
        sub_20B45F038((unsigned __int8 **)a2, (uint64_t)&v47, 0);
        goto LABEL_19;
      case 4:
        sub_20B45F434((unsigned __int8 **)a2, v4, 0);
        goto LABEL_19;
      case 5:
        v47.__vftable = *(std::exception_vtbl **)(a1 + 160);
        sub_20B45F684((unsigned __int8 **)a2, (uint64_t *)&v47, 0);
        goto LABEL_19;
      case 6:
        v47.__vftable = *(std::exception_vtbl **)(a1 + 152);
        sub_20B45F234((unsigned __int8 **)a2, (uint64_t *)&v47, 0);
        goto LABEL_19;
      case 7:
        if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v47.__vftable = *(std::exception_vtbl **)(a1 + 168);
          sub_20B45EC30((unsigned __int8 **)a2, (uint64_t *)&v47, 0);
          goto LABEL_19;
        }
        v42 = *(_QWORD *)(a1 + 72);
        sub_20B45AD8C(v5, &v51);
        sub_20B45AD8C(v5, &v44);
        sub_20B1F16DC("number overflow parsing '", &v44, &__p);
        sub_20B214D58("'", &__p, &v46);
        sub_20B45E198(406, (uint64_t)&v46, (uint64_t)&v47);
        v34 = sub_20B45E144(a2, v42, (uint64_t)&v51, (uint64_t)&v47);
        v47.__vftable = (std::exception_vtbl *)&off_24C41D9D8;
        std::runtime_error::~runtime_error(&v49);
        std::exception::~exception(&v47);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
        goto LABEL_83;
      case 8:
        if (!sub_20B45DCB4(a2, 0xFFFFFFFFFFFFFFFFLL))
          goto LABEL_74;
        v7 = sub_20B457F9C(v5);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 == 10)
        {
          v8 = sub_20B45E010(a2);
          goto LABEL_13;
        }
        v28 = v53;
        if (v53 == v54 << 6)
        {
          if ((uint64_t)(v53 + 1) < 0)
            sub_20B451A44();
          v29 = v54 << 7;
          if (v54 << 7 <= (v53 & 0xFFFFFFFFFFFFFFC0) + 64)
            v29 = (v53 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v53 <= 0x3FFFFFFFFFFFFFFELL)
            v30 = v29;
          else
            v30 = 0x7FFFFFFFFFFFFFFFLL;
          sub_20B45D3B8((uint64_t)&v52, v30);
          v28 = v53;
        }
        v53 = v28 + 1;
        *(_QWORD *)&v52[(v28 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v28;
        continue;
      case 9:
        if ((sub_20B45D4B8(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)
          goto LABEL_74;
        v9 = sub_20B457F9C(v5);
        *(_DWORD *)(a1 + 32) = v9;
        if (v9 != 11)
        {
          if (v9 != 4)
            goto LABEL_80;
          if (!sub_20B45DA98(a2, v4))
            goto LABEL_74;
          v31 = sub_20B457F9C(v5);
          *(_DWORD *)(a1 + 32) = v31;
          if (v31 != 12)
            goto LABEL_81;
          v32 = v53;
          if (v53 == v54 << 6)
          {
            if ((uint64_t)(v53 + 1) < 0)
              sub_20B451A44();
            if (v53 > 0x3FFFFFFFFFFFFFFELL)
            {
              v33 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if (v54 << 7 <= (v53 & 0xFFFFFFFFFFFFFFC0) + 64)
            {
              v33 = (v53 & 0xFFFFFFFFFFFFFFC0) + 64;
            }
            else
            {
              v33 = v54 << 7;
            }
            sub_20B45D3B8((uint64_t)&v52, v33);
            v32 = v53;
          }
          v53 = v32 + 1;
          *(_QWORD *)&v52[(v32 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v32);
          *(_DWORD *)(a1 + 32) = sub_20B457F9C(v5);
          continue;
        }
        v8 = sub_20B45D810(a2);
LABEL_13:
        if ((v8 & 1) == 0)
        {
LABEL_74:
          v34 = 0;
          goto LABEL_65;
        }
LABEL_19:
        v10 = v53;
        if (!v53)
        {
LABEL_64:
          v34 = 1;
          goto LABEL_65;
        }
        while (2)
        {
          if (((*(_QWORD *)&v52[((v10 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v10 - 1)) & 1) != 0)
          {
            v11 = sub_20B457F9C(v5);
            *(_DWORD *)(a1 + 32) = v11;
            if (v11 == 13)
              goto LABEL_42;
            if (v11 != 10)
            {
              v37 = *(_QWORD *)(a1 + 72);
              sub_20B45AD8C(v5, &v51);
              v46 = *(std::string *)(a1 + 72);
              sub_20AEC0D64(&v44, "array");
              sub_20B45B1C8(a1, 0xAu, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&__p);
              sub_20B45AE7C(101, (uint64_t *)&v46, (uint64_t)&__p, (uint64_t)&v47);
              v38 = sub_20B45AD38(a2, v37, (uint64_t)&v51, (uint64_t)&v47);
              goto LABEL_82;
            }
            v12 = *(_QWORD *)(a2 + 16);
            v14 = *(_QWORD *)(v12 - 8);
            v13 = v12 - 8;
            if (v14)
            {
              LODWORD(v51.__r_.__value_.__l.__data_) = ((*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3) - 1;
              v46.__r_.__value_.__s.__data_[0] = 3;
              v15 = *(_QWORD *)(a2 + 120);
              if (!v15)
                sub_20AECABA4();
              if (((*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v15 + 48))(v15, &v51, &v46) & 1) != 0)
              {
                *(_QWORD *)(a2 + 16) -= 8;
                goto LABEL_32;
              }
              sub_20B456794((uint64_t)&v47, v6);
              v17 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 16) - 8);
              v18 = *v17;
              *v17 = v47.__vftable;
              LOBYTE(v47.__vftable) = v18;
              v19 = *((_QWORD *)v17 + 1);
              *((_QWORD *)v17 + 1) = v48;
              v48 = v19;
              sub_20B416E08(&v48, v18);
              v21 = *(_QWORD *)(a2 + 8);
              v20 = *(_QWORD *)(a2 + 16);
              *(_QWORD *)(a2 + 16) = v20 - 8;
              --*(_QWORD *)(a2 + 40);
              if (v21 != v20 - 8)
              {
                v22 = *(_QWORD *)(v20 - 16);
                if (*(_BYTE *)v22 == 2)
                {
                  v23 = *(_QWORD *)(v22 + 8);
                  v24 = *(_QWORD *)(v23 + 8);
                  v25 = *(unsigned __int8 *)(v24 - 16);
                  v24 -= 16;
                  sub_20B416E08((uint64_t *)(v24 + 8), v25);
                  *(_QWORD *)(v23 + 8) = v24;
                }
              }
            }
            else
            {
              *(_QWORD *)(a2 + 16) = v13;
LABEL_32:
              --*(_QWORD *)(a2 + 40);
            }
LABEL_33:
            v10 = v53 - 1;
            v53 = v10;
            if (!v10)
              goto LABEL_64;
            continue;
          }
          break;
        }
        v16 = sub_20B457F9C(v5);
        *(_DWORD *)(a1 + 32) = v16;
        if (v16 != 13)
        {
          if (v16 != 11)
          {
            v39 = *(_QWORD *)(a1 + 72);
            sub_20B45AD8C(v5, &v51);
            v46 = *(std::string *)(a1 + 72);
            sub_20AEC0D64(&v44, "object");
            sub_20B45B1C8(a1, 0xBu, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&__p);
            sub_20B45AE7C(101, (uint64_t *)&v46, (uint64_t)&__p, (uint64_t)&v47);
            v38 = sub_20B45AD38(a2, v39, (uint64_t)&v51, (uint64_t)&v47);
            goto LABEL_82;
          }
          if ((sub_20B45D810(a2) & 1) == 0)
            goto LABEL_74;
          goto LABEL_33;
        }
        v26 = sub_20B457F9C(v5);
        *(_DWORD *)(a1 + 32) = v26;
        if (v26 != 4)
        {
LABEL_80:
          v40 = *(_QWORD *)(a1 + 72);
          sub_20B45AD8C(v5, &v51);
          v46 = *(std::string *)(a1 + 72);
          sub_20AEC0D64(&v44, "object key");
          sub_20B45B1C8(a1, 4u, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&__p);
          sub_20B45AE7C(101, (uint64_t *)&v46, (uint64_t)&__p, (uint64_t)&v47);
          v38 = sub_20B45AD38(a2, v40, (uint64_t)&v51, (uint64_t)&v47);
          goto LABEL_82;
        }
        if (!sub_20B45DA98(a2, v4))
          goto LABEL_74;
        v27 = sub_20B457F9C(v5);
        *(_DWORD *)(a1 + 32) = v27;
        if (v27 == 12)
        {
LABEL_42:
          *(_DWORD *)(a1 + 32) = sub_20B457F9C(v5);
          continue;
        }
LABEL_81:
        v41 = *(_QWORD *)(a1 + 72);
        sub_20B45AD8C(v5, &v51);
        v46 = *(std::string *)(a1 + 72);
        sub_20AEC0D64(&v44, "object separator");
        sub_20B45B1C8(a1, 0xCu, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&__p);
        sub_20B45AE7C(101, (uint64_t *)&v46, (uint64_t)&__p, (uint64_t)&v47);
        v38 = sub_20B45AD38(a2, v41, (uint64_t)&v51, (uint64_t)&v47);
LABEL_82:
        v34 = v38;
        v47.__vftable = (std::exception_vtbl *)&off_24C41D9D8;
        std::runtime_error::~runtime_error(&v49);
        std::exception::~exception(&v47);
LABEL_83:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_88;
LABEL_85:
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
LABEL_89:
            operator delete(v51.__r_.__value_.__l.__data_);
        }
        else
        {
          if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_85;
LABEL_88:
          operator delete(v44.__r_.__value_.__l.__data_);
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_89;
        }
LABEL_65:
        if (v52)
          operator delete(v52);
        return v34;
      case 0xE:
        sub_20B45AD8C(v5, &v51);
        v46 = *(std::string *)(a1 + 72);
        *((_BYTE *)&v44.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v44, "value");
        sub_20B45B1C8(a1, 0, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&__p);
        sub_20B45AE7C(101, (uint64_t *)&v46, (uint64_t)&__p, (uint64_t)&v47);
        *(_BYTE *)(a2 + 88) = 1;
        if (*(_BYTE *)(a2 + 128))
        {
          exception = __cxa_allocate_exception(0x28uLL);
          *(_QWORD *)exception = &off_24C41D9D8;
          *((_DWORD *)exception + 2) = v48;
          std::runtime_error::runtime_error((std::runtime_error *)exception + 1, &v49);
          *(_QWORD *)exception = &off_24C41DAD8;
          *((_QWORD *)exception + 4) = v50;
          __cxa_throw(exception, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
        }
        goto LABEL_71;
      default:
        sub_20B45AD8C(v5, &v51);
        v46 = *(std::string *)(a1 + 72);
        *((_BYTE *)&v44.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v44, "value");
        sub_20B45B1C8(a1, 0x10u, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&__p);
        sub_20B45AE7C(101, (uint64_t *)&v46, (uint64_t)&__p, (uint64_t)&v47);
        *(_BYTE *)(a2 + 88) = 1;
        if (*(_BYTE *)(a2 + 128))
        {
          v43 = __cxa_allocate_exception(0x28uLL);
          *(_QWORD *)v43 = &off_24C41D9D8;
          *((_DWORD *)v43 + 2) = v48;
          std::runtime_error::runtime_error((std::runtime_error *)v43 + 1, &v49);
          *(_QWORD *)v43 = &off_24C41DAD8;
          *((_QWORD *)v43 + 4) = v50;
          __cxa_throw(v43, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
        }
LABEL_71:
        v47.__vftable = (std::exception_vtbl *)&off_24C41D9D8;
        std::runtime_error::~runtime_error(&v49);
        std::exception::~exception(&v47);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_73:
            if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_74;
            goto LABEL_77;
          }
        }
        else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_73;
        }
        operator delete(v44.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_74;
LABEL_77:
        operator delete(v51.__r_.__value_.__l.__data_);
        goto LABEL_74;
    }
  }
}

void sub_20B45AAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::exception a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::runtime_error *v38;
  uint64_t v39;
  void *v41;

  a28.__vftable = (std::exception_vtbl *)&off_24C41D9D8;
  std::runtime_error::~runtime_error(v38 + 1);
  std::exception::~exception(&a28);
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a14 & 0x80000000) == 0)
  {
LABEL_3:
    if (a38 < 0)
      goto LABEL_4;
    goto LABEL_8;
  }
  operator delete(a9);
  if (a38 < 0)
  {
LABEL_4:
    operator delete(a33);
    v41 = *(void **)(v39 - 112);
    if (v41)
    {
LABEL_10:
      operator delete(v41);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  v41 = *(void **)(v39 - 112);
  if (v41)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t sub_20B45AD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *exception;
  void *v7;

  *(_BYTE *)(a1 + 88) = 1;
  if (*(_BYTE *)(a1 + 128))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    v7 = (void *)sub_20B45F888((uint64_t)exception, a4);
    __cxa_throw(v7, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
  }
  return 0;
}

void sub_20B45AD8C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *i;
  unsigned int v5;
  size_t v6;
  char __str[8];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(unsigned __int8 **)(a1 + 56);
  for (i = *(unsigned __int8 **)(a1 + 64); v3 != i; ++v3)
  {
    v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      v8 = 0;
      *(_QWORD *)__str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      v6 = strlen(__str);
      std::string::append(a2, __str, v6);
    }
  }
}

void sub_20B45AE5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20B45AE7C(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *p_p;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  const char *v22;
  std::string __p;
  const void *v24[2];
  char v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  __int128 v30;
  int64_t v31;

  v25 = 11;
  strcpy((char *)v24, "parse_error");
  sub_20B452E08(v24, a1, &v26);
  v8 = std::string::append(&v26, "parse error", 0xBuLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_20B45F924((uint64_t)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v27, (const std::string::value_type *)p_p, size);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v28, ": ", 2uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = *(char *)(a3 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)a3;
  else
    v17 = *(const std::string::value_type **)a3;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a3 + 23);
  else
    v18 = *(_QWORD *)(a3 + 8);
  v19 = std::string::append(&v29, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v31 = v19->__r_.__value_.__r.__words[2];
  v30 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_26;
    }
  }
  else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_18;
LABEL_28:
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_29;
  }
LABEL_27:
  operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_28;
LABEL_18:
  if ((v25 & 0x80000000) == 0)
    goto LABEL_19;
LABEL_29:
  operator delete((void *)v24[0]);
LABEL_19:
  v21 = *a2;
  if (v31 >= 0)
    v22 = (const char *)&v30;
  else
    v22 = (const char *)v30;
  *(_QWORD *)a4 = &off_24C41D9D8;
  *(_DWORD *)(a4 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a4 + 16), v22);
  *(_QWORD *)a4 = &off_24C41DAD8;
  *(_QWORD *)(a4 + 32) = v21;
  if (SHIBYTE(v31) < 0)
    operator delete((void *)v30);
}

void sub_20B45B0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::exception *v40;
  uint64_t v41;

  std::exception::~exception(v40);
  if (*(char *)(v41 - 57) < 0)
    operator delete(*(void **)(v41 - 80));
  _Unwind_Resume(a1);
}

void sub_20B45B1C8(uint64_t a1@<X0>, unsigned int a2@<W1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  size_t v8;
  unint64_t v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string::size_type v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  std::string::size_type v23;
  std::string *p_dst;
  const char *v25;
  size_t v26;
  std::string::size_type v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::string::size_type size;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  void **v39;
  std::string::size_type v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  __int128 v44;
  void **v45;
  std::string::size_type v46;
  void *v47;
  const char *v48;
  size_t v49;
  std::string::size_type v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  std::string *v54;
  __int128 v55;
  void **v56;
  std::string::size_type v57;
  std::string v58;
  std::string __dst;
  std::string v60;
  std::string v61;
  void *__p[2];
  int64_t v63;

  *(_BYTE *)(a4 + 23) = 13;
  strcpy((char *)a4, "syntax error ");
  v7 = *((char *)a3 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  if (v8)
  {
    v9 = v8 + 14;
    if (v8 + 14 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    if (v9 > 0x16)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = (char *)operator new(v12 + 1);
      v61.__r_.__value_.__l.__size_ = v8 + 14;
      v61.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    }
    else
    {
      memset(&v61, 0, sizeof(v61));
      v11 = (char *)&v61;
      *((_BYTE *)&v61.__r_.__value_.__s + 23) = v8 + 14;
    }
    qmemcpy(v11, "while parsing ", 14);
    v14 = v11 + 14;
    if (v7 >= 0)
      v15 = a3;
    else
      v15 = *a3;
    memmove(v11 + 14, v15, v8);
    v14[v8] = 0;
    v16 = std::string::append(&v61, " ", 1uLL);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v63 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (v63 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    if (v63 >= 0)
      v19 = HIBYTE(v63);
    else
      v19 = (std::string::size_type)__p[1];
    std::string::append((std::string *)a4, (const std::string::value_type *)v18, v19);
    if (SHIBYTE(v63) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
    }
    else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v61.__r_.__value_.__l.__data_);
  }
LABEL_22:
  std::string::append((std::string *)a4, "- ", 2uLL);
  v20 = *(int *)(a1 + 32);
  if ((_DWORD)v20 != 14)
  {
    if (v20 > 0x10)
      v25 = "unknown token";
    else
      v25 = off_24C41DB40[v20];
    v26 = strlen(v25);
    if (v26 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v27 = v26;
    if (v26 >= 0x17)
    {
      v41 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v41 = v26 | 7;
      v42 = v41 + 1;
      v28 = operator new(v41 + 1);
      v61.__r_.__value_.__l.__size_ = v27;
      v61.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    }
    else
    {
      *((_BYTE *)&v61.__r_.__value_.__s + 23) = v26;
      v28 = &v61;
      if (!v26)
        goto LABEL_60;
    }
    memcpy(v28, v25, v27);
LABEL_60:
    *((_BYTE *)v28 + v27) = 0;
    v43 = std::string::insert(&v61, 0, "unexpected ", 0xBuLL);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v63 = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if (v63 >= 0)
      v45 = __p;
    else
      v45 = (void **)__p[0];
    if (v63 >= 0)
      v46 = HIBYTE(v63);
    else
      v46 = (std::string::size_type)__p[1];
    std::string::append((std::string *)a4, (const std::string::value_type *)v45, v46);
    if (SHIBYTE(v63) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_79;
    }
    else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_79;
    }
    v47 = (void *)v61.__r_.__value_.__r.__words[0];
    goto LABEL_78;
  }
  v21 = *(const char **)(a1 + 144);
  v22 = strlen(v21);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v23 = v22;
  if (v22 >= 0x17)
  {
    v29 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v29 = v22 | 7;
    v30 = v29 + 1;
    p_dst = (std::string *)operator new(v29 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_37;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v22;
  p_dst = &__dst;
  if (v22)
LABEL_37:
    memmove(p_dst, v21, v23);
  p_dst->__r_.__value_.__s.__data_[v23] = 0;
  v31 = std::string::append(&__dst, "; last read: '", 0xEuLL);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  sub_20B45AD8C(a1 + 40, &v58);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v58;
  else
    v33 = (std::string *)v58.__r_.__value_.__r.__words[0];
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    size = v58.__r_.__value_.__l.__size_;
  v35 = std::string::append(&v60, (const std::string::value_type *)v33, size);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v61, "'", 1uLL);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v63 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0)
    v39 = __p;
  else
    v39 = (void **)__p[0];
  if (v63 >= 0)
    v40 = HIBYTE(v63);
  else
    v40 = (std::string::size_type)__p[1];
  std::string::append((std::string *)a4, (const std::string::value_type *)v39, v40);
  if (SHIBYTE(v63) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_52:
      if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_53;
      goto LABEL_75;
    }
  }
  else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_52;
  }
  operator delete(v61.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_53:
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_54;
LABEL_76:
    operator delete(v60.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_77;
  }
LABEL_75:
  operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_76;
LABEL_54:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_79;
LABEL_77:
  v47 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_78:
  operator delete(v47);
LABEL_79:
  if (!a2)
    return;
  if (a2 > 0x10)
    v48 = "unknown token";
  else
    v48 = off_24C41DBC8[a2 - 1];
  v49 = strlen(v48);
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v50 = v49;
  if (v49 >= 0x17)
  {
    v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v52 = v49 | 7;
    v53 = v52 + 1;
    v51 = operator new(v52 + 1);
    v61.__r_.__value_.__l.__size_ = v50;
    v61.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
    goto LABEL_90;
  }
  *((_BYTE *)&v61.__r_.__value_.__s + 23) = v49;
  v51 = &v61;
  if (v49)
LABEL_90:
    memcpy(v51, v48, v50);
  *((_BYTE *)v51 + v50) = 0;
  v54 = std::string::insert(&v61, 0, "; expected ", 0xBuLL);
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v63 = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0)
    v56 = __p;
  else
    v56 = (void **)__p[0];
  if (v63 >= 0)
    v57 = HIBYTE(v63);
  else
    v57 = (std::string::size_type)__p[1];
  std::string::append((std::string *)a4, (const std::string::value_type *)v56, v57);
  if ((SHIBYTE(v63) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_101:
    operator delete(v61.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_101;
}

void sub_20B45B78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a40 < 0)
  {
    operator delete(__p);
    if (a33 < 0)
    {
LABEL_5:
      operator delete(a28);
      if (a14 < 0)
      {
LABEL_8:
        operator delete(a9);
        if ((a26 & 0x80000000) == 0)
          goto LABEL_9;
        goto LABEL_12;
      }
LABEL_11:
      if ((a26 & 0x80000000) == 0)
      {
LABEL_9:
        if ((a20 & 0x80000000) == 0)
        {
LABEL_14:
          if (*(char *)(v40 + 23) < 0)
            operator delete(*(void **)v40);
          _Unwind_Resume(a1);
        }
LABEL_13:
        operator delete(a15);
        goto LABEL_14;
      }
LABEL_12:
      operator delete(a21);
      if ((a20 & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else if (a33 < 0)
  {
    goto LABEL_5;
  }
  if (a14 < 0)
    goto LABEL_8;
  goto LABEL_11;
}

void sub_20B45B8B4(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24C41D9D8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t sub_20B45B8E4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  sub_20B416E08((uint64_t *)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  v2 = *(_QWORD **)(a1 + 120);
  if (v2 == (_QWORD *)(a1 + 96))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(void **)(a1 + 56);
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 32);
  if (v5)
    operator delete(v5);
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_20B45B968(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  unsigned int v4;
  void *exception;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  std::string::size_type v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  unsigned __int8 *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  _OWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unsigned __int8 *v78;
  int v79;
  char v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *p_size;
  unsigned __int8 *v86;
  char *v87;
  char v88;
  unsigned __int8 *v89;
  std::string::size_type v90;
  unsigned __int8 *v91;
  std::string::size_type v92;
  unsigned __int8 *v93;
  unint64_t v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t **v99;
  uint64_t *v100;
  char **v101;
  char **v102;
  uint64_t *v103;
  char v104;
  const void *v105;
  size_t v106;
  _QWORD *v107;
  const void *v108;
  const void *v109;
  int v110;
  const void *v111;
  size_t v112;
  size_t v113;
  int v114;
  int v115;
  char *v116;
  _BYTE *v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  BOOL v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  _BYTE *v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  int v133;
  int v134;
  uint64_t **v135;
  uint64_t *v136;
  char **v137;
  char **v138;
  uint64_t *v139;
  char v140;
  const void *v141;
  size_t v142;
  _QWORD *v143;
  const void *v144;
  const void *v145;
  int v146;
  const void *v147;
  size_t v148;
  size_t v149;
  int v150;
  int v151;
  char *v152;
  _BYTE *v153;
  uint64_t v154;
  char *v155;
  uint64_t *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  _BYTE *v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  int v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t **v184;
  uint64_t v185;
  std::string v187;
  std::string __p;
  std::string v189;
  std::exception v190;
  uint64_t v191;
  std::runtime_error v192;
  uint64_t v193;
  std::string v194;
  char *v195;
  unint64_t v196;
  uint64_t v197;

  v185 = a1 + 120;
  v3 = a1 + 40;
  v195 = 0;
  v196 = 0;
  v197 = 0;
  v184 = (uint64_t **)(a2 + 1);
  v4 = *(_DWORD *)(a1 + 32) - 1;
  if (v4 > 0xD)
  {
LABEL_2:
    sub_20B45AD8C(v3, &v194);
    v189 = *(std::string *)(a1 + 72);
    *((_BYTE *)&v187.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&v187, "value");
    sub_20B45B1C8(a1, 0x10u, (const void **)&v187.__r_.__value_.__l.__data_, (uint64_t)&__p);
    sub_20B45AE7C(101, (uint64_t *)&v189, (uint64_t)&__p, (uint64_t)&v190);
    *((_BYTE *)a2 + 40) = 1;
    if (*((_BYTE *)a2 + 41))
    {
      exception = __cxa_allocate_exception(0x28uLL);
      *(_QWORD *)exception = &off_24C41D9D8;
      *((_DWORD *)exception + 2) = v191;
      std::runtime_error::runtime_error((std::runtime_error *)exception + 1, &v192);
      *(_QWORD *)exception = &off_24C41DAD8;
      *((_QWORD *)exception + 4) = v193;
      __cxa_throw(exception, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
    }
LABEL_269:
    v190.__vftable = (std::exception_vtbl *)&off_24C41D9D8;
    std::runtime_error::~runtime_error(&v192);
    std::exception::~exception(&v190);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_271:
        if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_272:
          v175 = 0;
          goto LABEL_265;
        }
LABEL_275:
        operator delete(v194.__r_.__value_.__l.__data_);
        goto LABEL_272;
      }
    }
    else if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_271;
    }
    operator delete(v187.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_272;
    goto LABEL_275;
  }
  while (2)
  {
    switch(v4)
    {
      case 0u:
        v189.__r_.__value_.__s.__data_[0] = 1;
        v39 = a2[2];
        if (a2[1] == v39)
        {
          v81 = *a2;
          v79 = **a2;
          *v81 = 4;
          LOBYTE(v190.__vftable) = v79;
          v82 = *((_QWORD *)v81 + 1);
          *((_QWORD *)v81 + 1) = 1;
          goto LABEL_93;
        }
        v40 = *((_QWORD *)v39 - 1);
        if (*(_BYTE *)v40 != 2)
        {
          v89 = a2[4];
          v79 = *v89;
          *v89 = 4;
          v194.__r_.__value_.__s.__data_[0] = v79;
          v90 = *((_QWORD *)v89 + 1);
          *((_QWORD *)v89 + 1) = 1;
          goto LABEL_102;
        }
        v37 = *(_QWORD *)(v40 + 8);
        v41 = *(_QWORD *)(v37 + 8);
        if (v41 >= *(_QWORD *)(v37 + 16))
          goto LABEL_213;
        *(_BYTE *)v41 = 4;
        *(_QWORD *)(v41 + 8) = 1;
        *(_QWORD *)(v37 + 8) = v41 + 16;
        goto LABEL_105;
      case 1u:
        v189.__r_.__value_.__s.__data_[0] = 0;
        v42 = a2[2];
        if (a2[1] == v42)
        {
          v83 = (uint64_t)*a2;
          v79 = **a2;
          **a2 = 4;
          goto LABEL_89;
        }
        v43 = *((_QWORD *)v42 - 1);
        if (*(_BYTE *)v43 != 2)
        {
          v91 = a2[4];
          v79 = *v91;
          *v91 = 4;
          goto LABEL_98;
        }
        v37 = *(_QWORD *)(v43 + 8);
        v44 = *(_QWORD *)(v37 + 8);
        if (v44 < *(_QWORD *)(v37 + 16))
        {
          *(_BYTE *)v44 = 4;
          *(_QWORD *)(v44 + 8) = 0;
          *(_QWORD *)(v37 + 8) = v44 + 16;
          goto LABEL_105;
        }
LABEL_213:
        v155 = sub_20B460020((void **)v37, (unsigned __int8 *)&v189);
        goto LABEL_218;
      case 2u:
        v189.__r_.__value_.__r.__words[0] = 0;
        v50 = a2[2];
        if (a2[1] == v50)
        {
          v83 = (uint64_t)*a2;
          v79 = **a2;
          **a2 = 0;
LABEL_89:
          LOBYTE(v190.__vftable) = v79;
          v82 = *(_QWORD *)(v83 + 8);
          *(_QWORD *)(v83 + 8) = 0;
          goto LABEL_93;
        }
        v51 = *((_QWORD *)v50 - 1);
        if (*(_BYTE *)v51 != 2)
        {
          v91 = a2[4];
          v79 = *v91;
          *v91 = 0;
LABEL_98:
          v194.__r_.__value_.__s.__data_[0] = v79;
          v90 = *((_QWORD *)v91 + 1);
          *((_QWORD *)v91 + 1) = 0;
          goto LABEL_102;
        }
        v37 = *(_QWORD *)(v51 + 8);
        v52 = *(_QWORD *)(v37 + 8);
        if (v52 < *(_QWORD *)(v37 + 16))
        {
          *(_BYTE *)v52 = 0;
          *(_QWORD *)(v52 + 8) = 0;
          *(_QWORD *)(v37 + 8) = v52 + 16;
          goto LABEL_105;
        }
        v155 = sub_20B460144((void **)v37);
        goto LABEL_218;
      case 3u:
        sub_20B460380(a2, v185);
        goto LABEL_105;
      case 4u:
        v34 = *(_QWORD *)(a1 + 160);
        v189.__r_.__value_.__r.__words[0] = v34;
        v57 = a2[2];
        if (a2[1] == v57)
        {
          v78 = *a2;
          v79 = **a2;
          v80 = 6;
          goto LABEL_91;
        }
        v58 = *((_QWORD *)v57 - 1);
        if (*(_BYTE *)v58 != 2)
        {
          v87 = (char *)a2[4];
          v79 = *v87;
          v88 = 6;
          goto LABEL_100;
        }
        v37 = *(_QWORD *)(v58 + 8);
        v59 = *(_QWORD *)(v37 + 8);
        if (v59 < *(_QWORD *)(v37 + 16))
        {
          *(_BYTE *)v59 = 6;
          *(_QWORD *)(v59 + 8) = v34;
          *(_QWORD *)(v37 + 8) = v59 + 16;
          goto LABEL_105;
        }
        v155 = sub_20B460770((void **)v37, (uint64_t *)&v189);
        goto LABEL_218;
      case 5u:
        v34 = *(_QWORD *)(a1 + 152);
        v189.__r_.__value_.__r.__words[0] = v34;
        v35 = a2[2];
        if (a2[1] == v35)
        {
          v78 = *a2;
          v79 = **a2;
          v80 = 5;
LABEL_91:
          *v78 = v80;
          LOBYTE(v190.__vftable) = v79;
          v84 = *((_QWORD *)v78 + 1);
          *((_QWORD *)v78 + 1) = v34;
          v191 = v84;
          p_size = &v191;
          goto LABEL_104;
        }
        v36 = *((_QWORD *)v35 - 1);
        if (*(_BYTE *)v36 != 2)
        {
          v87 = (char *)a2[4];
          v79 = *v87;
          v88 = 5;
LABEL_100:
          *v87 = v88;
          v194.__r_.__value_.__s.__data_[0] = v79;
          v92 = *((_QWORD *)v87 + 1);
          *((_QWORD *)v87 + 1) = v34;
          v194.__r_.__value_.__l.__size_ = v92;
          goto LABEL_103;
        }
        v37 = *(_QWORD *)(v36 + 8);
        v38 = *(_QWORD *)(v37 + 8);
        if (v38 < *(_QWORD *)(v37 + 16))
        {
          *(_BYTE *)v38 = 5;
          *(_QWORD *)(v38 + 8) = v34;
          *(_QWORD *)(v37 + 8) = v38 + 16;
          goto LABEL_105;
        }
        v155 = sub_20B46025C((void **)v37, (uint64_t *)&v189);
        goto LABEL_218;
      case 6u:
        v53 = *(_QWORD *)(a1 + 168);
        if ((v53 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          v182 = *(_QWORD *)(a1 + 72);
          sub_20B45AD8C(v3, &v194);
          sub_20B45AD8C(v3, &v187);
          sub_20B1F16DC("number overflow parsing '", &v187, &__p);
          sub_20B214D58("'", &__p, &v189);
          sub_20B45E198(406, (uint64_t)&v189, (uint64_t)&v190);
          v175 = sub_20B45FB04((uint64_t)a2, v182, (uint64_t)&v194, (uint64_t)&v190);
          v190.__vftable = (std::exception_vtbl *)&off_24C41D9D8;
          std::runtime_error::~runtime_error(&v192);
          std::exception::~exception(&v190);
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v189.__r_.__value_.__l.__data_);
          goto LABEL_280;
        }
        v189.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 168);
        v54 = a2[2];
        if (a2[1] == v54)
        {
          v86 = *a2;
          v79 = **a2;
          *v86 = 7;
          LOBYTE(v190.__vftable) = v79;
          v82 = *((_QWORD *)v86 + 1);
          *((_QWORD *)v86 + 1) = v53;
LABEL_93:
          v191 = v82;
          p_size = &v191;
        }
        else
        {
          v55 = *((_QWORD *)v54 - 1);
          if (*(_BYTE *)v55 == 2)
          {
            v37 = *(_QWORD *)(v55 + 8);
            v56 = *(_QWORD *)(v37 + 8);
            if (v56 >= *(_QWORD *)(v37 + 16))
            {
              v155 = sub_20B45FEFC((void **)v37, (uint64_t *)&v189);
LABEL_218:
              *(_QWORD *)(v37 + 8) = v155;
            }
            else
            {
              *(_BYTE *)v56 = 7;
              *(_QWORD *)(v56 + 8) = v53;
              *(_QWORD *)(v37 + 8) = v56 + 16;
            }
            goto LABEL_105;
          }
          v93 = a2[4];
          v79 = *v93;
          *v93 = 7;
          v194.__r_.__value_.__s.__data_[0] = v79;
          v90 = *((_QWORD *)v93 + 1);
          *((_QWORD *)v93 + 1) = v53;
LABEL_102:
          v194.__r_.__value_.__l.__size_ = v90;
LABEL_103:
          p_size = (uint64_t *)&v194.__r_.__value_.__l.__size_;
        }
LABEL_104:
        sub_20B416E08(p_size, v79);
LABEL_105:
        v94 = v196;
        if (!v196)
        {
LABEL_264:
          v175 = 1;
          goto LABEL_265;
        }
        while (1)
        {
          if (((*(_QWORD *)&v195[((v94 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v94 - 1)) & 1) != 0)
          {
            v95 = sub_20B457F9C(v3);
            *(_DWORD *)(a1 + 32) = v95;
            if (v95 == 13)
              goto LABEL_4;
            if (v95 != 10)
            {
              v177 = *(_QWORD *)(a1 + 72);
              sub_20B45AD8C(v3, &v194);
              v189 = *(std::string *)(a1 + 72);
              sub_20AEC0D64(&v187, "array");
              sub_20B45B1C8(a1, 0xAu, (const void **)&v187.__r_.__value_.__l.__data_, (uint64_t)&__p);
              sub_20B45AE7C(101, (uint64_t *)&v189, (uint64_t)&__p, (uint64_t)&v190);
              v178 = sub_20B45D19C((uint64_t)a2, v177, (uint64_t)&v194, (uint64_t)&v190);
              goto LABEL_279;
            }
            goto LABEL_112;
          }
          v96 = sub_20B457F9C(v3);
          *(_DWORD *)(a1 + 32) = v96;
          if (v96 == 13)
            break;
          if (v96 != 11)
          {
            v179 = *(_QWORD *)(a1 + 72);
            sub_20B45AD8C(v3, &v194);
            v189 = *(std::string *)(a1 + 72);
            sub_20AEC0D64(&v187, "object");
            sub_20B45B1C8(a1, 0xBu, (const void **)&v187.__r_.__value_.__l.__data_, (uint64_t)&__p);
            sub_20B45AE7C(101, (uint64_t *)&v189, (uint64_t)&__p, (uint64_t)&v190);
            v178 = sub_20B45D19C((uint64_t)a2, v179, (uint64_t)&v194, (uint64_t)&v190);
            goto LABEL_279;
          }
LABEL_112:
          a2[2] -= 8;
          v94 = v196 - 1;
          v196 = v94;
          if (!v94)
            goto LABEL_264;
        }
        v97 = sub_20B457F9C(v3);
        v98 = v3;
        *(_DWORD *)(a1 + 32) = v97;
        if (v97 != 4)
          goto LABEL_277;
        v99 = *(uint64_t ***)(*((_QWORD *)a2[2] - 1) + 8);
        v101 = (char **)(v99 + 1);
        v100 = v99[1];
        v102 = (char **)(v99 + 1);
        v103 = (uint64_t *)(v99 + 1);
        if (v100)
        {
          v104 = *(_BYTE *)(a1 + 143);
          if (v104 >= 0)
            v105 = (const void *)v185;
          else
            v105 = *(const void **)(a1 + 120);
          if (v104 >= 0)
            v106 = *(unsigned __int8 *)(a1 + 143);
          else
            v106 = *(_QWORD *)(a1 + 128);
          while (1)
          {
            v103 = v100;
            v109 = (const void *)v100[4];
            v107 = v100 + 4;
            v108 = v109;
            v110 = *((char *)v107 + 23);
            if (v110 >= 0)
              v111 = v107;
            else
              v111 = v108;
            if (v110 >= 0)
              v112 = *((unsigned __int8 *)v107 + 23);
            else
              v112 = v107[1];
            if (v112 >= v106)
              v113 = v106;
            else
              v113 = v112;
            v114 = memcmp(v105, v111, v113);
            if (v114)
            {
              if (v114 < 0)
                goto LABEL_122;
LABEL_136:
              v115 = memcmp(v111, v105, v113);
              if (v115)
              {
                if ((v115 & 0x80000000) == 0)
                  goto LABEL_164;
              }
              else if (v112 >= v106)
              {
LABEL_164:
                v116 = (char *)v103;
                v3 = v98;
                goto LABEL_171;
              }
              v100 = (uint64_t *)v103[1];
              if (!v100)
              {
                v102 = (char **)(v103 + 1);
                break;
              }
            }
            else
            {
              if (v106 >= v112)
                goto LABEL_136;
LABEL_122:
              v100 = (uint64_t *)*v103;
              v102 = (char **)v103;
              if (!*v103)
                break;
            }
          }
        }
        v116 = (char *)operator new(0x48uLL);
        v3 = v98;
        v117 = v116 + 32;
        if (*(char *)(a1 + 143) < 0)
        {
          sub_20AEC60F4(v117, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
        }
        else
        {
          *(_OWORD *)v117 = *(_OWORD *)v185;
          *((_QWORD *)v116 + 6) = *(_QWORD *)(v185 + 16);
        }
        v116[56] = 0;
        *((_QWORD *)v116 + 8) = 0;
        *(_QWORD *)v116 = 0;
        *((_QWORD *)v116 + 1) = 0;
        *((_QWORD *)v116 + 2) = v103;
        *v102 = v116;
        v118 = (uint64_t *)**v99;
        v119 = v116;
        if (v118)
        {
          *v99 = v118;
          v119 = *v102;
        }
        v120 = *v101;
        v121 = v119 == *v101;
        v119[24] = v121;
        if (!v121)
        {
          do
          {
            v122 = *((_QWORD *)v119 + 2);
            if (*(_BYTE *)(v122 + 24))
              break;
            v123 = *(char **)(v122 + 16);
            v124 = *(_QWORD *)v123;
            if (*(_QWORD *)v123 == v122)
            {
              v127 = *((_QWORD *)v123 + 1);
              if (!v127 || (v128 = *(unsigned __int8 *)(v127 + 24), v125 = (_BYTE *)(v127 + 24), v128))
              {
                if (*(char **)v122 == v119)
                {
                  *(_BYTE *)(v122 + 24) = 1;
                  v123[24] = 0;
                  v131 = *(_QWORD *)(v122 + 8);
                  *(_QWORD *)v123 = v131;
                  if (v131)
                    goto LABEL_162;
                }
                else
                {
                  v129 = *(uint64_t **)(v122 + 8);
                  v130 = *v129;
                  *(_QWORD *)(v122 + 8) = *v129;
                  if (v130)
                  {
                    *(_QWORD *)(v130 + 16) = v122;
                    v123 = *(char **)(v122 + 16);
                  }
                  v129[2] = (uint64_t)v123;
                  *(_QWORD *)(*(_QWORD *)(v122 + 16) + 8 * (**(_QWORD **)(v122 + 16) != v122)) = v129;
                  *v129 = v122;
                  *(_QWORD *)(v122 + 16) = v129;
                  v123 = (char *)v129[2];
                  v122 = *(_QWORD *)v123;
                  *((_BYTE *)v129 + 24) = 1;
                  v123[24] = 0;
                  v131 = *(_QWORD *)(v122 + 8);
                  *(_QWORD *)v123 = v131;
                  if (v131)
LABEL_162:
                    *(_QWORD *)(v131 + 16) = v123;
                }
                *(_QWORD *)(v122 + 16) = *((_QWORD *)v123 + 2);
                *(_QWORD *)(*((_QWORD *)v123 + 2) + 8 * (**((_QWORD **)v123 + 2) != (_QWORD)v123)) = v122;
                *(_QWORD *)(v122 + 8) = v123;
LABEL_169:
                *((_QWORD *)v123 + 2) = v122;
                break;
              }
            }
            else if (!v124 || (v126 = *(unsigned __int8 *)(v124 + 24), v125 = (_BYTE *)(v124 + 24), v126))
            {
              if (*(char **)v122 == v119)
              {
                v154 = *((_QWORD *)v119 + 1);
                *(_QWORD *)v122 = v154;
                if (v154)
                {
                  *(_QWORD *)(v154 + 16) = v122;
                  v123 = *(char **)(v122 + 16);
                }
                *((_QWORD *)v119 + 2) = v123;
                *(_QWORD *)(*(_QWORD *)(v122 + 16) + 8 * (**(_QWORD **)(v122 + 16) != v122)) = v119;
                *((_QWORD *)v119 + 1) = v122;
                *(_QWORD *)(v122 + 16) = v119;
                v123 = (char *)*((_QWORD *)v119 + 2);
                v119[24] = 1;
                v123[24] = 0;
                v122 = *((_QWORD *)v123 + 1);
                v132 = *(char **)v122;
                *((_QWORD *)v123 + 1) = *(_QWORD *)v122;
                if (v132)
LABEL_167:
                  *((_QWORD *)v132 + 2) = v123;
              }
              else
              {
                *(_BYTE *)(v122 + 24) = 1;
                v123[24] = 0;
                v122 = *((_QWORD *)v123 + 1);
                v132 = *(char **)v122;
                *((_QWORD *)v123 + 1) = *(_QWORD *)v122;
                if (v132)
                  goto LABEL_167;
              }
              *(_QWORD *)(v122 + 16) = *((_QWORD *)v123 + 2);
              *(_QWORD *)(*((_QWORD *)v123 + 2) + 8 * (**((_QWORD **)v123 + 2) != (_QWORD)v123)) = v122;
              *(_QWORD *)v122 = v123;
              goto LABEL_169;
            }
            *(_BYTE *)(v122 + 24) = 1;
            v119 = v123;
            v123[24] = v123 == v120;
            *v125 = 1;
          }
          while (v123 != v120);
        }
        v99[2] = (uint64_t *)((char *)v99[2] + 1);
LABEL_171:
        a2[4] = (unsigned __int8 *)(v116 + 56);
        v133 = sub_20B457F9C(v3);
        *(_DWORD *)(a1 + 32) = v133;
        if (v133 != 12)
          goto LABEL_278;
LABEL_4:
        v6 = sub_20B457F9C(v3);
LABEL_5:
        *(_DWORD *)(a1 + 32) = v6;
        v4 = v6 - 1;
        continue;
      case 7u:
        LOBYTE(v190.__vftable) = 2;
        v7 = sub_20B45FB58(a2, (unsigned __int8 *)&v190);
        v8 = v7;
        v10 = (uint64_t *)a2[2];
        v9 = a2[3];
        if (v10 < (uint64_t *)v9)
        {
          *v10 = v7;
          v11 = (uint64_t)(v10 + 1);
          goto LABEL_29;
        }
        v12 = *v184;
        v13 = (char *)v10 - (char *)*v184;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          goto LABEL_291;
        v16 = v9 - (unsigned __int8 *)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            goto LABEL_292;
          v18 = operator new(8 * v17);
          v19 = &v18[8 * v14];
          *(_QWORD *)v19 = v8;
          v11 = (uint64_t)(v19 + 8);
          v20 = (char *)((char *)v10 - (char *)v12);
          if (v10 == v12)
          {
LABEL_27:
            a2[1] = v19;
            a2[2] = (unsigned __int8 *)v11;
            a2[3] = &v18[8 * v17];
            if (!v10)
              goto LABEL_29;
LABEL_28:
            operator delete(v10);
            goto LABEL_29;
          }
        }
        else
        {
          v18 = 0;
          v19 = (unsigned __int8 *)(8 * v14);
          *(_QWORD *)(8 * v14) = v8;
          v11 = 8 * v14 + 8;
          v20 = (char *)((char *)v10 - (char *)v12);
          if (v10 == v12)
            goto LABEL_27;
        }
        v21 = (unint64_t)(v20 - 8);
        if (v21 < 0x58)
          goto LABEL_298;
        if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
          goto LABEL_298;
        v22 = (v21 >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v24 = &v10[v23 / 0xFFFFFFFFFFFFFFF8];
        v19 -= v23;
        v25 = &v18[8 * v14 - 16];
        v26 = v10 - 2;
        v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 4;
          v27 -= 4;
        }
        while (v27);
        v10 = v24;
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_298:
          do
          {
            v29 = *--v10;
            *((_QWORD *)v19 - 1) = v29;
            v19 -= 8;
          }
          while (v10 != v12);
        }
        v10 = *v184;
        a2[1] = v19;
        a2[2] = (unsigned __int8 *)v11;
        a2[3] = &v18[8 * v17];
        if (v10)
          goto LABEL_28;
LABEL_29:
        a2[2] = (unsigned __int8 *)v11;
        v30 = sub_20B457F9C(v3);
        *(_DWORD *)(a1 + 32) = v30;
        if (v30 == 10)
          goto LABEL_177;
        v31 = v196;
        if (v196 == v197 << 6)
        {
          if ((uint64_t)(v196 + 1) < 0)
            sub_20B451A44();
          v32 = v197 << 7;
          if (v197 << 7 <= (v196 & 0xFFFFFFFFFFFFFFC0) + 64)
            v32 = (v196 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v196 <= 0x3FFFFFFFFFFFFFFELL)
            v33 = v32;
          else
            v33 = 0x7FFFFFFFFFFFFFFFLL;
          sub_20B45D3B8((uint64_t)&v195, v33);
          v31 = v196;
        }
        v196 = v31 + 1;
        *(_QWORD *)&v195[(v31 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v31;
        v4 = *(_DWORD *)(a1 + 32) - 1;
        if (v4 > 0xD)
          goto LABEL_2;
        continue;
      case 8u:
        LOBYTE(v190.__vftable) = 1;
        v45 = sub_20B45FB58(a2, (unsigned __int8 *)&v190);
        v46 = v45;
        v48 = (uint64_t *)a2[2];
        v47 = a2[3];
        if (v48 < (uint64_t *)v47)
        {
          *v48 = v45;
          v49 = (uint64_t)(v48 + 1);
          goto LABEL_176;
        }
        v60 = *v184;
        v61 = (char *)v48 - (char *)*v184;
        v62 = v61 >> 3;
        v63 = (v61 >> 3) + 1;
        if (v63 >> 61)
LABEL_291:
          sub_20B451A44();
        v64 = v47 - (unsigned __int8 *)v60;
        if (v64 >> 2 > v63)
          v63 = v64 >> 2;
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v65 = v63;
        if (v65)
        {
          if (v65 >> 61)
LABEL_292:
            sub_20AEC60CC();
          v66 = operator new(8 * v65);
          v67 = &v66[8 * v62];
          *(_QWORD *)v67 = v46;
          v49 = (uint64_t)(v67 + 8);
          v68 = (char *)((char *)v48 - (char *)v60);
          if (v48 == v60)
          {
LABEL_174:
            a2[1] = v67;
            a2[2] = (unsigned __int8 *)v49;
            a2[3] = &v66[8 * v65];
            if (!v48)
              goto LABEL_176;
LABEL_175:
            operator delete(v48);
            goto LABEL_176;
          }
        }
        else
        {
          v66 = 0;
          v67 = (unsigned __int8 *)(8 * v62);
          *(_QWORD *)(8 * v62) = v46;
          v49 = 8 * v62 + 8;
          v68 = (char *)((char *)v48 - (char *)v60);
          if (v48 == v60)
            goto LABEL_174;
        }
        v69 = (unint64_t)(v68 - 8);
        if (v69 < 0x58)
          goto LABEL_299;
        if ((unint64_t)((char *)v48 - v66 - v61) < 0x20)
          goto LABEL_299;
        v70 = (v69 >> 3) + 1;
        v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v72 = &v48[v71 / 0xFFFFFFFFFFFFFFF8];
        v67 -= v71;
        v73 = &v66[8 * v62 - 16];
        v74 = v48 - 2;
        v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v76 = *(_OWORD *)v74;
          *(v73 - 1) = *((_OWORD *)v74 - 1);
          *v73 = v76;
          v73 -= 2;
          v74 -= 4;
          v75 -= 4;
        }
        while (v75);
        v48 = v72;
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_299:
          do
          {
            v77 = *--v48;
            *((_QWORD *)v67 - 1) = v77;
            v67 -= 8;
          }
          while (v48 != v60);
        }
        v48 = *v184;
        a2[1] = v67;
        a2[2] = (unsigned __int8 *)v49;
        a2[3] = &v66[8 * v65];
        if (v48)
          goto LABEL_175;
LABEL_176:
        a2[2] = (unsigned __int8 *)v49;
        v134 = sub_20B457F9C(v3);
        *(_DWORD *)(a1 + 32) = v134;
        if (v134 == 11)
        {
LABEL_177:
          a2[2] -= 8;
          goto LABEL_105;
        }
        if (v134 != 4)
        {
LABEL_277:
          v180 = *(_QWORD *)(a1 + 72);
          sub_20B45AD8C(v3, &v194);
          v189 = *(std::string *)(a1 + 72);
          sub_20AEC0D64(&v187, "object key");
          sub_20B45B1C8(a1, 4u, (const void **)&v187.__r_.__value_.__l.__data_, (uint64_t)&__p);
          sub_20B45AE7C(101, (uint64_t *)&v189, (uint64_t)&__p, (uint64_t)&v190);
          v178 = sub_20B45D19C((uint64_t)a2, v180, (uint64_t)&v194, (uint64_t)&v190);
          goto LABEL_279;
        }
        v135 = *(uint64_t ***)(*((_QWORD *)a2[2] - 1) + 8);
        v137 = (char **)(v135 + 1);
        v136 = v135[1];
        v138 = (char **)(v135 + 1);
        v139 = (uint64_t *)(v135 + 1);
        if (v136)
        {
          v140 = *(_BYTE *)(a1 + 143);
          if (v140 >= 0)
            v141 = (const void *)v185;
          else
            v141 = *(const void **)(a1 + 120);
          if (v140 >= 0)
            v142 = *(unsigned __int8 *)(a1 + 143);
          else
            v142 = *(_QWORD *)(a1 + 128);
          while (1)
          {
            v139 = v136;
            v145 = (const void *)v136[4];
            v143 = v136 + 4;
            v144 = v145;
            v146 = *((char *)v143 + 23);
            if (v146 >= 0)
              v147 = v143;
            else
              v147 = v144;
            if (v146 >= 0)
              v148 = *((unsigned __int8 *)v143 + 23);
            else
              v148 = v143[1];
            if (v148 >= v142)
              v149 = v142;
            else
              v149 = v148;
            v150 = memcmp(v141, v147, v149);
            if (v150)
            {
              if (v150 < 0)
                goto LABEL_186;
LABEL_200:
              v151 = memcmp(v147, v141, v149);
              if (v151)
              {
                if ((v151 & 0x80000000) == 0)
                  goto LABEL_239;
              }
              else if (v148 >= v142)
              {
LABEL_239:
                v152 = (char *)v139;
                goto LABEL_248;
              }
              v136 = (uint64_t *)v139[1];
              if (!v136)
              {
                v138 = (char **)(v139 + 1);
                break;
              }
            }
            else
            {
              if (v142 >= v148)
                goto LABEL_200;
LABEL_186:
              v136 = (uint64_t *)*v139;
              v138 = (char **)v139;
              if (!*v139)
                break;
            }
          }
        }
        v152 = (char *)operator new(0x48uLL);
        v153 = v152 + 32;
        if (*(char *)(a1 + 143) < 0)
        {
          sub_20AEC60F4(v153, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
        }
        else
        {
          *(_OWORD *)v153 = *(_OWORD *)v185;
          *((_QWORD *)v152 + 6) = *(_QWORD *)(v185 + 16);
        }
        v152[56] = 0;
        *((_QWORD *)v152 + 8) = 0;
        *(_QWORD *)v152 = 0;
        *((_QWORD *)v152 + 1) = 0;
        *((_QWORD *)v152 + 2) = v139;
        *v138 = v152;
        v156 = (uint64_t *)**v135;
        v157 = v152;
        if (v156)
        {
          *v135 = v156;
          v157 = *v138;
        }
        v158 = *v137;
        v121 = v157 == *v137;
        v157[24] = v121;
        if (!v121)
        {
          do
          {
            v159 = *((_QWORD *)v157 + 2);
            if (*(_BYTE *)(v159 + 24))
              break;
            v160 = *(char **)(v159 + 16);
            v161 = *(_QWORD *)v160;
            if (*(_QWORD *)v160 == v159)
            {
              v164 = *((_QWORD *)v160 + 1);
              if (!v164 || (v165 = *(unsigned __int8 *)(v164 + 24), v162 = (_BYTE *)(v164 + 24), v165))
              {
                if (*(char **)v159 == v157)
                {
                  *(_BYTE *)(v159 + 24) = 1;
                  v160[24] = 0;
                  v168 = *(_QWORD *)(v159 + 8);
                  *(_QWORD *)v160 = v168;
                  if (v168)
                    goto LABEL_237;
                }
                else
                {
                  v166 = *(uint64_t **)(v159 + 8);
                  v167 = *v166;
                  *(_QWORD *)(v159 + 8) = *v166;
                  if (v167)
                  {
                    *(_QWORD *)(v167 + 16) = v159;
                    v160 = *(char **)(v159 + 16);
                  }
                  v166[2] = (uint64_t)v160;
                  *(_QWORD *)(*(_QWORD *)(v159 + 16) + 8 * (**(_QWORD **)(v159 + 16) != v159)) = v166;
                  *v166 = v159;
                  *(_QWORD *)(v159 + 16) = v166;
                  v160 = (char *)v166[2];
                  v159 = *(_QWORD *)v160;
                  *((_BYTE *)v166 + 24) = 1;
                  v160[24] = 0;
                  v168 = *(_QWORD *)(v159 + 8);
                  *(_QWORD *)v160 = v168;
                  if (v168)
LABEL_237:
                    *(_QWORD *)(v168 + 16) = v160;
                }
                *(_QWORD *)(v159 + 16) = *((_QWORD *)v160 + 2);
                *(_QWORD *)(*((_QWORD *)v160 + 2) + 8 * (**((_QWORD **)v160 + 2) != (_QWORD)v160)) = v159;
                *(_QWORD *)(v159 + 8) = v160;
LABEL_246:
                *((_QWORD *)v160 + 2) = v159;
                break;
              }
            }
            else if (!v161 || (v163 = *(unsigned __int8 *)(v161 + 24), v162 = (_BYTE *)(v161 + 24), v163))
            {
              if (*(char **)v159 == v157)
              {
                v174 = *((_QWORD *)v157 + 1);
                *(_QWORD *)v159 = v174;
                if (v174)
                {
                  *(_QWORD *)(v174 + 16) = v159;
                  v160 = *(char **)(v159 + 16);
                }
                *((_QWORD *)v157 + 2) = v160;
                *(_QWORD *)(*(_QWORD *)(v159 + 16) + 8 * (**(_QWORD **)(v159 + 16) != v159)) = v157;
                *((_QWORD *)v157 + 1) = v159;
                *(_QWORD *)(v159 + 16) = v157;
                v160 = (char *)*((_QWORD *)v157 + 2);
                v157[24] = 1;
                v160[24] = 0;
                v159 = *((_QWORD *)v160 + 1);
                v169 = *(char **)v159;
                *((_QWORD *)v160 + 1) = *(_QWORD *)v159;
                if (v169)
LABEL_244:
                  *((_QWORD *)v169 + 2) = v160;
              }
              else
              {
                *(_BYTE *)(v159 + 24) = 1;
                v160[24] = 0;
                v159 = *((_QWORD *)v160 + 1);
                v169 = *(char **)v159;
                *((_QWORD *)v160 + 1) = *(_QWORD *)v159;
                if (v169)
                  goto LABEL_244;
              }
              *(_QWORD *)(v159 + 16) = *((_QWORD *)v160 + 2);
              *(_QWORD *)(*((_QWORD *)v160 + 2) + 8 * (**((_QWORD **)v160 + 2) != (_QWORD)v160)) = v159;
              *(_QWORD *)v159 = v160;
              goto LABEL_246;
            }
            *(_BYTE *)(v159 + 24) = 1;
            v157 = v160;
            v160[24] = v160 == v158;
            *v162 = 1;
          }
          while (v160 != v158);
        }
        v135[2] = (uint64_t *)((char *)v135[2] + 1);
LABEL_248:
        a2[4] = (unsigned __int8 *)(v152 + 56);
        v170 = sub_20B457F9C(v3);
        *(_DWORD *)(a1 + 32) = v170;
        if (v170 == 12)
        {
          v171 = v196;
          if (v196 == v197 << 6)
          {
            if ((uint64_t)(v196 + 1) < 0)
              sub_20B451A44();
            v172 = v197 << 7;
            if (v197 << 7 <= (v196 & 0xFFFFFFFFFFFFFFC0) + 64)
              v172 = (v196 & 0xFFFFFFFFFFFFFFC0) + 64;
            if (v196 <= 0x3FFFFFFFFFFFFFFELL)
              v173 = v172;
            else
              v173 = 0x7FFFFFFFFFFFFFFFLL;
            sub_20B45D3B8((uint64_t)&v195, v173);
            v171 = v196;
          }
          v196 = v171 + 1;
          *(_QWORD *)&v195[(v171 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v171);
          v6 = sub_20B457F9C(v3);
          goto LABEL_5;
        }
LABEL_278:
        v181 = *(_QWORD *)(a1 + 72);
        sub_20B45AD8C(v3, &v194);
        v189 = *(std::string *)(a1 + 72);
        sub_20AEC0D64(&v187, "object separator");
        sub_20B45B1C8(a1, 0xCu, (const void **)&v187.__r_.__value_.__l.__data_, (uint64_t)&__p);
        sub_20B45AE7C(101, (uint64_t *)&v189, (uint64_t)&__p, (uint64_t)&v190);
        v178 = sub_20B45D19C((uint64_t)a2, v181, (uint64_t)&v194, (uint64_t)&v190);
LABEL_279:
        v175 = v178;
        v190.__vftable = (std::exception_vtbl *)&off_24C41D9D8;
        std::runtime_error::~runtime_error(&v192);
        std::exception::~exception(&v190);
LABEL_280:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_282:
            if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_265;
            goto LABEL_286;
          }
        }
        else if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_282;
        }
        operator delete(v187.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_265;
LABEL_286:
        operator delete(v194.__r_.__value_.__l.__data_);
LABEL_265:
        if (v195)
          operator delete(v195);
        return v175;
      case 0xDu:
        sub_20B45AD8C(v3, &v194);
        v189 = *(std::string *)(a1 + 72);
        *((_BYTE *)&v187.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v187, "value");
        sub_20B45B1C8(a1, 0, (const void **)&v187.__r_.__value_.__l.__data_, (uint64_t)&__p);
        sub_20B45AE7C(101, (uint64_t *)&v189, (uint64_t)&__p, (uint64_t)&v190);
        *((_BYTE *)a2 + 40) = 1;
        if (*((_BYTE *)a2 + 41))
        {
          v183 = __cxa_allocate_exception(0x28uLL);
          *(_QWORD *)v183 = &off_24C41D9D8;
          *((_DWORD *)v183 + 2) = v191;
          std::runtime_error::runtime_error((std::runtime_error *)v183 + 1, &v192);
          *(_QWORD *)v183 = &off_24C41DAD8;
          *((_QWORD *)v183 + 4) = v193;
          __cxa_throw(v183, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
        }
        goto LABEL_269;
      default:
        goto LABEL_2;
    }
  }
}

void sub_20B45CF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,std::exception a34)
{
  std::runtime_error *v34;
  uint64_t v35;
  void *v37;

  a34.__vftable = (std::exception_vtbl *)&off_24C41D9D8;
  std::runtime_error::~runtime_error(v34 + 1);
  std::exception::~exception(&a34);
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    if (*(char *)(v35 - 113) < 0)
      goto LABEL_4;
    goto LABEL_8;
  }
  operator delete(a15);
  if (*(char *)(v35 - 113) < 0)
  {
LABEL_4:
    operator delete(*(void **)(v35 - 136));
    v37 = *(void **)(v35 - 112);
    if (v37)
    {
LABEL_10:
      operator delete(v37);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  v37 = *(void **)(v35 - 112);
  if (v37)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t sub_20B45D19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *exception;
  void *v7;

  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 41))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    v7 = (void *)sub_20B45F888((uint64_t)exception, a4);
    __cxa_throw(v7, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
  }
  return 0;
}

uint64_t sub_20B45D1F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  v6 = a1 + 32;
  v7 = a1 + 96;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  v8 = *(_QWORD *)(a3 + 24);
  if (!v8)
    goto LABEL_4;
  if (v8 != a3)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
LABEL_4:
    *(_QWORD *)(a1 + 120) = v8;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 120) = v7;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), v7);
LABEL_6:
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 128) = a4;
  *(_BYTE *)(a1 + 136) = 9;
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  if (v9 == v10 << 6)
  {
    if ((uint64_t)(v9 + 1) < 0)
      sub_20B451A44();
    v11 = v10 << 7;
    if (v11 <= (v9 & 0xFFFFFFFFFFFFFFC0) + 64)
      v11 = (v9 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v9 <= 0x3FFFFFFFFFFFFFFELL)
      v12 = v11;
    else
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    sub_20B45D3B8(v6, v12);
    v9 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 40) = v9 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
  return a1;
}

void sub_20B45D318(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *(void **)(v1 + 56);
  if (v5)
  {
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      v7 = *v3;
      if (!*v3)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  operator delete(v6);
  v7 = *v3;
  if (!*v3)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_QWORD *)(v1 + 16) = v7;
  operator delete(v7);
  _Unwind_Resume(exception_object);
}

void sub_20B45D3B8(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_20B451A44();
    v3 = ((a2 - 1) >> 6) + 1;
    v4 = (uint64_t *)operator new(8 * v3);
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v6 & 0x3F;
    v8 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v8 = 0;
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = &v5[v6 >> 6];
      v12 = v4;
      v13 = v5;
      do
      {
        v14 = 1 << v9;
        if (((*v13 >> v10) & 1) != 0)
          v15 = *v12 | v14;
        else
          v15 = *v12 & ~v14;
        *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        v12 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
      }
      while (v10 != v7 || v13 != v11);
    }
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v3;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_20B45D4B8(uint64_t a1, unint64_t a2)
{
  char **v3;
  uint64_t v4;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  void *exception;
  std::string v44;
  std::string v45;

  v3 = (char **)(a1 + 8);
  LODWORD(v45.__r_.__value_.__l.__data_) = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  v44.__r_.__value_.__s.__data_[0] = 0;
  v4 = *(_QWORD *)(a1 + 120);
  if (!v4)
    sub_20AECABA4();
  v6 = (*(uint64_t (**)(uint64_t, std::string *, std::string *, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v45, &v44, a1 + 136);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  if (v7 == v8 << 6)
  {
    if ((uint64_t)(v7 + 1) < 0)
      sub_20B451A44();
    v9 = v8 << 7;
    if (v9 <= (v7 & 0xFFFFFFFFFFFFFFC0) + 64)
      v9 = (v7 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v7 <= 0x3FFFFFFFFFFFFFFELL)
      v10 = v9;
    else
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    sub_20B45D3B8(a1 + 32, v10);
    v7 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 40) = v7 + 1;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = v7 >> 6;
  v13 = 1 << v7;
  if (v6)
    v14 = *(_QWORD *)(v11 + 8 * v12) | v13;
  else
    v14 = *(_QWORD *)(v11 + 8 * v12) & ~v13;
  *(_QWORD *)(v11 + 8 * v12) = v14;
  v45.__r_.__value_.__s.__data_[0] = 1;
  sub_20B45E344((unsigned __int8 **)a1, (char *)&v45, 1);
  v16 = v15;
  v18 = *(char **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v18 < v17)
  {
    *(_QWORD *)v18 = v15;
    v19 = (uint64_t)(v18 + 8);
    goto LABEL_35;
  }
  v20 = *v3;
  v21 = v18 - *v3;
  v22 = v21 >> 3;
  v23 = (v21 >> 3) + 1;
  if (v23 >> 61)
    sub_20B451A44();
  v24 = v17 - (_QWORD)v20;
  if (v24 >> 2 > v23)
    v23 = v24 >> 2;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 61)
      sub_20AEC60CC();
    v26 = operator new(8 * v25);
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = v16;
    v19 = (uint64_t)(v27 + 1);
    v29 = (char *)(v18 - v20);
    if (v18 == v20)
      goto LABEL_33;
    goto LABEL_26;
  }
  v26 = 0;
  v27 = (_QWORD *)(8 * v22);
  v28 = 0;
  *(_QWORD *)(8 * v22) = v15;
  v19 = 8 * v22 + 8;
  v29 = (char *)(v18 - v20);
  if (v18 != v20)
  {
LABEL_26:
    v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58)
      goto LABEL_49;
    if ((unint64_t)(v18 - v26 - v21) < 0x20)
      goto LABEL_49;
    v31 = (v30 >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v18[-v32];
    v27 = (_QWORD *)((char *)v27 - v32);
    v34 = &v26[8 * v22 - 16];
    v35 = v18 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v18 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        v38 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v27 = v38;
      }
      while (v18 != v20);
    }
    v18 = *v3;
  }
LABEL_33:
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(a1 + 24) = v28;
  if (v18)
    operator delete(v18);
LABEL_35:
  *(_QWORD *)(a1 + 16) = v19;
  if (a2 != -1)
  {
    v39 = *(char **)(v19 - 8);
    if (v39)
    {
      v40 = *v39;
      if (v40 > 2)
        v41 = 1;
      else
        v41 = qword_20B60EF10[v40];
      if (v41 < a2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v44, a2);
        sub_20B1F16DC("excessive object size: ", &v44, &v45);
        sub_20B45E198(408, (uint64_t)&v45, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_24C41DA30, (void (*)(void *))sub_20B45E314);
      }
    }
  }
  return 1;
}

void sub_20B45D7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t sub_20B45D810(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  unsigned __int8 *v19;
  unsigned __int8 *v21;
  __int128 v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  __int128 v29;
  unint64_t v30;
  _BYTE v31[8];
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v2 - 8))
  {
    LODWORD(v28) = ((unint64_t)(v2 - *(_QWORD *)(a1 + 8)) >> 3) - 1;
    LOBYTE(v24) = 1;
    v3 = *(_QWORD *)(a1 + 120);
    if (!v3)
      sub_20AECABA4();
    if (((*(uint64_t (**)(uint64_t, unsigned __int8 **, unsigned __int8 **))(*(_QWORD *)v3 + 48))(v3, &v28, &v24) & 1) == 0)
    {
      sub_20B456794((uint64_t)v31, (unsigned __int8 *)(a1 + 136));
      v4 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 8);
      v5 = *v4;
      *v4 = v31[0];
      v31[0] = v5;
      v6 = *((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v32;
      v32 = v6;
      sub_20B416E08(&v32, v5);
    }
  }
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = v7 - 8;
  *(_QWORD *)(a1 + 16) = v7 - 8;
  --*(_QWORD *)(a1 + 40);
  if (v8 != v7 - 8)
  {
    v10 = *(unsigned __int8 **)(v7 - 16);
    if (v10)
    {
      v11 = *v10;
      if ((v11 - 1) <= 1)
      {
        v28 = *(unsigned __int8 **)(v7 - 16);
        v29 = 0uLL;
        v30 = 0x8000000000000000;
        if (v11 == 2)
        {
          *((_QWORD *)&v29 + 1) = **((_QWORD **)v10 + 1);
        }
        else if (v11 == 1)
        {
          *(_QWORD *)&v29 = **((_QWORD **)v10 + 1);
        }
        else
        {
          v30 = 0;
        }
        while (1)
        {
          v12 = *(unsigned __int8 **)(v9 - 8);
          v25 = 0;
          v26 = 0;
          v24 = v12;
          v27 = 0x8000000000000000;
          v13 = *v12;
          if (v13 == 2)
          {
            v26 = *(_QWORD *)(*((_QWORD *)v12 + 1) + 8);
            if (sub_20B45EAA0(&v28, &v24))
              return 1;
          }
          else if (v13 == 1)
          {
            v25 = *((_QWORD *)v12 + 1) + 8;
            if (sub_20B45EAA0(&v28, &v24))
              return 1;
          }
          else
          {
            v27 = 1;
            if (sub_20B45EAA0(&v28, &v24))
              return 1;
          }
          if (*sub_20B45E5DC(&v28) == 9)
            break;
          v14 = *v28;
          if (v14 == 2)
          {
            *((_QWORD *)&v29 + 1) += 16;
            v9 = *(_QWORD *)(a1 + 16);
          }
          else if (v14 == 1)
          {
            v15 = (_QWORD *)v29;
            v16 = *(_QWORD **)(v29 + 8);
            if (v16)
            {
              do
              {
                v17 = v16;
                v16 = (_QWORD *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                v17 = (_QWORD *)v15[2];
                v18 = *v17 == (_QWORD)v15;
                v15 = v17;
              }
              while (!v18);
            }
            *(_QWORD *)&v29 = v17;
            v9 = *(_QWORD *)(a1 + 16);
          }
          else
          {
            ++v30;
            v9 = *(_QWORD *)(a1 + 16);
          }
        }
        v19 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 8);
        v21 = v28;
        v22 = v29;
        v23 = v30;
        sub_20B45E6D4(v19, &v21, &v24);
      }
    }
  }
  return 1;
}

uint64_t sub_20B45DA98(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  int v18;
  uint64_t v19;
  _BYTE v21[8];
  uint64_t *v22;
  unsigned __int8 v23[8];
  uint64_t v24;
  char v25;
  __int128 *v26;

  v23[0] = 3;
  v4 = operator new(0x18uLL);
  v5 = (uint64_t)v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20AEC60F4(v4, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a2;
    v4[2] = *(_QWORD *)(a2 + 16);
  }
  v24 = v5;
  LODWORD(v26) = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  v25 = 4;
  v6 = *(_QWORD *)(a1 + 120);
  if (!v6)
    sub_20AECABA4();
  v7 = (*(uint64_t (**)(uint64_t, __int128 **, char *, unsigned __int8 *))(*(_QWORD *)v6 + 48))(v6, &v26, &v25, v23);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  if (v8 == v9 << 6)
  {
    if ((uint64_t)(v8 + 1) < 0)
      sub_20B451A44();
    v10 = v9 << 7;
    if (v10 <= (v8 & 0xFFFFFFFFFFFFFFC0) + 64)
      v10 = (v8 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v8 <= 0x3FFFFFFFFFFFFFFELL)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    sub_20B45D3B8(a1 + 56, v11);
    v8 = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)(a1 + 64) = v8 + 1;
  v12 = *(_QWORD *)(a1 + 56);
  v13 = v8 >> 6;
  v14 = 1 << v8;
  v15 = 8 * v13;
  if ((v7 & 1) != 0)
  {
    *(_QWORD *)(v12 + v15) |= v14;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8))
    {
      sub_20B456794((uint64_t)v21, (unsigned __int8 *)(a1 + 136));
      v16 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 8);
      v26 = (__int128 *)a2;
      v17 = sub_20B452B28(v16, (const void **)a2, (uint64_t)&unk_20B5EABF1, &v26);
      v18 = *((unsigned __int8 *)v17 + 56);
      v17 += 7;
      *(_BYTE *)v17 = v21[0];
      v21[0] = v18;
      v19 = (uint64_t)v17[1];
      v17[1] = v22;
      v22 = (uint64_t *)v19;
      *(_QWORD *)(a1 + 80) = v17;
      sub_20B416E08((uint64_t *)&v22, v18);
    }
  }
  else
  {
    *(_QWORD *)(v12 + v15) &= ~v14;
  }
  sub_20B416E08(&v24, v23[0]);
  return 1;
}

void sub_20B45DC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t *v11;

  sub_20B416E08(&a10, a9);
  sub_20B416E08(v11, a11);
  _Unwind_Resume(a1);
}

void sub_20B45DC88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B45DC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t *v11;

  sub_20B416E08(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B45DCB4(uint64_t a1, unint64_t a2)
{
  char **v3;
  uint64_t v4;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  void *exception;
  std::string v44;
  std::string v45;

  v3 = (char **)(a1 + 8);
  LODWORD(v45.__r_.__value_.__l.__data_) = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  v44.__r_.__value_.__s.__data_[0] = 2;
  v4 = *(_QWORD *)(a1 + 120);
  if (!v4)
    sub_20AECABA4();
  v6 = (*(uint64_t (**)(uint64_t, std::string *, std::string *, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v45, &v44, a1 + 136);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  if (v7 == v8 << 6)
  {
    if ((uint64_t)(v7 + 1) < 0)
      sub_20B451A44();
    v9 = v8 << 7;
    if (v9 <= (v7 & 0xFFFFFFFFFFFFFFC0) + 64)
      v9 = (v7 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v7 <= 0x3FFFFFFFFFFFFFFELL)
      v10 = v9;
    else
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    sub_20B45D3B8(a1 + 32, v10);
    v7 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 40) = v7 + 1;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = v7 >> 6;
  v13 = 1 << v7;
  if (v6)
    v14 = *(_QWORD *)(v11 + 8 * v12) | v13;
  else
    v14 = *(_QWORD *)(v11 + 8 * v12) & ~v13;
  *(_QWORD *)(v11 + 8 * v12) = v14;
  v45.__r_.__value_.__s.__data_[0] = 2;
  sub_20B45E344((unsigned __int8 **)a1, (char *)&v45, 1);
  v16 = v15;
  v18 = *(char **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v18 < v17)
  {
    *(_QWORD *)v18 = v15;
    v19 = (uint64_t)(v18 + 8);
    goto LABEL_35;
  }
  v20 = *v3;
  v21 = v18 - *v3;
  v22 = v21 >> 3;
  v23 = (v21 >> 3) + 1;
  if (v23 >> 61)
    sub_20B451A44();
  v24 = v17 - (_QWORD)v20;
  if (v24 >> 2 > v23)
    v23 = v24 >> 2;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 61)
      sub_20AEC60CC();
    v26 = operator new(8 * v25);
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = v16;
    v19 = (uint64_t)(v27 + 1);
    v29 = (char *)(v18 - v20);
    if (v18 == v20)
      goto LABEL_33;
    goto LABEL_26;
  }
  v26 = 0;
  v27 = (_QWORD *)(8 * v22);
  v28 = 0;
  *(_QWORD *)(8 * v22) = v15;
  v19 = 8 * v22 + 8;
  v29 = (char *)(v18 - v20);
  if (v18 != v20)
  {
LABEL_26:
    v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58)
      goto LABEL_49;
    if ((unint64_t)(v18 - v26 - v21) < 0x20)
      goto LABEL_49;
    v31 = (v30 >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v18[-v32];
    v27 = (_QWORD *)((char *)v27 - v32);
    v34 = &v26[8 * v22 - 16];
    v35 = v18 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v18 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        v38 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v27 = v38;
      }
      while (v18 != v20);
    }
    v18 = *v3;
  }
LABEL_33:
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(a1 + 24) = v28;
  if (v18)
    operator delete(v18);
LABEL_35:
  *(_QWORD *)(a1 + 16) = v19;
  if (a2 != -1)
  {
    v39 = *(char **)(v19 - 8);
    if (v39)
    {
      v40 = *v39;
      if (v40 > 2)
        v41 = 1;
      else
        v41 = qword_20B60EF10[v40];
      if (v41 < a2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v44, a2);
        sub_20B1F16DC("excessive array size: ", &v44, &v45);
        sub_20B45E198(408, (uint64_t)&v45, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_24C41DA30, (void (*)(void *))sub_20B45E314);
      }
    }
  }
  return 1;
}

void sub_20B45DFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t sub_20B45E010(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[8];
  uint64_t v17;
  char v18;
  int v19;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v2 - 8);
  v3 = v2 - 8;
  if (!v4)
  {
    *(_QWORD *)(a1 + 16) = v3;
    goto LABEL_6;
  }
  v19 = ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3) - 1;
  v18 = 3;
  v5 = *(_QWORD *)(a1 + 120);
  if (!v5)
    sub_20AECABA4();
  if (((*(uint64_t (**)(uint64_t, int *, char *))(*(_QWORD *)v5 + 48))(v5, &v19, &v18) & 1) != 0)
  {
    *(_QWORD *)(a1 + 16) -= 8;
LABEL_6:
    --*(_QWORD *)(a1 + 40);
    return 1;
  }
  sub_20B456794((uint64_t)v16, (unsigned __int8 *)(a1 + 136));
  v7 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 8);
  v8 = *v7;
  *v7 = v16[0];
  v16[0] = v8;
  v9 = *((_QWORD *)v7 + 1);
  *((_QWORD *)v7 + 1) = v17;
  v17 = v9;
  sub_20B416E08(&v17, v8);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10 - 8;
  --*(_QWORD *)(a1 + 40);
  if (v11 == v10 - 8)
    return 1;
  v12 = *(_QWORD *)(v10 - 16);
  if (*(_BYTE *)v12 != 2)
    return 1;
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(unsigned __int8 *)(v14 - 16);
  v14 -= 16;
  sub_20B416E08((uint64_t *)(v14 + 8), v15);
  *(_QWORD *)(v13 + 8) = v14;
  return 1;
}

uint64_t sub_20B45E144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *exception;
  void *v7;

  *(_BYTE *)(a1 + 88) = 1;
  if (*(_BYTE *)(a1 + 128))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v7 = (void *)sub_20B45EBA0((uint64_t)exception, a4);
    __cxa_throw(v7, (struct type_info *)&unk_24C41DA30, (void (*)(void *))sub_20B45E314);
  }
  return 0;
}

void sub_20B45E198(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p[2];
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  v13 = 12;
  strcpy((char *)__p, "out_of_range");
  sub_20B452E08((const void **)__p, a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  *(_QWORD *)a3 = &off_24C41D9D8;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(_QWORD *)a3 = &off_24C41DA98;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20B45E2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;

  std::exception::~exception(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B45E314(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24C41D9D8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t sub_20B45E344(unsigned __int8 **a1, char *a2, char a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32[8];
  _QWORD *v33;
  char v34;
  int v35;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v32[0] = *a2;
    switch(v32[0])
    {
      case 1:
        v24 = operator new(0x18uLL);
        v24[2] = 0;
        v24[1] = 0;
        *v24 = v24 + 1;
        v33 = v24;
        break;
      case 2:
        v25 = operator new(0x18uLL);
        v25[1] = 0;
        v25[2] = 0;
        *v25 = 0;
        v33 = v25;
        break;
      case 3:
        v26 = operator new(0x18uLL);
        v26[23] = 0;
        *v26 = 0;
        v33 = v26;
        break;
      case 4:
        LOBYTE(v33) = 0;
        break;
      case 8:
        v27 = operator new(0x20uLL);
        v27[1] = 0;
        v27[2] = 0;
        *v27 = 0;
        *((_WORD *)v27 + 12) = 0;
        v33 = v27;
        break;
      default:
        v33 = 0;
        break;
    }
    if ((a3 & 1) != 0)
      goto LABEL_7;
    v35 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v34 = 5;
    v5 = a1[15];
    if (!v5)
      sub_20AECABA4();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v5 + 48))(v5, &v35, &v34, v32) & 1) != 0)
    {
LABEL_7:
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v12 = v32[0];
        v13 = (uint64_t)v33;
        v32[0] = 0;
        v33 = 0;
        v14 = (uint64_t)*a1;
        v15 = **a1;
        *(_BYTE *)v14 = v12;
        v30 = v15;
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v13;
        v31 = v16;
        sub_20B416E08(&v31, v15);
LABEL_24:
        v11 = 1;
        goto LABEL_25;
      }
      v7 = *((_QWORD *)v6 - 1);
      if (v7)
      {
        if (*(_BYTE *)v7 == 2)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 >= *(_QWORD *)(v8 + 16))
          {
            v10 = sub_20B417520((void **)v8, v32);
          }
          else
          {
            *(_BYTE *)v9 = v32[0];
            *(_QWORD *)(v9 + 8) = v33;
            v32[0] = 0;
            v33 = 0;
            v10 = (char *)(v9 + 16);
          }
          *(_QWORD *)(v8 + 8) = v10;
          goto LABEL_24;
        }
        v17 = (unint64_t)(a1[8] - 1);
        v18 = *(_QWORD *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if (((v18 >> v17) & 1) != 0)
        {
          v19 = v32[0];
          v20 = (uint64_t)v33;
          v32[0] = 0;
          v33 = 0;
          v21 = a1[10];
          v22 = *v21;
          *v21 = v19;
          v23 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = v20;
          v29 = v23;
          sub_20B416E08(&v29, v22);
          goto LABEL_24;
        }
      }
    }
    v11 = 0;
LABEL_25:
    sub_20B416E08((uint64_t *)&v33, v32[0]);
    return v11;
  }
  return 0;
}

void sub_20B45E5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_20B416E08(v14, a14);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B45E5DC(unsigned __int8 **a1)
{
  unsigned __int8 *result;
  int v3;
  void *exception;
  _QWORD v5[3];

  result = *a1;
  v3 = *result;
  if (v3 == 2)
    return a1[2];
  if (v3 == 1)
    return a1[1] + 56;
  if (a1[3])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20AEC0D64(v5, "cannot get value");
    sub_20B455C8C(214, (uint64_t)v5, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41DA48, (void (*)(void *))sub_20B455DFC);
  }
  return result;
}

void sub_20B45E698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_20B45E6D4(unsigned __int8 *a1@<X0>, unsigned __int8 **a2@<X1>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 **v5;
  int v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  uint64_t v16;
  int v17;
  std::string::size_type v18;
  uint64_t *v19;
  void **v20;
  void **v21;
  void *v22;
  unsigned __int8 *v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  void *v28;
  void *exception;
  void *v30;
  void *v31;
  char *v32;
  std::string v33;
  std::string v34;

  if (*a2 != a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20AEC0D64(&v34, "iterator does not fit current value");
    sub_20B455C8C(202, (uint64_t)&v34, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41DA48, (void (*)(void *))sub_20B455DFC);
  }
  a3[1] = 0;
  v5 = a3 + 1;
  *a3 = a1;
  a3[2] = 0;
  a3[3] = (unsigned __int8 *)0x8000000000000000;
  v6 = *a1;
  if (v6 == 2)
  {
    v11 = *((_QWORD *)a1 + 1);
    v12 = *(unsigned __int8 **)(v11 + 8);
    a3[2] = v12;
    v13 = a2[2];
    v14 = v13 + 16;
    if (v13 + 16 == v12)
    {
      v19 = (uint64_t *)a2[2];
      if (v12 == v13)
      {
LABEL_28:
        *(_QWORD *)(v11 + 8) = v19;
        a3[2] = v13;
        return;
      }
    }
    else
    {
      do
      {
        v15 = *v14;
        v16 = *((_QWORD *)v14 + 1);
        *v14 = 0;
        *((_QWORD *)v14 + 1) = 0;
        v17 = *(v14 - 16);
        *(v14 - 16) = v15;
        v34.__r_.__value_.__s.__data_[0] = v17;
        v18 = *((_QWORD *)v14 - 1);
        *((_QWORD *)v14 - 1) = v16;
        v34.__r_.__value_.__l.__size_ = v18;
        sub_20B416E08((uint64_t *)&v34.__r_.__value_.__l.__size_, v17);
        v14 += 16;
      }
      while (v14 != v12);
      v12 = *(unsigned __int8 **)(v11 + 8);
      v19 = (uint64_t *)(v14 - 16);
      if (v12 == (unsigned __int8 *)v19)
        goto LABEL_28;
    }
    v26 = (uint64_t *)(v12 - 8);
    do
    {
      v27 = v26 - 1;
      sub_20B416E08(v26, *((unsigned __int8 *)v26 - 8));
      v26 -= 2;
    }
    while (v27 != v19);
    goto LABEL_28;
  }
  if (v6 != 1)
  {
    a3[3] = (unsigned __int8 *)1;
    if ((v6 - 3) > 5)
    {
      v31 = __cxa_allocate_exception(0x20uLL);
      v32 = (char *)sub_20B452AD0((char *)a1);
      sub_20AEC0D64(&v33, v32);
      sub_20B1F16DC("cannot use erase() with ", &v33, &v34);
      sub_20B452958(307, (uint64_t)&v34, (uint64_t)v31);
      __cxa_throw(v31, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
    }
    if (a2[3])
    {
      v30 = __cxa_allocate_exception(0x20uLL);
      sub_20AEC0D64(&v34, "iterator out of range");
      sub_20B455C8C(205, (uint64_t)&v34, (uint64_t)v30);
      __cxa_throw(v30, (struct type_info *)&unk_24C41DA48, (void (*)(void *))sub_20B455DFC);
    }
    if (v6 == 8)
    {
      v21 = (void **)(a1 + 8);
      v20 = (void **)*((_QWORD *)a1 + 1);
      v28 = *v20;
      if (*v20)
      {
        v20[1] = v28;
        v22 = v28;
        goto LABEL_31;
      }
    }
    else
    {
      if (v6 != 3)
      {
LABEL_33:
        *a1 = 0;
        return;
      }
      v21 = (void **)(a1 + 8);
      v20 = (void **)*((_QWORD *)a1 + 1);
      if (*((char *)v20 + 23) < 0)
      {
        v22 = *v20;
LABEL_31:
        operator delete(v22);
        v20 = (void **)*v21;
      }
    }
    operator delete(v20);
    *v21 = 0;
    goto LABEL_33;
  }
  v7 = (unsigned __int8 **)*((_QWORD *)a1 + 1);
  *v5 = (unsigned __int8 *)(v7 + 1);
  v8 = a2[1];
  v9 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = *(unsigned __int8 **)v9;
    }
    while (v9);
  }
  else
  {
    v23 = a2[1];
    do
    {
      v10 = (unsigned __int8 *)*((_QWORD *)v23 + 2);
      v24 = *(_QWORD *)v10 == (_QWORD)v23;
      v23 = v10;
    }
    while (!v24);
  }
  if (*v7 == v8)
    *v7 = v10;
  v25 = (uint64_t *)v7[1];
  --v7[2];
  sub_20AEC867C(v25, (uint64_t *)v8);
  sub_20B416E08((uint64_t *)v8 + 8, v8[56]);
  if ((char)v8[55] < 0)
    operator delete(*((void **)v8 + 4));
  operator delete(v8);
  *v5 = v10;
}

void sub_20B45EA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  char v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if ((v21 & 1) != 0)
    __cxa_free_exception(v20);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B45EAA0(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *exception;
  _QWORD v7[3];

  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20AEC0D64(v7, "cannot compare iterators of different containers");
    sub_20B455C8C(212, (uint64_t)v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41DA48, (void (*)(void *))sub_20B455DFC);
  }
  v2 = **a1;
  if (v2 == 2)
  {
    v3 = a1[2];
    v4 = a2[2];
  }
  else if (v2 == 1)
  {
    v3 = a1[1];
    v4 = a2[1];
  }
  else
  {
    v3 = a1[3];
    v4 = a2[3];
  }
  return v3 == v4;
}

void sub_20B45EB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B45EBA0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24C41D9D8;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(_QWORD *)a1 = &off_24C41DA98;
  return a1;
}

void sub_20B45EBEC(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24C41D9D8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B45EC30(unsigned __int8 **a1, uint64_t *a2, char a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28[8];
  uint64_t v29;
  char v30;
  int v31;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v4 = *a2;
    v28[0] = 7;
    v29 = v4;
    if ((a3 & 1) != 0)
      goto LABEL_5;
    v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v30 = 5;
    v5 = a1[15];
    if (!v5)
      sub_20AECABA4();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v5 + 48))(v5, &v31, &v30, v28) & 1) != 0)
    {
LABEL_5:
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v12 = v28[0];
        v13 = v29;
        v28[0] = 0;
        v29 = 0;
        v14 = (uint64_t)*a1;
        v15 = **a1;
        *(_BYTE *)v14 = v12;
        v26 = v15;
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v13;
        v27 = v16;
        sub_20B416E08(&v27, v15);
LABEL_17:
        v11 = 1;
        goto LABEL_18;
      }
      v7 = *((_QWORD *)v6 - 1);
      if (v7)
      {
        if (*(_BYTE *)v7 == 2)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 >= *(_QWORD *)(v8 + 16))
          {
            v10 = sub_20B417520((void **)v8, v28);
          }
          else
          {
            *(_BYTE *)v9 = v28[0];
            *(_QWORD *)(v9 + 8) = v29;
            v28[0] = 0;
            v29 = 0;
            v10 = (char *)(v9 + 16);
          }
          *(_QWORD *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        v17 = (unint64_t)(a1[8] - 1);
        v18 = *(_QWORD *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if (((v18 >> v17) & 1) != 0)
        {
          v19 = v28[0];
          v20 = v29;
          v28[0] = 0;
          v29 = 0;
          v21 = a1[10];
          v22 = *v21;
          *v21 = v19;
          v23 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = v20;
          v25 = v23;
          sub_20B416E08(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    v11 = 0;
LABEL_18:
    sub_20B416E08(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_20B45EE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_20B416E08(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20B45EE34(unsigned __int8 **a1, unsigned __int8 *a2, char a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28[8];
  uint64_t v29;
  char v30;
  int v31;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v4 = *a2;
    v28[0] = 4;
    v29 = v4;
    if ((a3 & 1) != 0)
      goto LABEL_5;
    v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v30 = 5;
    v5 = a1[15];
    if (!v5)
      sub_20AECABA4();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v5 + 48))(v5, &v31, &v30, v28) & 1) != 0)
    {
LABEL_5:
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v12 = v28[0];
        v13 = v29;
        v28[0] = 0;
        v29 = 0;
        v14 = (uint64_t)*a1;
        v15 = **a1;
        *(_BYTE *)v14 = v12;
        v26 = v15;
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v13;
        v27 = v16;
        sub_20B416E08(&v27, v15);
LABEL_17:
        v11 = 1;
        goto LABEL_18;
      }
      v7 = *((_QWORD *)v6 - 1);
      if (v7)
      {
        if (*(_BYTE *)v7 == 2)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 >= *(_QWORD *)(v8 + 16))
          {
            v10 = sub_20B417520((void **)v8, v28);
          }
          else
          {
            *(_BYTE *)v9 = v28[0];
            *(_QWORD *)(v9 + 8) = v29;
            v28[0] = 0;
            v29 = 0;
            v10 = (char *)(v9 + 16);
          }
          *(_QWORD *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        v17 = (unint64_t)(a1[8] - 1);
        v18 = *(_QWORD *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if (((v18 >> v17) & 1) != 0)
        {
          v19 = v28[0];
          v20 = v29;
          v28[0] = 0;
          v29 = 0;
          v21 = a1[10];
          v22 = *v21;
          *v21 = v19;
          v23 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = v20;
          v25 = v23;
          sub_20B416E08(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    v11 = 0;
LABEL_18:
    sub_20B416E08(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_20B45F020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_20B416E08(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20B45F038(unsigned __int8 **a1, uint64_t a2, char a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27[8];
  uint64_t v28;
  char v29;
  int v30;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v27[0] = 0;
    v28 = 0;
    if ((a3 & 1) != 0)
      goto LABEL_5;
    v30 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v29 = 5;
    v4 = a1[15];
    if (!v4)
      sub_20AECABA4();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v4 + 48))(v4, &v30, &v29, v27) & 1) != 0)
    {
LABEL_5:
      v5 = a1[2];
      if (a1[1] == v5)
      {
        v11 = v27[0];
        v12 = v28;
        v27[0] = 0;
        v28 = 0;
        v13 = (uint64_t)*a1;
        v14 = **a1;
        *(_BYTE *)v13 = v11;
        v25 = v14;
        v15 = *(_QWORD *)(v13 + 8);
        *(_QWORD *)(v13 + 8) = v12;
        v26 = v15;
        sub_20B416E08(&v26, v14);
LABEL_17:
        v10 = 1;
        goto LABEL_18;
      }
      v6 = *((_QWORD *)v5 - 1);
      if (v6)
      {
        if (*(_BYTE *)v6 == 2)
        {
          v7 = *(_QWORD *)(v6 + 8);
          v8 = *(_QWORD *)(v7 + 8);
          if (v8 >= *(_QWORD *)(v7 + 16))
          {
            v9 = sub_20B417520((void **)v7, v27);
          }
          else
          {
            *(_BYTE *)v8 = v27[0];
            *(_QWORD *)(v8 + 8) = v28;
            v27[0] = 0;
            v28 = 0;
            v9 = (char *)(v8 + 16);
          }
          *(_QWORD *)(v7 + 8) = v9;
          goto LABEL_17;
        }
        v16 = (unint64_t)(a1[8] - 1);
        v17 = *(_QWORD *)&a1[7][(v16 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v16;
        if (((v17 >> v16) & 1) != 0)
        {
          v18 = v27[0];
          v19 = v28;
          v27[0] = 0;
          v28 = 0;
          v20 = a1[10];
          v21 = *v20;
          *v20 = v18;
          v22 = *((_QWORD *)v20 + 1);
          *((_QWORD *)v20 + 1) = v19;
          v24 = v22;
          sub_20B416E08(&v24, v21);
          goto LABEL_17;
        }
      }
    }
    v10 = 0;
LABEL_18:
    sub_20B416E08(&v28, v27[0]);
    return v10;
  }
  return 0;
}

void sub_20B45F21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_20B416E08(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20B45F234(unsigned __int8 **a1, uint64_t *a2, char a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28[8];
  uint64_t v29;
  char v30;
  int v31;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v4 = *a2;
    v28[0] = 5;
    v29 = v4;
    if ((a3 & 1) != 0)
      goto LABEL_5;
    v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v30 = 5;
    v5 = a1[15];
    if (!v5)
      sub_20AECABA4();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v5 + 48))(v5, &v31, &v30, v28) & 1) != 0)
    {
LABEL_5:
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v12 = v28[0];
        v13 = v29;
        v28[0] = 0;
        v29 = 0;
        v14 = (uint64_t)*a1;
        v15 = **a1;
        *(_BYTE *)v14 = v12;
        v26 = v15;
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v13;
        v27 = v16;
        sub_20B416E08(&v27, v15);
LABEL_17:
        v11 = 1;
        goto LABEL_18;
      }
      v7 = *((_QWORD *)v6 - 1);
      if (v7)
      {
        if (*(_BYTE *)v7 == 2)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 >= *(_QWORD *)(v8 + 16))
          {
            v10 = sub_20B417520((void **)v8, v28);
          }
          else
          {
            *(_BYTE *)v9 = v28[0];
            *(_QWORD *)(v9 + 8) = v29;
            v28[0] = 0;
            v29 = 0;
            v10 = (char *)(v9 + 16);
          }
          *(_QWORD *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        v17 = (unint64_t)(a1[8] - 1);
        v18 = *(_QWORD *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if (((v18 >> v17) & 1) != 0)
        {
          v19 = v28[0];
          v20 = v29;
          v28[0] = 0;
          v29 = 0;
          v21 = a1[10];
          v22 = *v21;
          *v21 = v19;
          v23 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = v20;
          v25 = v23;
          sub_20B416E08(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    v11 = 0;
LABEL_18:
    sub_20B416E08(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_20B45F41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_20B416E08(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20B45F434(unsigned __int8 **a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31[8];
  uint64_t v32;
  char v33;
  int v34;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v31[0] = 3;
    v6 = operator new(0x18uLL);
    v7 = (uint64_t)v6;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20AEC60F4(v6, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v6 = *(_OWORD *)a2;
      v6[2] = *(_QWORD *)(a2 + 16);
    }
    v32 = v7;
    if ((a3 & 1) != 0)
      goto LABEL_9;
    v34 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v33 = 5;
    v9 = a1[15];
    if (!v9)
      sub_20AECABA4();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v9 + 48))(v9, &v34, &v33, v31) & 1) != 0)
    {
LABEL_9:
      v10 = a1[2];
      if (a1[1] == v10)
      {
        v15 = v31[0];
        v16 = v32;
        v31[0] = 0;
        v32 = 0;
        v17 = (uint64_t)*a1;
        v18 = **a1;
        *(_BYTE *)v17 = v15;
        v29 = v18;
        v19 = *(_QWORD *)(v17 + 8);
        *(_QWORD *)(v17 + 8) = v16;
        v30 = v19;
        sub_20B416E08(&v30, v18);
LABEL_20:
        v8 = 1;
        goto LABEL_21;
      }
      v11 = *((_QWORD *)v10 - 1);
      if (v11)
      {
        if (*(_BYTE *)v11 == 2)
        {
          v12 = *(_QWORD *)(v11 + 8);
          v13 = *(_QWORD *)(v12 + 8);
          if (v13 >= *(_QWORD *)(v12 + 16))
          {
            v14 = sub_20B417520((void **)v12, v31);
          }
          else
          {
            *(_BYTE *)v13 = v31[0];
            *(_QWORD *)(v13 + 8) = v32;
            v31[0] = 0;
            v32 = 0;
            v14 = (char *)(v13 + 16);
          }
          *(_QWORD *)(v12 + 8) = v14;
          goto LABEL_20;
        }
        v20 = (unint64_t)(a1[8] - 1);
        v21 = *(_QWORD *)&a1[7][(v20 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v20;
        if (((v21 >> v20) & 1) != 0)
        {
          v22 = v31[0];
          v23 = v32;
          v31[0] = 0;
          v32 = 0;
          v24 = a1[10];
          v25 = *v24;
          *v24 = v22;
          v26 = *((_QWORD *)v24 + 1);
          *((_QWORD *)v24 + 1) = v23;
          v28 = v26;
          sub_20B416E08(&v28, v25);
          goto LABEL_20;
        }
      }
    }
    v8 = 0;
LABEL_21:
    sub_20B416E08(&v32, v31[0]);
    return v8;
  }
  return 0;
}

void sub_20B45F658(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B45F66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_20B416E08(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20B45F684(unsigned __int8 **a1, uint64_t *a2, char a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28[8];
  uint64_t v29;
  char v30;
  int v31;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v4 = *a2;
    v28[0] = 6;
    v29 = v4;
    if ((a3 & 1) != 0)
      goto LABEL_5;
    v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v30 = 5;
    v5 = a1[15];
    if (!v5)
      sub_20AECABA4();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v5 + 48))(v5, &v31, &v30, v28) & 1) != 0)
    {
LABEL_5:
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v12 = v28[0];
        v13 = v29;
        v28[0] = 0;
        v29 = 0;
        v14 = (uint64_t)*a1;
        v15 = **a1;
        *(_BYTE *)v14 = v12;
        v26 = v15;
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v13;
        v27 = v16;
        sub_20B416E08(&v27, v15);
LABEL_17:
        v11 = 1;
        goto LABEL_18;
      }
      v7 = *((_QWORD *)v6 - 1);
      if (v7)
      {
        if (*(_BYTE *)v7 == 2)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 >= *(_QWORD *)(v8 + 16))
          {
            v10 = sub_20B417520((void **)v8, v28);
          }
          else
          {
            *(_BYTE *)v9 = v28[0];
            *(_QWORD *)(v9 + 8) = v29;
            v28[0] = 0;
            v29 = 0;
            v10 = (char *)(v9 + 16);
          }
          *(_QWORD *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        v17 = (unint64_t)(a1[8] - 1);
        v18 = *(_QWORD *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if (((v18 >> v17) & 1) != 0)
        {
          v19 = v28[0];
          v20 = v29;
          v28[0] = 0;
          v29 = 0;
          v21 = a1[10];
          v22 = *v21;
          *v21 = v19;
          v23 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = v20;
          v25 = v23;
          sub_20B416E08(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    v11 = 0;
LABEL_18:
    sub_20B416E08(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_20B45F870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_20B416E08(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20B45F888(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24C41D9D8;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(_QWORD *)a1 = &off_24C41DAD8;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

void sub_20B45F8E0(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24C41D9D8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B45F924(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  std::to_string(&v12, *(_QWORD *)(a1 + 16) + 1);
  v4 = std::string::insert(&v12, 0, " at line ", 9uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v13, ", column ", 9uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(_QWORD *)(a1 + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v12.__r_.__value_.__l.__data_);
    return;
  }
LABEL_14:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_15;
}

void sub_20B45FA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v26 - 25) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v26 - 25) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v26 - 48));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B45FB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *exception;
  void *v7;

  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 41))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v7 = (void *)sub_20B45EBA0((uint64_t)exception, a4);
    __cxa_throw(v7, (struct type_info *)&unk_24C41DA30, (void (*)(void *))sub_20B45E314);
  }
  return 0;
}

uint64_t sub_20B45FB58(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  char *v8;
  _QWORD *v9;
  unsigned __int8 v10;
  _QWORD *v11;
  unsigned __int8 v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;

  v3 = a1[2];
  if (a1[1] == v3)
  {
    v9 = 0;
    v10 = *a2;
    switch(*a2)
    {
      case 1u:
        v9 = operator new(0x18uLL);
        v9[2] = 0;
        v9[1] = 0;
        *v9 = v9 + 1;
        break;
      case 2u:
        v9 = operator new(0x18uLL);
        v9[1] = 0;
        v9[2] = 0;
        *v9 = 0;
        break;
      case 3u:
        v9 = operator new(0x18uLL);
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        break;
      case 4u:
        LOBYTE(v22) = 0;
        v9 = v22;
        break;
      case 8u:
        v9 = operator new(0x20uLL);
        v9[1] = 0;
        v9[2] = 0;
        *v9 = 0;
        *((_WORD *)v9 + 12) = 0;
        break;
      default:
        break;
    }
    v14 = (uint64_t)*a1;
    v15 = **a1;
    *(_BYTE *)v14 = v10;
    v21 = v15;
    v16 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)(v14 + 8) = v9;
    v22 = (_QWORD *)v16;
    sub_20B416E08((uint64_t *)&v22, v15);
    return (uint64_t)*a1;
  }
  else
  {
    v4 = *((_QWORD *)v3 - 1);
    if (*(_BYTE *)v4 == 2)
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_BYTE **)(v5 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(v5 + 16))
      {
        v8 = sub_20B45FD9C((void **)v5, a2);
      }
      else
      {
        v7 = *a2;
        *v6 = v7;
        sub_20B452D10(v6 + 8, v7);
        v8 = v6 + 16;
        *(_QWORD *)(v5 + 8) = v6 + 16;
      }
      *(_QWORD *)(v5 + 8) = v8;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v11 = 0;
      v12 = *a2;
      switch(*a2)
      {
        case 1u:
          v11 = operator new(0x18uLL);
          v11[2] = 0;
          v11[1] = 0;
          *v11 = v11 + 1;
          break;
        case 2u:
          v11 = operator new(0x18uLL);
          v11[1] = 0;
          v11[2] = 0;
          *v11 = 0;
          break;
        case 3u:
          v11 = operator new(0x18uLL);
          *((_BYTE *)v11 + 23) = 0;
          *(_BYTE *)v11 = 0;
          break;
        case 4u:
          LOBYTE(v20) = 0;
          v11 = v20;
          break;
        case 8u:
          v11 = operator new(0x20uLL);
          v11[1] = 0;
          v11[2] = 0;
          *v11 = 0;
          *((_WORD *)v11 + 12) = 0;
          break;
        default:
          break;
      }
      v17 = a1[4];
      v18 = *v17;
      *v17 = v12;
      v19 = *((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = v11;
      v20 = (_QWORD *)v19;
      sub_20B416E08((uint64_t *)&v20, v18);
      return (uint64_t)a1[4];
    }
  }
}

void sub_20B45FD94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B45FD9C(void **a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  char *v10;
  _BYTE *v11;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  char *v19;
  char *v20;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_20B41750C();
  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      sub_20AEC60CC();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v19 = &v8[16 * v3];
  v20 = &v8[16 * v7];
  v9 = *a2;
  *v19 = v9;
  sub_20B452D10(v19 + 8, v9);
  v10 = v19;
  v11 = v19 + 16;
  v12 = (uint64_t *)*a1;
  v13 = (uint64_t *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v19;
    a1[1] = v11;
    a1[2] = v20;
    if (!v13)
      return v19 + 16;
    goto LABEL_17;
  }
  do
  {
    v14 = *((_BYTE *)v13 - 16);
    v13 -= 2;
    *(v10 - 16) = v14;
    v10 -= 16;
    *((_QWORD *)v10 + 1) = v13[1];
    *(_BYTE *)v13 = 0;
    v13[1] = 0;
  }
  while (v13 != v12);
  v13 = (uint64_t *)*a1;
  v15 = (uint64_t *)a1[1];
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v20;
  if (v15 != v13)
  {
    v16 = v15 - 1;
    do
    {
      v17 = v16 - 1;
      sub_20B416E08(v16, *((unsigned __int8 *)v16 - 8));
      v16 -= 2;
    }
    while (v17 != v13);
  }
  if (v13)
LABEL_17:
    operator delete(v13);
  return v19 + 16;
}

void sub_20B45FEE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B451C18((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B45FEFC(void **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_20B41750C();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_20AEC60CC();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 7;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3)
      return v14;
    goto LABEL_13;
  }
  do
  {
    v15 = *((_BYTE *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v3[1];
    *(_BYTE *)v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  v3 = (uint64_t *)*a1;
  v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_20B416E08(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_13:
    operator delete(v3);
  return v14;
}

char *sub_20B460020(void **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_20B41750C();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_20AEC60CC();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 4;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3)
      return v14;
    goto LABEL_13;
  }
  do
  {
    v15 = *((_BYTE *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v3[1];
    *(_BYTE *)v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  v3 = (uint64_t *)*a1;
  v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_20B416E08(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_13:
    operator delete(v3);
  return v14;
}

char *sub_20B460144(void **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v3 = (uint64_t *)*a1;
  v2 = (uint64_t *)a1[1];
  v4 = ((char *)v2 - (_BYTE *)*a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_20B41750C();
  v6 = (_BYTE *)a1[2] - (_BYTE *)v3;
  if (v6 >> 3 > v5)
    v5 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v5 = 0xFFFFFFFFFFFFFFFLL;
  if (v5 >> 60)
    sub_20AEC60CC();
  v7 = 16 * v5;
  v8 = (char *)operator new(16 * v5);
  v9 = &v8[16 * v4];
  v10 = &v8[v7];
  *v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v11 = v9 + 16;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v2)
      return v11;
    goto LABEL_13;
  }
  do
  {
    v12 = *((_BYTE *)v2 - 16);
    v2 -= 2;
    *(v9 - 16) = v12;
    v9 -= 16;
    *((_QWORD *)v9 + 1) = v2[1];
    *(_BYTE *)v2 = 0;
    v2[1] = 0;
  }
  while (v2 != v3);
  v2 = (uint64_t *)*a1;
  v13 = (uint64_t *)a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v2)
  {
    v14 = v13 - 1;
    do
    {
      v15 = v14 - 1;
      sub_20B416E08(v14, *((unsigned __int8 *)v14 - 8));
      v14 -= 2;
    }
    while (v15 != v2);
  }
  if (v2)
LABEL_13:
    operator delete(v2);
  return v11;
}

char *sub_20B46025C(void **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_20B41750C();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_20AEC60CC();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 5;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3)
      return v14;
    goto LABEL_13;
  }
  do
  {
    v15 = *((_BYTE *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v3[1];
    *(_BYTE *)v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  v3 = (uint64_t *)*a1;
  v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_20B416E08(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_13:
    operator delete(v3);
  return v14;
}

uint64_t sub_20B460380(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v10 = operator new(0x18uLL);
    v11 = v10;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20AEC60F4(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v10 = *(_OWORD *)a2;
      v10[2] = *(_QWORD *)(a2 + 16);
    }
    v15 = (uint64_t)*a1;
    v16 = **a1;
    *(_BYTE *)v15 = 3;
    v23 = v16;
    v17 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v11;
    v24 = v17;
    sub_20B416E08(&v24, v16);
    return (uint64_t)*a1;
  }
  else
  {
    v5 = *((_QWORD *)v4 - 1);
    if (*(_BYTE *)v5 == 2)
    {
      v6 = *(_QWORD *)(v5 + 8);
      v7 = *(_QWORD *)(v6 + 8);
      if (v7 >= *(_QWORD *)(v6 + 16))
      {
        v14 = sub_20B460598(v6, a2);
      }
      else
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_BYTE *)v7 = 3;
        v8 = operator new(0x18uLL);
        v9 = v8;
        if (*(char *)(a2 + 23) < 0)
        {
          sub_20AEC60F4(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v8 = *(_OWORD *)a2;
          v8[2] = *(_QWORD *)(a2 + 16);
        }
        *(_QWORD *)(v7 + 8) = v9;
        v14 = (char *)(v7 + 16);
        *(_QWORD *)(v6 + 8) = v7 + 16;
      }
      *(_QWORD *)(v6 + 8) = v14;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v12 = operator new(0x18uLL);
      v13 = v12;
      if (*(char *)(a2 + 23) < 0)
      {
        sub_20AEC60F4(v12, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)a2;
        v12[2] = *(_QWORD *)(a2 + 16);
      }
      v19 = a1[4];
      v20 = *v19;
      *v19 = 3;
      v21 = *((_QWORD *)v19 + 1);
      *((_QWORD *)v19 + 1) = v13;
      v22 = v21;
      sub_20B416E08(&v22, v20);
      return (uint64_t)a1[4];
    }
  }
}

void sub_20B460550(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  operator delete(v2);
  *(_QWORD *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

void sub_20B460568(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B46057C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B460590(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B460598(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  char v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  __int128 v22;

  v3 = *(uint64_t **)a1;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_20B41750C();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_20AEC60CC();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * v5];
  v12 = &v10[16 * v9];
  *((_QWORD *)&v22 + 1) = v12;
  *((_QWORD *)v11 + 1) = 0;
  v13 = v11 + 8;
  *v11 = 3;
  v14 = operator new(0x18uLL);
  v15 = v14;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20AEC60F4(v14, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *(uint64_t **)a1;
    v4 = *(uint64_t **)(a1 + 8);
    *v13 = v15;
    v16 = v11 + 16;
    *(_QWORD *)&v22 = v11 + 16;
    if (v4 == v3)
      goto LABEL_22;
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)a2;
    v14[2] = *(_QWORD *)(a2 + 16);
    *v13 = v14;
    v16 = v11 + 16;
    *(_QWORD *)&v22 = v11 + 16;
    if (v4 == v3)
    {
LABEL_22:
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v12;
      if (!v3)
        return v16;
      goto LABEL_20;
    }
  }
  do
  {
    v17 = *((_BYTE *)v4 - 16);
    v4 -= 2;
    *(v11 - 16) = v17;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v4[1];
    *(_BYTE *)v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  v3 = *(uint64_t **)a1;
  v18 = *(uint64_t **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_OWORD *)(a1 + 8) = v22;
  v16 = (char *)v22;
  if (v18 != v3)
  {
    v19 = v18 - 1;
    do
    {
      v20 = v19 - 1;
      sub_20B416E08(v19, *((unsigned __int8 *)v19 - 8));
      v19 -= 2;
    }
    while (v20 != v3);
  }
  if (v3)
LABEL_20:
    operator delete(v3);
  return v16;
}

void sub_20B460740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  operator delete(v10);
  sub_20B451C18((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20B46075C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B451C18((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B460770(void **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_20B41750C();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_20AEC60CC();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 6;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3)
      return v14;
    goto LABEL_13;
  }
  do
  {
    v15 = *((_BYTE *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v3[1];
    *(_BYTE *)v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  v3 = (uint64_t *)*a1;
  v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_20B416E08(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_13:
    operator delete(v3);
  return v14;
}

uint64_t sub_20B460894(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)&unk_20B5AE8D7, 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
      abort();
    case 1:
      result = sub_20B460ADC(a2, a3);
      break;
    case 2:
      result = sub_20B4610E0(a2, a3);
      break;
    case 3:
      result = sub_20B4616A0(a2, a3);
      break;
    case 4:
      result = sub_20B461CD8(a2, a3);
      break;
    case 5:
      result = sub_20B462298(a2, a3);
      break;
    case 6:
      result = sub_20B462B00(a2, a3);
      break;
    case 7:
      result = sub_20B463314(a2, a3);
      break;
    case 8:
      result = sub_20B463C54(a2, a3);
      break;
    case 9:
      result = sub_20B464468(a2, a3);
      break;
    case 10:
      result = sub_20B464CD0(a2, a3);
      break;
    case 11:
      result = sub_20B4654E4(a2, a3);
      break;
    case 12:
      result = sub_20B465E24(a2, a3);
      break;
    case 13:
      result = sub_20B466638(a2, a3);
      break;
    case 14:
      result = sub_20B466EA0(a2, a3);
      break;
    case 15:
      result = sub_20B4676B4(a2, a3);
      break;
    case 16:
      result = sub_20B467FF4(a2, a3);
      break;
    case 17:
      result = sub_20B468808(a2, a3);
      break;
    case 18:
      result = sub_20B469070(a2, a3);
      break;
    case 19:
      result = sub_20B469884(a2, a3);
      break;
    case 20:
      result = sub_20B46A1C4(a2, a3);
      break;
    case 21:
      result = sub_20B46A9D8(a2, a3);
      break;
    case 22:
      result = sub_20B46B240(a2, a3);
      break;
    case 23:
      result = sub_20B46BA54(a2, a3);
      break;
    case 24:
      result = sub_20B46C394(a2, a3);
      break;
    case 25:
      result = sub_20B46CBA8(a2, a3);
      break;
    case 26:
      result = sub_20B46D410(a2, a3);
      break;
    case 27:
      result = sub_20B46DC24(a2, a3);
      break;
    case 28:
      result = sub_20B46E564(a2, a3);
      break;
    case 29:
      result = sub_20B46ED78(a2, a3);
      break;
    case 30:
      result = sub_20B46F5E0(a2, a3);
      break;
    case 31:
      result = sub_20B46FDF4(a2, a3);
      break;
    case 32:
      result = sub_20B470734(a2, a3);
      break;
    case 33:
      result = sub_20B470F48(a2, a3);
      break;
    case 34:
      result = sub_20B4717B0(a2, a3);
      break;
    case 35:
      result = sub_20B471FC4(a2, a3);
      break;
    case 36:
      result = sub_20B472904(a2, a3);
      break;
    case 37:
      result = sub_20B473118(a2, a3);
      break;
    case 38:
      result = sub_20B473980(a2, a3);
      break;
    case 39:
      result = sub_20B474194(a2, a3);
      break;
    case 40:
      result = sub_20B474AD4(a2, a3);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL sub_20B460ADC(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C4051D0;
  sub_20B2D6D24(a1, (uint64_t)&v15);
  v11 = &off_24C4051D0;
  sub_20B2D6D24(a2, (uint64_t)&v12);
  v3 = sub_20B460BF4((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B460BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20B036E98((uint64_t)&a9);
  sub_20B036E98((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20B460BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B036E98((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20B460BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
LABEL_18:
    v61 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v61, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v60 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_76;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 49))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 49))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v60, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_76;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_76;
  v24 = 1;
  if (!v22 || !v23)
  {
LABEL_77:
    v57 = v60;
    v60 = 0;
    if (!v57)
      goto LABEL_79;
    goto LABEL_78;
  }
  v25 = *(unsigned int *)(a1 + 40);
  v26 = *(unsigned int *)(a1 + 44);
  v28 = *(unsigned int *)(a2 + 40);
  v27 = *(unsigned int *)(a2 + 44);
  v29 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 48) && v29)
  {
    v30 = *(_QWORD *)(a1 + 8);
    v31 = *(std::__shared_weak_count **)(a1 + 16);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      do
        v34 = __ldaxr(v32);
      while (__stlxr(v34 - 1, v32));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v30 + 88))(v30, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v29 = *(unsigned __int8 **)(a1 + 24);
  }
  v35 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 48) && v35)
  {
    v36 = *(_QWORD *)(a2 + 8);
    v37 = *(std::__shared_weak_count **)(a2 + 16);
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      do
        v40 = __ldaxr(v38);
      while (__stlxr(v40 - 1, v38));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v36 + 88))(v36, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v35 = *(unsigned __int8 **)(a2 + 24);
  }
  v41 = v22 - 1;
  v42 = v23 - 1;
  if (v23 == 1)
  {
LABEL_66:
    if (v22 == 1)
    {
      v52 = v35;
      v51 = v29;
      goto LABEL_83;
    }
    v50 = (v22 - 2) + 1;
    v51 = &v29[v50 * v25];
    v52 = &v35[v50 * v28];
    while (*v29 == *v35)
    {
      v29 += v25;
      v35 += v28;
      if (!--v41)
        goto LABEL_83;
    }
LABEL_76:
    v24 = 0;
    goto LABEL_77;
  }
  if (v22 != 1)
  {
    v43 = 0;
    v44 = (v23 - 2) + 1;
    v45 = &v29[v44 * v26];
    v46 = &v35[v44 * v27];
LABEL_60:
    v47 = v22 - 1;
    v48 = v29;
    v49 = v35;
    while (*v48 == *v49)
    {
      v48 += v25;
      v49 += v28;
      if (!--v47)
      {
        if (*v48 != *v49)
          goto LABEL_76;
        v29 += v26;
        v35 += v27;
        if (++v43 == v42)
        {
          v29 = v45;
          v35 = v46;
          goto LABEL_66;
        }
        goto LABEL_60;
      }
    }
    goto LABEL_76;
  }
  if (*v29 != *v35)
    goto LABEL_76;
  v51 = &v29[v26 * (unint64_t)v42];
  v53 = &v35[v27];
  v54 = &v29[v26];
  v52 = &v35[v27 * (unint64_t)v42];
  while (--v42)
  {
    v24 = 0;
    v55 = *v53;
    v53 += v27;
    v56 = *v54;
    v54 += v26;
    if (v56 != v55)
      goto LABEL_77;
  }
LABEL_83:
  v24 = *v51 == *v52;
  v57 = v60;
  v60 = 0;
  if (v57)
LABEL_78:
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
LABEL_79:
  v58 = v61;
  v61 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  return v24;
}

void sub_20B46107C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v11 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v11 = a10;
    if (!a10)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B4610E0(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C405448;
  sub_20B2D7590(a1, (uint64_t)&v15);
  v11 = &off_24C405448;
  sub_20B2D7590(a2, (uint64_t)&v12);
  v3 = sub_20B4611F8((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B4611C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20B037C40((uint64_t)&a9);
  sub_20B037C40((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20B4611E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B037C40((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20B4611F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
LABEL_18:
    v51 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v51, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v50 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 == *(_DWORD *)(a2 + 32))
      goto LABEL_36;
LABEL_72:
    v24 = 0;
    goto LABEL_73;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 49))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 49))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v50, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_72;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_72;
  v24 = 1;
  if (v22 && v23)
  {
    v25 = *(unsigned int *)(a1 + 40);
    v26 = *(unsigned int *)(a1 + 44);
    v27 = *(unsigned int *)(a2 + 40);
    v28 = *(unsigned int *)(a2 + 44);
    v29 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 48) && v29)
    {
      v30 = *(_QWORD *)(a1 + 8);
      v31 = *(std::__shared_weak_count **)(a1 + 16);
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        do
          v34 = __ldaxr(v32);
        while (__stlxr(v34 - 1, v32));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v30 + 88))(v30, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v29 = *(unsigned __int16 **)(a1 + 24);
    }
    v35 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && v35)
    {
      v36 = *(_QWORD *)(a2 + 8);
      v37 = *(std::__shared_weak_count **)(a2 + 16);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v36 + 88))(v36, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v35 = *(unsigned __int16 **)(a2 + 24);
    }
    v41 = v22 - 1;
    v42 = v23 - 1;
    if (v23 == 1)
    {
LABEL_65:
      if (v22 == 1)
      {
LABEL_71:
        v24 = *v29 == *v35;
        goto LABEL_73;
      }
      while (*v29 == *v35)
      {
        v29 += v25;
        v35 += v27;
        if (!--v41)
          goto LABEL_71;
      }
    }
    else if (v22 == 1)
    {
      while (*v29 == *v35)
      {
        v29 += v26;
        v35 += v28;
        if (!--v42)
          goto LABEL_71;
      }
    }
    else
    {
      v43 = 0;
LABEL_60:
      v44 = v35;
      v45 = v29;
      v46 = v22 - 1;
      while (*v45 == *v44)
      {
        v45 += v25;
        v44 += v27;
        if (!--v46)
        {
          if (*v45 != *v44)
            goto LABEL_72;
          v29 += v26;
          v35 += v28;
          if (++v43 != v42)
            goto LABEL_60;
          goto LABEL_65;
        }
      }
    }
    goto LABEL_72;
  }
LABEL_73:
  v47 = v50;
  v50 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = v51;
  v51 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  return v24;
}

void sub_20B46163C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v11 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v11 = a10;
    if (!a10)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B4616A0(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C405688;
  sub_20B372128(a1, (uint64_t)&v15);
  v11 = &off_24C405688;
  sub_20B372128(a2, (uint64_t)&v12);
  v3 = sub_20B4617B8((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B461788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20B0389B8((uint64_t)&a9);
  sub_20B0389B8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20B4617A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B0389B8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20B4617B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  __int16 *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  __int16 *v44;
  __int16 *v45;
  int v46;
  uint64_t v67;
  __int16 *v68;
  __int16 *v69;
  __int16 *v70;
  __int16 *v71;
  uint64_t v76;
  uint64_t v77;
  uint64_t v83;
  uint64_t v84;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
LABEL_18:
    v84 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v84, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v83 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_74;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 49))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 49))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v83, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_74;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_74;
  v24 = 1;
  if (!v22 || !v23)
  {
LABEL_75:
    v76 = v83;
    v83 = 0;
    if (!v76)
      goto LABEL_77;
    goto LABEL_76;
  }
  v25 = *(unsigned int *)(a1 + 40);
  v26 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 40);
  v28 = *(unsigned int *)(a2 + 44);
  v29 = *(__int16 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 48) && v29)
  {
    v30 = *(_QWORD *)(a1 + 8);
    v31 = *(std::__shared_weak_count **)(a1 + 16);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      do
        v34 = __ldaxr(v32);
      while (__stlxr(v34 - 1, v32));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v30 + 88))(v30, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v29 = *(__int16 **)(a1 + 24);
  }
  v35 = *(__int16 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 48) && v35)
  {
    v36 = *(_QWORD *)(a2 + 8);
    v37 = *(std::__shared_weak_count **)(a2 + 16);
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      do
        v40 = __ldaxr(v38);
      while (__stlxr(v40 - 1, v38));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v36 + 88))(v36, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v35 = *(__int16 **)(a2 + 24);
  }
  v41 = v22 - 1;
  v42 = v23 - 1;
  if (v23 == 1)
  {
LABEL_65:
    if (v22 == 1)
      goto LABEL_81;
    while (1)
    {
      _H0 = *v29;
      _H1 = *v35;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
        break;
      v29 += v25;
      v35 += v27;
      if (!--v41)
        goto LABEL_81;
    }
LABEL_74:
    v24 = 0;
    goto LABEL_75;
  }
  if (v22 != 1)
  {
    v43 = 0;
LABEL_60:
    v44 = v35;
    v45 = v29;
    v46 = v22 - 1;
    while (1)
    {
      _H0 = *v45;
      _H1 = *v44;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
        goto LABEL_74;
      v45 += v25;
      v44 += v27;
      if (!--v46)
      {
        _H0 = *v45;
        _H1 = *v44;
        __asm
        {
          FCVT            S1, H1
          FCVT            S0, H0
        }
        if (_S0 != _S1)
          goto LABEL_74;
        v29 += v26;
        v35 += v28;
        if (++v43 != v42)
          goto LABEL_60;
        goto LABEL_65;
      }
    }
  }
  _H0 = *v29;
  _H1 = *v35;
  __asm
  {
    FCVT            S1, H1
    FCVT            S0, H0
  }
  if (_S0 != _S1)
    goto LABEL_74;
  v67 = 2 * (v23 - 2) + 2;
  v68 = (__int16 *)((char *)v29 + v67 * v26);
  v69 = (__int16 *)((char *)v35 + v67 * v28);
  v70 = &v35[v28];
  v71 = &v29[v26];
  v24 = 0;
  while (--v42)
  {
    _H0 = *v70;
    v70 += v28;
    _H1 = *v71;
    v71 += v26;
    __asm
    {
      FCVT            S0, H0
      FCVT            S1, H1
    }
    if (_S1 != _S0)
      goto LABEL_75;
  }
  v35 = v69;
  v29 = v68;
LABEL_81:
  _H0 = *v29;
  _H1 = *v35;
  __asm
  {
    FCVT            S1, H1
    FCVT            S0, H0
  }
  v24 = _S0 == _S1;
  v76 = v83;
  v83 = 0;
  if (v76)
LABEL_76:
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
LABEL_77:
  v77 = v84;
  v84 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v24;
}

void sub_20B461C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v11 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v11 = a10;
    if (!a10)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B461CD8(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C405900;
  sub_20B3726DC(a1, (uint64_t)&v15);
  v11 = &off_24C405900;
  sub_20B3726DC(a2, (uint64_t)&v12);
  v3 = sub_20B461DF0((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B461DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20B0399AC((uint64_t)&a9);
  sub_20B0399AC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20B461DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B0399AC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20B461DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  float *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  float *v44;
  float *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
LABEL_18:
    v51 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v51, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v50 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 == *(_DWORD *)(a2 + 32))
      goto LABEL_36;
LABEL_72:
    v24 = 0;
    goto LABEL_73;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 49))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 49))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v50, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_72;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_72;
  v24 = 1;
  if (v22 && v23)
  {
    v25 = *(unsigned int *)(a1 + 40);
    v26 = *(unsigned int *)(a1 + 44);
    v27 = *(unsigned int *)(a2 + 40);
    v28 = *(unsigned int *)(a2 + 44);
    v29 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 48) && v29)
    {
      v30 = *(_QWORD *)(a1 + 8);
      v31 = *(std::__shared_weak_count **)(a1 + 16);
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        do
          v34 = __ldaxr(v32);
        while (__stlxr(v34 - 1, v32));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v30 + 88))(v30, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v29 = *(float **)(a1 + 24);
    }
    v35 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && v35)
    {
      v36 = *(_QWORD *)(a2 + 8);
      v37 = *(std::__shared_weak_count **)(a2 + 16);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v36 + 88))(v36, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v35 = *(float **)(a2 + 24);
    }
    v41 = v22 - 1;
    v42 = v23 - 1;
    if (v23 == 1)
    {
LABEL_65:
      if (v22 == 1)
      {
LABEL_71:
        v24 = *v29 == *v35;
        goto LABEL_73;
      }
      while (*v29 == *v35)
      {
        v29 += v25;
        v35 += v27;
        if (!--v41)
          goto LABEL_71;
      }
    }
    else if (v22 == 1)
    {
      while (*v29 == *v35)
      {
        v29 += v26;
        v35 += v28;
        if (!--v42)
          goto LABEL_71;
      }
    }
    else
    {
      v43 = 0;
LABEL_60:
      v44 = v35;
      v45 = v29;
      v46 = v22 - 1;
      while (*v45 == *v44)
      {
        v45 += v25;
        v44 += v27;
        if (!--v46)
        {
          if (*v45 != *v44)
            goto LABEL_72;
          v29 += v26;
          v35 += v28;
          if (++v43 != v42)
            goto LABEL_60;
          goto LABEL_65;
        }
      }
    }
    goto LABEL_72;
  }
LABEL_73:
  v47 = v50;
  v50 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = v51;
  v51 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  return v24;
}

void sub_20B462234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v11 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v11 = a10;
    if (!a10)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B462298(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C405B78;
  sub_20B372C90(a1, (uint64_t)&v15);
  v11 = &off_24C405B78;
  sub_20B372C90(a2, (uint64_t)&v12);
  v3 = sub_20B4623B0((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B462380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B03A724((uint64_t)&a9);
  sub_20B03A724((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46239C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B03A724((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4623B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_20B462A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B462B00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C405DF0;
  sub_20B3732C4(a1, (uint64_t)&v15);
  v11 = &off_24C405DF0;
  sub_20B3732C4(a2, (uint64_t)&v12);
  v3 = sub_20B462C18((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B462BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B03B400((uint64_t)&a9);
  sub_20B03B400((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B462C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B03B400((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B462C18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B4632B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B463314(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C406068;
  sub_20B3738FC(a1, (uint64_t)&v15);
  v11 = &off_24C406068;
  sub_20B3738FC(a2, (uint64_t)&v12);
  v3 = sub_20B46342C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B4633FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B03C0AC((uint64_t)&a9);
  sub_20B03C0AC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B463418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B03C0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B46342C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20B463BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B463C54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C4062E0;
  sub_20B373F34(a1, (uint64_t)&v15);
  v11 = &off_24C4062E0;
  sub_20B373F34(a2, (uint64_t)&v12);
  v3 = sub_20B463D6C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B463D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B03CEF0((uint64_t)&a9);
  sub_20B03CEF0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B463D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B03CEF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B463D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B464404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B464468(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C406558;
  sub_20B37456C(a1, (uint64_t)&v15);
  v11 = &off_24C406558;
  sub_20B37456C(a2, (uint64_t)&v12);
  v3 = sub_20B464580((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B464550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B03DB9C((uint64_t)&a9);
  sub_20B03DB9C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46456C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B03DB9C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B464580(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_20B464C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B464CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C4067D0;
  sub_20B374BA0(a1, (uint64_t)&v15);
  v11 = &off_24C4067D0;
  sub_20B374BA0(a2, (uint64_t)&v12);
  v3 = sub_20B464DE8((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B464DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B03E888((uint64_t)&a9);
  sub_20B03E888((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B464DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B03E888((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B464DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B465480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B4654E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C406A48;
  sub_20B3751D8(a1, (uint64_t)&v15);
  v11 = &off_24C406A48;
  sub_20B3751D8(a2, (uint64_t)&v12);
  v3 = sub_20B4655FC((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B4655CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B03F6E8((uint64_t)&a9);
  sub_20B03F6E8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B4655E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B03F6E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4655FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20B465DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B465E24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C406CC0;
  sub_20B375810(a1, (uint64_t)&v15);
  v11 = &off_24C406CC0;
  sub_20B375810(a2, (uint64_t)&v12);
  v3 = sub_20B465F3C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B465F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B04052C((uint64_t)&a9);
  sub_20B04052C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B465F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B04052C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B465F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B4665D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B466638(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C406F38;
  sub_20B375E48(a1, (uint64_t)&v15);
  v11 = &off_24C406F38;
  sub_20B375E48(a2, (uint64_t)&v12);
  v3 = sub_20B466750((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B466720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B041384((uint64_t)&a9);
  sub_20B041384((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46673C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B041384((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B466750(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_20B466E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B466EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C4071B0;
  sub_20B37647C(a1, (uint64_t)&v15);
  v11 = &off_24C4071B0;
  sub_20B37647C(a2, (uint64_t)&v12);
  v3 = sub_20B466FB8((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B466F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B0421E8((uint64_t)&a9);
  sub_20B0421E8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B466FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B0421E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B466FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B467650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B4676B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C407428;
  sub_20B376AB4(a1, (uint64_t)&v15);
  v11 = &off_24C407428;
  sub_20B376AB4(a2, (uint64_t)&v12);
  v3 = sub_20B4677CC((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B46779C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B042EF8((uint64_t)&a9);
  sub_20B042EF8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B4677B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B042EF8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4677CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20B467F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B467FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C4076A0;
  sub_20B3770EC(a1, (uint64_t)&v15);
  v11 = &off_24C4076A0;
  sub_20B3770EC(a2, (uint64_t)&v12);
  v3 = sub_20B46810C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B4680DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B043D3C((uint64_t)&a9);
  sub_20B043D3C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B4680F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B043D3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B46810C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B4687A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B468808(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C407918;
  sub_20B377724(a1, (uint64_t)&v15);
  v11 = &off_24C407918;
  sub_20B377724(a2, (uint64_t)&v12);
  v3 = sub_20B468920((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B4688F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B044A4C((uint64_t)&a9);
  sub_20B044A4C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46890C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B044A4C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B468920(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_20B46900C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B469070(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C407B90;
  sub_20B377D58(a1, (uint64_t)&v15);
  v11 = &off_24C407B90;
  sub_20B377D58(a2, (uint64_t)&v12);
  v3 = sub_20B469188((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B469158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B045738((uint64_t)&a9);
  sub_20B045738((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B469174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B045738((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B469188(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B469820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B469884(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C407E08;
  sub_20B378390(a1, (uint64_t)&v15);
  v11 = &off_24C407E08;
  sub_20B378390(a2, (uint64_t)&v12);
  v3 = sub_20B46999C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B46996C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B046448((uint64_t)&a9);
  sub_20B046448((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B469988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B046448((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B46999C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20B46A160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B46A1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C408080;
  sub_20B3789C8(a1, (uint64_t)&v15);
  v11 = &off_24C408080;
  sub_20B3789C8(a2, (uint64_t)&v12);
  v3 = sub_20B46A2DC((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B46A2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B04728C((uint64_t)&a9);
  sub_20B04728C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46A2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B04728C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B46A2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B46A974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B46A9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C4082F8;
  sub_20B2D7B44(a1, (uint64_t)&v15);
  v11 = &off_24C4082F8;
  sub_20B2D7B44(a2, (uint64_t)&v12);
  v3 = sub_20B46AAF0((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B46AAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B047F9C((uint64_t)&a9);
  sub_20B047F9C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46AADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B047F9C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B46AAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_20B46B1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B46B240(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C408570;
  sub_20B379000(a1, (uint64_t)&v15);
  v11 = &off_24C408570;
  sub_20B379000(a2, (uint64_t)&v12);
  v3 = sub_20B46B358((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B46B328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B048E00((uint64_t)&a9);
  sub_20B048E00((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46B344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B048E00((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B46B358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B46B9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B46BA54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C4087E8;
  sub_20B379638(a1, (uint64_t)&v15);
  v11 = &off_24C4087E8;
  sub_20B379638(a2, (uint64_t)&v12);
  v3 = sub_20B46BB6C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B46BB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B049C88((uint64_t)&a9);
  sub_20B049C88((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46BB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B049C88((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B46BB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20B46C330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B46C394(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C408A60;
  sub_20B379C70(a1, (uint64_t)&v15);
  v11 = &off_24C408A60;
  sub_20B379C70(a2, (uint64_t)&v12);
  v3 = sub_20B46C4AC((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B46C47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B04AC44((uint64_t)&a9);
  sub_20B04AC44((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46C498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B04AC44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B46C4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B46CB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B46CBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C408CD8;
  sub_20B37A2A8(a1, (uint64_t)&v15);
  v11 = &off_24C408CD8;
  sub_20B37A2A8(a2, (uint64_t)&v12);
  v3 = sub_20B46CCC0((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B46CC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B04BACC((uint64_t)&a9);
  sub_20B04BACC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46CCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B04BACC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B46CCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_20B46D3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B46D410(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C408F50;
  sub_20B37A8DC(a1, (uint64_t)&v15);
  v11 = &off_24C408F50;
  sub_20B37A8DC(a2, (uint64_t)&v12);
  v3 = sub_20B46D528((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B46D4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B04C930((uint64_t)&a9);
  sub_20B04C930((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46D514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B04C930((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B46D528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B46DBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B46DC24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C4091C8;
  sub_20B37AF14(a1, (uint64_t)&v15);
  v11 = &off_24C4091C8;
  sub_20B37AF14(a2, (uint64_t)&v12);
  v3 = sub_20B46DD3C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B46DD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B04D640((uint64_t)&a9);
  sub_20B04D640((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46DD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B04D640((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B46DD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20B46E500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B46E564(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C409440;
  sub_20B37B54C(a1, (uint64_t)&v15);
  v11 = &off_24C409440;
  sub_20B37B54C(a2, (uint64_t)&v12);
  v3 = sub_20B46E67C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B46E64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B04E484((uint64_t)&a9);
  sub_20B04E484((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46E668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B04E484((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B46E67C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B46ED14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B46ED78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C4096B8;
  sub_20B37BB84(a1, (uint64_t)&v15);
  v11 = &off_24C4096B8;
  sub_20B37BB84(a2, (uint64_t)&v12);
  v3 = sub_20B46EE90((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B46EE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B04F194((uint64_t)&a9);
  sub_20B04F194((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46EE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B04F194((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B46EE90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_20B46F57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B46F5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C409930;
  sub_20B37C1B8(a1, (uint64_t)&v15);
  v11 = &off_24C409930;
  sub_20B37C1B8(a2, (uint64_t)&v12);
  v3 = sub_20B46F6F8((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B46F6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B04FFF8((uint64_t)&a9);
  sub_20B04FFF8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46F6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B04FFF8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B46F6F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B46FD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B46FDF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C409BA8;
  sub_20B37C7F0(a1, (uint64_t)&v15);
  v11 = &off_24C409BA8;
  sub_20B37C7F0(a2, (uint64_t)&v12);
  v3 = sub_20B46FF0C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B46FEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B050E80((uint64_t)&a9);
  sub_20B050E80((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B46FEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B050E80((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B46FF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20B4706D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B470734(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C409E20;
  sub_20B37CE28(a1, (uint64_t)&v15);
  v11 = &off_24C409E20;
  sub_20B37CE28(a2, (uint64_t)&v12);
  v3 = sub_20B47084C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B47081C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B051E3C((uint64_t)&a9);
  sub_20B051E3C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B470838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B051E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B47084C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B470EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B470F48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C40A098;
  sub_20B37D460(a1, (uint64_t)&v15);
  v11 = &off_24C40A098;
  sub_20B37D460(a2, (uint64_t)&v12);
  v3 = sub_20B471060((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B471030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B052CC4((uint64_t)&a9);
  sub_20B052CC4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B47104C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B052CC4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B471060(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_20B47174C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B4717B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C40A310;
  sub_20B37DA94(a1, (uint64_t)&v15);
  v11 = &off_24C40A310;
  sub_20B37DA94(a2, (uint64_t)&v12);
  v3 = sub_20B4718C8((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B471898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B053B28((uint64_t)&a9);
  sub_20B053B28((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B4718B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B053B28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4718C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B471F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B471FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C40A588;
  sub_20B37E0CC(a1, (uint64_t)&v15);
  v11 = &off_24C40A588;
  sub_20B37E0CC(a2, (uint64_t)&v12);
  v3 = sub_20B4720DC((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B4720AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B054838((uint64_t)&a9);
  sub_20B054838((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B4720C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B054838((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4720DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20B4728A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B472904(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C40A800;
  sub_20B37E704(a1, (uint64_t)&v15);
  v11 = &off_24C40A800;
  sub_20B37E704(a2, (uint64_t)&v12);
  v3 = sub_20B472A1C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B4729EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B05567C((uint64_t)&a9);
  sub_20B05567C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B472A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B05567C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B472A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B4730B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B473118(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C40AA78;
  sub_20B37ED3C(a1, (uint64_t)&v15);
  v11 = &off_24C40AA78;
  sub_20B37ED3C(a2, (uint64_t)&v12);
  v3 = sub_20B473230((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B473200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B05638C((uint64_t)&a9);
  sub_20B05638C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B47321C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B05638C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B473230(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_20B47391C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B473980(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C40ACF0;
  sub_20B37F370(a1, (uint64_t)&v15);
  v11 = &off_24C40ACF0;
  sub_20B37F370(a2, (uint64_t)&v12);
  v3 = sub_20B473A98((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B473A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B0571F0((uint64_t)&a9);
  sub_20B0571F0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B473A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B0571F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B473A98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B474130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B474194(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C40AF68;
  sub_20B37F9A8(a1, (uint64_t)&v15);
  v11 = &off_24C40AF68;
  sub_20B37F9A8(a2, (uint64_t)&v12);
  v3 = sub_20B4742AC((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B47427C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B058078((uint64_t)&a9);
  sub_20B058078((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B474298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B058078((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4742AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20B474A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B474AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C40B1E0;
  sub_20B37FFE0(a1, (uint64_t)&v15);
  v11 = &off_24C40B1E0;
  sub_20B37FFE0(a2, (uint64_t)&v12);
  v3 = sub_20B474BEC((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20B474BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B059034((uint64_t)&a9);
  sub_20B059034((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B474BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B059034((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B474BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20B475284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

#error "20B4752E8: too big function (funcsize=0)"

void sub_20B4880C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;

  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    if (!a14)
      goto LABEL_9;
  }
  else if (!a14)
  {
    goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&a14->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
LABEL_9:
  if (a27)
  {
    v39 = (unint64_t *)&a27->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))a27->__on_zero_shared)(a27);
      std::__shared_weak_count::__release_weak(a27);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B48A804(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2ED6B0();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48A87C(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2EDE20();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48A8F4(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2EE414();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48A96C(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2EEA08();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48A9E4(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2EF174();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48AA5C(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2EF8E4();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48AAD4(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2F0054();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48AB4C(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2F07C4();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48ABC4(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2F0F30();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48AC3C(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2F16A0();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48ACB4(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2F1E10();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48AD2C(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2F2580();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48ADA4(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2F2B74();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48AE1C(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2F32E4();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48AE94(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2F3A54();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48AF0C(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2F41C4();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48AF84(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2F68C4();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48AFFC(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2F7034();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48B074(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2F77A4();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48B0EC(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2F9FE4();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48B164(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2FA754();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

uint64_t sub_20B48B1DC(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_20B2FAEC4();
  v4 = sub_20B2D8728();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_20AF864AC("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

void sub_20B48B254(int a1)
{
  __asm { BR              X10 }
}

void sub_20B48B288(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  _BYTE v40[24];
  uint64_t v41;
  __int128 v42;
  __int16 v43;

  v4 = **a2;
  v5 = (std::__shared_weak_count *)(*a2)[1];
  v36 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a2[1];
  if (v4)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, 1, *v8);
    v10 = *(_QWORD *)(v3 - 64);
    *(_QWORD *)(v3 - 64) = 0;
    *(_QWORD *)(v3 - 56) = v10;
    if (v10)
    {
      v11 = (std::__shared_weak_count *)operator new();
      v11->__shared_owners_ = 0;
      v12 = (unint64_t *)&v11->__shared_owners_;
      v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v11->__shared_weak_owners_ = 0;
      v11[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
      *(_QWORD *)(v3 - 48) = v11;
      v37 = v10;
      v38 = v11;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    else
    {
      v11 = 0;
      *(_QWORD *)(v3 - 48) = 0;
      v37 = 0;
      v38 = 0;
    }
    v39 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 64))(v10, 1);
    v14 = *(_QWORD *)(v3 - 40);
    v15 = *(_QWORD *)(v14 + 16);
    *(_OWORD *)v40 = *(_OWORD *)v14;
    *(_QWORD *)&v40[16] = v15;
    *(_QWORD *)(v3 - 40) = 0;
    MEMORY[0x20BD3583C]();
    v41 = *(_QWORD *)v40;
    v42 = *(_OWORD *)&v40[8];
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
    v17 = v16;
    if ((v16 & 0xFFFFFF) <= 0x10000)
      v17 = 0;
    v18 = v16 & 0xFF00;
    if ((v16 & 0xFF0000) == 0)
      v18 = 0;
    v43 = v18 & 0xFF00 | v17;
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v21 = *(_QWORD *)(v3 - 64);
    *(_QWORD *)(v3 - 64) = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  else
  {
    sub_20B2D1BE4(v8, &v37);
  }
  *(_QWORD *)v2 = &off_24C3FF020;
  v22 = v37;
  v23 = v38;
  if (v38)
  {
    v24 = (unint64_t *)&v38->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v26 = v38;
  }
  else
  {
    v26 = 0;
  }
  v27 = HIDWORD(v42);
  if (BYTE4(v39))
    v28 = v39 | 0x100000000;
  else
    v28 = 0;
  v29 = v42;
  v30 = *(_QWORD *)v40;
  v31 = v43;
  *(_QWORD *)(v2 + 8) = v22;
  *(_QWORD *)(v2 + 16) = v23;
  *(_QWORD *)(v2 + 24) = v28;
  *(_QWORD *)(v2 + 32) = v29;
  *(_DWORD *)(v2 + 40) = v27;
  *(_QWORD *)(v2 + 48) = v30;
  *(_DWORD *)(v2 + 56) = 1;
  *(_WORD *)(v2 + 60) = v31;
  if (v26)
  {
    v32 = (unint64_t *)&v26->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v36)
  {
    v34 = (unint64_t *)&v36->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_20B491A50()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B491A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v5 = *(_QWORD *)(v3 - 64);
  *(_QWORD *)(v3 - 64) = 0;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    sub_20AEC147C((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B491F40(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24C405AF0;
  sub_20B4B3430(a2, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C3FCE50;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C405B28;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 5);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a1 + 3) = *v14;
  *(_OWORD *)(a1 + 5) = v8;
  *(_OWORD *)(a1 + 7) = v7;
  v14 = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v9 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a1 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_20B492130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20AEC147C(v10);
  sub_20AEC147C((uint64_t)&a10);
  sub_20B03B030(&a9);
  _Unwind_Resume(a1);
}

void sub_20B492164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B03B030(&a9);
  _Unwind_Resume(a1);
}

void sub_20B492178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

void sub_20B492190(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  sub_20B4C9914((uint64_t)v23, a2);
  v19 = v23[0];
  v20 = v23[1];
  v21 = v23[2];
  v3 = v25;
  v22 = v24;
  v4 = v26;
  v5 = v27;
  v17 = v28;
  v18 = v29;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = v19;
  *(_QWORD *)v6 = &off_24C3FCED0;
  *(_OWORD *)(v6 + 24) = v20;
  *(_OWORD *)(v6 + 40) = v21;
  *(_QWORD *)(v6 + 56) = v22;
  *(_QWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_OWORD *)(v6 + 88) = v17;
  *(_QWORD *)(v6 + 104) = v18;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C405DA0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v23, v6, 6);
  v11 = *(_OWORD *)(*(_QWORD *)&v23[0] + 16);
  v10 = *(_OWORD *)(*(_QWORD *)&v23[0] + 32);
  *(_OWORD *)(a1 + 3) = **(_OWORD **)&v23[0];
  *(_OWORD *)(a1 + 5) = v11;
  *(_OWORD *)(a1 + 7) = v10;
  *(_QWORD *)&v23[0] = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v12 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *((_WORD *)a1 + 60) = v15 & 0xFF00 | v14;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20B49239C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va1);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B4923D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B4923E4(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_20B492400(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24C405FE0;
  sub_20B4B3C0C(a2, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C3FCF50;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C406018;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 7);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a1 + 3) = *v14;
  *(_OWORD *)(a1 + 5) = v8;
  *(_OWORD *)(a1 + 7) = v7;
  v14 = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v9 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a1 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_20B492688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20AEC147C(v10);
  sub_20AEC147C((uint64_t)&a10);
  sub_20B03CA34(&a9);
  _Unwind_Resume(a1);
}

void sub_20B4926BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B03CA34(&a9);
  _Unwind_Resume(a1);
}

void sub_20B4926D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B4A1250((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4926E4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  sub_20B4C9AD0((uint64_t)v23, a2);
  v19 = v23[0];
  v20 = v23[1];
  v21 = v23[2];
  v3 = v25;
  v22 = v24;
  v4 = v26;
  v5 = v27;
  v17 = v28;
  v18 = v29;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = v19;
  *(_QWORD *)v6 = &off_24C3FCFD0;
  *(_OWORD *)(v6 + 24) = v20;
  *(_OWORD *)(v6 + 40) = v21;
  *(_QWORD *)(v6 + 56) = v22;
  *(_QWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_OWORD *)(v6 + 88) = v17;
  *(_QWORD *)(v6 + 104) = v18;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C406290;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v23, v6, 8);
  v11 = *(_OWORD *)(*(_QWORD *)&v23[0] + 16);
  v10 = *(_OWORD *)(*(_QWORD *)&v23[0] + 32);
  *(_OWORD *)(a1 + 3) = **(_OWORD **)&v23[0];
  *(_OWORD *)(a1 + 5) = v11;
  *(_OWORD *)(a1 + 7) = v10;
  *(_QWORD *)&v23[0] = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v12 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *((_WORD *)a1 + 60) = v15 & 0xFF00 | v14;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20B4928F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va1);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B492924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B492938(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_20B492954(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24C4064D0;
  sub_20B4B43E4(a2, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C3FD050;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C406508;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 9);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a1 + 3) = *v14;
  *(_OWORD *)(a1 + 5) = v8;
  *(_OWORD *)(a1 + 7) = v7;
  v14 = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v9 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a1 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_20B492B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20AEC147C(v10);
  sub_20AEC147C((uint64_t)&a10);
  sub_20B03B030(&a9);
  _Unwind_Resume(a1);
}

void sub_20B492B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B03B030(&a9);
  _Unwind_Resume(a1);
}

void sub_20B492B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

void sub_20B492BA4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  sub_20B4C9C90((uint64_t)v23, a2);
  v19 = v23[0];
  v20 = v23[1];
  v21 = v23[2];
  v3 = v25;
  v22 = v24;
  v4 = v26;
  v5 = v27;
  v17 = v28;
  v18 = v29;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = v19;
  *(_QWORD *)v6 = &off_24C3FD0D0;
  *(_OWORD *)(v6 + 24) = v20;
  *(_OWORD *)(v6 + 40) = v21;
  *(_QWORD *)(v6 + 56) = v22;
  *(_QWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_OWORD *)(v6 + 88) = v17;
  *(_QWORD *)(v6 + 104) = v18;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C406780;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v23, v6, 10);
  v11 = *(_OWORD *)(*(_QWORD *)&v23[0] + 16);
  v10 = *(_OWORD *)(*(_QWORD *)&v23[0] + 32);
  *(_OWORD *)(a1 + 3) = **(_OWORD **)&v23[0];
  *(_OWORD *)(a1 + 5) = v11;
  *(_OWORD *)(a1 + 7) = v10;
  *(_QWORD *)&v23[0] = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v12 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *((_WORD *)a1 + 60) = v15 & 0xFF00 | v14;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20B492DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va1);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B492DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B492DF8(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_20B492E14(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24C4069C0;
  sub_20B4B4BB4(a2, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C3FD150;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4069F8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 11);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a1 + 3) = *v14;
  *(_OWORD *)(a1 + 5) = v8;
  *(_OWORD *)(a1 + 7) = v7;
  v14 = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v9 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a1 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_20B49309C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20AEC147C(v10);
  sub_20AEC147C((uint64_t)&a10);
  sub_20B040070(&a9);
  _Unwind_Resume(a1);
}

void sub_20B4930D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B040070(&a9);
  _Unwind_Resume(a1);
}

void sub_20B4930E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B4A3408((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4930F8(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  sub_20B4C9E44((uint64_t)v23, a2);
  v19 = v23[0];
  v20 = v23[1];
  v21 = v23[2];
  v3 = v25;
  v22 = v24;
  v4 = v26;
  v5 = v27;
  v17 = v28;
  v18 = v29;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = v19;
  *(_QWORD *)v6 = &off_24C3FD1D0;
  *(_OWORD *)(v6 + 24) = v20;
  *(_OWORD *)(v6 + 40) = v21;
  *(_QWORD *)(v6 + 56) = v22;
  *(_QWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_OWORD *)(v6 + 88) = v17;
  *(_QWORD *)(v6 + 104) = v18;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C406C70;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v23, v6, 12);
  v11 = *(_OWORD *)(*(_QWORD *)&v23[0] + 16);
  v10 = *(_OWORD *)(*(_QWORD *)&v23[0] + 32);
  *(_OWORD *)(a1 + 3) = **(_OWORD **)&v23[0];
  *(_OWORD *)(a1 + 5) = v11;
  *(_OWORD *)(a1 + 7) = v10;
  *(_QWORD *)&v23[0] = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v12 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *((_WORD *)a1 + 60) = v15 & 0xFF00 | v14;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20B493304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va1);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B493338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49334C(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_20B493368(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24C406EB0;
  sub_20B4B5384(a2, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C3FD250;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C406EE8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 13);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a1 + 3) = *v14;
  *(_OWORD *)(a1 + 5) = v8;
  *(_OWORD *)(a1 + 7) = v7;
  v14 = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v9 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a1 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_20B493558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20AEC147C(v10);
  sub_20AEC147C((uint64_t)&a10);
  sub_20B03B030(&a9);
  _Unwind_Resume(a1);
}

void sub_20B49358C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B03B030(&a9);
  _Unwind_Resume(a1);
}

void sub_20B4935A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

void sub_20B4935B8(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  sub_20B4C9FF8((uint64_t)v23, a2);
  v19 = v23[0];
  v20 = v23[1];
  v21 = v23[2];
  v3 = v25;
  v22 = v24;
  v4 = v26;
  v5 = v27;
  v17 = v28;
  v18 = v29;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = v19;
  *(_QWORD *)v6 = &off_24C3FD2D0;
  *(_OWORD *)(v6 + 24) = v20;
  *(_OWORD *)(v6 + 40) = v21;
  *(_QWORD *)(v6 + 56) = v22;
  *(_QWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_OWORD *)(v6 + 88) = v17;
  *(_QWORD *)(v6 + 104) = v18;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C407160;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v23, v6, 14);
  v11 = *(_OWORD *)(*(_QWORD *)&v23[0] + 16);
  v10 = *(_OWORD *)(*(_QWORD *)&v23[0] + 32);
  *(_OWORD *)(a1 + 3) = **(_OWORD **)&v23[0];
  *(_OWORD *)(a1 + 5) = v11;
  *(_OWORD *)(a1 + 7) = v10;
  *(_QWORD *)&v23[0] = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v12 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *((_WORD *)a1 + 60) = v15 & 0xFF00 | v14;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20B4937C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va1);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B4937F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49380C(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_20B493828(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24C4073A0;
  sub_20B4B5B6C(a2, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C3FD350;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4073D8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 15);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a1 + 3) = *v14;
  *(_OWORD *)(a1 + 5) = v8;
  *(_OWORD *)(a1 + 7) = v7;
  v14 = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v9 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a1 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_20B493AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20AEC147C(v10);
  sub_20AEC147C((uint64_t)&a10);
  sub_20B043880(&a9);
  _Unwind_Resume(a1);
}

void sub_20B493AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B043880(&a9);
  _Unwind_Resume(a1);
}

void sub_20B493AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B4A5528((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B493B0C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  sub_20B4CA1B4((uint64_t)v23, a2);
  v19 = v23[0];
  v20 = v23[1];
  v21 = v23[2];
  v3 = v25;
  v22 = v24;
  v4 = v26;
  v5 = v27;
  v17 = v28;
  v18 = v29;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = v19;
  *(_QWORD *)v6 = &off_24C3FD3D0;
  *(_OWORD *)(v6 + 24) = v20;
  *(_OWORD *)(v6 + 40) = v21;
  *(_QWORD *)(v6 + 56) = v22;
  *(_QWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_OWORD *)(v6 + 88) = v17;
  *(_QWORD *)(v6 + 104) = v18;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C407650;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v23, v6, 16);
  v11 = *(_OWORD *)(*(_QWORD *)&v23[0] + 16);
  v10 = *(_OWORD *)(*(_QWORD *)&v23[0] + 32);
  *(_OWORD *)(a1 + 3) = **(_OWORD **)&v23[0];
  *(_OWORD *)(a1 + 5) = v11;
  *(_OWORD *)(a1 + 7) = v10;
  *(_QWORD *)&v23[0] = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v12 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *((_WORD *)a1 + 60) = v15 & 0xFF00 | v14;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20B493D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va1);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B493D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B493D60(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_20B493D7C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24C407890;
  sub_20B4B6344(a2, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C3FD450;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4078C8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 17);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a1 + 3) = *v14;
  *(_OWORD *)(a1 + 5) = v8;
  *(_OWORD *)(a1 + 7) = v7;
  v14 = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v9 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a1 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_20B493F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20AEC147C(v10);
  sub_20AEC147C((uint64_t)&a10);
  sub_20B03B030(&a9);
  _Unwind_Resume(a1);
}

void sub_20B493FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B03B030(&a9);
  _Unwind_Resume(a1);
}

void sub_20B493FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

void sub_20B493FCC(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  sub_20B4C9C90((uint64_t)v23, a2);
  v19 = v23[0];
  v20 = v23[1];
  v21 = v23[2];
  v3 = v25;
  v22 = v24;
  v4 = v26;
  v5 = v27;
  v17 = v28;
  v18 = v29;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = v19;
  *(_QWORD *)v6 = &off_24C3FD4D0;
  *(_OWORD *)(v6 + 24) = v20;
  *(_OWORD *)(v6 + 40) = v21;
  *(_QWORD *)(v6 + 56) = v22;
  *(_QWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_OWORD *)(v6 + 88) = v17;
  *(_QWORD *)(v6 + 104) = v18;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C407B40;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v23, v6, 18);
  v11 = *(_OWORD *)(*(_QWORD *)&v23[0] + 16);
  v10 = *(_OWORD *)(*(_QWORD *)&v23[0] + 32);
  *(_OWORD *)(a1 + 3) = **(_OWORD **)&v23[0];
  *(_OWORD *)(a1 + 5) = v11;
  *(_OWORD *)(a1 + 7) = v10;
  *(_QWORD *)&v23[0] = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v12 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *((_WORD *)a1 + 60) = v15 & 0xFF00 | v14;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20B4941D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va1);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49420C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B494220(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_20B49423C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24C407D80;
  sub_20B4B6B14(a2, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C3FD550;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C407DB8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 19);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a1 + 3) = *v14;
  *(_OWORD *)(a1 + 5) = v8;
  *(_OWORD *)(a1 + 7) = v7;
  v14 = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v9 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a1 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_20B4944C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20AEC147C(v10);
  sub_20AEC147C((uint64_t)&a10);
  sub_20B046DD0(&a9);
  _Unwind_Resume(a1);
}

void sub_20B4944F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B046DD0(&a9);
  _Unwind_Resume(a1);
}

void sub_20B49450C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B4A772C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B494520(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  sub_20B4C9E44((uint64_t)v23, a2);
  v19 = v23[0];
  v20 = v23[1];
  v21 = v23[2];
  v3 = v25;
  v22 = v24;
  v4 = v26;
  v5 = v27;
  v17 = v28;
  v18 = v29;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = v19;
  *(_QWORD *)v6 = &off_24C3FD5D0;
  *(_OWORD *)(v6 + 24) = v20;
  *(_OWORD *)(v6 + 40) = v21;
  *(_QWORD *)(v6 + 56) = v22;
  *(_QWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_OWORD *)(v6 + 88) = v17;
  *(_QWORD *)(v6 + 104) = v18;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C408030;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v23, v6, 20);
  v11 = *(_OWORD *)(*(_QWORD *)&v23[0] + 16);
  v10 = *(_OWORD *)(*(_QWORD *)&v23[0] + 32);
  *(_OWORD *)(a1 + 3) = **(_OWORD **)&v23[0];
  *(_OWORD *)(a1 + 5) = v11;
  *(_OWORD *)(a1 + 7) = v10;
  *(_QWORD *)&v23[0] = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v12 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *((_WORD *)a1 + 60) = v15 & 0xFF00 | v14;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20B49472C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va1);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B494760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B494774(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_20B494790(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  sub_20B4C9FF8((uint64_t)v23, a2);
  v19 = v23[0];
  v20 = v23[1];
  v21 = v23[2];
  v3 = v25;
  v22 = v24;
  v4 = v26;
  v5 = v27;
  v17 = v28;
  v18 = v29;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = v19;
  *(_QWORD *)v6 = &off_24C3FD8D0;
  *(_OWORD *)(v6 + 24) = v20;
  *(_OWORD *)(v6 + 40) = v21;
  *(_QWORD *)(v6 + 56) = v22;
  *(_QWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_OWORD *)(v6 + 88) = v17;
  *(_QWORD *)(v6 + 104) = v18;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C408F00;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v23, v6, 26);
  v11 = *(_OWORD *)(*(_QWORD *)&v23[0] + 16);
  v10 = *(_OWORD *)(*(_QWORD *)&v23[0] + 32);
  *(_OWORD *)(a1 + 3) = **(_OWORD **)&v23[0];
  *(_OWORD *)(a1 + 5) = v11;
  *(_OWORD *)(a1 + 7) = v10;
  *(_QWORD *)&v23[0] = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v12 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *((_WORD *)a1 + 60) = v15 & 0xFF00 | v14;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20B49499C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va1);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B4949D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B4949E4(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_20B494A00(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24C409140;
  sub_20B4B8A64(a2, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C3FD950;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C409178;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 27);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a1 + 3) = *v14;
  *(_OWORD *)(a1 + 5) = v8;
  *(_OWORD *)(a1 + 7) = v7;
  v14 = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v9 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a1 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_20B494C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20AEC147C(v10);
  sub_20AEC147C((uint64_t)&a10);
  sub_20B04DFC8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B494CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B04DFC8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B494CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B4ABB5C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B494CE4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  sub_20B4CA1B4((uint64_t)v23, a2);
  v19 = v23[0];
  v20 = v23[1];
  v21 = v23[2];
  v3 = v25;
  v22 = v24;
  v4 = v26;
  v5 = v27;
  v17 = v28;
  v18 = v29;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = v19;
  *(_QWORD *)v6 = &off_24C3FD9D0;
  *(_OWORD *)(v6 + 24) = v20;
  *(_OWORD *)(v6 + 40) = v21;
  *(_QWORD *)(v6 + 56) = v22;
  *(_QWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_OWORD *)(v6 + 88) = v17;
  *(_QWORD *)(v6 + 104) = v18;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4093F0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v23, v6, 28);
  v11 = *(_OWORD *)(*(_QWORD *)&v23[0] + 16);
  v10 = *(_OWORD *)(*(_QWORD *)&v23[0] + 32);
  *(_OWORD *)(a1 + 3) = **(_OWORD **)&v23[0];
  *(_OWORD *)(a1 + 5) = v11;
  *(_OWORD *)(a1 + 7) = v10;
  *(_QWORD *)&v23[0] = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v12 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *((_WORD *)a1 + 60) = v15 & 0xFF00 | v14;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20B494EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va1);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B494F24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B494F38(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_20B494F54(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  sub_20B4C9FF8((uint64_t)v23, a2);
  v19 = v23[0];
  v20 = v23[1];
  v21 = v23[2];
  v3 = v25;
  v22 = v24;
  v4 = v26;
  v5 = v27;
  v17 = v28;
  v18 = v29;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = v19;
  *(_QWORD *)v6 = &off_24C3FDCD0;
  *(_OWORD *)(v6 + 24) = v20;
  *(_OWORD *)(v6 + 40) = v21;
  *(_QWORD *)(v6 + 56) = v22;
  *(_QWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_OWORD *)(v6 + 88) = v17;
  *(_QWORD *)(v6 + 104) = v18;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40A2C0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v23, v6, 34);
  v11 = *(_OWORD *)(*(_QWORD *)&v23[0] + 16);
  v10 = *(_OWORD *)(*(_QWORD *)&v23[0] + 32);
  *(_OWORD *)(a1 + 3) = **(_OWORD **)&v23[0];
  *(_OWORD *)(a1 + 5) = v11;
  *(_OWORD *)(a1 + 7) = v10;
  *(_QWORD *)&v23[0] = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v12 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *((_WORD *)a1 + 60) = v15 & 0xFF00 | v14;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20B495160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va1);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B495194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B4951A8(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_20B4951C4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24C40A500;
  sub_20B4BA9F4(a2, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C3FDD50;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40A538;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 35);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a1 + 3) = *v14;
  *(_OWORD *)(a1 + 5) = v8;
  *(_OWORD *)(a1 + 7) = v7;
  v14 = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v9 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a1 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_20B49544C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20AEC147C(v10);
  sub_20AEC147C((uint64_t)&a10);
  sub_20B0551C0(&a9);
  _Unwind_Resume(a1);
}

void sub_20B495480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0551C0(&a9);
  _Unwind_Resume(a1);
}

void sub_20B495494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B4AFB84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4954A8(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  sub_20B4CA1B4((uint64_t)v23, a2);
  v19 = v23[0];
  v20 = v23[1];
  v21 = v23[2];
  v3 = v25;
  v22 = v24;
  v4 = v26;
  v5 = v27;
  v17 = v28;
  v18 = v29;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = v19;
  *(_QWORD *)v6 = &off_24C3FDDD0;
  *(_OWORD *)(v6 + 24) = v20;
  *(_OWORD *)(v6 + 40) = v21;
  *(_QWORD *)(v6 + 56) = v22;
  *(_QWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_OWORD *)(v6 + 88) = v17;
  *(_QWORD *)(v6 + 104) = v18;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40A7B0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v23, v6, 36);
  v11 = *(_OWORD *)(*(_QWORD *)&v23[0] + 16);
  v10 = *(_OWORD *)(*(_QWORD *)&v23[0] + 32);
  *(_OWORD *)(a1 + 3) = **(_OWORD **)&v23[0];
  *(_OWORD *)(a1 + 5) = v11;
  *(_OWORD *)(a1 + 7) = v10;
  *(_QWORD *)&v23[0] = 0;
  MEMORY[0x20BD3583C]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v12 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *((_WORD *)a1 + 60) = v15 & 0xFF00 | v14;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20B4956B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va1);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B4956E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B4956FC(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_20B495718(int a1)
{
  __asm { BR              X10 }
}

void sub_20B495758(uint64_t a1, _DWORD **a2)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL8 v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  __int16 v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  unint64_t *v37;
  unint64_t v38;
  _BYTE v39[28];
  char v40;
  uint64_t v41;
  __int128 v42;
  unint64_t v43;
  void *v44[2];
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int16 v53;

  v5 = *a2;
  v40 = 0;
  v44[1] = &off_24C405088;
  if (v5[1])
    v6 = *v5 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)v5;
  if (v6)
    v7 = 0;
  v8 = v7 << 32;
  if (!HIDWORD(v7))
    v8 = 0;
  v9 = v7 != 0;
  if ((_DWORD)v7)
    v10 = HIDWORD(v7) == 0;
  else
    v10 = 1;
  *(_QWORD *)(v4 - 176) = v7;
  *(_QWORD *)(v4 - 168) = v8 | v9;
  *(_BYTE *)(v4 - 160) = 0;
  *(_BYTE *)(v4 - 152) = 0;
  if (v10)
    v7 = 0;
  v43 = v7;
  v44[0] = (void *)(v8 | v9);
  if ((HIDWORD(v8) & (HIDWORD(v8) - 1)) != 0)
    v11 = 1;
  else
    v11 = HIDWORD(v8);
  sub_20B4C20F0((size_t *)(v4 - 144), &v43, v44, 1, (void **)&v40, 1, v11);
  *(_OWORD *)v39 = *(_OWORD *)(v4 - 176);
  *(_OWORD *)&v39[12] = *(_OWORD *)((char *)v3 + 148);
  v13 = *(_QWORD *)(v4 - 144);
  v12 = *(_QWORD *)(v4 - 136);
  v14 = *(_QWORD *)(v4 - 128);
  v42 = v3[12];
  v15 = operator new();
  *(_QWORD *)v15 = &off_24C3FCC50;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)v39;
  *(_OWORD *)(v15 + 20) = *(_OWORD *)&v39[12];
  *(_QWORD *)(v15 + 40) = v13;
  *(_QWORD *)(v15 + 48) = v12;
  *(_QWORD *)(v15 + 56) = v14;
  *(_OWORD *)(v15 + 64) = v42;
  v41 = v15;
  *(_QWORD *)(v4 - 176) = v15;
  v16 = (std::__shared_weak_count *)operator new();
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_24C405180;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  *(_QWORD *)(v4 - 168) = v16;
  v41 = 0;
  v45 = v15;
  v46 = v16;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
  v47 = 0;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v15 + 64))(v39, v15, 1);
  v19 = *(_QWORD *)v39;
  v20 = *(_QWORD *)(*(_QWORD *)v39 + 16);
  v3[2] = **(_OWORD **)v39;
  v49 = v20;
  *(_QWORD *)v39 = 0;
  MEMORY[0x20BD3583C](v19);
  v50 = v48;
  v3[4] = *(_OWORD *)((char *)v3 + 40);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 104))(v15);
  v22 = v21;
  if ((v21 & 0xFFFFFF) <= 0x10000)
    v22 = 0;
  v23 = v21 & 0xFF00;
  if ((v21 & 0xFF0000) == 0)
    v23 = 0;
  v53 = v23 & 0xFF00 | v22;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  v25 = v41;
  if (v41)
  {
    v26 = *(void **)(v41 + 48);
    if (v26)
      free(v26);
    *(_QWORD *)(v25 + 48) = 0;
    MEMORY[0x20BD3583C](v25, 0x1091C406A8758A4);
  }
  *(_QWORD *)v2 = &off_24C3FF020;
  v27 = v45;
  v28 = v46;
  if (v46)
  {
    v29 = (unint64_t *)&v46->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    v31 = v46;
  }
  else
  {
    v31 = 0;
  }
  v32 = v52;
  if (BYTE4(v47))
    v33 = v47 | 0x100000000;
  else
    v33 = 0;
  v34 = v51;
  v35 = v48;
  v36 = v53;
  *(_QWORD *)(v2 + 8) = v27;
  *(_QWORD *)(v2 + 16) = v28;
  *(_QWORD *)(v2 + 24) = v33;
  *(_QWORD *)(v2 + 32) = v34;
  *(_DWORD *)(v2 + 40) = v32;
  *(_QWORD *)(v2 + 48) = v35;
  *(_DWORD *)(v2 + 56) = 1;
  *(_WORD *)(v2 + 60) = v36;
  if (v31)
  {
    v37 = (unint64_t *)&v31->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B49C0D0()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B49C17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B04A788((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B043880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B040070((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v13;
  va_list va;

  va_start(va, a12);
  sub_20AEC147C(v12);
  sub_20AEC147C(v13 - 176);
  sub_20B037888((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  va_list va;

  va_start(va, a16);
  sub_20AEC147C(v16);
  sub_20AEC147C(v17 - 176);
  sub_20B039518((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v13;
  va_list va;

  va_start(va, a12);
  sub_20AEC147C(v12);
  sub_20AEC147C(v13 - 176);
  sub_20B037888((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B0551C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v13;
  va_list va;

  va_start(va, a12);
  sub_20AEC147C(v12);
  sub_20AEC147C(v13 - 176);
  sub_20B037888((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B051980((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B058B78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03CA34((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B046DD0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B04DFC8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B04A788((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B043880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B040070((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v13;
  va_list va;

  va_start(va, a12);
  sub_20AEC147C(v12);
  sub_20AEC147C(v13 - 176);
  sub_20B037888((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  va_list va;

  va_start(va, a16);
  sub_20AEC147C(v16);
  sub_20AEC147C(v17 - 176);
  sub_20B039518((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v13;
  va_list va;

  va_start(va, a12);
  sub_20AEC147C(v12);
  sub_20AEC147C(v13 - 176);
  sub_20B037888((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49C9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B0551C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v13;
  va_list va;

  va_start(va, a12);
  sub_20AEC147C(v12);
  sub_20AEC147C(v13 - 176);
  sub_20B037888((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B051980((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B058B78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03CA34((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B046DD0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_20AEC147C(v13);
  sub_20AEC147C(v14 - 176);
  sub_20B04DFC8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B04A788((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B043880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B040070((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20B037888((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_20B039518((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20B037888((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B0551C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20B037888((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B051980((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B058B78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03CA34((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B046DD0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B04DFC8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B49CFDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 104);
  if (v3)
    free(v3);
  _Unwind_Resume(exception_object);
}

void sub_20B49D114(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B4A772C(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_20B49D128(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B4ABB5C(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_20B49D13C(int a1)
{
  __asm { BR              X10 }
}

void sub_20B49D16C(uint64_t a1, _DWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;

  sub_20B2D1BE4(*a2, &v15);
  *(_QWORD *)v2 = &off_24C3FF020;
  v3 = v15;
  v4 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v16;
  }
  else
  {
    v7 = 0;
  }
  v8 = v21;
  if (v18)
    v9 = v17 | 0x100000000;
  else
    v9 = 0;
  v10 = v20;
  v11 = v19;
  v12 = v22;
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)(v2 + 24) = v9;
  *(_QWORD *)(v2 + 32) = v10;
  *(_DWORD *)(v2 + 40) = v8;
  *(_QWORD *)(v2 + 48) = v11;
  *(_DWORD *)(v2 + 56) = 1;
  *(_WORD *)(v2 + 60) = v12;
  if (v7)
  {
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20B49EDBC()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B49EDF0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_20B49EE4C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_20B49EE7C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 48) = 0;
  JUMPOUT(0x20BD3583CLL);
}

_UNKNOWN **sub_20B49EEBC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B49EF10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FCC50;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 20) = *(_OWORD *)(a1 + 20);
  result = sub_20AFC3C68(v4 + 40, a1 + 40);
  *a2 = v4;
  return result;
}

void sub_20B49EF80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

void sub_20B49EFA4(uint64_t a1, void *lpsrc)
{
  char *v4;
  _OWORD *v5;
  __int128 *v6;
  __int128 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  size_t v17[2];
  _BYTE v18[28];
  _QWORD v19[3];
  __int128 v20;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE040, 0);
  if (v4)
  {
    v5 = (_OWORD *)(a1 + 8);
    v6 = (__int128 *)(v4 + 8);
    if (*(_QWORD *)(a1 + 48)
      && *(_DWORD *)v6 == *(_DWORD *)v5
      && *((_DWORD *)v4 + 3) == *(_DWORD *)(a1 + 12)
      && *((_DWORD *)v4 + 4) == *(_DWORD *)(a1 + 16)
      && *((_DWORD *)v4 + 5) == *(_DWORD *)(a1 + 20))
    {
      *(_QWORD *)v18 = v4 + 8;
      *(_QWORD *)&v18[8] = a1 + 8;
      sub_20AFE4300((size_t *)v18);
    }
    else
    {
      v7 = *v6;
      *(_OWORD *)&v18[12] = *(_OWORD *)(v4 + 20);
      *(_OWORD *)v18 = v7;
      sub_20AFC3C68((uint64_t)v19, (uint64_t)(v4 + 40));
      *v5 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 20) = *(_OWORD *)&v18[12];
      *(_OWORD *)(a1 + 64) = v20;
      *(_QWORD *)(a1 + 40) = v19[0];
      v8 = *(void **)(a1 + 48);
      if (v8)
        free(v8);
      v9 = v19[2];
      *(_QWORD *)(a1 + 48) = v19[1];
      *(_QWORD *)(a1 + 56) = v9;
    }
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v16, lpsrc, 1);
    v10 = *(_QWORD *)(v16[0] + 16);
    *(_OWORD *)v18 = *(_OWORD *)v16[0];
    *(_QWORD *)&v18[16] = v10;
    v16[0] = 0;
    MEMORY[0x20BD3583C]();
    v11 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12))
      v12 = *(_DWORD *)(a1 + 8) == 0;
    else
      v12 = 1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v12)
      v15 = 0;
    else
      v15 = v13;
    if (HIDWORD(v15) * HIDWORD(v14) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v16[0] = v11;
    v16[1] = v15;
    v16[2] = v14;
    v17[0] = (size_t)v18;
    v17[1] = (size_t)v16;
    sub_20AFC3DF8(v17);
  }
}

uint64_t sub_20B49F190(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *sub_20B49F198@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20B49F284@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B49F370(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_20B49F3A0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 48) = 0;
  JUMPOUT(0x20BD3583CLL);
}

_UNKNOWN **sub_20B49F3E0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B49F434@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FCCD0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 20) = *(_OWORD *)(a1 + 20);
  result = sub_20AFC4744(v4 + 40, a1 + 40);
  *a2 = v4;
  return result;
}

void sub_20B49F4A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

void sub_20B49F4C8(uint64_t a1, void *lpsrc)
{
  char *v4;
  _OWORD *v5;
  __int128 *v6;
  __int128 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _BYTE v17[28];
  _QWORD v18[3];
  __int128 v19;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE058, 0);
  if (v4)
  {
    v5 = (_OWORD *)(a1 + 8);
    v6 = (__int128 *)(v4 + 8);
    if (*(_QWORD *)(a1 + 48)
      && *(_DWORD *)v6 == *(_DWORD *)v5
      && *((_DWORD *)v4 + 3) == *(_DWORD *)(a1 + 12)
      && *((_DWORD *)v4 + 4) == *(_DWORD *)(a1 + 16)
      && *((_DWORD *)v4 + 5) == *(_DWORD *)(a1 + 20))
    {
      sub_20AFE480C((uint64_t)(v4 + 8), a1 + 8);
    }
    else
    {
      v7 = *v6;
      *(_OWORD *)&v17[12] = *(_OWORD *)(v4 + 20);
      *(_OWORD *)v17 = v7;
      sub_20AFC4744((uint64_t)v18, (uint64_t)(v4 + 40));
      *v5 = *(_OWORD *)v17;
      *(_OWORD *)(a1 + 20) = *(_OWORD *)&v17[12];
      *(_OWORD *)(a1 + 64) = v19;
      *(_QWORD *)(a1 + 40) = v18[0];
      v8 = *(void **)(a1 + 48);
      if (v8)
        free(v8);
      v9 = v18[2];
      *(_QWORD *)(a1 + 48) = v18[1];
      *(_QWORD *)(a1 + 56) = v9;
    }
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v16, lpsrc, 2);
    v10 = *(_QWORD *)(v16[0] + 16);
    *(_OWORD *)v17 = *(_OWORD *)v16[0];
    *(_QWORD *)&v17[16] = v10;
    v16[0] = 0;
    MEMORY[0x20BD3583C]();
    v11 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12))
      v12 = *(_DWORD *)(a1 + 8) == 0;
    else
      v12 = 1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v12)
      v15 = 0;
    else
      v15 = v13;
    if (HIDWORD(v15) * HIDWORD(v14) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v16[0] = v11;
    v16[1] = v15;
    v16[2] = v14;
    sub_20AFC48E4((uint64_t *)v17, (uint64_t)v16);
  }
}

uint64_t sub_20B49F6A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *sub_20B49F6B0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 2
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20B49F79C@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 2
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B49F888(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 64) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 68);
    if (v4 * (*(_QWORD *)(a1 + 72) >> 33) != -1)
      goto LABEL_11;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 48);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_20B49F924(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 64) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 68);
    if (v4 * (*(_QWORD *)(a1 + 72) >> 33) != -1)
      goto LABEL_11;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 48);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 48) = 0;
  JUMPOUT(0x20BD3583CLL);
}

_UNKNOWN **sub_20B49F9D0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B49FA24@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FCD50;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 20) = *(_OWORD *)(a1 + 20);
  result = sub_20AFC52A8(v4 + 40, a1 + 40);
  *a2 = v4;
  return result;
}

void sub_20B49FA94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

double sub_20B49FAB8(uint64_t a1, void *lpsrc)
{
  _DWORD *v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  __int128 v13;
  uint64_t v14;
  uint64_t v15[2];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE070, 0);
  if (v4)
  {
    sub_20AFE50D0(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 3);
    v6 = *(_QWORD *)(v12[0] + 16);
    v13 = *(_OWORD *)v12[0];
    v14 = v6;
    v12[0] = 0;
    MEMORY[0x20BD3583C]();
    v7 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12))
      v8 = *(_DWORD *)(a1 + 8) == 0;
    else
      v8 = 1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    if (v8)
      v11 = 0;
    else
      v11 = v9;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v12[0] = v7;
    v12[1] = v11;
    v12[2] = v10;
    v15[0] = (uint64_t)&v13;
    v15[1] = (uint64_t)v12;
    *(_QWORD *)&result = sub_20AFE4B3C(v15);
  }
  return result;
}

uint64_t sub_20B49FBE8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *sub_20B49FBF0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 3
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20B49FCDC@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 3
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B49FDC8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_20B49FDF8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 48) = 0;
  JUMPOUT(0x20BD3583CLL);
}

_UNKNOWN **sub_20B49FE38()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B49FE8C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FCDD0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 20) = *(_OWORD *)(a1 + 20);
  result = sub_20AFC5B64(v4 + 40, a1 + 40);
  *a2 = v4;
  return result;
}

void sub_20B49FEFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

float sub_20B49FF20(uint64_t a1, void *lpsrc)
{
  char *v4;
  _OWORD *v5;
  __int128 *v6;
  float result;
  __int128 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  _BYTE v18[28];
  _QWORD v19[3];
  float v20[6];

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE088, 0);
  if (v4)
  {
    v5 = (_OWORD *)(a1 + 8);
    v6 = (__int128 *)(v4 + 8);
    if (*(_QWORD *)(a1 + 48)
      && *(_DWORD *)v6 == *(_DWORD *)v5
      && *((_DWORD *)v4 + 3) == *(_DWORD *)(a1 + 12)
      && *((_DWORD *)v4 + 4) == *(_DWORD *)(a1 + 16)
      && *((_DWORD *)v4 + 5) == *(_DWORD *)(a1 + 20))
    {
      return sub_20AFE593C((unsigned int *)v4 + 2, a1 + 8);
    }
    else
    {
      v8 = *v6;
      *(_OWORD *)&v18[12] = *(_OWORD *)(v4 + 20);
      *(_OWORD *)v18 = v8;
      sub_20AFC5B64((uint64_t)v19, (uint64_t)(v4 + 40));
      *v5 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 20) = *(_OWORD *)&v18[12];
      result = v20[0];
      *(_OWORD *)(a1 + 64) = *(_OWORD *)v20;
      *(_QWORD *)(a1 + 40) = v19[0];
      v9 = *(void **)(a1 + 48);
      if (v9)
        free(v9);
      v10 = v19[2];
      *(_QWORD *)(a1 + 48) = v19[1];
      *(_QWORD *)(a1 + 56) = v10;
    }
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v17, lpsrc, 4);
    v11 = *(_QWORD *)(v17[0] + 16);
    *(_OWORD *)v18 = *(_OWORD *)v17[0];
    *(_QWORD *)&v18[16] = v11;
    v17[0] = 0;
    MEMORY[0x20BD3583C]();
    v12 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12))
      v13 = *(_DWORD *)(a1 + 8) == 0;
    else
      v13 = 1;
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v13)
      v16 = 0;
    else
      v16 = v14;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v17[0] = v12;
    v17[1] = v16;
    v17[2] = v15;
    return sub_20AFC5D04((uint64_t)v18, (uint64_t)v17);
  }
  return result;
}

uint64_t sub_20B4A0100(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *sub_20B4A0108@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 4
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20B4A01F4@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 4
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A02E0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A0310(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A0350(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t *v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FCE50;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 2;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = (size_t *)(a1 + 64);
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if ((v9 & (v9 - 1)) != 0)
    v15 = 1;
  else
    v15 = v9;
  sub_20B4C7C4C(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A0478()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A04CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FCE50;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC6680(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A054C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

size_t *sub_20B4A0570(uint64_t a1, void *lpsrc)
{
  char *v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  size_t v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE0A0, 0);
  if (v4)
    return (size_t *)sub_20AFE6354(a1 + 8, (__int128 *)(v4 + 8));
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 5);
  v6 = v23;
  v8 = *(_OWORD *)(v23 + 16);
  v7 = *(_OWORD *)(v23 + 32);
  v21[0] = *(_OWORD *)v23;
  v21[1] = v8;
  v21[2] = v7;
  *(_QWORD *)&v23 = 0;
  MEMORY[0x20BD3583C](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
  v13 = *(_QWORD *)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v14 = *(_DWORD *)(a1 + 32) == 0;
  else
    v14 = 1;
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  if (v14)
    v15 = 0;
  LODWORD(v23) = 2;
  *(_QWORD *)((char *)&v23 + 4) = v15;
  v17 = v15;
  v18 = v23;
  v19 = HIDWORD(v15);
  LODWORD(v23) = 1;
  *(_QWORD *)((char *)&v23 + 4) = v16;
  v20 = v23;
  if (HIDWORD(v16) * HIDWORD(v15) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  *(_QWORD *)&v23 = v13;
  *((_QWORD *)&v23 + 1) = v18;
  v24 = v19;
  v25 = v20;
  v26 = HIDWORD(v16);
  v27 = v17;
  v28 = v16;
  v22[0] = (size_t)v21;
  v22[1] = (size_t)&v23;
  return sub_20AFE5C6C(v22);
}

uint64_t sub_20B4A074C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A0754@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A08CC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A0A44(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A0A74(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A0AB4(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FCED0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 2;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C810C(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A0BE0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A0C34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FCED0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC7914(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A0CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B4A0CD8(uint64_t a1, void *lpsrc)
{
  char *v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  uint64_t v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE0B8, 0);
  if (v4)
    return (uint64_t *)sub_20AFE6B08(a1 + 8, (__int128 *)(v4 + 8));
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 6);
  v6 = v23;
  v8 = *(_OWORD *)(v23 + 16);
  v7 = *(_OWORD *)(v23 + 32);
  v21[0] = *(_OWORD *)v23;
  v21[1] = v8;
  v21[2] = v7;
  *(_QWORD *)&v23 = 0;
  MEMORY[0x20BD3583C](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
  v13 = *(_QWORD *)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v14 = *(_DWORD *)(a1 + 32) == 0;
  else
    v14 = 1;
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  if (v14)
    v15 = 0;
  LODWORD(v23) = 2;
  *(_QWORD *)((char *)&v23 + 4) = v15;
  v17 = v15;
  v18 = v23;
  v19 = HIDWORD(v15);
  LODWORD(v23) = 1;
  *(_QWORD *)((char *)&v23 + 4) = v16;
  v20 = v23;
  if (HIDWORD(v16) * HIDWORD(v15) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  *(_QWORD *)&v23 = v13;
  *((_QWORD *)&v23 + 1) = v18;
  v24 = v19;
  v25 = v20;
  v26 = HIDWORD(v16);
  v27 = v17;
  v28 = v16;
  v22[0] = (uint64_t)v21;
  v22[1] = (uint64_t)&v23;
  return sub_20AFE6878(v22);
}

uint64_t sub_20B4A0EB4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A0EBC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 6
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A1034@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 6
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A11AC(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_20B4A1250(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A12F4(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A13A8(uint64_t a1, uint64_t a2, _WORD *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FCF50;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 2;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C8A08(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A14D4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A1528@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FCF50;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC8C3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A15A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_20B4A15CC(uint64_t a1, void *lpsrc)
{
  char *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  uint64_t v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE0D0, 0);
  if (v4)
  {
    sub_20AFE7E40(a1 + 8, (__int128 *)(v4 + 8));
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 7);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v21[0] = *(_OWORD *)v23;
    v21[1] = v8;
    v21[2] = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x20BD3583C](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
    v13 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v14 = *(_DWORD *)(a1 + 32) == 0;
    else
      v14 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = 0;
    LODWORD(v23) = 2;
    *(_QWORD *)((char *)&v23 + 4) = v15;
    v17 = v15;
    v18 = v23;
    v19 = HIDWORD(v15);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v16;
    v20 = v23;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v18;
    v24 = v19;
    v25 = v20;
    v26 = HIDWORD(v16);
    v27 = v17;
    v28 = v16;
    v22[0] = (uint64_t)v21;
    v22[1] = (uint64_t)&v23;
    *(_QWORD *)&result = sub_20AFE741C(v22);
  }
  return result;
}

uint64_t sub_20B4A17A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A17B0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 7
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A1928@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 7
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A1AA0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A1AD0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A1B10(uint64_t a1, uint64_t a2, const float *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FCFD0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 2;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0)
    v15 = 4;
  else
    v15 = 4 * v9;
  sub_20B4C8FD4(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A1C40()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A1C94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FCFD0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC976C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A1D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_20B4A1D38(uint64_t a1, void *lpsrc)
{
  char *v4;
  float result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  uint64_t v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE0E8, 0);
  if (v4)
  {
    sub_20AFE8740(a1 + 8, (__int128 *)(v4 + 8));
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 8);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v21[0] = *(_OWORD *)v23;
    v21[1] = v8;
    v21[2] = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x20BD3583C](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
    v13 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v14 = *(_DWORD *)(a1 + 32) == 0;
    else
      v14 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = 0;
    LODWORD(v23) = 2;
    *(_QWORD *)((char *)&v23 + 4) = v15;
    v17 = v15;
    v18 = v23;
    v19 = HIDWORD(v15);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v16;
    v20 = v23;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v18;
    v24 = v19;
    v25 = v20;
    v26 = HIDWORD(v16);
    v27 = v17;
    v28 = v16;
    v22[0] = (uint64_t)v21;
    v22[1] = (uint64_t)&v23;
    return sub_20AFE84BC(v22);
  }
  return result;
}

uint64_t sub_20B4A1F14(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A1F1C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 8
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A2094@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 8
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A220C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A223C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A227C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t *v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD050;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 3;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = (size_t *)(a1 + 64);
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if ((v9 & (v9 - 1)) != 0)
    v15 = 1;
  else
    v15 = v9;
  sub_20B4C7C4C(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A23A4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A23F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD050;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC6680(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A2478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4A249C(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  size_t v31[2];
  __int128 v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE100, 0);
  if (v4)
    return sub_20AFE92B8(a1 + 8, (uint64_t)v4 + 8);
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v32, lpsrc, 9);
  v7 = *(_OWORD *)(v32 + 16);
  v6 = *(_OWORD *)(v32 + 32);
  v28 = *(_OWORD *)v32;
  v29 = v7;
  v30 = v6;
  *(_QWORD *)&v32 = 0;
  result = MEMORY[0x20BD3583C]();
  v8 = *(_BYTE **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(v32) = 3;
  *(_QWORD *)((char *)&v32 + 4) = v10;
  v12 = v10;
  v13 = v32;
  v14 = HIDWORD(v10);
  LODWORD(v32) = 1;
  *(_QWORD *)((char *)&v32 + 4) = v11;
  v15 = v32;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      abort();
  }
  *(_QWORD *)&v32 = v8;
  *((_QWORD *)&v32 + 1) = v13;
  v33 = v14;
  v34 = v15;
  v35 = HIDWORD(v11);
  v36 = v12;
  v37 = v11;
  v31[0] = (size_t)&v28;
  v31[1] = (size_t)&v32;
  if ((_DWORD)v15 == 1 && DWORD1(v29) == 1)
    return (uint64_t)sub_20AFE5D88(v31);
  if (DWORD2(v28) && HIDWORD(v28) && (_DWORD)v29)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v28) - 1;
    v19 = DWORD2(v29);
    v20 = (_BYTE *)v28;
    v21 = v29 - 1;
    if ((_DWORD)v29 != 1)
    {
      v22 = HIDWORD(v29);
      if (HIDWORD(v28) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
      }
      else
      {
        v23 = 0;
        v24 = (uint64_t)(v8 + 2);
        v25 = (_BYTE *)(v28 + 2);
        do
        {
          v26 = v25;
          result = v24;
          v27 = v18;
          do
          {
            *(_BYTE *)(result - 2) = *(v26 - 2);
            *(_BYTE *)(result - 1) = *(v26 - 1);
            *(_BYTE *)result = *v26;
            result += v17;
            v26 += v19;
            --v27;
          }
          while (v27);
          *(_BYTE *)(result - 2) = *(v26 - 2);
          *(_BYTE *)(result - 1) = *(v26 - 1);
          *(_BYTE *)result = *v26;
          v20 += v22;
          v8 += v16;
          ++v23;
          v24 += v16;
          v25 += v22;
        }
        while (v23 != v21);
      }
    }
    for (; v18; --v18)
    {
      *v8 = *v20;
      v8[1] = v20[1];
      v8[2] = v20[2];
      v20 += v19;
      v8 += v17;
    }
    *v8 = *v20;
    v8[1] = v20[1];
    v8[2] = v20[2];
  }
  return result;
}

uint64_t sub_20B4A27AC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A27B4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 9
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A292C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 9
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A2AA4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A2AD4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A2B14(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD0D0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 3;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C810C(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A2C44()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A2C98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD0D0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC7914(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A2D18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4A2D3C(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  _WORD *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  _WORD *v24;
  _WORD *v25;
  _WORD *v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32[2];
  __int128 v33;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE118, 0);
  if (v4)
    return sub_20AFE9654(a1 + 8, (uint64_t)v4 + 8);
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v33, lpsrc, 10);
  v7 = *(_OWORD *)(v33 + 16);
  v6 = *(_OWORD *)(v33 + 32);
  v29 = *(_OWORD *)v33;
  v30 = v7;
  v31 = v6;
  *(_QWORD *)&v33 = 0;
  result = MEMORY[0x20BD3583C]();
  v8 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(v33) = 3;
  *(_QWORD *)((char *)&v33 + 4) = v10;
  v12 = v10;
  v13 = v33;
  v14 = HIDWORD(v10);
  LODWORD(v33) = 1;
  *(_QWORD *)((char *)&v33 + 4) = v11;
  v15 = v33;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      abort();
  }
  *(_QWORD *)&v33 = v8;
  *((_QWORD *)&v33 + 1) = v13;
  v34 = v14;
  v35 = v15;
  v36 = HIDWORD(v11);
  v37 = v12;
  v38 = v11;
  v32[0] = (uint64_t)&v29;
  v32[1] = (uint64_t)&v33;
  if ((_DWORD)v15 == 1 && DWORD1(v30) == 1)
    return (uint64_t)sub_20AFC7BE4(v32);
  if (DWORD2(v29) && HIDWORD(v29) && (_DWORD)v30)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v29) - 1;
    v19 = DWORD2(v30);
    v20 = (_WORD *)v29;
    v21 = v30 - 1;
    if ((_DWORD)v30 != 1)
    {
      v22 = HIDWORD(v30);
      if (HIDWORD(v29) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_27:
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        return result;
      }
      v23 = 0;
      v24 = v8 + 2;
      result = v29 + 4;
      do
      {
        v25 = (_WORD *)result;
        v26 = v24;
        v27 = v18;
        do
        {
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *v26 = *v25;
          v26 += v17;
          v25 += v19;
          --v27;
        }
        while (v27);
        *(v26 - 2) = *(v25 - 2);
        *(v26 - 1) = *(v25 - 1);
        *v26 = *v25;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        result += 2 * v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      v28 = 2 * v17;
      do
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 = (_WORD *)((char *)v8 + v28);
        --v18;
      }
      while (v18);
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_20B4A306C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A3074@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 10
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A31EC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 10
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A3364(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_20B4A3408(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A34AC(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A3560(uint64_t a1, uint64_t a2, _WORD *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD150;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 3;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C8A08(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A3690()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A36E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD150;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC8C3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A3764(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_20B4A3788(uint64_t a1, void *lpsrc)
{
  char *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  _QWORD v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE130, 0);
  if (v4)
  {
    sub_20AFE9C10(a1 + 8, (__int128 *)(v4 + 8));
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 11);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v21[0] = *(_OWORD *)v23;
    v21[1] = v8;
    v21[2] = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x20BD3583C](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
    v13 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v14 = *(_DWORD *)(a1 + 32) == 0;
    else
      v14 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = 0;
    LODWORD(v23) = 3;
    *(_QWORD *)((char *)&v23 + 4) = v15;
    v17 = v15;
    v18 = v23;
    v19 = HIDWORD(v15);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v16;
    v20 = v23;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v18;
    v24 = v19;
    v25 = v20;
    v26 = HIDWORD(v16);
    v27 = v17;
    v28 = v16;
    v22[0] = v21;
    v22[1] = &v23;
    return sub_20AFE98D0(v22);
  }
  return result;
}

uint64_t sub_20B4A3964(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A396C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 11
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A3AE4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 11
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A3C5C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A3C8C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A3CCC(uint64_t a1, uint64_t a2, const float *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD1D0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 3;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0)
    v15 = 4;
  else
    v15 = 4 * v9;
  sub_20B4C8FD4(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A3DFC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A3E50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD1D0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC976C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A3ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_20B4A3EF4(uint64_t a1, void *lpsrc)
{
  void *v4;
  float result;
  __int128 v6;
  __int128 v7;
  float *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  float *v20;
  int v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33[2];
  __int128 v34;
  int v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE148, 0);
  if (v4)
  {
    sub_20AFEA16C(a1 + 8, (uint64_t)v4 + 8);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v34, lpsrc, 12);
  v7 = *(_OWORD *)(v34 + 16);
  v6 = *(_OWORD *)(v34 + 32);
  v30 = *(_OWORD *)v34;
  v31 = v7;
  v32 = v6;
  *(_QWORD *)&v34 = 0;
  MEMORY[0x20BD3583C]();
  v8 = *(float **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(v34) = 3;
  *(_QWORD *)((char *)&v34 + 4) = v10;
  v12 = v10;
  v13 = v34;
  v14 = HIDWORD(v10);
  LODWORD(v34) = 1;
  *(_QWORD *)((char *)&v34 + 4) = v11;
  v15 = v34;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  *(_QWORD *)&v34 = v8;
  *((_QWORD *)&v34 + 1) = v13;
  v35 = v14;
  v36 = v15;
  v37 = HIDWORD(v11);
  v38 = v12;
  v39 = v11;
  v33[0] = (uint64_t)&v30;
  v33[1] = (uint64_t)&v34;
  if ((_DWORD)v15 == 1 && DWORD1(v31) == 1)
  {
    sub_20AFC9A3C(v33);
    return result;
  }
  if (DWORD2(v30) && HIDWORD(v30) && (_DWORD)v31)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v30) - 1;
    v19 = DWORD2(v31);
    v20 = (float *)v30;
    v21 = v31 - 1;
    if ((_DWORD)v31 != 1)
    {
      v22 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_27:
        *v8 = *v20;
        v8[1] = v20[1];
        result = v20[2];
        v8[2] = result;
        return result;
      }
      v23 = 0;
      v24 = v8 + 2;
      v25 = (_DWORD *)(v30 + 8);
      do
      {
        v26 = v25;
        v27 = v24;
        v28 = v18;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *v27 = *v26;
          v27 += v17;
          v26 += v19;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *v27 = *v26;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        v25 += v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      v29 = 4 * v17;
      do
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 = (float *)((char *)v8 + v29);
        --v18;
      }
      while (v18);
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_20B4A4224(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A422C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 12
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A43A4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 12
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A451C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A454C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A458C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t *v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD250;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = (size_t *)(a1 + 64);
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if ((v9 & (v9 - 1)) != 0)
    v15 = 1;
  else
    v15 = v9;
  sub_20B4C7C4C(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A46B4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A4708@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD250;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC6680(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A4788(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_20B4A47AC(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE160, 0);
  if (v4)
  {
    sub_20AFEA678(a1 + 8, (uint64_t)v4 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 13);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x20BD3583C](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (size_t)&v16;
    v19[1] = (size_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_20AFE5D88(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_20AFEA3E0((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_20B4A49D4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A49DC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 13
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A4B54@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 13
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A4CCC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A4CFC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A4D3C(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD2D0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C810C(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A4E6C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A4EC0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD2D0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC7914(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A4F40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_20B4A4F64(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE178, 0);
  if (v4)
  {
    sub_20AFEABB4(a1 + 8, (uint64_t)v4 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 14);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x20BD3583C](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (uint64_t)&v16;
    v19[1] = (uint64_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_20AFC7BE4(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_20AFEA8F4((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_20B4A518C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A5194@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 14
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A530C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 14
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A5484(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_20B4A5528(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A55CC(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A5680(uint64_t a1, uint64_t a2, _WORD *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD350;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C8A08(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A57B0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A5804@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD350;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC8C3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A5884(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_20B4A58A8(uint64_t a1, void *lpsrc)
{
  char *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  _QWORD v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE190, 0);
  if (v4)
  {
    sub_20AFEB1C0(a1 + 8, (__int128 *)(v4 + 8));
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 15);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v21[0] = *(_OWORD *)v23;
    v21[1] = v8;
    v21[2] = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x20BD3583C](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
    v13 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v14 = *(_DWORD *)(a1 + 32) == 0;
    else
      v14 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v15;
    v17 = v15;
    v18 = v23;
    v19 = HIDWORD(v15);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v16;
    v20 = v23;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v18;
    v24 = v19;
    v25 = v20;
    v26 = HIDWORD(v16);
    v27 = v17;
    v28 = v16;
    v22[0] = v21;
    v22[1] = &v23;
    return sub_20AFEAE58(v22);
  }
  return result;
}

uint64_t sub_20B4A5A84(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A5A8C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 15
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A5C04@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 15
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A5D7C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A5DAC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A5DEC(uint64_t a1, uint64_t a2, const float *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD3D0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0)
    v15 = 4;
  else
    v15 = 4 * v9;
  sub_20B4C8FD4(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A5F18()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A5F6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD3D0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC976C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A5FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_20B4A6010(uint64_t a1, void *lpsrc)
{
  void *v4;
  float result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  char *v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE1A8, 0);
  if (v4)
  {
    sub_20AFEB8B4(a1 + 8, (uint64_t)v4 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 16);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v17 = *(_OWORD *)v23;
    v18 = v8;
    v19 = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x20BD3583C](v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v11;
    v13 = v11;
    v14 = v23;
    v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v12;
    v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v23 = v9;
    *((_QWORD *)&v23 + 1) = v14;
    v24 = v15;
    v25 = v16;
    v26 = HIDWORD(v12);
    v27 = v13;
    v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if ((_DWORD)v16 == 1 && DWORD1(v18) == 1)
    {
      sub_20AFC9A3C(v20);
    }
    else
    {
      v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17))
      {
        if ((_DWORD)v18)
        {
          v22 = &v21;
          return sub_20AFEB5FC((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20B4A6238(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A6240@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 16
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A63B8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 16
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A6530(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A6560(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A65A0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t *v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD450;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 3;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = (size_t *)(a1 + 64);
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if ((v9 & (v9 - 1)) != 0)
    v15 = 1;
  else
    v15 = v9;
  sub_20B4C7C4C(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A66C8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A671C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD450;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC6680(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A679C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4A67C0(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  size_t v31[2];
  __int128 v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE1C0, 0);
  if (v4)
    return sub_20AFE92B8(a1 + 8, (uint64_t)v4 + 8);
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v32, lpsrc, 17);
  v7 = *(_OWORD *)(v32 + 16);
  v6 = *(_OWORD *)(v32 + 32);
  v28 = *(_OWORD *)v32;
  v29 = v7;
  v30 = v6;
  *(_QWORD *)&v32 = 0;
  result = MEMORY[0x20BD3583C]();
  v8 = *(_BYTE **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(v32) = 3;
  *(_QWORD *)((char *)&v32 + 4) = v10;
  v12 = v10;
  v13 = v32;
  v14 = HIDWORD(v10);
  LODWORD(v32) = 1;
  *(_QWORD *)((char *)&v32 + 4) = v11;
  v15 = v32;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      abort();
  }
  *(_QWORD *)&v32 = v8;
  *((_QWORD *)&v32 + 1) = v13;
  v33 = v14;
  v34 = v15;
  v35 = HIDWORD(v11);
  v36 = v12;
  v37 = v11;
  v31[0] = (size_t)&v28;
  v31[1] = (size_t)&v32;
  if ((_DWORD)v15 == 1 && DWORD1(v29) == 1)
    return (uint64_t)sub_20AFE5D88(v31);
  if (DWORD2(v28) && HIDWORD(v28) && (_DWORD)v29)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v28) - 1;
    v19 = DWORD2(v29);
    v20 = (_BYTE *)v28;
    v21 = v29 - 1;
    if ((_DWORD)v29 != 1)
    {
      v22 = HIDWORD(v29);
      if (HIDWORD(v28) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
      }
      else
      {
        v23 = 0;
        v24 = (uint64_t)(v8 + 2);
        v25 = (_BYTE *)(v28 + 2);
        do
        {
          v26 = v25;
          result = v24;
          v27 = v18;
          do
          {
            *(_BYTE *)(result - 2) = *(v26 - 2);
            *(_BYTE *)(result - 1) = *(v26 - 1);
            *(_BYTE *)result = *v26;
            result += v17;
            v26 += v19;
            --v27;
          }
          while (v27);
          *(_BYTE *)(result - 2) = *(v26 - 2);
          *(_BYTE *)(result - 1) = *(v26 - 1);
          *(_BYTE *)result = *v26;
          v20 += v22;
          v8 += v16;
          ++v23;
          v24 += v16;
          v25 += v22;
        }
        while (v23 != v21);
      }
    }
    for (; v18; --v18)
    {
      *v8 = *v20;
      v8[1] = v20[1];
      v8[2] = v20[2];
      v20 += v19;
      v8 += v17;
    }
    *v8 = *v20;
    v8[1] = v20[1];
    v8[2] = v20[2];
  }
  return result;
}

uint64_t sub_20B4A6AD0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A6AD8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 17
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A6C50@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 17
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A6DC8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A6DF8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A6E38(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD4D0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 3;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C810C(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A6F68()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A6FBC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD4D0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC7914(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A703C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4A7060(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  _WORD *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  _WORD *v24;
  _WORD *v25;
  _WORD *v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32[2];
  __int128 v33;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE1D8, 0);
  if (v4)
    return sub_20AFE9654(a1 + 8, (uint64_t)v4 + 8);
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v33, lpsrc, 18);
  v7 = *(_OWORD *)(v33 + 16);
  v6 = *(_OWORD *)(v33 + 32);
  v29 = *(_OWORD *)v33;
  v30 = v7;
  v31 = v6;
  *(_QWORD *)&v33 = 0;
  result = MEMORY[0x20BD3583C]();
  v8 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(v33) = 3;
  *(_QWORD *)((char *)&v33 + 4) = v10;
  v12 = v10;
  v13 = v33;
  v14 = HIDWORD(v10);
  LODWORD(v33) = 1;
  *(_QWORD *)((char *)&v33 + 4) = v11;
  v15 = v33;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      abort();
  }
  *(_QWORD *)&v33 = v8;
  *((_QWORD *)&v33 + 1) = v13;
  v34 = v14;
  v35 = v15;
  v36 = HIDWORD(v11);
  v37 = v12;
  v38 = v11;
  v32[0] = (uint64_t)&v29;
  v32[1] = (uint64_t)&v33;
  if ((_DWORD)v15 == 1 && DWORD1(v30) == 1)
    return (uint64_t)sub_20AFC7BE4(v32);
  if (DWORD2(v29) && HIDWORD(v29) && (_DWORD)v30)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v29) - 1;
    v19 = DWORD2(v30);
    v20 = (_WORD *)v29;
    v21 = v30 - 1;
    if ((_DWORD)v30 != 1)
    {
      v22 = HIDWORD(v30);
      if (HIDWORD(v29) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_27:
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        return result;
      }
      v23 = 0;
      v24 = v8 + 2;
      result = v29 + 4;
      do
      {
        v25 = (_WORD *)result;
        v26 = v24;
        v27 = v18;
        do
        {
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *v26 = *v25;
          v26 += v17;
          v25 += v19;
          --v27;
        }
        while (v27);
        *(v26 - 2) = *(v25 - 2);
        *(v26 - 1) = *(v25 - 1);
        *v26 = *v25;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        result += 2 * v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      v28 = 2 * v17;
      do
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 = (_WORD *)((char *)v8 + v28);
        --v18;
      }
      while (v18);
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_20B4A7390(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A7398@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 18
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A7510@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 18
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A7688(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_20B4A772C(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A77D0(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A7884(uint64_t a1, uint64_t a2, _WORD *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD550;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 3;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C8A08(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A79B4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A7A08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD550;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC8C3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A7A88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_20B4A7AAC(uint64_t a1, void *lpsrc)
{
  char *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  _QWORD v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE1F0, 0);
  if (v4)
  {
    sub_20AFE9C10(a1 + 8, (__int128 *)(v4 + 8));
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 19);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v21[0] = *(_OWORD *)v23;
    v21[1] = v8;
    v21[2] = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x20BD3583C](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
    v13 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v14 = *(_DWORD *)(a1 + 32) == 0;
    else
      v14 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = 0;
    LODWORD(v23) = 3;
    *(_QWORD *)((char *)&v23 + 4) = v15;
    v17 = v15;
    v18 = v23;
    v19 = HIDWORD(v15);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v16;
    v20 = v23;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v18;
    v24 = v19;
    v25 = v20;
    v26 = HIDWORD(v16);
    v27 = v17;
    v28 = v16;
    v22[0] = v21;
    v22[1] = &v23;
    return sub_20AFE98D0(v22);
  }
  return result;
}

uint64_t sub_20B4A7C88(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A7C90@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 19
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A7E08@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 19
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A7F80(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A7FB0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A7FF0(uint64_t a1, uint64_t a2, const float *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD5D0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 3;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0)
    v15 = 4;
  else
    v15 = 4 * v9;
  sub_20B4C8FD4(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A8120()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A8174@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD5D0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC976C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A81F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_20B4A8218(uint64_t a1, void *lpsrc)
{
  void *v4;
  float result;
  __int128 v6;
  __int128 v7;
  float *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  float *v20;
  int v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33[2];
  __int128 v34;
  int v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE208, 0);
  if (v4)
  {
    sub_20AFEA16C(a1 + 8, (uint64_t)v4 + 8);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v34, lpsrc, 20);
  v7 = *(_OWORD *)(v34 + 16);
  v6 = *(_OWORD *)(v34 + 32);
  v30 = *(_OWORD *)v34;
  v31 = v7;
  v32 = v6;
  *(_QWORD *)&v34 = 0;
  MEMORY[0x20BD3583C]();
  v8 = *(float **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(v34) = 3;
  *(_QWORD *)((char *)&v34 + 4) = v10;
  v12 = v10;
  v13 = v34;
  v14 = HIDWORD(v10);
  LODWORD(v34) = 1;
  *(_QWORD *)((char *)&v34 + 4) = v11;
  v15 = v34;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  *(_QWORD *)&v34 = v8;
  *((_QWORD *)&v34 + 1) = v13;
  v35 = v14;
  v36 = v15;
  v37 = HIDWORD(v11);
  v38 = v12;
  v39 = v11;
  v33[0] = (uint64_t)&v30;
  v33[1] = (uint64_t)&v34;
  if ((_DWORD)v15 == 1 && DWORD1(v31) == 1)
  {
    sub_20AFC9A3C(v33);
    return result;
  }
  if (DWORD2(v30) && HIDWORD(v30) && (_DWORD)v31)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v30) - 1;
    v19 = DWORD2(v31);
    v20 = (float *)v30;
    v21 = v31 - 1;
    if ((_DWORD)v31 != 1)
    {
      v22 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_27:
        *v8 = *v20;
        v8[1] = v20[1];
        result = v20[2];
        v8[2] = result;
        return result;
      }
      v23 = 0;
      v24 = v8 + 2;
      v25 = (_DWORD *)(v30 + 8);
      do
      {
        v26 = v25;
        v27 = v24;
        v28 = v18;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *v27 = *v26;
          v27 += v17;
          v26 += v19;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *v27 = *v26;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        v25 += v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      v29 = 4 * v17;
      do
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 = (float *)((char *)v8 + v29);
        --v18;
      }
      while (v18);
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_20B4A8548(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A8550@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 20
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A86C8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 20
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A8840(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A8870(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A88B0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t *v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD650;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 3;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = (size_t *)(a1 + 64);
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if ((v9 & (v9 - 1)) != 0)
    v15 = 1;
  else
    v15 = v9;
  sub_20B4C7C4C(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A89D8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A8A2C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD650;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC6680(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A8AAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4A8AD0(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  size_t v31[2];
  __int128 v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE220, 0);
  if (v4)
    return sub_20AFE92B8(a1 + 8, (uint64_t)v4 + 8);
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v32, lpsrc, 21);
  v7 = *(_OWORD *)(v32 + 16);
  v6 = *(_OWORD *)(v32 + 32);
  v28 = *(_OWORD *)v32;
  v29 = v7;
  v30 = v6;
  *(_QWORD *)&v32 = 0;
  result = MEMORY[0x20BD3583C]();
  v8 = *(_BYTE **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(v32) = 3;
  *(_QWORD *)((char *)&v32 + 4) = v10;
  v12 = v10;
  v13 = v32;
  v14 = HIDWORD(v10);
  LODWORD(v32) = 1;
  *(_QWORD *)((char *)&v32 + 4) = v11;
  v15 = v32;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      abort();
  }
  *(_QWORD *)&v32 = v8;
  *((_QWORD *)&v32 + 1) = v13;
  v33 = v14;
  v34 = v15;
  v35 = HIDWORD(v11);
  v36 = v12;
  v37 = v11;
  v31[0] = (size_t)&v28;
  v31[1] = (size_t)&v32;
  if ((_DWORD)v15 == 1 && DWORD1(v29) == 1)
    return (uint64_t)sub_20AFE5D88(v31);
  if (DWORD2(v28) && HIDWORD(v28) && (_DWORD)v29)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v28) - 1;
    v19 = DWORD2(v29);
    v20 = (_BYTE *)v28;
    v21 = v29 - 1;
    if ((_DWORD)v29 != 1)
    {
      v22 = HIDWORD(v29);
      if (HIDWORD(v28) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
      }
      else
      {
        v23 = 0;
        v24 = (uint64_t)(v8 + 2);
        v25 = (_BYTE *)(v28 + 2);
        do
        {
          v26 = v25;
          result = v24;
          v27 = v18;
          do
          {
            *(_BYTE *)(result - 2) = *(v26 - 2);
            *(_BYTE *)(result - 1) = *(v26 - 1);
            *(_BYTE *)result = *v26;
            result += v17;
            v26 += v19;
            --v27;
          }
          while (v27);
          *(_BYTE *)(result - 2) = *(v26 - 2);
          *(_BYTE *)(result - 1) = *(v26 - 1);
          *(_BYTE *)result = *v26;
          v20 += v22;
          v8 += v16;
          ++v23;
          v24 += v16;
          v25 += v22;
        }
        while (v23 != v21);
      }
    }
    for (; v18; --v18)
    {
      *v8 = *v20;
      v8[1] = v20[1];
      v8[2] = v20[2];
      v20 += v19;
      v8 += v17;
    }
    *v8 = *v20;
    v8[1] = v20[1];
    v8[2] = v20[2];
  }
  return result;
}

uint64_t sub_20B4A8DE0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A8DE8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 21
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A8F60@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 21
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A90D8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A9108(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A9148(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD6D0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 3;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C810C(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A9278()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A92CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD6D0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC7914(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A934C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4A9370(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  _WORD *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  _WORD *v24;
  _WORD *v25;
  _WORD *v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32[2];
  __int128 v33;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE238, 0);
  if (v4)
    return sub_20AFE9654(a1 + 8, (uint64_t)v4 + 8);
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v33, lpsrc, 22);
  v7 = *(_OWORD *)(v33 + 16);
  v6 = *(_OWORD *)(v33 + 32);
  v29 = *(_OWORD *)v33;
  v30 = v7;
  v31 = v6;
  *(_QWORD *)&v33 = 0;
  result = MEMORY[0x20BD3583C]();
  v8 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(v33) = 3;
  *(_QWORD *)((char *)&v33 + 4) = v10;
  v12 = v10;
  v13 = v33;
  v14 = HIDWORD(v10);
  LODWORD(v33) = 1;
  *(_QWORD *)((char *)&v33 + 4) = v11;
  v15 = v33;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      abort();
  }
  *(_QWORD *)&v33 = v8;
  *((_QWORD *)&v33 + 1) = v13;
  v34 = v14;
  v35 = v15;
  v36 = HIDWORD(v11);
  v37 = v12;
  v38 = v11;
  v32[0] = (uint64_t)&v29;
  v32[1] = (uint64_t)&v33;
  if ((_DWORD)v15 == 1 && DWORD1(v30) == 1)
    return (uint64_t)sub_20AFC7BE4(v32);
  if (DWORD2(v29) && HIDWORD(v29) && (_DWORD)v30)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v29) - 1;
    v19 = DWORD2(v30);
    v20 = (_WORD *)v29;
    v21 = v30 - 1;
    if ((_DWORD)v30 != 1)
    {
      v22 = HIDWORD(v30);
      if (HIDWORD(v29) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_27:
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        return result;
      }
      v23 = 0;
      v24 = v8 + 2;
      result = v29 + 4;
      do
      {
        v25 = (_WORD *)result;
        v26 = v24;
        v27 = v18;
        do
        {
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *v26 = *v25;
          v26 += v17;
          v25 += v19;
          --v27;
        }
        while (v27);
        *(v26 - 2) = *(v25 - 2);
        *(v26 - 1) = *(v25 - 1);
        *v26 = *v25;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        result += 2 * v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      v28 = 2 * v17;
      do
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 = (_WORD *)((char *)v8 + v28);
        --v18;
      }
      while (v18);
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_20B4A96A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A96A8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 22
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A9820@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 22
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4A9998(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_20B4A9A3C(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4A9AE0(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4A9B94(uint64_t a1, uint64_t a2, _WORD *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD750;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 3;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C8A08(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4A9CC4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4A9D18@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD750;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC8C3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4A9D98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_20B4A9DBC(uint64_t a1, void *lpsrc)
{
  char *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  _QWORD v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE250, 0);
  if (v4)
  {
    sub_20AFE9C10(a1 + 8, (__int128 *)(v4 + 8));
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 23);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v21[0] = *(_OWORD *)v23;
    v21[1] = v8;
    v21[2] = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x20BD3583C](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
    v13 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v14 = *(_DWORD *)(a1 + 32) == 0;
    else
      v14 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = 0;
    LODWORD(v23) = 3;
    *(_QWORD *)((char *)&v23 + 4) = v15;
    v17 = v15;
    v18 = v23;
    v19 = HIDWORD(v15);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v16;
    v20 = v23;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v18;
    v24 = v19;
    v25 = v20;
    v26 = HIDWORD(v16);
    v27 = v17;
    v28 = v16;
    v22[0] = v21;
    v22[1] = &v23;
    return sub_20AFE98D0(v22);
  }
  return result;
}

uint64_t sub_20B4A9F98(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4A9FA0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 23
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AA118@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 23
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AA290(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4AA2C0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4AA300(uint64_t a1, uint64_t a2, const float *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD7D0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 3;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0)
    v15 = 4;
  else
    v15 = 4 * v9;
  sub_20B4C8FD4(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4AA430()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4AA484@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD7D0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC976C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4AA504(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_20B4AA528(uint64_t a1, void *lpsrc)
{
  void *v4;
  float result;
  __int128 v6;
  __int128 v7;
  float *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  float *v20;
  int v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33[2];
  __int128 v34;
  int v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE268, 0);
  if (v4)
  {
    sub_20AFEA16C(a1 + 8, (uint64_t)v4 + 8);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v34, lpsrc, 24);
  v7 = *(_OWORD *)(v34 + 16);
  v6 = *(_OWORD *)(v34 + 32);
  v30 = *(_OWORD *)v34;
  v31 = v7;
  v32 = v6;
  *(_QWORD *)&v34 = 0;
  MEMORY[0x20BD3583C]();
  v8 = *(float **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(v34) = 3;
  *(_QWORD *)((char *)&v34 + 4) = v10;
  v12 = v10;
  v13 = v34;
  v14 = HIDWORD(v10);
  LODWORD(v34) = 1;
  *(_QWORD *)((char *)&v34 + 4) = v11;
  v15 = v34;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  *(_QWORD *)&v34 = v8;
  *((_QWORD *)&v34 + 1) = v13;
  v35 = v14;
  v36 = v15;
  v37 = HIDWORD(v11);
  v38 = v12;
  v39 = v11;
  v33[0] = (uint64_t)&v30;
  v33[1] = (uint64_t)&v34;
  if ((_DWORD)v15 == 1 && DWORD1(v31) == 1)
  {
    sub_20AFC9A3C(v33);
    return result;
  }
  if (DWORD2(v30) && HIDWORD(v30) && (_DWORD)v31)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v30) - 1;
    v19 = DWORD2(v31);
    v20 = (float *)v30;
    v21 = v31 - 1;
    if ((_DWORD)v31 != 1)
    {
      v22 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_27:
        *v8 = *v20;
        v8[1] = v20[1];
        result = v20[2];
        v8[2] = result;
        return result;
      }
      v23 = 0;
      v24 = v8 + 2;
      v25 = (_DWORD *)(v30 + 8);
      do
      {
        v26 = v25;
        v27 = v24;
        v28 = v18;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *v27 = *v26;
          v27 += v17;
          v26 += v19;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *v27 = *v26;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        v25 += v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      v29 = 4 * v17;
      do
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 = (float *)((char *)v8 + v29);
        --v18;
      }
      while (v18);
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_20B4AA858(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4AA860@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 24
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AA9D8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 24
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AAB50(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4AAB80(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4AABC0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t *v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD850;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = (size_t *)(a1 + 64);
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if ((v9 & (v9 - 1)) != 0)
    v15 = 1;
  else
    v15 = v9;
  sub_20B4C7C4C(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4AACE8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4AAD3C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD850;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC6680(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4AADBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_20B4AADE0(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE280, 0);
  if (v4)
  {
    sub_20AFEA678(a1 + 8, (uint64_t)v4 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 25);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x20BD3583C](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (size_t)&v16;
    v19[1] = (size_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_20AFE5D88(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_20AFEA3E0((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_20B4AB008(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4AB010@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 25
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AB188@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 25
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AB300(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4AB330(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4AB370(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD8D0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C810C(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4AB4A0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4AB4F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD8D0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC7914(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4AB574(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_20B4AB598(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE298, 0);
  if (v4)
  {
    sub_20AFEABB4(a1 + 8, (uint64_t)v4 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 26);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x20BD3583C](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (uint64_t)&v16;
    v19[1] = (uint64_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_20AFC7BE4(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_20AFEA8F4((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_20B4AB7C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4AB7C8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 26
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AB940@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 26
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4ABAB8(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_20B4ABB5C(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4ABC00(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4ABCB4(uint64_t a1, uint64_t a2, _WORD *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD950;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C8A08(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4ABDE4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4ABE38@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD950;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC8C3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4ABEB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_20B4ABEDC(uint64_t a1, void *lpsrc)
{
  char *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  _QWORD v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE2B0, 0);
  if (v4)
  {
    sub_20AFEB1C0(a1 + 8, (__int128 *)(v4 + 8));
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 27);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v21[0] = *(_OWORD *)v23;
    v21[1] = v8;
    v21[2] = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x20BD3583C](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
    v13 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v14 = *(_DWORD *)(a1 + 32) == 0;
    else
      v14 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v15;
    v17 = v15;
    v18 = v23;
    v19 = HIDWORD(v15);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v16;
    v20 = v23;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v18;
    v24 = v19;
    v25 = v20;
    v26 = HIDWORD(v16);
    v27 = v17;
    v28 = v16;
    v22[0] = v21;
    v22[1] = &v23;
    return sub_20AFEAE58(v22);
  }
  return result;
}

uint64_t sub_20B4AC0B8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4AC0C0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 27
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AC238@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 27
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AC3B0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4AC3E0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4AC420(uint64_t a1, uint64_t a2, const float *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FD9D0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0)
    v15 = 4;
  else
    v15 = 4 * v9;
  sub_20B4C8FD4(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4AC54C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4AC5A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD9D0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC976C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4AC620(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_20B4AC644(uint64_t a1, void *lpsrc)
{
  void *v4;
  float result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  char *v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE2C8, 0);
  if (v4)
  {
    sub_20AFEB8B4(a1 + 8, (uint64_t)v4 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 28);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v17 = *(_OWORD *)v23;
    v18 = v8;
    v19 = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x20BD3583C](v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v11;
    v13 = v11;
    v14 = v23;
    v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v12;
    v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v23 = v9;
    *((_QWORD *)&v23 + 1) = v14;
    v24 = v15;
    v25 = v16;
    v26 = HIDWORD(v12);
    v27 = v13;
    v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if ((_DWORD)v16 == 1 && DWORD1(v18) == 1)
    {
      sub_20AFC9A3C(v20);
    }
    else
    {
      v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17))
      {
        if ((_DWORD)v18)
        {
          v22 = &v21;
          return sub_20AFEB5FC((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20B4AC86C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4AC874@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 28
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AC9EC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 28
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4ACB64(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4ACB94(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4ACBD4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t *v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FDA50;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = (size_t *)(a1 + 64);
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if ((v9 & (v9 - 1)) != 0)
    v15 = 1;
  else
    v15 = v9;
  sub_20B4C7C4C(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4ACCFC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4ACD50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDA50;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC6680(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4ACDD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_20B4ACDF4(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE2E0, 0);
  if (v4)
  {
    sub_20AFEA678(a1 + 8, (uint64_t)v4 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 29);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x20BD3583C](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (size_t)&v16;
    v19[1] = (size_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_20AFE5D88(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_20AFEA3E0((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_20B4AD01C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4AD024@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 29
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AD19C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 29
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AD314(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4AD344(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4AD384(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FDAD0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C810C(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4AD4B4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4AD508@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDAD0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC7914(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4AD588(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_20B4AD5AC(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE2F8, 0);
  if (v4)
  {
    sub_20AFEABB4(a1 + 8, (uint64_t)v4 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 30);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x20BD3583C](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (uint64_t)&v16;
    v19[1] = (uint64_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_20AFC7BE4(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_20AFEA8F4((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_20B4AD7D4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4AD7DC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 30
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AD954@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 30
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4ADACC(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_20B4ADB70(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4ADC14(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4ADCC8(uint64_t a1, uint64_t a2, _WORD *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FDB50;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C8A08(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4ADDF8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4ADE4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDB50;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC8C3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4ADECC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_20B4ADEF0(uint64_t a1, void *lpsrc)
{
  char *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  _QWORD v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE310, 0);
  if (v4)
  {
    sub_20AFEB1C0(a1 + 8, (__int128 *)(v4 + 8));
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 31);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v21[0] = *(_OWORD *)v23;
    v21[1] = v8;
    v21[2] = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x20BD3583C](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
    v13 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v14 = *(_DWORD *)(a1 + 32) == 0;
    else
      v14 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v15;
    v17 = v15;
    v18 = v23;
    v19 = HIDWORD(v15);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v16;
    v20 = v23;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v18;
    v24 = v19;
    v25 = v20;
    v26 = HIDWORD(v16);
    v27 = v17;
    v28 = v16;
    v22[0] = v21;
    v22[1] = &v23;
    return sub_20AFEAE58(v22);
  }
  return result;
}

uint64_t sub_20B4AE0CC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4AE0D4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 31
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AE24C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 31
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AE3C4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4AE3F4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4AE434(uint64_t a1, uint64_t a2, const float *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FDBD0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0)
    v15 = 4;
  else
    v15 = 4 * v9;
  sub_20B4C8FD4(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4AE560()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4AE5B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDBD0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC976C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4AE634(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_20B4AE658(uint64_t a1, void *lpsrc)
{
  void *v4;
  float result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  char *v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE328, 0);
  if (v4)
  {
    sub_20AFEB8B4(a1 + 8, (uint64_t)v4 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 32);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v17 = *(_OWORD *)v23;
    v18 = v8;
    v19 = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x20BD3583C](v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v11;
    v13 = v11;
    v14 = v23;
    v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v12;
    v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v23 = v9;
    *((_QWORD *)&v23 + 1) = v14;
    v24 = v15;
    v25 = v16;
    v26 = HIDWORD(v12);
    v27 = v13;
    v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if ((_DWORD)v16 == 1 && DWORD1(v18) == 1)
    {
      sub_20AFC9A3C(v20);
    }
    else
    {
      v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17))
      {
        if ((_DWORD)v18)
        {
          v22 = &v21;
          return sub_20AFEB5FC((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20B4AE880(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4AE888@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 32
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AEA00@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 32
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AEB78(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4AEBA8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4AEBE8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t *v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FDC50;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = (size_t *)(a1 + 64);
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if ((v9 & (v9 - 1)) != 0)
    v15 = 1;
  else
    v15 = v9;
  sub_20B4C7C4C(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4AED10()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4AED64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDC50;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC6680(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4AEDE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_20B4AEE08(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE340, 0);
  if (v4)
  {
    sub_20AFEA678(a1 + 8, (uint64_t)v4 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 33);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x20BD3583C](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (size_t)&v16;
    v19[1] = (size_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_20AFE5D88(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_20AFEA3E0((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_20B4AF030(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4AF038@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 33
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AF1B0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 33
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AF328(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4AF358(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4AF398(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FDCD0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C810C(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4AF4C8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4AF51C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDCD0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC7914(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4AF59C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_20B4AF5C0(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE358, 0);
  if (v4)
  {
    sub_20AFEABB4(a1 + 8, (uint64_t)v4 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 34);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x20BD3583C](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (uint64_t)&v16;
    v19[1] = (uint64_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_20AFC7BE4(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_20AFEA8F4((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_20B4AF7E8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4AF7F0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 34
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AF968@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 34
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4AFAE0(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_20B4AFB84(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4AFC28(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4AFCDC(uint64_t a1, uint64_t a2, _WORD *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FDD50;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C8A08(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4AFE0C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4AFE60@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDD50;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC8C3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4AFEE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_20B4AFF04(uint64_t a1, void *lpsrc)
{
  char *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  _QWORD v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE370, 0);
  if (v4)
  {
    sub_20AFEB1C0(a1 + 8, (__int128 *)(v4 + 8));
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 35);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v21[0] = *(_OWORD *)v23;
    v21[1] = v8;
    v21[2] = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x20BD3583C](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
    v13 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v14 = *(_DWORD *)(a1 + 32) == 0;
    else
      v14 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v15;
    v17 = v15;
    v18 = v23;
    v19 = HIDWORD(v15);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v16;
    v20 = v23;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v18;
    v24 = v19;
    v25 = v20;
    v26 = HIDWORD(v16);
    v27 = v17;
    v28 = v16;
    v22[0] = v21;
    v22[1] = &v23;
    return sub_20AFEAE58(v22);
  }
  return result;
}

uint64_t sub_20B4B00E0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4B00E8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 35
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4B0260@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 35
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4B03D8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4B0408(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4B0448(uint64_t a1, uint64_t a2, const float *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FDDD0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0)
    v15 = 4;
  else
    v15 = 4 * v9;
  sub_20B4C8FD4(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4B0574()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4B05C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDDD0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC976C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4B0648(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_20B4B066C(uint64_t a1, void *lpsrc)
{
  void *v4;
  float result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  char *v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE388, 0);
  if (v4)
  {
    sub_20AFEB8B4(a1 + 8, (uint64_t)v4 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 36);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v17 = *(_OWORD *)v23;
    v18 = v8;
    v19 = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x20BD3583C](v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v11;
    v13 = v11;
    v14 = v23;
    v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v12;
    v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v23 = v9;
    *((_QWORD *)&v23 + 1) = v14;
    v24 = v15;
    v25 = v16;
    v26 = HIDWORD(v12);
    v27 = v13;
    v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if ((_DWORD)v16 == 1 && DWORD1(v18) == 1)
    {
      sub_20AFC9A3C(v20);
    }
    else
    {
      v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17))
      {
        if ((_DWORD)v18)
        {
          v22 = &v21;
          return sub_20AFEB5FC((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20B4B0894(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4B089C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 36
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4B0A14@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 36
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4B0B8C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4B0BBC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4B0BFC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t *v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FDE50;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = (size_t *)(a1 + 64);
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if ((v9 & (v9 - 1)) != 0)
    v15 = 1;
  else
    v15 = v9;
  sub_20B4C7C4C(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4B0D24()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4B0D78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDE50;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC6680(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4B0DF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_20B4B0E1C(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE3A0, 0);
  if (v4)
  {
    sub_20AFEA678(a1 + 8, (uint64_t)v4 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 37);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x20BD3583C](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (size_t)&v16;
    v19[1] = (size_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_20AFE5D88(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_20AFEA3E0((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_20B4B1044(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4B104C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 37
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4B11C4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 37
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4B133C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4B136C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4B13AC(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FDED0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C810C(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4B14DC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4B1530@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDED0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC7914(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4B15B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_20B4B15D4(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE3B8, 0);
  if (v4)
  {
    sub_20AFEABB4(a1 + 8, (uint64_t)v4 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 38);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x20BD3583C](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (uint64_t)&v16;
    v19[1] = (uint64_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_20AFC7BE4(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_20AFEA8F4((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_20B4B17FC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4B1804@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 38
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4B197C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 38
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4B1AF4(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_20B4B1B98(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4B1C3C(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4B1CF0(uint64_t a1, uint64_t a2, _WORD *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FDF50;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0)
    v15 = 2;
  else
    v15 = 2 * v9;
  sub_20B4C8A08(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4B1E20()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4B1E74@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDF50;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC8C3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4B1EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_20B4B1F18(uint64_t a1, void *lpsrc)
{
  char *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  _QWORD v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE3D0, 0);
  if (v4)
  {
    sub_20AFEB1C0(a1 + 8, (__int128 *)(v4 + 8));
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 39);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v21[0] = *(_OWORD *)v23;
    v21[1] = v8;
    v21[2] = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x20BD3583C](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
    v13 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v14 = *(_DWORD *)(a1 + 32) == 0;
    else
      v14 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v15;
    v17 = v15;
    v18 = v23;
    v19 = HIDWORD(v15);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v16;
    v20 = v23;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v18;
    v24 = v19;
    v25 = v20;
    v26 = HIDWORD(v16);
    v27 = v17;
    v28 = v16;
    v22[0] = v21;
    v22[1] = &v23;
    return sub_20AFEAE58(v22);
  }
  return result;
}

uint64_t sub_20B4B20F4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4B20FC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 39
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4B2274@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 39
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4B23EC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B4B241C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4B245C(uint64_t a1, uint64_t a2, const float *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C3FDFD0;
  if (*(_DWORD *)(a2 + 28))
    v4 = *(_DWORD *)(a2 + 24) == 0;
  else
    v4 = 1;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  v8 = *(_QWORD *)v19;
  v9 = HIDWORD(v5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(_QWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = a1 + 64;
  *(_QWORD *)v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v6) == 0;
  if (v12)
    v13 = 0;
  else
    v13 = v7;
  v17 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v6);
  v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0)
    v15 = 4;
  else
    v15 = 4 * v9;
  sub_20B4C8FD4(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

_UNKNOWN **sub_20B4B2588()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CB40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CB40))
    return &off_253EC31D8;
  __cxa_guard_release(&qword_25463CB40);
  return &off_253EC31D8;
}

uint64_t sub_20B4B25DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDFD0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_20AFC976C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20B4B265C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_20B4B2680(uint64_t a1, void *lpsrc)
{
  void *v4;
  float result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  char *v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FE3E8, 0);
  if (v4)
  {
    sub_20AFEB8B4(a1 + 8, (uint64_t)v4 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 40);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v17 = *(_OWORD *)v23;
    v18 = v8;
    v19 = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x20BD3583C](v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v11;
    v13 = v11;
    v14 = v23;
    v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v12;
    v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)&v23 = v9;
    *((_QWORD *)&v23 + 1) = v14;
    v24 = v15;
    v25 = v16;
    v26 = HIDWORD(v12);
    v27 = v13;
    v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if ((_DWORD)v16 == 1 && DWORD1(v18) == 1)
    {
      sub_20AFC9A3C(v20);
    }
    else
    {
      v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17))
      {
        if ((_DWORD)v18)
        {
          v22 = &v21;
          return sub_20AFEB5FC((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20B4B28A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B4B28B0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 40
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20B4B2A28@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 40
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

void sub_20B4B2BA0(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  void *memptr;

  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  if (v3)
    v4 = 0;
  else
    v4 = *(_QWORD *)a1;
  if (HIDWORD(v4))
    v5 = v4 << 32;
  else
    v5 = 0;
  if ((_DWORD)v4)
    v6 = HIDWORD(v4) == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v8 = (HIDWORD(v7) * HIDWORD(v5));
  if ((HIDWORD(v5) & (HIDWORD(v5) - 1)) != 0)
    v9 = 0;
  else
    v9 = HIDWORD(v5) - 1;
  v10 = v9 | (v9 >> 1) | ((v9 | (v9 >> 1)) >> 2);
  v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  v12 = v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32);
  if (v12 + 1 > 8)
    v13 = v12 + 1;
  else
    v13 = 8;
  if ((_DWORD)v8)
  {
    memptr = 0;
    v14 = malloc_type_posix_memalign(&memptr, v13, (HIDWORD(v7) * HIDWORD(v5)), 0x1F88E90uLL);
    if (v14)
      sub_20B525948(v14, v13, (HIDWORD(v7) * HIDWORD(v5)));
    v15 = memptr;
  }
  else
  {
    v15 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FCC50;
  *(_QWORD *)(a2 + 8) = v4;
  v16 = v5 | (v4 != 0);
  *(_QWORD *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 48) = v15;
  *(_QWORD *)(a2 + 56) = v13;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 72) = v16;
}

void sub_20B4B2CB8(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  int v16;
  void *v17;
  void *memptr;

  if (*((_DWORD *)a1 + 1))
    v3 = *(_DWORD *)a1 == 0;
  else
    v3 = 1;
  v4 = a1[1];
  if (v3)
    v5 = 0;
  else
    v5 = *a1;
  if ((_DWORD)v5)
    v6 = HIDWORD(v5) == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = v5;
  v8 = (v4 >> 31) & 0x1FFFFFFFELL;
  v9 = HIDWORD(v7) * v8;
  if ((v8 & (v8 - 1)) != 0)
    v10 = 1;
  else
    v10 = v8 - 1;
  v11 = v10 | (v10 >> 1) | ((v10 | (v10 >> 1)) >> 2);
  v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
  v13 = v12 | (v12 >> 16) | ((v12 | (v12 >> 16)) >> 32);
  if (v13 + 1 > 8)
    v14 = v13 + 1;
  else
    v14 = 8;
  v15 = v9 & 0x1FFFFFFFELL;
  if ((v9 & 0x1FFFFFFFELL) != 0)
  {
    memptr = 0;
    v16 = malloc_type_posix_memalign(&memptr, v14, v9 & 0x1FFFFFFFELL, 0x1F88E90uLL);
    if (v16)
      sub_20B525948(v16, v14, v15);
    v17 = memptr;
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FCCD0;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v15;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v14;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 72) = (2 * v4) & 0xFFFFFFFEFFFFFFFELL;
}

void sub_20B4B2DC0(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *memptr;

  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  if (v3)
    v4 = 0;
  else
    v4 = *(_QWORD *)a1;
  if (HIDWORD(v4))
    v5 = v4 << 32;
  else
    v5 = 0;
  if ((_DWORD)v4)
    v6 = HIDWORD(v4) == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v8 = HIDWORD(v7) * (v5 >> 31);
  if (((v5 >> 31) & ((v5 >> 31) - 1)) != 0)
    v9 = 1;
  else
    v9 = (v5 >> 31) - 1;
  v10 = v9 | (v9 >> 1) | ((v9 | (v9 >> 1)) >> 2);
  v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  v12 = v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32);
  if (v12 + 1 > 8)
    v13 = v12 + 1;
  else
    v13 = 8;
  v14 = v8 & 0x1FFFFFFFELL;
  if ((v8 & 0x1FFFFFFFELL) != 0)
  {
    memptr = 0;
    v15 = malloc_type_posix_memalign(&memptr, v13, v8 & 0x1FFFFFFFELL, 0x1F88E90uLL);
    if (v15)
      sub_20B525948(v15, v13, v14);
    v16 = memptr;
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FCCD0;
  *(_QWORD *)(a2 + 8) = v4;
  v17 = v5 | (v4 != 0);
  *(_QWORD *)(a2 + 16) = v17;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v13;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 72) = 2 * v17;
}

void sub_20B4B2EE0(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  int v17;
  void *v18;
  void *memptr;

  if (*((_DWORD *)a1 + 1))
    v3 = *(_DWORD *)a1 == 0;
  else
    v3 = 1;
  v4 = a1[1];
  if (v3)
    v5 = 0;
  else
    v5 = *a1;
  if ((_DWORD)v5)
    v6 = HIDWORD(v5) == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = v5;
  v8 = (v4 >> 30) & 0x3FFFFFFFCLL;
  v9 = v8 - 1;
  v10 = HIDWORD(v7) * v8;
  v3 = (v8 & (v8 - 1)) == 0;
  v11 = 3;
  if (v3)
    v11 = v9;
  v12 = v11 | (v11 >> 1) | ((v11 | (v11 >> 1)) >> 2);
  v13 = v12 | (v12 >> 4) | ((v12 | (v12 >> 4)) >> 8);
  v14 = v13 | (v13 >> 16) | ((v13 | (v13 >> 16)) >> 32);
  if (v14 + 1 > 8)
    v15 = v14 + 1;
  else
    v15 = 8;
  v16 = v10 & 0x3FFFFFFFCLL;
  if ((v10 & 0x3FFFFFFFCLL) != 0)
  {
    memptr = 0;
    v17 = malloc_type_posix_memalign(&memptr, v15, v10 & 0x3FFFFFFFCLL, 0x1F88E90uLL);
    if (v17)
      sub_20B525948(v17, v15, v16);
    v18 = memptr;
  }
  else
  {
    v18 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FCDD0;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v16;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v15;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 72) = (4 * v4) & 0xFFFFFFFCFFFFFFFCLL;
}

void sub_20B4B2FEC(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *memptr;

  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  if (v3)
    v4 = 0;
  else
    v4 = *(_QWORD *)a1;
  if (HIDWORD(v4))
    v5 = v4 << 32;
  else
    v5 = 0;
  if ((_DWORD)v4)
    v6 = HIDWORD(v4) == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v8 = HIDWORD(v7) * (v5 >> 30);
  v9 = 3;
  if (((v5 >> 30) & ((v5 >> 30) - 1)) == 0)
    v9 = (v5 >> 30) - 1;
  v10 = v9 | (v9 >> 1) | ((v9 | (v9 >> 1)) >> 2);
  v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  v12 = v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32);
  if (v12 + 1 > 8)
    v13 = v12 + 1;
  else
    v13 = 8;
  v14 = v8 & 0x3FFFFFFFCLL;
  if ((v8 & 0x3FFFFFFFCLL) != 0)
  {
    memptr = 0;
    v15 = malloc_type_posix_memalign(&memptr, v13, v8 & 0x3FFFFFFFCLL, 0x1F88E90uLL);
    if (v15)
      sub_20B525948(v15, v13, v14);
    v16 = memptr;
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FCDD0;
  *(_QWORD *)(a2 + 8) = v4;
  v17 = v5 | (v4 != 0);
  *(_QWORD *)(a2 + 16) = v17;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v13;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 72) = 4 * v17;
}

void sub_20B4B3110(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 2;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  v15 = v10 - 1;
  v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * HIDWORD(v5)));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FCE50;
  *(_QWORD *)(a2 + 8) = v7;
  if (v13)
    v23 = 0;
  else
    v23 = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_20B4B32B4@<D0>(_DWORD *a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  size_t *v15;
  __int128 v16;
  size_t v17;
  size_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  size_t v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 2;
  *(_QWORD *)&v24[4] = v5;
  v6 = 2 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 2);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 2) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 2);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if ((v7 & (v7 - 1)) != 0)
    v14 = 1;
  else
    v14 = v7;
  v15 = sub_20B4C7C4C(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FCE50;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4B3430(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 2;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 2 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v8 >> 1) << 33);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 2);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 2) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FCE50;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_20B4B35F0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 2;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  if (((2 * v10) & (2 * v10 - 1)) != 0)
    v15 = 1;
  else
    v15 = 2 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 2 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FCED0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_20B4B37A8@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 2;
  *(_QWORD *)&v24[4] = v5;
  v6 = 2 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 2);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 2) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 2);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C810C((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FCED0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4B3928@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
    v5 = 0;
  *(_QWORD *)&v23[4] = v5;
  v6 = HIDWORD(v4);
  *(_DWORD *)v23 = 2;
  v7 = *(_QWORD *)v23;
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  v8 = *(_QWORD *)v23;
  *(_QWORD *)v23 = v7;
  *(_QWORD *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(_QWORD *)&v23[24] = v5;
  *(_QWORD *)&v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v8;
  v22 = HIDWORD(v4);
  if (HIDWORD(v7))
    v9 = (_DWORD)v7 == 0;
  else
    v9 = 1;
  v10 = v9 || HIDWORD(v5) == 0;
  if (v10)
    v11 = 0;
  else
    v11 = v7;
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = HIDWORD(v5);
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FCF50;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_20B4B3A8C@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 2;
  *(_QWORD *)&v24[4] = v5;
  v6 = 2 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 2);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 2) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 2);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C8A08((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FCF50;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4B3C0C@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 2;
  *(_QWORD *)&v23[4] = v4;
  v5 = 2 * ((_DWORD)v4 != 0);
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 & 0x1FFFFFFFFLL | ((unint64_t)(v6 >> 1) << 33);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 2);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 2) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 2);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FCF50;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_20B4B3D8C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 2;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  v15 = 3;
  if (((4 * v10) & (4 * v10 - 1)) == 0)
    v15 = 4 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 4 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FCFD0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_20B4B3F48@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 2;
  *(_QWORD *)&v24[4] = v5;
  v6 = 2 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 2);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 2) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 2);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0)
    v14 = 4;
  else
    v14 = 4 * v7;
  v15 = (uint64_t *)sub_20B4C8FD4((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FCFD0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4B40CC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  v15 = v10 - 1;
  v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * HIDWORD(v5)));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FD050;
  *(_QWORD *)(a2 + 8) = v7;
  if (v13)
    v23 = 0;
  else
    v23 = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_20B4B4270@<D0>(_DWORD *a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  size_t *v15;
  __int128 v16;
  size_t v17;
  size_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  size_t v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 3;
  *(_QWORD *)&v24[4] = v5;
  if ((_DWORD)v5)
    v6 = 3;
  else
    v6 = 0;
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 | (v7 << 32);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 3) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 3);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if ((v7 & (v7 - 1)) != 0)
    v14 = 1;
  else
    v14 = v7;
  v15 = sub_20B4C7C4C(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD050;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4B43E4(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  if ((_DWORD)v4)
    v6 = 3;
  else
    v6 = 0;
  v7 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v8 = (v6 * *(_DWORD *)&memptr[4]);
  else
    v8 = 0;
  v9 = v6 | (v8 << 32);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 3) >> 32)
    v12 = (_DWORD)v7 == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = v7;
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FD050;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_20B4B459C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  if (((2 * v10) & (2 * v10 - 1)) != 0)
    v15 = 1;
  else
    v15 = 2 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 2 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FD0D0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_20B4B4754@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 3;
  *(_QWORD *)&v24[4] = v5;
  if ((_DWORD)v5)
    v6 = 3;
  else
    v6 = 0;
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 | (v7 << 32);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 3) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 3);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C810C((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD0D0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4B48D0@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
    v5 = 0;
  *(_QWORD *)&v23[4] = v5;
  v6 = HIDWORD(v4);
  *(_DWORD *)v23 = 3;
  v7 = *(_QWORD *)v23;
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  v8 = *(_QWORD *)v23;
  *(_QWORD *)v23 = v7;
  *(_QWORD *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(_QWORD *)&v23[24] = v5;
  *(_QWORD *)&v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v8;
  v22 = HIDWORD(v4);
  if (HIDWORD(v7))
    v9 = (_DWORD)v7 == 0;
  else
    v9 = 1;
  v10 = v9 || HIDWORD(v5) == 0;
  if (v10)
    v11 = 0;
  else
    v11 = v7;
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = HIDWORD(v5);
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FD150;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_20B4B4A38@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 3;
  *(_QWORD *)&v24[4] = v5;
  if ((_DWORD)v5)
    v6 = 3;
  else
    v6 = 0;
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 | (v7 << 32);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 3) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 3);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C8A08((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD150;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4B4BB4@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 3;
  *(_QWORD *)&v23[4] = v4;
  if ((_DWORD)v4)
    v5 = 3;
  else
    v5 = 0;
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 | (v6 << 32);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 3);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 3) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 3);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FD150;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_20B4B4D30(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  if (((4 * v10) & (4 * v10 - 1)) != 0)
    v15 = 3;
  else
    v15 = 4 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 4 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FD1D0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_20B4B4EE8@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 3;
  *(_QWORD *)&v24[4] = v5;
  if ((_DWORD)v5)
    v6 = 3;
  else
    v6 = 0;
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 | (v7 << 32);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 3) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 3);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0)
    v14 = 4;
  else
    v14 = 4 * v7;
  v15 = (uint64_t *)sub_20B4C8FD4((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD1D0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4B5064(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  v15 = v10 - 1;
  v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * HIDWORD(v5)));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FD250;
  *(_QWORD *)(a2 + 8) = v7;
  if (v13)
    v23 = 0;
  else
    v23 = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_20B4B5208@<D0>(_DWORD *a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  size_t *v15;
  __int128 v16;
  size_t v17;
  size_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  size_t v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if ((v7 & (v7 - 1)) != 0)
    v14 = 1;
  else
    v14 = v7;
  v15 = sub_20B4C7C4C(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD250;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4B5384(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 4 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 4) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FD250;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_20B4B5544(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  if (((2 * v10) & (2 * v10 - 1)) != 0)
    v15 = 1;
  else
    v15 = 2 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 2 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FD2D0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_20B4B56FC@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C810C((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD2D0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4B5880@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
    v5 = 0;
  *(_QWORD *)&v23[4] = v5;
  v6 = HIDWORD(v4);
  *(_DWORD *)v23 = 4;
  v7 = *(_QWORD *)v23;
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  v8 = *(_QWORD *)v23;
  *(_QWORD *)v23 = v7;
  *(_QWORD *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(_QWORD *)&v23[24] = v5;
  *(_QWORD *)&v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v8;
  v22 = HIDWORD(v4);
  if (HIDWORD(v7))
    v9 = (_DWORD)v7 == 0;
  else
    v9 = 1;
  v10 = v9 || HIDWORD(v5) == 0;
  if (v10)
    v11 = 0;
  else
    v11 = v7;
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = HIDWORD(v5);
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FD350;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_20B4B59E8@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C8A08((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD350;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4B5B6C@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 4;
  *(_QWORD *)&v23[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 4);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 4) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 4);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FD350;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_20B4B5CF0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  v15 = 3;
  if (((4 * v10) & (4 * v10 - 1)) == 0)
    v15 = 4 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 4 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FD3D0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_20B4B5EAC@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0)
    v14 = 4;
  else
    v14 = 4 * v7;
  v15 = (uint64_t *)sub_20B4C8FD4((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD3D0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4B602C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  v15 = v10 - 1;
  v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * HIDWORD(v5)));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FD450;
  *(_QWORD *)(a2 + 8) = v7;
  if (v13)
    v23 = 0;
  else
    v23 = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_20B4B61D0@<D0>(_DWORD *a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  size_t *v15;
  __int128 v16;
  size_t v17;
  size_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  size_t v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 3;
  *(_QWORD *)&v24[4] = v5;
  if ((_DWORD)v5)
    v6 = 3;
  else
    v6 = 0;
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 | (v7 << 32);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 3) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 3);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if ((v7 & (v7 - 1)) != 0)
    v14 = 1;
  else
    v14 = v7;
  v15 = sub_20B4C7C4C(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD450;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4B6344(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  if ((_DWORD)v4)
    v6 = 3;
  else
    v6 = 0;
  v7 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v8 = (v6 * *(_DWORD *)&memptr[4]);
  else
    v8 = 0;
  v9 = v6 | (v8 << 32);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 3) >> 32)
    v12 = (_DWORD)v7 == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = v7;
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FD450;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_20B4B64FC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  if (((2 * v10) & (2 * v10 - 1)) != 0)
    v15 = 1;
  else
    v15 = 2 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 2 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FD4D0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_20B4B66B4@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 3;
  *(_QWORD *)&v24[4] = v5;
  if ((_DWORD)v5)
    v6 = 3;
  else
    v6 = 0;
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 | (v7 << 32);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 3) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 3);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C810C((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD4D0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4B6830@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
    v5 = 0;
  *(_QWORD *)&v23[4] = v5;
  v6 = HIDWORD(v4);
  *(_DWORD *)v23 = 3;
  v7 = *(_QWORD *)v23;
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  v8 = *(_QWORD *)v23;
  *(_QWORD *)v23 = v7;
  *(_QWORD *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(_QWORD *)&v23[24] = v5;
  *(_QWORD *)&v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v8;
  v22 = HIDWORD(v4);
  if (HIDWORD(v7))
    v9 = (_DWORD)v7 == 0;
  else
    v9 = 1;
  v10 = v9 || HIDWORD(v5) == 0;
  if (v10)
    v11 = 0;
  else
    v11 = v7;
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = HIDWORD(v5);
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FD550;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_20B4B6998@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 3;
  *(_QWORD *)&v24[4] = v5;
  if ((_DWORD)v5)
    v6 = 3;
  else
    v6 = 0;
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 | (v7 << 32);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 3) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 3);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C8A08((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD550;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4B6B14@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 3;
  *(_QWORD *)&v23[4] = v4;
  if ((_DWORD)v4)
    v5 = 3;
  else
    v5 = 0;
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 | (v6 << 32);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 3);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 3) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 3);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FD550;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_20B4B6C90(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  if (((4 * v10) & (4 * v10 - 1)) != 0)
    v15 = 3;
  else
    v15 = 4 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 4 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FD5D0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_20B4B6E48@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 3;
  *(_QWORD *)&v24[4] = v5;
  if ((_DWORD)v5)
    v6 = 3;
  else
    v6 = 0;
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 | (v7 << 32);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 3) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 3);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0)
    v14 = 4;
  else
    v14 = 4 * v7;
  v15 = (uint64_t *)sub_20B4C8FD4((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD5D0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4B6FC4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  v15 = v10 - 1;
  v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * HIDWORD(v5)));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FD650;
  *(_QWORD *)(a2 + 8) = v7;
  if (v13)
    v23 = 0;
  else
    v23 = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_20B4B7168@<D0>(_DWORD *a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  size_t *v15;
  __int128 v16;
  size_t v17;
  size_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  size_t v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 3;
  *(_QWORD *)&v24[4] = v5;
  if ((_DWORD)v5)
    v6 = 3;
  else
    v6 = 0;
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 | (v7 << 32);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 3) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 3);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if ((v7 & (v7 - 1)) != 0)
    v14 = 1;
  else
    v14 = v7;
  v15 = sub_20B4C7C4C(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD650;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4B72DC(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  if ((_DWORD)v4)
    v6 = 3;
  else
    v6 = 0;
  v7 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v8 = (v6 * *(_DWORD *)&memptr[4]);
  else
    v8 = 0;
  v9 = v6 | (v8 << 32);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 3) >> 32)
    v12 = (_DWORD)v7 == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = v7;
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FD650;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_20B4B7494(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  if (((2 * v10) & (2 * v10 - 1)) != 0)
    v15 = 1;
  else
    v15 = 2 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 2 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FD6D0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_20B4B764C@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 3;
  *(_QWORD *)&v24[4] = v5;
  if ((_DWORD)v5)
    v6 = 3;
  else
    v6 = 0;
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 | (v7 << 32);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 3) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 3);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C810C((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD6D0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4B77C8@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
    v5 = 0;
  *(_QWORD *)&v23[4] = v5;
  v6 = HIDWORD(v4);
  *(_DWORD *)v23 = 3;
  v7 = *(_QWORD *)v23;
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  v8 = *(_QWORD *)v23;
  *(_QWORD *)v23 = v7;
  *(_QWORD *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(_QWORD *)&v23[24] = v5;
  *(_QWORD *)&v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v8;
  v22 = HIDWORD(v4);
  if (HIDWORD(v7))
    v9 = (_DWORD)v7 == 0;
  else
    v9 = 1;
  v10 = v9 || HIDWORD(v5) == 0;
  if (v10)
    v11 = 0;
  else
    v11 = v7;
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = HIDWORD(v5);
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FD750;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_20B4B7930@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 3;
  *(_QWORD *)&v24[4] = v5;
  if ((_DWORD)v5)
    v6 = 3;
  else
    v6 = 0;
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 | (v7 << 32);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 3) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 3);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C8A08((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD750;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4B7AAC@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 3;
  *(_QWORD *)&v23[4] = v4;
  if ((_DWORD)v4)
    v5 = 3;
  else
    v5 = 0;
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 | (v6 << 32);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 3);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 3) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 3);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FD750;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_20B4B7C28(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  if (((4 * v10) & (4 * v10 - 1)) != 0)
    v15 = 3;
  else
    v15 = 4 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 4 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FD7D0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_20B4B7DE0@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 3;
  *(_QWORD *)&v24[4] = v5;
  if ((_DWORD)v5)
    v6 = 3;
  else
    v6 = 0;
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 | (v7 << 32);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 3) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 3);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0)
    v14 = 4;
  else
    v14 = 4 * v7;
  v15 = (uint64_t *)sub_20B4C8FD4((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD7D0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4B7F5C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  v15 = v10 - 1;
  v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * HIDWORD(v5)));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FD850;
  *(_QWORD *)(a2 + 8) = v7;
  if (v13)
    v23 = 0;
  else
    v23 = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_20B4B8100@<D0>(_DWORD *a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  size_t *v15;
  __int128 v16;
  size_t v17;
  size_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  size_t v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if ((v7 & (v7 - 1)) != 0)
    v14 = 1;
  else
    v14 = v7;
  v15 = sub_20B4C7C4C(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD850;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4B827C(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 4 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 4) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FD850;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_20B4B843C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  if (((2 * v10) & (2 * v10 - 1)) != 0)
    v15 = 1;
  else
    v15 = 2 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 2 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FD8D0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_20B4B85F4@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C810C((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD8D0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4B8778@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
    v5 = 0;
  *(_QWORD *)&v23[4] = v5;
  v6 = HIDWORD(v4);
  *(_DWORD *)v23 = 4;
  v7 = *(_QWORD *)v23;
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  v8 = *(_QWORD *)v23;
  *(_QWORD *)v23 = v7;
  *(_QWORD *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(_QWORD *)&v23[24] = v5;
  *(_QWORD *)&v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v8;
  v22 = HIDWORD(v4);
  if (HIDWORD(v7))
    v9 = (_DWORD)v7 == 0;
  else
    v9 = 1;
  v10 = v9 || HIDWORD(v5) == 0;
  if (v10)
    v11 = 0;
  else
    v11 = v7;
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = HIDWORD(v5);
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FD950;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_20B4B88E0@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C8A08((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD950;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4B8A64@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 4;
  *(_QWORD *)&v23[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 4);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 4) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 4);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FD950;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_20B4B8BE8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  v15 = 3;
  if (((4 * v10) & (4 * v10 - 1)) == 0)
    v15 = 4 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 4 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FD9D0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_20B4B8DA4@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0)
    v14 = 4;
  else
    v14 = 4 * v7;
  v15 = (uint64_t *)sub_20B4C8FD4((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FD9D0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4B8F24(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  v15 = v10 - 1;
  v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * HIDWORD(v5)));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FDA50;
  *(_QWORD *)(a2 + 8) = v7;
  if (v13)
    v23 = 0;
  else
    v23 = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_20B4B90C8@<D0>(_DWORD *a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  size_t *v15;
  __int128 v16;
  size_t v17;
  size_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  size_t v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if ((v7 & (v7 - 1)) != 0)
    v14 = 1;
  else
    v14 = v7;
  v15 = sub_20B4C7C4C(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FDA50;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4B9244(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 4 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 4) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FDA50;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_20B4B9404(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  if (((2 * v10) & (2 * v10 - 1)) != 0)
    v15 = 1;
  else
    v15 = 2 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 2 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FDAD0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_20B4B95BC@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C810C((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FDAD0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4B9740@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
    v5 = 0;
  *(_QWORD *)&v23[4] = v5;
  v6 = HIDWORD(v4);
  *(_DWORD *)v23 = 4;
  v7 = *(_QWORD *)v23;
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  v8 = *(_QWORD *)v23;
  *(_QWORD *)v23 = v7;
  *(_QWORD *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(_QWORD *)&v23[24] = v5;
  *(_QWORD *)&v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v8;
  v22 = HIDWORD(v4);
  if (HIDWORD(v7))
    v9 = (_DWORD)v7 == 0;
  else
    v9 = 1;
  v10 = v9 || HIDWORD(v5) == 0;
  if (v10)
    v11 = 0;
  else
    v11 = v7;
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = HIDWORD(v5);
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FDB50;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_20B4B98A8@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C8A08((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FDB50;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4B9A2C@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 4;
  *(_QWORD *)&v23[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 4);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 4) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 4);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FDB50;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_20B4B9BB0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  v15 = 3;
  if (((4 * v10) & (4 * v10 - 1)) == 0)
    v15 = 4 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 4 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FDBD0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_20B4B9D6C@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0)
    v14 = 4;
  else
    v14 = 4 * v7;
  v15 = (uint64_t *)sub_20B4C8FD4((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FDBD0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4B9EEC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  v15 = v10 - 1;
  v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * HIDWORD(v5)));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FDC50;
  *(_QWORD *)(a2 + 8) = v7;
  if (v13)
    v23 = 0;
  else
    v23 = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_20B4BA090@<D0>(_DWORD *a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  size_t *v15;
  __int128 v16;
  size_t v17;
  size_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  size_t v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if ((v7 & (v7 - 1)) != 0)
    v14 = 1;
  else
    v14 = v7;
  v15 = sub_20B4C7C4C(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FDC50;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4BA20C(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 4 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 4) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FDC50;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_20B4BA3CC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  if (((2 * v10) & (2 * v10 - 1)) != 0)
    v15 = 1;
  else
    v15 = 2 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 2 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FDCD0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_20B4BA584@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C810C((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FDCD0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4BA708@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
    v5 = 0;
  *(_QWORD *)&v23[4] = v5;
  v6 = HIDWORD(v4);
  *(_DWORD *)v23 = 4;
  v7 = *(_QWORD *)v23;
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  v8 = *(_QWORD *)v23;
  *(_QWORD *)v23 = v7;
  *(_QWORD *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(_QWORD *)&v23[24] = v5;
  *(_QWORD *)&v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v8;
  v22 = HIDWORD(v4);
  if (HIDWORD(v7))
    v9 = (_DWORD)v7 == 0;
  else
    v9 = 1;
  v10 = v9 || HIDWORD(v5) == 0;
  if (v10)
    v11 = 0;
  else
    v11 = v7;
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = HIDWORD(v5);
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FDD50;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_20B4BA870@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C8A08((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FDD50;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4BA9F4@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 4;
  *(_QWORD *)&v23[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 4);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 4) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 4);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FDD50;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_20B4BAB78(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  v15 = 3;
  if (((4 * v10) & (4 * v10 - 1)) == 0)
    v15 = 4 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 4 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FDDD0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_20B4BAD34@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0)
    v14 = 4;
  else
    v14 = 4 * v7;
  v15 = (uint64_t *)sub_20B4C8FD4((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FDDD0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4BAEB4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  v15 = v10 - 1;
  v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * HIDWORD(v5)));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FDE50;
  *(_QWORD *)(a2 + 8) = v7;
  if (v13)
    v23 = 0;
  else
    v23 = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_20B4BB058@<D0>(_DWORD *a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  size_t *v15;
  __int128 v16;
  size_t v17;
  size_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  size_t v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if ((v7 & (v7 - 1)) != 0)
    v14 = 1;
  else
    v14 = v7;
  v15 = sub_20B4C7C4C(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FDE50;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_20B4BB1D4(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 4 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 4) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C3FDE50;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_20B4BB394(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  if (((2 * v10) & (2 * v10 - 1)) != 0)
    v15 = 1;
  else
    v15 = 2 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 2 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FDED0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_20B4BB54C@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C810C((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FDED0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4BB6D0@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
    v5 = 0;
  *(_QWORD *)&v23[4] = v5;
  v6 = HIDWORD(v4);
  *(_DWORD *)v23 = 4;
  v7 = *(_QWORD *)v23;
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  v8 = *(_QWORD *)v23;
  *(_QWORD *)v23 = v7;
  *(_QWORD *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(_QWORD *)&v23[24] = v5;
  *(_QWORD *)&v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v8;
  v22 = HIDWORD(v4);
  if (HIDWORD(v7))
    v9 = (_DWORD)v7 == 0;
  else
    v9 = 1;
  v10 = v9 || HIDWORD(v5) == 0;
  if (v10)
    v11 = 0;
  else
    v11 = v7;
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = HIDWORD(v5);
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FDF50;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_20B4BB838@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0)
    v14 = 2;
  else
    v14 = 2 * v7;
  v15 = (uint64_t *)sub_20B4C8A08((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FDF50;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_20B4BB9BC@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 4;
  *(_QWORD *)&v23[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 4);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 4) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 4);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_20B4C8A08((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C3FDF50;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_20B4BBB40(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 28))
    v3 = *(_DWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v6 = v4;
  v7 = *(_QWORD *)memptr;
  v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v5;
  v9 = *(_QWORD *)memptr;
  v10 = HIDWORD(v5);
  if (HIDWORD(v7))
    v11 = (_DWORD)v7 == 0;
  else
    v11 = 1;
  v12 = v11 || HIDWORD(v4) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v4);
  v15 = 3;
  if (((4 * v10) & (4 * v10 - 1)) == 0)
    v15 = 4 * v10 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v14 * HIDWORD(v5))
  {
    v23 = v13;
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, v19, 4 * (v14 * HIDWORD(v5)));
    v21 = *(_QWORD *)memptr;
    v13 = v23;
  }
  else
  {
    v21 = 0;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v7;
  *(_QWORD *)a2 = &off_24C3FDFD0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_20B4BBCFC@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  *(_DWORD *)v24 = 4;
  *(_QWORD *)&v24[4] = v5;
  v6 = 4 * ((_DWORD)v5 != 0);
  LODWORD(v7) = v6 * v5;
  v8 = HIDWORD(v5);
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  v10 = *(_QWORD *)v24;
  *(_QWORD *)v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(_QWORD *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(_QWORD *)&v24[24] = v5;
  *(_QWORD *)&v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  v22 = v10;
  v23 = v7;
  if (__PAIR64__(v5, 4) >> 32)
    v11 = HIDWORD(v5) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = __PAIR64__(v5, 4);
  v20 = v12;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0)
    v14 = 4;
  else
    v14 = 4 * v7;
  v15 = (uint64_t *)sub_20B4C8FD4((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(_QWORD *)a3 = &off_24C3FDFD0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 40) = v25;
  v17 = *v15;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v17;
  v18 = v27[2];
  *(_QWORD *)(a3 + 72) = v27[1];
  *(_QWORD *)(a3 + 80) = v18;
  *(_QWORD *)(a3 + 104) = v29;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

uint64_t sub_20B4BBE7C(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 24) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 28);
    if (v4 * (*(_QWORD *)(a1 + 32) >> 33) != -1)
      goto LABEL_11;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 8);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_20B4BBF18(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 28) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 24) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 32);
    if (v5 * (*(_DWORD *)(a1 + 44) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 8);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void sub_20B4BBFBC(int a1)
{
  __asm { BR              X10 }
}

void sub_20B4BBFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  _QWORD *v15;
  uint64_t (**v16)();
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t (**v35)();
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  int v39;
  __int16 v40;
  uint64_t (**v41)();
  uint64_t v42;
  std::__shared_weak_count *v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;

  v3 = *(_QWORD *)(a2 + 8);
  v35 = &off_24C4051D0;
  sub_20B2D6D24(v3, (uint64_t)&v36);
  v4 = v36;
  if (v36)
  {
    v5 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = v36;
      v9 = v37;
      if (v37)
      {
        v10 = (unint64_t *)&v37->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(uint64_t (***__return_ptr)(), uint64_t))(*(_QWORD *)v4 + 32))(&v41, v4);
    v13 = (*((uint64_t (**)(uint64_t (**)()))*v41 + 6))(v41);
    v14 = v41;
    if (v41)
    {
      v15 = (_QWORD *)operator new();
      v16 = v41;
      *v15 = &off_24C403F88;
      v15[1] = 0;
      v15[2] = 0;
      v15[3] = v16;
    }
    else
    {
      v15 = 0;
    }
    v22 = v38;
    v23 = v39;
    v24 = v40;
    *(_QWORD *)v2 = v14;
    *(_QWORD *)(v2 + 8) = v15;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = v22;
    *(_DWORD *)(v2 + 32) = v23;
    *(_QWORD *)(v2 + 40) = v13;
    *(_DWORD *)(v2 + 48) = 1;
    *(_WORD *)(v2 + 52) = v24;
  }
  else
  {
    v41 = &off_24C405088;
    sub_20B037370((uint64_t)&v35, (uint64_t)&v42);
    v17 = v42;
    v18 = v43;
    if (v43)
    {
      v19 = (unint64_t *)&v43->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = v43;
    }
    else
    {
      v21 = 0;
    }
    v28 = v48;
    if (v45)
      v29 = v44 | 0x100000000;
    else
      v29 = 0;
    v30 = v47;
    v31 = v46;
    v32 = v49;
    *(_QWORD *)v2 = v17;
    *(_QWORD *)(v2 + 8) = v18;
    *(_QWORD *)(v2 + 16) = v29;
    *(_QWORD *)(v2 + 24) = v30;
    *(_DWORD *)(v2 + 32) = v28;
    *(_QWORD *)(v2 + 40) = v31;
    *(_DWORD *)(v2 + 48) = 1;
    *(_WORD *)(v2 + 52) = v32;
    if (v21)
    {
      v33 = (unint64_t *)&v21->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v25 = v37;
  if (v37)
  {
    v26 = (unint64_t *)&v37->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_20B4C15FC()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B4C1630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

size_t *sub_20B4C20F0(size_t *a1, _DWORD *a2, void **a3, char a4, void **a5, char a6, uint64_t a7)
{
  void *v11;
  int v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  int v19;
  void *v20;
  unint64_t v21;
  BOOL v22;
  void *memptr[3];
  void **v25[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (void *)((*a2 != 0) | (unint64_t)(v13 << 32));
  }
  v14 = (v12 * HIDWORD(v11));
  v15 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
  v17 = v16 | (v16 >> 16) | ((v16 | (v16 >> 16)) >> 32);
  if (v17 + 1 > 8)
    v18 = v17 + 1;
  else
    v18 = 8;
  *a1 = v14;
  a1[1] = 0;
  a1[2] = v18;
  if ((_DWORD)v14)
  {
    memptr[0] = 0;
    v19 = malloc_type_posix_memalign(memptr, v18, v14, 0x1F88E90uLL);
    if (v19)
      sub_20B525948(v19, a1[2], v14);
    v20 = memptr[0];
    a1[1] = (size_t)memptr[0];
    v21 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (size_t)v11;
    if (v20 && a6)
    {
      if ((_DWORD)v21)
        v22 = HIDWORD(v21) == 0;
      else
        v22 = 1;
      if (v22)
        v21 = 0;
      memptr[0] = v20;
      memptr[1] = (void *)v21;
      memptr[2] = v11;
      if (HIDWORD(v21) * HIDWORD(v11) == -1
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v25[0] = memptr;
      v25[1] = a5;
      sub_20B27E2A8(v25);
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (size_t)v11;
  }
  return a1;
}

void sub_20B4C2274(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_20B4C2294()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B4C22A8(int a1@<W1>, uint64_t a2@<X8>)
{
  sub_20B4C4068(a2, a1);
}

void sub_20B4C22D0(uint64_t a1, int a2)
{
  __asm { BR              X11 }
}

uint64_t sub_20B4C232C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  int v3;
  uint64_t (**v4)();
  _BYTE v5[56];
  uint64_t v6;
  __int128 v7;

  v4 = &off_24C403FD8;
  sub_20B4B2BA0(&v3, (uint64_t)v5);
  result = operator new();
  *(_QWORD *)result = &off_24C3FCC50;
  *(_OWORD *)(result + 8) = *(_OWORD *)&v5[8];
  *(_OWORD *)(result + 20) = *(_OWORD *)(v1 + 20);
  *(_OWORD *)(result + 40) = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(result + 56) = v6;
  *(_OWORD *)(result + 64) = v7;
  *v0 = result;
  return result;
}

void sub_20B4C3AE8()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B4C3B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  if (a33)
  {
    free(a33);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B4C4068(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_20B4C40B8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  size_t *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  uint64_t result;
  __int128 v15;
  char v16;
  unint64_t v17;
  void *v18;
  _BYTE v19[28];
  size_t v20[3];
  __int128 v21;
  __int128 v22;

  v16 = 0;
  if (a3[1])
    v5 = *a3 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a3;
  if (v5)
    v6 = 0;
  v7 = v6 << 32;
  if (!HIDWORD(v6))
    v7 = 0;
  if ((_DWORD)v6)
    v8 = HIDWORD(v6) == 0;
  else
    v8 = 1;
  *(_QWORD *)v19 = v6;
  *(_QWORD *)&v19[8] = v7 | (v6 != 0);
  v19[16] = 0;
  v19[24] = 0;
  v18 = *(void **)&v19[8];
  if (v8)
    v6 = 0;
  v17 = v6;
  if ((HIDWORD(v7) & (HIDWORD(v7) - 1)) != 0)
    v9 = 1;
  else
    v9 = HIDWORD(v7);
  v10 = sub_20B4C20F0(v20, &v17, &v18, 1, (void **)&v16, 1, v9);
  v22 = *(_OWORD *)v19;
  *(_OWORD *)(v4 + 124) = *(_OWORD *)&v19[12];
  v11 = *v10;
  v12 = v20[1];
  v13 = v20[2];
  v15 = v21;
  result = operator new();
  *(_QWORD *)result = &off_24C3FCC50;
  *(_OWORD *)(result + 8) = v22;
  *(_OWORD *)(result + 20) = *(_OWORD *)(v4 + 124);
  *(_QWORD *)(result + 40) = v11;
  *(_QWORD *)(result + 48) = v12;
  *(_QWORD *)(result + 56) = v13;
  *(_OWORD *)(result + 64) = v15;
  *v3 = result;
  return result;
}

void sub_20B4C72DC()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B4C7310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  if (v17)
  {
    free(v17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_20B4C7470(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _WORD *v21;
  unint64_t v22;
  BOOL v23;
  void *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _WORD *v31;
  int v32;
  uint64_t v33;
  void *memptr[3];
  _QWORD v36[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 2 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr[0] = 0;
    v20 = malloc_type_posix_memalign(memptr, v19, 2 * v14, 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, a1[2], v15);
    v21 = memptr[0];
    a1[1] = (unint64_t)memptr[0];
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
    if (v21 && a6)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = (void *)v22;
      memptr[0] = v21;
      memptr[1] = v24;
      memptr[2] = (void *)(v11 & 0x7FFFFFFF7FFFFFFFLL);
      if (HIDWORD(v24) * ((v11 >> 31) >> 1) == -1
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v36[0] = memptr;
      v36[1] = a5;
      v25 = v11 & 0x7FFFFFFF;
      if (v25 == 1)
      {
        sub_20B27E8A0((uint64_t)v36);
        return a1;
      }
      if ((_DWORD)v24 && HIDWORD(v24))
      {
        v26 = (_DWORD)v24 - 1;
        v27 = HIDWORD(v24) - 1;
        if (HIDWORD(v24) != 1)
        {
          v28 = HIDWORD(v11) & 0x7FFFFFFF;
          if ((_DWORD)v24 == 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v28;
              --v27;
            }
            while (v27);
LABEL_39:
            *v21 = *a5;
            return a1;
          }
          v29 = 0;
          v30 = 2 * v28;
          do
          {
            v31 = v21;
            v32 = (_DWORD)v24 - 1;
            do
            {
              *v31 = *a5;
              v31 += v25;
              --v32;
            }
            while (v32);
            *v31 = *a5;
            v21 = (_WORD *)((char *)v21 + v30);
            ++v29;
          }
          while (v29 != v27);
        }
        if ((_DWORD)v24 != 1)
        {
          v33 = 2 * v25;
          do
          {
            *v21 = *a5;
            v21 = (_WORD *)((char *)v21 + v33);
            --v26;
          }
          while (v26);
        }
        goto LABEL_39;
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  }
  return a1;
}

void sub_20B4C76B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

unint64_t *sub_20B4C76D0(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _WORD *v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _WORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _WORD *v38;
  int v39;
  void *memptr;

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 2 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr = 0;
    v20 = malloc_type_posix_memalign(&memptr, v19, 2 * v14, 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, a1[2], v15);
    v21 = memptr;
    a1[1] = (unint64_t)memptr;
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
    if (v21)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = v22;
      v25 = HIDWORD(v24) * ((v11 >> 31) >> 1);
      if (a6)
      {
        if (v25 == -1
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        if ((_DWORD)v24 && HIDWORD(v24))
        {
          v26 = v24 - 1;
          v27 = HIDWORD(v24) - 1;
          if (HIDWORD(v24) != 1)
          {
            v28 = HIDWORD(v11) & 0x7FFFFFFF;
            if ((_DWORD)v24 == 1)
            {
              do
              {
                *v21 = *a5;
                v21 += v28;
                --v27;
              }
              while (v27);
            }
            else
            {
              v29 = 0;
              v30 = 2 * v28;
              do
              {
                v31 = v21;
                v32 = v24 - 1;
                do
                {
                  *v31 = *a5;
                  v31 += v11 & 0x7FFFFFFF;
                  --v32;
                }
                while (v32);
                *v31 = *a5;
                v21 = (_WORD *)((char *)v21 + v30);
                ++v29;
              }
              while (v29 != v27);
            }
          }
          if ((_DWORD)v24 != 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v11 & 0x7FFFFFFF;
              --v26;
            }
            while (v26);
          }
          *v21 = *a5;
        }
      }
      else
      {
        if (v25 == -1
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        if ((_DWORD)v24 && HIDWORD(v24))
        {
          v33 = v24 - 1;
          v34 = HIDWORD(v24) - 1;
          if (HIDWORD(v24) != 1)
          {
            v35 = HIDWORD(v11) & 0x7FFFFFFF;
            if ((_DWORD)v24 == 1)
            {
              do
              {
                *v21 = 0;
                v21 += v35;
                --v34;
              }
              while (v34);
            }
            else
            {
              v36 = 0;
              v37 = 2 * v35;
              do
              {
                v38 = v21;
                v39 = v24 - 1;
                do
                {
                  *v38 = 0;
                  v38 += v11 & 0x7FFFFFFF;
                  --v39;
                }
                while (v39);
                *v38 = 0;
                v21 = (_WORD *)((char *)v21 + v37);
                ++v36;
              }
              while (v36 != v34);
            }
          }
          if ((_DWORD)v24 != 1)
          {
            do
            {
              *v21 = 0;
              v21 += v11 & 0x7FFFFFFF;
              --v33;
            }
            while (v33);
          }
          *v21 = 0;
        }
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  }
  return a1;
}

void sub_20B4C79C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B4BBE7C(v1);
  _Unwind_Resume(a1);
}

void sub_20B4C79D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B4BBE7C(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_20B4C79EC(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _DWORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _DWORD *v21;
  unint64_t v22;
  BOOL v23;
  void *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  void *memptr[3];
  _QWORD v36[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 4 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr[0] = 0;
    v20 = malloc_type_posix_memalign(memptr, v19, 4 * v14, 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, a1[2], v15);
    v21 = memptr[0];
    a1[1] = (unint64_t)memptr[0];
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
    if (v21 && a6)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = (void *)v22;
      memptr[0] = v21;
      memptr[1] = v24;
      memptr[2] = (void *)(v11 & 0x3FFFFFFF3FFFFFFFLL);
      if (HIDWORD(v24) * ((v11 >> 30) >> 2) == -1
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v36[0] = memptr;
      v36[1] = a5;
      v25 = v11 & 0x3FFFFFFF;
      if (v25 == 1)
      {
        sub_20B2802A4((uint64_t)v36);
        return a1;
      }
      if ((_DWORD)v24 && HIDWORD(v24))
      {
        v26 = (_DWORD)v24 - 1;
        v27 = HIDWORD(v24) - 1;
        if (HIDWORD(v24) != 1)
        {
          v28 = HIDWORD(v11) & 0x3FFFFFFF;
          if ((_DWORD)v24 == 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v28;
              --v27;
            }
            while (v27);
LABEL_39:
            *v21 = *a5;
            return a1;
          }
          v29 = 0;
          v30 = 4 * v28;
          do
          {
            v31 = v21;
            v32 = (_DWORD)v24 - 1;
            do
            {
              *v31 = *a5;
              v31 += v25;
              --v32;
            }
            while (v32);
            *v31 = *a5;
            v21 = (_DWORD *)((char *)v21 + v30);
            ++v29;
          }
          while (v29 != v27);
        }
        if ((_DWORD)v24 != 1)
        {
          v33 = 4 * v25;
          do
          {
            *v21 = *a5;
            v21 = (_DWORD *)((char *)v21 + v33);
            --v26;
          }
          while (v26);
        }
        goto LABEL_39;
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  }
  return a1;
}

void sub_20B4C7C30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

size_t *sub_20B4C7C4C(size_t *a1, unsigned int *a2, uint64_t a3, char a4, _BYTE *a5, char a6, uint64_t a7)
{
  size_t *v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  int v23;
  _BYTE *v24;
  size_t v25;
  BOOL v26;
  BOOL v27;
  char v28;
  size_t v29;
  int v30;
  size_t v31;
  size_t v32;
  BOOL v33;
  char v34;
  int v35;
  int v36;
  size_t v37;
  int v38;
  int v39;
  int v40;
  _BYTE *v41;
  int v42;
  _BYTE *v43;
  int v44;
  int v45;
  _BYTE *v46;
  size_t v47;
  BOOL v48;
  char v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  char *v55;
  BOOL v56;
  char v57;
  int i;
  int v59;
  int v60;
  _BYTE *v61;
  int v62;
  int v63;
  _BYTE *v64;
  size_t *v66;
  void *memptr;

  v10 = a1;
  if (a4)
  {
    v11 = *(_QWORD *)a3;
    v12 = *(_DWORD *)(a3 + 8);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
  v21 = v20 | (v20 >> 16) | ((v20 | (v20 >> 16)) >> 32);
  if (v21 + 1 > 8)
    v22 = v21 + 1;
  else
    v22 = 8;
  *a1 = v18;
  a1[1] = 0;
  a1[2] = v22;
  if ((_DWORD)v18)
  {
    memptr = 0;
    v23 = malloc_type_posix_memalign(&memptr, v22, v18, 0x1F88E90uLL);
    if (v23)
      sub_20B525948(v23, v10[2], v18);
    v24 = memptr;
    v10[1] = (size_t)memptr;
  }
  else
  {
    v24 = 0;
  }
  v25 = *(_QWORD *)a2;
  *((_DWORD *)v10 + 8) = a2[2];
  v10[3] = v25;
  *(size_t *)((char *)v10 + 36) = v11;
  *((_DWORD *)v10 + 11) = v12;
  if (v24 && a6)
  {
    if (*((_DWORD *)v10 + 6))
      v26 = *((_DWORD *)v10 + 7) == 0;
    else
      v26 = 1;
    v27 = v26 || *((_DWORD *)v10 + 8) == 0;
    v28 = v27;
    if (v27)
      v29 = 0;
    else
      v29 = v10[3];
    if (v27)
      v30 = 0;
    else
      v30 = *((_DWORD *)v10 + 8);
    if (v30 * v12 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    if (v11 == 1)
    {
      v31 = HIDWORD(v11);
      if ((_DWORD)v29 * (_DWORD)v11 == HIDWORD(v11))
      {
        v32 = (HIDWORD(v29) * v29);
        if (v12 == HIDWORD(v29) * HIDWORD(v11))
        {
          memset(v24, *a5, (v32 * v30));
          return v10;
        }
        if ((_DWORD)v29)
          v56 = HIDWORD(v29) == 0;
        else
          v56 = 1;
        if (v56)
          v57 = 1;
        else
          v57 = v28;
        if ((v57 & 1) == 0)
        {
          for (i = v30 - 1; i; --i)
          {
            memset(v24, *a5, (HIDWORD(v29) * v29));
            v24 += v12;
          }
LABEL_93:
          memset(v24, *a5, v32);
        }
      }
      else
      {
        v47 = HIDWORD(v29);
        if ((_DWORD)v29)
          v48 = HIDWORD(v29) == 0;
        else
          v48 = 1;
        if (v48)
          v49 = 1;
        else
          v49 = v28;
        if ((v49 & 1) == 0)
        {
          v32 = v29;
          v50 = HIDWORD(v29) - 1;
          v51 = v30 - 1;
          v66 = v10;
          if (v30 != 1)
          {
            v52 = v12;
            if ((_DWORD)v47 == 1)
            {
              do
              {
                memset(v24, *a5, v32);
                v24 += v12;
                --v51;
              }
              while (v51);
            }
            else
            {
              v53 = 0;
              do
              {
                v54 = HIDWORD(v29) - 1;
                v55 = v24;
                do
                {
                  memset(v55, *a5, v32);
                  v55 += v31;
                  --v54;
                }
                while (v54);
                memset(v55, *a5, v32);
                v24 += v52;
                ++v53;
              }
              while (v53 != v51);
            }
          }
          if (HIDWORD(v29) == 1)
          {
            v10 = v66;
          }
          else
          {
            v10 = v66;
            do
            {
              memset(v24, *a5, v32);
              v24 += v31;
              --v50;
            }
            while (v50);
          }
          goto LABEL_93;
        }
      }
    }
    else
    {
      if (HIDWORD(v29))
        v33 = (_DWORD)v29 == 0;
      else
        v33 = 1;
      if (v33)
        v34 = 1;
      else
        v34 = v28;
      if ((v34 & 1) == 0 && (_DWORD)v29)
      {
        v35 = v29 - 1;
        v36 = HIDWORD(v29) - 1;
        v37 = HIDWORD(v11);
        v38 = v30 - 1;
        if (v30 != 1)
        {
          if (HIDWORD(v29) == 1)
          {
            if ((_DWORD)v29 == 1)
            {
              do
              {
                *v24 = *a5;
                v24 += v12;
                --v38;
              }
              while (v38);
            }
            else
            {
              v59 = 0;
              do
              {
                v60 = v29 - 1;
                v61 = v24;
                do
                {
                  *v61 = *a5;
                  v61 += v11;
                  --v60;
                }
                while (v60);
                *v61 = *a5;
                v24 += v12;
                ++v59;
              }
              while (v59 != v38);
            }
          }
          else
          {
            v39 = 0;
            if ((_DWORD)v29 == 1)
            {
              do
              {
                v45 = HIDWORD(v29) - 1;
                v46 = v24;
                do
                {
                  *v46 = *a5;
                  v46 += v37;
                  --v45;
                }
                while (v45);
                *v46 = *a5;
                v24 += v12;
                ++v39;
              }
              while (v39 != v38);
            }
            else
            {
              do
              {
                v40 = 0;
                v41 = v24;
                do
                {
                  v42 = v29 - 1;
                  v43 = v41;
                  do
                  {
                    *v43 = *a5;
                    v43 += v11;
                    --v42;
                  }
                  while (v42);
                  *v43 = *a5;
                  v41 += v37;
                  ++v40;
                }
                while (v40 != v36);
                v44 = v29 - 1;
                do
                {
                  *v41 = *a5;
                  v41 += v11;
                  --v44;
                }
                while (v44);
                *v41 = *a5;
                v24 += v12;
                ++v39;
              }
              while (v39 != v38);
            }
          }
        }
        if (HIDWORD(v29) != 1)
        {
          if ((_DWORD)v29 == 1)
          {
            do
            {
              *v24 = *a5;
              v24 += v37;
              --v36;
            }
            while (v36);
          }
          else
          {
            v62 = 0;
            do
            {
              v63 = v29 - 1;
              v64 = v24;
              do
              {
                *v64 = *a5;
                v64 += v11;
                --v63;
              }
              while (v63);
              *v64 = *a5;
              v24 += v37;
              ++v62;
            }
            while (v62 != v36);
          }
        }
        if ((_DWORD)v29 != 1)
        {
          do
          {
            *v24 = *a5;
            v24 += v11;
            --v35;
          }
          while (v35);
        }
        *v24 = *a5;
      }
    }
  }
  return v10;
}

void sub_20B4C80EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B4C810C(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, const __int16 *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int v24;
  __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 *v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  char v41;
  int v42;
  int v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  int v51;
  __int16 *v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  __int16 *v60;
  int v61;
  BOOL v62;
  char v63;
  int v64;
  uint64_t v65;
  BOOL v66;
  char v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  __int16 *v71;
  unint64_t v72;
  __int16 *v73;
  uint64_t v74;
  uint64_t v75;
  int16x8_t v76;
  int16x8_t *v77;
  unint64_t v78;
  int v79;
  __int16 *v80;
  int v81;
  uint64_t v82;
  __int16 *v83;
  int v84;
  unint64_t v85;
  __int16 *v86;
  unint64_t v87;
  int16x8_t v89;
  int16x8_t *v90;
  uint64_t v91;
  int16x8_t v92;
  int16x8_t *v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  _QWORD v97[3];
  void *memptr;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  _QWORD v104[2];

  if (a4)
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 2);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = 2 * v18;
  v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v23;
  if (v18)
  {
    memptr = 0;
    v24 = malloc_type_posix_memalign(&memptr, v23, 2 * v18, 0x1F88E90uLL);
    if (v24)
      sub_20B525948(v24, *(_QWORD *)(a1 + 16), v19);
    v25 = (__int16 *)memptr;
    *(_QWORD *)(a1 + 8) = memptr;
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 36) = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 44) = 2 * v12;
  if (!v25 || !a6)
    return a1;
  v27 = v12 & 0x7FFFFFFF;
  if (*(_DWORD *)(a1 + 24))
    v28 = *(_DWORD *)(a1 + 28) == 0;
  else
    v28 = 1;
  v29 = v28 || *(_DWORD *)(a1 + 32) == 0;
  v30 = v29;
  if (v29)
    v31 = 0;
  else
    v31 = *(_QWORD *)(a1 + 24);
  if (v29)
    v32 = 0;
  else
    v32 = *(_DWORD *)(a1 + 32);
  v33 = (v32 * v27);
  if ((_DWORD)v33 == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_142;
  }
  v34 = v11 & 0x7FFFFFFF7FFFFFFFLL;
  v35 = v11 & 0x7FFFFFFF;
  if (v35 != 1)
  {
    if ((_DWORD)v31)
      v40 = HIDWORD(v31) == 0;
    else
      v40 = 1;
    if (v40)
      v41 = 1;
    else
      v41 = v30;
    if ((v41 & 1) != 0)
      return a1;
    v42 = v31 - 1;
    v43 = HIDWORD(v31) - 1;
    v44 = HIDWORD(v34);
    v45 = v32 - 1;
    if (v32 != 1)
    {
      if (HIDWORD(v31) == 1)
      {
        if ((_DWORD)v31 != 1)
        {
          v79 = 0;
          do
          {
            v80 = v25;
            v81 = v31 - 1;
            do
            {
              *v80 = *a5;
              v80 += v35;
              --v81;
            }
            while (v81);
            *v80 = *a5;
            v25 += v27;
            ++v79;
          }
          while (v79 != v45);
LABEL_110:
          if ((_DWORD)v31 != 1)
          {
            v82 = 2 * v35;
            do
            {
              *v25 = *a5;
              v25 = (__int16 *)((char *)v25 + v82);
              --v42;
            }
            while (v42);
          }
          goto LABEL_131;
        }
        do
        {
          *v25 = *a5;
          v25 += v27;
          --v45;
        }
        while (v45);
LABEL_131:
        *v25 = *a5;
        return a1;
      }
      if ((_DWORD)v31 == 1)
      {
        do
        {
          v83 = v25;
          v84 = HIDWORD(v31) - 1;
          do
          {
            *v83 = *a5;
            v83 += v44;
            --v84;
          }
          while (v84);
          *v83 = *a5;
          v25 += v27;
          ++v42;
        }
        while (v42 != v45);
        do
        {
LABEL_117:
          *v25 = *a5;
          v25 += v44;
          --v43;
        }
        while (v43);
        goto LABEL_131;
      }
      v46 = 0;
      v47 = 2 * v27;
      v48 = v44;
      v49 = 2 * v35;
      v50 = &v25[v44];
      do
      {
        v51 = 0;
        v52 = v50;
        v53 = v25;
        do
        {
          v54 = v52;
          v55 = v53;
          v56 = v31 - 1;
          do
          {
            *v55 = *a5;
            v55 = (__int16 *)((char *)v55 + v49);
            --v56;
          }
          while (v56);
          *v55 = *a5;
          v53 = (__int16 *)((char *)v53 + v48 * 2);
          ++v51;
          v52 = &v54[v48];
        }
        while (v51 != v43);
        v57 = v31 - 1;
        do
        {
          *v54 = *a5;
          v54 = (__int16 *)((char *)v54 + v49);
          --v57;
        }
        while (v57);
        *v54 = *a5;
        v25 = (__int16 *)((char *)v25 + v47);
        ++v46;
        v50 = (__int16 *)((char *)v50 + v47);
      }
      while (v46 != v45);
    }
    if (HIDWORD(v31) == 1)
      goto LABEL_110;
    if ((_DWORD)v31 != 1)
    {
      v58 = 0;
      v59 = 2 * v44;
      do
      {
        v60 = v25;
        v61 = v31 - 1;
        do
        {
          *v60 = *a5;
          v60 += v35;
          --v61;
        }
        while (v61);
        *v60 = *a5;
        v25 = (__int16 *)((char *)v25 + v59);
        ++v58;
      }
      while (v58 != v43);
      goto LABEL_110;
    }
    goto LABEL_117;
  }
  if (HIDWORD(v34) != (_DWORD)v31)
  {
    v96 = 0;
    v95 = v31;
    v97[0] = &v96;
    v97[1] = &v95;
    v97[2] = a5;
    if ((_DWORD)v31)
      v62 = HIDWORD(v31) == 0;
    else
      v62 = 1;
    if (v62)
      v63 = 1;
    else
      v63 = v30;
    if ((v63 & 1) == 0)
    {
      LODWORD(memptr) = 0;
      HIDWORD(memptr) = v31 - 1;
      v99 = 1;
      v100 = HIDWORD(v31) - 1;
      v104[0] = 0;
      v104[1] = 0;
      v64 = v32 - 1;
      v101 = (v11 & 0x7FFFFFFF7FFFFFFFLL) >> 32;
      v102 = v32 - 1;
      v103 = v27;
      if (v32 != 1)
      {
        v65 = 2 * v27;
        do
        {
          sub_20B4C87F8((uint64_t)&memptr, (uint64_t)v104, (uint64_t)v97, (unint64_t)v25);
          v25 = (__int16 *)((char *)v25 + v65);
          --v64;
        }
        while (v64);
      }
      sub_20B4C87F8((uint64_t)&memptr, (uint64_t)v104, (uint64_t)v97, (unint64_t)v25);
    }
    return a1;
  }
  v36 = (HIDWORD(v31) * v31);
  if ((_DWORD)v27 != (_DWORD)v36)
  {
    if ((_DWORD)v31)
      v66 = HIDWORD(v31) == 0;
    else
      v66 = 1;
    if (v66)
      v67 = 1;
    else
      v67 = v30;
    if ((v67 & 1) != 0)
      return a1;
    v68 = v32 - 1;
    if (v32 == 1)
    {
      if (!(_DWORD)v36)
        return a1;
    }
    else
    {
      if (!(_DWORD)v36)
        return a1;
      v69 = 0;
      v70 = 2 * v27;
      v71 = v25;
      do
      {
        v72 = (unint64_t)v71;
        if (!v71
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_142;
        }
        v73 = (__int16 *)v72;
        v74 = v36;
        if (v36 < 0x10)
          goto LABEL_102;
        if (v72 < (unint64_t)(a5 + 1))
        {
          v73 = (__int16 *)v72;
          v74 = v36;
          if ((__int16 *)((char *)&v25[v36] + v70 * v69) > a5)
            goto LABEL_102;
        }
        v75 = 0;
        v73 = (__int16 *)(v72 + 2 * (v36 & 0xFFFFFFF0));
        v76 = vld1q_dup_s16(a5);
        do
        {
          v77 = (int16x8_t *)(v72 + v75);
          *v77 = v76;
          v77[1] = v76;
          v75 += 32;
        }
        while (((2 * v36) & 0x1FFFFFFE0) != v75);
        v74 = v36 & 0xF;
        if ((v36 & 0xFFFFFFF0) != v36)
        {
LABEL_102:
          v78 = v74 + 1;
          do
          {
            *v73++ = *a5;
            --v78;
          }
          while (v78 > 1);
        }
        v71 = (__int16 *)(v72 + v70);
        ++v69;
      }
      while ((_DWORD)v69 != v68);
      v25 = (__int16 *)(v72 + v70);
      if (!v72)
      {
        if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v25 = 0;
          goto LABEL_123;
        }
LABEL_142:
        abort();
      }
    }
LABEL_123:
    v85 = v36 - ((_DWORD)v36 != 0) + 1;
    if (v85 >= 0x10 && (v25 >= a5 + 1 || &v25[v36] <= a5))
    {
      v86 = &v25[v85 & 0xFFFFFFFFFFFFFFF0];
      v36 -= v85 & 0xFFFFFFFFFFFFFFF0;
      v92 = vld1q_dup_s16(a5);
      v93 = (int16x8_t *)(v25 + 8);
      v94 = v85 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v93[-1] = v92;
        *v93 = v92;
        v93 += 2;
        v94 -= 16;
      }
      while (v94);
      if (v85 == (v85 & 0xFFFFFFFFFFFFFFF0))
        return a1;
    }
    else
    {
      v86 = v25;
    }
    v87 = v36 + 1;
    do
    {
      *v86++ = *a5;
      --v87;
    }
    while (v87 > 1);
    return a1;
  }
  if (!(_DWORD)v33)
    return a1;
  if (v33 < 0x10 || v25 < a5 + 1 && &v25[v33] > a5)
  {
    v37 = v25;
    v38 = (v32 * v27);
LABEL_44:
    v39 = v38 + 1;
    do
    {
      *v37++ = *a5;
      --v39;
    }
    while (v39 > 1);
    return a1;
  }
  v37 = &v25[v33 & 0xFFFFFFF0];
  v38 = ((_BYTE)v32 * (_BYTE)v27) & 0xF;
  v89 = vld1q_dup_s16(a5);
  v90 = (int16x8_t *)(v25 + 8);
  v91 = v33 & 0xFFFFFFF0;
  do
  {
    v90[-1] = v89;
    *v90 = v89;
    v90 += 2;
    v91 -= 16;
  }
  while (v91);
  if ((v33 & 0xFFFFFFF0) != v33)
    goto LABEL_44;
  return a1;
}

void sub_20B4C87D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B4C87F8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const __int16 *v10;
  uint64_t v11;
  __int16 *v12;
  BOOL v13;
  int16x8_t v14;
  int16x8_t *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t *v19;
  const __int16 *v20;
  uint64_t v21;
  BOOL v22;
  __int16 *v23;
  uint64_t v24;
  int16x8_t v25;
  int16x8_t *v26;
  unint64_t v27;
  unint64_t v28;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const __int16 **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
          if ((_DWORD)result)
            goto LABEL_39;
        }
      }
      if (v11 >= 1)
      {
        if ((unint64_t)v11 >= 0x10)
        {
          v13 = v4 >= (unint64_t)(v10 + 1) || (unint64_t)v10 >= v4 + 2 * v11;
          v12 = (__int16 *)v4;
          if (v13)
          {
            v12 = (__int16 *)(v4 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
            v14 = vld1q_dup_s16(v10);
            v15 = (int16x8_t *)(v4 + 16);
            v16 = v11 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v15[-1] = v14;
              *v15 = v14;
              v15 += 2;
              v16 -= 16;
            }
            while (v16);
            v17 = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
            v11 &= 0xFu;
            if (v17)
              goto LABEL_3;
          }
        }
        else
        {
          v12 = (__int16 *)v4;
        }
        v18 = v11 + 1;
        do
        {
          *v12++ = *v10;
          --v18;
        }
        while (v18 > 1);
      }
LABEL_3:
      v4 += 2 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v19 = *(uint64_t **)(a3 + 8);
  v20 = *(const __int16 **)(a3 + 16);
  v21 = *v19;
  if (!v4)
  {
    if (v21)
    {
      result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
      if ((_DWORD)result)
LABEL_39:
        abort();
    }
  }
  if (v21 >= 1)
  {
    if ((unint64_t)v21 < 0x10
      || (v4 < (unint64_t)(v20 + 1) ? (v22 = (unint64_t)v20 >= v4 + 2 * v21) : (v22 = 1), !v22))
    {
      v23 = (__int16 *)v4;
      v24 = v21;
LABEL_36:
      v28 = v24 + 1;
      do
      {
        *v23++ = *v20;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v23 = (__int16 *)(v4 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
    v24 = v21 & 0xF;
    v25 = vld1q_dup_s16(v20);
    v26 = (int16x8_t *)(v4 + 16);
    v27 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return result;
}

uint64_t sub_20B4C8A08(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  BOOL v30;
  char v31;
  unint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  int v37;
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _WORD *v46;
  int v47;
  _WORD *v48;
  _WORD *v49;
  _WORD *v50;
  _WORD *v51;
  int v52;
  int v53;
  int v54;
  _WORD *v55;
  BOOL v56;
  char v57;
  int v58;
  int v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _WORD *v67;
  int v68;
  _WORD *v69;
  _WORD *v70;
  _WORD *v71;
  _WORD *v72;
  int v73;
  int v74;
  int v75;
  _WORD *v76;
  int v77;
  uint64_t v78;
  _WORD *v79;
  int v80;
  int v81;
  uint64_t v82;
  _WORD *v83;
  int v84;
  int v85;
  uint64_t v86;
  _WORD *v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  _WORD *v92;
  int v93;
  uint64_t v94;
  void *memptr;

  if (a4)
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 2);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = 2 * v18;
  v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v23;
  if (v18)
  {
    memptr = 0;
    v24 = malloc_type_posix_memalign(&memptr, v23, 2 * v18, 0x1F88E90uLL);
    if (v24)
      sub_20B525948(v24, *(_QWORD *)(a1 + 16), v19);
    v25 = memptr;
    *(_QWORD *)(a1 + 8) = memptr;
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 36) = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 44) = 2 * v12;
  if (v25)
  {
    v27 = v12 & 0x7FFFFFFF;
    v28 = v11 & 0x7FFFFFFF7FFFFFFFLL;
    if (*(_DWORD *)(a1 + 24))
      v29 = *(_DWORD *)(a1 + 28) == 0;
    else
      v29 = 1;
    v30 = v29 || *(_DWORD *)(a1 + 32) == 0;
    v31 = v30;
    if (v30)
      v32 = 0;
    else
      v32 = *(_QWORD *)(a1 + 24);
    if (v30)
      v33 = 0;
    else
      v33 = *(_DWORD *)(a1 + 32);
    v34 = v33 * v27;
    if (a6)
    {
      if (v34 == -1
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      if (HIDWORD(v32))
        v35 = (_DWORD)v32 == 0;
      else
        v35 = 1;
      if (v35)
        v36 = 1;
      else
        v36 = v31;
      if ((v36 & 1) == 0 && (_DWORD)v32)
      {
        v37 = v32 - 1;
        v38 = HIDWORD(v32) - 1;
        v39 = HIDWORD(v28);
        v40 = v33 - 1;
        if (v33 != 1)
        {
          v41 = v11 & 0x7FFFFFFF;
          if (HIDWORD(v32) == 1)
          {
            if ((_DWORD)v32 == 1)
            {
              do
              {
                *v25 = *a5;
                v25 += v27;
                --v40;
              }
              while (v40);
            }
            else
            {
              v77 = 0;
              v78 = 2 * v41;
              do
              {
                v79 = v25;
                v80 = v32 - 1;
                do
                {
                  *v79 = *a5;
                  v79 = (_WORD *)((char *)v79 + v78);
                  --v80;
                }
                while (v80);
                *v79 = *a5;
                v25 += v27;
                ++v77;
              }
              while (v77 != v40);
            }
          }
          else
          {
            v42 = 0;
            v43 = 2 * v27;
            v44 = v39;
            if ((_DWORD)v32 == 1)
            {
              do
              {
                v54 = HIDWORD(v32) - 1;
                v55 = v25;
                do
                {
                  *v55 = *a5;
                  v55 = (_WORD *)((char *)v55 + v44 * 2);
                  --v54;
                }
                while (v54);
                *v55 = *a5;
                v25 = (_WORD *)((char *)v25 + v43);
                ++v42;
              }
              while (v42 != v40);
            }
            else
            {
              v45 = 2 * v41;
              v46 = &v25[v44];
              do
              {
                v47 = 0;
                v48 = v46;
                v49 = v25;
                do
                {
                  v50 = v48;
                  v51 = v49;
                  v52 = v32 - 1;
                  do
                  {
                    *v51 = *a5;
                    v51 = (_WORD *)((char *)v51 + v45);
                    --v52;
                  }
                  while (v52);
                  *v51 = *a5;
                  v49 = (_WORD *)((char *)v49 + v44 * 2);
                  ++v47;
                  v48 = &v50[v44];
                }
                while (v47 != v38);
                v53 = v32 - 1;
                do
                {
                  *v50 = *a5;
                  v50 = (_WORD *)((char *)v50 + v45);
                  --v53;
                }
                while (v53);
                *v50 = *a5;
                v25 = (_WORD *)((char *)v25 + v43);
                ++v42;
                v46 = (_WORD *)((char *)v46 + v43);
              }
              while (v42 != v40);
            }
          }
        }
        if (HIDWORD(v32) != 1)
        {
          if ((_DWORD)v32 == 1)
          {
            v89 = 2 * v39;
            do
            {
              *v25 = *a5;
              v25 = (_WORD *)((char *)v25 + v89);
              --v38;
            }
            while (v38);
          }
          else
          {
            v85 = 0;
            v86 = 2 * v39;
            do
            {
              v87 = v25;
              v88 = v32 - 1;
              do
              {
                *v87 = *a5;
                v87 += v11 & 0x7FFFFFFF;
                --v88;
              }
              while (v88);
              *v87 = *a5;
              v25 = (_WORD *)((char *)v25 + v86);
              ++v85;
            }
            while (v85 != v38);
          }
        }
        if ((_DWORD)v32 != 1)
        {
          do
          {
            *v25 = *a5;
            v25 += v11 & 0x7FFFFFFF;
            --v37;
          }
          while (v37);
        }
        *v25 = *a5;
      }
    }
    else
    {
      if (v34 == -1
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      if (HIDWORD(v32))
        v56 = (_DWORD)v32 == 0;
      else
        v56 = 1;
      if (v56)
        v57 = 1;
      else
        v57 = v31;
      if ((v57 & 1) == 0 && (_DWORD)v32)
      {
        v58 = v32 - 1;
        v59 = HIDWORD(v32) - 1;
        v60 = HIDWORD(v28);
        v61 = v33 - 1;
        if (v33 != 1)
        {
          v62 = v11 & 0x7FFFFFFF;
          if (HIDWORD(v32) == 1)
          {
            if ((_DWORD)v32 == 1)
            {
              do
              {
                *v25 = 0;
                v25 += v27;
                --v61;
              }
              while (v61);
            }
            else
            {
              v81 = 0;
              v82 = 2 * v62;
              do
              {
                v83 = v25;
                v84 = v32 - 1;
                do
                {
                  *v83 = 0;
                  v83 = (_WORD *)((char *)v83 + v82);
                  --v84;
                }
                while (v84);
                *v83 = 0;
                v25 += v27;
                ++v81;
              }
              while (v81 != v61);
            }
          }
          else
          {
            v63 = 0;
            v64 = 2 * v27;
            v65 = v60;
            if ((_DWORD)v32 == 1)
            {
              do
              {
                v75 = HIDWORD(v32) - 1;
                v76 = v25;
                do
                {
                  *v76 = 0;
                  v76 = (_WORD *)((char *)v76 + v65 * 2);
                  --v75;
                }
                while (v75);
                *v76 = 0;
                v25 = (_WORD *)((char *)v25 + v64);
                ++v63;
              }
              while (v63 != v61);
            }
            else
            {
              v66 = 2 * v62;
              v67 = &v25[v65];
              do
              {
                v68 = 0;
                v69 = v67;
                v70 = v25;
                do
                {
                  v71 = v69;
                  v72 = v70;
                  v73 = v32 - 1;
                  do
                  {
                    *v72 = 0;
                    v72 = (_WORD *)((char *)v72 + v66);
                    --v73;
                  }
                  while (v73);
                  *v72 = 0;
                  v70 = (_WORD *)((char *)v70 + v65 * 2);
                  ++v68;
                  v69 = &v71[v65];
                }
                while (v68 != v59);
                v74 = v32 - 1;
                do
                {
                  *v71 = 0;
                  v71 = (_WORD *)((char *)v71 + v66);
                  --v74;
                }
                while (v74);
                *v71 = 0;
                v25 = (_WORD *)((char *)v25 + v64);
                ++v63;
                v67 = (_WORD *)((char *)v67 + v64);
              }
              while (v63 != v61);
            }
          }
        }
        if (HIDWORD(v32) != 1)
        {
          if ((_DWORD)v32 == 1)
          {
            v94 = 2 * v60;
            do
            {
              *v25 = 0;
              v25 = (_WORD *)((char *)v25 + v94);
              --v59;
            }
            while (v59);
          }
          else
          {
            v90 = 0;
            v91 = 2 * v60;
            do
            {
              v92 = v25;
              v93 = v32 - 1;
              do
              {
                *v92 = 0;
                v92 += v11 & 0x7FFFFFFF;
                --v93;
              }
              while (v93);
              *v92 = 0;
              v25 = (_WORD *)((char *)v25 + v91);
              ++v90;
            }
            while (v90 != v59);
          }
        }
        if ((_DWORD)v32 != 1)
        {
          do
          {
            *v25 = 0;
            v25 += v11 & 0x7FFFFFFF;
            --v58;
          }
          while (v58);
        }
        *v25 = 0;
      }
    }
  }
  return a1;
}

void sub_20B4C8FAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B4BBF18(v1);
  _Unwind_Resume(a1);
}

void sub_20B4C8FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B4BBF18(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4C8FD4(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, const float *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int v24;
  float32x4_t *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t *v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  char v41;
  int v42;
  int v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int32 *v50;
  int v51;
  __int32 *v52;
  float32x4_t *v53;
  __int32 *v54;
  float32x4_t *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  float32x4_t *v60;
  int v61;
  BOOL v62;
  char v63;
  int v64;
  uint64_t v65;
  BOOL v66;
  char v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  float32x4_t *v71;
  unint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t *v77;
  unint64_t v78;
  int v79;
  float32x4_t *v80;
  int v81;
  uint64_t v82;
  float32x4_t *v83;
  int v84;
  unint64_t v85;
  float32x4_t *v86;
  unint64_t v87;
  float32x4_t v89;
  float32x4_t *v90;
  uint64_t v91;
  float32x4_t v92;
  float32x4_t *v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  _QWORD v97[3];
  void *memptr;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  _QWORD v104[2];

  if (a4)
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 2);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = 4 * v18;
  v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v23;
  if (v18)
  {
    memptr = 0;
    v24 = malloc_type_posix_memalign(&memptr, v23, 4 * v18, 0x1F88E90uLL);
    if (v24)
      sub_20B525948(v24, *(_QWORD *)(a1 + 16), v19);
    v25 = (float32x4_t *)memptr;
    *(_QWORD *)(a1 + 8) = memptr;
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 36) = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 44) = 4 * v12;
  if (!v25 || !a6)
    return a1;
  v27 = v12 & 0x3FFFFFFF;
  if (*(_DWORD *)(a1 + 24))
    v28 = *(_DWORD *)(a1 + 28) == 0;
  else
    v28 = 1;
  v29 = v28 || *(_DWORD *)(a1 + 32) == 0;
  v30 = v29;
  if (v29)
    v31 = 0;
  else
    v31 = *(_QWORD *)(a1 + 24);
  if (v29)
    v32 = 0;
  else
    v32 = *(_DWORD *)(a1 + 32);
  v33 = (v32 * v27);
  if ((_DWORD)v33 == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_142;
  }
  v34 = v11 & 0x3FFFFFFF3FFFFFFFLL;
  v35 = v11 & 0x3FFFFFFF;
  if (v35 != 1)
  {
    if ((_DWORD)v31)
      v40 = HIDWORD(v31) == 0;
    else
      v40 = 1;
    if (v40)
      v41 = 1;
    else
      v41 = v30;
    if ((v41 & 1) != 0)
      return a1;
    v42 = v31 - 1;
    v43 = HIDWORD(v31) - 1;
    v44 = HIDWORD(v34);
    v45 = v32 - 1;
    if (v32 != 1)
    {
      if (HIDWORD(v31) == 1)
      {
        if ((_DWORD)v31 != 1)
        {
          v79 = 0;
          do
          {
            v80 = v25;
            v81 = v31 - 1;
            do
            {
              v80->f32[0] = *a5;
              v80 = (float32x4_t *)((char *)v80 + 4 * v35);
              --v81;
            }
            while (v81);
            v80->f32[0] = *a5;
            v25 = (float32x4_t *)((char *)v25 + 4 * v27);
            ++v79;
          }
          while (v79 != v45);
LABEL_110:
          if ((_DWORD)v31 != 1)
          {
            v82 = 4 * v35;
            do
            {
              v25->f32[0] = *a5;
              v25 = (float32x4_t *)((char *)v25 + v82);
              --v42;
            }
            while (v42);
          }
          goto LABEL_131;
        }
        do
        {
          v25->f32[0] = *a5;
          v25 = (float32x4_t *)((char *)v25 + 4 * v27);
          --v45;
        }
        while (v45);
LABEL_131:
        v25->f32[0] = *a5;
        return a1;
      }
      if ((_DWORD)v31 == 1)
      {
        do
        {
          v83 = v25;
          v84 = HIDWORD(v31) - 1;
          do
          {
            v83->f32[0] = *a5;
            v83 = (float32x4_t *)((char *)v83 + 4 * v44);
            --v84;
          }
          while (v84);
          v83->f32[0] = *a5;
          v25 = (float32x4_t *)((char *)v25 + 4 * v27);
          ++v42;
        }
        while (v42 != v45);
        do
        {
LABEL_117:
          v25->f32[0] = *a5;
          v25 = (float32x4_t *)((char *)v25 + 4 * v44);
          --v43;
        }
        while (v43);
        goto LABEL_131;
      }
      v46 = 0;
      v47 = 4 * v27;
      v48 = v44;
      v49 = 4 * v35;
      v50 = &v25->i32[v44];
      do
      {
        v51 = 0;
        v52 = v50;
        v53 = v25;
        do
        {
          v54 = v52;
          v55 = v53;
          v56 = v31 - 1;
          do
          {
            v55->f32[0] = *a5;
            v55 = (float32x4_t *)((char *)v55 + v49);
            --v56;
          }
          while (v56);
          v55->f32[0] = *a5;
          v53 = (float32x4_t *)((char *)v53 + v48 * 4);
          ++v51;
          v52 = &v54[v48];
        }
        while (v51 != v43);
        v57 = v31 - 1;
        do
        {
          *v54 = *(_DWORD *)a5;
          v54 = (__int32 *)((char *)v54 + v49);
          --v57;
        }
        while (v57);
        *v54 = *(_DWORD *)a5;
        v25 = (float32x4_t *)((char *)v25 + v47);
        ++v46;
        v50 = (__int32 *)((char *)v50 + v47);
      }
      while (v46 != v45);
    }
    if (HIDWORD(v31) == 1)
      goto LABEL_110;
    if ((_DWORD)v31 != 1)
    {
      v58 = 0;
      v59 = 4 * v44;
      do
      {
        v60 = v25;
        v61 = v31 - 1;
        do
        {
          v60->f32[0] = *a5;
          v60 = (float32x4_t *)((char *)v60 + 4 * v35);
          --v61;
        }
        while (v61);
        v60->f32[0] = *a5;
        v25 = (float32x4_t *)((char *)v25 + v59);
        ++v58;
      }
      while (v58 != v43);
      goto LABEL_110;
    }
    goto LABEL_117;
  }
  if (HIDWORD(v34) != (_DWORD)v31)
  {
    v96 = 0;
    v95 = v31;
    v97[0] = &v96;
    v97[1] = &v95;
    v97[2] = a5;
    if ((_DWORD)v31)
      v62 = HIDWORD(v31) == 0;
    else
      v62 = 1;
    if (v62)
      v63 = 1;
    else
      v63 = v30;
    if ((v63 & 1) == 0)
    {
      LODWORD(memptr) = 0;
      HIDWORD(memptr) = v31 - 1;
      v99 = 1;
      v100 = HIDWORD(v31) - 1;
      v104[0] = 0;
      v104[1] = 0;
      v64 = v32 - 1;
      v101 = (v11 & 0x3FFFFFFF3FFFFFFFLL) >> 32;
      v102 = v32 - 1;
      v103 = v27;
      if (v32 != 1)
      {
        v65 = 4 * v27;
        do
        {
          sub_20B4C96C0((uint64_t)&memptr, (uint64_t)v104, (uint64_t)v97, (unint64_t)v25);
          v25 = (float32x4_t *)((char *)v25 + v65);
          --v64;
        }
        while (v64);
      }
      sub_20B4C96C0((uint64_t)&memptr, (uint64_t)v104, (uint64_t)v97, (unint64_t)v25);
    }
    return a1;
  }
  v36 = (HIDWORD(v31) * v31);
  if ((_DWORD)v27 != (_DWORD)v36)
  {
    if ((_DWORD)v31)
      v66 = HIDWORD(v31) == 0;
    else
      v66 = 1;
    if (v66)
      v67 = 1;
    else
      v67 = v30;
    if ((v67 & 1) != 0)
      return a1;
    v68 = v32 - 1;
    if (v32 == 1)
    {
      if (!(_DWORD)v36)
        return a1;
    }
    else
    {
      if (!(_DWORD)v36)
        return a1;
      v69 = 0;
      v70 = 4 * v27;
      v71 = v25;
      do
      {
        v72 = (unint64_t)v71;
        if (!v71
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_142;
        }
        v73 = (_DWORD *)v72;
        v74 = v36;
        if (v36 < 8)
          goto LABEL_102;
        if (v72 < (unint64_t)(a5 + 1))
        {
          v73 = (_DWORD *)v72;
          v74 = v36;
          if ((char *)&v25->f32[v36] + v70 * v69 > (char *)a5)
            goto LABEL_102;
        }
        v75 = 0;
        v73 = (_DWORD *)(v72 + 4 * (v36 & 0xFFFFFFF8));
        v76 = vld1q_dup_f32(a5);
        do
        {
          v77 = (float32x4_t *)(v72 + v75);
          *v77 = v76;
          v77[1] = v76;
          v75 += 32;
        }
        while (((4 * v36) & 0x3FFFFFFE0) != v75);
        v74 = v36 & 7;
        if ((v36 & 0xFFFFFFF8) != v36)
        {
LABEL_102:
          v78 = v74 + 1;
          do
          {
            *v73++ = *(_DWORD *)a5;
            --v78;
          }
          while (v78 > 1);
        }
        v71 = (float32x4_t *)(v72 + v70);
        ++v69;
      }
      while ((_DWORD)v69 != v68);
      v25 = (float32x4_t *)(v72 + v70);
      if (!v72)
      {
        if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          v25 = 0;
          goto LABEL_123;
        }
LABEL_142:
        abort();
      }
    }
LABEL_123:
    v85 = v36 - ((_DWORD)v36 != 0) + 1;
    if (v85 >= 0x10 && (v25 >= (float32x4_t *)(a5 + 1) || &v25->f32[v36] <= a5))
    {
      v86 = (float32x4_t *)((char *)v25 + 4 * (v85 & 0xFFFFFFFFFFFFFFF8));
      v36 -= v85 & 0xFFFFFFFFFFFFFFF8;
      v92 = vld1q_dup_f32(a5);
      v93 = v25 + 1;
      v94 = v85 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v93[-1] = v92;
        *v93 = v92;
        v93 += 2;
        v94 -= 8;
      }
      while (v94);
      if (v85 == (v85 & 0xFFFFFFFFFFFFFFF8))
        return a1;
    }
    else
    {
      v86 = v25;
    }
    v87 = v36 + 1;
    do
    {
      v86->f32[0] = *a5;
      v86 = (float32x4_t *)((char *)v86 + 4);
      --v87;
    }
    while (v87 > 1);
    return a1;
  }
  if (!(_DWORD)v33)
    return a1;
  if (v33 < 8 || v25 < (float32x4_t *)(a5 + 1) && &v25->f32[v33] > a5)
  {
    v37 = v25;
    v38 = (v32 * v27);
LABEL_44:
    v39 = v38 + 1;
    do
    {
      v37->f32[0] = *a5;
      v37 = (float32x4_t *)((char *)v37 + 4);
      --v39;
    }
    while (v39 > 1);
    return a1;
  }
  v37 = (float32x4_t *)((char *)v25 + 4 * (v33 & 0xFFFFFFF8));
  v38 = ((_BYTE)v32 * (_BYTE)v27) & 7;
  v89 = vld1q_dup_f32(a5);
  v90 = v25 + 1;
  v91 = v33 & 0xFFFFFFF8;
  do
  {
    v90[-1] = v89;
    *v90 = v89;
    v90 += 2;
    v91 -= 8;
  }
  while (v91);
  if ((v33 & 0xFFFFFFF8) != v33)
    goto LABEL_44;
  return a1;
}

void sub_20B4C969C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B4C96C0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  const float *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  unint64_t v31;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const float **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
          if ((_DWORD)result)
            goto LABEL_37;
        }
      }
      if (v11 >= 1)
      {
        v12 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        v13 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v13 >= 0x10)
        {
          v15 = -4;
          if (!v12)
            v15 = 0;
          if (v4 >= (unint64_t)(v10 + 1)
            || (v16 = v4 + v15 + 4 * v11 + 4, v14 = (_DWORD *)v4, (unint64_t)v10 >= v16))
          {
            v14 = (_DWORD *)(v4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
            v12 -= v13 & 0xFFFFFFFFFFFFFFF8;
            v17 = vld1q_dup_f32(v10);
            v18 = (float32x4_t *)(v4 + 16);
            v19 = v13 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v18[-1] = v17;
              *v18 = v17;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (_DWORD *)v4;
        }
        v20 = v12 + 1;
        do
        {
          *v14++ = *(_DWORD *)v10;
          --v20;
        }
        while (v20 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v21 = *(uint64_t **)(a3 + 8);
  v22 = *(const float **)(a3 + 16);
  v23 = *v21;
  if (!v4)
  {
    if (v23)
    {
      result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
      if ((_DWORD)result)
LABEL_37:
        abort();
    }
  }
  if (v23 >= 1)
  {
    v24 = v23 & 0x3FFFFFFFFFFFFFFFLL;
    v25 = (v23 & 0x3FFFFFFFFFFFFFFFLL) - ((v23 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v25 < 0x10)
      goto LABEL_29;
    v26 = 4 * v23;
    if (!v24)
      v26 = 4;
    if (v4 < (unint64_t)(v22 + 1) && (unint64_t)v22 < v4 + v26)
    {
LABEL_29:
      v27 = (_DWORD *)v4;
LABEL_30:
      v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v22;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v27 = (_DWORD *)(v4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    v29 = vld1q_dup_f32(v22);
    v30 = (float32x4_t *)(v4 + 16);
    v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

uint64_t sub_20B4C9914(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  unint64_t v21;
  _BYTE memptr[12];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 2;
  *(_QWORD *)&memptr[4] = v4;
  v5 = 2 * ((_DWORD)v4 != 0);
  if (HIDWORD(v4))
    v6 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v6 = 0;
  v7 = v5 & 0x1FFFFFFFFLL | ((unint64_t)(v6 >> 1) << 33);
  v8 = __PAIR64__(*(unsigned int *)&memptr[4], 2);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v7;
  v9 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(_QWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (HIDWORD(v8))
    v10 = (_DWORD)v8 == 0;
  else
    v10 = 1;
  v11 = v10 || HIDWORD(v4) == 0;
  v12 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = HIDWORD(v4);
  v14 = 2 * v6;
  if ((v14 & (v14 - 1)) != 0)
    v15 = 1;
  else
    v15 = v14 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *(_QWORD *)(a1 + 56) = 2 * (v13 * v6);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v19;
  if (v13 * (_DWORD)v6)
  {
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v13 * v6), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, *(_QWORD *)(a1 + 72), 2 * (v13 * v6));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v12)
    v21 = 0;
  else
    v21 = v8;
  *(_QWORD *)(a1 + 80) = v21;
  *(_DWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 92) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 100) = 2 * v6;
  return a1;
}

uint64_t sub_20B4C9AD0(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  unint64_t v22;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 2;
  *(_QWORD *)&memptr[4] = v4;
  v5 = 2 * ((_DWORD)v4 != 0);
  if (HIDWORD(v4))
    v6 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v6 = 0;
  v7 = v5 & 0x1FFFFFFFFLL | ((unint64_t)(v6 >> 1) << 33);
  v8 = __PAIR64__(*(unsigned int *)&memptr[4], 2);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v7;
  v9 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(_QWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (HIDWORD(v8))
    v10 = (_DWORD)v8 == 0;
  else
    v10 = 1;
  v11 = v10 || HIDWORD(v4) == 0;
  v12 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = HIDWORD(v4);
  v14 = 4 * v6;
  v15 = v14 - 1;
  v3 = (v14 & (v14 - 1)) == 0;
  v16 = 3;
  if (v3)
    v16 = v15;
  v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  *(_QWORD *)(a1 + 56) = 4 * (v13 * v6);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v20;
  if (v13 * (_DWORD)v6)
  {
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, 4 * (v13 * v6), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, *(_QWORD *)(a1 + 72), 4 * (v13 * v6));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v12)
    v22 = 0;
  else
    v22 = v8;
  *(_QWORD *)(a1 + 80) = v22;
  *(_DWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 92) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 100) = 4 * v6;
  return a1;
}

uint64_t sub_20B4C9C90(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  unint64_t v22;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  if ((_DWORD)v4)
    v5 = 3;
  else
    v5 = 0;
  v6 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v7 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v7 = 0;
  v8 = v5 | (v7 << 32);
  v9 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v8;
  v10 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = v9;
  *(_DWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 20) = v7;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (HIDWORD(v9))
    v11 = (_DWORD)v9 == 0;
  else
    v11 = 1;
  v12 = v11 || (_DWORD)v6 == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = v6;
  v15 = 2 * v7;
  if ((v15 & (v15 - 1)) != 0)
    v16 = 1;
  else
    v16 = v15 - 1;
  v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  *(_QWORD *)(a1 + 56) = 2 * (v14 * v7);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v20;
  if (v14 * (_DWORD)v7)
  {
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, 2 * (v14 * v7), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, *(_QWORD *)(a1 + 72), 2 * (v14 * v7));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v9;
  *(_QWORD *)(a1 + 80) = v22;
  *(_DWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 92) = (2 * v10) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 100) = 2 * v7;
  return a1;
}

uint64_t sub_20B4C9E44(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  unint64_t v22;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  if ((_DWORD)v4)
    v5 = 3;
  else
    v5 = 0;
  v6 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v7 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v7 = 0;
  v8 = v5 | (v7 << 32);
  v9 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v8;
  v10 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = __PAIR64__(v4, 3);
  *(_DWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 20) = v7;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (__PAIR64__(v4, 3) >> 32)
    v11 = (_DWORD)v9 == 0;
  else
    v11 = 1;
  v12 = v11 || (_DWORD)v6 == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = v6;
  v15 = 4 * v7;
  if ((v15 & (v15 - 1)) != 0)
    v16 = 3;
  else
    v16 = v15 - 1;
  v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  *(_QWORD *)(a1 + 56) = 4 * (v14 * v7);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v20;
  if (v14 * (_DWORD)v7)
  {
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, 4 * (v14 * v7), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, *(_QWORD *)(a1 + 72), 4 * (v14 * v7));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v9;
  *(_QWORD *)(a1 + 80) = v22;
  *(_DWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 92) = (4 * v10) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 100) = 4 * v7;
  return a1;
}

uint64_t sub_20B4C9FF8(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  unint64_t v21;
  _BYTE memptr[12];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  if (HIDWORD(v4))
    v6 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v6 = 0;
  v7 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  v8 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v7;
  v9 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(_QWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (HIDWORD(v8))
    v10 = (_DWORD)v8 == 0;
  else
    v10 = 1;
  v11 = v10 || HIDWORD(v4) == 0;
  v12 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = HIDWORD(v4);
  v14 = 2 * v6;
  if ((v14 & (v14 - 1)) != 0)
    v15 = 1;
  else
    v15 = v14 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *(_QWORD *)(a1 + 56) = 2 * (v13 * v6);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v19;
  if (v13 * (_DWORD)v6)
  {
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v13 * v6), 0x1F88E90uLL);
    if (v20)
      sub_20B525948(v20, *(_QWORD *)(a1 + 72), 2 * (v13 * v6));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v12)
    v21 = 0;
  else
    v21 = v8;
  *(_QWORD *)(a1 + 80) = v21;
  *(_DWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 92) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 100) = 2 * v6;
  return a1;
}

uint64_t sub_20B4CA1B4(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  unint64_t v22;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  if (HIDWORD(v4))
    v6 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v6 = 0;
  v7 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  v8 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v7;
  v9 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(_QWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (HIDWORD(v8))
    v10 = (_DWORD)v8 == 0;
  else
    v10 = 1;
  v11 = v10 || HIDWORD(v4) == 0;
  v12 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = HIDWORD(v4);
  v14 = 4 * v6;
  v15 = v14 - 1;
  v3 = (v14 & (v14 - 1)) == 0;
  v16 = 3;
  if (v3)
    v16 = v15;
  v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  *(_QWORD *)(a1 + 56) = 4 * (v13 * v6);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v20;
  if (v13 * (_DWORD)v6)
  {
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, 4 * (v13 * v6), 0x1F88E90uLL);
    if (v21)
      sub_20B525948(v21, *(_QWORD *)(a1 + 72), 4 * (v13 * v6));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v12)
    v22 = 0;
  else
    v22 = v8;
  *(_QWORD *)(a1 + 80) = v22;
  *(_DWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 92) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 100) = 4 * v6;
  return a1;
}

#error "20B4CA374: too big function (funcsize=0)"

void sub_20B4DF610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p)
{
  unint64_t *p_shared_owners;
  unint64_t v39;

  if (__p)
    operator delete(__p);
  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
      std::__shared_weak_count::__release_weak(a29);
    }
  }
  _Unwind_Resume(a1);
}

double sub_20B4E139C(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20B4E148C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E1454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

void sub_20B4E148C(uint64_t a1, uint64_t a2, __int16 *a3)
{
  std::string *v12;
  std::string *v13;
  std::string::size_type size;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type v29;
  std::string *v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *__p[2];
  unint64_t v39;
  std::string v40;
  double v41;
  std::string *v42;
  uint64_t v43;
  std::string *v44;
  std::string *v45;
  double *v46;

  _H0 = *a3;
  __asm { FCVT            S0, H0; __val }
  std::to_string(&v40, _S0);
  v12 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v40;
  else
    v13 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  else
    size = v40.__r_.__value_.__l.__size_;
  v15 = (char *)&v13[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
    {
      size = -1;
      if ((*((_BYTE *)&v40.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (size != HIBYTE(v40.__r_.__value_.__r.__words[2]) - 1)
      {
        v12 = &v40;
        goto LABEL_17;
      }
LABEL_15:
      v41 = *(double *)&a2;
      v42 = &v40;
      v43 = a2;
      v44 = &v40;
      v45 = &v40;
      v17 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v17 == -1)
        sub_20AECFAB8();
LABEL_16:
      __p[0] = &v41;
      ((void (*)(void **, uint64_t))off_24C41DFC0[v17])(__p, a2);
LABEL_44:
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_45:
      operator delete(v40.__r_.__value_.__l.__data_);
      return;
    }
    v16 = v15[size--];
  }
  while (v16 == 48);
  if ((*((_BYTE *)&v40.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (size == v40.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_17:
  v18 = (_QWORD *)operator new();
  sub_20B52CF30((uint64_t)v18, (char *)v12);
  __p[0] = v18;
  v41 = 0.0;
  v19 = (_QWORD *)MEMORY[0x20BD35140](v18, &v41);
  v20 = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 32) & 5;
  _S0 = v41;
  __asm { FCVT            H8, S0 }
  v22 = MEMORY[0x24BEDB7F0];
  v23 = *MEMORY[0x24BEDB7F0];
  *v18 = *MEMORY[0x24BEDB7F0];
  v24 = *(_QWORD *)(v22 + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v23 - 24)) = *(_QWORD *)(v22 + 64);
  v18[3] = MEMORY[0x24BEDB848] + 16;
  v18[2] = v24;
  if (*((char *)v18 + 111) < 0)
    operator delete((void *)v18[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v18 + 16);
  MEMORY[0x20BD3583C](v18, 0x10B2C40EED050F3);
  LOWORD(_S0) = 0;
  if (!v20)
    _S0 = _S8;
  _H1 = *a3;
  __asm
  {
    FCVT            S0, H0
    FCVT            S1, H1
  }
  if (_S0 != _S1)
  {
    v41 = *(double *)&a2;
    v42 = &v40;
    v43 = a2;
    v44 = &v40;
    v45 = &v40;
    v17 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v17 == -1)
      sub_20AECFAB8();
    goto LABEL_16;
  }
  v29 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &v40;
  else
    v30 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v29 = v40.__r_.__value_.__l.__size_;
  v31 = 1;
  if (v30->__r_.__value_.__s.__data_[size] == 46)
    v31 = 2;
  v32 = v31 + size;
  if (v29 >= v32)
    v33 = v32;
  else
    v33 = v29;
  if (v33 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v33 >= 0x17)
  {
    v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v35 = v33 | 7;
    v36 = v35 + 1;
    v34 = operator new(v35 + 1);
    __p[1] = (void *)v33;
    v39 = v36 | 0x8000000000000000;
    __p[0] = v34;
    goto LABEL_41;
  }
  HIBYTE(v39) = v33;
  v34 = __p;
  if (v33)
LABEL_41:
    memmove(v34, v30, v33);
  *((_BYTE *)v34 + v33) = 0;
  v41 = *(double *)&a2;
  v42 = (std::string *)__p;
  v43 = a2;
  v44 = (std::string *)__p;
  v45 = (std::string *)__p;
  v37 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v37 == -1)
    sub_20AECFAB8();
  v46 = &v41;
  ((void (*)(double **, uint64_t))off_24C41DF90[v37])(&v46, a2);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
    goto LABEL_44;
  operator delete(__p[0]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_45;
}

void sub_20B4E17E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B4E1890(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  size_t v11;

  sub_20B4E1964(**(uint64_t ***)a1, a2, **(unsigned __int8 **)(*(_QWORD *)a1 + 8));
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(unsigned int **)v4;
  v7 = *(_DWORD **)(v4 + 8);
  v8 = **(_DWORD **)v4 + 1;
  **(_DWORD **)v4 = v8;
  if (v8 != *v7)
  {
    v10 = 0;
LABEL_6:
    v11 = strlen(*(const char **)(**(_QWORD **)(v4 + 16) + 8 * v10));
    sub_20AEC01D0(v3, *(_QWORD *)(**(_QWORD **)(v4 + 16) + 8 * v10), v11);
    sub_20B086C04(v5, v3, *(unsigned int **)v4, v10, **(_DWORD **)(v4 + 24));
    return;
  }
  v9 = v6[1] + 1;
  *v6 = 0;
  v6[1] = v9;
  if (v9 != v7[1])
  {
    v10 = 1;
    goto LABEL_6;
  }
}

void sub_20B4E1964(uint64_t *a1, __int128 *a2, unsigned int a3)
{
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v9;
  __int128 __dst;
  uint64_t v11;
  int v12;

  v12 = -1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *a2;
    v11 = *((_QWORD *)a2 + 2);
  }
  v9 = v11;
  *(_OWORD *)__p = __dst;
  v5 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = a3;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x20;
  if (v9 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v9 >= 0)
    v7 = HIBYTE(v9);
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(a1, (uint64_t)v6, v7);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
}

void sub_20B4E1A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4E1A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B4E1A74(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20AF57AB0((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E1B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B4E1B64(_BYTE *result, unsigned int a2, unint64_t **a3, uint64_t a4)
{
  unint64_t **v5;
  int v6;
  int v7;
  unint64_t *v8;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t **v32;

  v5 = a3;
  if ((_DWORD)result)
  {
    v6 = (int)result;
    v7 = 0;
    v8 = *a3;
    v32 = (uint64_t **)(a3 + 1);
    do
    {
      v13 = *(_BYTE *)(a4 + 23);
      if (v13 >= 0)
        v14 = *(unsigned __int8 *)(a4 + 23);
      else
        v14 = *(_QWORD *)(a4 + 8);
      if (v13 >= 0)
        v15 = (_BYTE *)a4;
      else
        v15 = *(_BYTE **)a4;
      if (v14 >= 1)
      {
        v16 = &v15[v14];
        v17 = v14;
        result = v15;
        do
        {
          result = memchr(result, 46, v17);
          if (!result)
            break;
          if (*result == 46)
          {
            if (result == v16)
              break;
            v18 = result - v15;
            v10 = (uint64_t **)v5;
            if (result - v15 != -1)
            {
              v19 = (_BYTE *)*v8;
              if (*v8 <= v18)
                v19 = (_BYTE *)(result - v15);
              *v8 = (unint64_t)v19;
              v20 = *(unsigned __int8 *)(a4 + 23);
              if ((v20 & 0x80u) != 0)
                v20 = *(_QWORD *)(a4 + 8);
              v14 = v20 + ~v18;
              v10 = v32;
            }
            goto LABEL_4;
          }
          ++result;
          v17 = v16 - result;
        }
        while (v16 - result >= 1);
      }
      v10 = (uint64_t **)v5;
LABEL_4:
      v11 = *v10;
      v12 = *v11;
      if (*v11 <= (unint64_t)v14)
        v12 = v14;
      *v11 = v12;
      a4 += 24 * a2;
      ++v7;
    }
    while (v7 != v6);
  }
  v21 = *(_BYTE *)(a4 + 23);
  if (v21 >= 0)
    v22 = *(unsigned __int8 *)(a4 + 23);
  else
    v22 = *(_QWORD *)(a4 + 8);
  if (v21 >= 0)
    v23 = (_BYTE *)a4;
  else
    v23 = *(_BYTE **)a4;
  if (v22 >= 1)
  {
    v24 = &v23[v22];
    v25 = v22;
    result = v23;
    do
    {
      result = memchr(result, 46, v25);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result != v24)
        {
          v26 = result - v23;
          if (result - v23 != -1)
          {
            v28 = *v5++;
            v27 = v28;
            v29 = (_BYTE *)*v28;
            if (*v28 <= v26)
              v29 = (_BYTE *)(result - v23);
            *v27 = (unint64_t)v29;
            v30 = *(unsigned __int8 *)(a4 + 23);
            if ((v30 & 0x80u) != 0)
              v30 = *(_QWORD *)(a4 + 8);
            v22 = v30 + ~v26;
          }
        }
        break;
      }
      ++result;
      v25 = v24 - result;
    }
    while (v24 - result >= 1);
  }
  v31 = **v5;
  if (v31 <= v22)
    v31 = v22;
  **v5 = v31;
  return result;
}

_QWORD *sub_20B4E1D4C(uint64_t a1, void **a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  size_t v12;

  result = sub_20B525848(**(uint64_t ***)a1, a2, **(unsigned __int8 **)(*(_QWORD *)a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 8));
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 16);
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(unsigned int **)v5;
  v8 = *(_DWORD **)(v5 + 8);
  v9 = **(_DWORD **)v5 + 1;
  **(_DWORD **)v5 = v9;
  if (v9 != *v8)
  {
    v11 = 0;
LABEL_6:
    v12 = strlen(*(const char **)(**(_QWORD **)(v5 + 16) + 8 * v11));
    sub_20AEC01D0(v4, *(_QWORD *)(**(_QWORD **)(v5 + 16) + 8 * v11), v12);
    return sub_20B086C04(v6, v4, *(unsigned int **)v5, v11, **(_DWORD **)(v5 + 24));
  }
  v10 = v7[1] + 1;
  *v7 = 0;
  v7[1] = v10;
  if (v10 != v8[1])
  {
    v11 = 1;
    goto LABEL_6;
  }
  return result;
}

void sub_20B4E1E24(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DA93C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E1F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B4E1F90(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DB7C4(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E20E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B4E20FC(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20B4E148C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E21B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

void sub_20B4E21EC(uint64_t ****a1, __int128 **a2)
{
  uint64_t ***v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  size_t v14;
  uint64_t ***v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  size_t v25;

  v4 = *a1;
  sub_20B4E1964(***a1, *a2, *(unsigned __int8 *)(**a1)[1]);
  v6 = v4[1];
  v5 = v4[2];
  v7 = (uint64_t)v6[4];
  v8 = (unsigned int *)*v6;
  v9 = v6[1];
  v10 = *(_DWORD *)*v6 + 1;
  *(_DWORD *)*v6 = v10;
  if (v10 == *(_DWORD *)v9)
  {
    v11 = v8[1] + 1;
    *v8 = 0;
    v8[1] = v11;
    if (v11 == *((_DWORD *)v9 + 1))
    {
      v12 = v8[2] + 1;
      v8[1] = 0;
      v8[2] = v12;
      if (v12 == *((_DWORD *)v9 + 2))
        goto LABEL_8;
      v13 = 2;
    }
    else
    {
      v13 = 1;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = strlen(*(const char **)(*v6[2] + 8 * v13));
  sub_20AEC01D0(v5, *(_QWORD *)(*v6[2] + 8 * v13), v14);
  sub_20B2DC204(v7, v5, (unsigned int *)*v6, v13, *(_DWORD *)v6[3]);
LABEL_8:
  v15 = *a1;
  sub_20B4E1964(**v15, (__int128 *)((char *)*a2 + 24), *(unsigned __int8 *)(*v15)[1]);
  v17 = v15[1];
  v16 = v15[2];
  v18 = (uint64_t)v17[4];
  v19 = (unsigned int *)*v17;
  v20 = v17[1];
  v21 = *(_DWORD *)*v17 + 1;
  *(_DWORD *)*v17 = v21;
  if (v21 != *(_DWORD *)v20)
  {
    v24 = 0;
LABEL_15:
    v25 = strlen(*(const char **)(*v17[2] + 8 * v24));
    sub_20AEC01D0(v16, *(_QWORD *)(*v17[2] + 8 * v24), v25);
    sub_20B2DC204(v18, v16, (unsigned int *)*v17, v24, *(_DWORD *)v17[3]);
    return;
  }
  v22 = v19[1] + 1;
  *v19 = 0;
  v19[1] = v22;
  if (v22 != *((_DWORD *)v20 + 1))
  {
    v24 = 1;
    goto LABEL_15;
  }
  v23 = v19[2] + 1;
  v19[1] = 0;
  v19[2] = v23;
  if (v23 != *((_DWORD *)v20 + 2))
  {
    v24 = 2;
    goto LABEL_15;
  }
}

double sub_20B4E23BC(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20AF57AB0((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E2474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B4E24AC(_BYTE *result, uint64_t a2)
{
  uint64_t **v3;
  unint64_t **v4;
  char v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v24;

  v3 = (uint64_t **)result;
  v4 = (unint64_t **)(result + 8);
  v5 = *(_BYTE *)(a2 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  if (v5 >= 0)
    v7 = (_BYTE *)a2;
  else
    v7 = *(_BYTE **)a2;
  if (v6 >= 1)
  {
    v8 = &v7[v6];
    v9 = v6;
    result = v7;
    do
    {
      result = memchr(result, 46, v9);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v8)
          break;
        v19 = result - v7;
        v10 = v3;
        if (result - v7 != -1)
        {
          v20 = (_BYTE *)**v3;
          if ((unint64_t)v20 <= v19)
            v20 = (_BYTE *)(result - v7);
          **v3 = (uint64_t)v20;
          v21 = *(unsigned __int8 *)(a2 + 23);
          if ((v21 & 0x80u) != 0)
            v21 = *(_QWORD *)(a2 + 8);
          v6 = v21 + ~v19;
          v10 = (uint64_t **)v4;
        }
        goto LABEL_13;
      }
      ++result;
      v9 = v8 - result;
    }
    while (v8 - result >= 1);
  }
  v10 = v3;
LABEL_13:
  v11 = *v10;
  v12 = *v11;
  if (*v11 <= (unint64_t)v6)
    v12 = v6;
  *v11 = v12;
  v13 = *(char *)(a2 + 47);
  if (v13 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 47);
  else
    v14 = *(_QWORD *)(a2 + 32);
  if (v13 >= 0)
    v15 = (_BYTE *)(a2 + 24);
  else
    v15 = *(_BYTE **)(a2 + 24);
  if (v14 >= 1)
  {
    v16 = &v15[v14];
    v17 = v14;
    result = v15;
    do
    {
      result = memchr(result, 46, v17);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v16)
          break;
        v22 = result - v15;
        if (result - v15 == -1)
          break;
        v23 = (_BYTE *)**v3;
        if ((unint64_t)v23 <= v22)
          v23 = (_BYTE *)(result - v15);
        **v3 = (uint64_t)v23;
        v24 = *(unsigned __int8 *)(a2 + 47);
        if ((v24 & 0x80u) != 0)
          v24 = *(_QWORD *)(a2 + 32);
        v14 = v24 + ~v22;
        goto LABEL_27;
      }
      ++result;
      v17 = v16 - result;
    }
    while (v16 - result >= 1);
  }
  v4 = (unint64_t **)v3;
LABEL_27:
  v18 = **v4;
  if (v18 <= v14)
    v18 = v14;
  **v4 = v18;
  return result;
}

_QWORD *sub_20B4E2658(uint64_t a1, void **a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  size_t v13;

  result = sub_20B525848(**(uint64_t ***)a1, a2, **(unsigned __int8 **)(*(_QWORD *)a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 8));
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 16);
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(unsigned int **)v5;
  v8 = *(_DWORD **)(v5 + 8);
  v9 = **(_DWORD **)v5 + 1;
  **(_DWORD **)v5 = v9;
  if (v9 != *v8)
  {
    v12 = 0;
LABEL_8:
    v13 = strlen(*(const char **)(**(_QWORD **)(v5 + 16) + 8 * v12));
    sub_20AEC01D0(v4, *(_QWORD *)(**(_QWORD **)(v5 + 16) + 8 * v12), v13);
    return sub_20B2DC204(v6, v4, *(unsigned int **)v5, v12, **(_DWORD **)(v5 + 24));
  }
  v10 = v7[1] + 1;
  *v7 = 0;
  v7[1] = v10;
  if (v10 != v8[1])
  {
    v12 = 1;
    goto LABEL_8;
  }
  v11 = v7[2] + 1;
  v7[1] = 0;
  v7[2] = v11;
  if (v11 != v8[2])
  {
    v12 = 2;
    goto LABEL_8;
  }
  return result;
}

void sub_20B4E2750(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DA93C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E28A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B4E28BC(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DB7C4(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E2A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B4E2A28(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20B4E148C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E2AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20B4E2B18(_DWORD *result, _QWORD *a2, unint64_t ***a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  if (result[5])
  {
    v4 = 0;
    do
    {
      *a2 = a4;
      v10 = result[3];
      v11 = **a3;
      v12 = *v11;
      if (v10)
      {
        v13 = 24 * result[4];
        v5 = a4;
        do
        {
          *a2 = v5;
          v14 = *(unsigned __int8 *)(v5 + 23);
          if ((v14 & 0x80u) != 0)
            v14 = *(_QWORD *)(v5 + 8);
          if (v12 <= v14)
            v12 = v14;
          *v11 = v12;
          v15 = *(unsigned __int8 *)(v5 + 47);
          if ((v15 & 0x80u) != 0)
            v15 = *(_QWORD *)(v5 + 32);
          if (v12 <= v15)
            v12 = v15;
          *v11 = v12;
          v16 = *(unsigned __int8 *)(v5 + 71);
          if ((v16 & 0x80u) != 0)
            v16 = *(_QWORD *)(v5 + 56);
          if (v12 <= v16)
            v12 = v16;
          *v11 = v12;
          v5 += v13;
          --v10;
        }
        while (v10);
      }
      else
      {
        v5 = a4;
      }
      *a2 = v5;
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      if (v12 > v6)
        v6 = v12;
      *v11 = v6;
      v7 = *(unsigned __int8 *)(v5 + 47);
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(v5 + 32);
      if (v6 <= v7)
        v6 = v7;
      *v11 = v6;
      v8 = *(unsigned __int8 *)(v5 + 71);
      v9 = *(_QWORD *)(v5 + 56);
      if ((v8 & 0x80u) == 0)
        v9 = v8;
      if (v6 > v9)
        v9 = v6;
      *v11 = v9;
      a4 += 24 * result[6];
      ++v4;
    }
    while (v4 < result[5]);
  }
  *a2 = a4;
  v17 = result[3];
  v18 = **a3;
  v19 = *v18;
  if (v17)
  {
    v20 = 24 * result[4];
    do
    {
      *a2 = a4;
      v21 = *(unsigned __int8 *)(a4 + 23);
      if ((v21 & 0x80u) != 0)
        v21 = *(_QWORD *)(a4 + 8);
      if (v19 <= v21)
        v19 = v21;
      *v18 = v19;
      v22 = *(unsigned __int8 *)(a4 + 47);
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(a4 + 32);
      if (v19 <= v22)
        v19 = v22;
      *v18 = v19;
      v23 = *(unsigned __int8 *)(a4 + 71);
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(a4 + 56);
      if (v19 <= v23)
        v19 = v23;
      *v18 = v19;
      a4 += v20;
      --v17;
    }
    while (v17);
  }
  *a2 = a4;
  v24 = *(unsigned __int8 *)(a4 + 23);
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a4 + 8);
  if (v19 > v24)
    v24 = v19;
  *v18 = v24;
  v25 = *(unsigned __int8 *)(a4 + 47);
  if ((v25 & 0x80u) != 0)
    v25 = *(_QWORD *)(a4 + 32);
  if (v24 <= v25)
    v24 = v25;
  *v18 = v24;
  v26 = *(unsigned __int8 *)(a4 + 71);
  if ((v26 & 0x80u) != 0)
    v26 = *(_QWORD *)(a4 + 56);
  if (v24 <= v26)
    v24 = v26;
  *v18 = v24;
  return result;
}

void sub_20B4E2D40(uint64_t ****a1, __int128 **a2)
{
  uint64_t ***v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  size_t v14;
  uint64_t ***v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  size_t v25;
  uint64_t ***v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  size_t v36;

  v4 = *a1;
  sub_20B4E1964(***a1, *a2, *(unsigned __int8 *)(**a1)[1]);
  v6 = v4[1];
  v5 = v4[2];
  v7 = (uint64_t)v6[4];
  v8 = (unsigned int *)*v6;
  v9 = v6[1];
  v10 = *(_DWORD *)*v6 + 1;
  *(_DWORD *)*v6 = v10;
  if (v10 == *(_DWORD *)v9)
  {
    v11 = v8[1] + 1;
    *v8 = 0;
    v8[1] = v11;
    if (v11 == *((_DWORD *)v9 + 1))
    {
      v12 = v8[2] + 1;
      v8[1] = 0;
      v8[2] = v12;
      if (v12 == *((_DWORD *)v9 + 2))
        goto LABEL_8;
      v13 = 2;
    }
    else
    {
      v13 = 1;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = strlen(*(const char **)(*v6[2] + 8 * v13));
  sub_20AEC01D0(v5, *(_QWORD *)(*v6[2] + 8 * v13), v14);
  sub_20B2DC204(v7, v5, (unsigned int *)*v6, v13, *(_DWORD *)v6[3]);
LABEL_8:
  v15 = *a1;
  sub_20B4E1964(***a1, (__int128 *)((char *)*a2 + 24), *(unsigned __int8 *)(**a1)[1]);
  v17 = v15[1];
  v16 = v15[2];
  v18 = (uint64_t)v17[4];
  v19 = (unsigned int *)*v17;
  v20 = v17[1];
  v21 = *(_DWORD *)*v17 + 1;
  *(_DWORD *)*v17 = v21;
  if (v21 == *(_DWORD *)v20)
  {
    v22 = v19[1] + 1;
    *v19 = 0;
    v19[1] = v22;
    if (v22 == *((_DWORD *)v20 + 1))
    {
      v23 = v19[2] + 1;
      v19[1] = 0;
      v19[2] = v23;
      if (v23 == *((_DWORD *)v20 + 2))
        goto LABEL_15;
      v24 = 2;
    }
    else
    {
      v24 = 1;
    }
  }
  else
  {
    v24 = 0;
  }
  v25 = strlen(*(const char **)(*v17[2] + 8 * v24));
  sub_20AEC01D0(v16, *(_QWORD *)(*v17[2] + 8 * v24), v25);
  sub_20B2DC204(v18, v16, (unsigned int *)*v17, v24, *(_DWORD *)v17[3]);
LABEL_15:
  v26 = *a1;
  sub_20B4E1964(**v26, *a2 + 3, *(unsigned __int8 *)(*v26)[1]);
  v28 = v26[1];
  v27 = v26[2];
  v29 = (uint64_t)v28[4];
  v30 = (unsigned int *)*v28;
  v31 = v28[1];
  v32 = *(_DWORD *)*v28 + 1;
  *(_DWORD *)*v28 = v32;
  if (v32 != *(_DWORD *)v31)
  {
    v35 = 0;
LABEL_22:
    v36 = strlen(*(const char **)(*v28[2] + 8 * v35));
    sub_20AEC01D0(v27, *(_QWORD *)(*v28[2] + 8 * v35), v36);
    sub_20B2DC204(v29, v27, (unsigned int *)*v28, v35, *(_DWORD *)v28[3]);
    return;
  }
  v33 = v30[1] + 1;
  *v30 = 0;
  v30[1] = v33;
  if (v33 != *((_DWORD *)v31 + 1))
  {
    v35 = 1;
    goto LABEL_22;
  }
  v34 = v30[2] + 1;
  v30[1] = 0;
  v30[2] = v34;
  if (v34 != *((_DWORD *)v31 + 2))
  {
    v35 = 2;
    goto LABEL_22;
  }
}

double sub_20B4E2FD4(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20AF57AB0((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E308C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B4E30C4(_BYTE *result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  _BYTE **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v2 = *(_DWORD *)(a2 + 12);
  v3 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = (_BYTE **)result;
    v7 = v2 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(_QWORD *)a2;
    v10 = v3 - 1;
    if (v3 != 1)
    {
      v11 = *(unsigned int *)(a2 + 28);
      if (v2 == 1)
      {
        v16 = 24 * v11;
        do
        {
          sub_20B086994(*v6, v9);
          v9 += v16;
          --v10;
        }
        while (v10);
      }
      else
      {
        v12 = 0;
        v13 = 24 * v11;
        do
        {
          v14 = v9;
          v15 = v7;
          do
          {
            sub_20B086994(*v6, v14);
            v14 += 24 * v8;
            --v15;
          }
          while (v15);
          sub_20B086994(*v6, v14);
          v9 += v13;
          ++v12;
        }
        while (v12 != v10);
      }
    }
    for (; v7; --v7)
    {
      sub_20B086994(*v6, v9);
      v9 += 24 * v8;
    }
    return sub_20B086994(*v6, v9);
  }
  return result;
}

uint64_t sub_20B4E31F0(uint64_t result, uint64_t *a2, _QWORD **a3, _BYTE *a4)
{
  unsigned int v4;
  _BYTE **v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE **v10;
  uint64_t v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE **v16;
  uint64_t v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE **v22;
  uint64_t v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE **v28;
  _BYTE *v29;
  unsigned int v30;
  _BYTE *v31;
  unsigned int v32;
  _BYTE **v33;
  uint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  _BYTE *v37;
  unsigned int v38;
  _BYTE **v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned int v42;
  _BYTE *v43;
  unsigned int v44;
  _BYTE **v45;
  uint64_t v46;
  _BYTE *v47;
  unsigned int v48;
  _BYTE *v49;
  unsigned int v50;

  *a2 = (uint64_t)a4;
  if (*(_DWORD *)(result + 12))
  {
    v4 = 0;
    do
    {
      *a2 = (uint64_t)a4;
      v5 = (_BYTE **)*a3;
      v6 = (_BYTE *)**a3;
      v7 = *v6;
      if (v7 <= *a4)
        LOBYTE(v7) = *a4;
      *v6 = v7;
      v8 = v5[1];
      v9 = *a4;
      if (v9 >= *v8)
        LOBYTE(v9) = *v8;
      *v8 = v9;
      v10 = (_BYTE **)*a3;
      v11 = *a2;
      v12 = (_BYTE *)**a3;
      v13 = *v12;
      if (v13 <= *(unsigned __int8 *)(*a2 + 1))
        LOBYTE(v13) = *(_BYTE *)(*a2 + 1);
      *v12 = v13;
      v14 = v10[1];
      v15 = *(unsigned __int8 *)(v11 + 1);
      if (v15 >= *v14)
        LOBYTE(v15) = *v14;
      *v14 = v15;
      v16 = (_BYTE **)*a3;
      v17 = *a2;
      v18 = (_BYTE *)**a3;
      v19 = *v18;
      if (v19 <= *(unsigned __int8 *)(*a2 + 2))
        LOBYTE(v19) = *(_BYTE *)(*a2 + 2);
      *v18 = v19;
      v20 = v16[1];
      v21 = *(unsigned __int8 *)(v17 + 2);
      if (v21 >= *v20)
        LOBYTE(v21) = *v20;
      *v20 = v21;
      v22 = (_BYTE **)*a3;
      v23 = *a2;
      v24 = (_BYTE *)**a3;
      v25 = *v24;
      if (v25 <= *(unsigned __int8 *)(*a2 + 3))
        LOBYTE(v25) = *(_BYTE *)(*a2 + 3);
      *v24 = v25;
      v26 = v22[1];
      v27 = *(unsigned __int8 *)(v23 + 3);
      if (v27 >= *v26)
        LOBYTE(v27) = *v26;
      *v26 = v27;
      a4 += *(unsigned int *)(result + 16);
      ++v4;
    }
    while (v4 < *(_DWORD *)(result + 12));
  }
  *a2 = (uint64_t)a4;
  v28 = (_BYTE **)*a3;
  v29 = (_BYTE *)**a3;
  v30 = *v29;
  if (v30 <= *a4)
    LOBYTE(v30) = *a4;
  *v29 = v30;
  v31 = v28[1];
  v32 = *a4;
  if (v32 >= *v31)
    LOBYTE(v32) = *v31;
  *v31 = v32;
  v33 = (_BYTE **)*a3;
  v34 = *a2;
  v35 = (_BYTE *)**a3;
  v36 = *v35;
  if (v36 <= *(unsigned __int8 *)(*a2 + 1))
    LOBYTE(v36) = *(_BYTE *)(*a2 + 1);
  *v35 = v36;
  v37 = v33[1];
  v38 = *(unsigned __int8 *)(v34 + 1);
  if (v38 >= *v37)
    LOBYTE(v38) = *v37;
  *v37 = v38;
  v39 = (_BYTE **)*a3;
  v40 = *a2;
  v41 = (_BYTE *)**a3;
  v42 = *v41;
  if (v42 <= *(unsigned __int8 *)(*a2 + 2))
    LOBYTE(v42) = *(_BYTE *)(*a2 + 2);
  *v41 = v42;
  v43 = v39[1];
  v44 = *(unsigned __int8 *)(v40 + 2);
  if (v44 >= *v43)
    LOBYTE(v44) = *v43;
  *v43 = v44;
  v45 = (_BYTE **)*a3;
  v46 = *a2;
  v47 = (_BYTE *)**a3;
  v48 = *v47;
  if (v48 <= *(unsigned __int8 *)(*a2 + 3))
    LOBYTE(v48) = *(_BYTE *)(*a2 + 3);
  *v47 = v48;
  v49 = v45[1];
  v50 = *(unsigned __int8 *)(v46 + 3);
  if (v50 >= *v49)
    LOBYTE(v50) = *v49;
  *v49 = v50;
  return result;
}

void sub_20B4E33D8(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_20B4E34B0(*a3, v4);
      sub_20B4E34B0(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
      sub_20B4E34B0(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
      sub_20B4E34B0(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_20B4E34B0(*a3, v4);
  sub_20B4E34B0(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
  sub_20B4E34B0(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
  sub_20B4E34B0(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
}

void sub_20B4E34B0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DA93C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E3600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B4E361C(uint64_t result, _QWORD *a2, _QWORD **a3, unsigned __int16 *a4)
{
  int v4;
  _WORD *v5;
  _WORD *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;

  *a2 = a4;
  v4 = *(_DWORD *)(result + 12);
  v6 = (_WORD *)**a3;
  v5 = (_WORD *)(*a3)[1];
  if (v4)
  {
    v7 = 2 * *(unsigned int *)(result + 16);
    do
    {
      *a2 = a4;
      v8 = (unsigned __int16)*v6;
      if (v8 <= *a4)
        LOWORD(v8) = *a4;
      *v6 = v8;
      v9 = *a4;
      if (v9 >= (unsigned __int16)*v5)
        LOWORD(v9) = *v5;
      *v5 = v9;
      v10 = (unsigned __int16)*v6;
      if (v10 <= a4[1])
        LOWORD(v10) = a4[1];
      *v6 = v10;
      v11 = a4[1];
      if (v11 >= (unsigned __int16)*v5)
        LOWORD(v11) = *v5;
      *v5 = v11;
      v12 = (unsigned __int16)*v6;
      if (v12 <= a4[2])
        LOWORD(v12) = a4[2];
      *v6 = v12;
      v13 = a4[2];
      if (v13 >= (unsigned __int16)*v5)
        LOWORD(v13) = *v5;
      *v5 = v13;
      v14 = (unsigned __int16)*v6;
      if (v14 <= a4[3])
        LOWORD(v14) = a4[3];
      *v6 = v14;
      v15 = a4[3];
      if (v15 >= (unsigned __int16)*v5)
        LOWORD(v15) = *v5;
      *v5 = v15;
      a4 = (unsigned __int16 *)((char *)a4 + v7);
      --v4;
    }
    while (v4);
  }
  *a2 = a4;
  v16 = (unsigned __int16)*v6;
  if (v16 <= *a4)
    LOWORD(v16) = *a4;
  *v6 = v16;
  v17 = *a4;
  if (v17 >= (unsigned __int16)*v5)
    LOWORD(v17) = *v5;
  *v5 = v17;
  v18 = (unsigned __int16)*v6;
  if (v18 <= a4[1])
    LOWORD(v18) = a4[1];
  *v6 = v18;
  v19 = a4[1];
  if (v19 >= (unsigned __int16)*v5)
    LOWORD(v19) = *v5;
  *v5 = v19;
  v20 = (unsigned __int16)*v6;
  if (v20 <= a4[2])
    LOWORD(v20) = a4[2];
  *v6 = v20;
  v21 = a4[2];
  if (v21 >= (unsigned __int16)*v5)
    LOWORD(v21) = *v5;
  *v5 = v21;
  v22 = (unsigned __int16)*v6;
  if (v22 <= a4[3])
    LOWORD(v22) = a4[3];
  *v6 = v22;
  v23 = a4[3];
  if (v23 >= (unsigned __int16)*v5)
    LOWORD(v23) = *v5;
  *v5 = v23;
  return result;
}

void sub_20B4E3790(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4)
{
  unsigned __int16 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_20B4E3868(*a3, v4);
      sub_20B4E3868(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
      sub_20B4E3868(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
      sub_20B4E3868(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_20B4E3868(*a3, v4);
  sub_20B4E3868(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
  sub_20B4E3868(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
  sub_20B4E3868(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
}

void sub_20B4E3868(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DB7C4(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E39B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B4E39D4(_DWORD *a1, __int16 **a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4;
  __int16 *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (__int16 *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (__int16 *)v4;
      sub_20B4E3ADC(v5, v4);
      sub_20B4E3ADC(*a2 + 1, (uint64_t)(a2[2] + 12));
      sub_20B4E3ADC(*a2 + 2, (uint64_t)(a2[2] + 24));
      sub_20B4E3ADC(*a2 + 3, (uint64_t)(a2[2] + 36));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (__int16 *)v4;
  sub_20B4E3ADC(v5, v4);
  sub_20B4E3ADC(*a2 + 1, (uint64_t)(a2[2] + 12));
  sub_20B4E3ADC(*a2 + 2, (uint64_t)(a2[2] + 24));
  return sub_20B4E3ADC(*a2 + 3, (uint64_t)(a2[2] + 36));
}

double sub_20B4E3ADC(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20B4E148C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E3B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20B4E3BCC(_DWORD *result, unint64_t **a2, uint64_t a3)
{
  int v3;
  int v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v3 = result[5];
  if (!v3)
  {
    v4 = result[3];
    v5 = *a2;
    v7 = **a2;
    if (!v4)
      goto LABEL_78;
    goto LABEL_41;
  }
  v4 = result[3];
  v5 = *a2;
  v6 = result[6];
  v7 = **a2;
  if (v4)
  {
    v8 = 0;
    v9 = (unsigned __int8 *)(a3 + 95);
    v10 = 24 * result[4];
    do
    {
      v11 = v9;
      v12 = v4;
      do
      {
        v13 = *(v11 - 72);
        if ((v13 & 0x80u) != 0)
          v13 = *(_QWORD *)(v11 - 87);
        if (v7 <= v13)
          v7 = v13;
        *v5 = v7;
        v14 = *(v11 - 48);
        if ((v14 & 0x80u) != 0)
          v14 = *(_QWORD *)(v11 - 63);
        if (v7 <= v14)
          v7 = v14;
        *v5 = v7;
        v15 = *(v11 - 24);
        if ((v15 & 0x80u) != 0)
          v15 = *(_QWORD *)(v11 - 39);
        if (v7 <= v15)
          v7 = v15;
        *v5 = v7;
        v16 = *v11;
        if ((v16 & 0x80u) != 0)
          v16 = *(_QWORD *)(v11 - 15);
        if (v7 <= v16)
          v7 = v16;
        *v5 = v7;
        v11 += v10;
        --v12;
      }
      while (v12);
      v17 = *(v11 - 72);
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(v11 - 87);
      if (v7 <= v17)
        v7 = v17;
      *v5 = v7;
      v18 = *(v11 - 48);
      if ((v18 & 0x80u) != 0)
        v18 = *(_QWORD *)(v11 - 63);
      if (v7 <= v18)
        v7 = v18;
      *v5 = v7;
      v19 = *(v11 - 24);
      if ((v19 & 0x80u) != 0)
        v19 = *(_QWORD *)(v11 - 39);
      if (v7 <= v19)
        v7 = v19;
      *v5 = v7;
      v20 = *v11;
      v21 = *(_QWORD *)(v11 - 15);
      if ((v20 & 0x80u) == 0)
        v21 = v20;
      if (v7 <= v21)
        v7 = v21;
      *v5 = v7;
      a3 += 24 * v6;
      ++v8;
      v9 += 24 * v6;
    }
    while (v8 != v3);
LABEL_41:
    v22 = 24 * result[4];
    do
    {
      v23 = *(unsigned __int8 *)(a3 + 23);
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(a3 + 8);
      if (v7 <= v23)
        v7 = v23;
      *v5 = v7;
      v24 = *(unsigned __int8 *)(a3 + 47);
      if ((v24 & 0x80u) != 0)
        v24 = *(_QWORD *)(a3 + 32);
      if (v7 <= v24)
        v7 = v24;
      *v5 = v7;
      v25 = *(unsigned __int8 *)(a3 + 71);
      if ((v25 & 0x80u) != 0)
        v25 = *(_QWORD *)(a3 + 56);
      if (v7 <= v25)
        v7 = v25;
      *v5 = v7;
      v26 = *(unsigned __int8 *)(a3 + 95);
      if ((v26 & 0x80u) != 0)
        v26 = *(_QWORD *)(a3 + 80);
      if (v7 <= v26)
        v7 = v26;
      *v5 = v7;
      a3 += v22;
      --v4;
    }
    while (v4);
    goto LABEL_78;
  }
  v27 = 24 * v6;
  do
  {
    v28 = *(unsigned __int8 *)(a3 + 23);
    if ((v28 & 0x80u) != 0)
      v28 = *(_QWORD *)(a3 + 8);
    if (v7 <= v28)
      v7 = v28;
    *v5 = v7;
    v29 = *(unsigned __int8 *)(a3 + 47);
    if ((v29 & 0x80u) != 0)
      v29 = *(_QWORD *)(a3 + 32);
    if (v7 <= v29)
      v7 = v29;
    *v5 = v7;
    v30 = *(unsigned __int8 *)(a3 + 71);
    if ((v30 & 0x80u) != 0)
      v30 = *(_QWORD *)(a3 + 56);
    if (v7 <= v30)
      v7 = v30;
    *v5 = v7;
    v31 = *(unsigned __int8 *)(a3 + 95);
    if ((v31 & 0x80u) != 0)
      v31 = *(_QWORD *)(a3 + 80);
    if (v7 <= v31)
      v7 = v31;
    *v5 = v7;
    a3 += v27;
    --v3;
  }
  while (v3);
LABEL_78:
  v32 = *(unsigned __int8 *)(a3 + 23);
  if ((v32 & 0x80u) != 0)
    v32 = *(_QWORD *)(a3 + 8);
  if (v7 > v32)
    v32 = v7;
  *v5 = v32;
  v33 = *(unsigned __int8 *)(a3 + 47);
  if ((v33 & 0x80u) != 0)
    v33 = *(_QWORD *)(a3 + 32);
  if (v32 <= v33)
    v32 = v33;
  *v5 = v32;
  v34 = *(unsigned __int8 *)(a3 + 71);
  if ((v34 & 0x80u) != 0)
    v34 = *(_QWORD *)(a3 + 56);
  if (v32 <= v34)
    v32 = v34;
  *v5 = v32;
  v35 = *(unsigned __int8 *)(a3 + 95);
  if ((v35 & 0x80u) != 0)
    v35 = *(_QWORD *)(a3 + 80);
  if (v32 <= v35)
    v32 = v35;
  *v5 = v32;
  return result;
}

void sub_20B4E3EFC(uint64_t ****a1, __int128 **a2)
{
  uint64_t ***v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  size_t v14;
  uint64_t ***v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  size_t v25;
  uint64_t ***v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  size_t v36;
  uint64_t ***v37;
  uint64_t **v38;
  uint64_t **v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t *v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  size_t v47;

  v4 = *a1;
  sub_20B4E1964(***a1, *a2, *(unsigned __int8 *)(**a1)[1]);
  v6 = v4[1];
  v5 = v4[2];
  v7 = (uint64_t)v6[4];
  v8 = (unsigned int *)*v6;
  v9 = v6[1];
  v10 = *(_DWORD *)*v6 + 1;
  *(_DWORD *)*v6 = v10;
  if (v10 == *(_DWORD *)v9)
  {
    v11 = v8[1] + 1;
    *v8 = 0;
    v8[1] = v11;
    if (v11 == *((_DWORD *)v9 + 1))
    {
      v12 = v8[2] + 1;
      v8[1] = 0;
      v8[2] = v12;
      if (v12 == *((_DWORD *)v9 + 2))
        goto LABEL_8;
      v13 = 2;
    }
    else
    {
      v13 = 1;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = strlen(*(const char **)(*v6[2] + 8 * v13));
  sub_20AEC01D0(v5, *(_QWORD *)(*v6[2] + 8 * v13), v14);
  sub_20B2DC204(v7, v5, (unsigned int *)*v6, v13, *(_DWORD *)v6[3]);
LABEL_8:
  v15 = *a1;
  sub_20B4E1964(***a1, (__int128 *)((char *)*a2 + 24), *(unsigned __int8 *)(**a1)[1]);
  v17 = v15[1];
  v16 = v15[2];
  v18 = (uint64_t)v17[4];
  v19 = (unsigned int *)*v17;
  v20 = v17[1];
  v21 = *(_DWORD *)*v17 + 1;
  *(_DWORD *)*v17 = v21;
  if (v21 == *(_DWORD *)v20)
  {
    v22 = v19[1] + 1;
    *v19 = 0;
    v19[1] = v22;
    if (v22 == *((_DWORD *)v20 + 1))
    {
      v23 = v19[2] + 1;
      v19[1] = 0;
      v19[2] = v23;
      if (v23 == *((_DWORD *)v20 + 2))
        goto LABEL_15;
      v24 = 2;
    }
    else
    {
      v24 = 1;
    }
  }
  else
  {
    v24 = 0;
  }
  v25 = strlen(*(const char **)(*v17[2] + 8 * v24));
  sub_20AEC01D0(v16, *(_QWORD *)(*v17[2] + 8 * v24), v25);
  sub_20B2DC204(v18, v16, (unsigned int *)*v17, v24, *(_DWORD *)v17[3]);
LABEL_15:
  v26 = *a1;
  sub_20B4E1964(***a1, *a2 + 3, *(unsigned __int8 *)(**a1)[1]);
  v28 = v26[1];
  v27 = v26[2];
  v29 = (uint64_t)v28[4];
  v30 = (unsigned int *)*v28;
  v31 = v28[1];
  v32 = *(_DWORD *)*v28 + 1;
  *(_DWORD *)*v28 = v32;
  if (v32 == *(_DWORD *)v31)
  {
    v33 = v30[1] + 1;
    *v30 = 0;
    v30[1] = v33;
    if (v33 == *((_DWORD *)v31 + 1))
    {
      v34 = v30[2] + 1;
      v30[1] = 0;
      v30[2] = v34;
      if (v34 == *((_DWORD *)v31 + 2))
        goto LABEL_22;
      v35 = 2;
    }
    else
    {
      v35 = 1;
    }
  }
  else
  {
    v35 = 0;
  }
  v36 = strlen(*(const char **)(*v28[2] + 8 * v35));
  sub_20AEC01D0(v27, *(_QWORD *)(*v28[2] + 8 * v35), v36);
  sub_20B2DC204(v29, v27, (unsigned int *)*v28, v35, *(_DWORD *)v28[3]);
LABEL_22:
  v37 = *a1;
  sub_20B4E1964(**v37, (__int128 *)((char *)*a2 + 72), *(unsigned __int8 *)(*v37)[1]);
  v39 = v37[1];
  v38 = v37[2];
  v40 = (uint64_t)v39[4];
  v41 = (unsigned int *)*v39;
  v42 = v39[1];
  v43 = *(_DWORD *)*v39 + 1;
  *(_DWORD *)*v39 = v43;
  if (v43 != *(_DWORD *)v42)
  {
    v46 = 0;
LABEL_29:
    v47 = strlen(*(const char **)(*v39[2] + 8 * v46));
    sub_20AEC01D0(v38, *(_QWORD *)(*v39[2] + 8 * v46), v47);
    sub_20B2DC204(v40, v38, (unsigned int *)*v39, v46, *(_DWORD *)v39[3]);
    return;
  }
  v44 = v41[1] + 1;
  *v41 = 0;
  v41[1] = v44;
  if (v44 != *((_DWORD *)v42 + 1))
  {
    v46 = 1;
    goto LABEL_29;
  }
  v45 = v41[2] + 1;
  v41[1] = 0;
  v41[2] = v45;
  if (v45 != *((_DWORD *)v42 + 2))
  {
    v46 = 2;
    goto LABEL_29;
  }
}

double sub_20B4E4254(_DWORD *a1, float **a2, float *a3, uint64_t a4)
{
  uint64_t v4;
  float *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (float *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (float *)v4;
      sub_20B4E435C(v5, v4);
      sub_20B4E435C(*a2 + 1, (uint64_t)(a2[2] + 6));
      sub_20B4E435C(*a2 + 2, (uint64_t)(a2[2] + 12));
      sub_20B4E435C(*a2 + 3, (uint64_t)(a2[2] + 18));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (float *)v4;
  sub_20B4E435C(v5, v4);
  sub_20B4E435C(*a2 + 1, (uint64_t)(a2[2] + 6));
  sub_20B4E435C(*a2 + 2, (uint64_t)(a2[2] + 12));
  return sub_20B4E435C(*a2 + 3, (uint64_t)(a2[2] + 18));
}

double sub_20B4E435C(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20AF57AB0((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E4414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B4E444C(_BYTE *result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  _BYTE **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v2 = *(_DWORD *)(a2 + 12);
  v3 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = (_BYTE **)result;
    v7 = v2 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(_QWORD *)a2;
    v10 = v3 - 1;
    if (v3 != 1)
    {
      v11 = *(unsigned int *)(a2 + 28);
      if (v2 == 1)
      {
        v16 = 24 * v11;
        do
        {
          sub_20B4E4578(*v6, v9);
          v9 += v16;
          --v10;
        }
        while (v10);
      }
      else
      {
        v12 = 0;
        v13 = 24 * v11;
        do
        {
          v14 = v9;
          v15 = v7;
          do
          {
            sub_20B4E4578(*v6, v14);
            v14 += 24 * v8;
            --v15;
          }
          while (v15);
          sub_20B4E4578(*v6, v14);
          v9 += v13;
          ++v12;
        }
        while (v12 != v10);
      }
    }
    for (; v7; --v7)
    {
      sub_20B4E4578(*v6, v9);
      v9 += 24 * v8;
    }
    return sub_20B4E4578(*v6, v9);
  }
  return result;
}

_BYTE *sub_20B4E4578(_BYTE *result, uint64_t a2)
{
  uint64_t **v3;
  unint64_t **v4;
  char v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  size_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  uint64_t v46;

  v3 = (uint64_t **)result;
  v4 = (unint64_t **)(result + 8);
  v5 = *(_BYTE *)(a2 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  if (v5 >= 0)
    v7 = (_BYTE *)a2;
  else
    v7 = *(_BYTE **)a2;
  if (v6 >= 1)
  {
    v8 = &v7[v6];
    v9 = v6;
    result = v7;
    do
    {
      result = memchr(result, 46, v9);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v8)
          break;
        v35 = result - v7;
        v10 = v3;
        if (result - v7 != -1)
        {
          v36 = (_BYTE *)**v3;
          if ((unint64_t)v36 <= v35)
            v36 = (_BYTE *)(result - v7);
          **v3 = (uint64_t)v36;
          v37 = *(unsigned __int8 *)(a2 + 23);
          if ((v37 & 0x80u) != 0)
            v37 = *(_QWORD *)(a2 + 8);
          v6 = v37 + ~v35;
          v10 = (uint64_t **)v4;
        }
        goto LABEL_13;
      }
      ++result;
      v9 = v8 - result;
    }
    while (v8 - result >= 1);
  }
  v10 = v3;
LABEL_13:
  v11 = *v10;
  v12 = *v11;
  if (*v11 <= (unint64_t)v6)
    v12 = v6;
  *v11 = v12;
  v13 = *(char *)(a2 + 47);
  if (v13 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 47);
  else
    v14 = *(_QWORD *)(a2 + 32);
  if (v13 >= 0)
    v15 = (_BYTE *)(a2 + 24);
  else
    v15 = *(_BYTE **)(a2 + 24);
  if (v14 >= 1)
  {
    v16 = &v15[v14];
    v17 = v14;
    result = v15;
    do
    {
      result = memchr(result, 46, v17);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v16)
          break;
        v38 = result - v15;
        v18 = v3;
        if (result - v15 != -1)
        {
          v39 = (_BYTE *)**v3;
          if ((unint64_t)v39 <= v38)
            v39 = (_BYTE *)(result - v15);
          **v3 = (uint64_t)v39;
          v40 = *(unsigned __int8 *)(a2 + 47);
          if ((v40 & 0x80u) != 0)
            v40 = *(_QWORD *)(a2 + 32);
          v14 = v40 + ~v38;
          v18 = (uint64_t **)v4;
        }
        goto LABEL_27;
      }
      ++result;
      v17 = v16 - result;
    }
    while (v16 - result >= 1);
  }
  v18 = v3;
LABEL_27:
  v19 = *v18;
  v20 = *v19;
  if (*v19 <= (unint64_t)v14)
    v20 = v14;
  *v19 = v20;
  v21 = *(char *)(a2 + 71);
  if (v21 >= 0)
    v22 = *(unsigned __int8 *)(a2 + 71);
  else
    v22 = *(_QWORD *)(a2 + 56);
  if (v21 >= 0)
    v23 = (_BYTE *)(a2 + 48);
  else
    v23 = *(_BYTE **)(a2 + 48);
  if (v22 >= 1)
  {
    v24 = &v23[v22];
    v25 = v22;
    result = v23;
    do
    {
      result = memchr(result, 46, v25);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v24)
          break;
        v41 = result - v23;
        v26 = v3;
        if (result - v23 != -1)
        {
          v42 = (_BYTE *)**v3;
          if ((unint64_t)v42 <= v41)
            v42 = (_BYTE *)(result - v23);
          **v3 = (uint64_t)v42;
          v43 = *(unsigned __int8 *)(a2 + 71);
          if ((v43 & 0x80u) != 0)
            v43 = *(_QWORD *)(a2 + 56);
          v22 = v43 + ~v41;
          v26 = (uint64_t **)v4;
        }
        goto LABEL_41;
      }
      ++result;
      v25 = v24 - result;
    }
    while (v24 - result >= 1);
  }
  v26 = v3;
LABEL_41:
  v27 = *v26;
  v28 = *v27;
  if (*v27 <= (unint64_t)v22)
    v28 = v22;
  *v27 = v28;
  v29 = *(char *)(a2 + 95);
  if (v29 >= 0)
    v30 = *(unsigned __int8 *)(a2 + 95);
  else
    v30 = *(_QWORD *)(a2 + 80);
  if (v29 >= 0)
    v31 = (_BYTE *)(a2 + 72);
  else
    v31 = *(_BYTE **)(a2 + 72);
  if (v30 >= 1)
  {
    v32 = &v31[v30];
    v33 = v30;
    result = v31;
    do
    {
      result = memchr(result, 46, v33);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v32)
          break;
        v44 = result - v31;
        if (result - v31 == -1)
          break;
        v45 = (_BYTE *)**v3;
        if ((unint64_t)v45 <= v44)
          v45 = (_BYTE *)(result - v31);
        **v3 = (uint64_t)v45;
        v46 = *(unsigned __int8 *)(a2 + 95);
        if ((v46 & 0x80u) != 0)
          v46 = *(_QWORD *)(a2 + 80);
        v30 = v46 + ~v44;
        goto LABEL_55;
      }
      ++result;
      v33 = v32 - result;
    }
    while (v32 - result >= 1);
  }
  v4 = (unint64_t **)v3;
LABEL_55:
  v34 = **v4;
  if (v34 <= v30)
    v34 = v30;
  **v4 = v34;
  return result;
}

_QWORD *sub_20B4E48AC(uint64_t a1, uint64_t a2, uint64_t *a3, void **a4)
{
  void **v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_20B4E2658(*a3, v4);
      sub_20B4E2658(*a3, (void **)(*(_QWORD *)a2 + 24));
      sub_20B4E2658(*a3, (void **)(*(_QWORD *)a2 + 48));
      sub_20B4E2658(*a3, (void **)(*(_QWORD *)a2 + 72));
      v4 += 3 * *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_20B4E2658(*a3, v4);
  sub_20B4E2658(*a3, (void **)(*(_QWORD *)a2 + 24));
  sub_20B4E2658(*a3, (void **)(*(_QWORD *)a2 + 48));
  return sub_20B4E2658(*a3, (void **)(*(_QWORD *)a2 + 72));
}

void sub_20B4E4988(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DA93C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E4AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B4E4AF4(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DB7C4(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E4C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B4E4C60(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20B4E148C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E4D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

double sub_20B4E4D50(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20AF57AB0((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E4E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

void sub_20B4E4E40(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DB7C4(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E4F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B4E4FAC(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20B4E148C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E5064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

double sub_20B4E509C(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20AF57AB0((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E5154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

void sub_20B4E518C(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_20B4E5264(*a3, v4);
      sub_20B4E5264(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
      sub_20B4E5264(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
      sub_20B4E5264(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_20B4E5264(*a3, v4);
  sub_20B4E5264(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
  sub_20B4E5264(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
  sub_20B4E5264(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
}

void sub_20B4E5264(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DA93C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E53B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B4E53D0(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4)
{
  unsigned __int16 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_20B4E54A8(*a3, v4);
      sub_20B4E54A8(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
      sub_20B4E54A8(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
      sub_20B4E54A8(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_20B4E54A8(*a3, v4);
  sub_20B4E54A8(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
  sub_20B4E54A8(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
  sub_20B4E54A8(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
}

void sub_20B4E54A8(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DB7C4(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E55F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B4E5614(_DWORD *a1, __int16 **a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4;
  __int16 *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (__int16 *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (__int16 *)v4;
      sub_20B4E571C(v5, v4);
      sub_20B4E571C(*a2 + 1, (uint64_t)(a2[2] + 12));
      sub_20B4E571C(*a2 + 2, (uint64_t)(a2[2] + 24));
      sub_20B4E571C(*a2 + 3, (uint64_t)(a2[2] + 36));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (__int16 *)v4;
  sub_20B4E571C(v5, v4);
  sub_20B4E571C(*a2 + 1, (uint64_t)(a2[2] + 12));
  sub_20B4E571C(*a2 + 2, (uint64_t)(a2[2] + 24));
  return sub_20B4E571C(*a2 + 3, (uint64_t)(a2[2] + 36));
}

double sub_20B4E571C(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20B4E148C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E57D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

double sub_20B4E580C(_DWORD *a1, float **a2, float *a3, uint64_t a4)
{
  uint64_t v4;
  float *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (float *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (float *)v4;
      sub_20B4E5914(v5, v4);
      sub_20B4E5914(*a2 + 1, (uint64_t)(a2[2] + 6));
      sub_20B4E5914(*a2 + 2, (uint64_t)(a2[2] + 12));
      sub_20B4E5914(*a2 + 3, (uint64_t)(a2[2] + 18));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (float *)v4;
  sub_20B4E5914(v5, v4);
  sub_20B4E5914(*a2 + 1, (uint64_t)(a2[2] + 6));
  sub_20B4E5914(*a2 + 2, (uint64_t)(a2[2] + 12));
  return sub_20B4E5914(*a2 + 3, (uint64_t)(a2[2] + 18));
}

double sub_20B4E5914(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20AF57AB0((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E59CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

void sub_20B4E5A04(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_20B4E5ADC(*a3, v4);
      sub_20B4E5ADC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
      sub_20B4E5ADC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
      sub_20B4E5ADC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_20B4E5ADC(*a3, v4);
  sub_20B4E5ADC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
  sub_20B4E5ADC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
  sub_20B4E5ADC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
}

void sub_20B4E5ADC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DA93C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E5C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B4E5C48(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4)
{
  unsigned __int16 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_20B4E5D20(*a3, v4);
      sub_20B4E5D20(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
      sub_20B4E5D20(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
      sub_20B4E5D20(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_20B4E5D20(*a3, v4);
  sub_20B4E5D20(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
  sub_20B4E5D20(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
  sub_20B4E5D20(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
}

void sub_20B4E5D20(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DB7C4(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E5E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B4E5E8C(_DWORD *a1, __int16 **a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4;
  __int16 *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (__int16 *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (__int16 *)v4;
      sub_20B4E5F94(v5, v4);
      sub_20B4E5F94(*a2 + 1, (uint64_t)(a2[2] + 12));
      sub_20B4E5F94(*a2 + 2, (uint64_t)(a2[2] + 24));
      sub_20B4E5F94(*a2 + 3, (uint64_t)(a2[2] + 36));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (__int16 *)v4;
  sub_20B4E5F94(v5, v4);
  sub_20B4E5F94(*a2 + 1, (uint64_t)(a2[2] + 12));
  sub_20B4E5F94(*a2 + 2, (uint64_t)(a2[2] + 24));
  return sub_20B4E5F94(*a2 + 3, (uint64_t)(a2[2] + 36));
}

double sub_20B4E5F94(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20B4E148C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E604C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

double sub_20B4E6084(_DWORD *a1, float **a2, float *a3, uint64_t a4)
{
  uint64_t v4;
  float *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (float *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (float *)v4;
      sub_20B4E618C(v5, v4);
      sub_20B4E618C(*a2 + 1, (uint64_t)(a2[2] + 6));
      sub_20B4E618C(*a2 + 2, (uint64_t)(a2[2] + 12));
      sub_20B4E618C(*a2 + 3, (uint64_t)(a2[2] + 18));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (float *)v4;
  sub_20B4E618C(v5, v4);
  sub_20B4E618C(*a2 + 1, (uint64_t)(a2[2] + 6));
  sub_20B4E618C(*a2 + 2, (uint64_t)(a2[2] + 12));
  return sub_20B4E618C(*a2 + 3, (uint64_t)(a2[2] + 18));
}

double sub_20B4E618C(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20AF57AB0((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E6244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

void sub_20B4E627C(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_20B4E6354(*a3, v4);
      sub_20B4E6354(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
      sub_20B4E6354(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
      sub_20B4E6354(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_20B4E6354(*a3, v4);
  sub_20B4E6354(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
  sub_20B4E6354(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
  sub_20B4E6354(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
}

void sub_20B4E6354(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DA93C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E64A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B4E64C0(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4)
{
  unsigned __int16 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_20B4E6598(*a3, v4);
      sub_20B4E6598(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
      sub_20B4E6598(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
      sub_20B4E6598(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_20B4E6598(*a3, v4);
  sub_20B4E6598(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
  sub_20B4E6598(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
  sub_20B4E6598(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
}

void sub_20B4E6598(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DB7C4(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E66E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B4E6704(_DWORD *a1, __int16 **a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4;
  __int16 *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (__int16 *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (__int16 *)v4;
      sub_20B4E680C(v5, v4);
      sub_20B4E680C(*a2 + 1, (uint64_t)(a2[2] + 12));
      sub_20B4E680C(*a2 + 2, (uint64_t)(a2[2] + 24));
      sub_20B4E680C(*a2 + 3, (uint64_t)(a2[2] + 36));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (__int16 *)v4;
  sub_20B4E680C(v5, v4);
  sub_20B4E680C(*a2 + 1, (uint64_t)(a2[2] + 12));
  sub_20B4E680C(*a2 + 2, (uint64_t)(a2[2] + 24));
  return sub_20B4E680C(*a2 + 3, (uint64_t)(a2[2] + 36));
}

double sub_20B4E680C(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20B4E148C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E68C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

double sub_20B4E68FC(_DWORD *a1, float **a2, float *a3, uint64_t a4)
{
  uint64_t v4;
  float *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (float *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (float *)v4;
      sub_20B4E6A04(v5, v4);
      sub_20B4E6A04(*a2 + 1, (uint64_t)(a2[2] + 6));
      sub_20B4E6A04(*a2 + 2, (uint64_t)(a2[2] + 12));
      sub_20B4E6A04(*a2 + 3, (uint64_t)(a2[2] + 18));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (float *)v4;
  sub_20B4E6A04(v5, v4);
  sub_20B4E6A04(*a2 + 1, (uint64_t)(a2[2] + 6));
  sub_20B4E6A04(*a2 + 2, (uint64_t)(a2[2] + 12));
  return sub_20B4E6A04(*a2 + 3, (uint64_t)(a2[2] + 18));
}

double sub_20B4E6A04(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20AF57AB0((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E6ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

void sub_20B4E6AF4(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_20B4E6BCC(*a3, v4);
      sub_20B4E6BCC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
      sub_20B4E6BCC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
      sub_20B4E6BCC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_20B4E6BCC(*a3, v4);
  sub_20B4E6BCC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
  sub_20B4E6BCC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
  sub_20B4E6BCC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
}

void sub_20B4E6BCC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DA93C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E6D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B4E6D38(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4)
{
  unsigned __int16 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_20B4E6E10(*a3, v4);
      sub_20B4E6E10(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
      sub_20B4E6E10(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
      sub_20B4E6E10(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_20B4E6E10(*a3, v4);
  sub_20B4E6E10(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
  sub_20B4E6E10(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
  sub_20B4E6E10(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
}

void sub_20B4E6E10(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20B2DB7C4(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_20B2DC204(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_20B4E6F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B4E6F7C(_DWORD *a1, __int16 **a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4;
  __int16 *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (__int16 *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (__int16 *)v4;
      sub_20B4E7084(v5, v4);
      sub_20B4E7084(*a2 + 1, (uint64_t)(a2[2] + 12));
      sub_20B4E7084(*a2 + 2, (uint64_t)(a2[2] + 24));
      sub_20B4E7084(*a2 + 3, (uint64_t)(a2[2] + 36));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (__int16 *)v4;
  sub_20B4E7084(v5, v4);
  sub_20B4E7084(*a2 + 1, (uint64_t)(a2[2] + 12));
  sub_20B4E7084(*a2 + 2, (uint64_t)(a2[2] + 24));
  return sub_20B4E7084(*a2 + 3, (uint64_t)(a2[2] + 36));
}

double sub_20B4E7084(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20B4E148C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E713C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

double sub_20B4E7174(_DWORD *a1, float **a2, float *a3, uint64_t a4)
{
  uint64_t v4;
  float *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (float *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (float *)v4;
      sub_20B4E727C(v5, v4);
      sub_20B4E727C(*a2 + 1, (uint64_t)(a2[2] + 6));
      sub_20B4E727C(*a2 + 2, (uint64_t)(a2[2] + 12));
      sub_20B4E727C(*a2 + 3, (uint64_t)(a2[2] + 18));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (float *)v4;
  sub_20B4E727C(v5, v4);
  sub_20B4E727C(*a2 + 1, (uint64_t)(a2[2] + 6));
  sub_20B4E727C(*a2 + 2, (uint64_t)(a2[2] + 12));
  return sub_20B4E727C(*a2 + 3, (uint64_t)(a2[2] + 18));
}

double sub_20B4E727C(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20AF57AB0((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C41DFA8[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C41DF78[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B4E7334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C41DF78[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B4E736C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24C41E150;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = &off_24C41DFE8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20B4ED800(a1[1]);
  }
  return a1;
}

void sub_20B4E7430(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B4E7478(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24C41E150;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = &off_24C41DFE8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20B4ED800(a1[1]);
  }
  return a1;
}

void sub_20B4E753C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B4E7584(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (uint64_t *)a1[1];
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
    if (v4)
LABEL_8:
      sub_20B4ED9D4(a1[1]);
  }
LABEL_9:
  *a1 = &off_24C41E150;
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20B4E7670(_QWORD *a1)
{
  sub_20B4E7584(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4E7694(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 249, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  v13 = v10;
  v11 = atomic_load((unint64_t *)(v10 + 104));
  if (v11 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once((std::once_flag::_State_type *)(v10 + 104), &v14, (void (__cdecl *)(void *))sub_20B4EA420);
  }
  return *(_QWORD *)(*(_QWORD *)(v10 + 112) + 8 * a2);
}

_QWORD *sub_20B4E7798(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24C41E150;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = &off_24C41E008;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20B4ED8EC(a1[1]);
  }
  return a1;
}

void sub_20B4E785C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B4E78A4(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24C41E150;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = &off_24C41E008;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20B4ED8EC(a1[1]);
  }
  return a1;
}

void sub_20B4E7968(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B4E79B0(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (uint64_t *)a1[1];
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
    if (v4)
LABEL_8:
      sub_20B4EDAC0(a1[1]);
  }
LABEL_9:
  *a1 = &off_24C41E150;
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20B4E7A9C(_QWORD *a1)
{
  sub_20B4E79B0(a1);
  JUMPOUT(0x20BD3583CLL);
}

__IOSurface *sub_20B4E7AC0@<X0>(IOSurfaceRef *a1@<X0>, _QWORD *a2@<X8>)
{
  __IOSurface *result;
  size_t PlaneCount;
  unint64_t v6;
  char *v7;
  size_t v8;

  result = *a1;
  if (result)
  {
    PlaneCount = IOSurfaceGetPlaneCount(result);
    if (PlaneCount <= 1)
      v6 = 1;
    else
      v6 = PlaneCount;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    if (v6 >> 61)
      sub_20AEC60B8();
    v7 = (char *)operator new(8 * v6);
    *a2 = v7;
    a2[2] = &v7[8 * v6];
    bzero(v7, 8 * v6);
    v8 = 0;
    a2[1] = &v7[8 * v6];
    do
    {
      result = (__IOSurface *)IOSurfaceGetBaseAddressOfPlane(*a1, v8);
      *(_QWORD *)&v7[8 * v8++] = result;
    }
    while (v6 != v8);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

void sub_20B4E7B88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B4E7BB0(_QWORD *a1, std::__shared_weak_count_vtbl *cf, int a3, int a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;

  if (a3)
  {
    sub_20B285A10(&v31, cf);
    v7 = v32;
    v29 = v31;
    v30 = v32;
    if (!v32)
      goto LABEL_12;
  }
  else
  {
    v31 = cf;
    v7 = (std::__shared_weak_count *)operator new();
    v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C416BA8;
    v7->__shared_owners_ = 0;
    v7->__shared_weak_owners_ = 0;
    v7[1].__vftable = cf;
    v32 = v7;
    v29 = cf;
    v30 = v7;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = v32;
  if (v32)
  {
    v11 = (unint64_t *)&v32->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_12:
  if (v30)
  {
    v13 = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *a1 = &off_24C41E150;
  v15 = (char *)operator new(0xA0uLL);
  v16 = v15;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = &off_24C41E070;
  v17 = v15 + 24;
  if (v30)
  {
    v18 = (unint64_t *)&v30->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    *((_QWORD *)v15 + 3) = v29;
    *((_QWORD *)v15 + 4) = v30;
    do
      v20 = __ldxr(v18);
    while (__stxr(v20 + 1, v18));
  }
  else
  {
    *((_QWORD *)v15 + 3) = v29;
    *((_QWORD *)v15 + 4) = 0;
  }
  *((_DWORD *)v15 + 10) = a4;
  *((_DWORD *)v15 + 11) = 0;
  *((_QWORD *)v15 + 6) = a4 == 1;
  *((_QWORD *)v15 + 7) = a4 == 2;
  *((_QWORD *)v15 + 8) = 850045863;
  v21 = 0uLL;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *((_QWORD *)v15 + 15) = 0;
  if (v30)
  {
    v22 = (unint64_t *)&v30->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v21 = 0uLL;
    }
  }
  *((_OWORD *)v16 + 8) = v21;
  *((_OWORD *)v16 + 9) = v21;
  a1[1] = v17;
  a1[2] = v16;
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v30)
  {
    v26 = (unint64_t *)&v30->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return a1;
}

void sub_20B4E7DF8(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4E7E10(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B4E7E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20AEC147C((uint64_t)&a11);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4E7E40(unsigned int *a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count_vtbl *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t (****v22)();
  int v23;
  size_t v24;
  __int128 *p_dst;
  const void **v26;
  uint64_t (***v27)();
  uint64_t (***v28)();
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (****v32)();
  uint64_t v33;
  uint64_t v34;
  uint64_t (***v35)();
  int v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  char v53;
  char v54;
  uint64_t (**v55)();
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  char v65;
  char v66;
  __int128 properties;
  __int128 __p;
  uint64_t v69;
  unsigned __int8 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  char v79;
  char v80;
  _DWORD v81[6];
  int v82;
  __int128 __dst;
  unint64_t v84;
  uint64_t (***v85)();
  const char *v86;
  _DWORD *v87;
  const char *v88;
  const char *v89;
  uint64_t (****v90)();

  v78 = a2;
  if (a1[1] * *a1)
  {
    sub_20B4EA9B0(a1, a2, a3, 0, 0, (uint64_t)&properties);
    v57 = properties;
    sub_20B284A78(&properties, (uint64_t)&v57);
    v6 = (std::__shared_weak_count_vtbl *)IOSurfaceCreate((CFDictionaryRef)properties);
    sub_20B4E7BB0(&v55, v6, 0, 0);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&properties + 1);
    if (!*((_QWORD *)&properties + 1))
      goto LABEL_6;
    v8 = (unint64_t *)(*((_QWORD *)&properties + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      v10 = (uint64_t *)v56;
      if (!(_QWORD)v56)
        goto LABEL_45;
    }
    else
    {
LABEL_6:
      v10 = (uint64_t *)v56;
      if (!(_QWORD)v56)
        goto LABEL_45;
    }
    v12 = *v10;
    v11 = (std::__shared_weak_count *)v10[1];
    if (!v11)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12)
        goto LABEL_13;
    }
    else
    {
LABEL_12:
      if (v12)
      {
LABEL_13:
        *(_QWORD *)a4 = &off_24C41E150;
        *(_OWORD *)(a4 + 8) = v56;
        *(_BYTE *)(a4 + 120) = 1;
LABEL_106:
        v41 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
        if (*((_QWORD *)&v57 + 1))
        {
          v42 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        return;
      }
    }
LABEL_45:
    v82 = 0;
    sub_20AF9CDA4(v81, "Failed to create IOSurface for format ");
    sub_20AF80CB8((uint64_t)&v80, (uint64_t)v81, &v78);
    v85 = (uint64_t (***)())v81;
    v86 = " and size ";
    v87 = v81;
    v88 = " and size ";
    v89 = " and size ";
    if (v82 == -1)
      sub_20AECFAB8();
    *(_QWORD *)&__dst = &v85;
    ((void (*)(__int128 *, _DWORD *))off_24C41E110[v82])(&__dst, v81);
    sub_20B288F00((uint64_t)&v79, (uint64_t)v81, a1);
    v85 = (uint64_t (***)())v81;
    v86 = ", used properties:\n";
    v87 = v81;
    v88 = ", used properties:\n";
    v89 = ", used properties:\n";
    if (v82 == -1)
      sub_20AECFAB8();
    *(_QWORD *)&__dst = &v85;
    ((void (*)(__int128 *, _DWORD *))off_24C41E128[v82])(&__dst, v81);
    v18 = operator new();
    *(_QWORD *)(v18 + 272) = 0;
    *(_OWORD *)(v18 + 240) = 0u;
    *(_OWORD *)(v18 + 256) = 0u;
    *(_OWORD *)(v18 + 208) = 0u;
    *(_OWORD *)(v18 + 224) = 0u;
    *(_OWORD *)(v18 + 176) = 0u;
    *(_OWORD *)(v18 + 192) = 0u;
    *(_OWORD *)(v18 + 144) = 0u;
    *(_OWORD *)(v18 + 160) = 0u;
    *(_OWORD *)(v18 + 112) = 0u;
    *(_OWORD *)(v18 + 128) = 0u;
    *(_OWORD *)(v18 + 80) = 0u;
    *(_OWORD *)(v18 + 96) = 0u;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)v18 = 0u;
    sub_20AEC0BD8(v18);
    v90 = (uint64_t (****)())v18;
    sub_20B284A78(&v85, (uint64_t)&v57);
    sub_20B4F66B8((_QWORD *)(v18 + 16), v85);
    v19 = (std::__shared_weak_count *)v86;
    if (!v86)
      goto LABEL_51;
    v20 = (unint64_t *)(v86 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v22 = v90;
      v23 = *((_DWORD *)v90 + 30);
      if ((v23 & 0x10) == 0)
        goto LABEL_52;
    }
    else
    {
LABEL_51:
      v22 = v90;
      v23 = *((_DWORD *)v90 + 30);
      if ((v23 & 0x10) == 0)
      {
LABEL_52:
        if ((v23 & 8) == 0)
        {
          v24 = 0;
          HIBYTE(v84) = 0;
          p_dst = &__dst;
          goto LABEL_67;
        }
        v26 = (const void **)(v22 + 5);
        v27 = v22[7];
LABEL_59:
        v29 = *v26;
        v24 = (char *)v27 - (_BYTE *)*v26;
        if (v24 >= 0x7FFFFFFFFFFFFFF8)
          sub_20AEC0138();
        if (v24 >= 0x17)
        {
          v30 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v24 | 7) != 0x17)
            v30 = v24 | 7;
          v31 = v30 + 1;
          p_dst = (__int128 *)operator new(v30 + 1);
          *((_QWORD *)&__dst + 1) = v24;
          v84 = v31 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v84) = (_BYTE)v27 - *(_BYTE *)v26;
          p_dst = &__dst;
          if (!v24)
          {
LABEL_67:
            *((_BYTE *)p_dst + v24) = 0;
            v32 = v90;
            if (v90)
            {
              v33 = MEMORY[0x24BEDB7F0];
              v34 = *MEMORY[0x24BEDB7F0];
              *v90 = (uint64_t (***)())*MEMORY[0x24BEDB7F0];
              v35 = *(uint64_t (****)())(v33 + 72);
              *(uint64_t (****)())((char *)v32 + *(_QWORD *)(v34 - 24)) = *(uint64_t (****)())(v33 + 64);
              v32[3] = (uint64_t (***)())(MEMORY[0x24BEDB848] + 16);
              v32[2] = v35;
              if (*((char *)v32 + 111) < 0)
                operator delete(v32[11]);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x20BD35758](v32 + 16);
              MEMORY[0x20BD3583C](v32, 0x10B2C40EED050F3);
            }
            v85 = (uint64_t (***)())v81;
            v86 = (const char *)&__dst;
            v87 = v81;
            v88 = (const char *)&__dst;
            v89 = (const char *)&__dst;
            if (v82 == -1)
              sub_20AECFAB8();
            v90 = &v85;
            ((void (*)(uint64_t (*****)(), _DWORD *))off_24C41E0B0[v82])(&v90, v81);
            if (SHIBYTE(v84) < 0)
              operator delete((void *)__dst);
            if (v82 == -1)
              sub_20AECFAB8();
            v85 = (uint64_t (***)())&__dst;
            ((void (*)(void **__return_ptr, uint64_t (****)(), _DWORD *))off_24C41E0E0[v82])(v44, &v85, v81);
            if (v82 != -1)
              ((void (*)(uint64_t (****)(), _DWORD *))off_24C41E0C8[v82])(&v85, v81);
            if (SHIBYTE(v45) < 0)
            {
              sub_20AEC60F4(v46, v44[0], (unint64_t)v44[1]);
            }
            else
            {
              *(_OWORD *)v46 = *(_OWORD *)v44;
              v47 = v45;
            }
            v48 = 1;
            LOBYTE(v49) = 0;
            v53 = 0;
            v54 = 1;
            sub_20AF558C0(0x22u, (__int128 *)v46, (uint64_t)&properties);
            *(_OWORD *)a4 = properties;
            *(_BYTE *)(a4 + 16) = 0;
            *(_BYTE *)(a4 + 112) = 0;
            if (v77)
            {
              *(_BYTE *)(a4 + 40) = 0;
              v36 = v70;
              if (v70)
              {
                *(_OWORD *)(a4 + 16) = __p;
                *(_QWORD *)(a4 + 32) = v69;
                v69 = 0;
                __p = 0uLL;
                *(_BYTE *)(a4 + 40) = 1;
              }
              *(_BYTE *)(a4 + 48) = 0;
              *(_BYTE *)(a4 + 104) = 0;
              if (v76)
              {
                v37 = v73;
                *(_QWORD *)(a4 + 64) = v72;
                *(_OWORD *)(a4 + 48) = v71;
                v71 = 0uLL;
                *(_QWORD *)(a4 + 72) = v37;
                *(_OWORD *)(a4 + 80) = v74;
                *(_QWORD *)(a4 + 96) = v75;
                v72 = 0;
                v74 = 0uLL;
                v75 = 0;
                *(_BYTE *)(a4 + 104) = 1;
              }
              *(_BYTE *)(a4 + 112) = 1;
              *(_BYTE *)(a4 + 120) = 0;
              if (v36 && SHIBYTE(v69) < 0)
                operator delete((void *)__p);
              if (!v54)
                goto LABEL_99;
            }
            else
            {
              *(_BYTE *)(a4 + 120) = 0;
              if (!v54)
              {
LABEL_99:
                if (SHIBYTE(v45) < 0)
                  operator delete(v44[0]);
                v38 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
                v55 = &off_24C41E150;
                if (*((_QWORD *)&v56 + 1))
                {
                  v39 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
                  do
                    v40 = __ldaxr(v39);
                  while (__stlxr(v40 - 1, v39));
                  if (!v40)
                  {
                    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                    std::__shared_weak_count::__release_weak(v38);
                  }
                }
                goto LABEL_106;
              }
            }
            if (v53)
            {
              if (v52 < 0)
                operator delete(v51);
              if (v50 < 0)
                operator delete(v49);
            }
            if (v48 && SHIBYTE(v47) < 0)
              operator delete(v46[0]);
            goto LABEL_99;
          }
        }
        memmove(p_dst, v29, v24);
        goto LABEL_67;
      }
    }
    v27 = v22[14];
    v28 = v22[9];
    if (v27 < v28)
    {
      v22[14] = v28;
      v27 = v28;
    }
    v26 = (const void **)(v22 + 8);
    goto LABEL_59;
  }
  v82 = 0;
  sub_20AFF4744(v81, "given IOSurface size ");
  sub_20B288F00((uint64_t)v44, (uint64_t)v81, a1);
  v85 = (uint64_t (***)())v81;
  v86 = " is invalid, must be non-zero";
  v87 = v81;
  v88 = " is invalid, must be non-zero";
  v89 = " is invalid, must be non-zero";
  if (v82 == -1)
    sub_20AECFAB8();
  v55 = (uint64_t (**)())&v85;
  ((void (*)(uint64_t (***)(), _DWORD *))off_24C41E0F8[v82])(&v55, v81);
  if (v82 == -1)
    sub_20AECFAB8();
  v85 = &v55;
  ((void (*)(__int128 *__return_ptr, uint64_t (****)(), _DWORD *))off_24C41E0E0[v82])(&__dst, &v85, v81);
  if (v82 != -1)
    ((void (*)(uint64_t (****)(), _DWORD *))off_24C41E0C8[v82])(&v85, v81);
  if (SHIBYTE(v84) < 0)
  {
    sub_20AEC60F4(&v58, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v58 = __dst;
    v59 = v84;
  }
  v60 = 1;
  LOBYTE(v61) = 0;
  v65 = 0;
  v66 = 1;
  sub_20AF558C0(0x16u, &v58, (uint64_t)&properties);
  *(_OWORD *)a4 = properties;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v77)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v16 = v70;
    if (v70)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v69;
      v69 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v76)
    {
      v17 = v73;
      *(_QWORD *)(a4 + 64) = v72;
      *(_OWORD *)(a4 + 48) = v71;
      v71 = 0uLL;
      *(_QWORD *)(a4 + 72) = v17;
      *(_OWORD *)(a4 + 80) = v74;
      *(_QWORD *)(a4 + 96) = v75;
      v72 = 0;
      v74 = 0uLL;
      v75 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v16 && SHIBYTE(v69) < 0)
      operator delete((void *)__p);
    if (!v66)
      goto LABEL_42;
    goto LABEL_34;
  }
  *(_BYTE *)(a4 + 120) = 0;
  if (v66)
  {
LABEL_34:
    if (v65)
    {
      if (v64 < 0)
        operator delete(v63);
      if (v62 < 0)
        operator delete(v61);
    }
    if (v60 && SHIBYTE(v59) < 0)
      operator delete((void *)v58);
  }
LABEL_42:
  if (SHIBYTE(v84) < 0)
    operator delete((void *)__dst);
}

void sub_20B4E8734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 113) < 0)
  {
    operator delete(*(void **)(v34 - 136));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B4E887C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_20AEC147C((uint64_t)&a45);
  JUMPOUT(0x20B4E886CLL);
}

_QWORD *sub_20B4E888C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C41E150;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B4E8900(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C41E150;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

size_t sub_20B4E8974(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 131, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetPlaneCount(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetPlaneCount(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetPlaneCount(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetPlaneCount(v9);
}

size_t sub_20B4E8AAC(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 147, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetWidth(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetWidth(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetWidth(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetWidth(v9);
}

size_t sub_20B4E8BE4(uint64_t a1, size_t planeIndex)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __IOSurface *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 152, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return IOSurfaceGetWidthOfPlane(0, planeIndex);
  v11 = *(__IOSurface **)v10;
  v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (!v12)
    return IOSurfaceGetWidthOfPlane(v11, planeIndex);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
    return IOSurfaceGetWidthOfPlane(v11, planeIndex);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return IOSurfaceGetWidthOfPlane(v11, planeIndex);
}

size_t sub_20B4E8D2C(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 157, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetHeight(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetHeight(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetHeight(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetHeight(v9);
}

size_t sub_20B4E8E64(uint64_t a1, size_t planeIndex)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __IOSurface *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 162, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return IOSurfaceGetHeightOfPlane(0, planeIndex);
  v11 = *(__IOSurface **)v10;
  v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (!v12)
    return IOSurfaceGetHeightOfPlane(v11, planeIndex);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
    return IOSurfaceGetHeightOfPlane(v11, planeIndex);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return IOSurfaceGetHeightOfPlane(v11, planeIndex);
}

size_t sub_20B4E8FAC(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 192, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetBytesPerElement(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetBytesPerElement(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetBytesPerElement(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetBytesPerElement(v9);
}

size_t sub_20B4E90E4(uint64_t a1, size_t planeIndex)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __IOSurface *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 197, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return IOSurfaceGetBytesPerElementOfPlane(0, planeIndex);
  v11 = *(__IOSurface **)v10;
  v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (!v12)
    return IOSurfaceGetBytesPerElementOfPlane(v11, planeIndex);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
    return IOSurfaceGetBytesPerElementOfPlane(v11, planeIndex);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return IOSurfaceGetBytesPerElementOfPlane(v11, planeIndex);
}

size_t sub_20B4E922C(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 202, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetBytesPerRow(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetBytesPerRow(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetBytesPerRow(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetBytesPerRow(v9);
}

size_t sub_20B4E9364(uint64_t a1, size_t planeIndex)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __IOSurface *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 207, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return IOSurfaceGetBytesPerRowOfPlane(0, planeIndex);
  v11 = *(__IOSurface **)v10;
  v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (!v12)
    return IOSurfaceGetBytesPerRowOfPlane(v11, planeIndex);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
    return IOSurfaceGetBytesPerRowOfPlane(v11, planeIndex);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return IOSurfaceGetBytesPerRowOfPlane(v11, planeIndex);
}

uint64_t sub_20B4E94AC(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 212, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetPixelFormat(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetPixelFormat(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetPixelFormat(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetPixelFormat(v9);
}

uint64_t sub_20B4E95E4(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 243, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  v13 = v10;
  v11 = atomic_load((unint64_t *)(v10 + 104));
  if (v11 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once((std::once_flag::_State_type *)(v10 + 104), &v14, (void (__cdecl *)(void *))sub_20B4EA420);
  }
  return *(_QWORD *)(*(_QWORD *)(v10 + 112) + 8 * a2);
}

_QWORD *sub_20B4E96E8(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  void **v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __IOSurface *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int ElementWidth;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  __IOSurface *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  std::string *v51;
  std::string::size_type size;
  size_t v53;
  size_t v54;
  unint64_t i;
  std::string *v56;
  std::string::size_type v57;
  unsigned int v58;
  uint64_t *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  __IOSurface *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int ElementWidthOfPlane;
  uint64_t *v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  __IOSurface *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t *v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  __IOSurface *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  size_t NumberOfComponentsOfPlane;
  std::string *v98;
  std::string::size_type v99;
  unsigned int v102[2];
  unsigned int v103;
  void *__p[2];
  unsigned __int8 v105;
  _QWORD *v106;
  _QWORD *v107[3];
  int v108;
  void *__dst[2];
  unint64_t v110;
  std::string v111;
  void **v112;
  void **v113;
  _QWORD v114[2];

  v106 = a1;
  sub_20AEC01D0(a1, (uint64_t)"IOSurface<", 10);
  v3 = *(uint64_t **)(a2 + 8);
  if (!v3)
  {
    v108 = 0;
    goto LABEL_12;
  }
  v5 = *v3;
  v4 = (std::__shared_weak_count *)v3[1];
  if (!v4)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_7:
    v108 = 0;
    if (v5)
      goto LABEL_8;
LABEL_12:
    sub_20AED0170(v107, "nullptr");
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  v108 = 0;
  if (!v5)
    goto LABEL_12;
LABEL_8:
  v9 = operator new();
  *(_QWORD *)(v9 + 272) = 0;
  *(_OWORD *)(v9 + 240) = 0u;
  *(_OWORD *)(v9 + 256) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)v9 = 0u;
  sub_20AEC0BD8(v9);
  v111.__r_.__value_.__r.__words[0] = v9;
  std::ostream::operator<<();
  v10 = *(_DWORD *)(v9 + 120);
  if ((v10 & 0x10) != 0)
  {
    v13 = *(_QWORD *)(v9 + 112);
    v14 = *(_QWORD *)(v9 + 72);
    if (v13 < v14)
    {
      *(_QWORD *)(v9 + 112) = v14;
      v13 = v14;
    }
    v15 = *(const void **)(v9 + 64);
    v11 = v13 - (_QWORD)v15;
    if (v13 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_164;
  }
  else
  {
    if ((v10 & 8) == 0)
    {
      v11 = 0;
      HIBYTE(v110) = 0;
      v12 = __dst;
      goto LABEL_25;
    }
    v15 = *(const void **)(v9 + 40);
    v11 = *(_QWORD *)(v9 + 56) - (_QWORD)v15;
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
LABEL_164:
      sub_20AEC0138();
  }
  if (v11 >= 0x17)
  {
    v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v16 = v11 | 7;
    v17 = v16 + 1;
    v12 = (void **)operator new(v16 + 1);
    __dst[1] = (void *)v11;
    v110 = v17 | 0x8000000000000000;
    __dst[0] = v12;
  }
  else
  {
    HIBYTE(v110) = v11;
    v12 = __dst;
    if (!v11)
      goto LABEL_25;
  }
  memmove(v12, v15, v11);
LABEL_25:
  *((_BYTE *)v12 + v11) = 0;
  v18 = v111.__r_.__value_.__r.__words[0];
  if (v111.__r_.__value_.__r.__words[0])
  {
    v19 = MEMORY[0x24BEDB7F0];
    v20 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v111.__r_.__value_.__l.__data_ = *MEMORY[0x24BEDB7F0];
    v21 = *(_QWORD *)(v19 + 72);
    *(_QWORD *)(v18 + *(_QWORD *)(v20 - 24)) = *(_QWORD *)(v19 + 64);
    *(_QWORD *)(v18 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v18 + 16) = v21;
    if (*(char *)(v18 + 111) < 0)
      operator delete(*(void **)(v18 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v18 + 128);
    MEMORY[0x20BD3583C](v18, 0x10B2C40EED050F3);
  }
  v111.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
  v111.__r_.__value_.__l.__size_ = (std::string::size_type)__dst;
  v111.__r_.__value_.__r.__words[2] = (std::string::size_type)v107;
  v112 = __dst;
  v113 = __dst;
  if (v108 == -1)
    sub_20AECFAB8();
  v114[0] = &v111;
  ((void (*)(_QWORD *, _QWORD **))off_24C41E0B0[v108])(v114, v107);
  if (SHIBYTE(v110) < 0)
    operator delete(__dst[0]);
LABEL_32:
  if (v108 == -1)
    sub_20AECFAB8();
  v111.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
  ((void (*)(void **__return_ptr, std::string *, _QWORD **))off_24C41E0E0[v108])(__p, &v111, v107);
  if (v108 != -1)
    ((void (*)(std::string *, _QWORD **))off_24C41E0C8[v108])(&v111, v107);
  if ((v105 & 0x80u) == 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  if ((v105 & 0x80u) == 0)
    v23 = v105;
  else
    v23 = (uint64_t)__p[1];
  sub_20AEC01D0(v106, (uint64_t)v22, v23);
  sub_20AEC01D0(v106, (uint64_t)">{", 2);
  v107[0] = (_QWORD *)sub_20B4E95E4(a2, 0);
  sub_20AF60518((uint64_t)&v111, &v106, v107);
  sub_20AEC01D0(v106, (uint64_t)", ", 2);
  sub_20AEC01D0(v106, (uint64_t)"size: ", 6);
  v24 = sub_20B4E8AAC(a2);
  __dst[0] = (void *)__PAIR64__(sub_20B4E8D2C(a2), v24);
  sub_20B2891A4(v106, (unsigned int *)__dst);
  sub_20AEC01D0(v106, (uint64_t)", ", 2);
  sub_20AEC01D0(v106, (uint64_t)"format: ", 8);
  v103 = sub_20B4E94AC(a2);
  sub_20B524794(v106, &v103);
  sub_20AEC01D0(v106, (uint64_t)", ", 2);
  sub_20AEC01D0(v106, (uint64_t)"element_size: ", 14);
  v25 = *(uint64_t **)(a2 + 8);
  if (v25)
  {
    v27 = *v25;
    v26 = (std::__shared_weak_count *)v25[1];
    if (!v26)
      goto LABEL_47;
    v28 = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    do
      v30 = __ldaxr(v28);
    while (__stlxr(v30 - 1, v28));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if (v27)
        goto LABEL_49;
    }
    else
    {
LABEL_47:
      if (v27)
        goto LABEL_49;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 167, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_49:
  v31 = *(_QWORD *)(a2 + 8);
  if (v31)
  {
    v33 = *(__IOSurface **)v31;
    v32 = *(std::__shared_weak_count **)(v31 + 8);
    if (v32)
    {
      v34 = (unint64_t *)&v32->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      do
        v36 = __ldaxr(v34);
      while (__stlxr(v36 - 1, v34));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    v33 = 0;
  }
  ElementWidth = IOSurfaceGetElementWidth(v33);
  v38 = *(uint64_t **)(a2 + 8);
  if (v38)
  {
    v40 = *v38;
    v39 = (std::__shared_weak_count *)v38[1];
    if (!v39)
      goto LABEL_63;
    v41 = (unint64_t *)&v39->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    do
      v43 = __ldaxr(v41);
    while (__stlxr(v43 - 1, v41));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if (v40)
        goto LABEL_65;
    }
    else
    {
LABEL_63:
      if (v40)
        goto LABEL_65;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 177, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_65:
  v44 = *(_QWORD *)(a2 + 8);
  if (v44)
  {
    v46 = *(__IOSurface **)v44;
    v45 = *(std::__shared_weak_count **)(v44 + 8);
    if (v45)
    {
      v47 = (unint64_t *)&v45->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      do
        v49 = __ldaxr(v47);
      while (__stlxr(v49 - 1, v47));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  else
  {
    v46 = 0;
  }
  v114[0] = __PAIR64__(IOSurfaceGetElementHeight(v46), ElementWidth);
  sub_20B2891A4(v106, (unsigned int *)v114);
  sub_20AEC01D0(v106, (uint64_t)", ", 2);
  sub_20AEC01D0(v106, (uint64_t)"bytes_per_element/row: ", 23);
  v102[0] = sub_20B4E8FAC(a2);
  v102[1] = sub_20B4E922C(a2);
  sub_20B2891A4(v106, v102);
  sub_20AEC01D0(v106, (uint64_t)", ", 2);
  sub_20AEC01D0(v106, (uint64_t)"num_planes: ", 12);
  v50 = sub_20B4E8974(a2);
  std::to_string(&v111, v50);
  if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = &v111;
  else
    v51 = (std::string *)v111.__r_.__value_.__r.__words[0];
  if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v111.__r_.__value_.__r.__words[2]);
  else
    size = v111.__r_.__value_.__l.__size_;
  sub_20AEC01D0(v106, (uint64_t)v51, size);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v111.__r_.__value_.__l.__data_);
    if (((char)v105 & 0x80000000) == 0)
    {
LABEL_81:
      v53 = sub_20B4E8974(a2);
      if (!v53)
        return sub_20AEC01D0(a1, (uint64_t)"}", 1);
      goto LABEL_85;
    }
  }
  else if (((char)v105 & 0x80000000) == 0)
  {
    goto LABEL_81;
  }
  operator delete(__p[0]);
  v53 = sub_20B4E8974(a2);
  if (v53)
  {
LABEL_85:
    v54 = v53;
    for (i = 0; i != v54; ++i)
    {
      v107[0] = a1;
      sub_20AEC01D0(a1, (uint64_t)", ", 2);
      sub_20AEC01D0(v107[0], (uint64_t)"plane #", 7);
      std::to_string(&v111, i);
      if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v111;
      else
        v56 = (std::string *)v111.__r_.__value_.__r.__words[0];
      if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
      else
        v57 = v111.__r_.__value_.__l.__size_;
      sub_20AEC01D0(v107[0], (uint64_t)v56, v57);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      sub_20AEC01D0(v107[0], (uint64_t)": {", 3);
      __dst[0] = (void *)sub_20B4E95E4(a2, i);
      sub_20AF60518((uint64_t)&v111, v107, __dst);
      sub_20AEC01D0(v107[0], (uint64_t)", size: ", 8);
      v58 = sub_20B4E8BE4(a2, i);
      __p[0] = (void *)__PAIR64__(sub_20B4E8E64(a2, i), v58);
      sub_20B2891A4(v107[0], (unsigned int *)__p);
      sub_20AEC01D0(v107[0], (uint64_t)", ", 2);
      sub_20AEC01D0(v107[0], (uint64_t)"element_size: ", 14);
      v59 = *(uint64_t **)(a2 + 8);
      if (v59)
      {
        v61 = *v59;
        v60 = (std::__shared_weak_count *)v59[1];
        if (!v60)
          goto LABEL_101;
        v62 = (unint64_t *)&v60->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
        do
          v64 = __ldaxr(v62);
        while (__stlxr(v64 - 1, v62));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
          if (v61)
            goto LABEL_103;
        }
        else
        {
LABEL_101:
          if (v61)
            goto LABEL_103;
        }
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 172, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_165;
      }
LABEL_103:
      v65 = *(_QWORD *)(a2 + 8);
      if (v65)
      {
        v66 = *(__IOSurface **)v65;
        v67 = *(std::__shared_weak_count **)(v65 + 8);
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
          do
            v70 = __ldaxr(v68);
          while (__stlxr(v70 - 1, v68));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        ElementWidthOfPlane = IOSurfaceGetElementWidthOfPlane(v66, i);
        v72 = *(uint64_t **)(a2 + 8);
        if (!v72)
          goto LABEL_119;
      }
      else
      {
        ElementWidthOfPlane = IOSurfaceGetElementWidthOfPlane(0, i);
        v72 = *(uint64_t **)(a2 + 8);
        if (!v72)
          goto LABEL_119;
      }
      v74 = *v72;
      v73 = (std::__shared_weak_count *)v72[1];
      if (!v73)
        goto LABEL_118;
      v75 = (unint64_t *)&v73->__shared_owners_;
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
      do
        v77 = __ldaxr(v75);
      while (__stlxr(v77 - 1, v75));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
        if (v74)
          goto LABEL_120;
      }
      else
      {
LABEL_118:
        if (v74)
          goto LABEL_120;
      }
LABEL_119:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 182, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_165;
      }
LABEL_120:
      v78 = *(_QWORD *)(a2 + 8);
      if (v78)
      {
        v79 = *(__IOSurface **)v78;
        v80 = *(std::__shared_weak_count **)(v78 + 8);
        if (v80)
        {
          v81 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
          do
            v83 = __ldaxr(v81);
          while (__stlxr(v83 - 1, v81));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
      }
      else
      {
        v79 = 0;
      }
      v114[0] = __PAIR64__(IOSurfaceGetElementHeightOfPlane(v79, i), ElementWidthOfPlane);
      sub_20B2891A4(v107[0], (unsigned int *)v114);
      sub_20AEC01D0(v107[0], (uint64_t)", ", 2);
      sub_20AEC01D0(v107[0], (uint64_t)"bytes_per_element/row: ", 23);
      v84 = sub_20B4E90E4(a2, i);
      v106 = (_QWORD *)__PAIR64__(sub_20B4E9364(a2, i), v84);
      sub_20B2891A4(v107[0], (unsigned int *)&v106);
      sub_20AEC01D0(v107[0], (uint64_t)", ", 2);
      sub_20AEC01D0(v107[0], (uint64_t)"num_components: ", 16);
      v85 = *(uint64_t **)(a2 + 8);
      if (!v85)
      {
LABEL_135:
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 187, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
LABEL_165:
          abort();
        }
        goto LABEL_136;
      }
      v87 = *v85;
      v86 = (std::__shared_weak_count *)v85[1];
      if (!v86)
        goto LABEL_134;
      v88 = (unint64_t *)&v86->__shared_owners_;
      do
        v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
      do
        v90 = __ldaxr(v88);
      while (__stlxr(v90 - 1, v88));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
        if (!v87)
          goto LABEL_135;
      }
      else
      {
LABEL_134:
        if (!v87)
          goto LABEL_135;
      }
LABEL_136:
      v91 = *(_QWORD *)(a2 + 8);
      if (v91)
      {
        v92 = *(__IOSurface **)v91;
        v93 = *(std::__shared_weak_count **)(v91 + 8);
        if (v93)
        {
          v94 = (unint64_t *)&v93->__shared_owners_;
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
          do
            v96 = __ldaxr(v94);
          while (__stlxr(v96 - 1, v94));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
      }
      else
      {
        v92 = 0;
      }
      NumberOfComponentsOfPlane = IOSurfaceGetNumberOfComponentsOfPlane(v92, i);
      std::to_string(&v111, NumberOfComponentsOfPlane);
      if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v98 = &v111;
      else
        v98 = (std::string *)v111.__r_.__value_.__r.__words[0];
      if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v99 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
      else
        v99 = v111.__r_.__value_.__l.__size_;
      sub_20AEC01D0(v107[0], (uint64_t)v98, v99);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      sub_20AEC01D0(v107[0], (uint64_t)"}", 1);
    }
  }
  return sub_20AEC01D0(a1, (uint64_t)"}", 1);
}

void sub_20B4EA318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x20BD3583C](v9, 0x10B2C40EED050F3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4EA348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_20AECFA60((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_20B4EA3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B4EA400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    JUMPOUT(0x20B4EA414);
  JUMPOUT(0x20B4EA418);
}

double sub_20B4EA420(uint64_t ***a1)
{
  uint64_t v1;
  void *v2;
  double result;
  __int128 v4;
  uint64_t v5;

  v1 = ***a1;
  sub_20B4E7AC0((IOSurfaceRef *)v1, &v4);
  v2 = *(void **)(v1 + 112);
  if (v2)
  {
    *(_QWORD *)(v1 + 120) = v2;
    operator delete(v2);
  }
  result = *(double *)&v4;
  *(_OWORD *)(v1 + 112) = v4;
  *(_QWORD *)(v1 + 128) = v5;
  return result;
}

void sub_20B4EA478(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B4EA488(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B4EA4B8(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 64));
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_20B4EA530(int a1, unsigned int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unsigned __int8 v20;
  uint64_t v21;
  BOOL v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;

  if (a1 <= 1278226487)
  {
    if (a1 > 875704421)
    {
      if (a1 > 875836533)
      {
        if (a1 != 875836534)
        {
          v2 = 1094862674;
          v3 = 0x4000000004;
          if (a2 >= 2)
            v4 = 0;
          else
            v4 = 0x4000000004;
          v5 = v4 & 0x4000000000;
          v6 = 1111970369;
          goto LABEL_72;
        }
      }
      else if (a1 != 875704422 && a1 != 875704438 && a1 != 875836518)
      {
        return 0;
      }
      v37 = xmmword_20B60F3E0;
      if (a2 <= 2)
        return *((_QWORD *)&v37 + a2);
      else
        return 0;
    }
    if (a1 <= 843264055)
    {
      if (a1 == 24)
      {
        v35 = 0xC000000003;
        if (a2 >= 2)
          v35 = 0;
        return v35 & 0xC0000000FFLL;
      }
      else
      {
        v7 = 0x4000000004;
        if (a2 >= 2)
          v7 = 0;
        v8 = 0xC000000003;
        if (a2 >= 2)
          v8 = 0;
        if (a1 == 842285639)
          v9 = v8;
        else
          v9 = 0;
        if (a1 == 842285639)
          v10 = v8 & 0xC000000000;
        else
          v10 = 0;
        if (a1 == 32)
        {
          v11 = v7 & 0x4000000000;
        }
        else
        {
          LOBYTE(v7) = v9;
          v11 = v10;
        }
        return v11 | v7;
      }
    }
    if (a1 != 843264056)
    {
      v13 = 843264102;
      v14 = 0x8000000008;
      if (a2 >= 2)
        v14 = 0;
      v15 = v14 & 0x8000000000;
      v16 = 843264104;
      v17 = 0x4000000004;
      if (a2 >= 2)
        v17 = 0;
      v18 = v17 & 0x4000000000;
      goto LABEL_54;
    }
LABEL_101:
    v34 = 0x4000000002;
    goto LABEL_107;
  }
  if (a1 <= 1647392358)
  {
    if (a1 > 1380401728)
    {
      if (a1 == 1380401729)
      {
        v36 = 0x4000000004;
        if (a2 >= 2)
          v36 = 0;
        return v36 & 0x40000000FFLL;
      }
      v13 = 1380410945;
      v14 = 0x10000000010;
      if (a2 >= 2)
        v14 = 0;
      v15 = v14 & 0x10000000000;
      v16 = 1380411457;
      goto LABEL_51;
    }
    if (a1 != 1278226488)
    {
      v2 = 1278226534;
      if (a2 >= 2)
        v4 = 0;
      else
        v4 = 0x4000000004;
      v5 = v4 & 0x4000000000;
      v6 = 1278226536;
      v3 = 0x4000000002;
      goto LABEL_72;
    }
    v34 = 0x4000000001;
LABEL_107:
    if (a2 >= 2)
      v34 = 0;
    return v34 & 0x40000000FFLL;
  }
  if (a1 <= 1717855599)
  {
    if (a1 != 1647392359)
    {
      v13 = 1647589490;
      v14 = 0xC000000006;
      if (a2 >= 2)
        v14 = 0;
      v15 = v14 & 0xC000000000;
      v16 = 1647719521;
LABEL_51:
      v17 = 0x8000000008;
      if (a2 >= 2)
        v17 = 0;
      v18 = v17 & 0x8000000000;
LABEL_54:
      v19 = a1 == v16;
      if (a1 == v16)
        v20 = v17;
      else
        v20 = 0;
      if (v19)
        v21 = v18;
      else
        v21 = 0;
      v22 = a1 == v13;
      if (a1 == v13)
        v23 = v14;
      else
        v23 = v20;
      if (v22)
        v24 = v15;
      else
        v24 = v21;
      return v24 | v23;
    }
    goto LABEL_101;
  }
  if (a1 <= 1751410031)
  {
    v2 = 1717855600;
    v3 = 0x4000000004;
    if (a2 >= 2)
      v4 = 0;
    else
      v4 = 0x4000000004;
    v5 = v4 & 0x4000000000;
    v6 = 1717856627;
LABEL_72:
    if (a2 >= 2)
      v3 = 0;
    if (a1 == v6)
    {
      v25 = v3 & 0x4000000000;
    }
    else
    {
      LOBYTE(v3) = 0;
      v25 = 0;
    }
    v26 = a1 == v2;
    if (a1 == v2)
      v27 = v4;
    else
      v27 = v3;
    if (v26)
      v28 = v5;
    else
      v28 = v25;
    return v28 | v27;
  }
  v29 = 0x4000000002;
  if (a2 >= 2)
    v30 = 0;
  else
    v30 = 0x4000000002;
  if (a2 >= 2)
    v29 = 0;
  if (a1 == 1751411059)
  {
    v31 = v29 & 0x4000000000;
  }
  else
  {
    LOBYTE(v29) = 0;
    v31 = 0;
  }
  if (a1 == 1751410032)
    v32 = v30;
  else
    v32 = v29;
  if (a1 == 1751410032)
    v33 = v30 & 0x4000000000;
  else
    v33 = v31;
  return v33 | v32;
}

void sub_20B4EA9B0(unsigned int *a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, unsigned int a4@<W3>, unsigned __int8 a5@<W4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v12;
  CFMutableDictionaryRef v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  int v25;
  unsigned __int8 v26;
  const void *v27;
  const void *v28;
  const void *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned __int8 v37;
  const void *v38;
  const void *v39;
  const void *v40;
  unsigned __int8 v41;
  const void *v42;
  const void *v43;
  const void *v44;
  unsigned __int8 v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void **v49;
  unsigned int v50;
  int v51;
  unsigned __int8 v52;
  unsigned int v53;
  std::string::size_type v54;
  unsigned int v55;
  int v56;
  unsigned __int8 v57;
  unsigned int v58;
  std::string::size_type v59;
  unsigned int v60;
  int v61;
  unsigned __int8 v62;
  unint64_t v63;
  unsigned int v64;
  int v65;
  unsigned __int8 v66;
  unint64_t v67;
  unsigned int v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned int v88;
  _QWORD *v89;
  char *v90;
  char *v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unsigned int v106;
  _QWORD *v107;
  char *v108;
  char *v109;
  void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unsigned int v124;
  _QWORD *v125;
  char *v126;
  char *v127;
  void *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  char v157;
  std::logic_error *exception;
  void *__p[2];
  _QWORD *v160;
  __int128 v161;
  __int128 v162;
  void **v163;
  char v164;
  std::string value;
  std::__shared_weak_count *v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
  value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
  sub_20B4F51B8(&value, __p);
  *(_OWORD *)a6 = *(_OWORD *)__p;
  sub_20AEC833C((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
  v13 = *(CFMutableDictionaryRef *)a6;
  v12 = *(std::__shared_weak_count **)(a6 + 8);
  if (!v12)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v13)
      goto LABEL_20;
  }
  else
  {
LABEL_6:
    if (!v13)
      goto LABEL_20;
  }
  LODWORD(__p[0]) = a2;
  sub_20B4EDFF8((unsigned int *)__p, (CFNumberRef *)&value);
  v17 = *(_OWORD *)&value.__r_.__value_.__l.__data_;
  if (value.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      if (!(_QWORD)v17)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  if ((_QWORD)v17)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a6, (const void *)*MEMORY[0x24BDD8EF8], value.__r_.__value_.__l.__data_);
LABEL_14:
  size = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (value.__r_.__value_.__l.__size_)
  {
    v22 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_20:
  value.__r_.__value_.__r.__words[0] = *a1;
  sub_20B284FA0(a6, (const void *)*MEMORY[0x24BDD8FD0], (uint64_t *)&value);
  value.__r_.__value_.__r.__words[0] = a1[1];
  sub_20B284FA0(a6, (const void *)*MEMORY[0x24BDD8EB0], (uint64_t *)&value);
  sub_20B4EC830(a3, &value);
  sub_20B4ED2B8(a6, CFSTR("IOSurfaceName"), (uint64_t)&value);
  v24 = a5;
  if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(value.__r_.__value_.__l.__data_);
    if (a2 > 1278226487)
      goto LABEL_22;
  }
  else if (a2 > 1278226487)
  {
LABEL_22:
    if (a2 > 1647392358)
    {
      if (a2 <= 1717855599)
      {
        if (a2 == 1647392359 || a2 == 1647589490)
          goto LABEL_60;
        v25 = 1647719521;
      }
      else
      {
        if (a2 <= 1751410031)
        {
          if (a2 != 1717855600)
          {
            v25 = 1717856627;
            goto LABEL_59;
          }
LABEL_60:
          v32 = sub_20B4EA530(a2, 0);
          if (!v33)
            sub_20AF3FE2C();
          v34 = v32;
          value.__r_.__value_.__r.__words[0] = v32;
          sub_20B284FA0(a6, (const void *)*MEMORY[0x24BDD8E30], (uint64_t *)&value);
          if (a5)
          {
            value.__r_.__value_.__r.__words[0] = a4;
            sub_20B284FA0(a6, (const void *)*MEMORY[0x24BDD8E38], (uint64_t *)&value);
          }
          else
          {
            v35 = *a1 * v34;
            if (v35 % HIDWORD(v34))
              v36 = v35 / HIDWORD(v34) + 1;
            else
              v36 = v35 / HIDWORD(v34);
            value.__r_.__value_.__r.__words[0] = (v36 * HIDWORD(v34));
            sub_20B284FA0(a6, (const void *)*MEMORY[0x24BDD8E38], (uint64_t *)&value);
          }
          return;
        }
        if (a2 == 1751410032)
          goto LABEL_60;
        v25 = 1751411059;
      }
LABEL_59:
      if (a2 == v25)
        goto LABEL_60;
LABEL_267:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      LODWORD(__p[0]) = a2;
      sub_20B4ED0B0((uint64_t)&value, (int *)__p);
      std::logic_error::logic_error(exception, &value);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    if (a2 > 1380401728)
    {
      if (a2 == 1380401729 || a2 == 1380410945)
        goto LABEL_60;
      v25 = 1380411457;
      goto LABEL_59;
    }
    v30 = -1278226488;
LABEL_45:
    v31 = a2 + v30;
    if (v31 <= 0x30 && ((1 << v31) & 0x1400000000001) != 0)
      goto LABEL_60;
    goto LABEL_267;
  }
  if (a2 <= 875704421)
  {
    if (a2 <= 843264055)
    {
      if (a2 == 24 || a2 == 32)
        goto LABEL_60;
      v25 = 842285639;
      goto LABEL_59;
    }
    v30 = -843264056;
    goto LABEL_45;
  }
  if (a2 > 875836533)
  {
    if (a2 != 875836534)
    {
      if (a2 == 1094862674)
        goto LABEL_60;
      v25 = 1111970369;
      goto LABEL_59;
    }
    v45 = atomic_load((unsigned __int8 *)&qword_25463CB98);
    if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_25463CB98))
    {
      v146 = sub_20B4EA530(875836534, 0);
      if (!v147)
        sub_20AF3FE2C();
      qword_25463CB90 = v146;
      __cxa_guard_release(&qword_25463CB98);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_20B4F51B8(&value, __p);
    v162 = *(_OWORD *)__p;
    sub_20AEC833C((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    value.__r_.__value_.__r.__words[0] = *a1;
    v46 = (const void *)*MEMORY[0x24BDD8FA8];
    sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8FA8], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = a1[1];
    v47 = (const void *)*MEMORY[0x24BDD8F70];
    sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F70], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_25463CB90;
    v48 = (const void *)*MEMORY[0x24BDD8F10];
    sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F10], (uint64_t *)&value);
    v49 = (const void **)MEMORY[0x24BDD8F18];
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    else
    {
      v60 = qword_25463CB90 * *a1;
      if (v60 % HIDWORD(qword_25463CB90))
        v61 = v60 / HIDWORD(qword_25463CB90) + 1;
      else
        v61 = v60 / HIDWORD(qword_25463CB90);
      value.__r_.__value_.__r.__words[0] = (v61 * HIDWORD(qword_25463CB90));
      sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    v62 = atomic_load((unsigned __int8 *)&qword_25463CBA8);
    if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_25463CBA8))
    {
      v154 = sub_20B4EA530(875836534, 1u);
      if (!v155)
        sub_20AF3FE2C();
      qword_25463CBA0 = v154;
      __cxa_guard_release(&qword_25463CBA8);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_20B4F51B8(&value, __p);
    v161 = *(_OWORD *)__p;
    sub_20AEC833C((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    v63 = *(_QWORD *)a1;
    value.__r_.__value_.__r.__words[0] = v63;
    sub_20B284FA0((uint64_t)&v161, v46, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = HIDWORD(v63);
    sub_20B284FA0((uint64_t)&v161, v47, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_25463CBA0;
    sub_20B284FA0((uint64_t)&v161, v48, (uint64_t *)&value);
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_20B284FA0((uint64_t)&v161, *v49, (uint64_t *)&value);
    }
    else
    {
      if ((qword_25463CBA0 * v63) % HIDWORD(qword_25463CBA0))
        v106 = (qword_25463CBA0 * v63) / HIDWORD(qword_25463CBA0) + 1;
      else
        v106 = (qword_25463CBA0 * v63) / HIDWORD(qword_25463CBA0);
      value.__r_.__value_.__r.__words[0] = v106 * HIDWORD(qword_25463CBA0);
      sub_20B284FA0((uint64_t)&v161, *v49, (uint64_t *)&value);
    }
    sub_20B284824(&value, (uint64_t)&v162);
    sub_20B284824(&value.__r_.__value_.__r.__words[2], (uint64_t)&v161);
    __p[0] = 0;
    __p[1] = 0;
    v160 = 0;
    v163 = __p;
    v164 = 0;
    v107 = operator new(0x20uLL);
    __p[0] = v107;
    __p[1] = v107;
    v160 = v107 + 4;
    sub_20B284824(v107, (uint64_t)&value);
    sub_20B284824(v107 + 2, (uint64_t)&value.__r_.__value_.__r.__words[2]);
    __p[1] = v107 + 4;
    sub_20B4ED41C(a6, (const void *)*MEMORY[0x24BDD8F88], (uint64_t *)__p);
    v108 = (char *)__p[0];
    if (__p[0])
    {
      v109 = (char *)__p[1];
      v110 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v111 = (std::__shared_weak_count *)*((_QWORD *)v109 - 1);
          if (v111)
          {
            v112 = (unint64_t *)&v111->__shared_owners_;
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
          v109 -= 16;
        }
        while (v109 != v108);
        v110 = __p[0];
      }
      __p[1] = v108;
      operator delete(v110);
    }
    v114 = v166;
    if (v166)
    {
      v115 = (unint64_t *)&v166->__shared_owners_;
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    v117 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
    if (value.__r_.__value_.__l.__size_)
    {
      v118 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v120 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v121 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
    if (!*((_QWORD *)&v162 + 1))
      return;
    v123 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v87 = __ldaxr(v123);
    while (__stlxr(v87 - 1, v123));
LABEL_240:
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
    return;
  }
  if (a2 == 875704422)
  {
    v41 = atomic_load((unsigned __int8 *)&qword_25463CB78);
    if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_25463CB78))
    {
      v144 = sub_20B4EA530(875704422, 0);
      if (!v145)
        sub_20AF3FE2C();
      qword_25463CB70 = v144;
      __cxa_guard_release(&qword_25463CB78);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_20B4F51B8(&value, __p);
    v162 = *(_OWORD *)__p;
    sub_20AEC833C((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    value.__r_.__value_.__r.__words[0] = *a1;
    v42 = (const void *)*MEMORY[0x24BDD8FA8];
    sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8FA8], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = a1[1];
    v43 = (const void *)*MEMORY[0x24BDD8F70];
    sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F70], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_25463CB70;
    v44 = (const void *)*MEMORY[0x24BDD8F10];
    sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F10], (uint64_t *)&value);
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    else
    {
      v55 = qword_25463CB70 * *a1;
      if (v55 % HIDWORD(qword_25463CB70))
        v56 = v55 / HIDWORD(qword_25463CB70) + 1;
      else
        v56 = v55 / HIDWORD(qword_25463CB70);
      value.__r_.__value_.__r.__words[0] = (v56 * HIDWORD(qword_25463CB70));
      sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    v57 = atomic_load((unsigned __int8 *)&qword_25463CB88);
    if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_25463CB88))
    {
      v152 = sub_20B4EA530(875704422, 1u);
      if (!v153)
        sub_20AF3FE2C();
      qword_25463CB80 = v152;
      __cxa_guard_release(&qword_25463CB88);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_20B4F51B8(&value, __p);
    v161 = *(_OWORD *)__p;
    sub_20AEC833C((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    v58 = a1[1];
    v59 = (*a1 & 1) + (*a1 >> 1);
    value.__r_.__value_.__r.__words[0] = v59;
    sub_20B284FA0((uint64_t)&v161, v42, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = (v58 & 1) + (v58 >> 1);
    sub_20B284FA0((uint64_t)&v161, v43, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_25463CB80;
    sub_20B284FA0((uint64_t)&v161, v44, (uint64_t *)&value);
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_20B284FA0((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    else
    {
      if ((qword_25463CB80 * v59) % HIDWORD(qword_25463CB80))
        v88 = (qword_25463CB80 * v59) / HIDWORD(qword_25463CB80) + 1;
      else
        v88 = (qword_25463CB80 * v59) / HIDWORD(qword_25463CB80);
      value.__r_.__value_.__r.__words[0] = v88 * HIDWORD(qword_25463CB80);
      sub_20B284FA0((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    sub_20B284824(&value, (uint64_t)&v162);
    sub_20B284824(&value.__r_.__value_.__r.__words[2], (uint64_t)&v161);
    __p[0] = 0;
    __p[1] = 0;
    v160 = 0;
    v163 = __p;
    v164 = 0;
    v89 = operator new(0x20uLL);
    __p[0] = v89;
    __p[1] = v89;
    v160 = v89 + 4;
    sub_20B284824(v89, (uint64_t)&value);
    sub_20B284824(v89 + 2, (uint64_t)&value.__r_.__value_.__r.__words[2]);
    __p[1] = v89 + 4;
    sub_20B4ED41C(a6, (const void *)*MEMORY[0x24BDD8F88], (uint64_t *)__p);
    v90 = (char *)__p[0];
    if (__p[0])
    {
      v91 = (char *)__p[1];
      v92 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v93 = (std::__shared_weak_count *)*((_QWORD *)v91 - 1);
          if (v93)
          {
            v94 = (unint64_t *)&v93->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          v91 -= 16;
        }
        while (v91 != v90);
        v92 = __p[0];
      }
      __p[1] = v90;
      operator delete(v92);
    }
    v96 = v166;
    if (v166)
    {
      v97 = (unint64_t *)&v166->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    v99 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
    if (value.__r_.__value_.__l.__size_)
    {
      v100 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    v102 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v103 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
    if (!*((_QWORD *)&v162 + 1))
      return;
    v105 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v87 = __ldaxr(v105);
    while (__stlxr(v87 - 1, v105));
    goto LABEL_240;
  }
  if (a2 == 875704438)
  {
    v37 = atomic_load((unsigned __int8 *)&qword_25463CB58);
    if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_25463CB58))
    {
      v142 = sub_20B4EA530(875704438, 0);
      if (!v143)
        sub_20AF3FE2C();
      qword_25463CB50 = v142;
      __cxa_guard_release(&qword_25463CB58);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_20B4F51B8(&value, __p);
    v162 = *(_OWORD *)__p;
    sub_20AEC833C((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    value.__r_.__value_.__r.__words[0] = *a1;
    v38 = (const void *)*MEMORY[0x24BDD8FA8];
    sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8FA8], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = a1[1];
    v39 = (const void *)*MEMORY[0x24BDD8F70];
    sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F70], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_25463CB50;
    v40 = (const void *)*MEMORY[0x24BDD8F10];
    sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F10], (uint64_t *)&value);
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    else
    {
      v50 = qword_25463CB50 * *a1;
      if (v50 % HIDWORD(qword_25463CB50))
        v51 = v50 / HIDWORD(qword_25463CB50) + 1;
      else
        v51 = v50 / HIDWORD(qword_25463CB50);
      value.__r_.__value_.__r.__words[0] = (v51 * HIDWORD(qword_25463CB50));
      sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    v52 = atomic_load((unsigned __int8 *)&dword_25463CB68);
    if ((v52 & 1) == 0 && __cxa_guard_acquire((__guard *)&dword_25463CB68))
    {
      v150 = sub_20B4EA530(875704438, 1u);
      if (!v151)
        sub_20AF3FE2C();
      qword_25463CB60 = v150;
      __cxa_guard_release((__guard *)&dword_25463CB68);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_20B4F51B8(&value, __p);
    v161 = *(_OWORD *)__p;
    sub_20AEC833C((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    v53 = a1[1];
    v54 = (*a1 & 1) + (*a1 >> 1);
    value.__r_.__value_.__r.__words[0] = v54;
    sub_20B284FA0((uint64_t)&v161, v38, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = (v53 & 1) + (v53 >> 1);
    sub_20B284FA0((uint64_t)&v161, v39, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_25463CB60;
    sub_20B284FA0((uint64_t)&v161, v40, (uint64_t *)&value);
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_20B284FA0((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    else
    {
      if ((qword_25463CB60 * v54) % HIDWORD(qword_25463CB60))
        v68 = (qword_25463CB60 * v54) / HIDWORD(qword_25463CB60) + 1;
      else
        v68 = (qword_25463CB60 * v54) / HIDWORD(qword_25463CB60);
      value.__r_.__value_.__r.__words[0] = v68 * HIDWORD(qword_25463CB60);
      sub_20B284FA0((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    sub_20B284824(&value, (uint64_t)&v162);
    sub_20B284824(&value.__r_.__value_.__r.__words[2], (uint64_t)&v161);
    __p[0] = 0;
    __p[1] = 0;
    v160 = 0;
    v163 = __p;
    v164 = 0;
    v69 = operator new(0x20uLL);
    __p[0] = v69;
    __p[1] = v69;
    v160 = v69 + 4;
    sub_20B284824(v69, (uint64_t)&value);
    sub_20B284824(v69 + 2, (uint64_t)&value.__r_.__value_.__r.__words[2]);
    __p[1] = v69 + 4;
    sub_20B4ED41C(a6, (const void *)*MEMORY[0x24BDD8F88], (uint64_t *)__p);
    v70 = (char *)__p[0];
    if (__p[0])
    {
      v71 = (char *)__p[1];
      v72 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v73 = (std::__shared_weak_count *)*((_QWORD *)v71 - 1);
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          v71 -= 16;
        }
        while (v71 != v70);
        v72 = __p[0];
      }
      __p[1] = v70;
      operator delete(v72);
    }
    v76 = v166;
    if (v166)
    {
      v77 = (unint64_t *)&v166->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
    if (value.__r_.__value_.__l.__size_)
    {
      v80 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
    if (!*((_QWORD *)&v162 + 1))
      return;
    v86 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    goto LABEL_240;
  }
  if (a2 != 875836518)
    goto LABEL_267;
  v26 = atomic_load((unsigned __int8 *)&qword_25463CBB8);
  if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_25463CBB8))
  {
    v148 = sub_20B4EA530(875836518, 0);
    if (!v149)
      sub_20AF3FE2C();
    qword_25463CBB0 = v148;
    __cxa_guard_release(&qword_25463CBB8);
  }
  *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
  value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
  sub_20B4F51B8(&value, __p);
  v162 = *(_OWORD *)__p;
  sub_20AEC833C((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
  value.__r_.__value_.__r.__words[0] = *a1;
  v27 = (const void *)*MEMORY[0x24BDD8FA8];
  sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8FA8], (uint64_t *)&value);
  value.__r_.__value_.__r.__words[0] = a1[1];
  v28 = (const void *)*MEMORY[0x24BDD8F70];
  sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F70], (uint64_t *)&value);
  value.__r_.__value_.__r.__words[0] = qword_25463CBB0;
  v29 = (const void *)*MEMORY[0x24BDD8F10];
  sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F10], (uint64_t *)&value);
  if (v24)
  {
    value.__r_.__value_.__r.__words[0] = a4;
    sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
  }
  else
  {
    v64 = qword_25463CBB0 * *a1;
    if (v64 % HIDWORD(qword_25463CBB0))
      v65 = v64 / HIDWORD(qword_25463CBB0) + 1;
    else
      v65 = v64 / HIDWORD(qword_25463CBB0);
    value.__r_.__value_.__r.__words[0] = (v65 * HIDWORD(qword_25463CBB0));
    sub_20B284FA0((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
  }
  v66 = atomic_load((unsigned __int8 *)&qword_25463CBC8);
  if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_25463CBC8))
  {
    v156 = sub_20B4EA530(875836518, 1u);
    if (!v157)
      sub_20AF3FE2C();
    qword_25463CBC0 = v156;
    __cxa_guard_release(&qword_25463CBC8);
  }
  *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
  value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
  sub_20B4F51B8(&value, __p);
  v161 = *(_OWORD *)__p;
  sub_20AEC833C((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
  v67 = *(_QWORD *)a1;
  value.__r_.__value_.__r.__words[0] = v67;
  sub_20B284FA0((uint64_t)&v161, v27, (uint64_t *)&value);
  value.__r_.__value_.__r.__words[0] = HIDWORD(v67);
  sub_20B284FA0((uint64_t)&v161, v28, (uint64_t *)&value);
  value.__r_.__value_.__r.__words[0] = qword_25463CBC0;
  sub_20B284FA0((uint64_t)&v161, v29, (uint64_t *)&value);
  if (v24)
  {
    value.__r_.__value_.__r.__words[0] = a4;
    sub_20B284FA0((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
  }
  else
  {
    if ((qword_25463CBC0 * v67) % HIDWORD(qword_25463CBC0))
      v124 = (qword_25463CBC0 * v67) / HIDWORD(qword_25463CBC0) + 1;
    else
      v124 = (qword_25463CBC0 * v67) / HIDWORD(qword_25463CBC0);
    value.__r_.__value_.__r.__words[0] = v124 * HIDWORD(qword_25463CBC0);
    sub_20B284FA0((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
  }
  sub_20B284824(&value, (uint64_t)&v162);
  sub_20B284824(&value.__r_.__value_.__r.__words[2], (uint64_t)&v161);
  __p[0] = 0;
  __p[1] = 0;
  v160 = 0;
  v163 = __p;
  v164 = 0;
  v125 = operator new(0x20uLL);
  __p[0] = v125;
  __p[1] = v125;
  v160 = v125 + 4;
  sub_20B284824(v125, (uint64_t)&value);
  sub_20B284824(v125 + 2, (uint64_t)&value.__r_.__value_.__r.__words[2]);
  __p[1] = v125 + 4;
  sub_20B4ED41C(a6, (const void *)*MEMORY[0x24BDD8F88], (uint64_t *)__p);
  v126 = (char *)__p[0];
  if (__p[0])
  {
    v127 = (char *)__p[1];
    v128 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v129 = (std::__shared_weak_count *)*((_QWORD *)v127 - 1);
        if (v129)
        {
          v130 = (unint64_t *)&v129->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        v127 -= 16;
      }
      while (v127 != v126);
      v128 = __p[0];
    }
    __p[1] = v126;
    operator delete(v128);
  }
  v132 = v166;
  if (v166)
  {
    v133 = (unint64_t *)&v166->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (value.__r_.__value_.__l.__size_)
  {
    v136 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
  if (*((_QWORD *)&v161 + 1))
  {
    v139 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v87 = __ldaxr(v141);
    while (__stlxr(v87 - 1, v141));
    goto LABEL_240;
  }
}

void sub_20B4EC028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  __cxa_guard_abort(&qword_25463CBC8);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  __cxa_guard_abort(&qword_25463CBA8);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  __cxa_guard_abort(&qword_25463CB88);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  __cxa_guard_abort((__guard *)&dword_25463CB68);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC0C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_25463CBB8);
  sub_20AEC147C(v1);
  _Unwind_Resume(a1);
}

void sub_20B4EC0E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_25463CB98);
  sub_20AEC147C(v1);
  _Unwind_Resume(a1);
}

void sub_20B4EC108(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_25463CB78);
  sub_20AEC147C(v1);
  _Unwind_Resume(a1);
}

void sub_20B4EC128(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_25463CB58);
  sub_20AEC147C(v1);
  _Unwind_Resume(a1);
}

void sub_20B4EC148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  sub_20AEC147C((uint64_t)&a13);
  sub_20AEC147C((uint64_t)&a15);
  sub_20AEC147C(v25);
  _Unwind_Resume(a1);
}

void sub_20B4EC3EC()
{
  JUMPOUT(0x20B4EC3C4);
}

void sub_20B4EC3F4()
{
  JUMPOUT(0x20B4EC3C4);
}

void sub_20B4EC3FC()
{
  JUMPOUT(0x20B4EC3C4);
}

void sub_20B4EC404()
{
  JUMPOUT(0x20B4EC3C4);
}

void sub_20B4EC40C()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC414()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC41C()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC424()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC42C()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC434()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC43C()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC444()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC44C()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC454()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC45C()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC464()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC46C()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC474()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC47C()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC484()
{
  JUMPOUT(0x20B4EC3CCLL);
}

void sub_20B4EC48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char *a21)
{
  uint64_t v21;

  sub_20AEC833C((uint64_t)&a20, a21);
  sub_20AEC147C((uint64_t)&a15);
  sub_20AEC147C(v21);
  _Unwind_Resume(a1);
}

void sub_20B4EC4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v7);
  _Unwind_Resume(a1);
}

void sub_20B4EC610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char *a21)
{
  uint64_t v21;

  sub_20AEC833C((uint64_t)&a20, a21);
  sub_20AEC147C(v21);
  _Unwind_Resume(a1);
}

void sub_20B4EC63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C(v12);
  _Unwind_Resume(a1);
}

void sub_20B4EC658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
  {
    operator delete(__p);
    sub_20AEC147C(v25);
    _Unwind_Resume(a1);
  }
  sub_20AEC147C(v25);
  _Unwind_Resume(a1);
}

void sub_20B4EC67C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AEC147C(v1);
  _Unwind_Resume(a1);
}

void sub_20B4EC690(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AEC147C(v1);
  _Unwind_Resume(a1);
}

void sub_20B4EC6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char *a21)
{
  sub_20AEC833C((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_20B4EC6BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AEC147C(v1);
  _Unwind_Resume(a1);
}

void sub_20B4EC6E4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  void *value;

  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (!v5)
      goto LABEL_10;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, CFSTR("IOSurfaceName"), (const void **)&value))
  {
    sub_20B4EE3FC((CFIndex)value, a2);
    return;
  }
LABEL_10:
  a2->__r_.__value_.__s.__data_[0] = 0;
  a2[1].__r_.__value_.__s.__data_[0] = 0;
}

uint64_t sub_20B4EC7A8(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  sub_20B4EC830(a2, &__p);
  sub_20B4ED2B8(a1, CFSTR("IOSurfaceName"), (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20B4EC814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B4EC830(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD v9[8];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_25463CB48);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463CB48))
  {
    sub_20B4EC970();
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25463CBD0, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CB48);
  }
  v5 = byte_25463CBD0;
  v6 = byte_25463CBD0[23];
  if (byte_25463CBD0[23] < 0)
  {
    v6 = *(_QWORD *)&byte_25463CBD0[8];
    v5 = *(char **)byte_25463CBD0;
  }
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = "; ";
  v9[3] = 2;
  v7 = *((unsigned __int8 *)a1 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = a1;
  else
    v8 = (uint64_t *)*a1;
  if ((v7 & 0x80u) != 0)
    v7 = a1[1];
  v9[4] = v8;
  v9[5] = v7;
  v9[6] = "; X/X";
  v9[7] = 5;
  sub_20AECFDF8((uint64_t)v9, (uint64_t)&v10, 0, 0, a2);
}

void sub_20B4EC954(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CB48);
  _Unwind_Resume(a1);
}

void sub_20B4EC970()
{
  __int128 v0;
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  std::__shared_weak_count_vtbl *v4;
  std::__fs::filesystem::path::__string_view v5;
  std::__fs::filesystem::path *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v7;
  std::basic_string_view<_CharT, _Traits>::size_type v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFBundleRef MainBundle;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__fs::filesystem::path::__string_view v27;
  std::__fs::filesystem::path *v28;
  std::basic_string_view<_CharT, _Traits>::size_type v29;
  std::basic_string_view<_CharT, _Traits>::size_type v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__fs::filesystem::path::__string_view v37;
  std::string::size_type v38;
  std::__fs::filesystem::path *v39;
  std::string::size_type v40;
  std::__fs::filesystem::path *p_bundle;
  std::__fs::filesystem::path bundle;
  __int128 v43;
  std::__fs::filesystem::path v44;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path __dst;
  std::__fs::filesystem::path v47;
  uint64_t v48;
  std::__fs::filesystem::path *v49;
  std::string::size_type v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  sub_20B4EDCB0((uint64_t)&bundle);
  v0 = *(_OWORD *)&bundle.__pn_.__r_.__value_.__l.__data_;
  if (!bundle.__pn_.__r_.__value_.__l.__size_)
    goto LABEL_6;
  v1 = (unint64_t *)(bundle.__pn_.__r_.__value_.__l.__size_ + 8);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  do
    v3 = __ldaxr(v1);
  while (__stlxr(v3 - 1, v1));
  if (!v3)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v0 + 1) + 16))(*((_QWORD *)&v0 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v0 + 1));
    if ((_QWORD)v0)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if ((_QWORD)v0)
      goto LABEL_10;
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/src/BundleRef.cpp", 54, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_10:
  v4 = (std::__shared_weak_count_vtbl *)CFBundleCopyExecutableURL((CFBundleRef)bundle.__pn_.__r_.__value_.__l.__data_);
  sub_20B4F6970((std::__shared_weak_count_vtbl **)&v44, v4, 0);
  sub_20B4F6D94((uint64_t)&v44, (uint64_t)&v47);
  v5 = std::__fs::filesystem::path::__filename(&v47);
  if (v5.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v5.__size_ >= 0x17)
  {
    v7 = (v5.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5.__size_ | 7) != 0x17)
      v7 = v5.__size_ | 7;
    v8 = v7 + 1;
    p_dst = (std::__fs::filesystem::path *)operator new(v7 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = v5.__size_;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v5.__size_;
    p_dst = &__dst;
    if (!v5.__size_)
      goto LABEL_18;
  }
  memmove(p_dst, v5.__data_, v5.__size_);
LABEL_18:
  p_dst->__pn_.__r_.__value_.__s.__data_[v5.__size_] = 0;
  __p = __dst;
  if ((_BYTE)v48 && SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__pn_.__r_.__value_.__l.__data_);
  size = (std::__shared_weak_count *)v44.__pn_.__r_.__value_.__l.__size_;
  if (v44.__pn_.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(v44.__pn_.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v12 = (std::__shared_weak_count *)bundle.__pn_.__r_.__value_.__l.__size_;
  if (bundle.__pn_.__r_.__value_.__l.__size_)
  {
    v13 = (unint64_t *)(bundle.__pn_.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  MainBundle = CFBundleGetMainBundle();
  sub_20B4EDDB0(&__dst, MainBundle);
  v16 = __dst.__pn_.__r_.__value_.__r.__words[0];
  v43 = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
  if (!__dst.__pn_.__r_.__value_.__l.__size_)
    goto LABEL_44;
  v17 = (unint64_t *)(__dst.__pn_.__r_.__value_.__l.__size_ + 8);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  v19 = (std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__l.__size_;
  if (__dst.__pn_.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(__dst.__pn_.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  v16 = v43;
  if (!*((_QWORD *)&v43 + 1))
    goto LABEL_44;
  v23 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (v16)
      goto LABEL_46;
  }
  else
  {
LABEL_44:
    if (v16)
      goto LABEL_46;
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/src/BundleRef.cpp", 54, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_46:
  v26 = (std::__shared_weak_count_vtbl *)CFBundleCopyExecutableURL((CFBundleRef)v43);
  sub_20B4F6970((std::__shared_weak_count_vtbl **)&bundle, v26, 0);
  sub_20B4F6D94((uint64_t)&bundle, (uint64_t)&v47);
  v27 = std::__fs::filesystem::path::__filename(&v47);
  if (v27.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v27.__size_ >= 0x17)
  {
    v29 = (v27.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27.__size_ | 7) != 0x17)
      v29 = v27.__size_ | 7;
    v30 = v29 + 1;
    v28 = (std::__fs::filesystem::path *)operator new(v29 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = v27.__size_;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  }
  else
  {
    *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v27.__size_;
    v28 = &__dst;
    if (!v27.__size_)
      goto LABEL_54;
  }
  memmove(v28, v27.__data_, v27.__size_);
LABEL_54:
  v28->__pn_.__r_.__value_.__s.__data_[v27.__size_] = 0;
  v44 = __dst;
  if ((_BYTE)v48 && SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__pn_.__r_.__value_.__l.__data_);
  v31 = (std::__shared_weak_count *)bundle.__pn_.__r_.__value_.__l.__size_;
  if (bundle.__pn_.__r_.__value_.__l.__size_)
  {
    v32 = (unint64_t *)(bundle.__pn_.__r_.__value_.__l.__size_ + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37.__data_ = (const std::string_view::value_type *)&__p;
  else
    v37.__data_ = (const std::string_view::value_type *)__p.__pn_.__r_.__value_.__r.__words[0];
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37.__size_ = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
  else
    v37.__size_ = __p.__pn_.__r_.__value_.__l.__size_;
  if (std::__fs::filesystem::path::__compare(&v44, v37))
  {
    if (SHIBYTE(v44.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_20AEC60F4(&__dst, v44.__pn_.__r_.__value_.__l.__data_, v44.__pn_.__r_.__value_.__l.__size_);
    else
      __dst = v44;
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_20AEC60F4(&bundle, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
    else
      bundle = __p;
    v38 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
    v39 = &__dst;
    if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v38 = __dst.__pn_.__r_.__value_.__l.__size_;
      v39 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
    }
    v47.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
    v47.__pn_.__r_.__value_.__l.__size_ = v38;
    v47.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)"/";
    v48 = 1;
    v40 = HIBYTE(bundle.__pn_.__r_.__value_.__r.__words[2]);
    p_bundle = &bundle;
    if ((bundle.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v40 = bundle.__pn_.__r_.__value_.__l.__size_;
      p_bundle = (std::__fs::filesystem::path *)bundle.__pn_.__r_.__value_.__r.__words[0];
    }
    v49 = p_bundle;
    v50 = v40;
    sub_20AECFDF8((uint64_t)&v47, (uint64_t)&v51, 0, 0, (std::string *)byte_25463CBD0);
    if (SHIBYTE(bundle.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(bundle.__pn_.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_94;
    }
    else if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_94;
    }
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  }
  else if (SHIBYTE(v44.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(byte_25463CBD0, v44.__pn_.__r_.__value_.__l.__data_, v44.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    *(std::__fs::filesystem::path *)byte_25463CBD0 = v44;
  }
LABEL_94:
  if ((SHIBYTE(v44.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_98:
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v44.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_98;
}

void sub_20B4ECF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if (a30 < 0)
      goto LABEL_6;
  }
  else if (a30 < 0)
  {
LABEL_6:
    operator delete(a25);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B4ED09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4ED0B0(uint64_t a1, int *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_20AEF7244(v4, "Unsupported pixel format value ");
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1)
    sub_20AECFAB8();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24C41E178[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_20AECFAB8();
  v7[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C41E190[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C41E160[v5])(v7, v4);
  return result;
}

void sub_20B4ED1B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4ED1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20B4ED1BCLL);
}

void ***sub_20B4ED1F0(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B4ED2B8(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_20B4EE2F0(a3, (CFStringRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_20B4ED408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4ED41C(uint64_t a1, const void *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v12;
  CFMutableArrayRef v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  const void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *value[2];
  CFMutableArrayRef theArray[2];
  const void *v46;
  std::__shared_weak_count *v47;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_20B4EE6C8((std::__shared_weak_count_vtbl **)theArray, Mutable, 0);
  v13 = theArray[0];
  v12 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v14 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v13)
        goto LABEL_13;
LABEL_45:
      v32 = value;
      goto LABEL_46;
    }
  }
  if (!v13)
    goto LABEL_45;
LABEL_13:
  v17 = *a3;
  v18 = a3[1];
  if (*a3 != v18)
  {
    do
    {
      sub_20B284A78(&v46, v17);
      v20 = v46;
      v19 = v47;
      if (!v47)
      {
LABEL_30:
        if (v20)
          goto LABEL_31;
        goto LABEL_34;
      }
      v21 = (unint64_t *)&v47->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldxr(v21);
      while (__stxr(v23 + 1, v21));
      do
        v24 = __ldaxr(v21);
      while (__stlxr(v24 - 1, v21));
      if (v24)
      {
        v25 = v47;
        if (!v47)
          goto LABEL_27;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        v25 = v47;
        if (!v47)
          goto LABEL_27;
      }
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      do
LABEL_27:
        v28 = __ldxr(v21);
      while (__stxr(v28 + 1, v21));
      do
        v29 = __ldaxr(v21);
      while (__stlxr(v29 - 1, v21));
      if (v29)
        goto LABEL_30;
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if (v20)
      {
LABEL_31:
        CFArrayAppendValue(theArray[0], v20);
        if (v19)
          goto LABEL_35;
        goto LABEL_39;
      }
LABEL_34:
      value[0] = 0;
      value[1] = 0;
      if (v19)
      {
LABEL_35:
        v30 = (unint64_t *)&v19->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
LABEL_39:
      if (!v20)
        goto LABEL_47;
      v17 += 16;
    }
    while (v17 != v18);
  }
  *(_OWORD *)value = *(_OWORD *)theArray;
  v32 = theArray;
LABEL_46:
  *v32 = 0;
  v32[1] = 0;
LABEL_47:
  v33 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v34 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v37 = value[0];
  v36 = (std::__shared_weak_count *)value[1];
  if (!value[1])
    goto LABEL_57;
  v38 = (unint64_t *)((char *)value[1] + 8);
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
  do
    v40 = __ldaxr(v38);
  while (__stlxr(v40 - 1, v38));
  if (v40)
  {
LABEL_57:
    if (!v37)
      goto LABEL_59;
    goto LABEL_58;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  if (v37)
LABEL_58:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value[0]);
LABEL_59:
  v41 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v42 = (unint64_t *)((char *)value[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_20B4ED770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4ED784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (a12)
  {
    v16 = (unint64_t *)&a12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B4ED800(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  IOSurfaceLockOptions v4;
  IOSurfaceLockOptions v5;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 24) + 1;
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (v3 && !*(_QWORD *)(a1 + 32))
        goto LABEL_5;
    }
    else if (v4 != 2 || *(_QWORD *)(a1 + 32))
    {
      goto LABEL_5;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v5 = 2;
LABEL_14:
    IOSurfaceLock(*(IOSurfaceRef *)a1, v5, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = v5;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v5 = 1;
    goto LABEL_14;
  }
LABEL_5:
  std::mutex::unlock(v2);
}

void sub_20B4ED8C4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B4ED8D8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B4ED8EC(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  IOSurfaceLockOptions v4;
  IOSurfaceLockOptions v6;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32) + 1;
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (*(_QWORD *)(a1 + 24) && !v3)
        goto LABEL_7;
    }
    else if (v4 != 2 || v3 != 0)
    {
      goto LABEL_7;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
    v3 = *(_QWORD *)(a1 + 32);
  }
  if (v3)
  {
    v6 = 2;
LABEL_16:
    IOSurfaceLock(*(IOSurfaceRef *)a1, v6, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = v6;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v6 = 1;
    goto LABEL_16;
  }
LABEL_7:
  std::mutex::unlock(v2);
}

void sub_20B4ED9AC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B4ED9C0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B4ED9D4(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  IOSurfaceLockOptions v4;
  IOSurfaceLockOptions v5;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 24) - 1;
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (v3 && !*(_QWORD *)(a1 + 32))
        goto LABEL_5;
    }
    else if (v4 != 2 || *(_QWORD *)(a1 + 32))
    {
      goto LABEL_5;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v5 = 2;
LABEL_14:
    IOSurfaceLock(*(IOSurfaceRef *)a1, v5, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = v5;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v5 = 1;
    goto LABEL_14;
  }
LABEL_5:
  std::mutex::unlock(v2);
}

void sub_20B4EDA98(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B4EDAAC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B4EDAC0(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  IOSurfaceLockOptions v4;
  IOSurfaceLockOptions v6;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32) - 1;
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (*(_QWORD *)(a1 + 24) && !v3)
        goto LABEL_7;
    }
    else if (v4 != 2 || v3 != 0)
    {
      goto LABEL_7;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
    v3 = *(_QWORD *)(a1 + 32);
  }
  if (v3)
  {
    v6 = 2;
LABEL_16:
    IOSurfaceLock(*(IOSurfaceRef *)a1, v6, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = v6;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v6 = 1;
    goto LABEL_16;
  }
LABEL_7:
  std::mutex::unlock(v2);
}

void sub_20B4EDB80(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B4EDB94(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20B4EDBA8(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20B4EDDB0(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E1B8;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20B4EDC84(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4EDC9C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B4EDCB0(uint64_t a1@<X8>)
{
  std::__shared_weak_count_vtbl *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 bundleURL;
  void *__p[2];
  char v8;
  char v9;

  sub_20B525D74((uint64_t)__p);
  if (v9)
  {
    sub_20B4F6A78(&bundleURL, (uint64_t)__p, 1u);
    v2 = (std::__shared_weak_count_vtbl *)CFBundleCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFURLRef)bundleURL);
    sub_20B4EDBA8((std::__shared_weak_count_vtbl **)a1, v2, 0);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&bundleURL + 1);
    if (*((_QWORD *)&bundleURL + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&bundleURL + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (v9)
    {
      if (v8 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_20B4EDD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B4EDDB0(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C41E1B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20B4EDE10(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4EDE28(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B4EDE40(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B4EDE64(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20B4EDE84(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B4EDEF4(int *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40FA18;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20B4EDFCC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4EDFE4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B4EDFF8(unsigned int *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40FA18;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20B4EE0D0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4EE0E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B4EE0FC(uint64_t *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40FA18;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20B4EE1D4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4EE1EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B4EE200(_BYTE *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count_vtbl **v3;
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = (std::__shared_weak_count_vtbl **)MEMORY[0x24BDBD270];
  if (!*a1)
    v3 = (std::__shared_weak_count_vtbl **)MEMORY[0x24BDBD268];
  v4 = *v3;
  v5 = (std::__shared_weak_count *)operator new();
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E258;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  *a2 = v4;
  a2[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_20B4EE2C4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4EE2DC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B4EE2F0(uint64_t a1@<X0>, CFStringRef *a2@<X8>)
{
  int v3;
  const UInt8 *v4;
  CFIndex v5;
  CFStringRef v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (const UInt8 *)a1;
  else
    v4 = *(const UInt8 **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v4, v5, 0x8000100u, 0);
  v7 = (std::__shared_weak_count *)operator new();
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C418888;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a2 = v6;
  a2[1] = (CFStringRef)v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_20B4EE3D0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4EE3E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

CFIndex sub_20B4EE3FC@<X0>(CFIndex result@<X0>, std::string *a2@<X8>)
{
  const __CFString *v3;
  CFTypeID TypeID;
  CFIndex v5;
  CFIndex v6;
  std::string *v7;
  std::string v8;
  CFIndex usedBufLen;
  CFRange v10;
  CFRange v11;

  if (!result)
    goto LABEL_9;
  v3 = (const __CFString *)result;
  TypeID = CFStringGetTypeID();
  result = CFGetTypeID(v3);
  if (result != TypeID)
    goto LABEL_9;
  result = CFStringGetLength(v3);
  if (result)
  {
    v5 = result;
    usedBufLen = 0;
    v10.location = 0;
    v10.length = result;
    result = CFStringGetBytes(v3, v10, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
    if (result > 0)
    {
      memset(&v8, 0, sizeof(v8));
      if (usedBufLen)
      {
        std::string::append(&v8, usedBufLen, 0);
        v6 = usedBufLen;
        if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = &v8;
        else
          v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
      }
      else
      {
        v6 = 0;
        v7 = &v8;
      }
      v11.location = 0;
      v11.length = v5;
      result = CFStringGetBytes(v3, v11, 0x8000100u, 0, 0, (UInt8 *)v7, v6, 0);
      *a2 = v8;
      goto LABEL_13;
    }
LABEL_9:
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return result;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
LABEL_13:
  a2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_20B4EE53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B4EE55C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B4EE580(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20B4EE5A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B4EE614(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B4EE638(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20B4EE658(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

std::__shared_weak_count_vtbl **sub_20B4EE6C8(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20B4EE8D8(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E2A8;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20B4EE7A4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4EE7BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20B4EE7D0(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20B284934(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C416928;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20B4EE8AC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4EE8C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20B4EE8D8(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C41E2A8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20B4EE938(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4EE950(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B4EE968(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B4EE98C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20B4EE9AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

std::__shared_weak_count_vtbl **sub_20B4EEA1C(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20B4EED40(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E208;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20B4EEAF8(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4EEB10(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B4EEB24(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *(const void **)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_20B4EED40(&v16, v3);
  v7 = v17;
  *a2 = v16;
  a2[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v10 = v17;
    if (v17)
    {
      v11 = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20B4EEC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4EEC24(const UInt8 *a1@<X0>, CFIndex a2@<X1>, _QWORD *a3@<X8>)
{
  const __CFAllocator *Default;
  CFDataRef v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  CFDataRef v12;
  std::__shared_weak_count *v13;

  Default = CFAllocatorGetDefault();
  v7 = CFDataCreateWithBytesNoCopy(Default, a1, a2, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v12 = v7;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E208;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v13 = v8;
  sub_20B4EEB24((uint64_t)&v12, a3);
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B4EED00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4EED14(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4EED2C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20B4EED40(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C41E208;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20B4EEDA0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4EEDB8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B4EEDCC(void **a1@<X0>, uint64_t *a2@<X1>, void **a3@<X2>, uint64_t *a4@<X3>, const __CFAllocator *a5@<X4>, const CFDictionaryKeyCallBacks *a6@<X5>, const CFDictionaryValueCallBacks *a7@<X6>, void ***a8@<X8>)
{
  void **v14;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void **v19;
  std::__shared_weak_count_vtbl *v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void **values;
  void **v31;
  void **v32;
  uint64_t v33;
  void ***p_values;

  v14 = a1;
  if (a1 != a3
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/src/DictionaryRef.cpp", 99, (uint64_t)"keys.size() == values.size()", 28, (uint64_t)"Number of keys must match number of values", 42, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  values = 0;
  v31 = 0;
  v32 = 0;
  if (v14)
  {
    if ((unint64_t)v14 >> 61)
      sub_20AEC60B8();
    values = (void **)operator new(8 * (_QWORD)v14);
    v31 = values;
    v32 = &values[(_QWORD)v14];
    p_values = &values;
    v16 = 16 * (_QWORD)v14;
    do
    {
      v33 = *a2;
      sub_20B4F08D8((void ***)&p_values, &v33);
      a2 += 2;
      v16 -= 16;
    }
    while (v16);
    v17 = values;
    v14 = v31;
    values = 0;
    v31 = 0;
    v32 = 0;
    if (a3)
      goto LABEL_8;
LABEL_13:
    v19 = 0;
    goto LABEL_14;
  }
  v17 = 0;
  values = 0;
  v31 = 0;
  v32 = 0;
  if (!a3)
    goto LABEL_13;
LABEL_8:
  if ((unint64_t)a3 >> 61)
    sub_20AEC60B8();
  values = (void **)operator new(8 * (_QWORD)a3);
  v31 = values;
  v32 = &values[(_QWORD)a3];
  p_values = &values;
  v18 = 16 * (_QWORD)a3;
  do
  {
    v33 = *a4;
    sub_20B4F08D8((void ***)&p_values, &v33);
    a4 += 2;
    v18 -= 16;
  }
  while (v18);
  v19 = values;
LABEL_14:
  v20 = (std::__shared_weak_count_vtbl *)CFDictionaryCreate(a5, (const void **)v17, (const void **)v19, v14 - v17, a6, a7);
  sub_20B4EF134((std::__shared_weak_count_vtbl **)&values, v20, 0);
  v21 = values;
  v22 = (std::__shared_weak_count *)v31;
  if (v31)
  {
    v23 = (unint64_t *)(v31 + 1);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    *a8 = v21;
    a8[1] = (void **)&v22->__vftable;
    do
      v25 = __ldxr(v23);
    while (__stxr(v25 + 1, v23));
    do
      v26 = __ldaxr(v23);
    while (__stlxr(v26 - 1, v23));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    *a8 = values;
    a8[1] = 0;
  }
  v27 = (std::__shared_weak_count *)v31;
  if (v31)
  {
    v28 = (unint64_t *)(v31 + 1);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v19)
    operator delete(v19);
  if (v17)
    operator delete(v17);
}

void sub_20B4EF028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);
  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

void ***sub_20B4EF07C(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        while (1)
        {
          v6 = (std::__shared_weak_count *)*(v3 - 1);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v5 = v3 - 5;
          if (*((char *)v3 - 17) < 0)
            break;
          v3 -= 5;
          if (v5 == v2)
            goto LABEL_12;
        }
        operator delete(*v5);
        v3 -= 5;
      }
      while (v5 != v2);
LABEL_12:
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

std::__shared_weak_count_vtbl **sub_20B4EF134(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20AEEC3E8(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F2C60;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20B4EF210(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4EF228(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B4EF23C(uint64_t a1, void **a2, unsigned __int8 a3, void **a4, unsigned __int8 a5)
{
  std::__shared_weak_count *v10;
  CFDictionaryRef v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void **p_p;
  std::__shared_weak_count *v19;
  CFDictionaryRef v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t Count;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  const void **v29;
  unint64_t v30;
  const void **v31;
  unint64_t v32;
  CFTypeRef *v33;
  CFTypeRef *v34;
  unint64_t v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __n128 v40;
  void *v41;
  char *v42;
  char *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  CFTypeRef *v48;
  CFTypeRef *v49;
  CFTypeRef *v50;
  unint64_t v51;
  char *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  __n128 v56;
  void *v57;
  char *v58;
  char *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __n128 v64;
  __n128 v65;
  void *__p;
  CFTypeRef *v67;
  uint64_t v68;
  void *v69;
  CFTypeRef *v70;
  uint64_t v71;
  __n128 v72;
  unint64_t v73;
  __int128 v74;

  v11 = *(CFDictionaryRef *)a1;
  v10 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v10)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v11)
      return;
  }
  else
  {
LABEL_6:
    if (!v11)
      return;
  }
  v69 = 0;
  v70 = 0;
  v71 = 0;
  __p = 0;
  v67 = 0;
  v15 = a3;
  v68 = 0;
  if (a3)
    v16 = &v69;
  else
    v16 = 0;
  v17 = a5;
  if (a5)
    p_p = &__p;
  else
    p_p = 0;
  v20 = *(CFDictionaryRef *)a1;
  v19 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v19)
    goto LABEL_18;
  v21 = (unint64_t *)&v19->__shared_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  do
    v23 = __ldaxr(v21);
  while (__stlxr(v23 - 1, v21));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (v20)
      goto LABEL_19;
  }
  else
  {
LABEL_18:
    if (v20)
    {
LABEL_19:
      Count = *(_QWORD *)a1;
      v24 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v24)
        goto LABEL_24;
      v26 = (unint64_t *)&v24->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      do
        v28 = __ldaxr(v26);
      while (__stlxr(v28 - 1, v26));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        if (!Count)
          goto LABEL_26;
      }
      else
      {
LABEL_24:
        if (!Count)
        {
LABEL_26:
          if (v15)
          {
            v29 = (const void **)*v16;
            v30 = ((_BYTE *)v16[1] - (_BYTE *)*v16) >> 3;
            if (Count <= v30)
            {
              if (Count < v30)
                v16[1] = &v29[Count];
            }
            else
            {
              sub_20B4F3CF0(v16, Count - v30);
              v29 = (const void **)*v16;
            }
          }
          else
          {
            v29 = 0;
          }
          if (v17)
          {
            v31 = (const void **)*p_p;
            v32 = ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3;
            if (Count <= v32)
            {
              if (Count < v32)
                p_p[1] = &v31[Count];
            }
            else
            {
              sub_20B4F3CF0(p_p, Count - v32);
              v31 = (const void **)*p_p;
            }
          }
          else
          {
            v31 = 0;
          }
          CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, v29, v31);
          goto LABEL_43;
        }
      }
      Count = CFDictionaryGetCount(*(CFDictionaryRef *)a1);
      goto LABEL_26;
    }
  }
LABEL_43:
  if (v15)
  {
    v73 = 0;
    v72 = 0uLL;
    sub_20B45194C((uint64_t)&v72, ((char *)v70 - (_BYTE *)v69) >> 3);
    v33 = (CFTypeRef *)v69;
    v34 = v70;
    if (v69 != v70)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            sub_20B15B754(&v74, *v33);
            v35 = v72.n128_u64[1];
            if (v72.n128_u64[1] >= v73)
              break;
            *(_OWORD *)v72.n128_u64[1] = v74;
            v72.n128_u64[1] = v35 + 16;
            if (++v33 == v34)
              goto LABEL_55;
          }
          v36 = sub_20B451AE4((char **)&v72, (uint64_t)&v74);
          v37 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
          v72.n128_u64[1] = (unint64_t)v36;
          if (*((_QWORD *)&v74 + 1))
          {
            v38 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
              break;
          }
          if (++v33 == v34)
            goto LABEL_55;
        }
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
        ++v33;
      }
      while (v33 != v34);
    }
LABEL_55:
    v40 = v72;
    v41 = (void *)v73;
    v42 = (char *)*a2;
    if (*a2)
    {
      v64 = v72;
      v43 = (char *)a2[1];
      v44 = *a2;
      if (v43 != v42)
      {
        do
        {
          v45 = (std::__shared_weak_count *)*((_QWORD *)v43 - 1);
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v45->__on_zero_shared)(v45, v40);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v43 -= 16;
        }
        while (v43 != v42);
        v44 = *a2;
      }
      a2[1] = v42;
      operator delete(v44);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v40 = v64;
    }
    *(__n128 *)a2 = v40;
    a2[2] = v41;
  }
  v48 = (CFTypeRef *)__p;
  if (v17)
  {
    v73 = 0;
    v72 = 0uLL;
    sub_20B45194C((uint64_t)&v72, ((char *)v67 - (_BYTE *)__p) >> 3);
    v49 = (CFTypeRef *)__p;
    v50 = v67;
    if (__p != v67)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            sub_20B15B754(&v74, *v49);
            v51 = v72.n128_u64[1];
            if (v72.n128_u64[1] >= v73)
              break;
            *(_OWORD *)v72.n128_u64[1] = v74;
            v72.n128_u64[1] = v51 + 16;
            if (++v49 == v50)
              goto LABEL_79;
          }
          v52 = sub_20B451AE4((char **)&v72, (uint64_t)&v74);
          v53 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
          v72.n128_u64[1] = (unint64_t)v52;
          if (*((_QWORD *)&v74 + 1))
          {
            v54 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
              break;
          }
          if (++v49 == v50)
            goto LABEL_79;
        }
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
        ++v49;
      }
      while (v49 != v50);
    }
LABEL_79:
    v56 = v72;
    v57 = (void *)v73;
    v58 = (char *)*a4;
    if (*a4)
    {
      v65 = v72;
      v59 = (char *)a4[1];
      v60 = *a4;
      if (v59 != v58)
      {
        do
        {
          v61 = (std::__shared_weak_count *)*((_QWORD *)v59 - 1);
          if (v61)
          {
            v62 = (unint64_t *)&v61->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v61->__on_zero_shared)(v61, v56);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          v59 -= 16;
        }
        while (v59 != v58);
        v60 = *a4;
      }
      a4[1] = v58;
      operator delete(v60);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v56 = v65;
    }
    *(__n128 *)a4 = v56;
    a4[2] = v57;
    v48 = (CFTypeRef *)__p;
  }
  if (v48)
  {
    v67 = v48;
    operator delete(v48);
  }
  if (v69)
  {
    v70 = (CFTypeRef *)v69;
    operator delete(v69);
  }
}

void sub_20B4EF710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v23;

  sub_20AEC3C38(&a17);
  if (__p)
  {
    operator delete(__p);
    v23 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v23 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4EF7CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  void *v6;
  size_t v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;

  v2 = **(_QWORD **)(a1 + 24) + 24 * *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != v2)
  {
    v4 = *(_BYTE *)(v2 + 23);
    if (*(char *)(v3 + 23) < 0)
    {
      if (v4 >= 0)
        v6 = (void *)v2;
      else
        v6 = *(void **)v2;
      if (v4 >= 0)
        v7 = *(unsigned __int8 *)(v2 + 23);
      else
        v7 = *(_QWORD *)(v2 + 8);
      sub_20AEC8090((void **)v3, v6, v7);
    }
    else if ((*(_BYTE *)(v2 + 23) & 0x80) != 0)
    {
      sub_20AEC7FCC((_QWORD *)v3, *(void **)v2, *(_QWORD *)(v2 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v2;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(v2 + 16);
      *(_OWORD *)v3 = v5;
    }
  }
  v8 = *(_QWORD *)(a1 + 40);
  sub_20B161578(&v17, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 16 * *(_QWORD *)(a1 + 8));
  v9 = v17;
  v17 = 0uLL;
  v10 = *(std::__shared_weak_count **)(v8 + 32);
  *(_OWORD *)(v8 + 24) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
        goto LABEL_18;
      return *(_QWORD *)(a1 + 40);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (!*((_QWORD *)&v17 + 1))
    return *(_QWORD *)(a1 + 40);
LABEL_18:
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return *(_QWORD *)(a1 + 40);
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_20B4EF920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  char *v13;
  uint64_t v14;
  uint64_t v15[2];
  uint64_t *v16;

  v15[0] = a2;
  v15[1] = a3;
  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_20B4EF23C(a1, 0, 0, &__p, 1u);
  v3 = (char *)__p;
  v4 = v13;
  if (__p == v13)
  {
    v5 = 1;
    if (!__p)
      return v5;
    goto LABEL_10;
  }
  v5 = 1;
  while (1)
  {
    v16 = v15;
    if (!sub_20B4F3E90(&v16, (uint64_t)v3, v15))
      break;
    v3 += 16;
    if (v3 == v4)
      goto LABEL_9;
  }
  v5 = 0;
LABEL_9:
  v3 = (char *)__p;
  if (__p)
  {
LABEL_10:
    v6 = v13;
    v7 = v3;
    if (v13 != v3)
    {
      do
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v3);
      v7 = __p;
    }
    v13 = v3;
    operator delete(v7);
  }
  return v5;
}

void sub_20B4EFA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AEC3C38(&a9);
  _Unwind_Resume(a1);
}

void sub_20B4EFA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AEC3C38(&a9);
  _Unwind_Resume(a1);
}

void sub_20B4EFA6C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  CFIndex *v18;
  CFIndex *v19;
  __n128 v20;
  __n128 *v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char *v28;
  CFIndex *v29;
  CFIndex *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  char *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void **v84;
  void **v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  void *v90;
  size_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  void **v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  CFDictionaryRef v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  CFIndex Count;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  __int128 v137;
  __n128 v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  _BYTE v143[24];
  __int128 v144;
  __int128 v145;
  void *v146;
  unint64_t *v147;
  void *__p;
  CFIndex *v149;
  void *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  __int128 v156;
  unint64_t v157;
  __n128 v158;
  unint64_t v159;

  *(_QWORD *)v143 = a1;
  *(_OWORD *)&v143[8] = 0u;
  v144 = 0u;
  v145 = 0u;
  if (!a1)
    goto LABEL_164;
  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_35;
  }
  else
  {
LABEL_7:
    if (!v5)
    {
LABEL_35:
      *(_QWORD *)v143 = 0;
      goto LABEL_164;
    }
  }
  if (!CFDictionaryGetCount(*(CFDictionaryRef *)a1))
    goto LABEL_35;
  v9 = (char *)operator new(0x48uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24C41E348;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  *(_QWORD *)&v144 = v9 + 24;
  *((_QWORD *)&v144 + 1) = v9;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (char *)operator new(0x40uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_24C41E2F8;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_QWORD *)v13 + 7) = 0;
  *(_OWORD *)(v13 + 24) = 0u;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  *(_QWORD *)&v145 = v13 + 24;
  *((_QWORD *)&v145 + 1) = v13;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  sub_20B4EF23C(a1, (void **)&v153, 1u, &v150, 1u);
  v17 = v153;
  if (v153 != v154)
  {
    sub_20B4F0A4C(&__p, (uint64_t)&v153);
    v157 = 0;
    v156 = 0uLL;
    sub_20AECF88C((uint64_t)&v156, ((char *)v149 - (_BYTE *)__p) >> 4);
    v18 = (CFIndex *)__p;
    v19 = v149;
    if (__p != v149)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            sub_20B4EE3FC(*v18, (std::string *)&v139);
            v158 = v139;
            v159 = v140;
            v21 = (__n128 *)*((_QWORD *)&v156 + 1);
            if (*((_QWORD *)&v156 + 1) >= v157)
              break;
            v20 = v158;
            *(_QWORD *)(*((_QWORD *)&v156 + 1) + 16) = v159;
            *v21 = v20;
            *((_QWORD *)&v156 + 1) = (char *)v21 + 24;
            v18 += 2;
            if (v18 == v19)
              goto LABEL_28;
          }
          *((_QWORD *)&v156 + 1) = sub_20AEC81D4((void **)&v156, (uint64_t)&v158);
          if (SHIBYTE(v159) < 0)
            break;
          v18 += 2;
          if (v18 == v19)
            goto LABEL_28;
        }
        operator delete((void *)v158.n128_u64[0]);
        v18 += 2;
      }
      while (v18 != v19);
    }
LABEL_28:
    v22 = v156;
    v23 = v157;
    v24 = v144;
    v25 = *(_QWORD *)v144;
    if (*(_QWORD *)v144)
    {
      v137 = v156;
      v26 = *(_QWORD *)(v144 + 8);
      v27 = *(void **)v144;
      if (v26 != v25)
      {
        do
        {
          if (*(char *)(v26 - 1) < 0)
            operator delete(*(void **)(v26 - 24));
          v26 -= 24;
        }
        while (v26 != v25);
        v27 = *(void **)v24;
      }
      *(_QWORD *)(v24 + 8) = v25;
      operator delete(v27);
      *(_QWORD *)v24 = 0;
      *(_QWORD *)(v24 + 8) = 0;
      *(_QWORD *)(v24 + 16) = 0;
      v22 = v137;
    }
    *(_OWORD *)v24 = v22;
    *(_QWORD *)(v24 + 16) = v23;
    v29 = (CFIndex *)__p;
    if (__p)
    {
      v30 = v149;
      v31 = __p;
      if (v149 != __p)
      {
        do
        {
          v32 = (std::__shared_weak_count *)*(v30 - 1);
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v30 -= 2;
        }
        while (v30 != v29);
        v31 = __p;
      }
      v149 = v29;
      operator delete(v31);
    }
    sub_20B4F0A4C(&v146, (uint64_t)&v150);
    *(_QWORD *)&v140 = 0;
    v139 = 0uLL;
    sub_20B161318((uint64_t)&v139, ((char *)v147 - (_BYTE *)v146) >> 4);
    v35 = (unint64_t *)v146;
    v36 = v147;
    if (v146 != v147)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            v37 = *v35;
            v38 = v35[1];
            v158.n128_u64[0] = *v35;
            v158.n128_u64[1] = v38;
            if (v38)
            {
              v39 = (unint64_t *)(v38 + 8);
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
            }
            v41 = v139.n128_u64[1];
            if (v139.n128_u64[1] >= (unint64_t)v140)
              break;
            *(_QWORD *)v139.n128_u64[1] = v37;
            *(_QWORD *)(v41 + 8) = v158.n128_u64[1];
            v139.n128_u64[1] = v41 + 16;
            v35 += 2;
            if (v35 == v36)
              goto LABEL_65;
          }
          v42 = sub_20B161688((char **)&v139, (uint64_t)&v158);
          v43 = (std::__shared_weak_count *)v158.n128_u64[1];
          v139.n128_u64[1] = (unint64_t)v42;
          if (v158.n128_u64[1])
          {
            v44 = (unint64_t *)(v158.n128_u64[1] + 8);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
              break;
          }
          v35 += 2;
          if (v35 == v36)
            goto LABEL_65;
        }
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
        v35 += 2;
      }
      while (v35 != v36);
    }
LABEL_65:
    v46 = v139;
    v47 = v140;
    v48 = v144;
    v49 = v144 + 24;
    v50 = *(_QWORD *)(v144 + 24);
    if (v50)
    {
      v138 = v139;
      v51 = *(_QWORD *)(v144 + 32);
      v52 = *(void **)(v144 + 24);
      if (v51 != v50)
      {
        do
        {
          v53 = *(std::__shared_weak_count **)(v51 - 8);
          if (v53)
          {
            v54 = (unint64_t *)&v53->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v53->__on_zero_shared)(v53, v46);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          v51 -= 16;
        }
        while (v51 != v50);
        v52 = *(void **)v49;
      }
      *(_QWORD *)(v48 + 32) = v50;
      operator delete(v52);
      *(_QWORD *)v49 = 0;
      *(_QWORD *)(v49 + 8) = 0;
      *(_QWORD *)(v49 + 16) = 0;
      v46 = v138;
    }
    *(__n128 *)(v48 + 24) = v46;
    *(_QWORD *)(v48 + 40) = v47;
    v56 = (unint64_t *)v146;
    if (v146)
    {
      v57 = v147;
      v58 = v146;
      if (v147 != v146)
      {
        do
        {
          v59 = (std::__shared_weak_count *)*(v57 - 1);
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v57 -= 2;
        }
        while (v57 != v56);
        v58 = v146;
      }
      v147 = v56;
      operator delete(v58);
    }
    v17 = v153;
    *(_QWORD *)&v143[16] = (v154 - v153) >> 4;
    v28 = (char *)v150;
    if (!v150)
      goto LABEL_98;
    goto LABEL_88;
  }
  *(_QWORD *)v143 = 0;
  v28 = (char *)v150;
  if (v150)
  {
LABEL_88:
    v62 = v151;
    v63 = v28;
    if (v151 != v28)
    {
      do
      {
        v64 = (std::__shared_weak_count *)*((_QWORD *)v62 - 1);
        if (v64)
        {
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v62 -= 16;
      }
      while (v62 != v28);
      v63 = v150;
    }
    v151 = v28;
    operator delete(v63);
    v17 = v153;
  }
LABEL_98:
  if (v17)
  {
    v67 = v154;
    v68 = v17;
    if (v154 != v17)
    {
      do
      {
        v69 = (std::__shared_weak_count *)*((_QWORD *)v67 - 1);
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v67 -= 16;
      }
      while (v67 != v17);
      v68 = v153;
    }
    v154 = v17;
    operator delete(v68);
  }
  if (!*(_QWORD *)v143)
    goto LABEL_164;
  v72 = *(_QWORD *)v144;
  v73 = *(_QWORD *)(v144 + 8);
  v74 = *(_QWORD *)(v144 + 24);
  v75 = *(_QWORD *)(v144 + 32);
  v159 = 0;
  v158 = 0uLL;
  if (v72 == v73)
  {
    v77 = 0;
    v81 = 0;
  }
  else
  {
    if ((unint64_t)(0x5555555555555555 * ((v72 - v73) >> 3)) >= 0x666666666666667)
      sub_20AEC60B8();
    v158.n128_u64[0] = (unint64_t)operator new(0x5555555555555548 * ((v72 - v73) >> 3));
    v158.n128_u64[1] = v158.n128_u64[0];
    v159 = v158.n128_u64[0] + 0x5555555555555548 * ((v72 - v73) >> 3);
    *(_QWORD *)&v156 = v158.n128_u64[0];
    v153 = (char *)v158.n128_u64[0];
    v139.n128_u64[0] = (unint64_t)&v159;
    v139.n128_u64[1] = (unint64_t)&v153;
    *(_QWORD *)&v140 = &v156;
    BYTE8(v140) = 0;
    v76 = v72 + 24;
    v77 = v158.n128_u64[0];
    while (1)
    {
      if (*(char *)(v76 - 1) < 0)
      {
        sub_20AEC60F4((_BYTE *)v77, *(void **)(v76 - 24), *(_QWORD *)(v76 - 16));
      }
      else
      {
        v78 = *(_OWORD *)(v76 - 24);
        *(_QWORD *)(v77 + 16) = *(_QWORD *)(v76 - 8);
        *(_OWORD *)v77 = v78;
      }
      sub_20B161578((_QWORD *)(v77 + 24), v74);
      v74 += 16;
      v77 = v156 + 40;
      *(_QWORD *)&v156 = v156 + 40;
      v79 = v76 + 24;
      v80 = v76 == v73;
      v76 += 24;
      if (v80)
      {
        v76 = v79;
        if (v74 == v75)
          break;
      }
    }
    v81 = v158.n128_u64[0];
    v158.n128_u64[1] = v77;
  }
  v82 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v77 - v81) >> 3));
  if (v77 == v81)
    v83 = 0;
  else
    v83 = v82;
  sub_20B4F0C20(v81, (const void **)v77, v83, 1);
  v85 = (void **)v158.n128_u64[1];
  v84 = (void **)v158.n128_u64[0];
  if (v158.n128_u64[0] == v158.n128_u64[1])
    goto LABEL_151;
  v86 = 0;
  do
  {
    v87 = *(_QWORD *)v144 + 24 * v86;
    if ((void **)v87 != v84)
    {
      v88 = *((_BYTE *)v84 + 23);
      if (*(char *)(v87 + 23) < 0)
      {
        if (v88 >= 0)
          v90 = v84;
        else
          v90 = *v84;
        if (v88 >= 0)
          v91 = *((unsigned __int8 *)v84 + 23);
        else
          v91 = (size_t)v84[1];
        sub_20AEC8090((void **)v87, v90, v91);
      }
      else if ((*((_BYTE *)v84 + 23) & 0x80) != 0)
      {
        sub_20AEC7FCC((_QWORD *)v87, *v84, (size_t)v84[1]);
      }
      else
      {
        v89 = *(_OWORD *)v84;
        *(_QWORD *)(v87 + 16) = v84[2];
        *(_OWORD *)v87 = v89;
      }
    }
    v92 = *(_QWORD *)(v144 + 24);
    sub_20B161578(&v139, (uint64_t)(v84 + 3));
    v93 = v92 + 16 * v86;
    v94 = v139;
    v139 = 0uLL;
    v95 = *(std::__shared_weak_count **)(v93 + 8);
    *(__n128 *)v93 = v94;
    if (!v95)
      goto LABEL_143;
    v96 = (unint64_t *)&v95->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
      v98 = (std::__shared_weak_count *)v139.n128_u64[1];
      if (!v139.n128_u64[1])
        goto LABEL_126;
    }
    else
    {
LABEL_143:
      v98 = (std::__shared_weak_count *)v139.n128_u64[1];
      if (!v139.n128_u64[1])
        goto LABEL_126;
    }
    v99 = (unint64_t *)&v98->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
LABEL_126:
    v84 += 5;
    ++v86;
  }
  while (v84 != v85);
  v84 = (void **)v158.n128_u64[0];
LABEL_151:
  if (v84)
  {
    v101 = v158.n128_i64[1];
    v102 = v84;
    if ((void **)v158.n128_u64[1] != v84)
    {
      do
      {
        while (1)
        {
          v104 = *(std::__shared_weak_count **)(v101 - 8);
          if (v104)
          {
            v105 = (unint64_t *)&v104->__shared_owners_;
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
          v103 = (void **)(v101 - 40);
          if (*(char *)(v101 - 17) < 0)
            break;
          v101 -= 40;
          if (v103 == v84)
            goto LABEL_162;
        }
        operator delete(*v103);
        v101 -= 40;
      }
      while (v103 != v84);
LABEL_162:
      v102 = (void **)v158.n128_u64[0];
    }
    v158.n128_u64[1] = (unint64_t)v84;
    operator delete(v102);
  }
LABEL_164:
  v142 = 0;
  v140 = 0u;
  v141 = 0u;
  v139 = 0u;
  v108 = *(CFDictionaryRef *)a1;
  v107 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v107)
    goto LABEL_169;
  v109 = (unint64_t *)&v107->__shared_owners_;
  do
    v110 = __ldxr(v109);
  while (__stxr(v110 + 1, v109));
  do
    v111 = __ldaxr(v109);
  while (__stlxr(v111 - 1, v109));
  if (!v111)
  {
    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
    std::__shared_weak_count::__release_weak(v107);
    if (!v108)
      goto LABEL_173;
LABEL_170:
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)a1);
    v114 = v139.n128_u64[1];
    v113 = v139.n128_u64[0];
    v116 = *((_QWORD *)&v140 + 1);
    v115 = v140;
    v117 = v141;
    if ((_QWORD)v141)
    {
LABEL_174:
      v118 = (unint64_t *)(v117 + 8);
      do
        v119 = __ldxr(v118);
      while (__stxr(v119 + 1, v118));
    }
  }
  else
  {
LABEL_169:
    if (v108)
      goto LABEL_170;
LABEL_173:
    Count = 0;
    v114 = v139.n128_u64[1];
    v113 = v139.n128_u64[0];
    v116 = *((_QWORD *)&v140 + 1);
    v115 = v140;
    v117 = v141;
    if ((_QWORD)v141)
      goto LABEL_174;
  }
  v120 = *((_QWORD *)&v141 + 1);
  v121 = v142;
  if (v142)
  {
    v122 = (unint64_t *)&v142->__shared_owners_;
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
  }
  v124 = v114 + Count;
  *(_OWORD *)a2 = *(_OWORD *)v143;
  if (v124 >= v115 || v124 <= -1)
    v113 = 0;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v143[16];
  *(_OWORD *)(a2 + 24) = v144;
  v144 = 0uLL;
  *(_OWORD *)(a2 + 40) = v145;
  v145 = 0uLL;
  *(_QWORD *)(a2 + 56) = v113;
  *(_QWORD *)(a2 + 64) = v124;
  *(_QWORD *)(a2 + 72) = v115;
  *(_QWORD *)(a2 + 80) = v116;
  *(_QWORD *)(a2 + 88) = v117;
  *(_QWORD *)(a2 + 96) = v120;
  *(_QWORD *)(a2 + 104) = v121;
  if (v121)
  {
    v126 = (unint64_t *)&v121->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v128 = (std::__shared_weak_count *)v141;
  if ((_QWORD)v141)
  {
    v129 = (unint64_t *)(v141 + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v135 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
}

void sub_20B4F05A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_20B4EF07C((void ***)(v31 - 112));
  sub_20B44CB04((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void ***sub_20B4F08D8(void ***a1, _QWORD *a2)
{
  void **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = (char *)(*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = (char *)*v4;
    v10 = v6 - (_BYTE *)*v4;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_20AEC60B8();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_20AEC60CC();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_28;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = (__int128 *)(v6 - 16);
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
      v7 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v8;
    v4[2] = &v15[8 * v14];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  v4[1] = v8;
  return a1;
}

_QWORD *sub_20B4F0A4C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_20B451A44();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_20B4F0AF4(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B4F0B70(uint64_t a1)
{
  void ***v2;
  void ***v3;
  void **v4;
  void **v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(void ****)(a1 + 8);
    v2 = *(void ****)(a1 + 16);
    v4 = *v2;
    v5 = *v3;
    if (*v2 != *v3)
    {
      do
      {
        while (1)
        {
          v7 = (std::__shared_weak_count *)*(v4 - 1);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v6 = v4 - 5;
          if (*((char *)v4 - 17) < 0)
            break;
          v4 -= 5;
          if (v6 == v5)
            return a1;
        }
        operator delete(*v6);
        v4 -= 5;
      }
      while (v6 != v5);
    }
  }
  return a1;
}

void sub_20B4F0C20(uint64_t a1, const void **a2, uint64_t a3, char a4)
{
  unint64_t i;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  const void *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  const void *v24;
  size_t v25;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  void **v34;
  void *v35;
  unint64_t v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  BOOL v42;
  unint64_t v43;
  const void **k;
  int v45;
  const void *v46;
  size_t v47;
  size_t v48;
  int v49;
  BOOL v50;
  int v51;
  const void *v52;
  size_t v53;
  size_t v54;
  int v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void **v68;
  void *v69;
  unint64_t v70;
  int v71;
  const void *v72;
  void *v73;
  size_t v74;
  int v75;
  int v76;
  const void *v77;
  void *v78;
  size_t v79;
  int v80;
  void **v81;
  __int128 v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  BOOL v95;
  __int128 v96;
  void **v97;
  void *v98;
  size_t v99;
  const void **v100;
  const void *v101;
  const void **v102;
  size_t v103;
  size_t v104;
  int v105;
  int v106;
  const void *v107;
  size_t v108;
  size_t v109;
  int v110;
  BOOL v111;
  BOOL v112;
  int v113;
  const void *v114;
  size_t v115;
  size_t v116;
  int v117;
  BOOL v118;
  const void **j;
  const void **v120;
  const void **v121;
  size_t v122;
  int v123;
  BOOL v124;
  void **v125;
  __int128 v126;
  __int128 v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  __int128 v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  void **v150;
  void *v151;
  unint64_t v152;
  int v153;
  const void *v154;
  void *v155;
  size_t v156;
  int v157;
  int v158;
  const void **v159;
  void *v160;
  size_t v161;
  int v162;
  const void **v163;
  int v164;
  const void **v165;
  size_t v166;
  int v167;
  const void *v168;
  size_t v169;
  size_t v170;
  int v171;
  const void **v172;
  const void *v173;
  uint64_t v174;
  const void **v175;
  int v176;
  const void *v177;
  size_t v178;
  int v179;
  const void *v180;
  size_t v181;
  size_t v182;
  int v183;
  BOOL v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  __int128 v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  void **v193;
  void *v194;
  int v195;
  const void *v196;
  size_t v197;
  size_t v198;
  int v199;
  BOOL v200;
  __int128 v201;
  __int128 v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  int64_t v209;
  int64_t v210;
  int64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  const void *v216;
  size_t v217;
  int v218;
  const void *v219;
  size_t v220;
  size_t v221;
  int v222;
  int64_t v223;
  BOOL v224;
  const void **v225;
  int v226;
  const void *v227;
  size_t v228;
  int v229;
  const void *v230;
  size_t v231;
  size_t v232;
  int v233;
  BOOL v234;
  char v235;
  __int128 v236;
  uint64_t v237;
  int v238;
  const void *v239;
  size_t v240;
  void **v241;
  void *v242;
  size_t v243;
  int v244;
  __int128 v245;
  __int128 v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  const void *v253;
  size_t v254;
  int v255;
  const void *v256;
  size_t v257;
  size_t v258;
  int v259;
  BOOL v260;
  __int128 v261;
  __int128 v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  int64_t v269;
  uint64_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  const void *v278;
  size_t v279;
  int v280;
  const void *v281;
  size_t v282;
  size_t v283;
  int v284;
  __int128 v285;
  _QWORD *v286;
  __int128 v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  BOOL v291;
  void **v292;
  int v293;
  __int128 v294;
  __int128 v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  const void **v299;
  const void *v300;
  const void **v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  int v308;
  const void *v309;
  size_t v310;
  int v311;
  const void *v312;
  size_t v313;
  size_t v314;
  int v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  BOOL v320;
  __int128 v321;
  unint64_t v322;
  __int128 v323;
  __int128 v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  int v328;
  const void *v329;
  size_t v330;
  void **v331;
  void *v332;
  size_t v333;
  int v334;
  BOOL v335;
  __int128 v336;
  __int128 v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  const void *v344;
  const void **v345;
  int v346;
  const void *v347;
  size_t v348;
  int v349;
  const void *v350;
  size_t v351;
  size_t v352;
  int v353;
  BOOL v354;
  __int128 v355;
  uint64_t v356;
  void **v357;
  void *v358;
  int v359;
  const void **v360;
  void *v361;
  size_t v362;
  int v363;
  const void **v364;
  __int128 v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  BOOL v369;
  __int128 v370;
  __int128 v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  std::__shared_weak_count *v383;
  unint64_t *p_shared_owners;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  const void **v389;
  const void **v390;
  const void *v392;
  const void **v393;
  const void *v394;
  int64_t v396;
  const void *v397;
  const void **v398;
  const void **v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  char v404;
  __int128 v405;
  void *__p[2];
  const void *v407;
  __int128 v408;
  __int128 v409;
  const void *v410;
  uint64_t v411;

  v411 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v393 = a2 - 5;
  v389 = a2 - 15;
  v390 = a2 - 10;
  i = a1;
  v398 = a2;
  while (2)
  {
    a1 = i;
    v7 = (uint64_t)a2 - i;
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - i) >> 3);
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v163 = a2 - 5;
        v164 = *((char *)a2 - 17);
        if (v164 >= 0)
          v165 = a2 - 5;
        else
          v165 = (const void **)*(a2 - 5);
        if (v164 >= 0)
          v166 = *((unsigned __int8 *)a2 - 17);
        else
          v166 = (size_t)*(a2 - 4);
        v167 = *(char *)(a1 + 23);
        if (v167 >= 0)
          v168 = (const void *)a1;
        else
          v168 = *(const void **)a1;
        if (v167 >= 0)
          v169 = *(unsigned __int8 *)(a1 + 23);
        else
          v169 = *(_QWORD *)(a1 + 8);
        if (v169 >= v166)
          v170 = v166;
        else
          v170 = v169;
        v171 = memcmp(v165, v168, v170);
        if (v171)
        {
          v172 = v398;
          if ((v171 & 0x80000000) == 0)
            return;
        }
        else if (v166 == v169)
        {
          v172 = v398;
          if ((unint64_t)*(v398 - 2) >= *(_QWORD *)(a1 + 24))
            return;
        }
        else
        {
          v172 = v398;
          if (v166 >= v169)
            return;
        }
        v378 = *(_OWORD *)a1;
        v407 = *(const void **)(a1 + 16);
        *(_OWORD *)__p = v378;
        v379 = *(_OWORD *)v163;
        *(_QWORD *)(a1 + 16) = v163[2];
        *(_OWORD *)a1 = v379;
        v380 = *(_OWORD *)__p;
        v163[2] = v407;
        *(_OWORD *)v163 = v380;
        v381 = *(_OWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        v382 = *((_OWORD *)v172 - 1);
        *(v172 - 2) = 0;
        *(v172 - 1) = 0;
        v383 = *(std::__shared_weak_count **)(a1 + 32);
        *(_OWORD *)(a1 + 24) = v382;
        if (v383)
        {
          p_shared_owners = (unint64_t *)&v383->__shared_owners_;
          do
            v385 = __ldaxr(p_shared_owners);
          while (__stlxr(v385 - 1, p_shared_owners));
          if (!v385)
          {
            v405 = v381;
            ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
            std::__shared_weak_count::__release_weak(v383);
            v381 = v405;
          }
        }
        v386 = (std::__shared_weak_count *)*(v398 - 1);
        *((_OWORD *)v398 - 1) = v381;
        if (v386)
        {
          v387 = (unint64_t *)&v386->__shared_owners_;
          do
            v388 = __ldaxr(v387);
          while (__stlxr(v388 - 1, v387));
          if (!v388)
          {
            ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
            std::__shared_weak_count::__release_weak(v386);
          }
        }
        return;
      case 3uLL:
        sub_20B4F2960((const void **)a1, (const void **)(a1 + 40), v393);
        return;
      case 4uLL:
        sub_20B4F336C((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), v393);
        return;
      case 5uLL:
        sub_20B4F36FC(a1, a1 + 40, a1 + 80, (__int128 *)(a1 + 120), v393);
        return;
      default:
        if (v7 <= 959)
        {
          if ((a4 & 1) != 0)
          {
            if ((const void **)a1 == a2)
              return;
            v173 = (const void *)(a1 + 40);
            if ((const void **)(a1 + 40) == a2)
              return;
            v174 = a1;
            while (1)
            {
              v175 = (const void **)v174;
              v174 = (uint64_t)v173;
              v176 = *((char *)v175 + 63);
              if (v176 >= 0)
                v177 = v173;
              else
                v177 = v175[5];
              if (v176 >= 0)
                v178 = *((unsigned __int8 *)v175 + 63);
              else
                v178 = (size_t)v175[6];
              v179 = *((char *)v175 + 23);
              if (v179 >= 0)
                v180 = v175;
              else
                v180 = *v175;
              if (v179 >= 0)
                v181 = *((unsigned __int8 *)v175 + 23);
              else
                v181 = (size_t)v175[1];
              if (v181 >= v178)
                v182 = v178;
              else
                v182 = v181;
              v183 = memcmp(v177, v180, v182);
              if (v183)
              {
                if ((v183 & 0x80000000) == 0)
                  goto LABEL_366;
              }
              else
              {
                v184 = v178 >= v181;
                if (v178 == v181)
                  v184 = v175[8] >= v175[3];
                if (v184)
                  goto LABEL_366;
              }
              v185 = *(_OWORD *)v174;
              v407 = *(const void **)(v174 + 16);
              *(_OWORD *)__p = v185;
              *(_QWORD *)(v174 + 8) = 0;
              *(_QWORD *)(v174 + 16) = 0;
              *(_QWORD *)v174 = 0;
              v408 = *((_OWORD *)v175 + 4);
              v175[8] = 0;
              v175[9] = 0;
              v186 = v174;
              while (1)
              {
                v187 = (uint64_t)v175;
                if (*(char *)(v186 + 23) < 0)
                  operator delete(*(void **)v186);
                *(_OWORD *)v186 = *(_OWORD *)v175;
                *(_QWORD *)(v186 + 16) = v175[2];
                *((_BYTE *)v175 + 23) = 0;
                *(_BYTE *)v175 = 0;
                v188 = v175 + 3;
                v189 = *(_OWORD *)(v175 + 3);
                v175[4] = 0;
                v175[3] = 0;
                v190 = *(std::__shared_weak_count **)(v186 + 32);
                *(_OWORD *)(v186 + 24) = v189;
                if (v190)
                {
                  v191 = (unint64_t *)&v190->__shared_owners_;
                  do
                    v192 = __ldaxr(v191);
                  while (__stlxr(v192 - 1, v191));
                  if (!v192)
                  {
                    ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                    std::__shared_weak_count::__release_weak(v190);
                  }
                }
                if (v187 == a1)
                  break;
                v175 = (const void **)(v187 - 40);
                if (SHIBYTE(v407) >= 0)
                  v193 = __p;
                else
                  v193 = (void **)__p[0];
                if (SHIBYTE(v407) >= 0)
                  v194 = (void *)HIBYTE(v407);
                else
                  v194 = __p[1];
                v195 = *(char *)(v187 - 17);
                if (v195 >= 0)
                  v196 = (const void *)(v187 - 40);
                else
                  v196 = *(const void **)(v187 - 40);
                if (v195 >= 0)
                  v197 = *(unsigned __int8 *)(v187 - 17);
                else
                  v197 = *(_QWORD *)(v187 - 32);
                if (v197 >= (unint64_t)v194)
                  v198 = (size_t)v194;
                else
                  v198 = v197;
                v199 = memcmp(v193, v196, v198);
                if (v199)
                {
                  v186 = v187;
                  if ((v199 & 0x80000000) == 0)
                    goto LABEL_421;
                }
                else
                {
                  v200 = (unint64_t)v194 >= v197;
                  if (v194 == (void *)v197)
                  {
                    v186 = v187;
                    if ((unint64_t)v408 >= *(_QWORD *)(v187 - 16))
                      goto LABEL_421;
                  }
                  else
                  {
                    v186 = v187;
                    if (v200)
                      goto LABEL_421;
                  }
                }
              }
              v187 = a1;
LABEL_421:
              if (*(char *)(v187 + 23) < 0)
                operator delete(*(void **)v187);
              v201 = *(_OWORD *)__p;
              *(_QWORD *)(v187 + 16) = v407;
              *(_OWORD *)v187 = v201;
              HIBYTE(v407) = 0;
              LOBYTE(__p[0]) = 0;
              v202 = v408;
              v408 = 0uLL;
              *v188 = v202;
              v203 = *(std::__shared_weak_count **)(v187 + 32);
              *(_QWORD *)(v187 + 32) = *((_QWORD *)&v202 + 1);
              if (v203)
              {
                v204 = (unint64_t *)&v203->__shared_owners_;
                do
                  v205 = __ldaxr(v204);
                while (__stlxr(v205 - 1, v204));
                if (!v205)
                {
                  ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                  std::__shared_weak_count::__release_weak(v203);
                }
              }
              v206 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
              if (*((_QWORD *)&v408 + 1))
              {
                v207 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
                do
                  v208 = __ldaxr(v207);
                while (__stlxr(v208 - 1, v207));
                if (!v208)
                {
                  ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                  std::__shared_weak_count::__release_weak(v206);
                }
              }
              if (SHIBYTE(v407) < 0)
                operator delete(__p[0]);
LABEL_366:
              v173 = (const void *)(v174 + 40);
              if ((const void **)(v174 + 40) == v398)
                return;
            }
          }
          if ((const void **)a1 == a2)
            return;
          v344 = (const void *)(a1 + 40);
          if ((const void **)(a1 + 40) == a2)
            return;
          while (1)
          {
            v345 = (const void **)a1;
            a1 = (uint64_t)v344;
            v346 = *((char *)v345 + 63);
            if (v346 >= 0)
              v347 = v344;
            else
              v347 = v345[5];
            if (v346 >= 0)
              v348 = *((unsigned __int8 *)v345 + 63);
            else
              v348 = (size_t)v345[6];
            v349 = *((char *)v345 + 23);
            if (v349 >= 0)
              v350 = v345;
            else
              v350 = *v345;
            if (v349 >= 0)
              v351 = *((unsigned __int8 *)v345 + 23);
            else
              v351 = (size_t)v345[1];
            if (v351 >= v348)
              v352 = v348;
            else
              v352 = v351;
            v353 = memcmp(v347, v350, v352);
            if (v353)
            {
              if ((v353 & 0x80000000) == 0)
                goto LABEL_688;
            }
            else
            {
              v354 = v348 >= v351;
              if (v348 == v351)
                v354 = v345[8] >= v345[3];
              if (v354)
                goto LABEL_688;
            }
            v355 = *(_OWORD *)a1;
            v407 = *(const void **)(a1 + 16);
            *(_OWORD *)__p = v355;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v408 = *((_OWORD *)v345 + 4);
            v345[8] = 0;
            v345[9] = 0;
            v356 = a1;
            do
            {
              while (1)
              {
                while (1)
                {
                  v364 = v345;
                  if (*(char *)(v356 + 23) < 0)
                    operator delete(*(void **)v356);
                  *(_OWORD *)v356 = *(_OWORD *)v345;
                  *(_QWORD *)(v356 + 16) = v345[2];
                  *((_BYTE *)v345 + 23) = 0;
                  *(_BYTE *)v345 = 0;
                  v365 = *(_OWORD *)(v345 + 3);
                  v345[3] = 0;
                  v345[4] = 0;
                  v366 = *(std::__shared_weak_count **)(v356 + 32);
                  *(_OWORD *)(v356 + 24) = v365;
                  if (v366)
                  {
                    v367 = (unint64_t *)&v366->__shared_owners_;
                    do
                      v368 = __ldaxr(v367);
                    while (__stlxr(v368 - 1, v367));
                    if (!v368)
                    {
                      ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
                      std::__shared_weak_count::__release_weak(v366);
                    }
                  }
                  v345 = v364 - 5;
                  v357 = SHIBYTE(v407) >= 0 ? __p : (void **)__p[0];
                  v358 = SHIBYTE(v407) >= 0 ? (void *)HIBYTE(v407) : __p[1];
                  v359 = *((char *)v364 - 17);
                  v360 = v359 >= 0 ? v364 - 5 : (const void **)*(v364 - 5);
                  v361 = v359 >= 0 ? (void *)*((unsigned __int8 *)v364 - 17) : (void *)*(v364 - 4);
                  v362 = (size_t)(v361 >= v358 ? v358 : v361);
                  v363 = memcmp(v357, v360, v362);
                  if (!v363)
                    break;
                  v356 = (uint64_t)v364;
                  if ((v363 & 0x80000000) == 0)
                    goto LABEL_740;
                }
                v369 = v358 >= v361;
                if (v358 != v361)
                  break;
                v356 = (uint64_t)v364;
                if ((unint64_t)v408 >= (unint64_t)*(v364 - 2))
                  goto LABEL_740;
              }
              v356 = (uint64_t)v364;
            }
            while (!v369);
LABEL_740:
            if (*((char *)v364 + 23) < 0)
              operator delete((void *)*v364);
            v370 = *(_OWORD *)__p;
            v364[2] = v407;
            *(_OWORD *)v364 = v370;
            HIBYTE(v407) = 0;
            LOBYTE(__p[0]) = 0;
            v371 = v408;
            v408 = 0uLL;
            v372 = (std::__shared_weak_count *)v364[4];
            *(_OWORD *)(v364 + 3) = v371;
            if (v372)
            {
              v373 = (unint64_t *)&v372->__shared_owners_;
              do
                v374 = __ldaxr(v373);
              while (__stlxr(v374 - 1, v373));
              if (!v374)
              {
                ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
                std::__shared_weak_count::__release_weak(v372);
              }
            }
            v375 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
            if (*((_QWORD *)&v408 + 1))
            {
              v376 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
              do
                v377 = __ldaxr(v376);
              while (__stlxr(v377 - 1, v376));
              if (!v377)
              {
                ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                std::__shared_weak_count::__release_weak(v375);
              }
            }
            if (SHIBYTE(v407) < 0)
              operator delete(__p[0]);
LABEL_688:
            v344 = (const void *)(a1 + 40);
            if ((const void **)(a1 + 40) == v398)
              return;
          }
        }
        if (a3)
        {
          v9 = v8 >> 1;
          v10 = a1 + 40 * (v8 >> 1);
          if ((unint64_t)v7 < 0x1401)
          {
            sub_20B4F2960((const void **)v10, (const void **)a1, v393);
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_43;
          }
          else
          {
            sub_20B4F2960((const void **)a1, (const void **)v10, v393);
            v11 = 40 * v9;
            sub_20B4F2960((const void **)(a1 + 40), (const void **)(v11 + a1 - 40), v390);
            sub_20B4F2960((const void **)(a1 + 80), (const void **)(a1 + 40 + v11), v389);
            sub_20B4F2960((const void **)(v11 + a1 - 40), (const void **)v10, (const void **)(a1 + 40 + v11));
            v12 = *(_OWORD *)a1;
            v407 = *(const void **)(a1 + 16);
            *(_OWORD *)__p = v12;
            v13 = *(_QWORD *)(v10 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v10;
            v14 = *(_OWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 16) = v13;
            *(_QWORD *)(a1 + 24) = 0;
            v15 = v407;
            *(_OWORD *)v10 = *(_OWORD *)__p;
            *(_QWORD *)(a1 + 32) = 0;
            v16 = *(_OWORD *)(v10 + 24);
            *(_QWORD *)(v10 + 24) = 0;
            *(_QWORD *)(v10 + 32) = 0;
            *(_QWORD *)(v10 + 16) = v15;
            v17 = *(std::__shared_weak_count **)(a1 + 32);
            *(_OWORD *)(a1 + 24) = v16;
            if (v17)
            {
              v18 = (unint64_t *)&v17->__shared_owners_;
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                v400 = v14;
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
                v14 = v400;
              }
            }
            v20 = *(std::__shared_weak_count **)(v10 + 32);
            *(_OWORD *)(v10 + 24) = v14;
            if (!v20)
              goto LABEL_16;
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_43;
            }
            else
            {
LABEL_16:
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_43;
            }
          }
          v23 = *(char *)(a1 - 17);
          if (v23 >= 0)
            v24 = (const void *)(a1 - 40);
          else
            v24 = *(const void **)(a1 - 40);
          if (v23 >= 0)
            v25 = *(unsigned __int8 *)(a1 - 17);
          else
            v25 = *(_QWORD *)(a1 - 32);
          v26 = *(char *)(a1 + 23);
          if (v26 >= 0)
            v27 = (const void *)a1;
          else
            v27 = *(const void **)a1;
          if (v26 >= 0)
            v28 = *(unsigned __int8 *)(a1 + 23);
          else
            v28 = *(_QWORD *)(a1 + 8);
          if (v28 >= v25)
            v29 = v25;
          else
            v29 = v28;
          v30 = memcmp(v24, v27, v29);
          if (v30)
          {
            if (v30 < 0)
              goto LABEL_43;
            goto LABEL_186;
          }
          if (v25 == v28)
          {
            if (*(_QWORD *)(a1 - 16) < *(_QWORD *)(a1 + 24))
              goto LABEL_43;
LABEL_186:
            v96 = *(_OWORD *)a1;
            v407 = *(const void **)(a1 + 16);
            *(_OWORD *)__p = v96;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v402 = *(_OWORD *)(a1 + 24);
            v408 = v402;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            if (SHIBYTE(v407) >= 0)
              v97 = __p;
            else
              v97 = (void **)__p[0];
            if (SHIBYTE(v407) >= 0)
              v98 = (void *)HIBYTE(v407);
            else
              v98 = __p[1];
            v99 = *((unsigned __int8 *)v398 - 17);
            v100 = (const void **)*(v398 - 5);
            v101 = *(v398 - 4);
            if ((v99 & 0x80u) == 0)
              v102 = v393;
            else
              v102 = (const void **)*(v398 - 5);
            if ((v99 & 0x80u) == 0)
              v103 = *((unsigned __int8 *)v398 - 17);
            else
              v103 = (size_t)*(v398 - 4);
            if (v103 >= (unint64_t)v98)
              v104 = (size_t)v98;
            else
              v104 = v103;
            v105 = memcmp(v97, v102, v104);
            if (v105)
            {
              if (v105 < 0)
                goto LABEL_225;
            }
            else
            {
              v112 = (unint64_t)v98 >= v103;
              if (v98 == (void *)v103)
                v112 = (unint64_t)v402 >= (unint64_t)*(v398 - 2);
              if (!v112)
              {
LABEL_225:
                for (i = a1 + 40; ; i += 40)
                {
                  v113 = *(char *)(i + 23);
                  if (v113 >= 0)
                    v114 = (const void *)i;
                  else
                    v114 = *(const void **)i;
                  if (v113 >= 0)
                    v115 = *(unsigned __int8 *)(i + 23);
                  else
                    v115 = *(_QWORD *)(i + 8);
                  if (v115 >= (unint64_t)v98)
                    v116 = (size_t)v98;
                  else
                    v116 = v115;
                  v117 = memcmp(v97, v114, v116);
                  if (v117)
                  {
                    if (v117 < 0)
                      goto LABEL_243;
                  }
                  else
                  {
                    v118 = (unint64_t)v98 >= v115;
                    if (v98 == (void *)v115)
                      v118 = (unint64_t)v402 >= *(_QWORD *)(i + 24);
                    if (!v118)
                      goto LABEL_243;
                  }
                }
              }
            }
            for (i = a1 + 40; i < (unint64_t)v398; i += 40)
            {
              v106 = *(char *)(i + 23);
              if (v106 >= 0)
                v107 = (const void *)i;
              else
                v107 = *(const void **)i;
              if (v106 >= 0)
                v108 = *(unsigned __int8 *)(i + 23);
              else
                v108 = *(_QWORD *)(i + 8);
              if (v108 >= (unint64_t)v98)
                v109 = (size_t)v98;
              else
                v109 = v108;
              v110 = memcmp(v97, v107, v109);
              if (v110)
              {
                if (v110 < 0)
                  break;
              }
              else
              {
                v111 = (unint64_t)v98 >= v108;
                if (v98 == (void *)v108)
                  v111 = (unint64_t)v402 >= *(_QWORD *)(i + 24);
                if (!v111)
                  break;
              }
            }
LABEL_243:
            j = v398;
            if (i < (unint64_t)v398)
            {
              for (j = v393; ; v101 = j[1])
              {
                if ((v99 & 0x80u) == 0)
                  v121 = j;
                else
                  v121 = v100;
                if ((v99 & 0x80u) != 0)
                  v99 = (size_t)v101;
                if (v99 >= (unint64_t)v98)
                  v122 = (size_t)v98;
                else
                  v122 = v99;
                v123 = memcmp(v97, v121, v122);
                if (v123)
                {
                  if ((v123 & 0x80000000) == 0)
                    break;
                }
                else
                {
                  v124 = (unint64_t)v98 >= v99;
                  if (v98 == (void *)v99)
                    v124 = (unint64_t)v402 >= (unint64_t)j[3];
                  if (v124)
                    break;
                }
                v120 = (const void **)*(j - 5);
                j -= 5;
                v100 = v120;
                v99 = *((unsigned __int8 *)j + 23);
              }
            }
            if (i < (unint64_t)j)
            {
              do
              {
                v139 = *(_OWORD *)i;
                v410 = *(const void **)(i + 16);
                v409 = v139;
                v140 = *(_OWORD *)j;
                *(_QWORD *)(i + 16) = j[2];
                *(_OWORD *)i = v140;
                v141 = v409;
                j[2] = v410;
                *(_OWORD *)j = v141;
                v142 = *(_OWORD *)(i + 24);
                *(_QWORD *)(i + 24) = 0;
                *(_QWORD *)(i + 32) = 0;
                v143 = *(_OWORD *)(j + 3);
                j[3] = 0;
                j[4] = 0;
                v144 = *(std::__shared_weak_count **)(i + 32);
                *(_OWORD *)(i + 24) = v143;
                if (v144)
                {
                  v145 = (unint64_t *)&v144->__shared_owners_;
                  do
                    v146 = __ldaxr(v145);
                  while (__stlxr(v146 - 1, v145));
                  if (!v146)
                  {
                    v403 = v142;
                    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                    std::__shared_weak_count::__release_weak(v144);
                    v142 = v403;
                  }
                }
                v147 = (std::__shared_weak_count *)j[4];
                *(_OWORD *)(j + 3) = v142;
                if (v147)
                {
                  v148 = (unint64_t *)&v147->__shared_owners_;
                  do
                    v149 = __ldaxr(v148);
                  while (__stlxr(v149 - 1, v148));
                  if (!v149)
                  {
                    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                    std::__shared_weak_count::__release_weak(v147);
                  }
                }
                if (SHIBYTE(v407) >= 0)
                  v150 = __p;
                else
                  v150 = (void **)__p[0];
                if (SHIBYTE(v407) >= 0)
                  v151 = (void *)HIBYTE(v407);
                else
                  v151 = __p[1];
                v152 = v408;
                do
                {
                  while (1)
                  {
                    while (1)
                    {
                      i += 40;
                      v153 = *(char *)(i + 23);
                      v154 = v153 >= 0 ? (const void *)i : *(const void **)i;
                      v155 = v153 >= 0 ? (void *)*(unsigned __int8 *)(i + 23) : *(void **)(i + 8);
                      v156 = (size_t)(v155 >= v151 ? v151 : v155);
                      v157 = memcmp(v150, v154, v156);
                      if (!v157)
                        break;
                      if (v157 < 0)
                        goto LABEL_320;
                    }
                    if (v151 != v155)
                      break;
                    if (v152 < *(_QWORD *)(i + 24))
                      goto LABEL_320;
                  }
                }
                while (v151 >= v155);
                do
                {
                  while (1)
                  {
LABEL_320:
                    while (1)
                    {
                      j -= 5;
                      v158 = *((char *)j + 23);
                      v159 = v158 >= 0 ? j : (const void **)*j;
                      v160 = v158 >= 0 ? (void *)*((unsigned __int8 *)j + 23) : (void *)j[1];
                      v161 = (size_t)(v160 >= v151 ? v151 : v160);
                      v162 = memcmp(v150, v159, v161);
                      if (!v162)
                        break;
                      if ((v162 & 0x80000000) == 0)
                        goto LABEL_285;
                    }
                    if (v151 != v160)
                      break;
                    if (v152 >= (unint64_t)j[3])
                      goto LABEL_285;
                  }
                }
                while (v151 < v160);
LABEL_285:
                a2 = v398;
              }
              while (i < (unint64_t)j);
            }
            else
            {
              a2 = v398;
            }
            v125 = (void **)(i - 40);
            if (i - 40 != a1)
            {
              if (*(char *)(a1 + 23) < 0)
                operator delete(*(void **)a1);
              v126 = *(_OWORD *)v125;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(i - 24);
              *(_OWORD *)a1 = v126;
              *(_BYTE *)(i - 17) = 0;
              *(_BYTE *)(i - 40) = 0;
              v127 = *(_OWORD *)(i - 16);
              *(_QWORD *)(i - 16) = 0;
              *(_QWORD *)(i - 8) = 0;
              v128 = *(std::__shared_weak_count **)(a1 + 32);
              *(_OWORD *)(a1 + 24) = v127;
              if (v128)
              {
                v129 = (unint64_t *)&v128->__shared_owners_;
                do
                  v130 = __ldaxr(v129);
                while (__stlxr(v130 - 1, v129));
                if (!v130)
                {
                  ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                  std::__shared_weak_count::__release_weak(v128);
                }
              }
            }
            if (*(char *)(i - 17) < 0)
              operator delete(*v125);
            v131 = *(_OWORD *)__p;
            *(_QWORD *)(i - 24) = v407;
            *(_OWORD *)v125 = v131;
            HIBYTE(v407) = 0;
            LOBYTE(__p[0]) = 0;
            v132 = v408;
            v408 = 0uLL;
            v133 = *(std::__shared_weak_count **)(i - 8);
            *(_OWORD *)(i - 16) = v132;
            if (v133)
            {
              v134 = (unint64_t *)&v133->__shared_owners_;
              do
                v135 = __ldaxr(v134);
              while (__stlxr(v135 - 1, v134));
              if (!v135)
              {
                ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                std::__shared_weak_count::__release_weak(v133);
              }
            }
            v136 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
            if (*((_QWORD *)&v408 + 1))
            {
              v137 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
              do
                v138 = __ldaxr(v137);
              while (__stlxr(v138 - 1, v137));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                std::__shared_weak_count::__release_weak(v136);
              }
            }
            if (SHIBYTE(v407) < 0)
              operator delete(__p[0]);
            a4 = 0;
            continue;
          }
          if (v25 >= v28)
            goto LABEL_186;
LABEL_43:
          v31 = 0;
          v32 = *(_OWORD *)a1;
          v407 = *(const void **)(a1 + 16);
          *(_OWORD *)__p = v32;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v33 = *(_OWORD *)(a1 + 24);
          v408 = v33;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          if (SHIBYTE(v407) >= 0)
            v34 = __p;
          else
            v34 = (void **)__p[0];
          if (SHIBYTE(v407) >= 0)
            v35 = (void *)HIBYTE(v407);
          else
            v35 = __p[1];
          v36 = v33;
          while (2)
          {
            v37 = *(char *)(a1 + v31 + 63);
            if (v37 >= 0)
              v38 = (const void *)(a1 + v31 + 40);
            else
              v38 = *(const void **)(a1 + v31 + 40);
            if (v37 >= 0)
              v39 = *(unsigned __int8 *)(a1 + v31 + 63);
            else
              v39 = *(_QWORD *)(a1 + v31 + 48);
            if ((unint64_t)v35 >= v39)
              v40 = v39;
            else
              v40 = (size_t)v35;
            v41 = memcmp(v38, v34, v40);
            if (v41)
            {
              if ((v41 & 0x80000000) == 0)
                break;
              goto LABEL_51;
            }
            v42 = v39 >= (unint64_t)v35;
            if ((void *)v39 == v35)
              v42 = *(_QWORD *)(a1 + v31 + 64) >= v36;
            if (!v42)
            {
LABEL_51:
              v31 += 40;
              continue;
            }
            break;
          }
          v43 = a1 + v31 + 40;
          k = v393;
          if (v31)
          {
            while (1)
            {
              v45 = *((char *)k + 23);
              if (v45 >= 0)
                v46 = k;
              else
                v46 = *k;
              if (v45 >= 0)
                v47 = *((unsigned __int8 *)k + 23);
              else
                v47 = (size_t)k[1];
              if ((unint64_t)v35 >= v47)
                v48 = v47;
              else
                v48 = (size_t)v35;
              v49 = memcmp(v46, v34, v48);
              if (v49)
              {
                if (v49 < 0)
                  goto LABEL_106;
              }
              else
              {
                v50 = v47 >= (unint64_t)v35;
                if ((void *)v47 == v35)
                  v50 = (unint64_t)k[3] >= v36;
                if (!v50)
                  goto LABEL_106;
              }
              k -= 5;
            }
          }
          k = v398;
          if (v43 < (unint64_t)v398)
          {
            for (k = v393; ; k -= 5)
            {
              v51 = *((char *)k + 23);
              if (v51 >= 0)
                v52 = k;
              else
                v52 = *k;
              if (v51 >= 0)
                v53 = *((unsigned __int8 *)k + 23);
              else
                v53 = (size_t)k[1];
              if ((unint64_t)v35 >= v53)
                v54 = v53;
              else
                v54 = (size_t)v35;
              v55 = memcmp(v52, v34, v54);
              if (v55)
              {
                if (v43 >= (unint64_t)k || v55 < 0)
                  break;
              }
              else if ((void *)v53 == v35)
              {
                if (v43 >= (unint64_t)k || (unint64_t)k[3] < v36)
                  break;
              }
              else if (v43 >= (unint64_t)k || v53 < (unint64_t)v35)
              {
                break;
              }
            }
          }
LABEL_106:
          i = v43;
          if (v43 < (unint64_t)k)
          {
            v56 = (unint64_t)k;
            do
            {
              v57 = *(_OWORD *)i;
              v410 = *(const void **)(i + 16);
              v409 = v57;
              v58 = *(_OWORD *)v56;
              *(_QWORD *)(i + 16) = *(_QWORD *)(v56 + 16);
              *(_OWORD *)i = v58;
              v59 = v409;
              *(_QWORD *)(v56 + 16) = v410;
              *(_OWORD *)v56 = v59;
              v60 = *(_OWORD *)(i + 24);
              *(_QWORD *)(i + 24) = 0;
              *(_QWORD *)(i + 32) = 0;
              v61 = *(_OWORD *)(v56 + 24);
              *(_QWORD *)(v56 + 24) = 0;
              *(_QWORD *)(v56 + 32) = 0;
              v62 = *(std::__shared_weak_count **)(i + 32);
              *(_OWORD *)(i + 24) = v61;
              if (!v62)
                goto LABEL_113;
              v63 = (unint64_t *)&v62->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                v401 = v60;
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
                v65 = *(std::__shared_weak_count **)(v56 + 32);
                *(_OWORD *)(v56 + 24) = v401;
                if (v65)
                {
LABEL_114:
                  v66 = (unint64_t *)&v65->__shared_owners_;
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                }
              }
              else
              {
LABEL_113:
                v65 = *(std::__shared_weak_count **)(v56 + 32);
                *(_OWORD *)(v56 + 24) = v60;
                if (v65)
                  goto LABEL_114;
              }
              if (SHIBYTE(v407) >= 0)
                v68 = __p;
              else
                v68 = (void **)__p[0];
              if (SHIBYTE(v407) >= 0)
                v69 = (void *)HIBYTE(v407);
              else
                v69 = __p[1];
              v70 = v408;
              do
              {
                while (1)
                {
                  while (1)
                  {
                    i += 40;
                    v71 = *(char *)(i + 23);
                    v72 = v71 >= 0 ? (const void *)i : *(const void **)i;
                    v73 = v71 >= 0 ? (void *)*(unsigned __int8 *)(i + 23) : *(void **)(i + 8);
                    v74 = (size_t)(v69 >= v73 ? v73 : v69);
                    v75 = memcmp(v72, v68, v74);
                    if (!v75)
                      break;
                    if ((v75 & 0x80000000) == 0)
                      goto LABEL_143;
                  }
                  if (v73 != v69)
                    break;
                  if (*(_QWORD *)(i + 24) >= v70)
                    goto LABEL_143;
                }
              }
              while (v73 < v69);
              do
              {
                while (1)
                {
LABEL_143:
                  while (1)
                  {
                    v56 -= 40;
                    v76 = *(char *)(v56 + 23);
                    v77 = v76 >= 0 ? (const void *)v56 : *(const void **)v56;
                    v78 = v76 >= 0 ? (void *)*(unsigned __int8 *)(v56 + 23) : *(void **)(v56 + 8);
                    v79 = (size_t)(v69 >= v78 ? v78 : v69);
                    v80 = memcmp(v77, v68, v79);
                    if (!v80)
                      break;
                    if (v80 < 0)
                      goto LABEL_108;
                  }
                  if (v78 != v69)
                    break;
                  if (*(_QWORD *)(v56 + 24) < v70)
                    goto LABEL_108;
                }
              }
              while (v78 >= v69);
LABEL_108:
              ;
            }
            while (i < v56);
          }
          v81 = (void **)(i - 40);
          if (i - 40 == a1)
            goto LABEL_165;
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v82 = *(_OWORD *)v81;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(i - 24);
          *(_OWORD *)a1 = v82;
          *(_BYTE *)(i - 17) = 0;
          *(_BYTE *)(i - 40) = 0;
          v83 = *(_OWORD *)(i - 16);
          *(_QWORD *)(i - 16) = 0;
          *(_QWORD *)(i - 8) = 0;
          v84 = *(std::__shared_weak_count **)(a1 + 32);
          *(_OWORD *)(a1 + 24) = v83;
          if (!v84)
            goto LABEL_165;
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (v86)
          {
LABEL_165:
            if (*(char *)(i - 17) < 0)
              goto LABEL_166;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
            if (*(char *)(i - 17) < 0)
LABEL_166:
              operator delete(*v81);
          }
          v87 = *(_OWORD *)__p;
          *(_QWORD *)(i - 24) = v407;
          *(_OWORD *)v81 = v87;
          HIBYTE(v407) = 0;
          LOBYTE(__p[0]) = 0;
          v88 = v408;
          v408 = 0uLL;
          v89 = *(std::__shared_weak_count **)(i - 8);
          *(_OWORD *)(i - 16) = v88;
          if (!v89)
            goto LABEL_171;
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
            v92 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
            if (*((_QWORD *)&v408 + 1))
            {
LABEL_172:
              v93 = (unint64_t *)&v92->__shared_owners_;
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
          }
          else
          {
LABEL_171:
            v92 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
            if (*((_QWORD *)&v408 + 1))
              goto LABEL_172;
          }
          if (SHIBYTE(v407) < 0)
            operator delete(__p[0]);
          v42 = v43 >= (unint64_t)k;
          a2 = v398;
          if (!v42)
            goto LABEL_183;
          v95 = sub_20B4F2ED4(a1, (const void **)(i - 40));
          if (!sub_20B4F2ED4(i, v398))
          {
            if (v95)
              continue;
LABEL_183:
            sub_20B4F0C20(a1, i - 40, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (const void **)(i - 40);
          if (v95)
            return;
          goto LABEL_2;
        }
        if ((const void **)a1 == a2)
          return;
        v209 = (v8 - 2) >> 1;
        v210 = v209;
        do
        {
          v211 = v210;
          if (v209 < v210)
            goto LABEL_438;
          v396 = v210;
          v212 = (2 * v210) | 1;
          v213 = a1 + 40 * v212;
          v214 = 2 * v210 + 2;
          if (v214 >= (uint64_t)v8)
          {
            v223 = v210;
            goto LABEL_464;
          }
          v215 = *(char *)(v213 + 23);
          if (v215 >= 0)
            v216 = (const void *)(a1 + 40 * v212);
          else
            v216 = *(const void **)v213;
          if (v215 >= 0)
            v217 = *(unsigned __int8 *)(v213 + 23);
          else
            v217 = *(_QWORD *)(v213 + 8);
          v218 = *(char *)(v213 + 63);
          if (v218 >= 0)
            v219 = (const void *)(v213 + 40);
          else
            v219 = *(const void **)(v213 + 40);
          if (v218 >= 0)
            v220 = *(unsigned __int8 *)(v213 + 63);
          else
            v220 = *(_QWORD *)(v213 + 48);
          if (v220 >= v217)
            v221 = v217;
          else
            v221 = v220;
          v222 = memcmp(v216, v219, v221);
          if (v222)
          {
            v209 = (v8 - 2) >> 1;
            v223 = v396;
            if ((v222 & 0x80000000) == 0)
              goto LABEL_464;
LABEL_463:
            v213 += 40;
            v212 = v214;
            goto LABEL_464;
          }
          v224 = v217 >= v220;
          if (v217 == v220)
            v224 = *(_QWORD *)(v213 + 24) >= *(_QWORD *)(v213 + 64);
          v209 = (v8 - 2) >> 1;
          v223 = v396;
          if (!v224)
            goto LABEL_463;
LABEL_464:
          v225 = (const void **)(a1 + 40 * v223);
          v226 = *(char *)(v213 + 23);
          if (v226 >= 0)
            v227 = (const void *)v213;
          else
            v227 = *(const void **)v213;
          if (v226 >= 0)
            v228 = *(unsigned __int8 *)(v213 + 23);
          else
            v228 = *(_QWORD *)(v213 + 8);
          v229 = *((char *)v225 + 23);
          if (v229 >= 0)
            v230 = v225;
          else
            v230 = *v225;
          if (v229 >= 0)
            v231 = *((unsigned __int8 *)v225 + 23);
          else
            v231 = (size_t)v225[1];
          if (v231 >= v228)
            v232 = v228;
          else
            v232 = v231;
          v233 = memcmp(v227, v230, v232);
          if (v233)
          {
            v211 = v396;
            a2 = v398;
            if (v233 < 0)
              goto LABEL_438;
LABEL_486:
            v235 = 0;
            v236 = *(_OWORD *)v225;
            v407 = v225[2];
            *(_OWORD *)__p = v236;
            v225[1] = 0;
            v225[2] = 0;
            *v225 = 0;
            v408 = *(_OWORD *)(v225 + 3);
            v225[3] = 0;
            v225[4] = 0;
            while (1)
            {
              if (v235 < 0)
                operator delete((void *)*v225);
              v245 = *(_OWORD *)v213;
              v225[2] = *(const void **)(v213 + 16);
              *(_OWORD *)v225 = v245;
              *(_BYTE *)(v213 + 23) = 0;
              *(_BYTE *)v213 = 0;
              v246 = *(_OWORD *)(v213 + 24);
              *(_QWORD *)(v213 + 24) = 0;
              *(_QWORD *)(v213 + 32) = 0;
              v247 = (std::__shared_weak_count *)v225[4];
              *(_OWORD *)(v225 + 3) = v246;
              if (v247)
              {
                v248 = (unint64_t *)&v247->__shared_owners_;
                do
                  v249 = __ldaxr(v248);
                while (__stlxr(v249 - 1, v248));
                if (!v249)
                {
                  ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                  std::__shared_weak_count::__release_weak(v247);
                }
              }
              if (v209 < v212)
              {
LABEL_542:
                if (*(char *)(v213 + 23) < 0)
                  operator delete(*(void **)v213);
                v261 = *(_OWORD *)__p;
                *(_QWORD *)(v213 + 16) = v407;
                *(_OWORD *)v213 = v261;
                HIBYTE(v407) = 0;
                LOBYTE(__p[0]) = 0;
                v262 = v408;
                v408 = 0uLL;
                v263 = *(std::__shared_weak_count **)(v213 + 32);
                *(_OWORD *)(v213 + 24) = v262;
                if (v263)
                {
                  v264 = (unint64_t *)&v263->__shared_owners_;
                  do
                    v265 = __ldaxr(v264);
                  while (__stlxr(v265 - 1, v264));
                  if (!v265)
                  {
                    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                    std::__shared_weak_count::__release_weak(v263);
                  }
                }
                v266 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
                if (*((_QWORD *)&v408 + 1))
                {
                  v267 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
                  do
                    v268 = __ldaxr(v267);
                  while (__stlxr(v268 - 1, v267));
                  if (!v268)
                  {
                    ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                    std::__shared_weak_count::__release_weak(v266);
                  }
                }
                if (SHIBYTE(v407) < 0)
                  operator delete(__p[0]);
                v211 = v396;
                a2 = v398;
                goto LABEL_438;
              }
              v250 = 2 * v212;
              v212 = (2 * v212) | 1;
              v237 = a1 + 40 * v212;
              v251 = v250 + 2;
              if (v250 + 2 < (uint64_t)v8)
              {
                v252 = *(char *)(v237 + 23);
                if (v252 >= 0)
                  v253 = (const void *)(a1 + 40 * v212);
                else
                  v253 = *(const void **)v237;
                if (v252 >= 0)
                  v254 = *(unsigned __int8 *)(v237 + 23);
                else
                  v254 = *(_QWORD *)(v237 + 8);
                v255 = *(char *)(v237 + 63);
                if (v255 >= 0)
                  v256 = (const void *)(v237 + 40);
                else
                  v256 = *(const void **)(v237 + 40);
                if (v255 >= 0)
                  v257 = *(unsigned __int8 *)(v237 + 63);
                else
                  v257 = *(_QWORD *)(v237 + 48);
                if (v257 >= v254)
                  v258 = v254;
                else
                  v258 = v257;
                v259 = memcmp(v253, v256, v258);
                if (v259)
                {
                  v209 = (v8 - 2) >> 1;
                  if (v259 < 0)
                    goto LABEL_487;
                }
                else
                {
                  v260 = v254 >= v257;
                  if (v254 == v257)
                    v260 = *(_QWORD *)(v237 + 24) >= *(_QWORD *)(v237 + 64);
                  v209 = (v8 - 2) >> 1;
                  if (!v260)
                  {
LABEL_487:
                    v237 += 40;
                    v212 = v251;
                  }
                }
              }
              v238 = *(char *)(v237 + 23);
              if (v238 >= 0)
                v239 = (const void *)v237;
              else
                v239 = *(const void **)v237;
              if (v238 >= 0)
                v240 = *(unsigned __int8 *)(v237 + 23);
              else
                v240 = *(_QWORD *)(v237 + 8);
              if (SHIBYTE(v407) >= 0)
                v241 = __p;
              else
                v241 = (void **)__p[0];
              if (SHIBYTE(v407) >= 0)
                v242 = (void *)HIBYTE(v407);
              else
                v242 = __p[1];
              if ((unint64_t)v242 >= v240)
                v243 = v240;
              else
                v243 = (size_t)v242;
              v244 = memcmp(v239, v241, v243);
              if (v244)
              {
                if (v244 < 0)
                  goto LABEL_542;
              }
              else if ((void *)v240 == v242)
              {
                if (*(_QWORD *)(v237 + 24) < (unint64_t)v408)
                  goto LABEL_542;
              }
              else if (v240 < (unint64_t)v242)
              {
                goto LABEL_542;
              }
              v235 = *(_BYTE *)(v213 + 23);
              v225 = (const void **)v213;
              v213 = v237;
            }
          }
          v234 = v228 >= v231;
          if (v228 == v231)
            v234 = *(_QWORD *)(v213 + 24) >= (unint64_t)v225[3];
          v211 = v396;
          a2 = v398;
          if (v234)
            goto LABEL_486;
LABEL_438:
          v210 = v211 - 1;
        }
        while (v211);
        v269 = v7 / 0x28uLL;
        while (2)
        {
          if (v269 < 2)
            goto LABEL_558;
          v271 = 0;
          v272 = *(void **)a1;
          *(_QWORD *)&v409 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)((char *)&v409 + 7) = *(_QWORD *)(a1 + 15);
          v404 = *(_BYTE *)(a1 + 23);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v397 = *(const void **)(a1 + 24);
          v399 = a2;
          v392 = v272;
          v394 = *(const void **)(a1 + 32);
          v273 = a1;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          while (2)
          {
            v274 = v273;
            v273 += 40 * v271 + 40;
            v275 = 2 * v271;
            v271 = (2 * v271) | 1;
            v276 = v275 + 2;
            if (v275 + 2 < v269)
            {
              v277 = *(char *)(v273 + 23);
              if (v277 >= 0)
                v278 = (const void *)v273;
              else
                v278 = *(const void **)v273;
              if (v277 >= 0)
                v279 = *(unsigned __int8 *)(v273 + 23);
              else
                v279 = *(_QWORD *)(v273 + 8);
              v280 = *(char *)(v273 + 63);
              if (v280 >= 0)
                v281 = (const void *)(v273 + 40);
              else
                v281 = *(const void **)(v273 + 40);
              if (v280 >= 0)
                v282 = *(unsigned __int8 *)(v273 + 63);
              else
                v282 = *(_QWORD *)(v273 + 48);
              if (v282 >= v279)
                v283 = v279;
              else
                v283 = v282;
              v284 = memcmp(v278, v281, v283);
              if (v284)
              {
                if (v284 < 0)
                  goto LABEL_581;
              }
              else
              {
                v291 = v279 >= v282;
                if (v279 == v282)
                  v291 = *(_QWORD *)(v273 + 24) >= *(_QWORD *)(v273 + 64);
                if (!v291)
                {
LABEL_581:
                  v273 += 40;
                  v271 = v276;
                }
              }
            }
            if (*(char *)(v274 + 23) < 0)
              operator delete(*(void **)v274);
            v285 = *(_OWORD *)v273;
            *(_QWORD *)(v274 + 16) = *(_QWORD *)(v273 + 16);
            *(_OWORD *)v274 = v285;
            *(_BYTE *)(v273 + 23) = 0;
            *(_BYTE *)v273 = 0;
            v286 = (_QWORD *)(v273 + 24);
            v287 = *(_OWORD *)(v273 + 24);
            *(_QWORD *)(v273 + 24) = 0;
            *(_QWORD *)(v273 + 32) = 0;
            v288 = *(std::__shared_weak_count **)(v274 + 32);
            *(_OWORD *)(v274 + 24) = v287;
            if (v288)
            {
              v289 = (unint64_t *)&v288->__shared_owners_;
              do
                v290 = __ldaxr(v289);
              while (__stlxr(v290 - 1, v289));
              if (!v290)
              {
                ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                std::__shared_weak_count::__release_weak(v288);
              }
            }
            if (v271 <= (uint64_t)((unint64_t)(v269 - 2) >> 1))
              continue;
            break;
          }
          v292 = (void **)(v399 - 5);
          v293 = *(char *)(v273 + 23);
          if ((const void **)v273 == v399 - 5)
          {
            if (v293 < 0)
              operator delete(*(void **)v273);
            *(_QWORD *)v273 = v392;
            v316 = *(_QWORD *)((char *)&v409 + 7);
            *(_QWORD *)(v273 + 8) = v409;
            *(_QWORD *)(v273 + 15) = v316;
            *(_BYTE *)(v273 + 23) = v404;
            v317 = *(std::__shared_weak_count **)(v273 + 32);
            *(_QWORD *)(v273 + 24) = v397;
            *(_QWORD *)(v273 + 32) = v394;
            if (v317)
            {
              v318 = (unint64_t *)&v317->__shared_owners_;
              do
                v319 = __ldaxr(v318);
              while (__stlxr(v319 - 1, v318));
              if (!v319)
              {
                ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                std::__shared_weak_count::__release_weak(v317);
              }
            }
          }
          else
          {
            if (v293 < 0)
              operator delete(*(void **)v273);
            v294 = *(_OWORD *)v292;
            *(_QWORD *)(v273 + 16) = *(v399 - 3);
            *(_OWORD *)v273 = v294;
            *((_BYTE *)v399 - 17) = 0;
            *((_BYTE *)v399 - 40) = 0;
            v295 = *((_OWORD *)v399 - 1);
            *(v399 - 2) = 0;
            *(v399 - 1) = 0;
            v296 = *(std::__shared_weak_count **)(v273 + 32);
            *(_OWORD *)(v273 + 24) = v295;
            if (!v296)
              goto LABEL_601;
            v297 = (unint64_t *)&v296->__shared_owners_;
            do
              v298 = __ldaxr(v297);
            while (__stlxr(v298 - 1, v297));
            if (!v298)
            {
              ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
              std::__shared_weak_count::__release_weak(v296);
              v299 = v399;
              if (*((char *)v399 - 17) < 0)
LABEL_602:
                operator delete(*v292);
            }
            else
            {
LABEL_601:
              v299 = v399;
              if (*((char *)v399 - 17) < 0)
                goto LABEL_602;
            }
            *(v299 - 5) = v392;
            v300 = (const void *)v409;
            *(const void **)((char *)v299 - 25) = *(const void **)((char *)&v409 + 7);
            *(v299 - 4) = v300;
            *((_BYTE *)v299 - 17) = v404;
            v301 = v299;
            v302 = (std::__shared_weak_count *)*(v299 - 1);
            *(v301 - 2) = v397;
            *(v301 - 1) = v394;
            if (!v302)
              goto LABEL_607;
            v303 = (unint64_t *)&v302->__shared_owners_;
            do
              v304 = __ldaxr(v303);
            while (__stlxr(v304 - 1, v303));
            if (!v304)
            {
              ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
              std::__shared_weak_count::__release_weak(v302);
              v305 = v273 + 40 - a1;
              if (v305 < 41)
                goto LABEL_557;
LABEL_608:
              v306 = (v305 / 0x28uLL - 2) >> 1;
              v307 = a1 + 40 * v306;
              v308 = *(char *)(v307 + 23);
              if (v308 >= 0)
                v309 = (const void *)(a1 + 40 * v306);
              else
                v309 = *(const void **)v307;
              if (v308 >= 0)
                v310 = *(unsigned __int8 *)(v307 + 23);
              else
                v310 = *(_QWORD *)(v307 + 8);
              v311 = *(char *)(v273 + 23);
              if (v311 >= 0)
                v312 = (const void *)v273;
              else
                v312 = *(const void **)v273;
              if (v311 >= 0)
                v313 = *(unsigned __int8 *)(v273 + 23);
              else
                v313 = *(_QWORD *)(v273 + 8);
              if (v313 >= v310)
                v314 = v310;
              else
                v314 = v313;
              v315 = memcmp(v309, v312, v314);
              if (v315)
              {
                if ((v315 & 0x80000000) == 0)
                  goto LABEL_557;
              }
              else
              {
                v320 = v310 >= v313;
                if (v310 == v313)
                  v320 = *(_QWORD *)(v307 + 24) >= *v286;
                if (v320)
                  goto LABEL_557;
              }
              v321 = *(_OWORD *)v273;
              v407 = *(const void **)(v273 + 16);
              *(_OWORD *)__p = v321;
              *(_QWORD *)(v273 + 8) = 0;
              *(_QWORD *)(v273 + 16) = 0;
              *(_QWORD *)v273 = 0;
              v408 = *(_OWORD *)(v273 + 24);
              *v286 = 0;
              *(_QWORD *)(v273 + 32) = 0;
              while (1)
              {
                v322 = v307;
                if (*(char *)(v273 + 23) < 0)
                  operator delete(*(void **)v273);
                v323 = *(_OWORD *)v307;
                *(_QWORD *)(v273 + 16) = *(_QWORD *)(v307 + 16);
                *(_OWORD *)v273 = v323;
                *(_BYTE *)(v307 + 23) = 0;
                *(_BYTE *)v307 = 0;
                v324 = *(_OWORD *)(v307 + 24);
                *(_QWORD *)(v307 + 24) = 0;
                *(_QWORD *)(v307 + 32) = 0;
                v325 = *(std::__shared_weak_count **)(v273 + 32);
                *(_OWORD *)(v273 + 24) = v324;
                if (v325)
                {
                  v326 = (unint64_t *)&v325->__shared_owners_;
                  do
                    v327 = __ldaxr(v326);
                  while (__stlxr(v327 - 1, v326));
                  if (!v327)
                  {
                    ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                    std::__shared_weak_count::__release_weak(v325);
                  }
                }
                if (!v306)
                  break;
                v306 = (v306 - 1) >> 1;
                v307 = a1 + 40 * v306;
                v328 = *(char *)(v307 + 23);
                if (v328 >= 0)
                  v329 = (const void *)(a1 + 40 * v306);
                else
                  v329 = *(const void **)v307;
                if (v328 >= 0)
                  v330 = *(unsigned __int8 *)(v307 + 23);
                else
                  v330 = *(_QWORD *)(v307 + 8);
                if (SHIBYTE(v407) >= 0)
                  v331 = __p;
                else
                  v331 = (void **)__p[0];
                if (SHIBYTE(v407) >= 0)
                  v332 = (void *)HIBYTE(v407);
                else
                  v332 = __p[1];
                if ((unint64_t)v332 >= v330)
                  v333 = v330;
                else
                  v333 = (size_t)v332;
                v334 = memcmp(v329, v331, v333);
                if (v334)
                {
                  v273 = v322;
                  if ((v334 & 0x80000000) == 0)
                    break;
                }
                else
                {
                  v335 = v330 >= (unint64_t)v332;
                  if ((void *)v330 == v332)
                  {
                    v273 = v322;
                    if (*(_QWORD *)(v307 + 24) >= (unint64_t)v408)
                      break;
                  }
                  else
                  {
                    v273 = v322;
                    if (v335)
                      break;
                  }
                }
              }
              if (*(char *)(v322 + 23) < 0)
                operator delete(*(void **)v322);
              v336 = *(_OWORD *)__p;
              *(_QWORD *)(v322 + 16) = v407;
              *(_OWORD *)v322 = v336;
              HIBYTE(v407) = 0;
              LOBYTE(__p[0]) = 0;
              v337 = v408;
              v408 = 0uLL;
              v338 = *(std::__shared_weak_count **)(v322 + 32);
              *(_OWORD *)(v322 + 24) = v337;
              if (v338)
              {
                v339 = (unint64_t *)&v338->__shared_owners_;
                do
                  v340 = __ldaxr(v339);
                while (__stlxr(v340 - 1, v339));
                if (!v340)
                {
                  ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
                  std::__shared_weak_count::__release_weak(v338);
                }
              }
              v341 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
              if (*((_QWORD *)&v408 + 1))
              {
                v342 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
                do
                  v343 = __ldaxr(v342);
                while (__stlxr(v343 - 1, v342));
                if (!v343)
                {
                  ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
                  std::__shared_weak_count::__release_weak(v341);
                }
              }
              if (SHIBYTE(v407) < 0)
                operator delete(__p[0]);
            }
            else
            {
LABEL_607:
              v305 = v273 + 40 - a1;
              if (v305 >= 41)
                goto LABEL_608;
            }
          }
LABEL_557:
          a2 = v399;
LABEL_558:
          a2 -= 5;
          if ((unint64_t)v269-- > 2)
            continue;
          return;
        }
    }
  }
}

void sub_20B4F2960(const void **a1, const void **a2, const void **a3)
{
  int v6;
  const void *v7;
  size_t v8;
  int v9;
  const void *v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  const void *v20;
  size_t v21;
  size_t v22;
  int v23;
  const void *v24;
  __int128 v25;
  const void *v26;
  __int128 v27;
  _QWORD *v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  const void *v37;
  size_t v38;
  int v39;
  const void *v40;
  size_t v41;
  size_t v42;
  int v43;
  const void *v44;
  __int128 v45;
  const void *v46;
  _QWORD *v47;
  __int128 v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  const void *v57;
  size_t v58;
  int v59;
  const void *v60;
  size_t v61;
  size_t v62;
  int v63;
  const void *v64;
  __int128 v65;
  const void *v66;
  __int128 v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  const void *v75;
  __int128 v76;
  const void *v77;
  __int128 v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  const void *v84;
  __int128 v85;
  const void *v86;
  __int128 v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;

  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *a2;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = *((char *)a1 + 23);
  if (v9 >= 0)
    v10 = a1;
  else
    v10 = *a1;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a1 + 23);
  else
    v11 = (size_t)a1[1];
  if (v11 >= v8)
    v12 = v8;
  else
    v12 = v11;
  v13 = memcmp(v7, v10, v12);
  if (!v13)
  {
    if (v8 == v11)
    {
      if (a2[3] < a1[3])
        goto LABEL_37;
    }
    else if (v8 < v11)
    {
      goto LABEL_37;
    }
LABEL_18:
    v14 = *((char *)a3 + 23);
    if (v14 >= 0)
      v15 = a3;
    else
      v15 = *a3;
    if (v14 >= 0)
      v16 = *((unsigned __int8 *)a3 + 23);
    else
      v16 = (size_t)a3[1];
    if (v8 >= v16)
      v17 = v16;
    else
      v17 = v8;
    v18 = memcmp(v15, v7, v17);
    if (v18)
    {
      if ((v18 & 0x80000000) == 0)
        return;
    }
    else if (v16 == v8)
    {
      if (a3[3] >= a2[3])
        return;
    }
    else if (v16 >= v8)
    {
      return;
    }
    v44 = a2[2];
    v45 = *(_OWORD *)a2;
    v46 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v46;
    *(_OWORD *)a3 = v45;
    a3[2] = v44;
    v47 = a2 + 3;
    v48 = *(_OWORD *)(a2 + 3);
    a2[3] = 0;
    a2[4] = 0;
    v49 = *(_OWORD *)(a3 + 3);
    a3[3] = 0;
    a3[4] = 0;
    v50 = (std::__shared_weak_count *)a2[4];
    *(_OWORD *)(a2 + 3) = v49;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(p_shared_owners);
      while (__stlxr(v52 - 1, p_shared_owners));
      if (!v52)
      {
        v94 = v48;
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        v48 = v94;
      }
    }
    v53 = (std::__shared_weak_count *)a3[4];
    *(_OWORD *)(a3 + 3) = v48;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *((char *)a2 + 23);
    if (v56 >= 0)
      v57 = a2;
    else
      v57 = *a2;
    if (v56 >= 0)
      v58 = *((unsigned __int8 *)a2 + 23);
    else
      v58 = (size_t)a2[1];
    v59 = *((char *)a1 + 23);
    if (v59 >= 0)
      v60 = a1;
    else
      v60 = *a1;
    if (v59 >= 0)
      v61 = *((unsigned __int8 *)a1 + 23);
    else
      v61 = (size_t)a1[1];
    if (v61 >= v58)
      v62 = v58;
    else
      v62 = v61;
    v63 = memcmp(v57, v60, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0)
        return;
    }
    else if (v58 == v61)
    {
      if (*v47 >= (unint64_t)a1[3])
        return;
    }
    else if (v58 >= v61)
    {
      return;
    }
    v84 = a1[2];
    v85 = *(_OWORD *)a1;
    v86 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v86;
    *(_OWORD *)a2 = v85;
    a2[2] = v84;
    v87 = *(_OWORD *)(a1 + 3);
    a1[3] = 0;
    a1[4] = 0;
    v88 = *(_OWORD *)(a2 + 3);
    *v47 = 0;
    a2[4] = 0;
    v89 = (std::__shared_weak_count *)a1[4];
    *(_OWORD *)(a1 + 3) = v88;
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        v97 = v87;
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
        v87 = v97;
      }
    }
    v72 = (std::__shared_weak_count *)a2[4];
    *(_OWORD *)(a2 + 3) = v87;
    if (v72)
    {
      v92 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v92);
      while (__stlxr(v74 - 1, v92));
LABEL_143:
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
      return;
    }
    return;
  }
  if ((v13 & 0x80000000) == 0)
    goto LABEL_18;
LABEL_37:
  v19 = *((char *)a3 + 23);
  if (v19 >= 0)
    v20 = a3;
  else
    v20 = *a3;
  if (v19 >= 0)
    v21 = *((unsigned __int8 *)a3 + 23);
  else
    v21 = (size_t)a3[1];
  if (v8 >= v21)
    v22 = v21;
  else
    v22 = v8;
  v23 = memcmp(v20, v7, v22);
  if (!v23)
  {
    if (v21 == v8)
    {
      if (a3[3] >= a2[3])
        goto LABEL_48;
    }
    else if (v21 >= v8)
    {
      goto LABEL_48;
    }
LABEL_115:
    v64 = a1[2];
    v65 = *(_OWORD *)a1;
    v66 = a3[2];
    *(_OWORD *)a1 = *(_OWORD *)a3;
    a1[2] = v66;
    *(_OWORD *)a3 = v65;
    a3[2] = v64;
    v67 = *(_OWORD *)(a1 + 3);
    a1[3] = 0;
    a1[4] = 0;
    v68 = *(_OWORD *)(a3 + 3);
    a3[3] = 0;
    a3[4] = 0;
    v69 = (std::__shared_weak_count *)a1[4];
    *(_OWORD *)(a1 + 3) = v68;
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        v95 = v67;
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        v67 = v95;
      }
    }
    v72 = (std::__shared_weak_count *)a3[4];
    *(_OWORD *)(a3 + 3) = v67;
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      goto LABEL_143;
    }
    return;
  }
  if (v23 < 0)
    goto LABEL_115;
LABEL_48:
  v24 = a1[2];
  v25 = *(_OWORD *)a1;
  v26 = a2[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v26;
  *(_OWORD *)a2 = v25;
  a2[2] = v24;
  v27 = *(_OWORD *)(a1 + 3);
  a1[3] = 0;
  a1[4] = 0;
  v28 = a2 + 3;
  v29 = *(_OWORD *)(a2 + 3);
  a2[3] = 0;
  a2[4] = 0;
  v30 = (std::__shared_weak_count *)a1[4];
  *(_OWORD *)(a1 + 3) = v29;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      v93 = v27;
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v27 = v93;
    }
  }
  v33 = (std::__shared_weak_count *)a2[4];
  *(_OWORD *)(a2 + 3) = v27;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = *((char *)a3 + 23);
  if (v36 >= 0)
    v37 = a3;
  else
    v37 = *a3;
  if (v36 >= 0)
    v38 = *((unsigned __int8 *)a3 + 23);
  else
    v38 = (size_t)a3[1];
  v39 = *((char *)a2 + 23);
  if (v39 >= 0)
    v40 = a2;
  else
    v40 = *a2;
  if (v39 >= 0)
    v41 = *((unsigned __int8 *)a2 + 23);
  else
    v41 = (size_t)a2[1];
  if (v41 >= v38)
    v42 = v38;
  else
    v42 = v41;
  v43 = memcmp(v37, v40, v42);
  if (v43)
  {
    if ((v43 & 0x80000000) == 0)
      return;
  }
  else if (v38 == v41)
  {
    if ((unint64_t)a3[3] >= *v28)
      return;
  }
  else if (v38 >= v41)
  {
    return;
  }
  v75 = a2[2];
  v76 = *(_OWORD *)a2;
  v77 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v77;
  *(_OWORD *)a3 = v76;
  a3[2] = v75;
  v78 = *(_OWORD *)(a2 + 3);
  *v28 = 0;
  a2[4] = 0;
  v79 = *(_OWORD *)(a3 + 3);
  a3[3] = 0;
  a3[4] = 0;
  v80 = (std::__shared_weak_count *)a2[4];
  *(_OWORD *)(a2 + 3) = v79;
  if (v80)
  {
    v81 = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      v96 = v78;
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
      v78 = v96;
    }
  }
  v72 = (std::__shared_weak_count *)a3[4];
  *(_OWORD *)(a3 + 3) = v78;
  if (v72)
  {
    v83 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v83);
    while (__stlxr(v74 - 1, v83));
    goto LABEL_143;
  }
}

BOOL sub_20B4F2ED4(uint64_t a1, const void **a2)
{
  unint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  const void **v8;
  size_t v9;
  int v10;
  const void *v11;
  size_t v12;
  size_t v13;
  int v14;
  const void **v15;
  const void **v16;
  int v17;
  int v18;
  const void *v19;
  size_t v20;
  int v21;
  const void *v22;
  size_t v23;
  size_t v24;
  int v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void **v35;
  void *v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  BOOL v51;
  const void *v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  void *__p[2];
  const void *v65;
  __int128 v66;

  v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 5;
      v7 = *((char *)a2 - 17);
      if (v7 >= 0)
        v8 = a2 - 5;
      else
        v8 = (const void **)*(a2 - 5);
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a2 - 17);
      else
        v9 = (size_t)*(a2 - 4);
      v10 = *(char *)(a1 + 23);
      if (v10 >= 0)
        v11 = (const void *)a1;
      else
        v11 = *(const void **)a1;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a1 + 23);
      else
        v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= v9)
        v13 = v9;
      else
        v13 = v12;
      v14 = memcmp(v8, v11, v13);
      if (v14)
      {
        if ((v14 & 0x80000000) == 0)
          return 1;
        goto LABEL_99;
      }
      v51 = v9 >= v12;
      if (v9 == v12)
        v51 = (unint64_t)*(a2 - 2) >= *(_QWORD *)(a1 + 24);
      if (!v51)
      {
LABEL_99:
        v52 = *(const void **)(a1 + 16);
        v53 = *(_OWORD *)a1;
        v54 = (uint64_t)*(a2 - 3);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_QWORD *)(a1 + 16) = v54;
        *(_OWORD *)v6 = v53;
        *(a2 - 3) = v52;
        v55 = *(_OWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        v56 = *((_OWORD *)a2 - 1);
        *(a2 - 2) = 0;
        *(a2 - 1) = 0;
        v57 = *(std::__shared_weak_count **)(a1 + 32);
        *(_OWORD *)(a1 + 24) = v56;
        if (v57)
        {
          p_shared_owners = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(p_shared_owners);
          while (__stlxr(v59 - 1, p_shared_owners));
          if (!v59)
          {
            v63 = v55;
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
            v55 = v63;
          }
        }
        v60 = (std::__shared_weak_count *)*(a2 - 1);
        *((_OWORD *)a2 - 1) = v55;
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
      }
      return 1;
    case 3uLL:
      sub_20B4F2960((const void **)a1, (const void **)(a1 + 40), a2 - 5);
      return 1;
    case 4uLL:
      sub_20B4F336C((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), a2 - 5);
      return 1;
    case 5uLL:
      sub_20B4F36FC(a1, a1 + 40, a1 + 80, (__int128 *)(a1 + 120), a2 - 5);
      return 1;
    default:
      v15 = (const void **)(a1 + 80);
      sub_20B4F2960((const void **)a1, (const void **)(a1 + 40), (const void **)(a1 + 80));
      v16 = (const void **)(a1 + 120);
      if ((const void **)(a1 + 120) == a2)
        return 1;
      v17 = 0;
      while (2)
      {
        v18 = *((char *)v16 + 23);
        if (v18 >= 0)
          v19 = v16;
        else
          v19 = *v16;
        if (v18 >= 0)
          v20 = *((unsigned __int8 *)v16 + 23);
        else
          v20 = (size_t)v16[1];
        v21 = *((char *)v15 + 23);
        if (v21 >= 0)
          v22 = v15;
        else
          v22 = *v15;
        if (v21 >= 0)
          v23 = *((unsigned __int8 *)v15 + 23);
        else
          v23 = (size_t)v15[1];
        if (v23 >= v20)
          v24 = v20;
        else
          v24 = v23;
        v25 = memcmp(v19, v22, v24);
        if (v25)
        {
          if ((v25 & 0x80000000) == 0)
            goto LABEL_24;
        }
        else
        {
          v26 = v20 >= v23;
          if (v20 == v23)
            v26 = v16[3] >= v15[3];
          if (v26)
            goto LABEL_24;
        }
        v27 = 0;
        *(_OWORD *)__p = *(_OWORD *)v16;
        v65 = v16[2];
        *v16 = 0;
        v16[1] = 0;
        v66 = *(_OWORD *)(v16 + 3);
        v16[2] = 0;
        v16[3] = 0;
        v28 = (uint64_t)v16;
        v16[4] = 0;
        while (1)
        {
          v29 = (uint64_t)v15;
          if (v27 < 0)
            operator delete(*(void **)v28);
          *(_OWORD *)v28 = *(_OWORD *)v15;
          *(_QWORD *)(v28 + 16) = v15[2];
          *((_BYTE *)v15 + 23) = 0;
          *(_BYTE *)v15 = 0;
          v30 = v15 + 3;
          v31 = *(_OWORD *)(v15 + 3);
          v15[4] = 0;
          v15[3] = 0;
          v32 = *(std::__shared_weak_count **)(v28 + 32);
          *(_OWORD *)(v28 + 24) = v31;
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          if (v29 == a1)
            break;
          v15 = (const void **)(v29 - 40);
          if (SHIBYTE(v65) >= 0)
            v35 = __p;
          else
            v35 = (void **)__p[0];
          if (SHIBYTE(v65) >= 0)
            v36 = (void *)HIBYTE(v65);
          else
            v36 = __p[1];
          v37 = *(char *)(v29 - 17);
          if (v37 >= 0)
            v38 = (const void *)(v29 - 40);
          else
            v38 = *(const void **)(v29 - 40);
          if (v37 >= 0)
            v39 = *(unsigned __int8 *)(v29 - 17);
          else
            v39 = *(_QWORD *)(v29 - 32);
          if (v39 >= (unint64_t)v36)
            v40 = (size_t)v36;
          else
            v40 = v39;
          v41 = memcmp(v35, v38, v40);
          if (v41)
          {
            if ((v41 & 0x80000000) == 0)
              goto LABEL_78;
          }
          else
          {
            v42 = (unint64_t)v36 >= v39;
            if (v36 == (void *)v39)
              v42 = (unint64_t)v66 >= *(_QWORD *)(v29 - 16);
            if (v42)
              goto LABEL_78;
          }
          v27 = *(_BYTE *)(v29 + 23);
          v28 = v29;
        }
        v29 = a1;
LABEL_78:
        if (*(char *)(v29 + 23) < 0)
          operator delete(*(void **)v29);
        v43 = *(_OWORD *)__p;
        *(_QWORD *)(v29 + 16) = v65;
        *(_OWORD *)v29 = v43;
        HIBYTE(v65) = 0;
        LOBYTE(__p[0]) = 0;
        v44 = v66;
        v66 = 0uLL;
        *v30 = v44;
        v45 = *(std::__shared_weak_count **)(v29 + 32);
        *(_QWORD *)(v29 + 32) = *((_QWORD *)&v44 + 1);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v49 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (SHIBYTE(v65) < 0)
        {
          operator delete(__p[0]);
          if (++v17 == 8)
            return v16 + 5 == a2;
LABEL_24:
          v15 = v16;
          v16 += 5;
          if (v16 == a2)
            return 1;
          continue;
        }
        break;
      }
      if (++v17 != 8)
        goto LABEL_24;
      return v16 + 5 == a2;
  }
}

void sub_20B4F336C(__int128 *a1, __int128 *a2, __int128 *a3, const void **a4)
{
  int v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  BOOL v16;
  const void *v17;
  __int128 v18;
  const void *v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  const void *v30;
  size_t v31;
  int v32;
  const void *v33;
  size_t v34;
  size_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  const void *v51;
  size_t v52;
  int v53;
  const void *v54;
  size_t v55;
  size_t v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  sub_20B4F2960((const void **)a1, (const void **)a2, (const void **)a3);
  v8 = *((char *)a4 + 23);
  if (v8 >= 0)
    v9 = a4;
  else
    v9 = *a4;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  v11 = *((char *)a3 + 23);
  if (v11 >= 0)
    v12 = a3;
  else
    v12 = *(const void **)a3;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)a3 + 23);
  else
    v13 = *((_QWORD *)a3 + 1);
  if (v13 >= v10)
    v14 = v10;
  else
    v14 = v13;
  v15 = memcmp(v9, v12, v14);
  if (v15)
  {
    if ((v15 & 0x80000000) == 0)
      return;
  }
  else
  {
    v16 = v10 >= v13;
    if (v10 == v13)
      v16 = (unint64_t)a4[3] >= *((_QWORD *)a3 + 3);
    if (v16)
      return;
  }
  v17 = (const void *)*((_QWORD *)a3 + 2);
  v18 = *a3;
  v19 = a4[2];
  *a3 = *(_OWORD *)a4;
  *((_QWORD *)a3 + 2) = v19;
  *(_OWORD *)a4 = v18;
  a4[2] = v17;
  v20 = (_QWORD *)a3 + 3;
  v21 = *(__int128 *)((char *)a3 + 24);
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  v22 = *(_OWORD *)(a4 + 3);
  a4[3] = 0;
  a4[4] = 0;
  v23 = (std::__shared_weak_count *)*((_QWORD *)a3 + 4);
  *(__int128 *)((char *)a3 + 24) = v22;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      v70 = v21;
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      v21 = v70;
    }
  }
  v26 = (std::__shared_weak_count *)a4[4];
  *(_OWORD *)(a4 + 3) = v21;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *((char *)a3 + 23);
  if (v29 >= 0)
    v30 = a3;
  else
    v30 = *(const void **)a3;
  if (v29 >= 0)
    v31 = *((unsigned __int8 *)a3 + 23);
  else
    v31 = *((_QWORD *)a3 + 1);
  v32 = *((char *)a2 + 23);
  if (v32 >= 0)
    v33 = a2;
  else
    v33 = *(const void **)a2;
  if (v32 >= 0)
    v34 = *((unsigned __int8 *)a2 + 23);
  else
    v34 = *((_QWORD *)a2 + 1);
  if (v34 >= v31)
    v35 = v31;
  else
    v35 = v34;
  v36 = memcmp(v30, v33, v35);
  if (v36)
  {
    if ((v36 & 0x80000000) == 0)
      return;
  }
  else
  {
    v37 = v31 >= v34;
    if (v31 == v34)
      v37 = *v20 >= *((_QWORD *)a2 + 3);
    if (v37)
      return;
  }
  v38 = *((_QWORD *)a2 + 2);
  v39 = *a2;
  v40 = *((_QWORD *)a3 + 2);
  *a2 = *a3;
  *((_QWORD *)a2 + 2) = v40;
  *a3 = v39;
  *((_QWORD *)a3 + 2) = v38;
  v41 = (_QWORD *)a2 + 3;
  v42 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  v43 = *(__int128 *)((char *)a3 + 24);
  *v20 = 0;
  *((_QWORD *)a3 + 4) = 0;
  v44 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
  *(__int128 *)((char *)a2 + 24) = v43;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      v71 = v42;
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      v42 = v71;
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)a3 + 4);
  *(__int128 *)((char *)a3 + 24) = v42;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = *((char *)a2 + 23);
  if (v50 >= 0)
    v51 = a2;
  else
    v51 = *(const void **)a2;
  if (v50 >= 0)
    v52 = *((unsigned __int8 *)a2 + 23);
  else
    v52 = *((_QWORD *)a2 + 1);
  v53 = *((char *)a1 + 23);
  if (v53 >= 0)
    v54 = a1;
  else
    v54 = *(const void **)a1;
  if (v53 >= 0)
    v55 = *((unsigned __int8 *)a1 + 23);
  else
    v55 = *((_QWORD *)a1 + 1);
  if (v55 >= v52)
    v56 = v52;
  else
    v56 = v55;
  v57 = memcmp(v51, v54, v56);
  if (v57)
  {
    if ((v57 & 0x80000000) == 0)
      return;
    goto LABEL_84;
  }
  v58 = v52 >= v55;
  if (v52 == v55)
    v58 = *v41 >= *((_QWORD *)a1 + 3);
  if (!v58)
  {
LABEL_84:
    v59 = *((_QWORD *)a1 + 2);
    v60 = *a1;
    v61 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v61;
    *a2 = v60;
    *((_QWORD *)a2 + 2) = v59;
    v62 = *(__int128 *)((char *)a1 + 24);
    *((_QWORD *)a1 + 3) = 0;
    *((_QWORD *)a1 + 4) = 0;
    v63 = *(__int128 *)((char *)a2 + 24);
    *v41 = 0;
    *((_QWORD *)a2 + 4) = 0;
    v64 = (std::__shared_weak_count *)*((_QWORD *)a1 + 4);
    *(__int128 *)((char *)a1 + 24) = v63;
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        v72 = v62;
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
        v62 = v72;
      }
    }
    v67 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
    *(__int128 *)((char *)a2 + 24) = v62;
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
  }
}

void sub_20B4F36FC(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, const void **a5)
{
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  __int128 *v14;
  size_t v15;
  size_t v16;
  int v17;
  BOOL v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  __int128 *v32;
  size_t v33;
  int v34;
  const void *v35;
  size_t v36;
  size_t v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  const void *v53;
  size_t v54;
  int v55;
  const void *v56;
  size_t v57;
  size_t v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  _QWORD *v64;
  __int128 v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  int v73;
  const void *v74;
  size_t v75;
  int v76;
  const void *v77;
  size_t v78;
  size_t v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;

  sub_20B4F336C((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, (const void **)a4);
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a4 + 23);
  if (v13 >= 0)
    v14 = a4;
  else
    v14 = *(__int128 **)a4;
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a4 + 23);
  else
    v15 = *((_QWORD *)a4 + 1);
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return;
  }
  else
  {
    v18 = v12 >= v15;
    if (v12 == v15)
      v18 = (unint64_t)a5[3] >= *((_QWORD *)a4 + 3);
    if (v18)
      return;
  }
  v19 = (const void *)*((_QWORD *)a4 + 2);
  v20 = *a4;
  v21 = a5[2];
  *a4 = *(_OWORD *)a5;
  *((_QWORD *)a4 + 2) = v21;
  *(_OWORD *)a5 = v20;
  a5[2] = v19;
  v22 = (_QWORD *)a4 + 3;
  v23 = *(__int128 *)((char *)a4 + 24);
  *((_QWORD *)a4 + 3) = 0;
  *((_QWORD *)a4 + 4) = 0;
  v24 = *(_OWORD *)(a5 + 3);
  a5[3] = 0;
  a5[4] = 0;
  v25 = (std::__shared_weak_count *)*((_QWORD *)a4 + 4);
  *(__int128 *)((char *)a4 + 24) = v24;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      v93 = v23;
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v23 = v93;
    }
  }
  v28 = (std::__shared_weak_count *)a5[4];
  *(_OWORD *)(a5 + 3) = v23;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *((char *)a4 + 23);
  if (v31 >= 0)
    v32 = a4;
  else
    v32 = *(__int128 **)a4;
  if (v31 >= 0)
    v33 = *((unsigned __int8 *)a4 + 23);
  else
    v33 = *((_QWORD *)a4 + 1);
  v34 = *(char *)(a3 + 23);
  if (v34 >= 0)
    v35 = (const void *)a3;
  else
    v35 = *(const void **)a3;
  if (v34 >= 0)
    v36 = *(unsigned __int8 *)(a3 + 23);
  else
    v36 = *(_QWORD *)(a3 + 8);
  if (v36 >= v33)
    v37 = v33;
  else
    v37 = v36;
  v38 = memcmp(v32, v35, v37);
  if (v38)
  {
    if ((v38 & 0x80000000) == 0)
      return;
  }
  else
  {
    v39 = v33 >= v36;
    if (v33 == v36)
      v39 = *v22 >= *(_QWORD *)(a3 + 24);
    if (v39)
      return;
  }
  v40 = *(_QWORD *)(a3 + 16);
  v41 = *(_OWORD *)a3;
  v42 = *((_QWORD *)a4 + 2);
  *(_OWORD *)a3 = *a4;
  *(_QWORD *)(a3 + 16) = v42;
  *a4 = v41;
  *((_QWORD *)a4 + 2) = v40;
  v43 = (_QWORD *)(a3 + 24);
  v44 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v45 = *(__int128 *)((char *)a4 + 24);
  *v22 = 0;
  *((_QWORD *)a4 + 4) = 0;
  v46 = *(std::__shared_weak_count **)(a3 + 32);
  *(_OWORD *)(a3 + 24) = v45;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      v94 = v44;
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      v44 = v94;
    }
  }
  v49 = (std::__shared_weak_count *)*((_QWORD *)a4 + 4);
  *(__int128 *)((char *)a4 + 24) = v44;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = *(char *)(a3 + 23);
  if (v52 >= 0)
    v53 = (const void *)a3;
  else
    v53 = *(const void **)a3;
  if (v52 >= 0)
    v54 = *(unsigned __int8 *)(a3 + 23);
  else
    v54 = *(_QWORD *)(a3 + 8);
  v55 = *(char *)(a2 + 23);
  if (v55 >= 0)
    v56 = (const void *)a2;
  else
    v56 = *(const void **)a2;
  if (v55 >= 0)
    v57 = *(unsigned __int8 *)(a2 + 23);
  else
    v57 = *(_QWORD *)(a2 + 8);
  if (v57 >= v54)
    v58 = v54;
  else
    v58 = v57;
  v59 = memcmp(v53, v56, v58);
  if (v59)
  {
    if ((v59 & 0x80000000) == 0)
      return;
  }
  else
  {
    v60 = v54 >= v57;
    if (v54 == v57)
      v60 = *v43 >= *(_QWORD *)(a2 + 24);
    if (v60)
      return;
  }
  v61 = *(_QWORD *)(a2 + 16);
  v62 = *(_OWORD *)a2;
  v63 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v63;
  *(_OWORD *)a3 = v62;
  *(_QWORD *)(a3 + 16) = v61;
  v64 = (_QWORD *)(a2 + 24);
  v65 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v66 = *(_OWORD *)(a3 + 24);
  *v43 = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v67 = *(std::__shared_weak_count **)(a2 + 32);
  *(_OWORD *)(a2 + 24) = v66;
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      v95 = v65;
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      v65 = v95;
    }
  }
  v70 = *(std::__shared_weak_count **)(a3 + 32);
  *(_OWORD *)(a3 + 24) = v65;
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *(char *)(a2 + 23);
  if (v73 >= 0)
    v74 = (const void *)a2;
  else
    v74 = *(const void **)a2;
  if (v73 >= 0)
    v75 = *(unsigned __int8 *)(a2 + 23);
  else
    v75 = *(_QWORD *)(a2 + 8);
  v76 = *(char *)(a1 + 23);
  if (v76 >= 0)
    v77 = (const void *)a1;
  else
    v77 = *(const void **)a1;
  if (v76 >= 0)
    v78 = *(unsigned __int8 *)(a1 + 23);
  else
    v78 = *(_QWORD *)(a1 + 8);
  if (v78 >= v75)
    v79 = v75;
  else
    v79 = v78;
  v80 = memcmp(v74, v77, v79);
  if (v80)
  {
    if ((v80 & 0x80000000) == 0)
      return;
    goto LABEL_115;
  }
  v81 = v75 >= v78;
  if (v75 == v78)
    v81 = *v64 >= *(_QWORD *)(a1 + 24);
  if (!v81)
  {
LABEL_115:
    v82 = *(_QWORD *)(a1 + 16);
    v83 = *(_OWORD *)a1;
    v84 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v84;
    *(_OWORD *)a2 = v83;
    *(_QWORD *)(a2 + 16) = v82;
    v85 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v86 = *(_OWORD *)(a2 + 24);
    *v64 = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v87 = *(std::__shared_weak_count **)(a1 + 32);
    *(_OWORD *)(a1 + 24) = v86;
    if (v87)
    {
      v88 = (unint64_t *)&v87->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        v96 = v85;
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
        v85 = v96;
      }
    }
    v90 = *(std::__shared_weak_count **)(a2 + 32);
    *(_OWORD *)(a2 + 24) = v85;
    if (v90)
    {
      v91 = (unint64_t *)&v90->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
  }
}

void sub_20B4F3BB0(_QWORD *a1, const void *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_20AEEC3E8(&v14, a2);
  v4 = v14;
  v3 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v15;
    if (v15)
    {
      v8 = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    *a1 = v4;
    a1[1] = v3;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    *a1 = v14;
    a1[1] = 0;
  }
}

void sub_20B4F3CF0(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_20AEC60B8();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20AEC60CC();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

uint64_t sub_20B4F3E90(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  CFTypeID v5;
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count_vtbl *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  CFTypeID TypeID;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  CFTypeID v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  char v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  CFIndex Count;
  CFIndex v44;
  const void *ValueAtIndex;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  std::__shared_weak_count *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  CFTypeRef v60;
  std::__shared_weak_count *v61;
  CFArrayRef theArray;
  std::__shared_weak_count *v63;
  uint64_t *v64;
  CFTypeRef v65;
  std::__shared_weak_count *v66;

  v64 = a3;
  v5 = CFGetTypeID(*(CFTypeRef *)a2);
  v6 = v5;
  v8 = **a1;
  v7 = (*a1)[1];
  if (!v8)
    return 0;
  v9 = 8 * v8;
  v10 = (_QWORD *)(*a1)[1];
  while (*v10 != v5)
  {
    ++v10;
    v9 -= 8;
    if (!v9)
    {
      v10 = (_QWORD *)(v7 + 8 * v8);
      break;
    }
  }
  if (v8 == ((uint64_t)v10 - v7) >> 3)
    return 0;
  if (v5 == CFDictionaryGetTypeID())
  {
    v12 = *(std::__shared_weak_count_vtbl **)a2;
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    v60 = *(CFTypeRef *)a2;
    v61 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (v12 && (TypeID = CFDictionaryGetTypeID(), CFGetTypeID(v12) == TypeID))
    {
      CFRetain(v12);
      v16 = (std::__shared_weak_count *)operator new();
      v17 = v16;
      v16->__shared_owners_ = 0;
      v18 = (unint64_t *)&v16->__shared_owners_;
      v16->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F2C60;
      v16->__shared_weak_owners_ = 0;
      v16[1].__vftable = v12;
      theArray = (CFArrayRef)v12;
      v63 = v16;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      theArray = 0;
      v63 = 0;
    }
    sub_20B4F3BB0(&v65, theArray);
    if (v63)
    {
      v31 = &v63->__shared_owners_;
      do
        v32 = __ldaxr((unint64_t *)v31);
      while (__stlxr(v32 - 1, (unint64_t *)v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    if (v61)
    {
      v33 = &v61->__shared_owners_;
      do
        v34 = __ldaxr((unint64_t *)v33);
      while (__stlxr(v34 - 1, (unint64_t *)v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v35 = sub_20B4EF920(&v65, **a1, (*a1)[1]);
    v36 = v66;
    if (v35)
    {
      if (v66)
      {
        v37 = (unint64_t *)&v66->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
LABEL_78:
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
        return 1;
      }
      return 1;
    }
    if (v66)
    {
      v39 = (unint64_t *)&v66->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      goto LABEL_89;
    }
  }
  else
  {
    if (v6 != CFArrayGetTypeID())
      return 1;
    v21 = *(std::__shared_weak_count_vtbl **)a2;
    v22 = *(std::__shared_weak_count **)(a2 + 8);
    v65 = *(CFTypeRef *)a2;
    v66 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    if (v21 && (v25 = CFArrayGetTypeID(), CFGetTypeID(v21) == v25))
    {
      CFRetain(v21);
      v26 = (std::__shared_weak_count *)operator new();
      v27 = v26;
      v26->__shared_owners_ = 0;
      v28 = (unint64_t *)&v26->__shared_owners_;
      v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40FA68;
      v26->__shared_weak_owners_ = 0;
      v26[1].__vftable = v21;
      theArray = (CFArrayRef)v21;
      v63 = v26;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v27);
      }
      v22 = v66;
    }
    else
    {
      theArray = 0;
      v63 = 0;
    }
    if (v22)
    {
      v41 = (unint64_t *)&v22->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    Count = CFArrayGetCount(theArray);
    if (!Count)
    {
LABEL_75:
      v36 = v63;
      if (v63)
      {
        v54 = &v63->__shared_owners_;
        do
          v38 = __ldaxr((unint64_t *)v54);
        while (__stlxr(v38 - 1, (unint64_t *)v54));
        goto LABEL_78;
      }
      return 1;
    }
    v44 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v44);
      sub_20B15B754(&v65, ValueAtIndex);
      v60 = v65;
      v61 = v66;
      if (v66)
      {
        v46 = (unint64_t *)&v66->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        v48 = v66;
        if (v66)
        {
          v49 = (unint64_t *)&v66->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
      }
      if (!sub_20B4F4468(&v64, &v60, (uint64_t)v64))
        break;
      v51 = v61;
      if (v61)
      {
        v52 = &v61->__shared_owners_;
        do
          v53 = __ldaxr((unint64_t *)v52);
        while (__stlxr(v53 - 1, (unint64_t *)v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      if (++v44 == Count)
        goto LABEL_75;
    }
    v56 = v61;
    if (v61)
    {
      v57 = &v61->__shared_owners_;
      do
        v58 = __ldaxr((unint64_t *)v57);
      while (__stlxr(v58 - 1, (unint64_t *)v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v36 = v63;
    if (v63)
    {
      v59 = &v63->__shared_owners_;
      do
        v40 = __ldaxr((unint64_t *)v59);
      while (__stlxr(v40 - 1, (unint64_t *)v59));
LABEL_89:
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  return 0;
}

void sub_20B4F4384(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4F4394()
{
  __break(1u);
}

void sub_20B4F43BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_end_catch();
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4F43CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4F43F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4F4408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4F4438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B4F4454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4F4468(uint64_t **a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeID v5;
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  CFTypeRef v11;
  CFTypeID TypeID;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeID v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  CFIndex Count;
  CFIndex v42;
  const void *ValueAtIndex;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  CFTypeRef cf;
  std::__shared_weak_count *v59;
  CFTypeRef v60;
  std::__shared_weak_count *v61;
  CFArrayRef theArray;
  std::__shared_weak_count *v63;
  uint64_t v64;
  const void *v65;
  std::__shared_weak_count *v66;

  v64 = a3;
  v5 = CFGetTypeID(*a2);
  v6 = v5;
  v8 = **a1;
  v7 = (*a1)[1];
  if (!v8)
    return 0;
  v9 = 8 * v8;
  v10 = (_QWORD *)(*a1)[1];
  while (*v10 != v5)
  {
    ++v10;
    v9 -= 8;
    if (!v9)
    {
      v10 = (_QWORD *)(v7 + 8 * v8);
      break;
    }
  }
  if (v8 == ((uint64_t)v10 - v7) >> 3)
    return 0;
  if (v5 == CFDictionaryGetTypeID())
  {
    sub_20B161578(&cf, (uint64_t)a2);
    v11 = cf;
    if (cf && (TypeID = CFDictionaryGetTypeID(), CFGetTypeID(v11) == TypeID))
    {
      sub_20AEEC3E8(&v65, cf);
      v60 = v65;
      v61 = v66;
      if (v66)
      {
        p_shared_owners = (unint64_t *)&v66->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        v15 = v66;
        if (v66)
        {
          v16 = (unint64_t *)&v66->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      v18 = v60;
    }
    else
    {
      v18 = 0;
      v60 = 0;
      v61 = 0;
    }
    sub_20B4F3BB0(&theArray, v18);
    v26 = v61;
    if (v61)
    {
      v27 = (unint64_t *)&v61->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v59;
    if (v59)
    {
      v30 = (unint64_t *)&v59->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = sub_20B4EF920(&theArray, **a1, (*a1)[1]);
    v33 = v63;
    if (v32)
    {
      if (v63)
      {
        v34 = (unint64_t *)&v63->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
LABEL_78:
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        return 1;
      }
      return 1;
    }
    if (v63)
    {
      v36 = (unint64_t *)&v63->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      goto LABEL_89;
    }
  }
  else
  {
    if (v6 != CFArrayGetTypeID())
      return 1;
    sub_20B161578(&v60, (uint64_t)a2);
    v19 = v60;
    if (v60 && (v20 = CFArrayGetTypeID(), CFGetTypeID(v19) == v20))
    {
      sub_20B15B4B0(&v65, v60);
      theArray = (CFArrayRef)v65;
      v63 = v66;
      if (v66)
      {
        v21 = (unint64_t *)&v66->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
        v23 = v66;
        if (v66)
        {
          v24 = (unint64_t *)&v66->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
    }
    else
    {
      theArray = 0;
      v63 = 0;
    }
    v38 = v61;
    if (v61)
    {
      v39 = (unint64_t *)&v61->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    Count = CFArrayGetCount(theArray);
    if (!Count)
    {
LABEL_75:
      v33 = v63;
      if (v63)
      {
        v52 = (unint64_t *)&v63->__shared_owners_;
        do
          v35 = __ldaxr(v52);
        while (__stlxr(v35 - 1, v52));
        goto LABEL_78;
      }
      return 1;
    }
    v42 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v42);
      sub_20B15B754(&v65, ValueAtIndex);
      v60 = v65;
      v61 = v66;
      if (v66)
      {
        v44 = (unint64_t *)&v66->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        v46 = v66;
        if (v66)
        {
          v47 = (unint64_t *)&v66->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
      }
      if (!sub_20B4F4468(&v64, &v60, v64))
        break;
      v49 = v61;
      if (v61)
      {
        v50 = (unint64_t *)&v61->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (++v42 == Count)
        goto LABEL_75;
    }
    v54 = v61;
    if (v61)
    {
      v55 = (unint64_t *)&v61->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v33 = v63;
    if (v63)
    {
      v57 = (unint64_t *)&v63->__shared_owners_;
      do
        v37 = __ldaxr(v57);
      while (__stlxr(v37 - 1, v57));
LABEL_89:
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  return 0;
}

void sub_20B4F4910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4F4924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4F4938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4F494C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4F4968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4F497C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B4F4998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4F49AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E2F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B4F49BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E2F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B4F49EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(*(void **)(a1 + 24));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_8;
}

void sub_20B4F4A64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B4F4A74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E348;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B4F4AA4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v8 = a1[3];
  if (v8)
  {
    v9 = a1[4];
    v10 = (void *)a1[3];
    if (v9 == v8)
    {
      a1[4] = v8;
      operator delete(v10);
    }
    else
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v11 = (void *)a1[3];
      a1[4] = v8;
      operator delete(v11);
    }
  }
}

void sub_20B4F4BA0(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  CFTypeRef v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::logic_error *exception;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  sub_20B4F4DD4(&cf, a1);
  v4 = cf;
  v3 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Given map is not compatible with this dictionary type");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  sub_20AEEC3E8(&v25, cf);
  v9 = v25;
  v8 = v26;
  if (v26)
  {
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v26;
    if (v26)
    {
      v13 = (unint64_t *)&v26->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    do
      v15 = __ldxr(v10);
    while (__stxr(v15 + 1, v10));
    *a2 = v9;
    a2[1] = v8;
    do
      v16 = __ldxr(v10);
    while (__stxr(v16 + 1, v10));
    do
      v17 = __ldaxr(v10);
    while (__stlxr(v17 - 1, v10));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    do
      v18 = __ldaxr(v10);
    while (__stlxr(v18 - 1, v10));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *a2 = v25;
    a2[1] = 0;
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20B4F4DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4F4DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4F4DD4(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v5;
  CFMutableDictionaryRef v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int *v29;
  int *v30;
  BOOL v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *value;
  std::__shared_weak_count *v41;
  void *key;
  std::__shared_weak_count *v43;
  CFMutableDictionaryRef theDict[2];

  Mutable = (std::__shared_weak_count_vtbl *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  sub_20B4EE7D0((std::__shared_weak_count_vtbl **)theDict, Mutable, 0);
  v6 = theDict[0];
  v5 = (std::__shared_weak_count *)theDict[1];
  if (!theDict[1])
    goto LABEL_6;
  v7 = (unint64_t *)((char *)theDict[1] + 8);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 - 1, v7));
  if (v9)
  {
LABEL_6:
    if (v6)
      goto LABEL_7;
LABEL_41:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6)
    goto LABEL_41;
LABEL_7:
  v12 = (int *)*a2;
  v10 = (int *)(a2 + 1);
  v11 = v12;
  if (v12 == v10)
  {
LABEL_8:
    *(_OWORD *)a1 = *(_OWORD *)theDict;
    theDict[0] = 0;
    theDict[1] = 0;
    goto LABEL_53;
  }
  while (1)
  {
    sub_20B4EE2F0((uint64_t)(v11 + 8), (CFStringRef *)&key);
    sub_20B4EDEF4(v11 + 14, (CFNumberRef *)&value);
    v14 = key;
    v13 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v18 = v41;
    if (!v14)
      break;
    v19 = value;
    if (v41)
    {
      v20 = (unint64_t *)&v41->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (!v19)
    {
      v18 = v41;
      break;
    }
    CFDictionarySetValue(theDict[0], key, value);
    v23 = v41;
    if (!v41)
      goto LABEL_28;
    v24 = (unint64_t *)&v41->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      v26 = v43;
      if (v43)
      {
LABEL_29:
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
LABEL_28:
      v26 = v43;
      if (v43)
        goto LABEL_29;
    }
    v29 = (int *)*((_QWORD *)v11 + 1);
    if (v29)
    {
      do
      {
        v30 = v29;
        v29 = *(int **)v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        v30 = (int *)*((_QWORD *)v11 + 2);
        v31 = *(_QWORD *)v30 == (_QWORD)v11;
        v11 = v30;
      }
      while (!v31);
    }
    v11 = v30;
    if (v30 == v10)
      goto LABEL_8;
  }
  *a1 = 0;
  a1[1] = 0;
  if (v18)
  {
    v32 = (unint64_t *)&v18->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v34 = v43;
  if (v43)
  {
    v35 = (unint64_t *)&v43->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
LABEL_53:
  v37 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v38 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_20B4F50F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v17 = (unint64_t *)&a12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v19 = (unint64_t *)&a14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B4F51B8(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  CFTypeRef v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::logic_error *exception;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  sub_20B4F4DD4(&cf, a1);
  v4 = cf;
  v3 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Given map is not compatible with this dictionary type");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  sub_20B284934(&v25, cf);
  v9 = v25;
  v8 = v26;
  if (v26)
  {
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v26;
    if (v26)
    {
      v13 = (unint64_t *)&v26->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    do
      v15 = __ldxr(v10);
    while (__stxr(v15 + 1, v10));
    *a2 = v9;
    a2[1] = v8;
    do
      v16 = __ldxr(v10);
    while (__stxr(v16 + 1, v10));
    do
      v17 = __ldaxr(v10);
    while (__stlxr(v17 - 1, v10));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    do
      v18 = __ldaxr(v10);
    while (__stlxr(v18 - 1, v10));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *a2 = v25;
    a2[1] = 0;
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20B4F53BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4F53D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4F53EC(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  __int128 __dst;
  uint64_t v7;
  int v8;
  std::string v9;
  std::string *p_dst;
  std::string *v11;
  __int128 *v12;
  std::string *v13;
  std::string *v14;
  std::string **p_p_dst;

  if (*(_BYTE *)(a2 + 24))
  {
    v11 = 0;
    v12 = 0;
    p_dst = (std::string *)&v11;
    sub_20B4F51B8(&p_dst, &__dst);
    *(_OWORD *)a1 = __dst;
    sub_20AEC833C((uint64_t)&p_dst, (char *)v11);
    sub_20B4ED2B8(a1, (const void *)*MEMORY[0x24BDBD3A0], a2);
    if (!*(_BYTE *)(a2 + 88))
      return;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v11 = 0;
    v12 = 0;
    p_dst = (std::string *)&v11;
    sub_20B4F51B8(&p_dst, &__dst);
    *(_OWORD *)a1 = __dst;
    sub_20AEC833C((uint64_t)&p_dst, (char *)v11);
    if (!*(_BYTE *)(a2 + 88))
      return;
  }
  v8 = -1;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    __dst = *(_OWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 48);
  }
  v8 = 1;
  p_dst = (std::string *)&__dst;
  v11 = (std::string *)":";
  v12 = &__dst;
  v13 = (std::string *)":";
  v14 = (std::string *)":";
  sub_20AED5C4C((uint64_t *)&v12, (uint64_t)&__dst);
  std::to_string(&v9, *(_QWORD *)(a2 + 56));
  p_dst = (std::string *)&__dst;
  v11 = &v9;
  v12 = &__dst;
  v13 = &v9;
  v14 = &v9;
  if (v8 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(std::string ***, __int128 *))off_24C41E3A0[v8])(&p_p_dst, &__dst);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (v8 == -1)
    sub_20AECFAB8();
  p_dst = &v9;
  ((void (*)(void **__return_ptr, std::string **, __int128 *))off_24C41E3B8[v8])(__p, &p_dst, &__dst);
  if (v8 != -1)
    ((void (*)(std::string **, __int128 *))off_24C41E388[v8])(&p_dst, &__dst);
  sub_20B4ED2B8(a1, (const void *)*MEMORY[0x24BDBD398], (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B4F5604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  sub_20AECFA60((uint64_t)&a16);
  sub_20AEC147C(v16);
  _Unwind_Resume(a1);
}

void sub_20B4F56C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  JUMPOUT(0x20B4F56B0);
}

void sub_20B4F56E0(CFErrorRef *a1, uint64_t a2)
{
  const __CFAllocator *Default;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  const __CFAllocator *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char **v13;
  char *v14[2];
  void *v15;
  std::__shared_weak_count *v16;

  if (*(_BYTE *)(a2 + 112))
  {
    sub_20B4F53EC((uint64_t)&v13, a2 + 16);
    Default = CFAllocatorGetDefault();
    sub_20B4F5858(a1, (const std::error_condition *)a2, (void **)&v13, Default);
    v5 = (std::__shared_weak_count *)v14[0];
    if (v14[0])
    {
      v6 = (unint64_t *)(v14[0] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    v14[0] = 0;
    v14[1] = 0;
    v13 = v14;
    sub_20B4F51B8(&v13, &v15);
    v8 = v16;
    v12[0] = v15;
    v12[1] = v16;
    sub_20AEC833C((uint64_t)&v13, v14[0]);
    v9 = CFAllocatorGetDefault();
    sub_20B4F5858(a1, (const std::error_condition *)a2, v12, v9);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_20B4F5818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20B4F5830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4F5844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

CFErrorRef *sub_20B4F5858(CFErrorRef *a1, const std::error_condition *a2, void **a3, const __CFAllocator *a4)
{
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  const __CFDictionary *size;
  const __CFDictionary *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const void **v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  const void *v34;
  const std::error_category *v35;
  const std::error_category *cat;
  CFIndex val;
  CFErrorRef v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  const char *v43;
  size_t v44;
  std::string::size_type v45;
  std::string *p_p;
  uint64_t v47;
  uint64_t v48;
  const __CFString *v49;
  CFIndex v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  std::string __p;
  char v63;
  CFDictionaryRef theDict[2];
  void *value[2];

  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  sub_20B4F51B8(&__p, value);
  *(_OWORD *)theDict = *(_OWORD *)value;
  sub_20AEC833C((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  v9 = *a3;
  v8 = (std::__shared_weak_count *)a3[1];
  if (!v8)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
LABEL_6:
    if (v9)
      goto LABEL_7;
LABEL_29:
    v18 = theDict[0];
    size = theDict[1];
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!v9)
    goto LABEL_29;
LABEL_7:
  v13 = *a3;
  v14 = (unint64_t *)a3[1];
  value[0] = *a3;
  value[1] = v14;
  if (v14)
  {
    v15 = v14 + 1;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20B284934(&__p, v13);
  size = (const __CFDictionary *)__p.__r_.__value_.__l.__size_;
  v18 = (const __CFDictionary *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v22 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v24 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v25 = (unint64_t *)((char *)value[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)theDict[1];
  theDict[0] = v18;
  theDict[1] = size;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    goto LABEL_29;
  }
LABEL_30:
  v30 = (const void **)MEMORY[0x24BDBD378];
  if (size)
  {
    v31 = (unint64_t *)((char *)size + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    do
      v33 = __ldaxr(v31);
    while (__stlxr(v33 - 1, v31));
    if (!v33)
    {
      (*(void (**)(const __CFDictionary *))(*(_QWORD *)size + 16))(size);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)size);
      v34 = *v30;
      if (v18)
        goto LABEL_36;
LABEL_41:
      std::error_condition::message(&__p, a2);
      sub_20B4ED2B8((uint64_t)theDict, v34, (uint64_t)&__p);
      goto LABEL_42;
    }
  }
  v34 = *v30;
  if (!v18)
    goto LABEL_41;
LABEL_36:
  value[0] = 0;
  if (!v34)
    goto LABEL_41;
  if (!CFDictionaryGetValueIfPresent(theDict[0], v34, (const void **)value))
    goto LABEL_41;
  sub_20B4EE3FC((CFIndex)value[0], &__p);
  if (!v63)
    goto LABEL_41;
LABEL_42:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    cat = a2->__cat_;
    if (cat != std::generic_category())
      goto LABEL_51;
  }
  else
  {
    v35 = a2->__cat_;
    if (v35 != std::generic_category())
      goto LABEL_51;
  }
  val = a2->__val_;
  if ((_DWORD)val)
  {
    sub_20B284A78(&__p, (uint64_t)theDict);
    v38 = CFErrorCreate(a4, (CFErrorDomain)*MEMORY[0x24BDBD390], val, (CFDictionaryRef)__p.__r_.__value_.__l.__data_);
    v39 = (std::__shared_weak_count *)operator new();
    v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E3E0;
    v39->__shared_owners_ = 0;
    v39->__shared_weak_owners_ = 0;
    v39[1].__vftable = (std::__shared_weak_count_vtbl *)v38;
    v40 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_71;
    v41 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    goto LABEL_69;
  }
LABEL_51:
  v43 = (const char *)((uint64_t (*)(const std::error_category *))a2->__cat_->name)(a2->__cat_);
  v44 = strlen(v43);
  if (v44 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v45 = v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    p_p = (std::string *)operator new(v47 + 1);
    __p.__r_.__value_.__l.__size_ = v45;
    __p.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_58;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v44;
  p_p = &__p;
  if (v44)
LABEL_58:
    memcpy(p_p, v43, v45);
  p_p->__r_.__value_.__s.__data_[v45] = 0;
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)value);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v49 = (const __CFString *)value[0];
  v50 = a2->__val_;
  sub_20B284A78(&__p, (uint64_t)theDict);
  v38 = CFErrorCreate(a4, v49, v50, (CFDictionaryRef)__p.__r_.__value_.__l.__data_);
  v39 = (std::__shared_weak_count *)operator new();
  v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E3E0;
  v39->__shared_owners_ = 0;
  v39->__shared_weak_owners_ = 0;
  v39[1].__vftable = (std::__shared_weak_count_vtbl *)v38;
  v51 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v52 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v40 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v54 = (unint64_t *)((char *)value[1] + 8);
    do
      v42 = __ldaxr(v54);
    while (__stlxr(v42 - 1, v54));
LABEL_69:
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_71:
  v55 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v56 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  *a1 = v38;
  a1[1] = (CFErrorRef)v39;
  v58 = (unint64_t *)&v39->__shared_owners_;
  do
    v59 = __ldxr(v58);
  while (__stxr(v59 + 1, v58));
  do
    v60 = __ldaxr(v58);
  while (__stlxr(v60 - 1, v58));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  return a1;
}

void sub_20B4F5D68()
{
  __break(1u);
}

void sub_20B4F5DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  __cxa_end_catch();
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a16)
  {
    v18 = (unint64_t *)(a16 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    JUMPOUT(0x20B4F5E50);
  }
  JUMPOUT(0x20B4F5EB0);
}

void sub_20B4F5E74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x20B4F5EB0);
}

void sub_20B4F5E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20AEC833C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B4F5EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B4F5EF4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B4F5F18(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20B4F5F38(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B4F5FA8(CFNumberRef *a1)
{
  char *v1;

  v1 = (char *)sub_20B4F5FE8 + 4 * aE[CFNumberGetType(*a1) - 1];
  __asm { BR              X10 }
}

_QWORD *sub_20B4F5FE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *result;
  uint64_t v23;

  v18 = *v17;
  v23 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v23);
  v20 = v23;
  *(_BYTE *)v16 = 8;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v21 = operator new(8uLL);
  *(_QWORD *)(v16 + 8) = v21;
  *v21 = v20;
  result = v21 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

_QWORD *sub_20B4F6044(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *result;
  uint64_t v23;

  v18 = *v17;
  v23 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v23);
  v20 = v23;
  *(_BYTE *)v16 = 12;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v21 = operator new(8uLL);
  *(_QWORD *)(v16 + 8) = v21;
  *v21 = v20;
  result = v21 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

_BYTE *sub_20B4F60A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  _BYTE *v20;
  _BYTE *result;
  char v22;

  v18 = *v17;
  v22 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v22);
  LOBYTE(v18) = v22;
  *(_BYTE *)v16 = 5;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v20 = operator new(1uLL);
  *(_QWORD *)(v16 + 8) = v20;
  *v20 = (_BYTE)v18;
  result = v20 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

_WORD *sub_20B4F60FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  _WORD *v20;
  _WORD *result;
  __int16 v22;

  v18 = *v17;
  v22 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v22);
  LOWORD(v18) = v22;
  *(_BYTE *)v16 = 6;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v20 = operator new(2uLL);
  *(_QWORD *)(v16 + 8) = v20;
  *v20 = (_WORD)v18;
  result = v20 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

_DWORD *sub_20B4F6158(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  _DWORD *v20;
  _DWORD *result;
  int v22;

  v18 = *v17;
  v22 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v22);
  LODWORD(v18) = v22;
  *(_BYTE *)v16 = 7;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v20 = operator new(4uLL);
  *(_QWORD *)(v16 + 8) = v20;
  *v20 = (_DWORD)v18;
  result = v20 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

_DWORD *sub_20B4F61B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  int v20;
  _DWORD *v21;
  _DWORD *result;
  int v23;

  v18 = *v17;
  v23 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v23);
  v20 = v23;
  *(_BYTE *)v16 = 11;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v21 = operator new(4uLL);
  *(_QWORD *)(v16 + 8) = v21;
  *v21 = v20;
  result = v21 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

std::__shared_weak_count_vtbl **sub_20B4F6210(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20B15B25C(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40FA18;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20B4F62EC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4F6304(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B4F6318(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

double sub_20B4F6350(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t valuePtr, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _OWORD *v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  int v23;
  __int16 v24;
  const __CFAllocator *v25;
  CFNumberType v26;
  std::__shared_weak_count_vtbl *v27;
  double result;
  __int128 v29;
  _BYTE *v30;
  _BYTE *v31;
  __int16 v32;

  LOBYTE(v29) = 5;
  v22 = operator new(1uLL);
  *((_QWORD *)&v29 + 1) = v22;
  *v22 = 127;
  v30 = v22 + 1;
  v31 = v22 + 1;
  v23 = sub_20B5234F4(v21, &v29);
  if (*((_QWORD *)&v29 + 1))
  {
    v30 = (_BYTE *)*((_QWORD *)&v29 + 1);
    operator delete(*((void **)&v29 + 1));
  }
  v24 = *(unsigned __int8 *)sub_20B522A74((uint64_t)v21);
  if (v23 == 1)
  {
    v32 = v24;
    v25 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v26 = kCFNumberSInt16Type;
  }
  else
  {
    LOBYTE(v32) = v24;
    v25 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v26 = kCFNumberSInt8Type;
  }
  v27 = (std::__shared_weak_count_vtbl *)CFNumberCreate(v25, v26, &v32);
  sub_20B4F6210((std::__shared_weak_count_vtbl **)&v29, v27, 0);
  result = *(double *)&v29;
  *v20 = v29;
  return result;
}

void sub_20B4F65D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B4F6600(CFTypeID a1@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  std::string v9;

  v3 = (std::__shared_weak_count_vtbl *)CFCopyTypeIDDescription(a1);
  sub_20B415F0C(&v7, v3, 0);
  sub_20B4EE3FC((CFIndex)v7, &v9);
  *a2 = v9;
  memset(&v9, 0, sizeof(v9));
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20B4F66A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B4F66B8(_QWORD *a1, CFTypeRef cf)
{
  __CFString *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  unint64_t v9;
  void *v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unsigned __int8 v15;
  CFTypeRef v16;
  std::string __p;
  int v18;
  char v19;
  char *v20;

  v16 = cf;
  if (cf)
  {
    v3 = (__CFString *)CFCopyDescription(cf);
    v13 = v3;
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C418888;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
    v14 = v4;
    sub_20B4EE3FC((CFIndex)v3, &__p);
    if (!(_BYTE)v18
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/src/Ref.cpp", 37, (uint64_t)"maybe_string", 12, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v8 = sub_20AEC01D0(a1, (uint64_t)p_p, size);
    if ((_BYTE)v18 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (v9)
      return v8;
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    return v8;
  }
  else
  {
    v18 = 0;
    sub_20AED5838((uint64_t)&v20, (uint64_t)&__p, &v16);
    if (v18 == -1)
      sub_20AECFAB8();
    v20 = &v19;
    ((void (*)(void **__return_ptr, char **, std::string *))off_24C41E438[v18])(&v13, &v20, &__p);
    if (v18 != -1)
      ((void (*)(char **, std::string *))off_24C41E420[v18])(&v20, &__p);
    if ((v15 & 0x80u) == 0)
      v11 = &v13;
    else
      v11 = v13;
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14;
    v8 = sub_20AEC01D0(a1, (uint64_t)v11, v12);
    if (((char)v15 & 0x80000000) == 0)
      return v8;
    operator delete(v13);
    return v8;
  }
}

void sub_20B4F68D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B4F68EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4F6900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  JUMPOUT(0x20B4F6968);
}

void sub_20B4F6908(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4F6920(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B4F6930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4F6944(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19 && a18 < 0)
    operator delete(__p);
  sub_20AEC147C((uint64_t)&a9);
  JUMPOUT(0x20B4F6968);
}

std::__shared_weak_count_vtbl **sub_20B4F6970(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20B2D0BEC(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C418838;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20B4F6A4C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4F6A64(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *sub_20B4F6A78(_OWORD *a1, uint64_t a2, Boolean a3)
{
  std::__shared_weak_count_vtbl *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  uint64_t v11;
  CFStringRef filePath;
  std::__shared_weak_count *v13;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_20AEC60F4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 16);
  }
  sub_20B4EE2F0((uint64_t)__p, &filePath);
  v5 = (std::__shared_weak_count_vtbl *)CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x24BDBD240], filePath, kCFURLPOSIXPathStyle, a3);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if ((SHIBYTE(v11) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  if (SHIBYTE(v11) < 0)
LABEL_9:
    operator delete(__p[0]);
LABEL_10:
  sub_20B2D0A2C((std::__shared_weak_count_vtbl **)__p, v5, 0);
  *a1 = *(_OWORD *)__p;
  return a1;
}

void sub_20B4F6B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (a17)
  {
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B4F6BCC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFURLRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::string __p;
  char v16;

  v5 = *(CFURLRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (v5)
      goto LABEL_10;
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/src/URLRef.cpp", 58, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5AF01F, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_10:
  v9 = (std::__shared_weak_count_vtbl *)CFURLCopyScheme(*(CFURLRef *)a1);
  sub_20B415F0C(&v13, v9, 0);
  sub_20B4EE3FC((CFIndex)v13, &__p);
  v10 = v14;
  if (!v14)
    goto LABEL_14;
  v11 = (unint64_t *)&v14->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
LABEL_14:
    if (v16)
      goto LABEL_15;
LABEL_19:
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
    a2->__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!v16)
    goto LABEL_19;
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (v16)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a2 = __p;
  }
}

void sub_20B4F6D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B4F6D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B4F6D94(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFURLRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *p_p;
  BOOL v11;
  std::__shared_weak_count_vtbl *v12;
  std::string::size_type v13;
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  std::string __p;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(CFURLRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (v5)
      goto LABEL_10;
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/src/URLRef.cpp", 64, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5AF01F, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_10:
  sub_20B4F6BCC(a1, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size == 4)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    v11 = LODWORD(p_p->__r_.__value_.__l.__data_) == 1701603686;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_24:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v11)
        goto LABEL_25;
      goto LABEL_19;
    }
  }
  else
  {
    v11 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_24;
  }
  if (!v11)
  {
LABEL_25:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
LABEL_19:
  v12 = (std::__shared_weak_count_vtbl *)CFURLCopyFileSystemPath(*(CFURLRef *)a1, kCFURLPOSIXPathStyle);
  sub_20B415F0C(&v19, v12, 0);
  sub_20B4EE3FC((CFIndex)v19, &__p);
  v22[0] = __p.__r_.__value_.__l.__size_;
  v13 = __p.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  v15 = v22[0];
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v22 + 7);
  *(_BYTE *)(a2 + 23) = v14;
  v22[0] = 0;
  *(_QWORD *)((char *)v22 + 7) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20B4F6F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B4F6FA8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

std::__shared_weak_count_vtbl **sub_20B4F6FB4(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20AEDF888(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F2938;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20B4F7090(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B4F70A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

const char *sub_20B4F70BC()
{
  return "json parsing";
}

double sub_20B4F70C8@<D0>(int a1@<W1>, uint64_t a2@<X8>)
{
  char *v3;
  __int128 v4;
  char *v5;
  const char *v6;
  __int128 v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;

  switch(a1)
  {
    case 'e':
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "syntax error");
      break;
    case 'f':
      v3 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v3;
      *(_OWORD *)(a2 + 8) = xmmword_20B5E9D80;
      *(_QWORD *)&v4 = *(_QWORD *)"to_unicode failed or surrogate error";
      strcpy(v3, "to_unicode failed or surrogate error");
      break;
    case 'g':
      v5 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_20B60F810;
      v6 = "code points above 0x10FFFF are invalid";
      goto LABEL_6;
    case 'h':
      v5 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_20B60F810;
      v6 = "json patch must be an array of objects";
LABEL_6:
      v4 = *(_OWORD *)v6;
      v7 = *((_OWORD *)v6 + 1);
      *(_OWORD *)v5 = *(_OWORD *)v6;
      *((_OWORD *)v5 + 1) = v7;
      *(_QWORD *)(v5 + 30) = *(_QWORD *)(v6 + 30);
      v5[38] = 0;
      break;
    case 'i':
      v8 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v8;
      *(_OWORD *)(a2 + 8) = xmmword_20B5E35C0;
      *(_QWORD *)&v4 = *(_QWORD *)"invalid json patch value";
      strcpy(v8, "invalid json patch value");
      break;
    case 'j':
      *(_BYTE *)(a2 + 23) = 19;
      *(_QWORD *)&v4 = *(_QWORD *)"invalid array index";
      strcpy((char *)a2, "invalid array index");
      break;
    case 'k':
      *(_BYTE *)(a2 + 23) = 20;
      *(_QWORD *)&v4 = *(_QWORD *)"invalid json pointer";
      strcpy((char *)a2, "invalid json pointer");
      break;
    case 'l':
      v9 = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = v9;
      *(_OWORD *)(a2 + 8) = xmmword_20B5B03D0;
      *(_QWORD *)&v4 = *(_QWORD *)"invalid escape sequence";
      strcpy(v9, "invalid escape sequence");
      break;
    case 'm':
      v10 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v10;
      *(_OWORD *)(a2 + 8) = xmmword_20B5B35F0;
      strcpy(v10, "array index must be a number");
      *(_QWORD *)&v4 = *(_QWORD *)"must be a number";
      break;
    case 'n':
      v11 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v11;
      *(_OWORD *)(a2 + 8) = xmmword_20B5C7CA0;
      strcpy(v11, "unexpected end of byte vector");
      *(_QWORD *)&v4 = *(_QWORD *)"d of byte vector";
      break;
    case 'p':
      v12 = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = v12;
      *(_OWORD *)(a2 + 8) = xmmword_20B5E35B0;
      strcpy(v12, "used unsupported features from different format");
      *(_QWORD *)&v4 = *(_QWORD *)"different format";
      break;
    case 'q':
      v13 = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = v13;
      *(_OWORD *)(a2 + 8) = xmmword_20B5F91F0;
      strcpy(v13, "used unsupported key type (must be string)");
      *(_QWORD *)&v4 = *(_QWORD *)"(must be string)";
      break;
    default:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "unknown error");
      break;
  }
  return *(double *)&v4;
}

void sub_20B4F73F4(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned __int8 v4;
  char *v5;
  char v6;
  void *v7;
  char v8;
  uint64_t v9;
  char v10;
  int v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  void *__p;
  __int128 v20;
  unsigned __int8 v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  unsigned __int8 v27;
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[3];

  v30[2] = *MEMORY[0x24BDAC8D0];
  v3 = a1[2];
  v4 = atomic_load((unsigned __int8 *)&qword_25463CBE8);
  if ((v4 & 1) == 0)
  {
    v18 = a1;
    v17 = __cxa_guard_acquire(&qword_25463CBE8);
    a1 = v18;
    if (v17)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253EC31E0, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CBE8);
      a1 = v18;
    }
  }
  v5 = (char *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1);
  sub_20AF55B94((uint64_t)&__p, v5);
  v11 = v21;
  if (v21)
  {
    v12 = __p;
    v30[0] = v20;
    *(_QWORD *)((char *)v30 + 7) = *(_QWORD *)((char *)&v20 + 7);
    v6 = HIBYTE(v20);
    v20 = 0uLL;
    __p = 0;
    v13 = v27;
    if (v27)
    {
LABEL_4:
      v14 = v22;
      v29[0] = v23;
      *(_QWORD *)((char *)v29 + 7) = *(_QWORD *)((char *)&v23 + 7);
      v8 = HIBYTE(v23);
      v22 = 0;
      v23 = 0uLL;
      v9 = v24;
      v7 = v25;
      v28[0] = v26;
      *(_QWORD *)((char *)v28 + 7) = *(_QWORD *)((char *)&v26 + 7);
      v10 = HIBYTE(v26);
      v25 = 0;
      v26 = 0uLL;
      goto LABEL_7;
    }
  }
  else
  {
    v12 = 0;
    v13 = v27;
    if (v27)
      goto LABEL_4;
  }
  v14 = 0;
LABEL_7:
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = &off_253EC31E0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (v11)
  {
    v15 = v30[0];
    *(_QWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 31) = *(_QWORD *)((char *)v30 + 7);
    *(_BYTE *)(a2 + 39) = v6;
    v30[0] = 0;
    *(_QWORD *)((char *)v30 + 7) = 0;
    *(_BYTE *)(a2 + 40) = 1;
    v12 = 0;
    v6 = 0;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v13)
  {
    v16 = v29[0];
    *(_QWORD *)(a2 + 48) = v14;
    *(_QWORD *)(a2 + 56) = v16;
    *(_QWORD *)(a2 + 63) = *(_QWORD *)((char *)v29 + 7);
    *(_BYTE *)(a2 + 71) = v8;
    v29[0] = 0;
    *(_QWORD *)((char *)v29 + 7) = 0;
    *(_QWORD *)(a2 + 72) = v9;
    *(_QWORD *)(a2 + 80) = v7;
    *(_QWORD *)(a2 + 88) = v28[0];
    *(_QWORD *)(a2 + 95) = *(_QWORD *)((char *)v28 + 7);
    *(_BYTE *)(a2 + 103) = v10;
    v28[0] = 0;
    *(_QWORD *)((char *)v28 + 7) = 0;
    *(_BYTE *)(a2 + 104) = 1;
  }
  *(_BYTE *)(a2 + 112) = 1;
  if (v11 && v6 < 0)
  {
    operator delete(v12);
    v13 = v27;
  }
  if (v13)
  {
    if ((SHIBYTE(v26) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v23) & 0x80000000) == 0)
        goto LABEL_17;
LABEL_22:
      operator delete(v22);
      if (!v21)
        return;
      goto LABEL_18;
    }
    operator delete(v25);
    if (SHIBYTE(v23) < 0)
      goto LABEL_22;
  }
LABEL_17:
  if (!v21)
    return;
LABEL_18:
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
}

void sub_20B4F7644(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B4F7668(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  lconv *v10;
  char *thousands_sep;
  char *decimal_point;
  _OWORD *v13;
  __int128 v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  lconv *v25;
  char *v26;
  char *v27;
  _OWORD *v28;
  __int128 v29;
  unint64_t v30;
  _OWORD *v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unsigned __int8 *v39;
  char v40;
  char *v41;
  char *v42;
  _QWORD v43[2];
  void (***v44)(void);
  std::__shared_weak_count *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  lconv *v50;
  char v51;
  char v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char v85;
  void *__p;
  uint64_t v87;
  unint64_t v88;
  int v89;
  char *v90;
  std::__shared_weak_count *v91;
  char v92;
  void *v93;
  __int128 v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v39 = a1;
  if (*(_BYTE *)(a2 + 8))
  {
    v5 = *(_DWORD *)a2;
    if (*(_BYTE *)(a2 + 16))
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v6 = (char *)operator new(0x28uLL);
      v7 = (std::__shared_weak_count *)v6;
      *((_QWORD *)v6 + 1) = 0;
      v8 = (unint64_t *)(v6 + 8);
      *((_QWORD *)v6 + 2) = 0;
      *(_QWORD *)v6 = &off_24C41E508;
      *((_QWORD *)v6 + 3) = off_24C41E558;
      *((_QWORD *)v6 + 4) = a3;
      v41 = v6 + 24;
      v42 = v6;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      v44 = (void (***)(void))(v6 + 24);
      v45 = (std::__shared_weak_count *)v6;
      v43[0] = 0;
      v43[1] = 0;
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v10 = localeconv();
      v50 = v10;
      thousands_sep = v10->thousands_sep;
      if (thousands_sep)
        LOBYTE(thousands_sep) = *thousands_sep;
      v51 = (char)thousands_sep;
      decimal_point = v10->decimal_point;
      if (v10->decimal_point)
        LOBYTE(decimal_point) = *decimal_point;
      v52 = (char)decimal_point;
      v64 = 0u;
      v65 = 0u;
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v72 = 0u;
      v73 = 0u;
      v74 = 0u;
      v75 = 0u;
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v79 = 0u;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      v83 = 0u;
      v84 = 0u;
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v85 = 32;
      v13 = operator new(0x208uLL);
      __p = v13;
      v88 = 0x8000000000000208;
      v87 = 512;
      *(_QWORD *)&v14 = 0x2020202020202020;
      *((_QWORD *)&v14 + 1) = 0x2020202020202020;
      *v13 = v14;
      v13[1] = v14;
      v13[2] = v14;
      v13[3] = v14;
      v13[4] = v14;
      v13[5] = v14;
      v13[6] = v14;
      v13[7] = v14;
      v13[8] = v14;
      v13[9] = v14;
      v13[10] = v14;
      v13[11] = v14;
      v13[12] = v14;
      v13[13] = v14;
      v13[14] = v14;
      v13[15] = v14;
      v13[16] = v14;
      v13[17] = v14;
      v13[18] = v14;
      v13[19] = v14;
      v13[20] = v14;
      v13[21] = v14;
      v13[22] = v14;
      v13[23] = v14;
      v13[24] = v14;
      v13[25] = v14;
      v13[26] = v14;
      v13[27] = v14;
      v13[28] = v14;
      v13[29] = v14;
      v13[30] = v14;
      v13[31] = v14;
      *((_BYTE *)v13 + 512) = 0;
      v89 = 0;
      do
        v15 = __ldaxr(v8);
      while (__stlxr(v15 - 1, v8));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      sub_20B4FADC0(&v44, (uint64_t)a1, v5 >= 0, v5 & ~(v5 >> 31), 0);
      if (SHIBYTE(v88) < 0)
        operator delete(__p);
      v16 = v45;
      if (v45)
      {
        p_shared_owners = (unint64_t *)&v45->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
LABEL_50:
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v19 = (char *)operator new(0x28uLL);
      v20 = (std::__shared_weak_count *)v19;
      *((_QWORD *)v19 + 1) = 0;
      v21 = (unint64_t *)(v19 + 8);
      *((_QWORD *)v19 + 2) = 0;
      *(_QWORD *)v19 = &off_24C41E508;
      *((_QWORD *)v19 + 3) = off_24C41E558;
      v22 = v19 + 24;
      *((_QWORD *)v19 + 4) = a3;
      do
        v23 = __ldxr(v21);
      while (__stxr(v23 + 1, v21));
      do
        v24 = __ldxr(v21);
      while (__stxr(v24 + 1, v21));
      v44 = (void (***)(void))(v19 + 24);
      v45 = (std::__shared_weak_count *)v19;
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v25 = localeconv();
      v50 = v25;
      v26 = v25->thousands_sep;
      if (v26)
        LOBYTE(v26) = *v26;
      v51 = (char)v26;
      v27 = v25->decimal_point;
      if (v25->decimal_point)
        LOBYTE(v27) = *v27;
      v52 = (char)v27;
      v64 = 0u;
      v65 = 0u;
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v72 = 0u;
      v73 = 0u;
      v74 = 0u;
      v75 = 0u;
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v79 = 0u;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      v83 = 0u;
      v84 = 0u;
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v85 = 32;
      v28 = operator new(0x208uLL);
      __p = v28;
      v88 = 0x8000000000000208;
      v87 = 512;
      *(_QWORD *)&v29 = 0x2020202020202020;
      *((_QWORD *)&v29 + 1) = 0x2020202020202020;
      *v28 = v29;
      v28[1] = v29;
      v28[2] = v29;
      v28[3] = v29;
      v28[4] = v29;
      v28[5] = v29;
      v28[6] = v29;
      v28[7] = v29;
      v28[8] = v29;
      v28[9] = v29;
      v28[10] = v29;
      v28[11] = v29;
      v28[12] = v29;
      v28[13] = v29;
      v28[14] = v29;
      v28[15] = v29;
      v28[16] = v29;
      v28[17] = v29;
      v28[18] = v29;
      v28[19] = v29;
      v28[20] = v29;
      v28[21] = v29;
      v28[22] = v29;
      v28[23] = v29;
      v28[24] = v29;
      v28[25] = v29;
      v28[26] = v29;
      v28[27] = v29;
      v28[28] = v29;
      v28[29] = v29;
      v28[30] = v29;
      v28[31] = v29;
      *((_BYTE *)v28 + 512) = 0;
      v89 = 0;
      v90 = v22;
      v91 = v20;
      do
        v30 = __ldxr(v21);
      while (__stxr(v30 + 1, v21));
      v92 = 32;
      v31 = operator new(0x208uLL);
      v93 = v31;
      v94 = xmmword_20B60F860;
      *(_QWORD *)&v32 = 0x2020202020202020;
      *((_QWORD *)&v32 + 1) = 0x2020202020202020;
      *v31 = v32;
      v31[1] = v32;
      v31[2] = v32;
      v31[3] = v32;
      v31[4] = v32;
      v31[5] = v32;
      v31[6] = v32;
      v31[7] = v32;
      v31[8] = v32;
      v31[9] = v32;
      v31[10] = v32;
      v31[11] = v32;
      v31[12] = v32;
      v31[13] = v32;
      v31[14] = v32;
      v31[15] = v32;
      v31[16] = v32;
      v31[17] = v32;
      v31[18] = v32;
      v31[19] = v32;
      v31[20] = v32;
      v31[21] = v32;
      v31[22] = v32;
      v31[23] = v32;
      v31[24] = v32;
      v31[25] = v32;
      v31[26] = v32;
      v31[27] = v32;
      v31[28] = v32;
      v31[29] = v32;
      v31[30] = v32;
      v31[31] = v32;
      *((_BYTE *)v31 + 512) = 0;
      do
        v33 = __ldaxr(v21);
      while (__stlxr(v33 - 1, v21));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      do
        v34 = __ldaxr(v21);
      while (__stlxr(v34 - 1, v21));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      sub_20B4FCB4C((uint64_t)&v44, a1, v5 >= 0, v5 & ~(v5 >> 31), 0);
      if (SHIBYTE(v94) < 0)
        operator delete(v93);
      v35 = v91;
      if (v91)
      {
        v36 = (unint64_t *)&v91->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (SHIBYTE(v88) < 0)
        operator delete(__p);
      v16 = v45;
      if (v45)
      {
        v38 = (unint64_t *)&v45->__shared_owners_;
        do
          v18 = __ldaxr(v38);
        while (__stlxr(v18 - 1, v38));
        goto LABEL_50;
      }
    }
  }
  else
  {
    DWORD2(v46) = 0;
    sub_20B4FAB1C((uint64_t)&v44, (uint64_t *)&v39);
    if (DWORD2(v46) == -1)
      sub_20AECFAB8();
    v43[0] = &v40;
    ((void (*)(_QWORD *, void (****)(void)))off_24C41E4E0[DWORD2(v46)])(v43, &v44);
    if (DWORD2(v46) != -1)
      ((void (*)(_QWORD *, void (****)(void)))off_24C41E4C8[DWORD2(v46)])(v43, &v44);
  }
}

void sub_20B4F7C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  uint64_t v17;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  v19 = (std::__shared_weak_count *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  if (a17)
  {
    v22 = (unint64_t *)&a17->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(a1);
}

void sub_20B4F7E88(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  lconv *v10;
  char *thousands_sep;
  char *decimal_point;
  _OWORD *v13;
  __int128 v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  size_t v21;
  void **p_dst;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  lconv *v29;
  char *v30;
  char *v31;
  _OWORD *v32;
  __int128 v33;
  unint64_t v34;
  _OWORD *v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  const void **v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  void (***v49)(void);
  uint64_t v50;
  uint64_t v51;
  void (**v52)(void);
  _QWORD v53[3];
  int v54;
  void **__dst;
  std::__shared_weak_count *v56;
  unint64_t v57;
  void (****v58)(void);
  void (***v59)(void);
  void **v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  lconv *v65;
  char v66;
  char v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char v100;
  void *__p;
  uint64_t v102;
  unint64_t v103;
  int v104;
  char *v105;
  std::__shared_weak_count *v106;
  char v107;
  void *v108;
  __int128 v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a2 + 8))
  {
    v54 = 0;
    v19 = operator new();
    *(_QWORD *)(v19 + 272) = 0;
    *(_OWORD *)(v19 + 240) = 0u;
    *(_OWORD *)(v19 + 256) = 0u;
    *(_OWORD *)(v19 + 208) = 0u;
    *(_OWORD *)(v19 + 224) = 0u;
    *(_OWORD *)(v19 + 176) = 0u;
    *(_OWORD *)(v19 + 192) = 0u;
    *(_OWORD *)(v19 + 144) = 0u;
    *(_OWORD *)(v19 + 160) = 0u;
    *(_OWORD *)(v19 + 112) = 0u;
    *(_OWORD *)(v19 + 128) = 0u;
    *(_OWORD *)(v19 + 80) = 0u;
    *(_OWORD *)(v19 + 96) = 0u;
    *(_OWORD *)(v19 + 48) = 0u;
    *(_OWORD *)(v19 + 64) = 0u;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 32) = 0u;
    *(_OWORD *)v19 = 0u;
    sub_20AEC0BD8(v19);
    v59 = (void (***)(void))v19;
    sub_20B4FA6D8((uint64_t *)(v19 + 16), (uint64_t)a1);
    v20 = *(_DWORD *)(v19 + 120);
    if ((v20 & 0x10) != 0)
    {
      v43 = *(_QWORD *)(v19 + 112);
      v44 = *(_QWORD *)(v19 + 72);
      if (v43 < v44)
      {
        *(_QWORD *)(v19 + 112) = v44;
        v43 = v44;
      }
      v45 = (const void **)(v19 + 64);
    }
    else
    {
      if ((v20 & 8) == 0)
      {
        v21 = 0;
        HIBYTE(v57) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_64;
      }
      v45 = (const void **)(v19 + 40);
      v43 = *(_QWORD *)(v19 + 56);
    }
    v46 = *v45;
    v21 = v43 - (_QWORD)*v45;
    if (v21 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    if (v21 >= 0x17)
    {
      v47 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v47 = v21 | 7;
      v48 = v47 + 1;
      p_dst = (void **)operator new(v47 + 1);
      v56 = (std::__shared_weak_count *)v21;
      v57 = v48 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v57) = v43 - *(_BYTE *)v45;
      p_dst = (void **)&__dst;
      if (!v21)
        goto LABEL_64;
    }
    memmove(p_dst, v46, v21);
LABEL_64:
    *((_BYTE *)p_dst + v21) = 0;
    v49 = v59;
    if (v59)
    {
      v50 = MEMORY[0x24BEDB7F0];
      v51 = *MEMORY[0x24BEDB7F0];
      *v59 = (void (**)(void))*MEMORY[0x24BEDB7F0];
      v52 = *(void (***)(void))(v50 + 72);
      *(void (***)(void))((char *)v49 + *(_QWORD *)(v51 - 24)) = *(void (***)(void))(v50 + 64);
      v49[3] = (void (**)(void))(MEMORY[0x24BEDB848] + 16);
      v49[2] = v52;
      if (*((char *)v49 + 111) < 0)
        operator delete(v49[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD35758](v49 + 16);
      MEMORY[0x20BD3583C](v49, 0x10B2C40EED050F3);
    }
    v59 = (void (***)(void))v53;
    v60 = (void **)&__dst;
    *(_QWORD *)&v61 = v53;
    *((_QWORD *)&v61 + 1) = &__dst;
    *(_QWORD *)&v62 = &__dst;
    if (v54 == -1)
      sub_20AECFAB8();
    v58 = &v59;
    ((void (*)(void (*****)(void), _QWORD *))off_24C41E4B0[v54])(&v58, v53);
    if (SHIBYTE(v57) < 0)
      operator delete(__dst);
    if (v54 == -1)
      sub_20AECFAB8();
    v59 = (void (***)(void))&__dst;
    ((void (*)(void (****)(void), _QWORD *))off_24C41E4E0[v54])(&v59, v53);
    if (v54 != -1)
      ((void (*)(void (****)(void), _QWORD *))off_24C41E4C8[v54])(&v59, v53);
    return;
  }
  v5 = *(_DWORD *)a2;
  if (*(_BYTE *)(a2 + 16))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v6 = (std::__shared_weak_count *)operator new(0x28uLL);
    v7 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E508;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C41E558;
    v6[1].__shared_owners_ = (uint64_t)a3;
    __dst = (void **)&v6[1].__vftable;
    v56 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v59 = (void (***)(void))&v6[1];
    v60 = (void **)&v6->__vftable;
    v53[0] = 0;
    v53[1] = 0;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v10 = localeconv();
    v65 = v10;
    thousands_sep = v10->thousands_sep;
    if (thousands_sep)
      LOBYTE(thousands_sep) = *thousands_sep;
    v66 = (char)thousands_sep;
    decimal_point = v10->decimal_point;
    if (v10->decimal_point)
      LOBYTE(decimal_point) = *decimal_point;
    v67 = (char)decimal_point;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = 0u;
    v87 = 0u;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v100 = 32;
    v13 = operator new(0x208uLL);
    __p = v13;
    v103 = 0x8000000000000208;
    v102 = 512;
    *(_QWORD *)&v14 = 0x2020202020202020;
    *((_QWORD *)&v14 + 1) = 0x2020202020202020;
    *v13 = v14;
    v13[1] = v14;
    v13[2] = v14;
    v13[3] = v14;
    v13[4] = v14;
    v13[5] = v14;
    v13[6] = v14;
    v13[7] = v14;
    v13[8] = v14;
    v13[9] = v14;
    v13[10] = v14;
    v13[11] = v14;
    v13[12] = v14;
    v13[13] = v14;
    v13[14] = v14;
    v13[15] = v14;
    v13[16] = v14;
    v13[17] = v14;
    v13[18] = v14;
    v13[19] = v14;
    v13[20] = v14;
    v13[21] = v14;
    v13[22] = v14;
    v13[23] = v14;
    v13[24] = v14;
    v13[25] = v14;
    v13[26] = v14;
    v13[27] = v14;
    v13[28] = v14;
    v13[29] = v14;
    v13[30] = v14;
    v13[31] = v14;
    *((_BYTE *)v13 + 512) = 0;
    v104 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    sub_20B4FD030(&v59, (uint64_t)a1, v5 >= 0, v5 & ~(v5 >> 31), 0);
    if (SHIBYTE(v103) < 0)
      operator delete(__p);
    v16 = (std::__shared_weak_count *)v60;
    if (v60)
    {
      v17 = (unint64_t *)(v60 + 1);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_50:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v23 = (char *)operator new(0x28uLL);
    v24 = (std::__shared_weak_count *)v23;
    *((_QWORD *)v23 + 1) = 0;
    v25 = (unint64_t *)(v23 + 8);
    *((_QWORD *)v23 + 2) = 0;
    *(_QWORD *)v23 = &off_24C41E508;
    *((_QWORD *)v23 + 3) = off_24C41E558;
    v26 = v23 + 24;
    *((_QWORD *)v23 + 4) = a3;
    do
      v27 = __ldxr(v25);
    while (__stxr(v27 + 1, v25));
    do
      v28 = __ldxr(v25);
    while (__stxr(v28 + 1, v25));
    v59 = (void (***)(void))(v23 + 24);
    v60 = (void **)v23;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v29 = localeconv();
    v65 = v29;
    v30 = v29->thousands_sep;
    if (v30)
      LOBYTE(v30) = *v30;
    v66 = (char)v30;
    v31 = v29->decimal_point;
    if (v29->decimal_point)
      LOBYTE(v31) = *v31;
    v67 = (char)v31;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = 0u;
    v87 = 0u;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v100 = 32;
    v32 = operator new(0x208uLL);
    __p = v32;
    v103 = 0x8000000000000208;
    v102 = 512;
    *(_QWORD *)&v33 = 0x2020202020202020;
    *((_QWORD *)&v33 + 1) = 0x2020202020202020;
    *v32 = v33;
    v32[1] = v33;
    v32[2] = v33;
    v32[3] = v33;
    v32[4] = v33;
    v32[5] = v33;
    v32[6] = v33;
    v32[7] = v33;
    v32[8] = v33;
    v32[9] = v33;
    v32[10] = v33;
    v32[11] = v33;
    v32[12] = v33;
    v32[13] = v33;
    v32[14] = v33;
    v32[15] = v33;
    v32[16] = v33;
    v32[17] = v33;
    v32[18] = v33;
    v32[19] = v33;
    v32[20] = v33;
    v32[21] = v33;
    v32[22] = v33;
    v32[23] = v33;
    v32[24] = v33;
    v32[25] = v33;
    v32[26] = v33;
    v32[27] = v33;
    v32[28] = v33;
    v32[29] = v33;
    v32[30] = v33;
    v32[31] = v33;
    *((_BYTE *)v32 + 512) = 0;
    v104 = 0;
    v105 = v26;
    v106 = v24;
    do
      v34 = __ldxr(v25);
    while (__stxr(v34 + 1, v25));
    v107 = 32;
    v35 = operator new(0x208uLL);
    v108 = v35;
    v109 = xmmword_20B60F860;
    *(_QWORD *)&v36 = 0x2020202020202020;
    *((_QWORD *)&v36 + 1) = 0x2020202020202020;
    *v35 = v36;
    v35[1] = v36;
    v35[2] = v36;
    v35[3] = v36;
    v35[4] = v36;
    v35[5] = v36;
    v35[6] = v36;
    v35[7] = v36;
    v35[8] = v36;
    v35[9] = v36;
    v35[10] = v36;
    v35[11] = v36;
    v35[12] = v36;
    v35[13] = v36;
    v35[14] = v36;
    v35[15] = v36;
    v35[16] = v36;
    v35[17] = v36;
    v35[18] = v36;
    v35[19] = v36;
    v35[20] = v36;
    v35[21] = v36;
    v35[22] = v36;
    v35[23] = v36;
    v35[24] = v36;
    v35[25] = v36;
    v35[26] = v36;
    v35[27] = v36;
    v35[28] = v36;
    v35[29] = v36;
    v35[30] = v36;
    v35[31] = v36;
    *((_BYTE *)v35 + 512) = 0;
    do
      v37 = __ldaxr(v25);
    while (__stlxr(v37 - 1, v25));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    do
      v38 = __ldaxr(v25);
    while (__stlxr(v38 - 1, v25));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    sub_20B4FE5EC((uint64_t)&v59, a1, v5 >= 0, v5 & ~(v5 >> 31), 0);
    if (SHIBYTE(v109) < 0)
      operator delete(v108);
    v39 = v106;
    if (v106)
    {
      v40 = (unint64_t *)&v106->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (SHIBYTE(v103) < 0)
      operator delete(__p);
    v16 = (std::__shared_weak_count *)v60;
    if (v60)
    {
      v42 = (unint64_t *)(v60 + 1);
      do
        v18 = __ldaxr(v42);
      while (__stlxr(v18 - 1, v42));
      goto LABEL_50;
    }
  }
}

void sub_20B4F8650(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20AEC01C0(a1);
}

_QWORD *sub_20B4F88E0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[8];
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  sub_20B451250(a1, v8, 1, 0, (unint64_t)v6);
  v3 = operator new();
  *(_BYTE *)v3 = v6[0];
  *(_QWORD *)(v3 + 8) = v7;
  v6[0] = 0;
  v7 = 0;
  *a2 = v3;
  sub_20B416E08(&v7, 0);
  result = v9;
  if (v9 == v8)
  {
    v5 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_20B4F89C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  sub_20B416E08(&a11, a10);
  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *sub_20B4F8A14@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  unsigned __int8 v6[8];
  void **v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  sub_20B4F8B48(a1, v8, 1, 0, v6);
  v3 = operator new();
  *(_BYTE *)v3 = v6[0];
  *(_QWORD *)(v3 + 8) = v7;
  v6[0] = 0;
  v7 = 0;
  *a2 = v3;
  sub_20B4181DC(&v7, 0);
  result = v9;
  if (v9 == v8)
  {
    v5 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_20B4F8AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, void **a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  sub_20B4181DC(&a11, a10);
  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *sub_20B4F8B48@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, char a4@<W3>, unsigned __int8 *a5@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  lconv *v15;
  int v16;
  unsigned __int8 **v17;
  uint64_t v18;
  std::string *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  size_t v23;
  char v24;
  std::string::__raw *v25;
  int v26;
  void **v27;
  unint64_t v28;
  unint64_t v29;
  std::string *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  size_t v35;
  int v36;
  void **v37;
  void **v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *result;
  uint64_t v43;
  void *v44;
  void *exception;
  const void *v46[2];
  char v47;
  std::string __p;
  std::string v49;
  std::string v50;
  _QWORD v51[3];
  _QWORD *v52;
  _QWORD v53[3];
  _QWORD *v54;
  int v55;
  _QWORD v56[2];
  char v57;
  int v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char v70;
  char __str[8];
  void **v72;
  std::runtime_error v73;
  uint64_t v74;
  std::string v75;
  std::string *v76;
  unsigned __int8 *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char v83;
  _BYTE v84[24];
  std::string *v85;
  char v86;
  unsigned __int8 v87;
  void **v88[2];

  v88[1] = *(void ***)MEMORY[0x24BDAC8D0];
  *a5 = 0;
  v8 = *((char *)a1 + 23);
  v9 = a1[1];
  if (v8 >= 0)
    v10 = a1;
  else
    v10 = (uint64_t *)*a1;
  *((_QWORD *)a5 + 1) = 0;
  if (v8 >= 0)
    v11 = v8;
  else
    v11 = v9;
  v12 = (_QWORD *)a2[3];
  if (!v12)
  {
    v52 = 0;
    goto LABEL_12;
  }
  if (v12 == a2)
  {
    v52 = v51;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v51);
    v13 = v52;
    if (v52)
      goto LABEL_14;
LABEL_12:
    *(_QWORD *)&v79 = 0;
    goto LABEL_17;
  }
  v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
  v52 = v13;
  if (!v13)
    goto LABEL_12;
LABEL_14:
  if (v13 == v51)
  {
    *(_QWORD *)&v79 = &v77;
    (*(void (**)(_QWORD *, unsigned __int8 **))(v51[0] + 24))(v51, &v77);
  }
  else
  {
    *(_QWORD *)&v79 = v13;
    v52 = 0;
  }
LABEL_17:
  v14 = v79;
  if (!(_QWORD)v79)
  {
LABEL_20:
    v54 = (_QWORD *)v14;
    goto LABEL_22;
  }
  if ((unsigned __int8 **)v79 != &v77)
  {
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v79 + 16))();
    goto LABEL_20;
  }
  v54 = v53;
  (*((void (**)(unsigned __int8 **, _QWORD *))v77 + 3))(&v77, v53);
LABEL_22:
  v55 = 0;
  v56[0] = v10;
  v56[1] = (char *)v10 + v11;
  v57 = a4;
  v58 = -1;
  v59 = 0;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0;
  v65 = "";
  v67 = 0;
  v68 = 0;
  v66 = 0;
  v15 = localeconv();
  if (v15->decimal_point)
    v16 = *v15->decimal_point;
  else
    v16 = 46;
  v69 = v16;
  v70 = a3;
  v55 = sub_20B4FEA94((uint64_t)v56);
  v17 = (unsigned __int8 **)v79;
  if ((unsigned __int8 **)v79 == &v77)
  {
    v18 = 4;
    v17 = &v77;
  }
  else
  {
    if (!(_QWORD)v79)
      goto LABEL_30;
    v18 = 5;
  }
  (*(void (**)(void))&(*v17)[8 * v18])();
LABEL_30:
  if (!v54)
  {
    v77 = a5;
    v78 = 0u;
    v79 = 0u;
    LOBYTE(v80) = 0;
    BYTE1(v80) = v70;
    sub_20B502BCC((uint64_t)v53, &v77);
    v55 = sub_20B4FEA94((uint64_t)v56);
    if (v55 == 15)
      goto LABEL_48;
    v20 = (unsigned __int8 *)*((_QWORD *)&v61 + 1);
    v21 = (unsigned __int8 *)v62;
    memset(&v75, 0, sizeof(v75));
    if (*((_QWORD *)&v61 + 1) != (_QWORD)v62)
    {
      do
      {
        v22 = *v20;
        if (v22 > 0x1F)
        {
          std::string::push_back(&v75, v22);
        }
        else
        {
          LOBYTE(v72) = 0;
          *(_QWORD *)__str = 0;
          snprintf(__str, 9uLL, "<U+%.4X>", v22);
          v23 = strlen(__str);
          std::string::append(&v75, __str, v23);
        }
        ++v20;
      }
      while (v20 != v21);
    }
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v60;
    v50.__r_.__value_.__r.__words[2] = v61;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&__p, "value");
    sub_20B502390(&v49, (uint64_t)v53, 0xFu, (const void **)&__p.__r_.__value_.__l.__data_);
    sub_20B45AE7C(101, (uint64_t *)&v50, (uint64_t)&v49, (uint64_t)__str);
    LOBYTE(v80) = 1;
    if (BYTE1(v80))
    {
      exception = __cxa_allocate_exception(0x28uLL);
      *(_QWORD *)exception = &off_24C41D9D8;
      *((_DWORD *)exception + 2) = (_DWORD)v72;
      std::runtime_error::runtime_error((std::runtime_error *)exception + 1, &v73);
      *(_QWORD *)exception = &off_24C41DAD8;
      *((_QWORD *)exception + 4) = v74;
      __cxa_throw(exception, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
    }
    *(_QWORD *)__str = &off_24C41D9D8;
    std::runtime_error::~runtime_error(&v73);
    std::exception::~exception((std::exception *)__str);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_48:
        if (!(_BYTE)v80)
          goto LABEL_90;
        goto LABEL_49;
      }
    }
    else if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_48;
    }
    operator delete(v75.__r_.__value_.__l.__data_);
    if (!(_BYTE)v80)
      goto LABEL_90;
LABEL_49:
    v26 = *a5;
    *a5 = 9;
    __str[0] = v26;
    v27 = (void **)*((_QWORD *)a5 + 1);
    *((_QWORD *)a5 + 1) = 0;
    v72 = v27;
    sub_20B4181DC(&v72, v26);
    goto LABEL_90;
  }
  if (v54 == v53)
  {
    v76 = &v75;
    (*(void (**)(_QWORD *, std::string *))(v53[0] + 24))(v53, &v75);
    v19 = v76;
  }
  else
  {
    v19 = (std::string *)(*(uint64_t (**)(void))(*v54 + 16))();
    v76 = v19;
  }
  v24 = v70;
  v77 = a5;
  v25 = (std::string::__raw *)v84;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0;
  if (!v19)
    goto LABEL_44;
  if (v19 != &v75)
  {
    v19 = (std::string *)(*(uint64_t (**)(std::string *))(v19->__r_.__value_.__r.__words[0] + 16))(v19);
LABEL_44:
    v85 = v19;
    goto LABEL_51;
  }
  v85 = (std::string *)v84;
  (*(void (**)(std::string *, _BYTE *))(v75.__r_.__value_.__r.__words[0] + 24))(&v75, v84);
LABEL_51:
  v86 = v24;
  v87 = 9;
  v88[0] = 0;
  v28 = v80;
  if ((_QWORD)v80 == *((_QWORD *)&v80 + 1) << 6)
  {
    if ((uint64_t)v80 + 1 < 0)
      sub_20B451A44();
    if ((unint64_t)v80 > 0x3FFFFFFFFFFFFFFELL)
    {
      v29 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else if (*((_QWORD *)&v80 + 1) << 7 <= ((unint64_t)v80 & 0xFFFFFFFFFFFFFFC0) + 64)
    {
      v29 = (v80 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    else
    {
      v29 = *((_QWORD *)&v80 + 1) << 7;
    }
    sub_20B45D3B8((uint64_t)&v79 + 8, v29);
    v28 = v80;
  }
  *(_QWORD *)&v80 = v28 + 1;
  *(_QWORD *)(*((_QWORD *)&v79 + 1) + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
  v30 = v76;
  if (v76 == &v75)
  {
    v31 = 4;
    v30 = &v75;
  }
  else
  {
    if (!v76)
      goto LABEL_64;
    v31 = 5;
  }
  (*(void (**)(void))(v30->__r_.__value_.__r.__words[0] + 8 * v31))();
LABEL_64:
  sub_20B50058C((uint64_t)v53, &v77);
  v55 = sub_20B4FEA94((uint64_t)v56);
  if (v55 == 15)
    goto LABEL_74;
  v32 = (unsigned __int8 *)*((_QWORD *)&v61 + 1);
  v33 = (unsigned __int8 *)v62;
  memset(&v50, 0, sizeof(v50));
  if (*((_QWORD *)&v61 + 1) != (_QWORD)v62)
  {
    do
    {
      v34 = *v32;
      if (v34 > 0x1F)
      {
        std::string::push_back(&v50, v34);
      }
      else
      {
        LOBYTE(v72) = 0;
        *(_QWORD *)__str = 0;
        snprintf(__str, 9uLL, "<U+%.4X>", v34);
        v35 = strlen(__str);
        std::string::append(&v50, __str, v35);
      }
      ++v32;
    }
    while (v32 != v33);
  }
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v60;
  v49.__r_.__value_.__r.__words[2] = v61;
  v47 = 5;
  strcpy((char *)v46, "value");
  sub_20B502390(&__p, (uint64_t)v53, 0xFu, v46);
  sub_20B45AE7C(101, (uint64_t *)&v49, (uint64_t)&__p, (uint64_t)__str);
  v83 = 1;
  if (v86)
  {
    v44 = __cxa_allocate_exception(0x28uLL);
    *(_QWORD *)v44 = &off_24C41D9D8;
    *((_DWORD *)v44 + 2) = (_DWORD)v72;
    std::runtime_error::runtime_error((std::runtime_error *)v44 + 1, &v73);
    *(_QWORD *)v44 = &off_24C41DAD8;
    *((_QWORD *)v44 + 4) = v74;
    __cxa_throw(v44, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
  }
  *(_QWORD *)__str = &off_24C41D9D8;
  std::runtime_error::~runtime_error(&v73);
  std::exception::~exception((std::exception *)__str);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_74;
LABEL_77:
    operator delete(v50.__r_.__value_.__l.__data_);
    if (v83)
      goto LABEL_75;
    goto LABEL_78;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_77;
LABEL_74:
  if (v83)
  {
LABEL_75:
    v36 = *a5;
    *a5 = 9;
    __str[0] = v36;
    v37 = (void **)*((_QWORD *)a5 + 1);
    *((_QWORD *)a5 + 1) = 0;
    v72 = v37;
    goto LABEL_80;
  }
LABEL_78:
  if (*a5 != 9)
    goto LABEL_81;
  *a5 = 0;
  __str[0] = 9;
  v38 = (void **)*((_QWORD *)a5 + 1);
  *((_QWORD *)a5 + 1) = 0;
  v72 = v38;
  v36 = 9;
LABEL_80:
  sub_20B4181DC(&v72, v36);
LABEL_81:
  sub_20B4181DC(v88, v87);
  if (v85 == (std::string *)v84)
  {
    v39 = 4;
    goto LABEL_85;
  }
  if (v85)
  {
    v39 = 5;
    v25 = (std::string::__raw *)v85;
LABEL_85:
    (*(void (**)(std::string::__raw *))(v25->__words[0] + 8 * v39))(v25);
  }
  if ((_QWORD)v81)
    operator delete((void *)v81);
  if (*((_QWORD *)&v79 + 1))
    operator delete(*((void **)&v79 + 1));
LABEL_90:
  if ((_QWORD)v78)
  {
    *((_QWORD *)&v78 + 1) = v78;
    operator delete((void *)v78);
  }
  if (SHIBYTE(v64) < 0)
    operator delete((void *)v63);
  if (*((_QWORD *)&v61 + 1))
  {
    *(_QWORD *)&v62 = *((_QWORD *)&v61 + 1);
    operator delete(*((void **)&v61 + 1));
  }
  v40 = v54;
  if (v54 == v53)
  {
    v41 = 4;
    v40 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_101;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_101:
  result = v52;
  if (v52 == v51)
  {
    v43 = 4;
    result = v51;
  }
  else
  {
    if (!v52)
      return result;
    v43 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v43))();
}

void sub_20B4F93E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20B4F96AC(uint64_t **a1)
{
  uint64_t *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_20B416E08(v2 + 1, *(unsigned __int8 *)v2);
    MEMORY[0x20BD3583C](v2, 0x1022C40B06DCE69);
  }
  return (unsigned __int8 **)a1;
}

_QWORD *sub_20B4F96FC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  unsigned __int8 v7[8];
  void **v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  sub_20B4F8B48(a1, v9, 1, 0, v7);
  v3 = operator new();
  *(_BYTE *)v3 = v7[0];
  *(_QWORD *)(v3 + 8) = v8;
  v7[0] = 0;
  v8 = 0;
  v4 = operator new();
  *(_BYTE *)v4 = *(_BYTE *)v3;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
  *(_BYTE *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 120) = 1;
  sub_20B4181DC((void ***)(v3 + 8), 0);
  MEMORY[0x20BD3583C](v3, 0x1022C40B06DCE69);
  sub_20B4181DC(&v8, v7[0]);
  result = v10;
  if (v10 == v9)
  {
    v6 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_20B4F9854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,__int128 a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v28;
  uint64_t v29;
  unsigned int *v30;

  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20B4F9938((void ****)&a10);
  sub_20B4181DC((void ***)&a23 + 1, a23);
  v28 = *(_QWORD **)(v25 - 64);
  if (v28 == (_QWORD *)(v25 - 88))
  {
    v29 = 4;
    v28 = (_QWORD *)(v25 - 88);
  }
  else
  {
    if (!v28)
      goto LABEL_7;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_7:
  if (a2 == 2)
  {
    v30 = (unsigned int *)__cxa_begin_catch(exception_object);
    sub_20B4F73F4(v30, (uint64_t)&a10);
    a23 = a10;
    sub_20AECEBD0(&a24, &a11);
    sub_20AFEDBD0(v24, (uint64_t)&a23);
    sub_20AECCE40((uint64_t)&a23);
    sub_20AECCE40((uint64_t)&a10);
    __cxa_end_catch();
    JUMPOUT(0x20B4F9820);
  }
  sub_20AEC01C0(exception_object);
}

void ****sub_20B4F9938(void ****a1)
{
  void ***v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_20B4181DC(v2 + 1, *(unsigned __int8 *)v2);
    MEMORY[0x20BD3583C](v2, 0x1022C40B06DCE69);
  }
  return a1;
}

uint64_t sub_20B4F9988(uint64_t *a1, uint64_t *a2)
{
  int v3;
  int v4;
  uint64_t result;
  BOOL v6;
  double v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void **v21;
  unsigned __int8 *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 **v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;

  v3 = *(unsigned __int8 *)a1;
  v4 = *(unsigned __int8 *)a2;
  if (v3 != v4)
  {
    if (v3 == 5 && v4 == 7)
    {
      v10 = (double)a1[1];
    }
    else
    {
      if (v3 == 7 && v4 == 5)
        return *((double *)a1 + 1) == (double)a2[1];
      if (v3 != 6 || v4 != 7)
      {
        if (v3 == 7 && v4 == 6)
        {
          return *((double *)a1 + 1) == (double)(unint64_t)a2[1];
        }
        else
        {
          if (v3 != 6 || v4 != 5)
          {
            result = 0;
            if (v3 != 5 || v4 != 6)
              return result;
          }
          return a1[1] == a2[1];
        }
      }
      v10 = (double)(unint64_t)a1[1];
    }
    return *((double *)a2 + 1) == v10;
  }
  result = 1;
  switch(v3)
  {
    case 0:
      return result;
    case 1:
      v11 = (_QWORD *)a1[1];
      v12 = (_QWORD *)a2[1];
      if (v11[2] != v12[2])
        return 0;
      v15 = (_QWORD *)*v11;
      v13 = v11 + 1;
      v14 = v15;
      if (v15 == v13)
        return result;
      v16 = (_QWORD *)*v12;
      break;
    case 2:
      v27 = (uint64_t *)a1[1];
      v28 = (uint64_t *)a2[1];
      v29 = *v27;
      v30 = v27[1];
      v31 = *v28;
      if (v30 - *v27 != v28[1] - *v28)
        return 0;
      for (; v29 != v30; v31 += 16)
      {
        result = sub_20B4F9988(v29, v31);
        if (!(_DWORD)result)
          break;
        v29 += 16;
      }
      return result;
    case 3:
      v32 = (unsigned __int8 *)a1[1];
      v33 = (unsigned __int8 **)a2[1];
      v34 = v32[23];
      if ((v34 & 0x80u) == 0)
        v35 = (unsigned __int8 *)v32[23];
      else
        v35 = (unsigned __int8 *)*((_QWORD *)v32 + 1);
      v36 = (unsigned __int8 *)*((unsigned __int8 *)v33 + 23);
      v37 = (char)v36;
      if ((char)v36 < 0)
        v36 = v33[1];
      if (v35 != v36)
        return 0;
      if (v37 >= 0)
        v38 = (unsigned __int8 *)a2[1];
      else
        v38 = *v33;
      if ((v34 & 0x80) != 0)
        return memcmp(*(const void **)v32, v38, *((_QWORD *)v32 + 1)) == 0;
      if (v32[23])
      {
        v39 = v34 - 1;
        do
        {
          v41 = *v32++;
          v40 = v41;
          v43 = *v38++;
          v42 = v43;
          v45 = v39-- != 0;
          result = v40 == v42;
        }
        while (v40 == v42 && v45);
      }
      return result;
    case 4:
      return *((unsigned __int8 *)a1 + 8) == *((unsigned __int8 *)a2 + 8);
    case 5:
    case 6:
      return a1[1] == a2[1];
    case 7:
      return *((double *)a1 + 1) == *((double *)a2 + 1);
    case 8:
      v46 = a1[1];
      v47 = a2[1];
      v48 = *(_QWORD *)(v46 + 8) - *(_QWORD *)v46;
      if (v48 != *(_QWORD *)(v47 + 8) - *(_QWORD *)v47
        || memcmp(*(const void **)v46, *(const void **)v47, v48)
        || *(unsigned __int8 *)(v46 + 24) != *(unsigned __int8 *)(v47 + 24))
      {
        return 0;
      }
      return *(unsigned __int8 *)(v46 + 25) == *(unsigned __int8 *)(v47 + 25);
    default:
      return 0;
  }
  while (1)
  {
    v17 = *((unsigned __int8 *)v14 + 55);
    if ((v17 & 0x80u) == 0)
      v18 = *((unsigned __int8 *)v14 + 55);
    else
      v18 = v14[5];
    v19 = *((unsigned __int8 *)v16 + 55);
    v20 = (char)v19;
    if ((v19 & 0x80u) != 0)
      v19 = v16[5];
    if (v18 != v19)
      return 0;
    v21 = (const void **)(v14 + 4);
    if (v20 >= 0)
      v22 = (unsigned __int8 *)(v16 + 4);
    else
      v22 = (unsigned __int8 *)v16[4];
    if ((v17 & 0x80) != 0)
    {
      if (memcmp(*v21, v22, v14[5]))
        return 0;
    }
    else if (*((_BYTE *)v14 + 55))
    {
      while (*(unsigned __int8 *)v21 == *v22)
      {
        v21 = (const void **)((char *)v21 + 1);
        ++v22;
        if (!--v17)
          goto LABEL_45;
      }
      return 0;
    }
LABEL_45:
    result = sub_20B4F9988(v14 + 7, v16 + 7);
    if ((_DWORD)result)
    {
      v23 = (_QWORD *)v14[1];
      v24 = v14;
      if (v23)
      {
        do
        {
          v14 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v24[2];
          v6 = *v14 == (_QWORD)v24;
          v24 = v14;
        }
        while (!v6);
      }
      v25 = (_QWORD *)v16[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v16[2];
          v6 = *v26 == (_QWORD)v16;
          v16 = v26;
        }
        while (!v6);
      }
      result = 1;
      v16 = v26;
      if (v14 != v13)
        continue;
    }
    return result;
  }
}

uint64_t sub_20B4F9D04(uint64_t *a1, uint64_t *a2)
{
  int v3;
  int v4;
  uint64_t result;
  double v9;
  uint64_t *v10;
  unsigned __int8 ***v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 **v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;

  v3 = *(unsigned __int8 *)a1;
  v4 = *(unsigned __int8 *)a2;
  if (v3 != v4)
  {
    if (v3 == 5 && v4 == 7)
    {
      v9 = (double)a1[1];
    }
    else
    {
      if (v3 == 7 && v4 == 5)
        return *((double *)a1 + 1) == (double)a2[1];
      if (v3 != 6 || v4 != 7)
      {
        if (v3 == 7 && v4 == 6)
          return *((double *)a1 + 1) == (double)(unint64_t)a2[1];
        if (v3 == 6 && v4 == 5)
          return a1[1] == a2[1];
        result = 0;
        if (v3 == 5 && v4 == 6)
          return a1[1] == a2[1];
        return result;
      }
      v9 = (double)(unint64_t)a1[1];
    }
    return *((double *)a2 + 1) == v9;
  }
  result = 1;
  switch(v3)
  {
    case 0:
      return result;
    case 1:
      v10 = (uint64_t *)a1[1];
      v11 = (unsigned __int8 ***)a2[1];
      v13 = *v10;
      v12 = v10[1];
      v14 = *v11;
      if (v12 - *v10 != (char *)v11[1] - (char *)*v11)
        return 0;
      if (v13 == v12)
        return result;
      break;
    case 2:
      v21 = (uint64_t *)a1[1];
      v22 = (uint64_t *)a2[1];
      v23 = *v21;
      v24 = v21[1];
      v25 = *v22;
      if (v24 - *v21 != v22[1] - *v22)
        return 0;
      for (; v23 != v24; v25 += 16)
      {
        result = sub_20B4F9D04(v23, v25);
        if (!(_DWORD)result)
          break;
        v23 += 16;
      }
      return result;
    case 3:
      v26 = (unsigned __int8 *)a1[1];
      v27 = (unsigned __int8 **)a2[1];
      v28 = v26[23];
      if ((v28 & 0x80u) == 0)
        v29 = (unsigned __int8 *)v26[23];
      else
        v29 = (unsigned __int8 *)*((_QWORD *)v26 + 1);
      v30 = (unsigned __int8 *)*((unsigned __int8 *)v27 + 23);
      v31 = (char)v30;
      if ((char)v30 < 0)
        v30 = v27[1];
      if (v29 != v30)
        return 0;
      if (v31 >= 0)
        v32 = (unsigned __int8 *)a2[1];
      else
        v32 = *v27;
      if ((v28 & 0x80) != 0)
        return memcmp(*(const void **)v26, v32, *((_QWORD *)v26 + 1)) == 0;
      if (v26[23])
      {
        v33 = v28 - 1;
        do
        {
          v35 = *v26++;
          v34 = v35;
          v37 = *v32++;
          v36 = v37;
          v39 = v33-- != 0;
          result = v34 == v36;
        }
        while (v34 == v36 && v39);
      }
      return result;
    case 4:
      return *((unsigned __int8 *)a1 + 8) == *((unsigned __int8 *)a2 + 8);
    case 5:
    case 6:
      return a1[1] == a2[1];
    case 7:
      return *((double *)a1 + 1) == *((double *)a2 + 1);
    case 8:
      v40 = a1[1];
      v41 = a2[1];
      v42 = *(_QWORD *)(v40 + 8) - *(_QWORD *)v40;
      if (v42 != *(_QWORD *)(v41 + 8) - *(_QWORD *)v41
        || memcmp(*(const void **)v40, *(const void **)v41, v42)
        || *(unsigned __int8 *)(v40 + 24) != *(unsigned __int8 *)(v41 + 24))
      {
        return 0;
      }
      return *(unsigned __int8 *)(v40 + 25) == *(unsigned __int8 *)(v41 + 25);
    default:
      return 0;
  }
  while (1)
  {
    v15 = *(unsigned __int8 *)(v13 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 23);
    else
      v16 = *(unsigned __int8 **)(v13 + 8);
    v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
    v18 = (char)v17;
    if ((char)v17 < 0)
      v17 = v14[1];
    if (v16 != v17)
      return 0;
    if (v18 >= 0)
      v19 = (unsigned __int8 *)v14;
    else
      v19 = *v14;
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v13, v19, *(_QWORD *)(v13 + 8)))
        return 0;
    }
    else if (*(_BYTE *)(v13 + 23))
    {
      v20 = 0;
      while (*(unsigned __int8 *)(v13 + v20) == v19[v20])
      {
        if (v15 == ++v20)
          goto LABEL_42;
      }
      return 0;
    }
LABEL_42:
    result = sub_20B4F9D04(v13 + 24, v14 + 3);
    if ((_DWORD)result)
    {
      v13 += 40;
      v14 += 5;
      result = 1;
      if (v13 != v12)
        continue;
    }
    return result;
  }
}

uint64_t *sub_20B4FA0B0(uint64_t a1, const void **a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*(_BYTE *)a1 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_20B452AD0((char *)a1);
    sub_20AEC0D64(&v6, v5);
    sub_20B1F16DC("cannot use operator[] with a string argument with ", &v6, &v7);
    sub_20B452958(305, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  return sub_20AFB10A4(*(_QWORD *)(a1 + 8), a2) + 7;
}

void sub_20B4FA15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t sub_20B4FA1BC(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  void *exception;
  char *v14;
  std::string v15;
  std::string v16;

  if (*(_BYTE *)a1 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v14 = (char *)sub_20B452AD0((char *)a1);
    sub_20AEC0D64(&v15, v14);
    sub_20B1F16DC("cannot use operator[] with a string argument with ", &v15, &v16);
    sub_20B452958(305, (uint64_t)&v16, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  v3 = *(uint64_t **)(a1 + 8);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 == v5)
    return v4 + 24;
  v6 = *((_BYTE *)a2 + 23);
  if (v6 >= 0)
    v7 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  else
    v7 = a2[1];
  if (v6 >= 0)
    v8 = (unsigned __int8 *)a2;
  else
    v8 = *a2;
  do
  {
    v9 = *(unsigned __int8 *)(v4 + 23);
    if ((v9 & 0x80u) == 0)
      v10 = (unsigned __int8 *)*(unsigned __int8 *)(v4 + 23);
    else
      v10 = *(unsigned __int8 **)(v4 + 8);
    if (v10 == v7)
    {
      if ((v9 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v4, v8, *(_QWORD *)(v4 + 8)))
          return v4 + 24;
      }
      else
      {
        if (!*(_BYTE *)(v4 + 23))
          return v4 + 24;
        v11 = 0;
        while (*(unsigned __int8 *)(v4 + v11) == v8[v11])
        {
          if (v9 == ++v11)
            return v4 + 24;
        }
      }
    }
    v4 += 40;
  }
  while (v4 != v5);
  return v5 + 24;
}

void sub_20B4FA304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t *sub_20B4FA364(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const std::ios_base *v10;
  unsigned int fmtflags;
  const std::locale::facet *v12;
  lconv *v13;
  char *thousands_sep;
  char *decimal_point;
  _OWORD *v16;
  int8x16_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::locale v23;
  void (***v24)(void);
  std::__shared_weak_count *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  lconv *v30;
  char v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char v65;
  void *__p;
  uint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v6 = *((_QWORD *)v5 + 3);
  *((_QWORD *)v5 + 3) = 0;
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C41E600;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E5B0;
  v7[1].__shared_owners_ = (uint64_t)a1;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24));
  fmtflags = v10[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v10);
    v12 = std::locale::use_facet(&v23, MEMORY[0x24BEDB350]);
    fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
    std::locale::~locale(&v23);
    v10[1].__fmtflags_ = fmtflags;
  }
  v24 = (void (***)(void))&v7[1];
  v25 = v7;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v13 = localeconv();
  v30 = v13;
  thousands_sep = v13->thousands_sep;
  if (thousands_sep)
    LOBYTE(thousands_sep) = *thousands_sep;
  v31 = (char)thousands_sep;
  decimal_point = v13->decimal_point;
  if (v13->decimal_point)
    LOBYTE(decimal_point) = *decimal_point;
  v32 = (char)decimal_point;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v65 = fmtflags;
  v16 = operator new(0x208uLL);
  __p = v16;
  v68 = 0x8000000000000208;
  v67 = 512;
  v17 = vdupq_n_s8(fmtflags);
  *v16 = v17;
  v16[1] = v17;
  v16[2] = v17;
  v16[3] = v17;
  v16[4] = v17;
  v16[5] = v17;
  v16[6] = v17;
  v16[7] = v17;
  v16[8] = v17;
  v16[9] = v17;
  v16[10] = v17;
  v16[11] = v17;
  v16[12] = v17;
  v16[13] = v17;
  v16[14] = v17;
  v16[15] = v17;
  v16[16] = v17;
  v16[17] = v17;
  v16[18] = v17;
  v16[19] = v17;
  v16[20] = v17;
  v16[21] = v17;
  v16[22] = v17;
  v16[23] = v17;
  v16[24] = v17;
  v16[25] = v17;
  v16[26] = v17;
  v16[27] = v17;
  v16[28] = v17;
  v16[29] = v17;
  v16[30] = v17;
  v16[31] = v17;
  *((_BYTE *)v16 + 512) = 0;
  v69 = 0;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  sub_20B4FADC0(&v24, a2, v6 > 0, v6 & ~(v6 >> 63), 0);
  if (SHIBYTE(v68) < 0)
    operator delete(__p);
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return a1;
}

void sub_20B4FA63C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4FA658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  sub_20AEC147C((uint64_t)&a12);
  sub_20AEC147C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20B4FA67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B4FBDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4FA690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B4FA6D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const std::ios_base *v10;
  unsigned int fmtflags;
  const std::locale::facet *v12;
  lconv *v13;
  char *thousands_sep;
  char *decimal_point;
  _OWORD *v16;
  int8x16_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::locale v23;
  void (***v24)(void);
  std::__shared_weak_count *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  lconv *v30;
  char v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char v65;
  void *__p;
  uint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v6 = *((_QWORD *)v5 + 3);
  *((_QWORD *)v5 + 3) = 0;
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C41E600;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E5B0;
  v7[1].__shared_owners_ = (uint64_t)a1;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24));
  fmtflags = v10[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v10);
    v12 = std::locale::use_facet(&v23, MEMORY[0x24BEDB350]);
    fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
    std::locale::~locale(&v23);
    v10[1].__fmtflags_ = fmtflags;
  }
  v24 = (void (***)(void))&v7[1];
  v25 = v7;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v13 = localeconv();
  v30 = v13;
  thousands_sep = v13->thousands_sep;
  if (thousands_sep)
    LOBYTE(thousands_sep) = *thousands_sep;
  v31 = (char)thousands_sep;
  decimal_point = v13->decimal_point;
  if (v13->decimal_point)
    LOBYTE(decimal_point) = *decimal_point;
  v32 = (char)decimal_point;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v65 = fmtflags;
  v16 = operator new(0x208uLL);
  __p = v16;
  v68 = 0x8000000000000208;
  v67 = 512;
  v17 = vdupq_n_s8(fmtflags);
  *v16 = v17;
  v16[1] = v17;
  v16[2] = v17;
  v16[3] = v17;
  v16[4] = v17;
  v16[5] = v17;
  v16[6] = v17;
  v16[7] = v17;
  v16[8] = v17;
  v16[9] = v17;
  v16[10] = v17;
  v16[11] = v17;
  v16[12] = v17;
  v16[13] = v17;
  v16[14] = v17;
  v16[15] = v17;
  v16[16] = v17;
  v16[17] = v17;
  v16[18] = v17;
  v16[19] = v17;
  v16[20] = v17;
  v16[21] = v17;
  v16[22] = v17;
  v16[23] = v17;
  v16[24] = v17;
  v16[25] = v17;
  v16[26] = v17;
  v16[27] = v17;
  v16[28] = v17;
  v16[29] = v17;
  v16[30] = v17;
  v16[31] = v17;
  *((_BYTE *)v16 + 512) = 0;
  v69 = 0;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  sub_20B4FD030(&v24, a2, v6 > 0, v6 & ~(v6 >> 63), 0);
  if (SHIBYTE(v68) < 0)
    operator delete(__p);
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return a1;
}

void sub_20B4FA9B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4FA9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  sub_20AEC147C((uint64_t)&a12);
  sub_20AEC147C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20B4FA9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B4FBDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B4FAA04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_20B4FAA4C(_BYTE *result, int a2)
{
  _BYTE *v2;
  _QWORD *v3;
  _BYTE *v4;
  _QWORD *v5;

  v2 = result;
  *result = a2;
  switch(a2)
  {
    case 1:
    case 2:
      v3 = operator new(0x18uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
      *((_QWORD *)v2 + 1) = v3;
      result = v2;
      break;
    case 3:
      v4 = operator new(0x18uLL);
      v4[23] = 0;
      *v4 = 0;
      *((_QWORD *)v2 + 1) = v4;
      result = v2;
      break;
    case 4:
      result[8] = 0;
      break;
    case 8:
      v5 = operator new(0x20uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = 0;
      *((_WORD *)v5 + 12) = 0;
      *((_QWORD *)v2 + 1) = v5;
      result = v2;
      break;
    default:
      *((_QWORD *)result + 1) = 0;
      break;
  }
  return result;
}

void sub_20B4FAB1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  size_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__dst[2];
  unint64_t v19;
  _QWORD v20[5];
  _QWORD *v21;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20AEC0BD8(v4);
  v20[0] = v4;
  sub_20B4FA364((uint64_t *)(v4 + 16), *a2);
  v5 = *(_DWORD *)(v4 + 120);
  if ((v5 & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v4 + 112);
    v9 = *(_QWORD *)(v4 + 72);
    if (v8 < v9)
    {
      *(_QWORD *)(v4 + 112) = v9;
      v8 = v9;
    }
    v10 = *(const void **)(v4 + 64);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v5 & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v19) = 0;
      v7 = __dst;
      goto LABEL_14;
    }
    v10 = *(const void **)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 56) - (_QWORD)v10;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v7 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v6;
    v19 = v12 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_13;
  }
  HIBYTE(v19) = v6;
  v7 = __dst;
  if (v6)
LABEL_13:
    memmove(v7, v10, v6);
LABEL_14:
  *((_BYTE *)v7 + v6) = 0;
  v13 = v20[0];
  if (v20[0])
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v20[0] = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)(v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    *(_QWORD *)(v13 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v13 + 16) = v16;
    if (*(char *)(v13 + 111) < 0)
      operator delete(*(void **)(v13 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v13 + 128);
    MEMORY[0x20BD3583C](v13, 0x10B2C40EED050F3);
  }
  v20[0] = a1;
  v20[1] = __dst;
  v20[2] = a1;
  v20[3] = __dst;
  v20[4] = __dst;
  v17 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v17 == -1)
    sub_20AECFAB8();
  v21 = v20;
  ((void (*)(_QWORD **, uint64_t))off_24C41E4B0[v17])(&v21, a1);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_20B4FAD6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B4FAD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B4FADAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void (****sub_20B4FADC0(void (****result)(void), uint64_t a2, int a3, uint64_t a4, uint64_t a5))(void)
{
  void (****v8)(void);
  void (**v9)(void);
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  void (*v17)(void);
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(void);
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t (*v28)(void);
  unint64_t v29;
  _BYTE *v30;
  unsigned int v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  void (*v35)(void);
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t (***v39)(void);
  _QWORD *v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  void (****v53)(void);
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  BOOL v70;
  _QWORD *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t *v75;
  _QWORD *v76;
  unint64_t v77;
  char *v78;
  char v79;
  char *v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(void);
  char *v92;
  char v93;
  unint64_t v94;

  v8 = result;
  switch(*(_BYTE *)a2)
  {
    case 0:
      goto LABEL_34;
    case 1:
      v9 = **result;
      if (!*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16))
      {
        v28 = (uint64_t (*)(void))v9[1];
        return (void (****)(void))v28();
      }
      if (a3)
      {
        v9[1]();
        v10 = (a5 + a4);
        v11 = v8 + 76;
        if (*((char *)v8 + 631) < 0)
        {
          v12 = (unint64_t)v8[77];
          if (v12 >= v10)
          {
LABEL_6:
            v13 = *(_QWORD **)(a2 + 8);
            v14 = (_QWORD *)*v13;
            if (v13[2] == 1)
            {
LABEL_7:
              v15 = v14;
LABEL_8:
              v16 = v8 + 76;
              if (*((char *)v8 + 631) < 0)
                v16 = (_QWORD *)*v11;
              ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v8)[1])(*v8, v16, (a5 + a4));
              ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
              sub_20B4FBEC0((uint64_t)v8, v15 + 4);
              ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\": ", 3);
              sub_20B4FADC0(v8, v15 + 7, 1, a4, (a5 + a4));
              ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 10);
              v17 = (**v8)[1];
              goto LABEL_175;
            }
LABEL_102:
            v72 = 0;
            do
            {
              v73 = v8 + 76;
              if (*((char *)v8 + 631) < 0)
                v73 = (_QWORD *)*v11;
              ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v8)[1])(*v8, v73, (a5 + a4));
              ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
              sub_20B4FBEC0((uint64_t)v8, v14 + 4);
              ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\": ", 3);
              sub_20B4FADC0(v8, v14 + 7, 1, a4, (a5 + a4));
              ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, ",\n", 2);
              v74 = (_QWORD *)v14[1];
              if (v74)
              {
                do
                {
                  v15 = v74;
                  v74 = (_QWORD *)*v74;
                }
                while (v74);
              }
              else
              {
                do
                {
                  v15 = (_QWORD *)v14[2];
                  v70 = *v15 == (_QWORD)v14;
                  v14 = v15;
                }
                while (!v70);
              }
              ++v72;
              v14 = v15;
            }
            while (v72 < *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) - 1);
            goto LABEL_8;
          }
        }
        else
        {
          v12 = *((unsigned __int8 *)v8 + 631);
          if (v10 <= v12)
            goto LABEL_6;
        }
        std::string::resize((std::string *)(v8 + 76), 2 * v12, 32);
        v71 = *(_QWORD **)(a2 + 8);
        v14 = (_QWORD *)*v71;
        if (v71[2] == 1)
          goto LABEL_7;
        goto LABEL_102;
      }
      (*v9)();
      v48 = *(_QWORD **)(a2 + 8);
      v49 = (_QWORD *)*v48;
      if (v48[2] == 1)
      {
        v50 = (_QWORD *)*v48;
      }
      else
      {
        v68 = 0;
        do
        {
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
          sub_20B4FBEC0((uint64_t)v8, v49 + 4);
          ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\":", 2);
          sub_20B4FADC0(v8, v49 + 7, 0, a4, a5);
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 44);
          v69 = (_QWORD *)v49[1];
          if (v69)
          {
            do
            {
              v50 = v69;
              v69 = (_QWORD *)*v69;
            }
            while (v69);
          }
          else
          {
            do
            {
              v50 = (_QWORD *)v49[2];
              v70 = *v50 == (_QWORD)v49;
              v49 = v50;
            }
            while (!v70);
          }
          ++v68;
          v49 = v50;
        }
        while (v68 < *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) - 1);
      }
      ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
      sub_20B4FBEC0((uint64_t)v8, v50 + 4);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\":", 2);
      sub_20B4FADC0(v8, v50 + 7, 0, a4, a5);
      goto LABEL_176;
    case 2:
      v18 = *(uint64_t **)(a2 + 8);
      v19 = *v18;
      v20 = v18[1];
      v21 = **result;
      if (v19 == v20)
      {
        v28 = (uint64_t (*)(void))v21[1];
        return (void (****)(void))v28();
      }
      if (a3)
      {
        v21[1]();
        v22 = (a5 + a4);
        v23 = v8 + 76;
        if (*((char *)v8 + 631) < 0)
        {
          v24 = (unint64_t)v8[77];
          if (v24 >= v22)
          {
LABEL_15:
            v25 = *(uint64_t **)(a2 + 8);
            v26 = *v25;
            if (*v25 != v25[1] - 16)
              goto LABEL_16;
            goto LABEL_114;
          }
        }
        else
        {
          v24 = *((unsigned __int8 *)v8 + 631);
          if (v22 <= v24)
            goto LABEL_15;
        }
        std::string::resize((std::string *)(v8 + 76), 2 * v24, 32);
        v75 = *(uint64_t **)(a2 + 8);
        v26 = *v75;
        if (*v75 != v75[1] - 16)
        {
          do
          {
LABEL_16:
            ((void (*)(void (***)(void)))(**v8)[1])(*v8);
            sub_20B4FADC0(v8, v26, 1, a4, (a5 + a4));
            ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, ",\n", 2);
            v26 += 16;
          }
          while (v26 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16);
        }
LABEL_114:
        v76 = v8 + 76;
        if (*((char *)v8 + 631) < 0)
          v76 = (_QWORD *)*v23;
        ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v8)[1])(*v8, v76, (a5 + a4));
        sub_20B4FADC0(v8, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16, 1, a4, (a5 + a4));
        ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 10);
        if (*((char *)v8 + 631) < 0)
          v23 = (_QWORD *)*v23;
        ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v8)[1])(*v8, v23, a5);
        goto LABEL_119;
      }
      (*v21)();
      v51 = *(uint64_t **)(a2 + 8);
      v52 = *v51;
      v53 = v8;
      if (*v51 != v51[1] - 16)
      {
        do
        {
          sub_20B4FADC0(v53, v52, 0, a4, a5);
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 44);
          v52 += 16;
          v53 = v8;
        }
        while (v52 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16);
      }
      sub_20B4FADC0(v53, v52, 0, a4, a5);
LABEL_119:
      v27 = (uint64_t (*)(void))***v8;
      return (void (****)(void))v27();
    case 3:
      (***result)();
      sub_20B4FBEC0((uint64_t)v8, *(uint64_t **)(a2 + 8));
      v27 = (uint64_t (*)(void))***v8;
      return (void (****)(void))v27();
    case 4:
      v28 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v28();
    case 5:
      v29 = *(_QWORD *)(a2 + 8);
      if (!v29)
        goto LABEL_40;
      v30 = result + 2;
      if ((v29 & 0x8000000000000000) != 0)
      {
        *v30 = 45;
        v29 = -(uint64_t)v29;
        if (v29 >= 0xA)
        {
          v58 = 4;
          v77 = v29;
          do
          {
            if (v77 <= 0x63)
            {
              v58 -= 2;
              goto LABEL_180;
            }
            if (v77 <= 0x3E7)
            {
              --v58;
              goto LABEL_180;
            }
            if (v77 >> 4 < 0x271)
              goto LABEL_180;
            v58 += 4;
            v33 = v77 >= 0x186A0;
            v77 /= 0x2710uLL;
          }
          while (v33);
          v58 -= 3;
        }
        else
        {
          v58 = 1;
        }
LABEL_180:
        v31 = v58 + 1;
        goto LABEL_181;
      }
      if (v29 < 0xA)
        goto LABEL_31;
      v31 = 4;
      v32 = *(_QWORD *)(a2 + 8);
      while (1)
      {
        if (v32 <= 0x63)
        {
          v31 -= 2;
          goto LABEL_181;
        }
        if (v32 <= 0x3E7)
          break;
        if (v32 >> 4 < 0x271)
          goto LABEL_181;
        v31 += 4;
        v33 = v32 >= 0x186A0;
        v32 /= 0x2710uLL;
        if (!v33)
        {
          v31 -= 3;
          goto LABEL_181;
        }
      }
      --v31;
LABEL_181:
      v34 = (uint64_t)&v30[v31];
      if (v29 < 0x64)
      {
        v82 = v29;
      }
      else
      {
        do
        {
          v82 = v29 / 0x64;
          *(_WORD *)(v34 - 2) = *(_WORD *)&a00010203040506[2 * (v29 % 0x64)];
          v34 -= 2;
          v94 = v29 >> 4;
          v29 /= 0x64uLL;
        }
        while (v94 > 0x270);
      }
      if (v82 >= 0xA)
        goto LABEL_186;
      goto LABEL_139;
    case 6:
      v29 = *(_QWORD *)(a2 + 8);
      if (!v29)
      {
LABEL_40:
        v27 = (uint64_t (*)(void))***result;
        return (void (****)(void))v27();
      }
      if (v29 < 0xA)
      {
LABEL_31:
        v34 = (uint64_t)result + 17;
        goto LABEL_140;
      }
      v54 = 4;
      v55 = *(_QWORD *)(a2 + 8);
      while (2)
      {
        if (v55 <= 0x63)
        {
          v54 -= 2;
        }
        else
        {
          if (v55 > 0x3E7)
          {
            if (v55 >> 4 < 0x271)
              break;
            v54 += 4;
            v33 = v55 >= 0x186A0;
            v55 /= 0x2710uLL;
            if (!v33)
            {
              v54 -= 3;
              break;
            }
            continue;
          }
          --v54;
        }
        break;
      }
      v34 = (uint64_t)result + v54 + 16;
      if (v29 < 0x64)
      {
        v82 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        do
        {
          v82 = v29 / 0x64;
          *(_WORD *)(v34 - 2) = *(_WORD *)&a00010203040506[2 * (v29 % 0x64)];
          v34 -= 2;
          v83 = v29 >> 4;
          v29 /= 0x64uLL;
        }
        while (v83 > 0x270);
      }
      if (v82 >= 0xA)
      {
LABEL_186:
        *(_WORD *)(v34 - 2) = *(_WORD *)&a00010203040506[2 * v82];
      }
      else
      {
LABEL_139:
        LOBYTE(v29) = v82;
LABEL_140:
        *(_BYTE *)(v34 - 1) = v29 + 48;
      }
      v28 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v28();
    case 7:
      if ((*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_34:
        v28 = (uint64_t (*)(void))(**result)[1];
      }
      else
      {
        sub_20B4FC48C((char *)result + 16, *(double *)(a2 + 8));
        v28 = (uint64_t (*)(void))(**v8)[1];
      }
      return (void (****)(void))v28();
    case 8:
      v35 = (**result)[1];
      if (!a3)
      {
        v35();
        v41 = *(_QWORD *)(a2 + 8);
        v43 = *(_BYTE **)v41;
        v42 = *(_BYTE **)(v41 + 8);
        if (v43 == v42)
          goto LABEL_146;
        if (v43 != v42 - 1)
        {
          while (1)
          {
            v44 = *v43;
            if (*v43)
              break;
            ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
LABEL_45:
            ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 44);
            if (++v43 == (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1))
              goto LABEL_68;
          }
          if (v44 >= 0xA)
          {
            if (v44 < 0x64)
            {
              v46 = &a00010203040506[2 * v44];
              *((_BYTE *)v8 + 17) = v46[1];
              v47 = *v46;
              v45 = 2;
LABEL_53:
              *((_BYTE *)v8 + 16) = v47;
              ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v45);
              goto LABEL_45;
            }
            *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v43 % 0x64u)];
            LODWORD(v44) = (41 * v44) >> 12;
            v45 = 3;
          }
          else
          {
            v45 = 1;
          }
          v47 = v44 | 0x30;
          goto LABEL_53;
        }
LABEL_68:
        v56 = *v43;
        if (!*v43)
        {
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
          goto LABEL_146;
        }
        if (v56 >= 0xA)
        {
          if (v56 < 0x64)
          {
            v78 = &a00010203040506[2 * v56];
            *((_BYTE *)v8 + 17) = v78[1];
            v79 = *v78;
            v57 = 2;
LABEL_145:
            *((_BYTE *)v8 + 16) = v79;
            ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v57);
LABEL_146:
            ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "],\"subtype\":", 12);
            v84 = *(_QWORD *)(a2 + 8);
            if (!*(_BYTE *)(v84 + 25))
            {
              v28 = (uint64_t (*)(void))(**v8)[1];
              return (void (****)(void))v28();
            }
            v85 = *(unsigned __int8 *)(v84 + 24);
            if (!v85)
            {
              ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
              goto LABEL_176;
            }
            if (v85 >= 0xA)
            {
              if (v85 < 0x64)
              {
                v86 = &a00010203040506[2 * v85];
                *((_BYTE *)v8 + 17) = v86[1];
                v87 = *v86;
LABEL_169:
                *((_BYTE *)v8 + 16) = v87;
                v17 = (**v8)[1];
                goto LABEL_175;
              }
              *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2
                                                                     * (v85
                                                                                       - 100
                                                                                       * ((41 * v85) >> 12))];
              LODWORD(v85) = (41 * v85) >> 12;
            }
            v87 = v85 | 0x30;
            goto LABEL_169;
          }
          *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v43 % 0x64u)];
          v57 = 3;
          LODWORD(v56) = (41 * v56) >> 12;
        }
        else
        {
          v57 = 1;
        }
        v79 = v56 | 0x30;
        goto LABEL_145;
      }
      v35();
      v36 = (a5 + a4);
      v37 = v8 + 76;
      if (*((char *)v8 + 631) < 0)
      {
        v38 = (unint64_t)v8[77];
        if (v38 >= v36)
        {
          v39 = (uint64_t (***)(void))*v8;
LABEL_75:
          v40 = (_QWORD *)*v37;
          goto LABEL_76;
        }
      }
      else
      {
        v38 = *((unsigned __int8 *)v8 + 631);
        if (v36 <= v38)
        {
          v39 = (uint64_t (***)(void))*v8;
          v40 = v8 + 76;
          goto LABEL_76;
        }
      }
      std::string::resize((std::string *)(v8 + 76), 2 * v38, 32);
      v39 = (uint64_t (***)(void))*v8;
      v40 = v8 + 76;
      if (*((char *)v8 + 631) < 0)
        goto LABEL_75;
LABEL_76:
      ((void (*)(uint64_t (***)(void), _QWORD *, unint64_t))(*v39)[1])(v39, v40, v36);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\"bytes\": [", 10);
      v59 = *(_QWORD *)(a2 + 8);
      v61 = *(_BYTE **)v59;
      v60 = *(_BYTE **)(v59 + 8);
      if (v61 == v60)
        goto LABEL_157;
      if (v61 != v60 - 1)
      {
        while (1)
        {
          v62 = *v61;
          if (*v61)
            break;
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
LABEL_80:
          ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, ", ", 2);
          if (++v61 == (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1))
            goto LABEL_89;
        }
        if (v62 >= 0xA)
        {
          if (v62 < 0x64)
          {
            v64 = &a00010203040506[2 * v62];
            *((_BYTE *)v8 + 17) = v64[1];
            v65 = *v64;
            v63 = 2;
LABEL_88:
            *((_BYTE *)v8 + 16) = v65;
            ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v63);
            goto LABEL_80;
          }
          *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v61 % 0x64u)];
          LODWORD(v62) = (41 * v62) >> 12;
          v63 = 3;
        }
        else
        {
          v63 = 1;
        }
        v65 = v62 | 0x30;
        goto LABEL_88;
      }
LABEL_89:
      v66 = *v61;
      if (!*v61)
      {
        ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
        goto LABEL_157;
      }
      if (v66 < 0xA)
      {
        v67 = 1;
LABEL_155:
        v81 = v66 | 0x30;
        goto LABEL_156;
      }
      if (v66 >= 0x64)
      {
        *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v61 % 0x64u)];
        v67 = 3;
        LODWORD(v66) = (41 * v66) >> 12;
        goto LABEL_155;
      }
      v80 = &a00010203040506[2 * v66];
      *((_BYTE *)v8 + 17) = v80[1];
      v81 = *v80;
      v67 = 2;
LABEL_156:
      *((_BYTE *)v8 + 16) = v81;
      ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v67);
LABEL_157:
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "],\n", 3);
      v88 = v8 + 76;
      if (*((char *)v8 + 631) < 0)
        v88 = (_QWORD *)*v37;
      ((void (*)(void (***)(void), _QWORD *, unint64_t))(**v8)[1])(*v8, v88, v36);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\"subtype\": ", 11);
      v89 = *(_QWORD *)(a2 + 8);
      if (!*(_BYTE *)(v89 + 25))
      {
        v91 = (**v8)[1];
LABEL_173:
        v91();
        goto LABEL_174;
      }
      v90 = *(unsigned __int8 *)(v89 + 24);
      if (v90)
      {
        if (v90 >= 0xA)
        {
          if (v90 < 0x64)
          {
            v92 = &a00010203040506[2 * v90];
            *((_BYTE *)v8 + 17) = v92[1];
            v93 = *v92;
LABEL_172:
            *((_BYTE *)v8 + 16) = v93;
            v91 = (**v8)[1];
            goto LABEL_173;
          }
          *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2
                                                                 * (v90
                                                                                   - 100
                                                                                   * ((41 * v90) >> 12))];
          LODWORD(v90) = (41 * v90) >> 12;
        }
        v93 = v90 | 0x30;
        goto LABEL_172;
      }
      ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
LABEL_174:
      ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 10);
      v17 = (**v8)[1];
LABEL_175:
      v17();
LABEL_176:
      v27 = (uint64_t (*)(void))***v8;
      return (void (****)(void))v27();
    case 9:
      v28 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v28();
    default:
      return result;
  }
}

uint64_t sub_20B4FBDC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(char *)(a1 + 631) < 0)
  {
    operator delete(*(void **)(a1 + 608));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B4FBE48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B4FBE58(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E508;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4FBE88(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_20B4FBE98(uint64_t a1, std::string::value_type a2)
{
  std::string::push_back(*(std::string **)(a1 + 8), a2);
}

std::string *sub_20B4FBEA0(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  return std::string::append(*(std::string **)(a1 + 8), a2, a3);
}

void sub_20B4FBEAC()
{
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B4FBEC0(uint64_t result, uint64_t *a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  int v20;
  void *exception;
  char *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  uint64_t *v26;
  void *v27;
  std::string v28;
  std::string v29;
  std::string v30;
  __int128 v31;
  std::string::size_type v32;
  char __str[8];
  std::string::size_type v34;
  char v35;

  LOBYTE(v2) = *((char *)a2 + 23) < 0;
  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  if (!v3)
    return result;
  v5 = (_QWORD *)result;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = result + 90;
  do
  {
    if ((v2 & 1) != 0)
      v15 = (uint64_t *)*a2;
    else
      v15 = a2;
    v16 = *((unsigned __int8 *)v15 + v6);
    if (v10)
      v11 = *((_BYTE *)v15 + v6) & 0x3F | (v11 << 6);
    else
      v11 = (0xFFu >> byte_20B6102F0[v16]) & v16;
    v10 = byte_20B6102F0[16 * v10 + 256 + byte_20B6102F0[v16]];
    if (v10 != 1)
    {
      if (v10)
      {
        *(_BYTE *)(v12 + v9++) = *((_BYTE *)v15 + v6);
        ++v7;
        goto LABEL_6;
      }
      switch(v11)
      {
        case 8u:
          *(_WORD *)(v12 + v9) = 25180;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 9u:
          *(_WORD *)(v12 + v9) = 29788;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0xAu:
          *(_WORD *)(v12 + v9) = 28252;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0xBu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
          goto LABEL_30;
        case 0xCu:
          *(_WORD *)(v12 + v9) = 26204;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0xDu:
          *(_WORD *)(v12 + v9) = 29276;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0x22u:
          *(_WORD *)(v12 + v9) = 8796;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        default:
          if (v11 == 92)
          {
            *(_WORD *)(v12 + v9) = 23644;
            v9 += 2;
            if ((unint64_t)(v9 - 500) > 0xC)
              goto LABEL_23;
          }
          else
          {
LABEL_30:
            if (v11 > 0x1F)
            {
              *(_BYTE *)(v12 + v9++) = *((_BYTE *)v15 + v6);
              if ((unint64_t)(v9 - 500) > 0xC)
                goto LABEL_23;
            }
            else
            {
              result = snprintf((char *)(v12 + v9), 7uLL, "\\u%04x", v11);
              v9 += 6;
              if ((unint64_t)(v9 - 500) > 0xC)
                goto LABEL_23;
            }
          }
          break;
      }
LABEL_34:
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v12, v9);
      v10 = 0;
      v9 = 0;
      v8 = 0;
      v7 = 0;
      goto LABEL_6;
    }
    v17 = *((_DWORD *)v5 + 158);
    if ((v17 - 1) < 2)
    {
      v6 -= v7 != 0;
      if (v17 != 1)
      {
        v10 = 0;
        v7 = 0;
        v9 = v8;
        goto LABEL_6;
      }
      v9 = v8 + 3;
      v18 = v12 + v8;
      *(_WORD *)v18 = -16401;
      *(_BYTE *)(v18 + 2) = -67;
      if ((unint64_t)(v8 - 497) > 0xC)
      {
LABEL_23:
        v10 = 0;
        v7 = 0;
        v8 = v9;
        goto LABEL_6;
      }
      goto LABEL_34;
    }
    if (!v17)
    {
      v35 = 3;
      *(_DWORD *)__str = 0;
      snprintf(__str, 3uLL, "%.2X", v16);
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v28, v6);
      sub_20B1F16DC("invalid UTF-8 byte at index ", &v28, &v29);
      sub_20B214D58(": 0x", &v29, &v30);
      if (v35 >= 0)
        v22 = __str;
      else
        v22 = *(char **)__str;
      if (v35 >= 0)
        v23 = v35;
      else
        v23 = v34;
      v24 = std::string::append(&v30, v22, v23);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v32 = v24->__r_.__value_.__r.__words[2];
      v31 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      sub_20B452958(316, (uint64_t)&v31, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
    }
    v10 = 1;
LABEL_6:
    ++v6;
    v13 = *((char *)a2 + 23);
    v2 = v13 >> 31;
    v14 = a2[1];
    if (v13 >= 0)
      v14 = *((unsigned __int8 *)a2 + 23);
  }
  while (v6 < v14);
  if (v10)
  {
    v20 = *((_DWORD *)v5 + 158);
    switch(v20)
    {
      case 1:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v12, v8);
        v19 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
        break;
      case 2:
        v19 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
        break;
      case 0:
        v35 = 3;
        *(_DWORD *)__str = 0;
        v26 = (uint64_t *)*a2;
        if (v13 >= 0)
          v26 = a2;
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v26 + v14 - 1));
        v27 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        sub_20B452958(316, (uint64_t)&v31, (uint64_t)v27);
        __cxa_throw(v27, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
      default:
        return result;
    }
    return v19();
  }
  if (v9)
  {
    v19 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
    return v19();
  }
  return result;
}

void sub_20B4FC3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  int v40;

  if (a33 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0)
      goto LABEL_7;
  }
  else if (!v40)
  {
LABEL_7:
    if (a39 < 0)
      operator delete(a34);
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v39);
  goto LABEL_7;
}

char *sub_20B4FC48C(char *__src, double a2)
{
  char *v2;
  char *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  size_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unsigned int v99;
  char v100;
  char v101;
  uint64_t v102;
  unsigned __int8 v103;

  v2 = __src;
  if ((*(_QWORD *)&a2 & 0x8000000000000000) != 0)
  {
    a2 = -a2;
    *__src = 45;
    v2 = __src + 1;
    if (a2 == 0.0)
      goto LABEL_3;
  }
  else if (a2 == 0.0)
  {
LABEL_3:
    *(_WORD *)v2 = 11824;
    result = v2 + 3;
    v2[2] = 48;
    return result;
  }
  v4 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)&a2 >> 52;
  if (*(_QWORD *)&a2 >> 52)
  {
    v6 = 2 * (v4 | 0x10000000000000);
    v7 = (2 * (*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000)) | 1;
    v8 = v5 - 1076;
    if (*(_QWORD *)&a2 >> 53 && !v4)
    {
      v9 = v5 - 53;
      v10 = 0x3FFFFFFFFFFFFFLL;
      v4 = 0x10000000000000;
      goto LABEL_12;
    }
    v4 |= 0x10000000000000uLL;
  }
  else
  {
    v6 = 2 * v4;
    v7 = (2 * (*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL)) | 1;
    v8 = -1075;
  }
  v10 = v6 - 1;
  v9 = v8;
LABEL_12:
  v11 = -v8;
  v12 = -4813693 - 78913 * v8;
  do
  {
    v13 = v7;
    v7 *= 2;
    ++v11;
    v12 += 78913;
  }
  while ((v7 & 0x8000000000000000) == 0);
  do
  {
    v14 = v4;
    v4 *= 2;
  }
  while ((v4 & 0x8000000000000000) == 0);
  v15 = v10 << (v9 + v11);
  v16 = v12 / 0x40000;
  if (v11 - 61 > 0)
    ++v16;
  v17 = (char *)&unk_20B60FE00 + 16 * ((int)((v16 + 307 + (((v16 + 307) >> 28) & 7)) << 16) >> 19);
  v18 = *(_QWORD *)v17;
  v19 = v17 + 8;
  v20 = v4 & 0xFFFFFFFE;
  v21 = v14 >> 31;
  v22 = HIDWORD(*(_QWORD *)v17);
  v23 = *(_QWORD *)v17 * (unint64_t)v20;
  v24 = HIDWORD(*(_QWORD *)v17) * (unint64_t)v20;
  v25 = HIDWORD(v24);
  v26 = (*(_QWORD *)v17 * (v14 >> 31)) >> 32;
  v27 = ((v24 & 0xFFFFFFFE)
       + HIDWORD(v23)
       + *(_QWORD *)v17 * (v14 >> 31)
       + 0x80000000) >> 32;
  v28 = HIDWORD(v15);
  v29 = HIDWORD(*(_QWORD *)v17) * (unint64_t)v15;
  v30 = *(_QWORD *)v17 * (unint64_t)HIDWORD(v15);
  v31 = HIDWORD(*(_QWORD *)v17) * (unint64_t)HIDWORD(v15);
  v32 = HIDWORD(v29);
  v33 = ((*(_QWORD *)v17 * (unint64_t)v15) >> 32)
      + v29
      + v30
      + 0x80000000;
  v34 = v11 - *((_DWORD *)v17 + 2);
  v35 = v34 - 64;
  v36 = v7 & 0xFFFFFFFE;
  v37 = v13 >> 31;
  v38 = v18 * (unint64_t)v36;
  v39 = HIDWORD(v18) * (unint64_t)v36;
  v40 = v18 * (v13 >> 31);
  v41 = HIDWORD(v18) * v37;
  v42 = HIDWORD(v39);
  v43 = HIDWORD(v40);
  v44 = ((v39 & 0xFFFFFFFE) + HIDWORD(v38) + v40 + 0x80000000) >> 32;
  v45 = v41 + HIDWORD(v39) + HIDWORD(v40) + v44 - 1;
  v46 = -*((_DWORD *)v19 + 1);
  v47 = v32 + HIDWORD(v30) + HIDWORD(v33);
  v48 = ~v31 - v47 + v45;
  v49 = v26 + v22 * (v14 >> 31) + v25 + v27;
  v50 = v45 - v49;
  v51 = 1 << v34;
  v52 = v45 >> v34;
  v53 = (1 << v34) - 1;
  v54 = v45 & v53;
  if (v52 <= 0x3B9AC9FF)
  {
    if (v52 <= 0x5F5E0FF)
    {
      if (v52 <= 0x98967F)
      {
        if (v52 <= 0xF423F)
        {
          v57 = v52 >> 5;
          if (v52 <= 9)
            v58 = 1;
          else
            v58 = 10;
          if (v52 <= 9)
            v59 = 1;
          else
            v59 = 2;
          if (v52 <= 0x63)
            v60 = v58;
          else
            v60 = 100;
          if (v52 <= 0x63)
            v56 = v59;
          else
            v56 = 3;
          if (v52 > 0x3E7)
          {
            v60 = 1000;
            v56 = 4;
          }
          if (v52 >> 4 > 0x270)
          {
            v60 = 10000;
            v56 = 5;
          }
          v61 = v57 > 0xC34;
          if (v57 > 0xC34)
            v55 = 100000;
          else
            v55 = v60;
          if (v61)
            v56 = 6;
        }
        else
        {
          v55 = 1000000;
          v56 = 7;
        }
      }
      else
      {
        v55 = 10000000;
        v56 = 8;
      }
    }
    else
    {
      v55 = 100000000;
      v56 = 9;
    }
  }
  else
  {
    v55 = 1000000000;
    v56 = 10;
  }
  v62 = 0;
  v63 = v42 + v43 + v41;
  v64 = v56;
  v65 = ~v49 + v63 + v44;
  v66 = v42 - v47 + v43 + v44 + v22 * (v37 - v28) - 2;
  v67 = v54 - v42 - v43 - v44 + v25 + v26 + v27 + v22 * (v21 - v37) + 1;
  while (v62 != v64)
  {
    v68 = v62;
    v69 = v52 / v55;
    v52 = v52 % v55;
    v70 = v69 + 48;
    v62 = v68 + 1;
    v2[v68] = v70;
    --v56;
    v71 = v52 << v35;
    v72 = (v52 << v35) + v54;
    if (v48 < v72)
    {
      v55 /= 0xAu;
    }
    else
    {
      v46 += v56;
      v73 = (unint64_t)v55 << v35;
      if (v72 >= v50 || v48 - v72 < v73)
        goto LABEL_71;
      v75 = 0;
      v76 = v54 + v71 + v73;
      v77 = v66 - v76;
      v78 = v67 + v71 + v73;
      do
      {
        if (v76 >= v50 && v65 - v72 + v75 <= v78)
          break;
        v2[v68] = --v70;
        if (v76 >= v50)
          break;
        v79 = v77 + v75;
        v75 -= v73;
        v76 += v73;
        v78 += v73;
      }
      while (v79 >= v73);
    }
    if (v48 >= v72)
      goto LABEL_71;
  }
  do
  {
    v80 = v48;
    v81 = v50;
    v82 = (10 * v54) >> v35;
    v54 = (10 * v54) & v53;
    v83 = v82 + 48;
    v2[v64++] = v82 + 48;
    v48 = 10 * v80;
    v50 *= 10;
    --v46;
  }
  while (10 * v80 < v54);
  if (v54 < v50 && 10 * v80 - v54 >= v51)
  {
    v84 = 10 * v81;
    v85 = -(uint64_t)v54;
    v86 = 10 * v80 - v51;
    v87 = v51 + v54;
    v88 = -10 * v81;
    do
    {
      if (v87 >= v50 && v84 + v85 <= v88 + v87)
        break;
      v2[v64 - 1] = --v83;
      if (v87 >= v50)
        break;
      v89 = v86 + v85;
      v85 -= v51;
      v87 += v51;
    }
    while (v89 >= v51);
  }
  LODWORD(v62) = v64;
LABEL_71:
  v90 = v46 + (uint64_t)(int)v62;
  if ((v46 & 0x80000000) == 0 && (int)v90 <= 15)
  {
    memset(&v2[(int)v62], 48, v46);
    *(_WORD *)&v2[v90] = 12334;
    return &v2[v90 + 2];
  }
  if ((v90 - 16) >= 0xFFFFFFF1)
  {
    v93 = v90;
    v94 = &v2[v90];
    v95 = (int)v62;
    memmove(v94 + 1, v94, (int)v62 - v93);
    *v94 = 46;
    return &v2[v95 + 1];
  }
  if ((_DWORD)v90 == 0 || v90 >= 0xFFFFFFFD)
  {
    v91 = -(int)v90;
    v92 = (int)v62;
    memmove(&v2[v91 + 2], v2, (int)v62);
    *(_WORD *)v2 = 11824;
    memset(v2 + 2, 48, v91);
    return &v2[v92 + 2 + v91];
  }
  if ((_DWORD)v62 == 1)
  {
    v96 = 1;
  }
  else
  {
    v97 = (int)v62;
    memmove(v2 + 2, v2 + 1, (int)v62 - 1);
    v2[1] = 46;
    v96 = v97 + 1;
  }
  v98 = &v2[v96];
  *v98 = 101;
  v99 = v90 - 1;
  if ((int)v90 >= 1)
    v100 = 43;
  else
    v100 = 45;
  if ((int)v90 - 1 < 0)
    v99 = 1 - v90;
  v98[1] = v100;
  if (v99 > 9)
  {
    if (v99 > 0x63)
    {
      v98[2] = v99 / 0x64 + 48;
      v103 = v99 % 0x64;
      v98[3] = (v103 / 0xAu) | 0x30;
      v98[4] = (v103 % 0xAu) | 0x30;
      v102 = 2;
      return &v98[v102 + 3];
    }
    v98[2] = v99 / 0xAu + 48;
    v101 = (v99 % 0xAu) | 0x30;
  }
  else
  {
    v98[2] = 48;
    v101 = v99 + 48;
  }
  v98[3] = v101;
  v102 = 1;
  return &v98[v102 + 3];
}

void (****sub_20B4FCB4C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5))(void)
{
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t (*v31)(void);
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;

  v10 = *a2;
  if (v10 == 2)
  {
    v22 = (uint64_t *)*((_QWORD *)a2 + 1);
    v23 = *v22;
    v24 = v22[1];
    v25 = **(_QWORD **)(a1 + 640);
    if (v23 != v24)
    {
      (*(void (**)(void))v25)();
      v26 = (uint64_t *)*((_QWORD *)a2 + 1);
      v27 = *v26;
      v28 = a1;
      if (*v26 != v26[1] - 16)
      {
        do
        {
          sub_20B4FCB4C(v28, v27, a3, a4, a5);
          (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 44);
          v27 += 16;
          v28 = a1;
        }
        while (v27 != *(_QWORD *)(*((_QWORD *)a2 + 1) + 8) - 16);
      }
      sub_20B4FCB4C(v28, v27, a3, a4, a5);
      v29 = ***(uint64_t (****)(void))(a1 + 640);
      return (void (****)(void))v29();
    }
    v31 = *(uint64_t (**)(void))(v25 + 8);
    return (void (****)(void))v31();
  }
  if (v10 != 1)
    return sub_20B4FADC0((void (****)(void))a1, (uint64_t)a2, a3, a4, a5);
  v11 = **(_QWORD **)(a1 + 640);
  if (!*(_QWORD *)(*((_QWORD *)a2 + 1) + 16))
  {
    v31 = *(uint64_t (**)(void))(v11 + 8);
    return (void (****)(void))v31();
  }
  if (!(_DWORD)a3)
  {
    (*(void (**)(void))v11)();
    v32 = (_QWORD *)*((_QWORD *)a2 + 1);
    v33 = (_QWORD *)*v32;
    if (v32[2] < 2uLL)
    {
      v36 = (_QWORD *)*v32;
    }
    else
    {
      v34 = 1;
      do
      {
        (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
        sub_20B4FBEC0(a1, v33 + 4);
        (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\":", 2);
        sub_20B4FCB4C(a1, v33 + 7, 0, a4, a5);
        (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 44);
        v35 = (_QWORD *)v33[1];
        if (v35)
        {
          do
          {
            v36 = v35;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            v36 = (_QWORD *)v33[2];
            v21 = *v36 == (_QWORD)v33;
            v33 = v36;
          }
          while (!v21);
        }
        ++v34;
        v33 = v36;
      }
      while (v34 < *(_QWORD *)(*((_QWORD *)a2 + 1) + 16));
    }
    (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
    sub_20B4FBEC0(a1, v36 + 4);
    (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\":", 2);
    sub_20B4FCB4C(a1, v36 + 7, 0, a4, a5);
    goto LABEL_45;
  }
  (*(void (**)(void))(v11 + 8))();
  v12 = (a5 + a4);
  v13 = (uint64_t *)(a1 + 664);
  if (*(char *)(a1 + 687) < 0)
  {
    v14 = *(_QWORD *)(a1 + 672);
    if (v14 >= v12)
    {
LABEL_7:
      v15 = (_QWORD *)*((_QWORD *)a2 + 1);
      v16 = (_QWORD *)*v15;
      if (v15[2] >= 2uLL)
        goto LABEL_8;
      goto LABEL_39;
    }
  }
  else
  {
    v14 = *(unsigned __int8 *)(a1 + 687);
    if (v12 <= v14)
      goto LABEL_7;
  }
  std::string::resize((std::string *)(a1 + 664), 2 * v14, 32);
  v37 = (_QWORD *)*((_QWORD *)a2 + 1);
  v16 = (_QWORD *)*v37;
  if (v37[2] >= 2uLL)
  {
LABEL_8:
    v17 = 1;
    do
    {
      v18 = (_QWORD *)(a1 + 664);
      if (*(char *)(a1 + 687) < 0)
        v18 = (_QWORD *)*v13;
      (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), v18, (a5 + a4));
      (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
      sub_20B4FBEC0(a1, v16 + 4);
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\": ", 3);
      sub_20B4FCB4C(a1, v16 + 7, 1, a4, (a5 + a4));
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), ",\n", 2);
      v19 = (_QWORD *)v16[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v16[2];
          v21 = *v20 == (_QWORD)v16;
          v16 = v20;
        }
        while (!v21);
      }
      ++v17;
      v16 = v20;
    }
    while (v17 < *(_QWORD *)(*((_QWORD *)a2 + 1) + 16));
    goto LABEL_40;
  }
LABEL_39:
  v20 = v16;
LABEL_40:
  v38 = a1 + 664;
  if (*(char *)(a1 + 687) < 0)
    v38 = *v13;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), v38, (a5 + a4));
  (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
  sub_20B4FBEC0(a1, v20 + 4);
  (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\": ", 3);
  sub_20B4FCB4C(a1, v20 + 7, 1, a4, (a5 + a4));
  (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 10);
  if (*(char *)(a1 + 687) < 0)
    v13 = (uint64_t *)*v13;
  (*(void (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), v13, a5);
LABEL_45:
  v29 = ***(uint64_t (****)(void))(a1 + 640);
  return (void (****)(void))v29();
}

void (****sub_20B4FD030(void (****result)(void), uint64_t a2, int a3, uint64_t a4, uint64_t a5))(void)
{
  void (****v8)(void);
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void (**v12)(void);
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(void);
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t (*v28)(void);
  unint64_t v29;
  _BYTE *v30;
  unsigned int v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  void (*v35)(void);
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t (***v39)(void);
  _QWORD *v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void (****v53)(void);
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  void (***v68)(void);
  void (*v69)(void);
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  unint64_t v73;
  char *v74;
  char v75;
  char *v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(void);
  char *v88;
  char v89;
  unint64_t v90;

  v8 = result;
  switch(*(_BYTE *)a2)
  {
    case 0:
      goto LABEL_33;
    case 1:
      v9 = *(uint64_t **)(a2 + 8);
      v10 = *v9;
      v11 = v9[1];
      v12 = **result;
      if (v10 == v11)
      {
        v28 = (uint64_t (*)(void))v12[1];
        return (void (****)(void))v28();
      }
      if (a3)
      {
        v12[1]();
        v13 = (a5 + a4);
        if (*((char *)v8 + 631) < 0)
        {
          v14 = (unint64_t)v8[77];
          if (v14 >= v13)
          {
LABEL_6:
            v15 = *(_QWORD *)(a2 + 8);
            v16 = *(uint64_t **)v15;
            if (*(_QWORD *)(v15 + 8) - *(_QWORD *)v15 == 40)
              goto LABEL_92;
            goto LABEL_7;
          }
        }
        else
        {
          v14 = *((unsigned __int8 *)v8 + 631);
          if (v13 <= v14)
            goto LABEL_6;
        }
        std::string::resize((std::string *)(v8 + 76), 2 * v14, 32);
        v70 = *(_QWORD *)(a2 + 8);
        v16 = *(uint64_t **)v70;
        if (*(_QWORD *)(v70 + 8) - *(_QWORD *)v70 == 40)
          goto LABEL_92;
LABEL_7:
        v17 = 0;
        do
        {
          ((void (*)(void (***)(void)))(**v8)[1])(*v8);
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
          sub_20B4FE020((uint64_t)v8, v16);
          ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\": ", 3);
          sub_20B4FD030(v8, v16 + 3, 1, a4, v13);
          ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, ",\n", 2);
          ++v17;
          v16 += 5;
        }
        while (v17 < -1
                    - 0x3333333333333333
                    * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - **(_QWORD **)(a2 + 8)) >> 3));
LABEL_92:
        v68 = (void (***)(void))(v8 + 76);
        if (*((char *)v8 + 631) < 0)
          v68 = v8[76];
        ((void (*)(void (***)(void), void (***)(void), unint64_t))(**v8)[1])(*v8, v68, v13);
        ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
        sub_20B4FE020((uint64_t)v8, v16);
        ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\": ", 3);
        sub_20B4FD030(v8, v16 + 3, 1, a4, v13);
        ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 10);
        v69 = (**v8)[1];
        goto LABEL_161;
      }
      (*v12)();
      v48 = *(_QWORD *)(a2 + 8);
      v49 = *(uint64_t **)v48;
      if (*(_QWORD *)(v48 + 8) - *(_QWORD *)v48 != 40)
      {
        v50 = 0;
        do
        {
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
          sub_20B4FE020((uint64_t)v8, v49);
          ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\":", 2);
          sub_20B4FD030(v8, v49 + 3, 0, a4, a5);
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 44);
          ++v50;
          v49 += 5;
        }
        while (v50 < -1
                    - 0x3333333333333333
                    * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - **(_QWORD **)(a2 + 8)) >> 3));
      }
      ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
      sub_20B4FE020((uint64_t)v8, v49);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\":", 2);
      sub_20B4FD030(v8, v49 + 3, 0, a4, a5);
      goto LABEL_162;
    case 2:
      v18 = *(uint64_t **)(a2 + 8);
      v19 = *v18;
      v20 = v18[1];
      v21 = **result;
      if (v19 == v20)
      {
        v28 = (uint64_t (*)(void))v21[1];
        return (void (****)(void))v28();
      }
      if (a3)
      {
        v21[1]();
        v22 = (a5 + a4);
        v23 = v8 + 76;
        if (*((char *)v8 + 631) < 0)
        {
          v24 = (unint64_t)v8[77];
          if (v24 >= v22)
          {
LABEL_14:
            v25 = *(uint64_t **)(a2 + 8);
            v26 = *v25;
            if (*v25 != v25[1] - 16)
              goto LABEL_15;
            goto LABEL_100;
          }
        }
        else
        {
          v24 = *((unsigned __int8 *)v8 + 631);
          if (v22 <= v24)
            goto LABEL_14;
        }
        std::string::resize((std::string *)(v8 + 76), 2 * v24, 32);
        v71 = *(uint64_t **)(a2 + 8);
        v26 = *v71;
        if (*v71 != v71[1] - 16)
        {
          do
          {
LABEL_15:
            ((void (*)(void (***)(void)))(**v8)[1])(*v8);
            sub_20B4FD030(v8, v26, 1, a4, (a5 + a4));
            ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, ",\n", 2);
            v26 += 16;
          }
          while (v26 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16);
        }
LABEL_100:
        v72 = v8 + 76;
        if (*((char *)v8 + 631) < 0)
          v72 = (_QWORD *)*v23;
        ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v8)[1])(*v8, v72, (a5 + a4));
        sub_20B4FD030(v8, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16, 1, a4, (a5 + a4));
        ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 10);
        if (*((char *)v8 + 631) < 0)
          v23 = (_QWORD *)*v23;
        ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v8)[1])(*v8, v23, a5);
        goto LABEL_105;
      }
      (*v21)();
      v51 = *(uint64_t **)(a2 + 8);
      v52 = *v51;
      v53 = v8;
      if (*v51 != v51[1] - 16)
      {
        do
        {
          sub_20B4FD030(v53, v52, 0, a4, a5);
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 44);
          v52 += 16;
          v53 = v8;
        }
        while (v52 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16);
      }
      sub_20B4FD030(v53, v52, 0, a4, a5);
LABEL_105:
      v27 = (uint64_t (*)(void))***v8;
      return (void (****)(void))v27();
    case 3:
      (***result)();
      sub_20B4FE020((uint64_t)v8, *(uint64_t **)(a2 + 8));
      v27 = (uint64_t (*)(void))***v8;
      return (void (****)(void))v27();
    case 4:
      v28 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v28();
    case 5:
      v29 = *(_QWORD *)(a2 + 8);
      if (!v29)
        goto LABEL_39;
      v30 = result + 2;
      if ((v29 & 0x8000000000000000) != 0)
      {
        *v30 = 45;
        v29 = -(uint64_t)v29;
        if (v29 >= 0xA)
        {
          v58 = 4;
          v73 = v29;
          do
          {
            if (v73 <= 0x63)
            {
              v58 -= 2;
              goto LABEL_166;
            }
            if (v73 <= 0x3E7)
            {
              --v58;
              goto LABEL_166;
            }
            if (v73 >> 4 < 0x271)
              goto LABEL_166;
            v58 += 4;
            v33 = v73 >= 0x186A0;
            v73 /= 0x2710uLL;
          }
          while (v33);
          v58 -= 3;
        }
        else
        {
          v58 = 1;
        }
LABEL_166:
        v31 = v58 + 1;
        goto LABEL_167;
      }
      if (v29 < 0xA)
        goto LABEL_30;
      v31 = 4;
      v32 = *(_QWORD *)(a2 + 8);
      while (1)
      {
        if (v32 <= 0x63)
        {
          v31 -= 2;
          goto LABEL_167;
        }
        if (v32 <= 0x3E7)
          break;
        if (v32 >> 4 < 0x271)
          goto LABEL_167;
        v31 += 4;
        v33 = v32 >= 0x186A0;
        v32 /= 0x2710uLL;
        if (!v33)
        {
          v31 -= 3;
          goto LABEL_167;
        }
      }
      --v31;
LABEL_167:
      v34 = (uint64_t)&v30[v31];
      if (v29 < 0x64)
      {
        v78 = v29;
      }
      else
      {
        do
        {
          v78 = v29 / 0x64;
          *(_WORD *)(v34 - 2) = *(_WORD *)&a00010203040506[2 * (v29 % 0x64)];
          v34 -= 2;
          v90 = v29 >> 4;
          v29 /= 0x64uLL;
        }
        while (v90 > 0x270);
      }
      if (v78 >= 0xA)
        goto LABEL_172;
      goto LABEL_125;
    case 6:
      v29 = *(_QWORD *)(a2 + 8);
      if (!v29)
      {
LABEL_39:
        v27 = (uint64_t (*)(void))***result;
        return (void (****)(void))v27();
      }
      if (v29 < 0xA)
      {
LABEL_30:
        v34 = (uint64_t)result + 17;
        goto LABEL_126;
      }
      v54 = 4;
      v55 = *(_QWORD *)(a2 + 8);
      while (2)
      {
        if (v55 <= 0x63)
        {
          v54 -= 2;
        }
        else
        {
          if (v55 > 0x3E7)
          {
            if (v55 >> 4 < 0x271)
              break;
            v54 += 4;
            v33 = v55 >= 0x186A0;
            v55 /= 0x2710uLL;
            if (!v33)
            {
              v54 -= 3;
              break;
            }
            continue;
          }
          --v54;
        }
        break;
      }
      v34 = (uint64_t)result + v54 + 16;
      if (v29 < 0x64)
      {
        v78 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        do
        {
          v78 = v29 / 0x64;
          *(_WORD *)(v34 - 2) = *(_WORD *)&a00010203040506[2 * (v29 % 0x64)];
          v34 -= 2;
          v79 = v29 >> 4;
          v29 /= 0x64uLL;
        }
        while (v79 > 0x270);
      }
      if (v78 >= 0xA)
      {
LABEL_172:
        *(_WORD *)(v34 - 2) = *(_WORD *)&a00010203040506[2 * v78];
      }
      else
      {
LABEL_125:
        LOBYTE(v29) = v78;
LABEL_126:
        *(_BYTE *)(v34 - 1) = v29 + 48;
      }
      v28 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v28();
    case 7:
      if ((*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_33:
        v28 = (uint64_t (*)(void))(**result)[1];
      }
      else
      {
        sub_20B4FC48C((char *)result + 16, *(double *)(a2 + 8));
        v28 = (uint64_t (*)(void))(**v8)[1];
      }
      return (void (****)(void))v28();
    case 8:
      v35 = (**result)[1];
      if (!a3)
      {
        v35();
        v41 = *(_QWORD *)(a2 + 8);
        v43 = *(_BYTE **)v41;
        v42 = *(_BYTE **)(v41 + 8);
        if (v43 == v42)
          goto LABEL_132;
        if (v43 != v42 - 1)
        {
          while (1)
          {
            v44 = *v43;
            if (*v43)
              break;
            ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
LABEL_44:
            ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 44);
            if (++v43 == (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1))
              goto LABEL_68;
          }
          if (v44 >= 0xA)
          {
            if (v44 < 0x64)
            {
              v46 = &a00010203040506[2 * v44];
              *((_BYTE *)v8 + 17) = v46[1];
              v47 = *v46;
              v45 = 2;
LABEL_52:
              *((_BYTE *)v8 + 16) = v47;
              ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v45);
              goto LABEL_44;
            }
            *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v43 % 0x64u)];
            LODWORD(v44) = (41 * v44) >> 12;
            v45 = 3;
          }
          else
          {
            v45 = 1;
          }
          v47 = v44 | 0x30;
          goto LABEL_52;
        }
LABEL_68:
        v56 = *v43;
        if (!*v43)
        {
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
          goto LABEL_132;
        }
        if (v56 >= 0xA)
        {
          if (v56 < 0x64)
          {
            v74 = &a00010203040506[2 * v56];
            *((_BYTE *)v8 + 17) = v74[1];
            v75 = *v74;
            v57 = 2;
LABEL_131:
            *((_BYTE *)v8 + 16) = v75;
            ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v57);
LABEL_132:
            ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "],\"subtype\":", 12);
            v80 = *(_QWORD *)(a2 + 8);
            if (!*(_BYTE *)(v80 + 25))
            {
              v28 = (uint64_t (*)(void))(**v8)[1];
              return (void (****)(void))v28();
            }
            v81 = *(unsigned __int8 *)(v80 + 24);
            if (!v81)
            {
              ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
              goto LABEL_162;
            }
            if (v81 >= 0xA)
            {
              if (v81 < 0x64)
              {
                v82 = &a00010203040506[2 * v81];
                *((_BYTE *)v8 + 17) = v82[1];
                v83 = *v82;
LABEL_155:
                *((_BYTE *)v8 + 16) = v83;
                v69 = (**v8)[1];
                goto LABEL_161;
              }
              *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2
                                                                     * (v81
                                                                                       - 100
                                                                                       * ((41 * v81) >> 12))];
              LODWORD(v81) = (41 * v81) >> 12;
            }
            v83 = v81 | 0x30;
            goto LABEL_155;
          }
          *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v43 % 0x64u)];
          v57 = 3;
          LODWORD(v56) = (41 * v56) >> 12;
        }
        else
        {
          v57 = 1;
        }
        v75 = v56 | 0x30;
        goto LABEL_131;
      }
      v35();
      v36 = (a5 + a4);
      v37 = v8 + 76;
      if (*((char *)v8 + 631) < 0)
      {
        v38 = (unint64_t)v8[77];
        if (v38 >= v36)
        {
          v39 = (uint64_t (***)(void))*v8;
LABEL_75:
          v40 = (_QWORD *)*v37;
          goto LABEL_76;
        }
      }
      else
      {
        v38 = *((unsigned __int8 *)v8 + 631);
        if (v36 <= v38)
        {
          v39 = (uint64_t (***)(void))*v8;
          v40 = v8 + 76;
          goto LABEL_76;
        }
      }
      std::string::resize((std::string *)(v8 + 76), 2 * v38, 32);
      v39 = (uint64_t (***)(void))*v8;
      v40 = v8 + 76;
      if (*((char *)v8 + 631) < 0)
        goto LABEL_75;
LABEL_76:
      ((void (*)(uint64_t (***)(void), _QWORD *, unint64_t))(*v39)[1])(v39, v40, v36);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\"bytes\": [", 10);
      v59 = *(_QWORD *)(a2 + 8);
      v61 = *(_BYTE **)v59;
      v60 = *(_BYTE **)(v59 + 8);
      if (v61 == v60)
        goto LABEL_143;
      if (v61 != v60 - 1)
      {
        while (1)
        {
          v62 = *v61;
          if (*v61)
            break;
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
LABEL_80:
          ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, ", ", 2);
          if (++v61 == (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1))
            goto LABEL_89;
        }
        if (v62 >= 0xA)
        {
          if (v62 < 0x64)
          {
            v64 = &a00010203040506[2 * v62];
            *((_BYTE *)v8 + 17) = v64[1];
            v65 = *v64;
            v63 = 2;
LABEL_88:
            *((_BYTE *)v8 + 16) = v65;
            ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v63);
            goto LABEL_80;
          }
          *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v61 % 0x64u)];
          LODWORD(v62) = (41 * v62) >> 12;
          v63 = 3;
        }
        else
        {
          v63 = 1;
        }
        v65 = v62 | 0x30;
        goto LABEL_88;
      }
LABEL_89:
      v66 = *v61;
      if (!*v61)
      {
        ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
        goto LABEL_143;
      }
      if (v66 < 0xA)
      {
        v67 = 1;
LABEL_141:
        v77 = v66 | 0x30;
        goto LABEL_142;
      }
      if (v66 >= 0x64)
      {
        *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v61 % 0x64u)];
        v67 = 3;
        LODWORD(v66) = (41 * v66) >> 12;
        goto LABEL_141;
      }
      v76 = &a00010203040506[2 * v66];
      *((_BYTE *)v8 + 17) = v76[1];
      v77 = *v76;
      v67 = 2;
LABEL_142:
      *((_BYTE *)v8 + 16) = v77;
      ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v67);
LABEL_143:
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "],\n", 3);
      v84 = v8 + 76;
      if (*((char *)v8 + 631) < 0)
        v84 = (_QWORD *)*v37;
      ((void (*)(void (***)(void), _QWORD *, unint64_t))(**v8)[1])(*v8, v84, v36);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\"subtype\": ", 11);
      v85 = *(_QWORD *)(a2 + 8);
      if (!*(_BYTE *)(v85 + 25))
      {
        v87 = (**v8)[1];
LABEL_159:
        v87();
        goto LABEL_160;
      }
      v86 = *(unsigned __int8 *)(v85 + 24);
      if (v86)
      {
        if (v86 >= 0xA)
        {
          if (v86 < 0x64)
          {
            v88 = &a00010203040506[2 * v86];
            *((_BYTE *)v8 + 17) = v88[1];
            v89 = *v88;
LABEL_158:
            *((_BYTE *)v8 + 16) = v89;
            v87 = (**v8)[1];
            goto LABEL_159;
          }
          *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2
                                                                 * (v86
                                                                                   - 100
                                                                                   * ((41 * v86) >> 12))];
          LODWORD(v86) = (41 * v86) >> 12;
        }
        v89 = v86 | 0x30;
        goto LABEL_158;
      }
      ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
LABEL_160:
      ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 10);
      v69 = (**v8)[1];
LABEL_161:
      v69();
LABEL_162:
      v27 = (uint64_t (*)(void))***v8;
      return (void (****)(void))v27();
    case 9:
      v28 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v28();
    default:
      return result;
  }
}

uint64_t sub_20B4FE020(uint64_t result, uint64_t *a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  int v20;
  void *exception;
  char *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  uint64_t *v26;
  void *v27;
  std::string v28;
  std::string v29;
  std::string v30;
  __int128 v31;
  std::string::size_type v32;
  char __str[8];
  std::string::size_type v34;
  char v35;

  LOBYTE(v2) = *((char *)a2 + 23) < 0;
  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  if (!v3)
    return result;
  v5 = (_QWORD *)result;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = result + 90;
  do
  {
    if ((v2 & 1) != 0)
      v15 = (uint64_t *)*a2;
    else
      v15 = a2;
    v16 = *((unsigned __int8 *)v15 + v6);
    if (v10)
      v11 = *((_BYTE *)v15 + v6) & 0x3F | (v11 << 6);
    else
      v11 = (0xFFu >> byte_20B6102F0[v16]) & v16;
    v10 = byte_20B6102F0[16 * v10 + 256 + byte_20B6102F0[v16]];
    if (v10 != 1)
    {
      if (v10)
      {
        *(_BYTE *)(v12 + v9++) = *((_BYTE *)v15 + v6);
        ++v7;
        goto LABEL_6;
      }
      switch(v11)
      {
        case 8u:
          *(_WORD *)(v12 + v9) = 25180;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 9u:
          *(_WORD *)(v12 + v9) = 29788;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0xAu:
          *(_WORD *)(v12 + v9) = 28252;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0xBu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
          goto LABEL_30;
        case 0xCu:
          *(_WORD *)(v12 + v9) = 26204;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0xDu:
          *(_WORD *)(v12 + v9) = 29276;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0x22u:
          *(_WORD *)(v12 + v9) = 8796;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        default:
          if (v11 == 92)
          {
            *(_WORD *)(v12 + v9) = 23644;
            v9 += 2;
            if ((unint64_t)(v9 - 500) > 0xC)
              goto LABEL_23;
          }
          else
          {
LABEL_30:
            if (v11 > 0x1F)
            {
              *(_BYTE *)(v12 + v9++) = *((_BYTE *)v15 + v6);
              if ((unint64_t)(v9 - 500) > 0xC)
                goto LABEL_23;
            }
            else
            {
              result = snprintf((char *)(v12 + v9), 7uLL, "\\u%04x", v11);
              v9 += 6;
              if ((unint64_t)(v9 - 500) > 0xC)
                goto LABEL_23;
            }
          }
          break;
      }
LABEL_34:
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v12, v9);
      v10 = 0;
      v9 = 0;
      v8 = 0;
      v7 = 0;
      goto LABEL_6;
    }
    v17 = *((_DWORD *)v5 + 158);
    if ((v17 - 1) < 2)
    {
      v6 -= v7 != 0;
      if (v17 != 1)
      {
        v10 = 0;
        v7 = 0;
        v9 = v8;
        goto LABEL_6;
      }
      v9 = v8 + 3;
      v18 = v12 + v8;
      *(_WORD *)v18 = -16401;
      *(_BYTE *)(v18 + 2) = -67;
      if ((unint64_t)(v8 - 497) > 0xC)
      {
LABEL_23:
        v10 = 0;
        v7 = 0;
        v8 = v9;
        goto LABEL_6;
      }
      goto LABEL_34;
    }
    if (!v17)
    {
      v35 = 3;
      *(_DWORD *)__str = 0;
      snprintf(__str, 3uLL, "%.2X", v16);
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v28, v6);
      sub_20B1F16DC("invalid UTF-8 byte at index ", &v28, &v29);
      sub_20B214D58(": 0x", &v29, &v30);
      if (v35 >= 0)
        v22 = __str;
      else
        v22 = *(char **)__str;
      if (v35 >= 0)
        v23 = v35;
      else
        v23 = v34;
      v24 = std::string::append(&v30, v22, v23);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v32 = v24->__r_.__value_.__r.__words[2];
      v31 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      sub_20B452958(316, (uint64_t)&v31, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
    }
    v10 = 1;
LABEL_6:
    ++v6;
    v13 = *((char *)a2 + 23);
    v2 = v13 >> 31;
    v14 = a2[1];
    if (v13 >= 0)
      v14 = *((unsigned __int8 *)a2 + 23);
  }
  while (v6 < v14);
  if (v10)
  {
    v20 = *((_DWORD *)v5 + 158);
    switch(v20)
    {
      case 1:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v12, v8);
        v19 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
        break;
      case 2:
        v19 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
        break;
      case 0:
        v35 = 3;
        *(_DWORD *)__str = 0;
        v26 = (uint64_t *)*a2;
        if (v13 >= 0)
          v26 = a2;
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v26 + v14 - 1));
        v27 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        sub_20B452958(316, (uint64_t)&v31, (uint64_t)v27);
        __cxa_throw(v27, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
      default:
        return result;
    }
    return v19();
  }
  if (v9)
  {
    v19 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
    return v19();
  }
  return result;
}

void sub_20B4FE504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  int v40;

  if (a33 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0)
      goto LABEL_7;
  }
  else if (!v40)
  {
LABEL_7:
    if (a39 < 0)
      operator delete(a34);
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v39);
  goto LABEL_7;
}

void (****sub_20B4FE5EC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5))(void)
{
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  uint64_t (*v30)(void);
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;

  v10 = *a2;
  if (v10 == 2)
  {
    v21 = (uint64_t *)*((_QWORD *)a2 + 1);
    v22 = *v21;
    v23 = v21[1];
    v24 = **(_QWORD **)(a1 + 640);
    if (v22 != v23)
    {
      (*(void (**)(void))v24)();
      v25 = (uint64_t *)*((_QWORD *)a2 + 1);
      v26 = *v25;
      v27 = a1;
      if (*v25 != v25[1] - 16)
      {
        do
        {
          sub_20B4FE5EC(v27, v26, a3, a4, a5);
          (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 44);
          v26 += 16;
          v27 = a1;
        }
        while (v26 != *(_QWORD *)(*((_QWORD *)a2 + 1) + 8) - 16);
      }
      sub_20B4FE5EC(v27, v26, a3, a4, a5);
      v28 = ***(uint64_t (****)(void))(a1 + 640);
      return (void (****)(void))v28();
    }
    v30 = *(uint64_t (**)(void))(v24 + 8);
    return (void (****)(void))v30();
  }
  if (v10 != 1)
    return sub_20B4FD030((void (****)(void))a1, (uint64_t)a2, a3, a4, a5);
  v11 = (uint64_t *)*((_QWORD *)a2 + 1);
  v12 = *v11;
  v13 = v11[1];
  v14 = **(_QWORD **)(a1 + 640);
  if (v12 == v13)
  {
    v30 = *(uint64_t (**)(void))(v14 + 8);
    return (void (****)(void))v30();
  }
  if (!(_DWORD)a3)
  {
    (*(void (**)(void))v14)();
    v31 = *((_QWORD *)a2 + 1);
    v32 = *(uint64_t **)v31;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v31 + 8) - *(_QWORD *)v31) >> 3) >= 2)
    {
      v33 = 1;
      do
      {
        (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
        sub_20B4FE020(a1, v32);
        (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\":", 2);
        sub_20B4FE5EC(a1, v32 + 3, 0, a4, a5);
        (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 44);
        v32 += 5;
        ++v33;
      }
      while (v33 < 0xCCCCCCCCCCCCCCCDLL
                  * ((uint64_t)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) - **((_QWORD **)a2 + 1)) >> 3));
    }
    (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
    sub_20B4FE020(a1, v32);
    (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\":", 2);
    sub_20B4FE5EC(a1, v32 + 3, 0, a4, a5);
    goto LABEL_28;
  }
  (*(void (**)(void))(v14 + 8))();
  v15 = (a5 + a4);
  v16 = (_QWORD *)(a1 + 664);
  if (*(char *)(a1 + 687) < 0)
  {
    v17 = *(_QWORD *)(a1 + 672);
    if (v17 >= v15)
      goto LABEL_7;
LABEL_31:
    std::string::resize((std::string *)(a1 + 664), 2 * v17, 32);
    goto LABEL_7;
  }
  v17 = *(unsigned __int8 *)(a1 + 687);
  if (v15 > v17)
    goto LABEL_31;
LABEL_7:
  v18 = *((_QWORD *)a2 + 1);
  v19 = *(uint64_t **)v18;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 3) >= 2)
  {
    v20 = 1;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640));
      (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
      sub_20B4FE020(a1, v19);
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\": ", 3);
      sub_20B4FE5EC(a1, v19 + 3, 1, a4, (a5 + a4));
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), ",\n", 2);
      v19 += 5;
      ++v20;
    }
    while (v20 < 0xCCCCCCCCCCCCCCCDLL
                * ((uint64_t)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) - **((_QWORD **)a2 + 1)) >> 3));
  }
  v34 = (_QWORD *)(a1 + 664);
  if (*(char *)(a1 + 687) < 0)
    v34 = (_QWORD *)*v16;
  (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), v34, (a5 + a4));
  (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
  sub_20B4FE020(a1, v19);
  (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\": ", 3);
  sub_20B4FE5EC(a1, v19 + 3, 1, a4, (a5 + a4));
  (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 10);
  if (*(char *)(a1 + 687) < 0)
    v16 = (_QWORD *)*v16;
  (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), v16, a5);
LABEL_28:
  v28 = ***(uint64_t (****)(void))(a1 + 640);
  return (void (****)(void))v28();
}

uint64_t sub_20B4FEA94(uint64_t a1)
{
  const char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  int v12;
  uint64_t result;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  _BYTE *v21;
  const char *v22;
  int v23;
  int v24;
  int v25;
  size_t v26;
  char *v27;
  char *v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  __int128 *v44;
  unint64_t v45;
  __int128 v46;
  char *v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char v52;
  int v53;
  int v54;
  char *v55;
  uint64_t v56;
  size_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  _QWORD *v65;
  _BYTE *v66;
  unint64_t v67;
  _BYTE *v68;
  unint64_t v69;
  uint64_t v70;
  size_t v71;
  _BYTE *v72;
  void **v73;
  size_t v74;
  char *v75;
  char *v76;
  int v77;
  unsigned __int8 *v78;
  int v79;
  unint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  size_t v87;
  char *v88;
  char *v89;
  unint64_t v90;
  char *v91;
  __int128 *v92;
  unint64_t v93;
  __int128 v94;
  char *v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  char v100;
  int v101;
  int v102;
  int v103;
  unsigned __int8 *v104;
  unint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  _BYTE *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  size_t v112;
  char *v113;
  char *v114;
  unint64_t v115;
  unsigned __int8 *v116;
  unint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  _BYTE *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  size_t v124;
  char *v125;
  int v126;
  char *v127;
  unint64_t v128;
  char *v129;
  __int128 *v130;
  unint64_t v131;
  __int128 v132;
  char *v133;
  uint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  std::string::value_type v138;
  int v139;
  char *v140;
  __int128 *v141;
  unint64_t v142;
  __int128 v143;
  char *v144;
  uint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  char v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  char *v153;
  char v154;
  int v155;
  int v156;
  size_t v157;
  void *v158;
  uint64_t v159;
  size_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  int v167;
  unsigned __int8 *v168;
  unint64_t v169;
  _BYTE *v170;
  uint64_t v171;
  _BYTE *v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  size_t v176;
  char *v177;
  char *v178;
  unint64_t v179;
  char *v180;
  __int128 *v181;
  unint64_t v182;
  __int128 v183;
  char *v184;
  uint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  char *v188;
  char v189;
  int v190;
  void *v191;
  uint64_t v192;
  size_t v193;
  unint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  int v198;
  int v199;
  _QWORD *v200;
  uint64_t v201;
  const char *v202;
  unint64_t v203;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int64x2_t v208;
  int64x2_t v209;
  char *__endptr;

  if (!*(_QWORD *)(a1 + 32))
  {
    if (sub_20B459C24(a1) == 239)
    {
      if (sub_20B459C24(a1) != 187 || sub_20B459C24(a1) != 191)
      {
        v2 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
        goto LABEL_35;
      }
    }
    else
    {
      v3 = (_QWORD *)(a1 + 40);
      v4 = *(_QWORD *)(a1 + 40);
      *(_BYTE *)(a1 + 24) = 1;
      --*(_QWORD *)(a1 + 32);
      if (v4 || (v3 = (_QWORD *)(a1 + 48), (v4 = *(_QWORD *)(a1 + 48)) != 0))
        *v3 = v4 - 1;
      if (*(_DWORD *)(a1 + 20) != -1)
        --*(_QWORD *)(a1 + 64);
    }
  }
  sub_20B500320(a1);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = (uint64_t *)(a1 + 48);
    while (1)
    {
      if (*(_DWORD *)(a1 + 20) != 47)
        goto LABEL_30;
      v6 = sub_20B459C24(a1);
      if (v6 != 47)
        break;
      do
        v10 = sub_20B459C24(a1);
      while ((v10 + 1) > 0xE || ((1 << (v10 + 1)) & 0x4803) == 0);
LABEL_29:
      sub_20B500320(a1);
      if (!*(_BYTE *)(a1 + 16))
        goto LABEL_30;
    }
    if (v6 == 42)
    {
      do
      {
        while (1)
        {
          v7 = sub_20B459C24(a1);
          if (v7 != 42)
            break;
          if (sub_20B459C24(a1) == 47)
            goto LABEL_29;
          *(_BYTE *)(a1 + 24) = 1;
          v8 = *(_QWORD *)(a1 + 40);
          --*(_QWORD *)(a1 + 32);
          v9 = (_QWORD *)(a1 + 40);
          if (v8 || (v8 = *v5, v9 = (_QWORD *)(a1 + 48), *v5))
            *v9 = v8 - 1;
          if (*(_DWORD *)(a1 + 20) != -1)
            --*(_QWORD *)(a1 + 64);
        }
      }
      while ((v7 + 1) >= 2);
      v2 = "invalid comment; missing closing '*/'";
    }
    else
    {
      v2 = "invalid comment; expecting '/' or '*' after '/'";
    }
LABEL_35:
    *(_QWORD *)(a1 + 104) = v2;
    return 14;
  }
LABEL_30:
  v12 = *(_DWORD *)(a1 + 20);
  result = 8;
  switch(v12)
  {
    case -1:
    case 0:
      return 15;
    case 34:
      if (*(char *)(a1 + 103) < 0)
      {
        **(_BYTE **)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        v64 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        *(_BYTE *)(a1 + 80) = 0;
        *(_BYTE *)(a1 + 103) = 0;
        LOBYTE(v64) = 34;
      }
      v65 = (_QWORD *)(a1 + 56);
      v66 = *(_BYTE **)(a1 + 56);
      *(_QWORD *)(a1 + 64) = v66;
      v67 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v66 >= v67)
      {
        v69 = v67 - (_QWORD)v66;
        v70 = 2 * v69;
        if (2 * v69 <= 1)
          v70 = 1;
        if (v69 >= 0x3FFFFFFFFFFFFFFFLL)
          v71 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v71 = v70;
        v72 = operator new(v71);
        *v72 = v64;
        v68 = v72 + 1;
        *(_QWORD *)(a1 + 56) = v72;
        *(_QWORD *)(a1 + 64) = v72 + 1;
        *(_QWORD *)(a1 + 72) = &v72[v71];
        if (v66)
          operator delete(v66);
      }
      else
      {
        *v66 = v64;
        v68 = v66 + 1;
      }
      v73 = (void **)(a1 + 80);
      *(_QWORD *)(a1 + 64) = v68;
      v209 = vdupq_n_s64(1uLL);
      while (2)
      {
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v209);
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v77 = *(_DWORD *)(a1 + 20);
          if (v77 == -1)
            goto LABEL_430;
LABEL_166:
          v81 = *(_BYTE **)(a1 + 64);
          v80 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v81 < v80)
          {
            *v81 = v77;
            v82 = (uint64_t)(v81 + 1);
            goto LABEL_196;
          }
          v83 = (_BYTE *)*v65;
          v84 = (unint64_t)&v81[-*v65];
          v85 = v84 + 1;
          if ((uint64_t)(v84 + 1) < 0)
            goto LABEL_466;
          v86 = v80 - (_QWORD)v83;
          if (2 * v86 > v85)
            v85 = 2 * v86;
          if (v86 >= 0x3FFFFFFFFFFFFFFFLL)
            v87 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v87 = v85;
          if (v87)
          {
            v88 = (char *)operator new(v87);
            v89 = &v88[v84];
            v88[v84] = v77;
            v82 = (uint64_t)&v88[v84 + 1];
            if (v81 == v83)
            {
LABEL_194:
              *(_QWORD *)(a1 + 56) = v89;
              *(_QWORD *)(a1 + 64) = v82;
              *(_QWORD *)(a1 + 72) = &v88[v87];
              if (v81)
                operator delete(v81);
LABEL_196:
              *(_QWORD *)(a1 + 64) = v82;
              v101 = *(_DWORD *)(a1 + 20);
              if (v101 == 10)
              {
                v197 = *(_QWORD *)(a1 + 48) + 1;
                *(_QWORD *)(a1 + 40) = 0;
                *(_QWORD *)(a1 + 48) = v197;
                v2 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
                goto LABEL_35;
              }
              v2 = "invalid string: missing closing quote";
              switch(v101)
              {
                case -1:
                  goto LABEL_35;
                case 0:
                  v2 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
                  goto LABEL_35;
                case 1:
                  v2 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
                  goto LABEL_35;
                case 2:
                  v2 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
                  goto LABEL_35;
                case 3:
                  v2 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
                  goto LABEL_35;
                case 4:
                  v2 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
                  goto LABEL_35;
                case 5:
                  v2 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
                  goto LABEL_35;
                case 6:
                  v2 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
                  goto LABEL_35;
                case 7:
                  v2 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
                  goto LABEL_35;
                case 8:
                  v2 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
                  goto LABEL_35;
                case 9:
                  v2 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
                  goto LABEL_35;
                case 11:
                  v2 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
                  goto LABEL_35;
                case 12:
                  v2 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
                  goto LABEL_35;
                case 13:
                  v2 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
                  goto LABEL_35;
                case 14:
                  v2 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
                  goto LABEL_35;
                case 15:
                  v2 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
                  goto LABEL_35;
                case 16:
                  v2 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
                  goto LABEL_35;
                case 17:
                  v2 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
                  goto LABEL_35;
                case 18:
                  v2 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
                  goto LABEL_35;
                case 19:
                  v2 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
                  goto LABEL_35;
                case 20:
                  v2 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
                  goto LABEL_35;
                case 21:
                  v2 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
                  goto LABEL_35;
                case 22:
                  v2 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
                  goto LABEL_35;
                case 23:
                  v2 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
                  goto LABEL_35;
                case 24:
                  v2 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
                  goto LABEL_35;
                case 25:
                  v2 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
                  goto LABEL_35;
                case 26:
                  v2 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
                  goto LABEL_35;
                case 27:
                  v2 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
                  goto LABEL_35;
                case 28:
                  v2 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
                  goto LABEL_35;
                case 29:
                  v2 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
                  goto LABEL_35;
                case 30:
                  v2 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
                  goto LABEL_35;
                case 31:
                  v2 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
                  goto LABEL_35;
                case 32:
                case 33:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                  goto LABEL_364;
                case 34:
                  return 4;
                case 92:
                  v139 = sub_20B459C24(a1);
                  v2 = "invalid string: forbidden character after backslash";
                  switch(v139)
                  {
                    case '"':
                      std::string::push_back((std::string *)(a1 + 80), 34);
                      continue;
                    case '/':
                      std::string::push_back((std::string *)(a1 + 80), 47);
                      continue;
                    case '\\':
                      std::string::push_back((std::string *)(a1 + 80), 92);
                      continue;
                    case 'b':
                      std::string::push_back((std::string *)(a1 + 80), 8);
                      continue;
                    case 'f':
                      std::string::push_back((std::string *)(a1 + 80), 12);
                      continue;
                    case 'n':
                      std::string::push_back((std::string *)(a1 + 80), 10);
                      continue;
                    case 'r':
                      std::string::push_back((std::string *)(a1 + 80), 13);
                      continue;
                    case 't':
                      std::string::push_back((std::string *)(a1 + 80), 9);
                      continue;
                    case 'u':
                      v150 = sub_20B459E74(a1);
                      if (v150 == -1)
                        goto LABEL_467;
                      v151 = v150;
                      if ((v150 & 0xFFFFFC00) == 0xD800)
                      {
                        if (sub_20B459C24(a1) != 92 || sub_20B459C24(a1) != 117)
                          goto LABEL_468;
                        v152 = sub_20B459E74(a1);
                        if (v152 == -1)
                        {
LABEL_467:
                          v2 = "invalid string: '\\u' must be followed by 4 hex digits";
                          goto LABEL_35;
                        }
                        if (v152 >> 10 != 55)
                        {
LABEL_468:
                          v2 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
                          goto LABEL_35;
                        }
                        v151 = v152 + (v151 << 10) - 56613888;
                        goto LABEL_292;
                      }
                      if ((v150 & 0xFFFFFC00) == 0xDC00)
                      {
                        v2 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
                        goto LABEL_35;
                      }
                      if ((int)v150 > 127)
                      {
                        if (v150 > 0x7FF)
                        {
                          if (!HIWORD(v150))
                          {
                            std::string::push_back((std::string *)(a1 + 80), (v150 >> 12) | 0xE0);
                            goto LABEL_293;
                          }
LABEL_292:
                          std::string::push_back((std::string *)(a1 + 80), (v151 >> 18) | 0xF0);
                          std::string::push_back((std::string *)(a1 + 80), (v151 >> 12) & 0x3F | 0x80);
LABEL_293:
                          std::string::push_back((std::string *)(a1 + 80), (v151 >> 6) & 0x3F | 0x80);
                          std::string::push_back((std::string *)(a1 + 80), v151 & 0x3F | 0x80);
                          continue;
                        }
                        std::string::push_back((std::string *)(a1 + 80), (v150 >> 6) | 0xC0);
                        v138 = v151 & 0x3F | 0x80;
                      }
                      else
                      {
                        v138 = v150;
                      }
LABEL_258:
                      std::string::push_back((std::string *)(a1 + 80), v138);
                      continue;
                    default:
                      goto LABEL_35;
                  }
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 222:
                case 223:
                  std::string::push_back((std::string *)(a1 + 80), v101);
                  *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
                  if (*(_BYTE *)(a1 + 24))
                  {
                    *(_BYTE *)(a1 + 24) = 0;
                    v102 = *(_DWORD *)(a1 + 20);
                  }
                  else
                  {
                    v104 = *(unsigned __int8 **)a1;
                    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
                    {
                      v102 = -1;
                    }
                    else
                    {
                      v102 = *v104;
                      *(_QWORD *)a1 = v104 + 1;
                    }
                    *(_DWORD *)(a1 + 20) = v102;
                  }
                  if (v102 == -1)
                    goto LABEL_431;
                  v106 = *(_BYTE **)(a1 + 64);
                  v105 = *(_QWORD *)(a1 + 72);
                  if ((unint64_t)v106 < v105)
                  {
                    *v106 = v102;
                    v107 = (uint64_t)(v106 + 1);
                    goto LABEL_279;
                  }
                  v108 = (_BYTE *)*v65;
                  v109 = (unint64_t)&v106[-*v65];
                  v110 = v109 + 1;
                  if ((uint64_t)(v109 + 1) < 0)
                    goto LABEL_466;
                  v111 = v105 - (_QWORD)v108;
                  if (2 * v111 > v110)
                    v110 = 2 * v111;
                  if (v111 >= 0x3FFFFFFFFFFFFFFFLL)
                    v112 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v112 = v110;
                  if (v112)
                    v113 = (char *)operator new(v112);
                  else
                    v113 = 0;
                  v114 = &v113[v109];
                  v113[v109] = v102;
                  v107 = (uint64_t)&v113[v109 + 1];
                  if (v106 == v108)
                    goto LABEL_277;
                  if (v109 < 8 || (unint64_t)(v108 - v113) < 0x20)
                    goto LABEL_274;
                  if (v109 >= 0x20)
                  {
                    v115 = v109 & 0xFFFFFFFFFFFFFFE0;
                    v129 = &v113[v109 - 16];
                    v130 = (__int128 *)(v106 - 16);
                    v131 = v109 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v132 = *v130;
                      *((_OWORD *)v129 - 1) = *(v130 - 1);
                      *(_OWORD *)v129 = v132;
                      v129 -= 32;
                      v130 -= 2;
                      v131 -= 32;
                    }
                    while (v131);
                    if (v109 == v115)
                      goto LABEL_276;
                    if ((v109 & 0x18) == 0)
                    {
                      v114 -= v115;
                      v106 -= v115;
LABEL_274:
                      v148 = v114 - 1;
                      do
                      {
                        v149 = *--v106;
                        *v148-- = v149;
                      }
                      while (v106 != v108);
LABEL_276:
                      v106 = (_BYTE *)*v65;
                      v114 = v113;
LABEL_277:
                      *(_QWORD *)(a1 + 56) = v114;
                      *(_QWORD *)(a1 + 64) = v107;
                      *(_QWORD *)(a1 + 72) = &v113[v112];
                      if (v106)
                        operator delete(v106);
LABEL_279:
                      *(_QWORD *)(a1 + 64) = v107;
                      v101 = *(_DWORD *)(a1 + 20);
                      if (v101 == 10)
                        goto LABEL_428;
LABEL_363:
                      if ((v101 - 192) >= 0xFFFFFFC0)
                      {
LABEL_364:
                        v190 = *(char *)(a1 + 103);
                        if ((v190 & 0x80000000) == 0)
                        {
                          if (*(_BYTE *)(a1 + 103) != 22)
                          {
                            v74 = *(unsigned __int8 *)(a1 + 103);
                            *(_BYTE *)(a1 + 103) = (v190 + 1) & 0x7F;
                            v75 = (char *)(a1 + 80);
LABEL_160:
                            v76 = &v75[v74];
                            *v76 = v101;
                            v76[1] = 0;
                            continue;
                          }
                          v74 = 22;
                          v191 = (void *)(a1 + 80);
                          goto LABEL_370;
                        }
                        v192 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
                        v74 = v192 - 1;
                        if (*(_QWORD *)(a1 + 88) != v192 - 1)
                        {
                          v75 = (char *)*v73;
                          v74 = *(_QWORD *)(a1 + 88);
LABEL_383:
                          *(_QWORD *)(a1 + 88) = v74 + 1;
                          goto LABEL_160;
                        }
                        if (v192 != 0x7FFFFFFFFFFFFFF8)
                        {
                          v191 = *v73;
                          v193 = 0x7FFFFFFFFFFFFFF7;
                          if (v74 >= 0x3FFFFFFFFFFFFFF3)
                          {
LABEL_378:
                            v196 = (char *)operator new(v193);
                            v75 = v196;
                            if (!v74 || (memmove(v196, v191, v74), v74 != 22))
                              operator delete(v191);
                            *(_QWORD *)(a1 + 80) = v75;
                            *(_QWORD *)(a1 + 96) = v193 | 0x8000000000000000;
                            goto LABEL_383;
                          }
LABEL_370:
                          if (v74 + 1 > 2 * v74)
                            v194 = v74 + 1;
                          else
                            v194 = 2 * v74;
                          v195 = (v194 & 0x7FFFFFFFFFFFFFF8) + 8;
                          if ((v194 | 7) != 0x17)
                            v195 = v194 | 7;
                          if (v194 >= 0x17)
                            v193 = v195 + 1;
                          else
                            v193 = 23;
                          goto LABEL_378;
                        }
LABEL_470:
                        sub_20AEC0138();
                      }
LABEL_431:
                      v2 = "invalid string: ill-formed UTF-8 byte";
                      goto LABEL_35;
                    }
                  }
                  else
                  {
                    v115 = 0;
                  }
                  v114 -= v109 & 0xFFFFFFFFFFFFFFF8;
                  v133 = &v113[&v106[-v115] - v108 - 8];
                  v134 = (uint64_t *)&v106[-v115 - 8];
                  v135 = v115 - (v109 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v136 = *v134--;
                    *(_QWORD *)v133 = v136;
                    v133 -= 8;
                    v135 += 8;
                  }
                  while (v135);
                  v106 -= v109 & 0xFFFFFFFFFFFFFFF8;
                  if (v109 == (v109 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_276;
                  goto LABEL_274;
                case 224:
                  std::string::push_back((std::string *)(a1 + 80), -32);
                  sub_20B459C24(a1);
                  v137 = *(_DWORD *)(a1 + 20);
                  if ((v137 - 192) < 0xFFFFFFE0)
                    goto LABEL_431;
                  goto LABEL_256;
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 238:
                case 239:
                  std::string::push_back((std::string *)(a1 + 80), v101);
                  *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
                  if (*(_BYTE *)(a1 + 24))
                  {
                    *(_BYTE *)(a1 + 24) = 0;
                    v103 = *(_DWORD *)(a1 + 20);
                  }
                  else
                  {
                    v116 = *(unsigned __int8 **)a1;
                    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
                    {
                      v103 = -1;
                    }
                    else
                    {
                      v103 = *v116;
                      *(_QWORD *)a1 = v116 + 1;
                    }
                    *(_DWORD *)(a1 + 20) = v103;
                  }
                  if (v103 == -1)
                    goto LABEL_431;
                  v118 = *(_BYTE **)(a1 + 64);
                  v117 = *(_QWORD *)(a1 + 72);
                  if ((unint64_t)v118 < v117)
                  {
                    *v118 = v103;
                    v119 = (uint64_t)(v118 + 1);
                    goto LABEL_303;
                  }
                  v120 = (_BYTE *)*v65;
                  v121 = (unint64_t)&v118[-*v65];
                  v122 = v121 + 1;
                  if ((uint64_t)(v121 + 1) < 0)
                    goto LABEL_466;
                  v123 = v117 - (_QWORD)v120;
                  if (2 * v123 > v122)
                    v122 = 2 * v123;
                  if (v123 >= 0x3FFFFFFFFFFFFFFFLL)
                    v124 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v124 = v122;
                  if (v124)
                    v125 = (char *)operator new(v124);
                  else
                    v125 = 0;
                  v127 = &v125[v121];
                  v125[v121] = v103;
                  v119 = (uint64_t)&v125[v121 + 1];
                  if (v118 == v120)
                    goto LABEL_301;
                  if (v121 < 8 || (unint64_t)(v120 - v125) < 0x20)
                    goto LABEL_298;
                  if (v121 >= 0x20)
                  {
                    v128 = v121 & 0xFFFFFFFFFFFFFFE0;
                    v140 = &v125[v121 - 16];
                    v141 = (__int128 *)(v118 - 16);
                    v142 = v121 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v143 = *v141;
                      *((_OWORD *)v140 - 1) = *(v141 - 1);
                      *(_OWORD *)v140 = v143;
                      v140 -= 32;
                      v141 -= 2;
                      v142 -= 32;
                    }
                    while (v142);
                    if (v121 == v128)
                      goto LABEL_300;
                    if ((v121 & 0x18) == 0)
                    {
                      v127 -= v128;
                      v118 -= v128;
LABEL_298:
                      v153 = v127 - 1;
                      do
                      {
                        v154 = *--v118;
                        *v153-- = v154;
                      }
                      while (v118 != v120);
LABEL_300:
                      v118 = (_BYTE *)*v65;
                      v127 = v125;
LABEL_301:
                      *(_QWORD *)(a1 + 56) = v127;
                      *(_QWORD *)(a1 + 64) = v119;
                      *(_QWORD *)(a1 + 72) = &v125[v124];
                      if (v118)
                        operator delete(v118);
LABEL_303:
                      *(_QWORD *)(a1 + 64) = v119;
                      v155 = *(_DWORD *)(a1 + 20);
                      if (v155 == 10)
                        goto LABEL_428;
                      if ((v155 - 192) < 0xFFFFFFC0)
                        goto LABEL_431;
                      v156 = *(char *)(a1 + 103);
                      if (v156 < 0)
                      {
                        v159 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
                        v157 = v159 - 1;
                        if (*(_QWORD *)(a1 + 88) != v159 - 1)
                        {
                          v162 = (char *)*v73;
                          v157 = *(_QWORD *)(a1 + 88);
LABEL_325:
                          *(_QWORD *)(a1 + 88) = v157 + 1;
LABEL_326:
                          v166 = &v162[v157];
                          *v166 = v155;
                          v166[1] = 0;
                          *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
                          if (*(_BYTE *)(a1 + 24))
                          {
                            *(_BYTE *)(a1 + 24) = 0;
                            v167 = *(_DWORD *)(a1 + 20);
                          }
                          else
                          {
                            v168 = *(unsigned __int8 **)a1;
                            if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
                            {
                              v167 = -1;
                            }
                            else
                            {
                              v167 = *v168;
                              *(_QWORD *)a1 = v168 + 1;
                            }
                            *(_DWORD *)(a1 + 20) = v167;
                          }
                          if (v167 == -1)
                            goto LABEL_431;
                          v170 = *(_BYTE **)(a1 + 64);
                          v169 = *(_QWORD *)(a1 + 72);
                          if ((unint64_t)v170 < v169)
                          {
                            *v170 = v167;
                            v171 = (uint64_t)(v170 + 1);
                            goto LABEL_362;
                          }
                          v172 = (_BYTE *)*v65;
                          v173 = (unint64_t)&v170[-*v65];
                          v174 = v173 + 1;
                          if ((uint64_t)(v173 + 1) >= 0)
                          {
                            v175 = v169 - (_QWORD)v172;
                            if (2 * v175 > v174)
                              v174 = 2 * v175;
                            if (v175 >= 0x3FFFFFFFFFFFFFFFLL)
                              v176 = 0x7FFFFFFFFFFFFFFFLL;
                            else
                              v176 = v174;
                            if (v176)
                              v177 = (char *)operator new(v176);
                            else
                              v177 = 0;
                            v178 = &v177[v173];
                            v177[v173] = v167;
                            v171 = (uint64_t)&v177[v173 + 1];
                            if (v170 == v172)
                              goto LABEL_360;
                            if (v173 >= 8 && (unint64_t)(v172 - v177) >= 0x20)
                            {
                              if (v173 < 0x20)
                              {
                                v179 = 0;
                                goto LABEL_352;
                              }
                              v179 = v173 & 0xFFFFFFFFFFFFFFE0;
                              v180 = &v177[v173 - 16];
                              v181 = (__int128 *)(v170 - 16);
                              v182 = v173 & 0xFFFFFFFFFFFFFFE0;
                              do
                              {
                                v183 = *v181;
                                *((_OWORD *)v180 - 1) = *(v181 - 1);
                                *(_OWORD *)v180 = v183;
                                v180 -= 32;
                                v181 -= 2;
                                v182 -= 32;
                              }
                              while (v182);
                              if (v173 == v179)
                                goto LABEL_359;
                              if ((v173 & 0x18) != 0)
                              {
LABEL_352:
                                v178 -= v173 & 0xFFFFFFFFFFFFFFF8;
                                v184 = &v177[&v170[-v179] - v172 - 8];
                                v185 = (uint64_t *)&v170[-v179 - 8];
                                v186 = v179 - (v173 & 0xFFFFFFFFFFFFFFF8);
                                do
                                {
                                  v187 = *v185--;
                                  *(_QWORD *)v184 = v187;
                                  v184 -= 8;
                                  v186 += 8;
                                }
                                while (v186);
                                v170 -= v173 & 0xFFFFFFFFFFFFFFF8;
                                if (v173 == (v173 & 0xFFFFFFFFFFFFFFF8))
                                  goto LABEL_359;
                                goto LABEL_357;
                              }
                              v178 -= v179;
                              v170 -= v179;
                            }
LABEL_357:
                            v188 = v178 - 1;
                            do
                            {
                              v189 = *--v170;
                              *v188-- = v189;
                            }
                            while (v170 != v172);
LABEL_359:
                            v170 = (_BYTE *)*v65;
                            v178 = v177;
LABEL_360:
                            *(_QWORD *)(a1 + 56) = v178;
                            *(_QWORD *)(a1 + 64) = v171;
                            *(_QWORD *)(a1 + 72) = &v177[v176];
                            if (v170)
                              operator delete(v170);
LABEL_362:
                            *(_QWORD *)(a1 + 64) = v171;
                            v101 = *(_DWORD *)(a1 + 20);
                            if (v101 != 10)
                              goto LABEL_363;
LABEL_428:
                            v206 = *(_QWORD *)(a1 + 48) + 1;
                            *(_QWORD *)(a1 + 40) = 0;
                            *(_QWORD *)(a1 + 48) = v206;
                            v2 = "invalid string: ill-formed UTF-8 byte";
                            goto LABEL_35;
                          }
LABEL_466:
                          sub_20AEC60B8();
                        }
                        if (v159 == 0x7FFFFFFFFFFFFFF8)
                          goto LABEL_470;
                        v158 = *v73;
                        v160 = 0x7FFFFFFFFFFFFFF7;
                        if (v157 >= 0x3FFFFFFFFFFFFFF3)
                        {
LABEL_320:
                          v165 = (char *)operator new(v160);
                          v162 = v165;
                          if (!v157 || (memmove(v165, v158, v157), v157 != 22))
                            operator delete(v158);
                          *(_QWORD *)(a1 + 80) = v162;
                          *(_QWORD *)(a1 + 96) = v160 | 0x8000000000000000;
                          goto LABEL_325;
                        }
                      }
                      else
                      {
                        if (*(_BYTE *)(a1 + 103) != 22)
                        {
                          v157 = *(unsigned __int8 *)(a1 + 103);
                          *(_BYTE *)(a1 + 103) = (v156 + 1) & 0x7F;
                          v162 = (char *)(a1 + 80);
                          goto LABEL_326;
                        }
                        v157 = 22;
                        v158 = (void *)(a1 + 80);
                      }
                      if (v157 + 1 > 2 * v157)
                        v161 = v157 + 1;
                      else
                        v161 = 2 * v157;
                      if (v161 >= 0x17)
                      {
                        v163 = (v161 & 0x7FFFFFFFFFFFFFF8) + 8;
                        v164 = v161 | 7;
                        if (v164 == 23)
                          v164 = v163;
                        v160 = v164 + 1;
                      }
                      else
                      {
                        v160 = 23;
                      }
                      goto LABEL_320;
                    }
                  }
                  else
                  {
                    v128 = 0;
                  }
                  v127 -= v121 & 0xFFFFFFFFFFFFFFF8;
                  v144 = &v125[&v118[-v128] - v120 - 8];
                  v145 = (uint64_t *)&v118[-v128 - 8];
                  v146 = v128 - (v121 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v147 = *v145--;
                    *(_QWORD *)v144 = v147;
                    v144 -= 8;
                    v146 += 8;
                  }
                  while (v146);
                  v118 -= v121 & 0xFFFFFFFFFFFFFFF8;
                  if (v121 == (v121 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_300;
                  goto LABEL_298;
                case 237:
                  std::string::push_back((std::string *)(a1 + 80), -19);
                  sub_20B459C24(a1);
                  v137 = *(_DWORD *)(a1 + 20);
                  if ((v137 - 160) < 0xFFFFFFE0)
                    goto LABEL_431;
                  goto LABEL_256;
                case 240:
                  std::string::push_back((std::string *)(a1 + 80), -16);
                  sub_20B459C24(a1);
                  v126 = *(_DWORD *)(a1 + 20);
                  if ((v126 - 192) < 0xFFFFFFD0)
                    goto LABEL_431;
                  goto LABEL_255;
                case 241:
                case 242:
                case 243:
                  std::string::push_back((std::string *)(a1 + 80), v101);
                  sub_20B459C24(a1);
                  v126 = *(_DWORD *)(a1 + 20);
                  if ((v126 - 192) < 0xFFFFFFC0)
                    goto LABEL_431;
                  goto LABEL_255;
                case 244:
                  std::string::push_back((std::string *)(a1 + 80), -12);
                  sub_20B459C24(a1);
                  v126 = *(_DWORD *)(a1 + 20);
                  if ((v126 - 144) < 0xFFFFFFF0)
                    goto LABEL_431;
LABEL_255:
                  std::string::push_back((std::string *)(a1 + 80), v126);
                  sub_20B459C24(a1);
                  v137 = *(_DWORD *)(a1 + 20);
                  if ((v137 - 192) < 0xFFFFFFC0)
                    goto LABEL_431;
LABEL_256:
                  std::string::push_back((std::string *)(a1 + 80), v137);
                  sub_20B459C24(a1);
                  if ((*(_DWORD *)(a1 + 20) - 192) < 0xFFFFFFC0)
                    goto LABEL_431;
                  v138 = *(_DWORD *)(a1 + 20);
                  goto LABEL_258;
                default:
                  goto LABEL_431;
              }
            }
          }
          else
          {
            v88 = 0;
            v89 = &v81[-*v65];
            *(_BYTE *)v84 = v77;
            v82 = v84 + 1;
            if (v81 == v83)
              goto LABEL_194;
          }
          if (v84 >= 8 && (unint64_t)(v83 - v88) >= 0x20)
          {
            if (v84 < 0x20)
            {
              v90 = 0;
              goto LABEL_186;
            }
            v90 = v84 & 0xFFFFFFFFFFFFFFE0;
            v91 = &v88[v84 - 16];
            v92 = (__int128 *)(v81 - 16);
            v93 = v84 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v94 = *v92;
              *((_OWORD *)v91 - 1) = *(v92 - 1);
              *(_OWORD *)v91 = v94;
              v91 -= 32;
              v92 -= 2;
              v93 -= 32;
            }
            while (v93);
            if (v84 == v90)
              goto LABEL_193;
            if ((v84 & 0x18) != 0)
            {
LABEL_186:
              v89 -= v84 & 0xFFFFFFFFFFFFFFF8;
              v95 = &v88[&v81[-v90] - v83 - 8];
              v96 = (uint64_t *)&v81[-v90 - 8];
              v97 = v90 - (v84 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v98 = *v96--;
                *(_QWORD *)v95 = v98;
                v95 -= 8;
                v97 += 8;
              }
              while (v97);
              v81 -= v84 & 0xFFFFFFFFFFFFFFF8;
              if (v84 == (v84 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_193;
              goto LABEL_191;
            }
            v89 -= v90;
            v81 -= v90;
          }
LABEL_191:
          v99 = v89 - 1;
          do
          {
            v100 = *--v81;
            *v99-- = v100;
          }
          while (v81 != v83);
LABEL_193:
          v81 = (_BYTE *)*v65;
          v89 = v88;
          goto LABEL_194;
        }
        break;
      }
      v78 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 20) = -1;
      }
      else
      {
        v79 = *v78;
        LOBYTE(v77) = *v78;
        *(_QWORD *)a1 = v78 + 1;
        *(_DWORD *)(a1 + 20) = v79;
        if (v79 != -1)
          goto LABEL_166;
      }
LABEL_430:
      v2 = "invalid string: missing closing quote";
      goto LABEL_35;
    case 44:
      return 13;
    case 45:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      if (*(char *)(a1 + 103) < 0)
      {
        **(_BYTE **)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        v12 = *(_DWORD *)(a1 + 20);
        v15 = (_QWORD *)(a1 + 56);
        v14 = *(_BYTE **)(a1 + 56);
        *(_QWORD *)(a1 + 64) = v14;
        v16 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v14 < v16)
          goto LABEL_33;
      }
      else
      {
        *(_BYTE *)(a1 + 80) = 0;
        *(_BYTE *)(a1 + 103) = 0;
        v15 = (_QWORD *)(a1 + 56);
        v14 = *(_BYTE **)(a1 + 56);
        *(_QWORD *)(a1 + 64) = v14;
        v16 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v14 < v16)
        {
LABEL_33:
          *v14 = v12;
          v17 = v14 + 1;
          goto LABEL_45;
        }
      }
      v18 = v16 - (_QWORD)v14;
      v19 = 2 * v18;
      if (2 * v18 <= 1)
        v19 = 1;
      if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
        v20 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      v21 = operator new(v20);
      *v21 = v12;
      v17 = v21 + 1;
      *(_QWORD *)(a1 + 56) = v21;
      *(_QWORD *)(a1 + 64) = v21 + 1;
      *(_QWORD *)(a1 + 72) = &v21[v20];
      if (v14)
        operator delete(v14);
LABEL_45:
      v22 = (const char *)(a1 + 80);
      *(_QWORD *)(a1 + 64) = v17;
      v23 = *(_DWORD *)(a1 + 20);
      v24 = 5;
      if ((v23 - 49) >= 9)
      {
        if (v23 != 48)
        {
          if (v23 == 45)
            std::string::push_back((std::string *)(a1 + 80), 45);
          v62 = sub_20B459C24(a1);
          if ((v62 - 49) < 9)
          {
            v23 = *(_DWORD *)(a1 + 20);
            v25 = 6;
            goto LABEL_47;
          }
          if (v62 != 48)
          {
            v2 = "invalid number; expected digit after '-'";
            goto LABEL_35;
          }
          v23 = *(_DWORD *)(a1 + 20);
          v24 = 6;
        }
        std::string::push_back((std::string *)(a1 + 80), v23);
        v198 = sub_20B459C24(a1);
        if (v198 == 46)
        {
LABEL_111:
          std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 136));
          if (sub_20B459C24(a1) - 48 > 9)
          {
            v2 = "invalid number; expected digit after '.'";
            goto LABEL_35;
          }
          do
          {
            std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
            v61 = sub_20B459C24(a1);
          }
          while ((v61 - 48) < 0xA);
          if (v61 != 101 && v61 != 69)
          {
LABEL_404:
            v24 = 7;
            goto LABEL_405;
          }
        }
        else if (v198 != 69 && v198 != 101)
        {
          goto LABEL_405;
        }
        v53 = *(_DWORD *)(a1 + 20);
LABEL_402:
        std::string::push_back((std::string *)(a1 + 80), v53);
        v199 = sub_20B459C24(a1);
        if ((v199 - 48) >= 0xA)
        {
          if (v199 != 43 && v199 != 45)
          {
            v2 = "invalid number; expected '+', '-', or digit after exponent";
            goto LABEL_35;
          }
          std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
          if (sub_20B459C24(a1) - 48 >= 0xA)
          {
            v2 = "invalid number; expected digit after exponent sign";
            goto LABEL_35;
          }
        }
        do
          std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
        while (sub_20B459C24(a1) - 48 < 0xA);
        goto LABEL_404;
      }
      v25 = 5;
LABEL_47:
      v207 = v25;
      std::string::push_back((std::string *)(a1 + 80), v23);
      v208 = vdupq_n_s64(1uLL);
      while (1)
      {
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v208);
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v29 = *(_DWORD *)(a1 + 20);
          if (v29 == -1)
            goto LABEL_107;
        }
        else
        {
          v30 = *(unsigned __int8 **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 20) = -1;
LABEL_107:
            v24 = v207;
            goto LABEL_405;
          }
          v31 = *v30;
          LOBYTE(v29) = *v30;
          *(_QWORD *)a1 = v30 + 1;
          *(_DWORD *)(a1 + 20) = v31;
          if (v31 == -1)
            goto LABEL_107;
        }
        v33 = *(_BYTE **)(a1 + 64);
        v32 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v33 < v32)
        {
          *v33 = v29;
          v34 = (uint64_t)(v33 + 1);
          goto LABEL_85;
        }
        v35 = (_BYTE *)*v15;
        v36 = (unint64_t)&v33[-*v15];
        v37 = v36 + 1;
        if ((uint64_t)(v36 + 1) < 0)
          sub_20AEC60B8();
        v38 = v32 - (_QWORD)v35;
        if (2 * v38 > v37)
          v37 = 2 * v38;
        if (v38 >= 0x3FFFFFFFFFFFFFFFLL)
          v39 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (!v39)
        {
          v40 = 0;
          v41 = &v33[-*v15];
          *(_BYTE *)v36 = v29;
          v34 = v36 + 1;
          if (v33 == v35)
            goto LABEL_83;
LABEL_67:
          if (v36 >= 8 && (unint64_t)(v35 - v40) >= 0x20)
          {
            if (v36 < 0x20)
            {
              v42 = 0;
              goto LABEL_75;
            }
            v42 = v36 & 0xFFFFFFFFFFFFFFE0;
            v43 = &v40[v36 - 16];
            v44 = (__int128 *)(v33 - 16);
            v45 = v36 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v46 = *v44;
              *((_OWORD *)v43 - 1) = *(v44 - 1);
              *(_OWORD *)v43 = v46;
              v43 -= 32;
              v44 -= 2;
              v45 -= 32;
            }
            while (v45);
            if (v36 == v42)
              goto LABEL_82;
            if ((v36 & 0x18) != 0)
            {
LABEL_75:
              v41 -= v36 & 0xFFFFFFFFFFFFFFF8;
              v47 = &v40[&v33[-v42] - v35 - 8];
              v48 = (uint64_t *)&v33[-v42 - 8];
              v49 = v42 - (v36 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v50 = *v48--;
                *(_QWORD *)v47 = v50;
                v47 -= 8;
                v49 += 8;
              }
              while (v49);
              v33 -= v36 & 0xFFFFFFFFFFFFFFF8;
              if (v36 == (v36 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_82;
              goto LABEL_80;
            }
            v41 -= v42;
            v33 -= v42;
          }
LABEL_80:
          v51 = v41 - 1;
          do
          {
            v52 = *--v33;
            *v51-- = v52;
          }
          while (v33 != v35);
LABEL_82:
          v33 = (_BYTE *)*v15;
          v41 = v40;
          goto LABEL_83;
        }
        v40 = (char *)operator new(v39);
        v41 = &v40[v36];
        v40[v36] = v29;
        v34 = (uint64_t)&v40[v36 + 1];
        if (v33 != v35)
          goto LABEL_67;
LABEL_83:
        *(_QWORD *)(a1 + 56) = v41;
        *(_QWORD *)(a1 + 64) = v34;
        *(_QWORD *)(a1 + 72) = &v40[v39];
        if (v33)
          operator delete(v33);
LABEL_85:
        *(_QWORD *)(a1 + 64) = v34;
        v53 = *(_DWORD *)(a1 + 20);
        if ((v53 - 48) >= 0xA)
          break;
        v54 = *(char *)(a1 + 103);
        if ((v54 & 0x80000000) == 0)
        {
          if (*(_BYTE *)(a1 + 103) != 22)
          {
            v26 = *(unsigned __int8 *)(a1 + 103);
            *(_BYTE *)(a1 + 103) = (v54 + 1) & 0x7F;
            v27 = (char *)(a1 + 80);
            goto LABEL_49;
          }
          v55 = (char *)(a1 + 80);
          v26 = 22;
LABEL_92:
          if (v26 + 1 > 2 * v26)
            v58 = v26 + 1;
          else
            v58 = 2 * v26;
          v59 = (v58 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v58 | 7) != 0x17)
            v59 = v58 | 7;
          if (v58 >= 0x17)
            v57 = v59 + 1;
          else
            v57 = 23;
LABEL_100:
          v60 = (char *)operator new(v57);
          v27 = v60;
          if (!v26 || (memmove(v60, v55, v26), v26 != 22))
            operator delete(v55);
          *(_QWORD *)(a1 + 80) = v27;
          *(_QWORD *)(a1 + 96) = v57 | 0x8000000000000000;
          goto LABEL_105;
        }
        v56 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
        v26 = v56 - 1;
        if (*(_QWORD *)(a1 + 88) == v56 - 1)
        {
          if (v56 == 0x7FFFFFFFFFFFFFF8)
            sub_20AEC0138();
          v55 = *(char **)v22;
          v57 = 0x7FFFFFFFFFFFFFF7;
          if (v26 < 0x3FFFFFFFFFFFFFF3)
            goto LABEL_92;
          goto LABEL_100;
        }
        v27 = *(char **)v22;
        v26 = *(_QWORD *)(a1 + 88);
LABEL_105:
        *(_QWORD *)(a1 + 88) = v26 + 1;
LABEL_49:
        v28 = &v27[v26];
        *v28 = v53;
        v28[1] = 0;
      }
      if (v53 > 68)
      {
        v24 = v207;
        if (v53 != 69 && v53 != 101)
          goto LABEL_405;
        goto LABEL_402;
      }
      v24 = v207;
      if (v53 == 10)
      {
        v63 = *(_QWORD *)(a1 + 48) + 1;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = v63;
      }
      else if (v53 == 46)
      {
        goto LABEL_111;
      }
LABEL_405:
      v200 = (_QWORD *)(a1 + 40);
      v201 = *(_QWORD *)(a1 + 40);
      *(_BYTE *)(a1 + 24) = 1;
      --*(_QWORD *)(a1 + 32);
      if (v201 || (v200 = (_QWORD *)(a1 + 48), (v201 = *(_QWORD *)(a1 + 48)) != 0))
        *v200 = v201 - 1;
      if (*(_DWORD *)(a1 + 20) != -1)
        --*(_QWORD *)(a1 + 64);
      __endptr = 0;
      *__error() = 0;
      if (v24 == 6)
      {
        v204 = (const char *)(a1 + 80);
        if (*(char *)(a1 + 103) < 0)
          v204 = *(const char **)v22;
        v205 = strtoll(v204, &__endptr, 10);
        if (*__error())
          goto LABEL_419;
        *(_QWORD *)(a1 + 112) = v205;
        return 6;
      }
      else
      {
        if (v24 == 5)
        {
          v202 = (const char *)(a1 + 80);
          if (*(char *)(a1 + 103) < 0)
            v202 = *(const char **)v22;
          v203 = strtoull(v202, &__endptr, 10);
          if (!*__error())
          {
            *(_QWORD *)(a1 + 120) = v203;
            return 5;
          }
        }
LABEL_419:
        if (*(char *)(a1 + 103) < 0)
          v22 = *(const char **)v22;
        *(double *)(a1 + 128) = strtod(v22, &__endptr);
        return 7;
      }
    case 58:
      return 12;
    case 91:
      return result;
    case 93:
      return 10;
    case 102:
      if (sub_20B459C24(a1) != 97
        || sub_20B459C24(a1) != 108
        || sub_20B459C24(a1) != 115
        || sub_20B459C24(a1) != 101)
      {
        goto LABEL_147;
      }
      return 2;
    case 110:
      if (sub_20B459C24(a1) != 117
        || sub_20B459C24(a1) != 108
        || sub_20B459C24(a1) != 108)
      {
        goto LABEL_147;
      }
      return 3;
    case 116:
      if (sub_20B459C24(a1) != 114
        || sub_20B459C24(a1) != 117
        || sub_20B459C24(a1) != 101)
      {
        goto LABEL_147;
      }
      return 1;
    case 123:
      return 9;
    case 125:
      return 11;
    default:
LABEL_147:
      v2 = "invalid literal";
      goto LABEL_35;
  }
}

void sub_20B500320(uint64_t a1)
{
  _QWORD *v2;
  int64x2_t v3;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  int v7;
  unint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  int64x2_t v30;

  v2 = (_QWORD *)(a1 + 56);
  v3 = vdupq_n_s64(1uLL);
  v30 = v3;
  while (2)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v3);
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      v5 = *(_DWORD *)(a1 + 20);
      if (v5 == -1)
        return;
LABEL_8:
      v9 = *(_BYTE **)(a1 + 64);
      v8 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v9 < v8)
      {
        *v9 = v5;
        *(_QWORD *)(a1 + 64) = v9 + 1;
        v10 = *(_DWORD *)(a1 + 20) - 9;
        if (v10 > 0x17)
          return;
LABEL_40:
        switch(v10)
        {
          case 0u:
          case 4u:
          case 0x17u:
            continue;
          case 1u:
            v4 = *(_QWORD *)(a1 + 48) + 1;
            *(_QWORD *)(a1 + 40) = 0;
            *(_QWORD *)(a1 + 48) = v4;
            continue;
          default:
            return;
        }
      }
      v11 = (_BYTE *)*v2;
      v12 = (unint64_t)&v9[-*v2];
      v13 = v12 + 1;
      if ((uint64_t)(v12 + 1) < 0)
        sub_20AEC60B8();
      v14 = v8 - (_QWORD)v11;
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
        v15 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)operator new(v15);
        v17 = &v16[v12];
        v16[v12] = v5;
        v18 = (uint64_t)&v16[v12 + 1];
        if (v9 == v11)
          goto LABEL_37;
      }
      else
      {
        v16 = 0;
        v17 = &v9[-*v2];
        *(_BYTE *)v12 = v5;
        v18 = v12 + 1;
        if (v9 == v11)
        {
LABEL_37:
          *(_QWORD *)(a1 + 56) = v17;
          *(_QWORD *)(a1 + 64) = v18;
          *(_QWORD *)(a1 + 72) = &v16[v15];
          if (v9)
            operator delete(v9);
          v3 = v30;
          *(_QWORD *)(a1 + 64) = v18;
          v10 = *(_DWORD *)(a1 + 20) - 9;
          goto LABEL_40;
        }
      }
      if (v12 >= 8 && (unint64_t)(v11 - v16) >= 0x20)
      {
        if (v12 < 0x20)
        {
          v19 = 0;
          goto LABEL_29;
        }
        v19 = v12 & 0xFFFFFFFFFFFFFFE0;
        v20 = &v16[v12 - 16];
        v21 = (__int128 *)(v9 - 16);
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v23 = *v21;
          *((_OWORD *)v20 - 1) = *(v21 - 1);
          *(_OWORD *)v20 = v23;
          v20 -= 32;
          v21 -= 2;
          v22 -= 32;
        }
        while (v22);
        if (v12 == v19)
          goto LABEL_36;
        if ((v12 & 0x18) != 0)
        {
LABEL_29:
          v17 -= v12 & 0xFFFFFFFFFFFFFFF8;
          v24 = &v16[&v9[-v19] - v11 - 8];
          v25 = (uint64_t *)&v9[-v19 - 8];
          v26 = v19 - (v12 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v27 = *v25--;
            *(_QWORD *)v24 = v27;
            v24 -= 8;
            v26 += 8;
          }
          while (v26);
          v9 -= v12 & 0xFFFFFFFFFFFFFFF8;
          if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_36;
          goto LABEL_34;
        }
        v17 -= v19;
        v9 -= v19;
      }
LABEL_34:
      v28 = v17 - 1;
      do
      {
        v29 = *--v9;
        *v28-- = v29;
      }
      while (v9 != v11);
LABEL_36:
      v9 = (_BYTE *)*v2;
      v17 = v16;
      goto LABEL_37;
    }
    break;
  }
  v6 = *(_BYTE **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 20) = -1;
  }
  else
  {
    v7 = *v6;
    LOBYTE(v5) = *v6;
    *(_QWORD *)a1 = v6 + 1;
    *(_DWORD *)(a1 + 20) = v7;
    if (v7 != -1)
      goto LABEL_8;
  }
}

void sub_20B50058C(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  unint64_t v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void **v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  void **v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  int v51;
  int v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  unsigned __int8 *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  _OWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  _QWORD *v82;
  unint64_t v83;
  int v84;
  int v85;
  uint64_t *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  unsigned __int8 *v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  _OWORD *v108;
  uint64_t *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  uint64_t v115;
  char v116;
  void **v117;
  unsigned __int8 *v118;
  int v119;
  std::string::size_type v120;
  void ***p_size;
  unint64_t v122;
  unint64_t v123;
  char v124;
  void **v125;
  char *v126;
  std::string::size_type v127;
  unint64_t v128;
  int v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  uint64_t v132;
  unsigned __int8 *v133;
  int v134;
  unsigned __int8 *v135;
  int v136;
  void **v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  int v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  uint64_t v149;
  unsigned __int8 *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  int v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  unsigned __int8 *v158;
  int v159;
  void **v160;
  unsigned __int8 *v161;
  unsigned __int8 *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  unsigned __int8 *v167;
  unsigned __int8 *v168;
  _BYTE *v169;
  unsigned int v170;
  size_t v171;
  size_t v172;
  std::string::size_type v173;
  size_t v174;
  unint64_t v175;
  std::string *v176;
  size_t v177;
  unint64_t v178;
  std::string *v179;
  size_t size;
  std::string *v181;
  size_t v182;
  size_t v183;
  unint64_t v184;
  uint64_t v185;
  std::string *v186;
  std::string *v187;
  _BYTE *v188;
  unint64_t v189;
  uint64_t v190;
  void *v191;
  std::string::size_type v192;
  unsigned __int8 *v193;
  unsigned __int8 *v194;
  size_t v195;
  std::string *v196;
  _BYTE *v197;
  unsigned int v198;
  size_t v199;
  size_t v200;
  std::string::size_type v201;
  size_t v202;
  unint64_t v203;
  std::string *v204;
  size_t v205;
  unint64_t v206;
  std::string *v207;
  std::string *v208;
  size_t v209;
  _BYTE *v210;
  size_t v211;
  unint64_t v212;
  uint64_t v213;
  std::string *v214;
  unint64_t v215;
  uint64_t v216;
  void *v217;
  std::string::size_type v218;
  void *exception;
  void *v220;
  void *v221;
  void **v222;
  uint64_t **v223;
  unsigned __int8 *v224;
  uint64_t v225;
  unsigned __int8 *v226;
  unsigned __int8 *v227;
  std::string v228;
  std::string __p;
  std::string v230;
  std::string v231;
  void *v232;
  unint64_t v233;
  uint64_t v234;
  char __str[8];
  void **v236;
  std::runtime_error v237;
  uint64_t v238;
  uint64_t v239;

  v4 = a1 + 120;
  v5 = a1 + 40;
  v239 = *MEMORY[0x24BDAC8D0];
  v232 = 0;
  v233 = 0;
  v222 = (void **)(a2 + 4);
  v234 = 0;
  v223 = (uint64_t **)(a2 + 1);
  v6 = (unsigned __int8 *)(a2 + 17);
  v225 = a1 + 120;
  v224 = (unsigned __int8 *)(a2 + 17);
  while (2)
  {
    v7 = 0;
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        v7 = 1;
        goto LABEL_4;
      case 2:
LABEL_4:
        sub_20B505368(a2, v7);
        goto LABEL_156;
      case 3:
        if (((*(_QWORD *)&a2[4][((unint64_t)(a2[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a2 + 40) - 1)) & 1) == 0)
          goto LABEL_156;
        __str[0] = 0;
        v236 = 0;
        LODWORD(__p.__r_.__value_.__l.__data_) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v228.__r_.__value_.__s.__data_[0] = 5;
        v20 = a2[15];
        if (!v20)
          sub_20AECABA4();
        if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *, char *))(*(_QWORD *)v20 + 48))(v20, &__p, &v228, __str) & 1) == 0)goto LABEL_155;
        v21 = a2[2];
        if (a2[1] == v21)
          goto LABEL_151;
        v22 = *((_QWORD *)v21 - 1);
        if (!v22)
          goto LABEL_155;
        if (*(_BYTE *)v22 != 2)
          goto LABEL_152;
        v18 = *(_QWORD *)(v22 + 8);
        v19 = *(_QWORD *)(v18 + 8);
        if (v19 >= *(_QWORD *)(v18 + 16))
          goto LABEL_220;
        goto LABEL_150;
      case 4:
        if (((*(_QWORD *)&a2[4][((unint64_t)(a2[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a2 + 40) - 1)) & 1) == 0)
          goto LABEL_156;
        __str[0] = 3;
        v29 = (void **)operator new(0x18uLL);
        v30 = v29;
        if (*(char *)(a1 + 143) < 0)
        {
          sub_20AEC60F4(v29, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
        }
        else
        {
          *(_OWORD *)v29 = *(_OWORD *)v4;
          v29[2] = *(void **)(v4 + 16);
        }
        v236 = v30;
        LODWORD(__p.__r_.__value_.__l.__data_) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v228.__r_.__value_.__s.__data_[0] = 5;
        v113 = a2[15];
        if (!v113)
          sub_20AECABA4();
        if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *, char *))(*(_QWORD *)v113 + 48))(v113, &__p, &v228, __str) & 1) == 0)goto LABEL_155;
        v114 = a2[2];
        if (a2[1] == v114)
          goto LABEL_151;
        v115 = *((_QWORD *)v114 - 1);
        if (!v115)
          goto LABEL_155;
        if (*(_BYTE *)v115 != 2)
          goto LABEL_152;
        v18 = *(_QWORD *)(v115 + 8);
        v19 = *(_QWORD *)(v18 + 8);
        if (v19 < *(_QWORD *)(v18 + 16))
          goto LABEL_150;
        goto LABEL_220;
      case 5:
        if (((*(_QWORD *)&a2[4][((unint64_t)(a2[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a2 + 40) - 1)) & 1) == 0)
          goto LABEL_156;
        v35 = *(void ***)(a1 + 160);
        __str[0] = 6;
        v236 = v35;
        LODWORD(__p.__r_.__value_.__l.__data_) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v228.__r_.__value_.__s.__data_[0] = 5;
        v36 = a2[15];
        if (!v36)
          sub_20AECABA4();
        if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *, char *))(*(_QWORD *)v36 + 48))(v36, &__p, &v228, __str) & 1) == 0)goto LABEL_155;
        v37 = a2[2];
        if (a2[1] == v37)
          goto LABEL_151;
        v38 = *((_QWORD *)v37 - 1);
        if (!v38)
          goto LABEL_155;
        if (*(_BYTE *)v38 != 2)
          goto LABEL_152;
        v18 = *(_QWORD *)(v38 + 8);
        v19 = *(_QWORD *)(v18 + 8);
        if (v19 >= *(_QWORD *)(v18 + 16))
          goto LABEL_220;
        goto LABEL_150;
      case 6:
        if (((*(_QWORD *)&a2[4][((unint64_t)(a2[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a2 + 40) - 1)) & 1) == 0)
          goto LABEL_156;
        v14 = *(void ***)(a1 + 152);
        __str[0] = 5;
        v236 = v14;
        LODWORD(__p.__r_.__value_.__l.__data_) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v228.__r_.__value_.__s.__data_[0] = 5;
        v15 = a2[15];
        if (!v15)
          sub_20AECABA4();
        if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *, char *))(*(_QWORD *)v15 + 48))(v15, &__p, &v228, __str) & 1) == 0)goto LABEL_155;
        v16 = a2[2];
        if (a2[1] == v16)
          goto LABEL_151;
        v17 = *((_QWORD *)v16 - 1);
        if (!v17)
          goto LABEL_155;
        if (*(_BYTE *)v17 != 2)
          goto LABEL_152;
        v18 = *(_QWORD *)(v17 + 8);
        v19 = *(_QWORD *)(v18 + 8);
        if (v19 >= *(_QWORD *)(v18 + 16))
          goto LABEL_220;
        goto LABEL_150;
      case 7:
        v31 = *(void ***)(a1 + 168);
        if (((unint64_t)v31 & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
        {
          sub_20B50229C(&v231, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          sub_20B50229C(&v228, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          sub_20B1F16DC("number overflow parsing '", &v228, &__p);
          sub_20B214D58("'", &__p, &v230);
          sub_20B45E198(406, (uint64_t)&v230, (uint64_t)__str);
          sub_20B5050E0((uint64_t)a2, (uint64_t)__str);
          *(_QWORD *)__str = &off_24C41D9D8;
          std::runtime_error::~runtime_error(&v237);
          std::exception::~exception((std::exception *)__str);
          if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v230.__r_.__value_.__l.__data_);
          goto LABEL_355;
        }
        if (((*(_QWORD *)&a2[4][((unint64_t)(a2[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a2 + 40) - 1)) & 1) == 0)
          goto LABEL_156;
        __str[0] = 7;
        v236 = v31;
        LODWORD(__p.__r_.__value_.__l.__data_) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v228.__r_.__value_.__s.__data_[0] = 5;
        v32 = a2[15];
        if (!v32)
          sub_20AECABA4();
        if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *, char *))(*(_QWORD *)v32 + 48))(v32, &__p, &v228, __str) & 1) == 0)goto LABEL_155;
        v33 = a2[2];
        if (a2[1] == v33)
        {
LABEL_151:
          v116 = __str[0];
          v117 = v236;
          __str[0] = 0;
          v236 = 0;
          v118 = *a2;
          v119 = **a2;
          *v118 = v116;
          v231.__r_.__value_.__s.__data_[0] = v119;
          v120 = *((_QWORD *)v118 + 1);
          *((_QWORD *)v118 + 1) = v117;
          v231.__r_.__value_.__l.__size_ = v120;
          p_size = (void ***)&v231.__r_.__value_.__l.__size_;
        }
        else
        {
          v34 = *((_QWORD *)v33 - 1);
          if (!v34)
            goto LABEL_155;
          if (*(_BYTE *)v34 == 2)
          {
            v18 = *(_QWORD *)(v34 + 8);
            v19 = *(_QWORD *)(v18 + 8);
            if (v19 < *(_QWORD *)(v18 + 16))
            {
LABEL_150:
              *(_BYTE *)v19 = __str[0];
              *(_QWORD *)(v19 + 8) = v236;
              __str[0] = 0;
              v236 = 0;
              *(_QWORD *)(v18 + 8) = v19 + 16;
            }
            else
            {
LABEL_220:
              *(_QWORD *)(v18 + 8) = sub_20B4188F0((void **)v18, __str);
            }
            goto LABEL_155;
          }
LABEL_152:
          v122 = (unint64_t)(a2[8] - 1);
          v123 = *(_QWORD *)&a2[7][(v122 >> 3) & 0x1FFFFFFFFFFFFFF8];
          a2[8] = (unsigned __int8 *)v122;
          if (((v123 >> v122) & 1) == 0)
          {
LABEL_155:
            sub_20B4181DC(&v236, __str[0]);
            goto LABEL_156;
          }
          v124 = __str[0];
          v125 = v236;
          __str[0] = 0;
          v236 = 0;
          v126 = (char *)a2[10];
          v119 = *v126;
          *v126 = v124;
          v230.__r_.__value_.__s.__data_[0] = v119;
          v127 = *((_QWORD *)v126 + 1);
          *((_QWORD *)v126 + 1) = v125;
          v230.__r_.__value_.__l.__size_ = v127;
          p_size = (void ***)&v230.__r_.__value_.__l.__size_;
        }
        sub_20B4181DC(p_size, v119);
        goto LABEL_155;
      case 8:
        *(_DWORD *)__str = (unint64_t)(a2[2] - a2[1]) >> 3;
        v231.__r_.__value_.__s.__data_[0] = 2;
        v8 = a2[15];
        if (!v8)
          goto LABEL_364;
        v9 = (*(uint64_t (**)(unsigned __int8 *, char *, std::string *, unsigned __int8 *))(*(_QWORD *)v8 + 48))(v8, __str, &v231, v6);
        v10 = v9;
        v12 = (unint64_t)a2[5];
        v11 = a2[6];
        if (v12 != (_QWORD)v11 << 6)
        {
          a2[5] = (unsigned __int8 *)(v12 + 1);
          v39 = a2[4];
          v40 = v12 >> 6;
          v41 = 1 << v12;
          if (!v9)
            goto LABEL_60;
          goto LABEL_83;
        }
        if ((uint64_t)(v12 + 1) < 0)
          goto LABEL_365;
        if (v12 <= 0x3FFFFFFFFFFFFFFELL)
        {
          v13 = (_QWORD)v11 << 7;
          if (v13 <= (v12 & 0xFFFFFFFFFFFFFFC0) + 64)
            v13 = (v12 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v12 < v13)
          {
            if ((v13 & 0x8000000000000000) != 0)
              goto LABEL_365;
LABEL_64:
            v47 = ((v13 - 1) >> 6) + 1;
            v48 = (uint64_t *)operator new(8 * v47);
            v49 = *v222;
            v50 = (v12 - 1) >> 6;
            if (v12 < 0x41)
              v50 = 0;
            v48[v50] = 0;
            if (v12 > 0x3F || (v12 & 0x3F) != 0)
            {
              v51 = 0;
              v52 = 0;
              v53 = v48;
              v54 = v49;
              do
              {
                v55 = 1 << v51;
                if (((*v54 >> v52) & 1) != 0)
                  v56 = *v53 | v55;
                else
                  v56 = *v53 & ~v55;
                *v53 = v56;
                v54 += v52 == 63;
                if (v52 == 63)
                  v52 = 0;
                else
                  ++v52;
                v53 += v51 == 63;
                if (v51 == 63)
                  v51 = 0;
                else
                  ++v51;
              }
              while (v52 != (v12 & 0x3F) || v54 != &v49[v12 >> 6]);
            }
            a2[4] = (unsigned __int8 *)v48;
            a2[6] = (unsigned __int8 *)v47;
            if (v49)
            {
              operator delete(v49);
              v12 = (unint64_t)a2[5];
            }
          }
          a2[5] = (unsigned __int8 *)(v12 + 1);
          v39 = a2[4];
          v40 = v12 >> 6;
          v41 = 1 << v12;
          if (!v10)
            goto LABEL_60;
          goto LABEL_83;
        }
        v13 = 0x7FFFFFFFFFFFFFFFLL;
        if (v12 < 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_64;
        a2[5] = 0;
        v39 = a2[4];
        v40 = 0x3FFFFFFFFFFFFFFLL;
        v41 = 0;
        if (!v9)
        {
LABEL_60:
          v42 = *(_QWORD *)&v39[8 * v40] & ~v41;
          goto LABEL_84;
        }
LABEL_83:
        v42 = *(_QWORD *)&v39[8 * v40] | v41;
LABEL_84:
        *(_QWORD *)&v39[8 * v40] = v42;
        v57 = sub_20B505130(a2, 2u);
        v58 = v57;
        v60 = (uint64_t *)a2[2];
        v59 = a2[3];
        if (v60 < (uint64_t *)v59)
        {
          *v60 = v57;
          v61 = (uint64_t)(v60 + 1);
          goto LABEL_181;
        }
        v62 = *v223;
        v63 = (char *)v60 - (char *)*v223;
        v64 = v63 >> 3;
        v65 = (v63 >> 3) + 1;
        if (v65 >> 61)
          goto LABEL_366;
        v66 = v59 - (unsigned __int8 *)v62;
        if (v66 >> 2 > v65)
          v65 = v66 >> 2;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
          v67 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v67 = v65;
        if (v67)
        {
          if (v67 >> 61)
            goto LABEL_371;
          v68 = operator new(8 * v67);
          v69 = &v68[8 * v64];
          *(_QWORD *)v69 = v58;
          v61 = (uint64_t)(v69 + 8);
          v70 = (char *)((char *)v60 - (char *)v62);
          if (v60 == v62)
          {
LABEL_179:
            a2[1] = v69;
            a2[2] = (unsigned __int8 *)v61;
            a2[3] = &v68[8 * v67];
            if (!v60)
              goto LABEL_181;
LABEL_180:
            operator delete(v60);
            goto LABEL_181;
          }
        }
        else
        {
          v68 = 0;
          v69 = (unsigned __int8 *)(8 * v64);
          *(_QWORD *)(8 * v64) = v58;
          v61 = 8 * v64 + 8;
          v70 = (char *)((char *)v60 - (char *)v62);
          if (v60 == v62)
            goto LABEL_179;
        }
        v71 = (unint64_t)(v70 - 8);
        if (v71 < 0x58)
          goto LABEL_382;
        if ((unint64_t)((char *)v60 - v68 - v63) < 0x20)
          goto LABEL_382;
        v72 = (v71 >> 3) + 1;
        v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v60[v73 / 0xFFFFFFFFFFFFFFF8];
        v69 -= v73;
        v75 = &v68[8 * v64 - 16];
        v76 = v60 - 2;
        v77 = v72 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v78 = *(_OWORD *)v76;
          *(v75 - 1) = *((_OWORD *)v76 - 1);
          *v75 = v78;
          v75 -= 2;
          v76 -= 4;
          v77 -= 4;
        }
        while (v77);
        v60 = v74;
        if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_382:
          do
          {
            v79 = *--v60;
            *((_QWORD *)v69 - 1) = v79;
            v69 -= 8;
          }
          while (v60 != v62);
        }
        v60 = *v223;
        a2[1] = v69;
        a2[2] = (unsigned __int8 *)v61;
        a2[3] = &v68[8 * v67];
        if (v60)
          goto LABEL_180;
LABEL_181:
        a2[2] = (unsigned __int8 *)v61;
        v146 = sub_20B4FEA94(v5);
        v4 = v225;
        v6 = v224;
        *(_DWORD *)(a1 + 32) = v146;
        if (v146 == 10)
        {
          v147 = a2[2];
          v149 = *((_QWORD *)v147 - 1);
          v148 = v147 - 8;
          if (v149)
          {
            LODWORD(v231.__r_.__value_.__l.__data_) = ((unint64_t)(a2[2] - a2[1]) >> 3) - 1;
            v230.__r_.__value_.__s.__data_[0] = 3;
            v150 = a2[15];
            if (!v150)
LABEL_364:
              sub_20AECABA4();
            if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *))(*(_QWORD *)v150 + 48))(v150, &v231, &v230) & 1) == 0)
            {
              sub_20B4541AC((uint64_t)__str, v224);
              v158 = (unsigned __int8 *)*((_QWORD *)a2[2] - 1);
              v159 = *v158;
              *v158 = __str[0];
              __str[0] = v159;
              v160 = (void **)*((_QWORD *)v158 + 1);
              *((_QWORD *)v158 + 1) = v236;
              v236 = v160;
              sub_20B4181DC(&v236, v159);
              v162 = a2[1];
              v161 = a2[2];
              a2[2] = v161 - 8;
              --a2[5];
              if (v162 != v161 - 8)
              {
                v163 = *((_QWORD *)v161 - 2);
                if (*(_BYTE *)v163 == 2)
                {
                  v164 = *(_QWORD *)(v163 + 8);
                  v165 = *(_QWORD *)(v164 + 8);
                  v166 = *(unsigned __int8 *)(v165 - 16);
                  v165 -= 16;
                  sub_20B4181DC((void ***)(v165 + 8), v166);
                  *(_QWORD *)(v164 + 8) = v165;
                }
              }
              goto LABEL_156;
            }
            a2[2] -= 8;
          }
          else
          {
            a2[2] = v148;
          }
          --a2[5];
LABEL_156:
          v128 = v233;
          if (!v233)
            goto LABEL_347;
LABEL_157:
          if (((*(_QWORD *)((char *)v232 + (((v128 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v128 - 1)) & 1) != 0)
          {
            v129 = sub_20B4FEA94(v5);
            *(_DWORD *)(a1 + 32) = v129;
            if (v129 == 13)
              goto LABEL_177;
            if (v129 != 10)
            {
              sub_20B50229C(&v231, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              v230 = *(std::string *)(a1 + 72);
              sub_20AEC0D64(&v228, "array");
              sub_20B502390(&__p, a1, 0xAu, (const void **)&v228.__r_.__value_.__l.__data_);
              sub_20B45AE7C(101, (uint64_t *)&v230, (uint64_t)&__p, (uint64_t)__str);
              sub_20B50224C((uint64_t)a2, (uint64_t)__str);
              goto LABEL_354;
            }
            v130 = a2[2];
            v132 = *((_QWORD *)v130 - 1);
            v131 = v130 - 8;
            if (v132)
            {
              LODWORD(v231.__r_.__value_.__l.__data_) = ((unint64_t)(a2[2] - a2[1]) >> 3) - 1;
              v230.__r_.__value_.__s.__data_[0] = 3;
              v133 = a2[15];
              if (!v133)
                sub_20AECABA4();
              if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *))(*(_QWORD *)v133 + 48))(v133, &v231, &v230) & 1) != 0)
              {
                a2[2] -= 8;
                goto LABEL_168;
              }
              sub_20B4541AC((uint64_t)__str, v6);
              v135 = (unsigned __int8 *)*((_QWORD *)a2[2] - 1);
              v136 = *v135;
              *v135 = __str[0];
              __str[0] = v136;
              v137 = (void **)*((_QWORD *)v135 + 1);
              *((_QWORD *)v135 + 1) = v236;
              v236 = v137;
              sub_20B4181DC(&v236, v136);
              v139 = a2[1];
              v138 = a2[2];
              a2[2] = v138 - 8;
              --a2[5];
              if (v139 != v138 - 8)
              {
                v140 = *((_QWORD *)v138 - 2);
                if (*(_BYTE *)v140 == 2)
                {
                  v141 = *(_QWORD *)(v140 + 8);
                  v142 = *(_QWORD *)(v141 + 8);
                  v143 = *(unsigned __int8 *)(v142 - 16);
                  v142 -= 16;
                  sub_20B4181DC((void ***)(v142 + 8), v143);
                  *(_QWORD *)(v141 + 8) = v142;
                }
              }
            }
            else
            {
              a2[2] = v131;
LABEL_168:
              --a2[5];
            }
          }
          else
          {
            v134 = sub_20B4FEA94(v5);
            *(_DWORD *)(a1 + 32) = v134;
            if (v134 == 13)
            {
              v144 = sub_20B4FEA94(v5);
              *(_DWORD *)(a1 + 32) = v144;
              if (v144 == 4)
              {
                sub_20B504EB0((uint64_t)a2, v4);
                v145 = sub_20B4FEA94(v5);
                *(_DWORD *)(a1 + 32) = v145;
                if (v145 == 12)
                {
LABEL_177:
                  *(_DWORD *)(a1 + 32) = sub_20B4FEA94(v5);
                  continue;
                }
LABEL_353:
                sub_20B50229C(&v231, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                v230 = *(std::string *)(a1 + 72);
                sub_20AEC0D64(&v228, "object separator");
                sub_20B502390(&__p, a1, 0xCu, (const void **)&v228.__r_.__value_.__l.__data_);
                sub_20B45AE7C(101, (uint64_t *)&v230, (uint64_t)&__p, (uint64_t)__str);
                sub_20B50224C((uint64_t)a2, (uint64_t)__str);
LABEL_354:
                *(_QWORD *)__str = &off_24C41D9D8;
                std::runtime_error::~runtime_error(&v237);
                std::exception::~exception((std::exception *)__str);
LABEL_355:
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
                {
                  v220 = (void *)v228.__r_.__value_.__r.__words[0];
LABEL_344:
                  operator delete(v220);
                }
                goto LABEL_345;
              }
LABEL_352:
              sub_20B50229C(&v231, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              v230 = *(std::string *)(a1 + 72);
              sub_20AEC0D64(&v228, "object key");
              sub_20B502390(&__p, a1, 4u, (const void **)&v228.__r_.__value_.__l.__data_);
              sub_20B45AE7C(101, (uint64_t *)&v230, (uint64_t)&__p, (uint64_t)__str);
              sub_20B50224C((uint64_t)a2, (uint64_t)__str);
              goto LABEL_354;
            }
            if (v134 != 11)
            {
              sub_20B50229C(&v231, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              v230 = *(std::string *)(a1 + 72);
              sub_20AEC0D64(&v228, "object");
              sub_20B502390(&__p, a1, 0xBu, (const void **)&v228.__r_.__value_.__l.__data_);
              sub_20B45AE7C(101, (uint64_t *)&v230, (uint64_t)&__p, (uint64_t)__str);
              sub_20B50224C((uint64_t)a2, (uint64_t)__str);
              goto LABEL_354;
            }
            sub_20B504988((uint64_t)a2);
          }
          v128 = --v233;
          if (!v233)
            goto LABEL_347;
          goto LABEL_157;
        }
        v151 = v233;
        if (v233 == v234 << 6)
        {
          if ((uint64_t)(v233 + 1) < 0)
            sub_20B451A44();
          v152 = v234 << 7;
          if (v234 << 7 <= (v233 & 0xFFFFFFFFFFFFFFC0) + 64)
            v152 = (v233 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v233 <= 0x3FFFFFFFFFFFFFFELL)
            v153 = v152;
          else
            v153 = 0x7FFFFFFFFFFFFFFFLL;
          sub_20B45D3B8((uint64_t)&v232, v153);
          v151 = v233;
        }
        v233 = v151 + 1;
        *(_QWORD *)((char *)v232 + ((v151 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v151;
        continue;
      case 9:
        *(_DWORD *)__str = (unint64_t)(a2[2] - a2[1]) >> 3;
        v231.__r_.__value_.__s.__data_[0] = 0;
        v23 = a2[15];
        if (!v23)
          goto LABEL_364;
        v24 = (*(uint64_t (**)(unsigned __int8 *, char *, std::string *, unsigned __int8 *))(*(_QWORD *)v23 + 48))(v23, __str, &v231, v6);
        v25 = v24;
        v27 = (unint64_t)a2[5];
        v26 = a2[6];
        if (v27 != (_QWORD)v26 << 6)
        {
          a2[5] = (unsigned __int8 *)(v27 + 1);
          v43 = a2[4];
          v44 = v27 >> 6;
          v45 = 1 << v27;
          if (!v24)
            goto LABEL_62;
          goto LABEL_123;
        }
        if ((uint64_t)(v27 + 1) < 0)
          goto LABEL_365;
        if (v27 <= 0x3FFFFFFFFFFFFFFELL)
        {
          v28 = (_QWORD)v26 << 7;
          if (v28 <= (v27 & 0xFFFFFFFFFFFFFFC0) + 64)
            v28 = (v27 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v27 < v28)
          {
            if ((v28 & 0x8000000000000000) != 0)
LABEL_365:
              sub_20B451A44();
LABEL_104:
            v80 = ((v28 - 1) >> 6) + 1;
            v81 = (uint64_t *)operator new(8 * v80);
            v82 = *v222;
            v83 = (v27 - 1) >> 6;
            if (v27 < 0x41)
              v83 = 0;
            v81[v83] = 0;
            if (v27 > 0x3F || (v27 & 0x3F) != 0)
            {
              v84 = 0;
              v85 = 0;
              v86 = v81;
              v87 = v82;
              do
              {
                v88 = 1 << v84;
                if (((*v87 >> v85) & 1) != 0)
                  v89 = *v86 | v88;
                else
                  v89 = *v86 & ~v88;
                *v86 = v89;
                v87 += v85 == 63;
                if (v85 == 63)
                  v85 = 0;
                else
                  ++v85;
                v86 += v84 == 63;
                if (v84 == 63)
                  v84 = 0;
                else
                  ++v84;
              }
              while (v85 != (v27 & 0x3F) || v87 != &v82[v27 >> 6]);
            }
            a2[4] = (unsigned __int8 *)v81;
            a2[6] = (unsigned __int8 *)v80;
            if (v82)
            {
              operator delete(v82);
              v27 = (unint64_t)a2[5];
            }
          }
          a2[5] = (unsigned __int8 *)(v27 + 1);
          v43 = a2[4];
          v44 = v27 >> 6;
          v45 = 1 << v27;
          if (!v25)
            goto LABEL_62;
          goto LABEL_123;
        }
        v28 = 0x7FFFFFFFFFFFFFFFLL;
        if (v27 < 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_104;
        a2[5] = 0;
        v43 = a2[4];
        v44 = 0x3FFFFFFFFFFFFFFLL;
        v45 = 0;
        if (!v24)
        {
LABEL_62:
          v46 = *(_QWORD *)&v43[8 * v44] & ~v45;
          goto LABEL_124;
        }
LABEL_123:
        v46 = *(_QWORD *)&v43[8 * v44] | v45;
LABEL_124:
        *(_QWORD *)&v43[8 * v44] = v46;
        v90 = sub_20B505130(a2, 1u);
        v91 = v90;
        v93 = (uint64_t *)a2[2];
        v92 = a2[3];
        if (v93 < (uint64_t *)v92)
        {
          *v93 = v90;
          v94 = (uint64_t)(v93 + 1);
          goto LABEL_198;
        }
        v95 = *v223;
        v96 = (char *)v93 - (char *)*v223;
        v97 = v96 >> 3;
        v98 = (v96 >> 3) + 1;
        if (v98 >> 61)
LABEL_366:
          sub_20B505354();
        v99 = v92 - (unsigned __int8 *)v95;
        if (v99 >> 2 > v98)
          v98 = v99 >> 2;
        if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
          v100 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v100 = v98;
        if (v100)
        {
          if (v100 >> 61)
LABEL_371:
            sub_20AEC60CC();
          v101 = operator new(8 * v100);
          v102 = &v101[8 * v97];
          *(_QWORD *)v102 = v91;
          v94 = (uint64_t)(v102 + 8);
          v103 = (char *)((char *)v93 - (char *)v95);
          if (v93 == v95)
          {
LABEL_196:
            a2[1] = v102;
            a2[2] = (unsigned __int8 *)v94;
            a2[3] = &v101[8 * v100];
            if (!v93)
              goto LABEL_198;
LABEL_197:
            operator delete(v93);
            goto LABEL_198;
          }
        }
        else
        {
          v101 = 0;
          v102 = (unsigned __int8 *)(8 * v97);
          *(_QWORD *)(8 * v97) = v91;
          v94 = 8 * v97 + 8;
          v103 = (char *)((char *)v93 - (char *)v95);
          if (v93 == v95)
            goto LABEL_196;
        }
        v104 = (unint64_t)(v103 - 8);
        if (v104 < 0x58)
          goto LABEL_383;
        if ((unint64_t)((char *)v93 - v101 - v96) < 0x20)
          goto LABEL_383;
        v105 = (v104 >> 3) + 1;
        v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
        v107 = &v93[v106 / 0xFFFFFFFFFFFFFFF8];
        v102 -= v106;
        v108 = &v101[8 * v97 - 16];
        v109 = v93 - 2;
        v110 = v105 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v111 = *(_OWORD *)v109;
          *(v108 - 1) = *((_OWORD *)v109 - 1);
          *v108 = v111;
          v108 -= 2;
          v109 -= 4;
          v110 -= 4;
        }
        while (v110);
        v93 = v107;
        if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_383:
          do
          {
            v112 = *--v93;
            *((_QWORD *)v102 - 1) = v112;
            v102 -= 8;
          }
          while (v93 != v95);
        }
        v93 = *v223;
        a2[1] = v102;
        a2[2] = (unsigned __int8 *)v94;
        a2[3] = &v101[8 * v100];
        if (v93)
          goto LABEL_197;
LABEL_198:
        a2[2] = (unsigned __int8 *)v94;
        v154 = sub_20B4FEA94(v5);
        v4 = v225;
        v6 = v224;
        *(_DWORD *)(a1 + 32) = v154;
        if (v154 == 11)
        {
          sub_20B504988((uint64_t)a2);
          goto LABEL_156;
        }
        if (v154 != 4)
          goto LABEL_352;
        sub_20B504EB0((uint64_t)a2, v225);
        v155 = sub_20B4FEA94(v5);
        *(_DWORD *)(a1 + 32) = v155;
        if (v155 != 12)
          goto LABEL_353;
        v156 = v233;
        if (v233 == v234 << 6)
        {
          if ((uint64_t)(v233 + 1) < 0)
            sub_20B451A44();
          if (v233 > 0x3FFFFFFFFFFFFFFELL)
          {
            v157 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else if (v234 << 7 <= (v233 & 0xFFFFFFFFFFFFFFC0) + 64)
          {
            v157 = (v233 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          else
          {
            v157 = v234 << 7;
          }
          sub_20B45D3B8((uint64_t)&v232, v157);
          v156 = v233;
        }
        v233 = v156 + 1;
        *(_QWORD *)((char *)v232 + ((v156 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v156);
        *(_DWORD *)(a1 + 32) = sub_20B4FEA94(v5);
        continue;
      case 0xE:
        v168 = *(unsigned __int8 **)(a1 + 96);
        v167 = *(unsigned __int8 **)(a1 + 104);
        memset(&v231, 0, sizeof(v231));
        if (v168 == v167)
          goto LABEL_339;
        v226 = v167;
        while (1)
        {
          v170 = *v168;
          if (v170 > 0x1F)
          {
            if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
            {
              size = (v231.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v231.__r_.__value_.__l.__size_ == size)
              {
                if ((v231.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                  sub_20AEC0138();
                v179 = (std::string *)v231.__r_.__value_.__r.__words[0];
                v183 = 0x7FFFFFFFFFFFFFF7;
                if (size < 0x3FFFFFFFFFFFFFF3)
                {
LABEL_256:
                  if (size + 1 > 2 * size)
                    v184 = size + 1;
                  else
                    v184 = 2 * size;
                  v185 = (v184 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v184 | 7) != 0x17)
                    v185 = v184 | 7;
                  if (v184 >= 0x17)
                    v183 = v185 + 1;
                  else
                    v183 = 23;
                }
                v186 = (std::string *)operator new(v183);
                v187 = v186;
                if (!size || (memmove(v186, v179, size), size != 22))
                  operator delete(v179);
                v231.__r_.__value_.__r.__words[0] = (std::string::size_type)v187;
                v231.__r_.__value_.__r.__words[2] = v183 | 0x8000000000000000;
              }
              else
              {
                size = v231.__r_.__value_.__l.__size_;
                v187 = (std::string *)v231.__r_.__value_.__r.__words[0];
              }
              v231.__r_.__value_.__l.__size_ = size + 1;
            }
            else
            {
              if (HIBYTE(v231.__r_.__value_.__r.__words[2]) == 22)
              {
                v179 = &v231;
                size = 22;
                goto LABEL_256;
              }
              size = HIBYTE(v231.__r_.__value_.__r.__words[2]);
              *((_BYTE *)&v231.__r_.__value_.__s + 23) = (*((_BYTE *)&v231.__r_.__value_.__s + 23) + 1) & 0x7F;
              v187 = &v231;
            }
            v188 = (char *)v187 + size;
            *v188 = v170;
            v188[1] = 0;
            goto LABEL_225;
          }
          LOBYTE(v236) = 0;
          *(_QWORD *)__str = 0;
          snprintf(__str, 9uLL, "<U+%.4X>", v170);
          v171 = strlen(__str);
          v172 = v171;
          if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v173 = 22;
          else
            v173 = (v231.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v174 = HIBYTE(v231.__r_.__value_.__r.__words[2]);
          else
            v174 = v231.__r_.__value_.__l.__size_;
          if (v173 - v174 >= v171)
          {
            if (!v171)
              goto LABEL_225;
            if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v181 = &v231;
            else
              v181 = (std::string *)v231.__r_.__value_.__r.__words[0];
            memmove((char *)v181 + v174, __str, v171);
            v182 = v174 + v172;
            if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
              v231.__r_.__value_.__l.__size_ = v174 + v172;
            else
              *((_BYTE *)&v231.__r_.__value_.__s + 23) = v182 & 0x7F;
            v169 = (char *)v181 + v182;
          }
          else
          {
            v175 = v174 + v171;
            if (0x7FFFFFFFFFFFFFF6 - v173 < v174 + v171 - v173)
              sub_20AEC0138();
            if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v176 = &v231;
            else
              v176 = (std::string *)v231.__r_.__value_.__r.__words[0];
            v177 = 0x7FFFFFFFFFFFFFF7;
            if (v173 < 0x3FFFFFFFFFFFFFF3)
            {
              v178 = 2 * v173;
              if (v175 > 2 * v173)
                v178 = v174 + v171;
              if (v178 >= 0x17)
              {
                v189 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
                v190 = v178 | 7;
                if (v190 == 23)
                  v190 = v189;
                v177 = v190 + 1;
              }
              else
              {
                v177 = 23;
              }
            }
            v191 = operator new(v177);
            v192 = (std::string::size_type)v191;
            if (v174)
              memmove(v191, v176, v174);
            memcpy((void *)(v192 + v174), __str, v172);
            if (v173 != 22)
              operator delete(v176);
            v231.__r_.__value_.__l.__size_ = v174 + v172;
            v231.__r_.__value_.__r.__words[2] = v177 | 0x8000000000000000;
            v231.__r_.__value_.__r.__words[0] = v192;
            v169 = (_BYTE *)(v192 + v175);
          }
          *v169 = 0;
          v167 = v226;
LABEL_225:
          if (++v168 == v167)
          {
LABEL_339:
            v230 = *(std::string *)(a1 + 72);
            *((_BYTE *)&v228.__r_.__value_.__s + 23) = 5;
            strcpy((char *)&v228, "value");
            sub_20B502390(&__p, a1, 0, (const void **)&v228.__r_.__value_.__l.__data_);
            sub_20B45AE7C(101, (uint64_t *)&v230, (uint64_t)&__p, (uint64_t)__str);
            *((_BYTE *)a2 + 88) = 1;
            if (*((_BYTE *)a2 + 128))
            {
              exception = __cxa_allocate_exception(0x28uLL);
              *(_QWORD *)exception = &off_24C41D9D8;
              *((_DWORD *)exception + 2) = (_DWORD)v236;
              std::runtime_error::runtime_error((std::runtime_error *)exception + 1, &v237);
              *(_QWORD *)exception = &off_24C41DAD8;
              *((_QWORD *)exception + 4) = v238;
              __cxa_throw(exception, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
            }
            goto LABEL_342;
          }
        }
      default:
        v194 = *(unsigned __int8 **)(a1 + 96);
        v193 = *(unsigned __int8 **)(a1 + 104);
        memset(&v231, 0, sizeof(v231));
        if (v194 == v193)
          goto LABEL_341;
        v227 = v193;
        break;
    }
    break;
  }
  do
  {
    v198 = *v194;
    if (v198 > 0x1F)
    {
      if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
      {
        v195 = (v231.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v231.__r_.__value_.__l.__size_ != v195)
        {
          v195 = v231.__r_.__value_.__l.__size_;
          v196 = (std::string *)v231.__r_.__value_.__r.__words[0];
LABEL_328:
          v231.__r_.__value_.__l.__size_ = v195 + 1;
          goto LABEL_283;
        }
        if ((v231.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
          sub_20AEC0138();
        v207 = (std::string *)v231.__r_.__value_.__r.__words[0];
        v211 = 0x7FFFFFFFFFFFFFF7;
        if (v195 >= 0x3FFFFFFFFFFFFFF3)
        {
LABEL_323:
          v214 = (std::string *)operator new(v211);
          v196 = v214;
          if (!v195 || (memmove(v214, v207, v195), v195 != 22))
            operator delete(v207);
          v231.__r_.__value_.__r.__words[0] = (std::string::size_type)v196;
          v231.__r_.__value_.__r.__words[2] = v211 | 0x8000000000000000;
          goto LABEL_328;
        }
      }
      else
      {
        if (HIBYTE(v231.__r_.__value_.__r.__words[2]) != 22)
        {
          v195 = HIBYTE(v231.__r_.__value_.__r.__words[2]);
          *((_BYTE *)&v231.__r_.__value_.__s + 23) = (*((_BYTE *)&v231.__r_.__value_.__s + 23) + 1) & 0x7F;
          v196 = &v231;
LABEL_283:
          v197 = (char *)v196 + v195;
          *v197 = v198;
          v197[1] = 0;
          goto LABEL_284;
        }
        v207 = &v231;
        v195 = 22;
      }
      if (v195 + 1 > 2 * v195)
        v212 = v195 + 1;
      else
        v212 = 2 * v195;
      v213 = (v212 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v212 | 7) != 0x17)
        v213 = v212 | 7;
      if (v212 >= 0x17)
        v211 = v213 + 1;
      else
        v211 = 23;
      goto LABEL_323;
    }
    LOBYTE(v236) = 0;
    *(_QWORD *)__str = 0;
    snprintf(__str, 9uLL, "<U+%.4X>", v198);
    v199 = strlen(__str);
    v200 = v199;
    if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v201 = 22;
    else
      v201 = (v231.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v202 = HIBYTE(v231.__r_.__value_.__r.__words[2]);
    else
      v202 = v231.__r_.__value_.__l.__size_;
    if (v201 - v202 >= v199)
    {
      if (!v199)
        goto LABEL_284;
      if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v208 = &v231;
      else
        v208 = (std::string *)v231.__r_.__value_.__r.__words[0];
      memmove((char *)v208 + v202, __str, v199);
      v209 = v202 + v200;
      if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
        v231.__r_.__value_.__l.__size_ = v202 + v200;
      else
        *((_BYTE *)&v231.__r_.__value_.__s + 23) = v209 & 0x7F;
      v210 = (char *)v208 + v209;
    }
    else
    {
      v203 = v202 + v199;
      if (0x7FFFFFFFFFFFFFF6 - v201 < v202 + v199 - v201)
        sub_20AEC0138();
      if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v204 = &v231;
      else
        v204 = (std::string *)v231.__r_.__value_.__r.__words[0];
      v205 = 0x7FFFFFFFFFFFFFF7;
      if (v201 < 0x3FFFFFFFFFFFFFF3)
      {
        v206 = 2 * v201;
        if (v203 > 2 * v201)
          v206 = v202 + v199;
        if (v206 >= 0x17)
        {
          v215 = (v206 & 0xFFFFFFFFFFFFFFF8) + 8;
          v216 = v206 | 7;
          if (v216 == 23)
            v216 = v215;
          v205 = v216 + 1;
        }
        else
        {
          v205 = 23;
        }
      }
      v217 = operator new(v205);
      v218 = (std::string::size_type)v217;
      if (v202)
        memmove(v217, v204, v202);
      memcpy((void *)(v218 + v202), __str, v200);
      if (v201 != 22)
        operator delete(v204);
      v231.__r_.__value_.__l.__size_ = v202 + v200;
      v231.__r_.__value_.__r.__words[2] = v205 | 0x8000000000000000;
      v231.__r_.__value_.__r.__words[0] = v218;
      v210 = (_BYTE *)(v218 + v203);
    }
    *v210 = 0;
    v193 = v227;
LABEL_284:
    ++v194;
  }
  while (v194 != v193);
LABEL_341:
  v230 = *(std::string *)(a1 + 72);
  *((_BYTE *)&v228.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v228, "value");
  sub_20B502390(&__p, a1, 0x10u, (const void **)&v228.__r_.__value_.__l.__data_);
  sub_20B45AE7C(101, (uint64_t *)&v230, (uint64_t)&__p, (uint64_t)__str);
  *((_BYTE *)a2 + 88) = 1;
  if (*((_BYTE *)a2 + 128))
  {
    v221 = __cxa_allocate_exception(0x28uLL);
    *(_QWORD *)v221 = &off_24C41D9D8;
    *((_DWORD *)v221 + 2) = (_DWORD)v236;
    std::runtime_error::runtime_error((std::runtime_error *)v221 + 1, &v237);
    *(_QWORD *)v221 = &off_24C41DAD8;
    *((_QWORD *)v221 + 4) = v238;
    __cxa_throw(v221, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
  }
LABEL_342:
  *(_QWORD *)__str = &off_24C41D9D8;
  std::runtime_error::~runtime_error(&v237);
  std::exception::~exception((std::exception *)__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v220 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_344;
  }
LABEL_345:
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v231.__r_.__value_.__l.__data_);
LABEL_347:
  if (v232)
    operator delete(v232);
}

void sub_20B502028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41)
{
  std::runtime_error *v41;
  uint64_t v42;
  void *v44;

  *(_QWORD *)(v42 - 136) = &off_24C41D9D8;
  std::runtime_error::~runtime_error(v41 + 1);
  std::exception::~exception((std::exception *)(v42 - 136));
  if (a28 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a40 < 0)
  {
    operator delete(a35);
    v44 = a41;
    if (a41)
    {
LABEL_10:
      operator delete(v44);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v44 = a41;
    if (a41)
      goto LABEL_10;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B50224C(uint64_t result, uint64_t a2)
{
  void *exception;
  void *v4;

  *(_BYTE *)(result + 88) = 1;
  if (*(_BYTE *)(result + 128))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    v4 = (void *)sub_20B45F888((uint64_t)exception, a2);
    __cxa_throw(v4, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
  }
  return result;
}

void sub_20B50229C(std::string *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned int v6;
  size_t v7;
  char __str[8];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = *v4;
      if (v6 > 0x1F)
      {
        std::string::push_back(this, v6);
      }
      else
      {
        v9 = 0;
        *(_QWORD *)__str = 0;
        snprintf(__str, 9uLL, "<U+%.4X>", v6);
        v7 = strlen(__str);
        std::string::append(this, __str, v7);
      }
      ++v4;
    }
    while (v4 != a3);
  }
}

void sub_20B502370(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20B502390(std::string *this, uint64_t a2, unsigned int a3, const void **a4)
{
  int v7;
  size_t v8;
  unint64_t v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string::size_type v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  std::string::size_type v23;
  std::string *p_dst;
  const char *v25;
  size_t v26;
  std::string::size_type v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  __int128 v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  size_t v36;
  unsigned int v37;
  std::string::size_type size;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v41;
  std::string *v42;
  __int128 v43;
  void **v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  void **v52;
  std::string::size_type v53;
  void *v54;
  const char *v55;
  size_t v56;
  std::string::size_type v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  std::string *v61;
  __int128 v62;
  void **v63;
  std::string::size_type v64;
  std::string v65;
  std::string __dst;
  std::string v67;
  std::string v68;
  void *__p[2];
  int64_t v70;
  char __str[8];
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)&this->__r_.__value_.__s + 23) = 13;
  strcpy((char *)this, "syntax error ");
  v7 = *((char *)a4 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a4 + 23);
  else
    v8 = (size_t)a4[1];
  if (v8)
  {
    v9 = v8 + 14;
    if (v8 + 14 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    if (v9 > 0x16)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = (char *)operator new(v12 + 1);
      v68.__r_.__value_.__l.__size_ = v8 + 14;
      v68.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    }
    else
    {
      memset(&v68, 0, sizeof(v68));
      v11 = (char *)&v68;
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = v8 + 14;
    }
    qmemcpy(v11, "while parsing ", 14);
    v14 = v11 + 14;
    if (v7 >= 0)
      v15 = a4;
    else
      v15 = *a4;
    memmove(v11 + 14, v15, v8);
    v14[v8] = 0;
    v16 = std::string::append(&v68, " ", 1uLL);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v70 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (v70 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    if (v70 >= 0)
      v19 = HIBYTE(v70);
    else
      v19 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v18, v19);
    if (SHIBYTE(v70) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
    }
    else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v68.__r_.__value_.__l.__data_);
  }
LABEL_22:
  std::string::append(this, "- ", 2uLL);
  v20 = *(int *)(a2 + 32);
  if ((_DWORD)v20 != 14)
  {
    if (v20 > 0x10)
      v25 = "unknown token";
    else
      v25 = off_24C41E638[v20];
    v26 = strlen(v25);
    if (v26 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v27 = v26;
    if (v26 >= 0x17)
    {
      v40 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v40 = v26 | 7;
      v41 = v40 + 1;
      v28 = operator new(v40 + 1);
      v68.__r_.__value_.__l.__size_ = v27;
      v68.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    }
    else
    {
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = v26;
      v28 = &v68;
      if (!v26)
        goto LABEL_49;
    }
    memcpy(v28, v25, v27);
LABEL_49:
    *((_BYTE *)v28 + v27) = 0;
    v42 = std::string::insert(&v68, 0, "unexpected ", 0xBuLL);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v70 = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    if (v70 >= 0)
      v44 = __p;
    else
      v44 = (void **)__p[0];
    if (v70 >= 0)
      v45 = HIBYTE(v70);
    else
      v45 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v44, v45);
    if (SHIBYTE(v70) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_87;
    }
    else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_87;
    }
    v54 = (void *)v68.__r_.__value_.__r.__words[0];
    goto LABEL_86;
  }
  v21 = *(const char **)(a2 + 144);
  v22 = strlen(v21);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v23 = v22;
  if (v22 >= 0x17)
  {
    v29 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v29 = v22 | 7;
    v30 = v29 + 1;
    p_dst = (std::string *)operator new(v29 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_37;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v22;
  p_dst = &__dst;
  if (v22)
LABEL_37:
    memmove(p_dst, v21, v23);
  p_dst->__r_.__value_.__s.__data_[v23] = 0;
  v31 = std::string::append(&__dst, "; last read: '", 0xEuLL);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = *(unsigned __int8 **)(a2 + 96);
  v34 = *(unsigned __int8 **)(a2 + 104);
  memset(&v65, 0, sizeof(v65));
  if (v33 == v34)
  {
    size = 0;
    v39 = 0;
    v37 = 0;
  }
  else
  {
    do
    {
      v35 = *v33;
      if (v35 > 0x1F)
      {
        std::string::push_back(&v65, v35);
      }
      else
      {
        v72 = 0;
        *(_QWORD *)__str = 0;
        snprintf(__str, 9uLL, "<U+%.4X>", v35);
        v36 = strlen(__str);
        std::string::append(&v65, __str, v36);
      }
      ++v33;
    }
    while (v33 != v34);
    v37 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    size = v65.__r_.__value_.__l.__size_;
    v39 = v65.__r_.__value_.__r.__words[0];
  }
  if ((v37 & 0x80u) == 0)
    v46 = &v65;
  else
    v46 = (std::string *)v39;
  if ((v37 & 0x80u) == 0)
    v47 = v37;
  else
    v47 = size;
  v48 = std::string::append(&v67, (const std::string::value_type *)v46, v47);
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v50 = std::string::append(&v68, "'", 1uLL);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v70 = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (v70 >= 0)
    v52 = __p;
  else
    v52 = (void **)__p[0];
  if (v70 >= 0)
    v53 = HIBYTE(v70);
  else
    v53 = (std::string::size_type)__p[1];
  std::string::append(this, (const std::string::value_type *)v52, v53);
  if (SHIBYTE(v70) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_75:
      if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_76;
      goto LABEL_83;
    }
  }
  else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_75;
  }
  operator delete(v68.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_76:
    if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_77;
LABEL_84:
    operator delete(v67.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_87;
    goto LABEL_85;
  }
LABEL_83:
  operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_84;
LABEL_77:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_87;
LABEL_85:
  v54 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_86:
  operator delete(v54);
LABEL_87:
  if (!a3)
    return;
  if (a3 > 0x10)
    v55 = "unknown token";
  else
    v55 = off_24C41E6C0[a3 - 1];
  v56 = strlen(v55);
  if (v56 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v57 = v56;
  if (v56 >= 0x17)
  {
    v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v59 = v56 | 7;
    v60 = v59 + 1;
    v58 = operator new(v59 + 1);
    v68.__r_.__value_.__l.__size_ = v57;
    v68.__r_.__value_.__r.__words[2] = v60 | 0x8000000000000000;
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    goto LABEL_98;
  }
  *((_BYTE *)&v68.__r_.__value_.__s + 23) = v56;
  v58 = &v68;
  if (v56)
LABEL_98:
    memcpy(v58, v55, v57);
  *((_BYTE *)v58 + v57) = 0;
  v61 = std::string::insert(&v68, 0, "; expected ", 0xBuLL);
  v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v70 = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  if (v70 >= 0)
    v63 = __p;
  else
    v63 = (void **)__p[0];
  if (v70 >= 0)
    v64 = HIBYTE(v70);
  else
    v64 = (std::string::size_type)__p[1];
  std::string::append(this, (const std::string::value_type *)v63, v64);
  if ((SHIBYTE(v70) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_109:
    operator delete(v68.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_109;
}

void sub_20B502A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a42 < 0)
  {
    operator delete(__p);
    if (a35 < 0)
    {
LABEL_5:
      operator delete(a30);
      if (a16 < 0)
      {
LABEL_8:
        operator delete(a11);
        if ((a28 & 0x80000000) == 0)
          goto LABEL_9;
        goto LABEL_12;
      }
LABEL_11:
      if ((a28 & 0x80000000) == 0)
      {
LABEL_9:
        if ((a22 & 0x80000000) == 0)
        {
LABEL_14:
          if (*(char *)(v42 + 23) < 0)
            operator delete(*(void **)v42);
          _Unwind_Resume(a1);
        }
LABEL_13:
        operator delete(a17);
        goto LABEL_14;
      }
LABEL_12:
      operator delete(a23);
      if ((a22 & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else if (a35 < 0)
  {
    goto LABEL_5;
  }
  if (a16 < 0)
    goto LABEL_8;
  goto LABEL_11;
}

uint64_t sub_20B502B48(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  sub_20B4181DC((void ***)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  v2 = *(_QWORD **)(a1 + 120);
  if (v2 == (_QWORD *)(a1 + 96))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(void **)(a1 + 56);
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 32);
  if (v5)
    operator delete(v5);
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_20B502BCC(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t *v8;
  uint64_t v9;
  void **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  char **v13;
  unint64_t v14;
  void ***v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  void ***v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void **v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  unsigned __int8 *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  _OWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  unsigned __int8 *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _OWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  unsigned __int8 *v74;
  int v75;
  char v76;
  unsigned __int8 *v77;
  void **v78;
  _QWORD *v79;
  _QWORD *v80;
  unsigned __int8 *v81;
  void ***p_size;
  char *v83;
  char v84;
  unsigned __int8 *v85;
  std::string::size_type v86;
  _QWORD *v87;
  _QWORD *v88;
  unsigned __int8 *v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  __int128 v105;
  void ***v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char v115;
  void ***v116;
  void ***v117;
  void ***v118;
  void ***v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char v125;
  void ***v126;
  void ***v127;
  void ***v128;
  void ***v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  void ***v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char v141;
  void ***v142;
  void ***v143;
  void ***v144;
  void ***v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char v151;
  void ***v152;
  void ***v153;
  void ***v154;
  unsigned __int8 *v155;
  unint64_t v156;
  int v157;
  int v158;
  int v159;
  uint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  char v163;
  uint64_t v164;
  unsigned __int8 *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  __int128 v170;
  char *v171;
  int v172;
  unsigned __int8 *v173;
  std::string::size_type v174;
  char *v175;
  char *v176;
  const char *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  std::runtime_error_vtbl *v181;
  char v182;
  void ***v183;
  std::runtime_error v184;
  void ***v185;
  void ***v186;
  int v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unsigned __int8 *v191;
  unsigned __int8 *v192;
  size_t v193;
  std::string *v194;
  _BYTE *v195;
  unsigned int v196;
  size_t v197;
  size_t v198;
  std::string::size_type v199;
  size_t size;
  unint64_t v201;
  std::string *v202;
  size_t v203;
  unint64_t v204;
  std::string *v205;
  std::string *v206;
  size_t v207;
  _BYTE *v208;
  size_t v209;
  unint64_t v210;
  uint64_t v211;
  std::string *v212;
  unint64_t v213;
  uint64_t v214;
  void *v215;
  std::string::size_type v216;
  unsigned __int8 *v217;
  unsigned __int8 *v218;
  size_t v219;
  std::string *v220;
  _BYTE *v221;
  unsigned int v222;
  size_t v223;
  size_t v224;
  std::string::size_type v225;
  size_t v226;
  unint64_t v227;
  std::string *v228;
  size_t v229;
  unint64_t v230;
  std::string *v231;
  std::string *v232;
  size_t v233;
  _BYTE *v234;
  size_t v235;
  unint64_t v236;
  uint64_t v237;
  std::string *v238;
  unint64_t v239;
  uint64_t v240;
  void *v241;
  std::string::size_type v242;
  void *exception;
  void *v244;
  void *v245;
  uint64_t **v246;
  uint64_t v247;
  unsigned __int8 *v248;
  unsigned __int8 *v249;
  std::string v250;
  std::string __p;
  std::string v252;
  std::string v253;
  void *v254;
  unint64_t v255;
  uint64_t v256;
  char __str[8];
  void **v258;
  std::runtime_error v259;
  uint64_t v260;
  uint64_t v261;

  v247 = a1 + 120;
  v4 = a1 + 40;
  v261 = *MEMORY[0x24BDAC8D0];
  v254 = 0;
  v255 = 0;
  v246 = (uint64_t **)(a2 + 1);
  v256 = 0;
LABEL_2:
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        __str[0] = 1;
        sub_20B5058AC(a2, (unsigned __int8 *)__str);
        goto LABEL_190;
      case 2:
        __str[0] = 0;
        sub_20B5058AC(a2, (unsigned __int8 *)__str);
        goto LABEL_190;
      case 3:
        v16 = a2[2];
        if (a2[1] != v16)
        {
          v17 = *((_QWORD *)v16 - 1);
          if (*(_BYTE *)v17 == 2)
          {
            v13 = *(char ***)(v17 + 8);
            v15 = (void ***)v13[1];
            v18 = (unint64_t)v13[2];
            if ((unint64_t)v15 < v18)
            {
              *(_BYTE *)v15 = 0;
              v15[1] = 0;
              v13[1] = (char *)(v15 + 2);
              goto LABEL_190;
            }
            v119 = (void ***)*v13;
            v120 = ((char *)v15 - *v13) >> 4;
            v121 = v120 + 1;
            if (!((unint64_t)(v120 + 1) >> 60))
            {
              v122 = v18 - (_QWORD)v119;
              if (v122 >> 3 > v121)
                v121 = v122 >> 3;
              if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF0)
                v123 = 0xFFFFFFFFFFFFFFFLL;
              else
                v123 = v121;
              if (!(v123 >> 60))
              {
                v124 = (char *)operator new(16 * v123);
                v112 = &v124[16 * v120];
                v113 = &v124[16 * v123];
                *v112 = 0;
                *((_QWORD *)v112 + 1) = 0;
                v114 = v112 + 16;
                if (v15 != v119)
                {
                  do
                  {
                    v125 = *((_BYTE *)v15 - 16);
                    v15 -= 2;
                    *(v112 - 16) = v125;
                    v112 -= 16;
                    *((_QWORD *)v112 + 1) = v15[1];
                    *(_BYTE *)v15 = 0;
                    v15[1] = 0;
                  }
                  while (v15 != v119);
                  v15 = (void ***)*v13;
                  v126 = (void ***)v13[1];
                  *v13 = v112;
                  v13[1] = v114;
                  v13[2] = v113;
                  if (v126 != v15)
                  {
                    v127 = v126 - 1;
                    do
                    {
                      v128 = v127 - 1;
                      sub_20B4181DC(v127, *((unsigned __int8 *)v127 - 8));
                      v127 -= 2;
                    }
                    while (v128 != v15);
                  }
                  goto LABEL_181;
                }
LABEL_184:
                *v13 = v112;
                v13[1] = v114;
                v13[2] = v113;
                if (!v15)
                  goto LABEL_183;
                goto LABEL_182;
              }
LABEL_402:
              sub_20AEC60CC();
            }
LABEL_404:
            sub_20B41750C();
          }
          v85 = a2[4];
          v75 = *v85;
          *v85 = 0;
          v253.__r_.__value_.__s.__data_[0] = v75;
          v86 = *((_QWORD *)v85 + 1);
          *((_QWORD *)v85 + 1) = 0;
          goto LABEL_188;
        }
        v77 = *a2;
        v75 = **a2;
        *v77 = 0;
        __str[0] = v75;
        v78 = (void **)*((_QWORD *)v77 + 1);
        *((_QWORD *)v77 + 1) = 0;
        goto LABEL_72;
      case 4:
        v24 = a2[2];
        if (a2[1] != v24)
        {
          v25 = *((_QWORD *)v24 - 1);
          if (*(_BYTE *)v25 != 2)
          {
            v87 = operator new(0x18uLL);
            v88 = v87;
            if (*(char *)(a1 + 143) < 0)
            {
              sub_20AEC60F4(v87, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
            }
            else
            {
              *(_OWORD *)v87 = *(_OWORD *)v247;
              v87[2] = *(_QWORD *)(v247 + 16);
            }
            v173 = a2[4];
            v75 = *v173;
            *v173 = 3;
            v252.__r_.__value_.__s.__data_[0] = v75;
            v174 = *((_QWORD *)v173 + 1);
            *((_QWORD *)v173 + 1) = v88;
            v252.__r_.__value_.__l.__size_ = v174;
            p_size = (void ***)&v252.__r_.__value_.__l.__size_;
            goto LABEL_189;
          }
          v26 = *(_QWORD *)(v25 + 8);
          v27 = *(void ****)(v26 + 8);
          v28 = *(_QWORD *)(v26 + 16);
          if ((unint64_t)v27 < v28)
          {
            v27[1] = 0;
            *(_BYTE *)v27 = 3;
            v29 = (void **)operator new(0x18uLL);
            v30 = v29;
            if (*(char *)(a1 + 143) < 0)
            {
              sub_20AEC60F4(v29, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
            }
            else
            {
              *(_OWORD *)v29 = *(_OWORD *)v247;
              v29[2] = *(void **)(v247 + 16);
            }
            v27[1] = v30;
            *(_QWORD *)(v26 + 8) = v27 + 2;
            *(_QWORD *)(v26 + 8) = v27 + 2;
LABEL_190:
            v156 = v255;
            if (v255)
            {
              while (1)
              {
                if (((*(_QWORD *)((char *)v254 + (((v156 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v156
                                                                                                - 1)) & 1) != 0)
                {
                  v157 = sub_20B4FEA94(v4);
                  *(_DWORD *)(a1 + 32) = v157;
                  if (v157 == 13)
                    goto LABEL_228;
                  if (v157 != 10)
                  {
                    sub_20B50229C(&v253, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                    v252 = *(std::string *)(a1 + 72);
                    sub_20AEC0D64(&v250, "array");
                    sub_20B502390(&__p, a1, 0xAu, (const void **)&v250.__r_.__value_.__l.__data_);
                    sub_20B45AE7C(101, (uint64_t *)&v252, (uint64_t)&__p, (uint64_t)__str);
                    sub_20B504938((uint64_t)a2, (uint64_t)__str);
                    goto LABEL_393;
                  }
                }
                else
                {
                  v158 = sub_20B4FEA94(v4);
                  *(_DWORD *)(a1 + 32) = v158;
                  if (v158 == 13)
                  {
                    v159 = sub_20B4FEA94(v4);
                    *(_DWORD *)(a1 + 32) = v159;
                    if (v159 == 4)
                    {
                      v160 = *(uint64_t **)(*((_QWORD *)a2[2] - 1) + 8);
                      __str[0] = 0;
                      v258 = 0;
                      v161 = *v160;
                      v162 = v160[1];
                      if (*v160 != v162)
                      {
                        v163 = *(_BYTE *)(a1 + 143);
                        if (v163 >= 0)
                          v164 = *(unsigned __int8 *)(a1 + 143);
                        else
                          v164 = *(_QWORD *)(a1 + 128);
                        if (v163 >= 0)
                          v165 = (unsigned __int8 *)v247;
                        else
                          v165 = *(unsigned __int8 **)(a1 + 120);
                        do
                        {
                          v166 = *(unsigned __int8 *)(v161 + 23);
                          if ((v166 & 0x80u) == 0)
                            v167 = *(unsigned __int8 *)(v161 + 23);
                          else
                            v167 = *(_QWORD *)(v161 + 8);
                          if (v167 == v164)
                          {
                            if ((v166 & 0x80) != 0)
                            {
                              if (!memcmp(*(const void **)v161, v165, *(_QWORD *)(v161 + 8)))
                                goto LABEL_219;
                            }
                            else
                            {
                              if (!*(_BYTE *)(v161 + 23))
                              {
LABEL_219:
                                v169 = 0;
                                goto LABEL_227;
                              }
                              v168 = 0;
                              while (*(unsigned __int8 *)(v161 + v168) == v165[v168])
                              {
                                if (v166 == ++v168)
                                  goto LABEL_219;
                              }
                            }
                          }
                          v161 += 40;
                        }
                        while (v161 != v162);
                      }
                      if (v162 >= v160[2])
                      {
                        v171 = sub_20B453FDC(v160, v247, (unsigned __int8 *)__str);
                      }
                      else
                      {
                        if (*(char *)(a1 + 143) < 0)
                        {
                          sub_20AEC60F4((_BYTE *)v162, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
                        }
                        else
                        {
                          v170 = *(_OWORD *)v247;
                          *(_QWORD *)(v162 + 16) = *(_QWORD *)(v247 + 16);
                          *(_OWORD *)v162 = v170;
                        }
                        sub_20B4541AC(v162 + 24, (unsigned __int8 *)__str);
                        v171 = (char *)(v162 + 40);
                        v160[1] = v162 + 40;
                      }
                      v160[1] = (uint64_t)v171;
                      v161 = (uint64_t)(v171 - 40);
                      v169 = __str[0];
LABEL_227:
                      sub_20B4181DC(&v258, v169);
                      a2[4] = (unsigned __int8 *)(v161 + 24);
                      v172 = sub_20B4FEA94(v4);
                      *(_DWORD *)(a1 + 32) = v172;
                      if (v172 == 12)
                      {
LABEL_228:
                        *(_DWORD *)(a1 + 32) = sub_20B4FEA94(v4);
                        goto LABEL_2;
                      }
LABEL_392:
                      sub_20B50229C(&v253, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                      v252 = *(std::string *)(a1 + 72);
                      sub_20AEC0D64(&v250, "object separator");
                      sub_20B502390(&__p, a1, 0xCu, (const void **)&v250.__r_.__value_.__l.__data_);
                      sub_20B45AE7C(101, (uint64_t *)&v252, (uint64_t)&__p, (uint64_t)__str);
                      sub_20B504938((uint64_t)a2, (uint64_t)__str);
LABEL_393:
                      *(_QWORD *)__str = &off_24C41D9D8;
                      std::runtime_error::~runtime_error(&v259);
                      std::exception::~exception((std::exception *)__str);
LABEL_394:
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
                      {
                        v244 = (void *)v250.__r_.__value_.__r.__words[0];
LABEL_384:
                        operator delete(v244);
                      }
                      goto LABEL_385;
                    }
LABEL_391:
                    sub_20B50229C(&v253, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                    v252 = *(std::string *)(a1 + 72);
                    sub_20AEC0D64(&v250, "object key");
                    sub_20B502390(&__p, a1, 4u, (const void **)&v250.__r_.__value_.__l.__data_);
                    sub_20B45AE7C(101, (uint64_t *)&v252, (uint64_t)&__p, (uint64_t)__str);
                    sub_20B504938((uint64_t)a2, (uint64_t)__str);
                    goto LABEL_393;
                  }
                  if (v158 != 11)
                  {
                    sub_20B50229C(&v253, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                    v252 = *(std::string *)(a1 + 72);
                    sub_20AEC0D64(&v250, "object");
                    sub_20B502390(&__p, a1, 0xBu, (const void **)&v250.__r_.__value_.__l.__data_);
                    sub_20B45AE7C(101, (uint64_t *)&v252, (uint64_t)&__p, (uint64_t)__str);
                    sub_20B504938((uint64_t)a2, (uint64_t)__str);
                    goto LABEL_393;
                  }
                }
                a2[2] -= 8;
                v156 = --v255;
                if (!v255)
                  goto LABEL_387;
              }
            }
            goto LABEL_387;
          }
          v129 = *(void ****)v26;
          v130 = ((uint64_t)v27 - *(_QWORD *)v26) >> 4;
          v131 = v130 + 1;
          if ((unint64_t)(v130 + 1) >> 60)
            goto LABEL_404;
          v132 = v28 - (_QWORD)v129;
          if (v132 >> 3 > v131)
            v131 = v132 >> 3;
          if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF0)
            v133 = 0xFFFFFFFFFFFFFFFLL;
          else
            v133 = v131;
          v260 = v26 + 16;
          if (v133)
          {
            if (v133 >> 60)
              goto LABEL_402;
            v134 = (char *)operator new(16 * v133);
          }
          else
          {
            v134 = 0;
          }
          v176 = &v134[16 * v130];
          *(_QWORD *)__str = v134;
          v258 = (void **)v176;
          v177 = &v134[16 * v133];
          v259.__vftable = (std::runtime_error_vtbl *)v176;
          v259.__imp_.__imp_ = v177;
          *((_QWORD *)v176 + 1) = 0;
          v178 = v176 + 8;
          *v176 = 3;
          v179 = operator new(0x18uLL);
          v180 = v179;
          if (*(char *)(a1 + 143) < 0)
          {
            sub_20AEC60F4(v179, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
            v129 = *(void ****)v26;
            v27 = *(void ****)(v26 + 8);
            *v178 = v180;
            v181 = (std::runtime_error_vtbl *)(v176 + 16);
            v259.__vftable = (std::runtime_error_vtbl *)(v176 + 16);
            if (v27 == v129)
              goto LABEL_246;
          }
          else
          {
            *(_OWORD *)v179 = *(_OWORD *)v247;
            v179[2] = *(_QWORD *)(v247 + 16);
            *v178 = v179;
            v181 = (std::runtime_error_vtbl *)(v176 + 16);
            v259.__vftable = (std::runtime_error_vtbl *)(v176 + 16);
            if (v27 == v129)
            {
LABEL_246:
              *(_QWORD *)v26 = v176;
              *(_QWORD *)(v26 + 8) = v181;
              *(_QWORD *)(v26 + 16) = v177;
              if (!v129)
                goto LABEL_245;
              goto LABEL_244;
            }
          }
          do
          {
            v182 = *((_BYTE *)v27 - 16);
            v27 -= 2;
            *(v176 - 16) = v182;
            v176 -= 16;
            *((_QWORD *)v176 + 1) = v27[1];
            *(_BYTE *)v27 = 0;
            v27[1] = 0;
          }
          while (v27 != v129);
          v129 = *(void ****)v26;
          v183 = *(void ****)(v26 + 8);
          v184 = v259;
          *(_QWORD *)v26 = v176;
          *(std::runtime_error *)(v26 + 8) = v184;
          v181 = v184.__vftable;
          if (v183 != v129)
          {
            v185 = v183 - 1;
            do
            {
              v186 = v185 - 1;
              sub_20B4181DC(v185, *((unsigned __int8 *)v185 - 8));
              v185 -= 2;
            }
            while (v186 != v129);
          }
          if (!v129)
            goto LABEL_245;
LABEL_244:
          operator delete(v129);
LABEL_245:
          *(_QWORD *)(v26 + 8) = v181;
          goto LABEL_190;
        }
        v79 = operator new(0x18uLL);
        v80 = v79;
        if (*(char *)(a1 + 143) < 0)
        {
          sub_20AEC60F4(v79, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
        }
        else
        {
          *(_OWORD *)v79 = *(_OWORD *)v247;
          v79[2] = *(_QWORD *)(v247 + 16);
        }
        v155 = *a2;
        v75 = **a2;
        *v155 = 3;
        v253.__r_.__value_.__s.__data_[0] = v75;
        v86 = *((_QWORD *)v155 + 1);
        *((_QWORD *)v155 + 1) = v80;
        goto LABEL_188;
      case 5:
        v10 = *(void ***)(a1 + 160);
        v35 = a2[2];
        if (a2[1] != v35)
        {
          v36 = *((_QWORD *)v35 - 1);
          if (*(_BYTE *)v36 == 2)
          {
            v13 = *(char ***)(v36 + 8);
            v15 = (void ***)v13[1];
            v37 = (unint64_t)v13[2];
            if ((unint64_t)v15 < v37)
            {
              *(_BYTE *)v15 = 6;
              v15[1] = v10;
              v13[1] = (char *)(v15 + 2);
              goto LABEL_190;
            }
            v135 = (void ***)*v13;
            v136 = ((char *)v15 - *v13) >> 4;
            v137 = v136 + 1;
            if ((unint64_t)(v136 + 1) >> 60)
              goto LABEL_404;
            v138 = v37 - (_QWORD)v135;
            if (v138 >> 3 > v137)
              v137 = v138 >> 3;
            if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0)
              v139 = 0xFFFFFFFFFFFFFFFLL;
            else
              v139 = v137;
            if (v139 >> 60)
              goto LABEL_402;
            v140 = (char *)operator new(16 * v139);
            v112 = &v140[16 * v136];
            v113 = &v140[16 * v139];
            *v112 = 6;
            *((_QWORD *)v112 + 1) = v10;
            v114 = v112 + 16;
            if (v15 == v135)
              goto LABEL_184;
            do
            {
              v141 = *((_BYTE *)v15 - 16);
              v15 -= 2;
              *(v112 - 16) = v141;
              v112 -= 16;
              *((_QWORD *)v112 + 1) = v15[1];
              *(_BYTE *)v15 = 0;
              v15[1] = 0;
            }
            while (v15 != v135);
            v15 = (void ***)*v13;
            v142 = (void ***)v13[1];
            *v13 = v112;
            v13[1] = v114;
            v13[2] = v113;
            if (v142 != v15)
            {
              v143 = v142 - 1;
              do
              {
                v144 = v143 - 1;
                sub_20B4181DC(v143, *((unsigned __int8 *)v143 - 8));
                v143 -= 2;
              }
              while (v144 != v15);
            }
LABEL_181:
            if (!v15)
            {
LABEL_183:
              v13[1] = v114;
              goto LABEL_190;
            }
LABEL_182:
            operator delete(v15);
            goto LABEL_183;
          }
          v83 = (char *)a2[4];
          v75 = *v83;
          v84 = 6;
          goto LABEL_78;
        }
        v74 = *a2;
        v75 = **a2;
        v76 = 6;
        goto LABEL_70;
      case 6:
        v10 = *(void ***)(a1 + 152);
        v11 = a2[2];
        if (a2[1] != v11)
        {
          v12 = *((_QWORD *)v11 - 1);
          if (*(_BYTE *)v12 == 2)
          {
            v13 = *(char ***)(v12 + 8);
            v15 = (void ***)v13[1];
            v14 = (unint64_t)v13[2];
            if ((unint64_t)v15 < v14)
            {
              *(_BYTE *)v15 = 5;
              v15[1] = v10;
              v13[1] = (char *)(v15 + 2);
              goto LABEL_190;
            }
            v106 = (void ***)*v13;
            v107 = ((char *)v15 - *v13) >> 4;
            v108 = v107 + 1;
            if ((unint64_t)(v107 + 1) >> 60)
              goto LABEL_404;
            v109 = v14 - (_QWORD)v106;
            if (v109 >> 3 > v108)
              v108 = v109 >> 3;
            if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0)
              v110 = 0xFFFFFFFFFFFFFFFLL;
            else
              v110 = v108;
            if (v110 >> 60)
              goto LABEL_402;
            v111 = (char *)operator new(16 * v110);
            v112 = &v111[16 * v107];
            v113 = &v111[16 * v110];
            *v112 = 5;
            *((_QWORD *)v112 + 1) = v10;
            v114 = v112 + 16;
            if (v15 == v106)
              goto LABEL_184;
            do
            {
              v115 = *((_BYTE *)v15 - 16);
              v15 -= 2;
              *(v112 - 16) = v115;
              v112 -= 16;
              *((_QWORD *)v112 + 1) = v15[1];
              *(_BYTE *)v15 = 0;
              v15[1] = 0;
            }
            while (v15 != v106);
            v15 = (void ***)*v13;
            v116 = (void ***)v13[1];
            *v13 = v112;
            v13[1] = v114;
            v13[2] = v113;
            if (v116 != v15)
            {
              v117 = v116 - 1;
              do
              {
                v118 = v117 - 1;
                sub_20B4181DC(v117, *((unsigned __int8 *)v117 - 8));
                v117 -= 2;
              }
              while (v118 != v15);
            }
            goto LABEL_181;
          }
          v83 = (char *)a2[4];
          v75 = *v83;
          v84 = 5;
LABEL_78:
          *v83 = v84;
          v253.__r_.__value_.__s.__data_[0] = v75;
          v86 = *((_QWORD *)v83 + 1);
          *((_QWORD *)v83 + 1) = v10;
LABEL_188:
          v253.__r_.__value_.__l.__size_ = v86;
          p_size = (void ***)&v253.__r_.__value_.__l.__size_;
          goto LABEL_189;
        }
        v74 = *a2;
        v75 = **a2;
        v76 = 5;
LABEL_70:
        *v74 = v76;
        __str[0] = v75;
        v78 = (void **)*((_QWORD *)v74 + 1);
        *((_QWORD *)v74 + 1) = v10;
LABEL_72:
        v258 = v78;
        p_size = &v258;
LABEL_189:
        sub_20B4181DC(p_size, v75);
        goto LABEL_190;
      case 7:
        v31 = *(void ***)(a1 + 168);
        if (((unint64_t)v31 & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
        {
          sub_20B50229C(&v253, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          sub_20B50229C(&v250, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          sub_20B1F16DC("number overflow parsing '", &v250, &__p);
          sub_20B214D58("'", &__p, &v252);
          sub_20B45E198(406, (uint64_t)&v252, (uint64_t)__str);
          sub_20B505520((uint64_t)a2, (uint64_t)__str);
          *(_QWORD *)__str = &off_24C41D9D8;
          std::runtime_error::~runtime_error(&v259);
          std::exception::~exception((std::exception *)__str);
          if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v252.__r_.__value_.__l.__data_);
          goto LABEL_394;
        }
        v32 = a2[2];
        if (a2[1] == v32)
        {
          v81 = *a2;
          v75 = **a2;
          *v81 = 7;
          __str[0] = v75;
          v78 = (void **)*((_QWORD *)v81 + 1);
          *((_QWORD *)v81 + 1) = v31;
          goto LABEL_72;
        }
        v33 = *((_QWORD *)v32 - 1);
        if (*(_BYTE *)v33 != 2)
        {
          v89 = a2[4];
          v75 = *v89;
          *v89 = 7;
          v253.__r_.__value_.__s.__data_[0] = v75;
          v86 = *((_QWORD *)v89 + 1);
          *((_QWORD *)v89 + 1) = v31;
          goto LABEL_188;
        }
        v13 = *(char ***)(v33 + 8);
        v15 = (void ***)v13[1];
        v34 = (unint64_t)v13[2];
        if ((unint64_t)v15 < v34)
        {
          *(_BYTE *)v15 = 7;
          v15[1] = v31;
          v13[1] = (char *)(v15 + 2);
          goto LABEL_190;
        }
        v145 = (void ***)*v13;
        v146 = ((char *)v15 - *v13) >> 4;
        v147 = v146 + 1;
        if ((unint64_t)(v146 + 1) >> 60)
          sub_20B41750C();
        v148 = v34 - (_QWORD)v145;
        if (v148 >> 3 > v147)
          v147 = v148 >> 3;
        if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF0)
          v149 = 0xFFFFFFFFFFFFFFFLL;
        else
          v149 = v147;
        if (v149 >> 60)
          sub_20AEC60CC();
        v150 = (char *)operator new(16 * v149);
        v112 = &v150[16 * v146];
        v113 = &v150[16 * v149];
        *v112 = 7;
        *((_QWORD *)v112 + 1) = v31;
        v114 = v112 + 16;
        if (v15 != v145)
        {
          do
          {
            v151 = *((_BYTE *)v15 - 16);
            v15 -= 2;
            *(v112 - 16) = v151;
            v112 -= 16;
            *((_QWORD *)v112 + 1) = v15[1];
            *(_BYTE *)v15 = 0;
            v15[1] = 0;
          }
          while (v15 != v145);
          v15 = (void ***)*v13;
          v152 = (void ***)v13[1];
          *v13 = v112;
          v13[1] = v114;
          v13[2] = v113;
          if (v152 != v15)
          {
            v153 = v152 - 1;
            do
            {
              v154 = v153 - 1;
              sub_20B4181DC(v153, *((unsigned __int8 *)v153 - 8));
              v153 -= 2;
            }
            while (v154 != v15);
          }
          goto LABEL_181;
        }
        goto LABEL_184;
      case 8:
        v5 = sub_20B505570(a2, 2u);
        v6 = v5;
        v8 = (uint64_t *)a2[2];
        v7 = a2[3];
        if (v8 < (uint64_t *)v7)
        {
          *v8 = v5;
          v9 = (uint64_t)(v8 + 1);
          goto LABEL_83;
        }
        v38 = *v246;
        v39 = (char *)v8 - (char *)*v246;
        v40 = v39 >> 3;
        v41 = (v39 >> 3) + 1;
        if (v41 >> 61)
          goto LABEL_403;
        v42 = v7 - (unsigned __int8 *)v38;
        if (v42 >> 2 > v41)
          v41 = v42 >> 2;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          if (v43 >> 61)
            goto LABEL_402;
          v44 = operator new(8 * v43);
          v45 = &v44[8 * v40];
          *(_QWORD *)v45 = v6;
          v9 = (uint64_t)(v45 + 8);
          v46 = (char *)((char *)v8 - (char *)v38);
          if (v8 == v38)
          {
LABEL_81:
            a2[1] = v45;
            a2[2] = (unsigned __int8 *)v9;
            a2[3] = &v44[8 * v43];
            if (!v8)
              goto LABEL_83;
LABEL_82:
            operator delete(v8);
            goto LABEL_83;
          }
        }
        else
        {
          v44 = 0;
          v45 = (unsigned __int8 *)(8 * v40);
          *(_QWORD *)(8 * v40) = v6;
          v9 = 8 * v40 + 8;
          v46 = (char *)((char *)v8 - (char *)v38);
          if (v8 == v38)
            goto LABEL_81;
        }
        v47 = (unint64_t)(v46 - 8);
        if (v47 < 0x58)
          goto LABEL_416;
        if ((unint64_t)((char *)v8 - &v44[v39]) < 0x20)
          goto LABEL_416;
        v48 = (v47 >> 3) + 1;
        v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
        v50 = &v8[v49 / 0xFFFFFFFFFFFFFFF8];
        v45 -= v49;
        v51 = &v44[8 * v40 - 16];
        v52 = v8 - 2;
        v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v54 = *(_OWORD *)v52;
          *(v51 - 1) = *((_OWORD *)v52 - 1);
          *v51 = v54;
          v51 -= 2;
          v52 -= 4;
          v53 -= 4;
        }
        while (v53);
        v8 = v50;
        if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_416:
          do
          {
            v55 = *--v8;
            *((_QWORD *)v45 - 1) = v55;
            v45 -= 8;
          }
          while (v8 != v38);
        }
        v8 = *v246;
        a2[1] = v45;
        a2[2] = (unsigned __int8 *)v9;
        a2[3] = &v44[8 * v43];
        if (v8)
          goto LABEL_82;
LABEL_83:
        a2[2] = (unsigned __int8 *)v9;
        v90 = sub_20B4FEA94(v4);
        *(_DWORD *)(a1 + 32) = v90;
        if (v90 == 10)
          goto LABEL_97;
        v91 = v255;
        if (v255 == v256 << 6)
        {
          if ((uint64_t)(v255 + 1) < 0)
            sub_20B451A44();
          v92 = v256 << 7;
          if (v256 << 7 <= (v255 & 0xFFFFFFFFFFFFFFC0) + 64)
            v92 = (v255 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v255 <= 0x3FFFFFFFFFFFFFFELL)
            v93 = v92;
          else
            v93 = 0x7FFFFFFFFFFFFFFFLL;
          sub_20B45D3B8((uint64_t)&v254, v93);
          v91 = v255;
        }
        v255 = v91 + 1;
        *(_QWORD *)((char *)v254 + ((v91 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v91;
        continue;
      case 9:
        v19 = sub_20B505570(a2, 1u);
        v20 = v19;
        v22 = (uint64_t *)a2[2];
        v21 = a2[3];
        if (v22 < (uint64_t *)v21)
        {
          *v22 = v19;
          v23 = (uint64_t)(v22 + 1);
          goto LABEL_96;
        }
        v56 = *v246;
        v57 = (char *)v22 - (char *)*v246;
        v58 = v57 >> 3;
        v59 = (v57 >> 3) + 1;
        if (v59 >> 61)
LABEL_403:
          sub_20B505354();
        v60 = v21 - (unsigned __int8 *)v56;
        if (v60 >> 2 > v59)
          v59 = v60 >> 2;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v59;
        if (v61)
        {
          if (v61 >> 61)
            goto LABEL_402;
          v62 = operator new(8 * v61);
          v63 = &v62[8 * v58];
          *(_QWORD *)v63 = v20;
          v23 = (uint64_t)(v63 + 8);
          v64 = (char *)((char *)v22 - (char *)v56);
          if (v22 == v56)
          {
LABEL_94:
            a2[1] = v63;
            a2[2] = (unsigned __int8 *)v23;
            a2[3] = &v62[8 * v61];
            if (!v22)
              goto LABEL_96;
LABEL_95:
            operator delete(v22);
            goto LABEL_96;
          }
        }
        else
        {
          v62 = 0;
          v63 = (unsigned __int8 *)(8 * v58);
          *(_QWORD *)(8 * v58) = v20;
          v23 = 8 * v58 + 8;
          v64 = (char *)((char *)v22 - (char *)v56);
          if (v22 == v56)
            goto LABEL_94;
        }
        v65 = (unint64_t)(v64 - 8);
        if (v65 < 0x58)
          goto LABEL_417;
        if ((unint64_t)((char *)v22 - &v62[v57]) < 0x20)
          goto LABEL_417;
        v66 = (v65 >> 3) + 1;
        v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
        v68 = &v22[v67 / 0xFFFFFFFFFFFFFFF8];
        v63 -= v67;
        v69 = &v62[8 * v58 - 16];
        v70 = v22 - 2;
        v71 = v66 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v72 = *(_OWORD *)v70;
          *(v69 - 1) = *((_OWORD *)v70 - 1);
          *v69 = v72;
          v69 -= 2;
          v70 -= 4;
          v71 -= 4;
        }
        while (v71);
        v22 = v68;
        if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_417:
          do
          {
            v73 = *--v22;
            *((_QWORD *)v63 - 1) = v73;
            v63 -= 8;
          }
          while (v22 != v56);
        }
        v22 = *v246;
        a2[1] = v63;
        a2[2] = (unsigned __int8 *)v23;
        a2[3] = &v62[8 * v61];
        if (v22)
          goto LABEL_95;
LABEL_96:
        a2[2] = (unsigned __int8 *)v23;
        v94 = sub_20B4FEA94(v4);
        *(_DWORD *)(a1 + 32) = v94;
        if (v94 == 11)
        {
LABEL_97:
          a2[2] -= 8;
          goto LABEL_190;
        }
        if (v94 != 4)
          goto LABEL_391;
        v95 = *(uint64_t **)(*((_QWORD *)a2[2] - 1) + 8);
        __str[0] = 0;
        v258 = 0;
        v96 = *v95;
        v97 = v95[1];
        if (*v95 != v97)
        {
          v98 = *(_BYTE *)(a1 + 143);
          if (v98 >= 0)
            v99 = *(unsigned __int8 *)(a1 + 143);
          else
            v99 = *(_QWORD *)(a1 + 128);
          if (v98 >= 0)
            v100 = (unsigned __int8 *)v247;
          else
            v100 = *(unsigned __int8 **)(a1 + 120);
          do
          {
            v101 = *(unsigned __int8 *)(v96 + 23);
            if ((v101 & 0x80u) == 0)
              v102 = *(unsigned __int8 *)(v96 + 23);
            else
              v102 = *(_QWORD *)(v96 + 8);
            if (v102 == v99)
            {
              if ((v101 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v96, v100, *(_QWORD *)(v96 + 8)))
                  goto LABEL_117;
              }
              else
              {
                if (!*(_BYTE *)(v96 + 23))
                {
LABEL_117:
                  v104 = 0;
                  goto LABEL_251;
                }
                v103 = 0;
                while (*(unsigned __int8 *)(v96 + v103) == v100[v103])
                {
                  if (v101 == ++v103)
                    goto LABEL_117;
                }
              }
            }
            v96 += 40;
          }
          while (v96 != v97);
        }
        if (v97 >= v95[2])
        {
          v175 = sub_20B453FDC(v95, v247, (unsigned __int8 *)__str);
        }
        else
        {
          if (*(char *)(a1 + 143) < 0)
          {
            sub_20AEC60F4((_BYTE *)v97, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
          }
          else
          {
            v105 = *(_OWORD *)v247;
            *(_QWORD *)(v97 + 16) = *(_QWORD *)(v247 + 16);
            *(_OWORD *)v97 = v105;
          }
          sub_20B4541AC(v97 + 24, (unsigned __int8 *)__str);
          v175 = (char *)(v97 + 40);
          v95[1] = v97 + 40;
        }
        v95[1] = (uint64_t)v175;
        v96 = (uint64_t)(v175 - 40);
        v104 = __str[0];
LABEL_251:
        sub_20B4181DC(&v258, v104);
        a2[4] = (unsigned __int8 *)(v96 + 24);
        v187 = sub_20B4FEA94(v4);
        *(_DWORD *)(a1 + 32) = v187;
        if (v187 != 12)
          goto LABEL_392;
        v188 = v255;
        if (v255 == v256 << 6)
        {
          if ((uint64_t)(v255 + 1) < 0)
            sub_20B451A44();
          v189 = v256 << 7;
          if (v256 << 7 <= (v255 & 0xFFFFFFFFFFFFFFC0) + 64)
            v189 = (v255 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v255 <= 0x3FFFFFFFFFFFFFFELL)
            v190 = v189;
          else
            v190 = 0x7FFFFFFFFFFFFFFFLL;
          sub_20B45D3B8((uint64_t)&v254, v190);
          v188 = v255;
        }
        v255 = v188 + 1;
        *(_QWORD *)((char *)v254 + ((v188 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v188);
        *(_DWORD *)(a1 + 32) = sub_20B4FEA94(v4);
        continue;
      case 0xE:
        v192 = *(unsigned __int8 **)(a1 + 96);
        v191 = *(unsigned __int8 **)(a1 + 104);
        memset(&v253, 0, sizeof(v253));
        if (v192 == v191)
          goto LABEL_379;
        v248 = v191;
        while (1)
        {
          v196 = *v192;
          if (v196 > 0x1F)
            break;
          LOBYTE(v258) = 0;
          *(_QWORD *)__str = 0;
          snprintf(__str, 9uLL, "<U+%.4X>", v196);
          v197 = strlen(__str);
          v198 = v197;
          if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v199 = 22;
          else
            v199 = (v253.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v253.__r_.__value_.__r.__words[2]);
          else
            size = v253.__r_.__value_.__l.__size_;
          if (v199 - size < v197)
          {
            v201 = size + v197;
            if (0x7FFFFFFFFFFFFFF6 - v199 < size + v197 - v199)
              sub_20AEC0138();
            if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v202 = &v253;
            else
              v202 = (std::string *)v253.__r_.__value_.__r.__words[0];
            v203 = 0x7FFFFFFFFFFFFFF7;
            if (v199 < 0x3FFFFFFFFFFFFFF3)
            {
              v204 = 2 * v199;
              if (v201 > 2 * v199)
                v204 = size + v197;
              if (v204 >= 0x17)
              {
                v213 = (v204 & 0xFFFFFFFFFFFFFFF8) + 8;
                v214 = v204 | 7;
                if (v214 == 23)
                  v214 = v213;
                v203 = v214 + 1;
              }
              else
              {
                v203 = 23;
              }
            }
            v215 = operator new(v203);
            v216 = (std::string::size_type)v215;
            if (size)
              memmove(v215, v202, size);
            memcpy((void *)(v216 + size), __str, v198);
            if (v199 != 22)
              operator delete(v202);
            v253.__r_.__value_.__l.__size_ = size + v198;
            v253.__r_.__value_.__r.__words[2] = v203 | 0x8000000000000000;
            v253.__r_.__value_.__r.__words[0] = v216;
            v208 = (_BYTE *)(v216 + v201);
            goto LABEL_318;
          }
          if (v197)
          {
            if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v206 = &v253;
            else
              v206 = (std::string *)v253.__r_.__value_.__r.__words[0];
            memmove((char *)v206 + size, __str, v197);
            v207 = size + v198;
            if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
              v253.__r_.__value_.__l.__size_ = size + v198;
            else
              *((_BYTE *)&v253.__r_.__value_.__s + 23) = v207 & 0x7F;
            v208 = (char *)v206 + v207;
LABEL_318:
            *v208 = 0;
            v191 = v248;
          }
LABEL_265:
          if (++v192 == v191)
          {
LABEL_379:
            v252 = *(std::string *)(a1 + 72);
            *((_BYTE *)&v250.__r_.__value_.__s + 23) = 5;
            strcpy((char *)&v250, "value");
            sub_20B502390(&__p, a1, 0, (const void **)&v250.__r_.__value_.__l.__data_);
            sub_20B45AE7C(101, (uint64_t *)&v252, (uint64_t)&__p, (uint64_t)__str);
            *((_BYTE *)a2 + 40) = 1;
            if (*((_BYTE *)a2 + 41))
            {
              exception = __cxa_allocate_exception(0x28uLL);
              *(_QWORD *)exception = &off_24C41D9D8;
              *((_DWORD *)exception + 2) = (_DWORD)v258;
              std::runtime_error::runtime_error((std::runtime_error *)exception + 1, &v259);
              *(_QWORD *)exception = &off_24C41DAD8;
              *((_QWORD *)exception + 4) = v260;
              __cxa_throw(exception, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
            }
            goto LABEL_382;
          }
        }
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
        {
          v193 = (v253.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v253.__r_.__value_.__l.__size_ != v193)
          {
            v193 = v253.__r_.__value_.__l.__size_;
            v194 = (std::string *)v253.__r_.__value_.__r.__words[0];
LABEL_309:
            v253.__r_.__value_.__l.__size_ = v193 + 1;
            goto LABEL_264;
          }
          if ((v253.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
            sub_20AEC0138();
          v205 = (std::string *)v253.__r_.__value_.__r.__words[0];
          v209 = 0x7FFFFFFFFFFFFFF7;
          if (v193 >= 0x3FFFFFFFFFFFFFF3)
          {
LABEL_304:
            v212 = (std::string *)operator new(v209);
            v194 = v212;
            if (!v193 || (memmove(v212, v205, v193), v193 != 22))
              operator delete(v205);
            v253.__r_.__value_.__r.__words[0] = (std::string::size_type)v194;
            v253.__r_.__value_.__r.__words[2] = v209 | 0x8000000000000000;
            goto LABEL_309;
          }
        }
        else
        {
          if (HIBYTE(v253.__r_.__value_.__r.__words[2]) != 22)
          {
            v193 = HIBYTE(v253.__r_.__value_.__r.__words[2]);
            *((_BYTE *)&v253.__r_.__value_.__s + 23) = (*((_BYTE *)&v253.__r_.__value_.__s + 23) + 1) & 0x7F;
            v194 = &v253;
LABEL_264:
            v195 = (char *)v194 + v193;
            *v195 = v196;
            v195[1] = 0;
            goto LABEL_265;
          }
          v205 = &v253;
          v193 = 22;
        }
        if (v193 + 1 > 2 * v193)
          v210 = v193 + 1;
        else
          v210 = 2 * v193;
        v211 = (v210 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v210 | 7) != 0x17)
          v211 = v210 | 7;
        if (v210 >= 0x17)
          v209 = v211 + 1;
        else
          v209 = 23;
        goto LABEL_304;
      default:
        v218 = *(unsigned __int8 **)(a1 + 96);
        v217 = *(unsigned __int8 **)(a1 + 104);
        memset(&v253, 0, sizeof(v253));
        if (v218 == v217)
          goto LABEL_381;
        v249 = v217;
        break;
    }
    break;
  }
  do
  {
    v222 = *v218;
    if (v222 > 0x1F)
    {
      if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
      {
        v219 = (v253.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v253.__r_.__value_.__l.__size_ != v219)
        {
          v219 = v253.__r_.__value_.__l.__size_;
          v220 = (std::string *)v253.__r_.__value_.__r.__words[0];
LABEL_368:
          v253.__r_.__value_.__l.__size_ = v219 + 1;
          goto LABEL_323;
        }
        if ((v253.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
          sub_20AEC0138();
        v231 = (std::string *)v253.__r_.__value_.__r.__words[0];
        v235 = 0x7FFFFFFFFFFFFFF7;
        if (v219 >= 0x3FFFFFFFFFFFFFF3)
        {
LABEL_363:
          v238 = (std::string *)operator new(v235);
          v220 = v238;
          if (!v219 || (memmove(v238, v231, v219), v219 != 22))
            operator delete(v231);
          v253.__r_.__value_.__r.__words[0] = (std::string::size_type)v220;
          v253.__r_.__value_.__r.__words[2] = v235 | 0x8000000000000000;
          goto LABEL_368;
        }
      }
      else
      {
        if (HIBYTE(v253.__r_.__value_.__r.__words[2]) != 22)
        {
          v219 = HIBYTE(v253.__r_.__value_.__r.__words[2]);
          *((_BYTE *)&v253.__r_.__value_.__s + 23) = (*((_BYTE *)&v253.__r_.__value_.__s + 23) + 1) & 0x7F;
          v220 = &v253;
LABEL_323:
          v221 = (char *)v220 + v219;
          *v221 = v222;
          v221[1] = 0;
          goto LABEL_324;
        }
        v231 = &v253;
        v219 = 22;
      }
      if (v219 + 1 > 2 * v219)
        v236 = v219 + 1;
      else
        v236 = 2 * v219;
      v237 = (v236 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v236 | 7) != 0x17)
        v237 = v236 | 7;
      if (v236 >= 0x17)
        v235 = v237 + 1;
      else
        v235 = 23;
      goto LABEL_363;
    }
    LOBYTE(v258) = 0;
    *(_QWORD *)__str = 0;
    snprintf(__str, 9uLL, "<U+%.4X>", v222);
    v223 = strlen(__str);
    v224 = v223;
    if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v225 = 22;
    else
      v225 = (v253.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v226 = HIBYTE(v253.__r_.__value_.__r.__words[2]);
    else
      v226 = v253.__r_.__value_.__l.__size_;
    if (v225 - v226 >= v223)
    {
      if (!v223)
        goto LABEL_324;
      if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v232 = &v253;
      else
        v232 = (std::string *)v253.__r_.__value_.__r.__words[0];
      memmove((char *)v232 + v226, __str, v223);
      v233 = v226 + v224;
      if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
        v253.__r_.__value_.__l.__size_ = v226 + v224;
      else
        *((_BYTE *)&v253.__r_.__value_.__s + 23) = v233 & 0x7F;
      v234 = (char *)v232 + v233;
    }
    else
    {
      v227 = v226 + v223;
      if (0x7FFFFFFFFFFFFFF6 - v225 < v226 + v223 - v225)
        sub_20AEC0138();
      if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v228 = &v253;
      else
        v228 = (std::string *)v253.__r_.__value_.__r.__words[0];
      v229 = 0x7FFFFFFFFFFFFFF7;
      if (v225 < 0x3FFFFFFFFFFFFFF3)
      {
        v230 = 2 * v225;
        if (v227 > 2 * v225)
          v230 = v226 + v223;
        if (v230 >= 0x17)
        {
          v239 = (v230 & 0xFFFFFFFFFFFFFFF8) + 8;
          v240 = v230 | 7;
          if (v240 == 23)
            v240 = v239;
          v229 = v240 + 1;
        }
        else
        {
          v229 = 23;
        }
      }
      v241 = operator new(v229);
      v242 = (std::string::size_type)v241;
      if (v226)
        memmove(v241, v228, v226);
      memcpy((void *)(v242 + v226), __str, v224);
      if (v225 != 22)
        operator delete(v228);
      v253.__r_.__value_.__l.__size_ = v226 + v224;
      v253.__r_.__value_.__r.__words[2] = v229 | 0x8000000000000000;
      v253.__r_.__value_.__r.__words[0] = v242;
      v234 = (_BYTE *)(v242 + v227);
    }
    *v234 = 0;
    v217 = v249;
LABEL_324:
    ++v218;
  }
  while (v218 != v217);
LABEL_381:
  v252 = *(std::string *)(a1 + 72);
  *((_BYTE *)&v250.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v250, "value");
  sub_20B502390(&__p, a1, 0x10u, (const void **)&v250.__r_.__value_.__l.__data_);
  sub_20B45AE7C(101, (uint64_t *)&v252, (uint64_t)&__p, (uint64_t)__str);
  *((_BYTE *)a2 + 40) = 1;
  if (*((_BYTE *)a2 + 41))
  {
    v245 = __cxa_allocate_exception(0x28uLL);
    *(_QWORD *)v245 = &off_24C41D9D8;
    *((_DWORD *)v245 + 2) = (_DWORD)v258;
    std::runtime_error::runtime_error((std::runtime_error *)v245 + 1, &v259);
    *(_QWORD *)v245 = &off_24C41DAD8;
    *((_QWORD *)v245 + 4) = v260;
    __cxa_throw(v245, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
  }
LABEL_382:
  *(_QWORD *)__str = &off_24C41D9D8;
  std::runtime_error::~runtime_error(&v259);
  std::exception::~exception((std::exception *)__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v244 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_384;
  }
LABEL_385:
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v253.__r_.__value_.__l.__data_);
LABEL_387:
  if (v254)
    operator delete(v254);
}

void sub_20B504698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39)
{
  std::runtime_error *v39;
  uint64_t v40;
  void *v42;

  *(_QWORD *)(v40 - 152) = &off_24C41D9D8;
  std::runtime_error::~runtime_error(v39 + 1);
  std::exception::~exception((std::exception *)(v40 - 152));
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a38 < 0)
  {
    operator delete(a33);
    v42 = a39;
    if (a39)
    {
LABEL_10:
      operator delete(v42);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v42 = a39;
    if (a39)
      goto LABEL_10;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B504938(uint64_t result, uint64_t a2)
{
  void *exception;
  void *v4;

  *(_BYTE *)(result + 40) = 1;
  if (*(_BYTE *)(result + 41))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    v4 = (void *)sub_20B45F888((uint64_t)exception, a2);
    __cxa_throw(v4, (struct type_info *)&unk_24C41DAB0, (void (*)(void *))sub_20B45B8B4);
  }
  return result;
}

void sub_20B504988(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  void ***v11;
  uint64_t v12;
  unint64_t v13;
  void ***v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void **v18;
  void ***v19;
  uint64_t v20;
  void ***v21;
  void ***v22;
  char v23;
  void **v24;
  int v25;
  std::string::size_type v26;
  void ***v27;
  void ***v28;
  void **v29;
  void *v30;
  void *v31;
  void *exception;
  void *v33;
  void *v34;
  char *v35;
  void *v36;
  char *v37;
  char v38[8];
  void **v39;
  std::string v40;
  std::string v41;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v2 - 8))
  {
    LODWORD(v41.__r_.__value_.__l.__data_) = ((unint64_t)(v2 - *(_QWORD *)(a1 + 8)) >> 3) - 1;
    v40.__r_.__value_.__s.__data_[0] = 1;
    v3 = *(_QWORD *)(a1 + 120);
    if (!v3)
      sub_20AECABA4();
    if (((*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v3 + 48))(v3, &v41, &v40) & 1) == 0)
    {
      sub_20B4541AC((uint64_t)v38, (unsigned __int8 *)(a1 + 136));
      v4 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 8);
      v5 = *v4;
      *v4 = v38[0];
      v38[0] = v5;
      v6 = (void **)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v39;
      v39 = v6;
      sub_20B4181DC(&v39, v5);
    }
  }
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7 - 8;
  --*(_QWORD *)(a1 + 40);
  if (v8 != v7 - 8)
  {
    v9 = *(unsigned __int8 **)(v7 - 16);
    if (v9)
    {
      v10 = *v9;
      if ((v10 - 1) <= 1)
      {
        if (v10 == 2)
        {
          v12 = 0;
          v11 = (void ***)**((_QWORD **)v9 + 1);
          goto LABEL_12;
        }
        if (v10 == 1)
        {
          v11 = 0;
          v12 = **((_QWORD **)v9 + 1);
LABEL_12:
          v13 = 0x8000000000000000;
          goto LABEL_21;
        }
        v11 = 0;
        v13 = 0;
        v12 = 0;
        while (1)
        {
LABEL_21:
          if (v10 == 1)
          {
            if (v12 == *(_QWORD *)(*((_QWORD *)v9 + 1) + 8))
              return;
            v14 = (void ***)(v12 + 24);
          }
          else if (v10 == 2)
          {
            v14 = v11;
            if (v11 == *(void ****)(*((_QWORD *)v9 + 1) + 8))
              return;
          }
          else
          {
            if (v13 == 1)
              return;
            v14 = (void ***)v9;
            if (v13)
            {
              exception = __cxa_allocate_exception(0x20uLL);
              sub_20AEC0D64(&v41, "cannot get value");
              sub_20B455C8C(214, (uint64_t)&v41, (uint64_t)exception);
              __cxa_throw(exception, (struct type_info *)&unk_24C41DA48, (void (*)(void *))sub_20B455DFC);
            }
          }
          if (*(_BYTE *)v14 == 9)
            break;
          if (v10 == 1)
          {
            v12 += 40;
          }
          else if (v10 == 2)
          {
            v11 += 2;
          }
          else
          {
            ++v13;
          }
        }
        if (v10 != 2)
        {
          if (v10 == 1)
          {
            v15 = *((_QWORD *)v9 + 1);
            v16 = *(_QWORD *)(v15 + 8);
            for (i = v12 + 40; ; i += 40)
            {
              v18 = (void **)(i - 40);
              v19 = (void ***)(i - 8);
              if (i == v16)
                break;
              sub_20B4181DC(v19, *(unsigned __int8 *)(i - 16));
              if (*(char *)(i - 17) < 0)
                operator delete(*v18);
              if (*(char *)(i + 23) < 0)
              {
                sub_20AEC60F4((_BYTE *)(i - 40), *(void **)i, *(_QWORD *)(i + 8));
              }
              else
              {
                *(_OWORD *)v18 = *(_OWORD *)i;
                *(_QWORD *)(i - 24) = *(_QWORD *)(i + 16);
              }
              *(_BYTE *)(i - 16) = *(_BYTE *)(i + 24);
              *(_QWORD *)(i - 8) = *(_QWORD *)(i + 32);
              *(_BYTE *)(i + 24) = 0;
              *(_QWORD *)(i + 32) = 0;
              v16 = *(_QWORD *)(v15 + 8);
            }
            sub_20B4181DC(v19, *(unsigned __int8 *)(i - 16));
            if (*(char *)(i - 17) < 0)
              operator delete(*v18);
            *(_QWORD *)(v15 + 8) = v18;
            return;
          }
          if ((v10 - 3) > 5)
          {
            v34 = __cxa_allocate_exception(0x20uLL);
            v35 = (char *)v9;
            v36 = v34;
            v37 = (char *)sub_20B452AD0(v35);
            sub_20AEC0D64(&v40, v37);
            sub_20B1F16DC("cannot use erase() with ", &v40, &v41);
            sub_20B452958(307, (uint64_t)&v41, (uint64_t)v36);
            __cxa_throw(v36, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
          }
          if (v13)
          {
            v33 = __cxa_allocate_exception(0x20uLL);
            sub_20AEC0D64(&v41, "iterator out of range");
            sub_20B455C8C(205, (uint64_t)&v41, (uint64_t)v33);
            __cxa_throw(v33, (struct type_info *)&unk_24C41DA48, (void (*)(void *))sub_20B455DFC);
          }
          if (v10 == 8)
          {
            v29 = (void **)*((_QWORD *)v9 + 1);
            v31 = *v29;
            if (*v29)
            {
              v29[1] = v31;
              v30 = v31;
              goto LABEL_57;
            }
          }
          else
          {
            if (v10 != 3)
            {
LABEL_59:
              *v9 = 0;
              return;
            }
            v29 = (void **)*((_QWORD *)v9 + 1);
            if (*((char *)v29 + 23) < 0)
            {
              v30 = *v29;
LABEL_57:
              operator delete(v30);
              v29 = (void **)*((_QWORD *)v9 + 1);
            }
          }
          operator delete(v29);
          *((_QWORD *)v9 + 1) = 0;
          goto LABEL_59;
        }
        v20 = *((_QWORD *)v9 + 1);
        v21 = *(void ****)(v20 + 8);
        v22 = v11 + 2;
        if (v11 + 2 != v21)
        {
          do
          {
            v23 = *(_BYTE *)v22;
            v24 = v22[1];
            *(_BYTE *)v22 = 0;
            v22[1] = 0;
            v25 = *((unsigned __int8 *)v22 - 16);
            *((_BYTE *)v22 - 16) = v23;
            v41.__r_.__value_.__s.__data_[0] = v25;
            v26 = (std::string::size_type)*(v22 - 1);
            *(v22 - 1) = v24;
            v41.__r_.__value_.__l.__size_ = v26;
            sub_20B4181DC((void ***)&v41.__r_.__value_.__l.__size_, v25);
            v22 += 2;
          }
          while (v22 != v21);
          v21 = *(void ****)(v20 + 8);
          v11 = v22 - 2;
        }
        if (v21 != v11)
        {
          v27 = v21 - 1;
          do
          {
            v28 = v27 - 1;
            sub_20B4181DC(v27, *((unsigned __int8 *)v27 - 8));
            v27 -= 2;
          }
          while (v28 != v11);
        }
        *(_QWORD *)(v20 + 8) = v11;
      }
    }
  }
}

void sub_20B504E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  if (a22 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if ((v23 & 1) != 0)
    __cxa_free_exception(v22);
  _Unwind_Resume(exception_object);
}

void sub_20B504EB0(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  int v18;
  void **v19;
  char v20[8];
  void **v21;
  unsigned __int8 v22[8];
  void **v23;
  char v24;
  unsigned __int8 v25[8];
  void **v26;

  v22[0] = 3;
  v4 = (void **)operator new(0x18uLL);
  v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20AEC60F4(v4, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a2;
    v4[2] = *(void **)(a2 + 16);
  }
  v23 = v5;
  *(_DWORD *)v25 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  v24 = 4;
  v6 = *(_QWORD *)(a1 + 120);
  if (!v6)
    sub_20AECABA4();
  v7 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, char *, unsigned __int8 *))(*(_QWORD *)v6 + 48))(v6, v25, &v24, v22);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  if (v8 == v9 << 6)
  {
    if ((uint64_t)(v8 + 1) < 0)
      sub_20B451A44();
    v10 = v9 << 7;
    if (v10 <= (v8 & 0xFFFFFFFFFFFFFFC0) + 64)
      v10 = (v8 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v8 <= 0x3FFFFFFFFFFFFFFELL)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    sub_20B45D3B8(a1 + 56, v11);
    v8 = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)(a1 + 64) = v8 + 1;
  v12 = *(_QWORD *)(a1 + 56);
  v13 = v8 >> 6;
  v14 = 1 << v8;
  v15 = 8 * v13;
  if ((v7 & 1) != 0)
  {
    *(_QWORD *)(v12 + v15) |= v14;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8))
    {
      sub_20B4541AC((uint64_t)v20, (unsigned __int8 *)(a1 + 136));
      v16 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 8);
      v25[0] = 0;
      v26 = 0;
      v17 = sub_20B453E7C(v16, a2, v25);
      sub_20B4181DC(&v26, v25[0]);
      v18 = v17[24];
      v17 += 24;
      *v17 = v20[0];
      v20[0] = v18;
      v19 = (void **)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = v21;
      v21 = v19;
      *(_QWORD *)(a1 + 80) = v17;
      sub_20B4181DC(&v21, v18);
    }
  }
  else
  {
    *(_QWORD *)(v12 + v15) &= ~v14;
  }
  sub_20B4181DC(&v23, v22[0]);
}

void sub_20B505080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, void **a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, unsigned __int8 a15)
{
  void ***v15;
  void ***v16;

  sub_20B4181DC(v16, a15);
  sub_20B4181DC(&a11, a10);
  sub_20B4181DC(v15, a12);
  _Unwind_Resume(a1);
}

void sub_20B5050B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B5050C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  void ***v12;

  sub_20B4181DC(v12, a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B5050E0(uint64_t result, uint64_t a2)
{
  void *exception;
  void *v4;

  *(_BYTE *)(result + 88) = 1;
  if (*(_BYTE *)(result + 128))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = (void *)sub_20B45EBA0((uint64_t)exception, a2);
    __cxa_throw(v4, (struct type_info *)&unk_24C41DA30, (void (*)(void *))sub_20B45E314);
  }
  return result;
}

uint64_t sub_20B505130(unsigned __int8 **a1, unsigned __int8 a2)
{
  _QWORD *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  void **v11;
  uint64_t v12;
  int v13;
  void **v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void **v18;
  unsigned __int8 *v19;
  int v20;
  void **v21;
  void **v22;
  char v23;
  void **v24;
  char v25[8];
  void **v26;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) == 0)
    return 0;
  v25[0] = a2;
  switch(a2)
  {
    case 1u:
    case 2u:
      v5 = operator new(0x18uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = 0;
      goto LABEL_9;
    case 3u:
      v5 = operator new(0x18uLL);
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      goto LABEL_9;
    case 4u:
      LOBYTE(v26) = 0;
      break;
    case 8u:
      v5 = operator new(0x20uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = 0;
      *((_WORD *)v5 + 12) = 0;
LABEL_9:
      v26 = (void **)v5;
      break;
    default:
      v26 = 0;
      break;
  }
  v6 = a1[2];
  if (a1[1] == v6)
  {
    v11 = v26;
    v25[0] = 0;
    v26 = 0;
    v12 = (uint64_t)*a1;
    v13 = **a1;
    *(_BYTE *)v12 = a2;
    v23 = v13;
    v14 = *(void ***)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v11;
    v24 = v14;
    sub_20B4181DC(&v24, v13);
    v15 = (uint64_t)*a1;
  }
  else
  {
    v7 = *((_QWORD *)v6 - 1);
    if (!v7)
      goto LABEL_18;
    if (*(_BYTE *)v7 == 2)
    {
      v8 = *(_QWORD *)(v7 + 8);
      v9 = *(_QWORD *)(v8 + 8);
      if (v9 >= *(_QWORD *)(v8 + 16))
      {
        v10 = sub_20B4188F0((void **)v8, v25);
      }
      else
      {
        *(_BYTE *)v9 = a2;
        *(_QWORD *)(v9 + 8) = v26;
        v25[0] = 0;
        v26 = 0;
        v10 = (char *)(v9 + 16);
      }
      *(_QWORD *)(v8 + 8) = v10;
      v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
      goto LABEL_21;
    }
    v16 = (unint64_t)(a1[8] - 1);
    v17 = *(_QWORD *)&a1[7][(v16 >> 3) & 0x1FFFFFFFFFFFFFF8];
    a1[8] = (unsigned __int8 *)v16;
    if (((v17 >> v16) & 1) != 0)
    {
      v18 = v26;
      v25[0] = 0;
      v26 = 0;
      v19 = a1[10];
      v20 = *v19;
      *v19 = a2;
      v21 = (void **)*((_QWORD *)v19 + 1);
      *((_QWORD *)v19 + 1) = v18;
      v22 = v21;
      sub_20B4181DC(&v22, v20);
      v15 = (uint64_t)a1[10];
    }
    else
    {
LABEL_18:
      v15 = 0;
    }
  }
LABEL_21:
  sub_20B4181DC(&v26, v25[0]);
  return v15;
}

void sub_20B50533C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20B4181DC(v13, a13);
  _Unwind_Resume(a1);
}

void sub_20B505354()
{
  sub_20AEC014C("vector");
}

void sub_20B505368(unsigned __int8 **a1, unsigned __int8 a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  void ***v9;
  void **v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  void **v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23[8];
  unint64_t v24;
  char v25;
  int v26;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v23[0] = 4;
    v24 = a2;
    v26 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v25 = 5;
    v3 = a1[15];
    if (!v3)
      sub_20AECABA4();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v3 + 48))(v3, &v26, &v25, v23) & 1) == 0)goto LABEL_13;
    v4 = a1[2];
    if (a1[1] == v4)
    {
      v8 = v23[0];
      v9 = (void ***)&v22;
      v10 = (void **)v24;
      v23[0] = 0;
      v24 = 0;
      v11 = (uint64_t)*a1;
      v12 = **a1;
      *(_BYTE *)v11 = v8;
      v21 = v12;
      v13 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v10;
      v22 = v13;
    }
    else
    {
      v5 = *((_QWORD *)v4 - 1);
      if (!v5)
        goto LABEL_13;
      if (*(_BYTE *)v5 == 2)
      {
        v6 = *(_QWORD *)(v5 + 8);
        v7 = *(_QWORD *)(v6 + 8);
        if (v7 >= *(_QWORD *)(v6 + 16))
        {
          *(_QWORD *)(v6 + 8) = sub_20B4188F0((void **)v6, v23);
        }
        else
        {
          *(_BYTE *)v7 = v23[0];
          *(_QWORD *)(v7 + 8) = v24;
          v23[0] = 0;
          v24 = 0;
          *(_QWORD *)(v6 + 8) = v7 + 16;
        }
        goto LABEL_13;
      }
      v14 = (unint64_t)(a1[8] - 1);
      v15 = *(_QWORD *)&a1[7][(v14 >> 3) & 0x1FFFFFFFFFFFFFF8];
      a1[8] = (unsigned __int8 *)v14;
      if (((v15 >> v14) & 1) == 0)
      {
LABEL_13:
        sub_20B4181DC((void ***)&v24, v23[0]);
        return;
      }
      v16 = v23[0];
      v9 = (void ***)&v20;
      v17 = (void **)v24;
      v23[0] = 0;
      v24 = 0;
      v18 = a1[10];
      v12 = *v18;
      *v18 = v16;
      v19 = *((_QWORD *)v18 + 1);
      *((_QWORD *)v18 + 1) = v17;
      v20 = v19;
    }
    sub_20B4181DC(v9, v12);
    goto LABEL_13;
  }
}

void sub_20B505508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  void ***v14;

  sub_20B4181DC(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20B505520(uint64_t result, uint64_t a2)
{
  void *exception;
  void *v4;

  *(_BYTE *)(result + 40) = 1;
  if (*(_BYTE *)(result + 41))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = (void *)sub_20B45EBA0((uint64_t)exception, a2);
    __cxa_throw(v4, (struct type_info *)&unk_24C41DA30, (void (*)(void *))sub_20B45E314);
  }
  return result;
}

uint64_t sub_20B505570(unsigned __int8 **a1, unsigned __int8 a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  void **v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  void **v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  int v18;
  void **v19;
  void **v21;
  void ***v22;
  void ***v23;
  char v24;
  void ***v25;
  void ***v26;
  void ***v27;
  unsigned __int8 *v28;
  int v29;
  void **v30;
  void **v31;
  char v32;
  void **v33[2];
  void **v34;
  void **v35;
  void **v36;
  _QWORD *v37;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v10 = 0;
    switch(a2)
    {
      case 1u:
      case 2u:
        v10 = (void **)operator new(0x18uLL);
        v10[1] = 0;
        v10[2] = 0;
        *v10 = 0;
        break;
      case 3u:
        v10 = (void **)operator new(0x18uLL);
        *((_BYTE *)v10 + 23) = 0;
        *(_BYTE *)v10 = 0;
        break;
      case 4u:
        LOBYTE(v33[0]) = 0;
        v10 = v33[0];
        break;
      case 8u:
        v10 = (void **)operator new(0x20uLL);
        v10[1] = 0;
        v10[2] = 0;
        *v10 = 0;
        *((_WORD *)v10 + 12) = 0;
        break;
      default:
        break;
    }
    v17 = (uint64_t)*a1;
    v18 = **a1;
    *(_BYTE *)v17 = a2;
    v32 = v18;
    v19 = *(void ***)(v17 + 8);
    *(_QWORD *)(v17 + 8) = v10;
    v33[0] = v19;
    sub_20B4181DC(v33, v18);
    return (uint64_t)*a1;
  }
  else
  {
    v5 = *((_QWORD *)v4 - 1);
    if (*(_BYTE *)v5 == 2)
    {
      v6 = *(void ***)(v5 + 8);
      v7 = (char *)v6[1];
      v8 = (char *)v6[2];
      if (v7 >= v8)
      {
        v12 = (v7 - (_BYTE *)*v6) >> 4;
        if ((unint64_t)(v12 + 1) >> 60)
          sub_20B41750C();
        v13 = v8 - (_BYTE *)*v6;
        v14 = v13 >> 3;
        if (v13 >> 3 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        v37 = v6 + 2;
        if (v15)
        {
          if (v15 >> 60)
            sub_20AEC60CC();
          v16 = (void **)operator new(16 * v15);
        }
        else
        {
          v16 = 0;
        }
        v33[1] = v16;
        v34 = &v16[2 * v12];
        v35 = v34;
        v36 = &v16[2 * v15];
        sub_20B4FAA4C(v34, a2);
        v21 = v34;
        v9 = v34 + 2;
        v22 = (void ***)*v6;
        v23 = (void ***)v6[1];
        if (v23 == *v6)
        {
          *v6 = v34;
          v6[1] = v9;
          v6[2] = v36;
          if (!v23)
            goto LABEL_30;
        }
        else
        {
          do
          {
            v24 = *((_BYTE *)v23 - 16);
            v23 -= 2;
            *((_BYTE *)v21 - 16) = v24;
            v21 -= 2;
            v21[1] = v23[1];
            *(_BYTE *)v23 = 0;
            v23[1] = 0;
          }
          while (v23 != v22);
          v23 = (void ***)*v6;
          v25 = (void ***)v6[1];
          *v6 = v21;
          v6[1] = v9;
          v6[2] = v36;
          if (v25 != v23)
          {
            v26 = v25 - 1;
            do
            {
              v27 = v26 - 1;
              sub_20B4181DC(v26, *((unsigned __int8 *)v26 - 8));
              v26 -= 2;
            }
            while (v27 != v23);
          }
          if (!v23)
            goto LABEL_30;
        }
        operator delete(v23);
      }
      else
      {
        sub_20B4FAA4C(v6[1], a2);
        v9 = v7 + 16;
        v6[1] = v7 + 16;
      }
LABEL_30:
      v6[1] = v9;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    v11 = 0;
    switch(a2)
    {
      case 1u:
      case 2u:
        v11 = (void **)operator new(0x18uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = 0;
        break;
      case 3u:
        v11 = (void **)operator new(0x18uLL);
        *((_BYTE *)v11 + 23) = 0;
        *(_BYTE *)v11 = 0;
        break;
      case 4u:
        LOBYTE(v31) = 0;
        v11 = v31;
        break;
      case 8u:
        v11 = (void **)operator new(0x20uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = 0;
        *((_WORD *)v11 + 12) = 0;
        break;
      default:
        break;
    }
    v28 = a1[4];
    v29 = *v28;
    *v28 = a2;
    v30 = (void **)*((_QWORD *)v28 + 1);
    *((_QWORD *)v28 + 1) = v11;
    v31 = v30;
    sub_20B4181DC(&v31, v29);
    return (uint64_t)a1[4];
  }
}

void sub_20B505890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B456CE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B5058A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B5058AC(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  char **v4;
  unint64_t v5;
  void ***v6;
  void **v7;
  char *v8;
  void ***v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  void ***v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  void ***v29;
  void ***v30;
  void ***v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v2 = a1[2];
  if (a1[1] == v2)
  {
    v9 = (void ***)&v34;
    v10 = *a2;
    v11 = (uint64_t)*a1;
    v12 = **a1;
    *(_BYTE *)v11 = 4;
    v33 = v12;
    v13 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = v10;
    v34 = v13;
LABEL_7:
    sub_20B4181DC(v9, v12);
    return;
  }
  v3 = *((_QWORD *)v2 - 1);
  if (*(_BYTE *)v3 != 2)
  {
    v9 = (void ***)&v32;
    v14 = *a2;
    v15 = a1[4];
    v12 = *v15;
    *v15 = 4;
    v16 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v14;
    v32 = v16;
    goto LABEL_7;
  }
  v4 = *(char ***)(v3 + 8);
  v6 = (void ***)v4[1];
  v5 = (unint64_t)v4[2];
  if ((unint64_t)v6 >= v5)
  {
    v17 = (void ***)*v4;
    v18 = ((char *)v6 - *v4) >> 4;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60)
      sub_20B41750C();
    v20 = v5 - (_QWORD)v17;
    if (v20 >> 3 > v19)
      v19 = v20 >> 3;
    v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0;
    v22 = 0xFFFFFFFFFFFFFFFLL;
    if (!v21)
      v22 = v19;
    if (v22 >> 60)
      sub_20AEC60CC();
    v23 = *a2;
    v24 = 16 * v22;
    v25 = (char *)operator new(16 * v22);
    v26 = &v25[16 * v18];
    v27 = &v25[v24];
    *v26 = 4;
    *((_QWORD *)v26 + 1) = v23;
    v8 = v26 + 16;
    if (v6 == v17)
    {
      *v4 = v26;
      v4[1] = v8;
      v4[2] = v27;
      if (!v6)
        goto LABEL_21;
    }
    else
    {
      do
      {
        v28 = *((_BYTE *)v6 - 16);
        v6 -= 2;
        *(v26 - 16) = v28;
        v26 -= 16;
        *((_QWORD *)v26 + 1) = v6[1];
        *(_BYTE *)v6 = 0;
        v6[1] = 0;
      }
      while (v6 != v17);
      v6 = (void ***)*v4;
      v29 = (void ***)v4[1];
      *v4 = v26;
      v4[1] = v8;
      v4[2] = v27;
      if (v29 != v6)
      {
        v30 = v29 - 1;
        do
        {
          v31 = v30 - 1;
          sub_20B4181DC(v30, *((unsigned __int8 *)v30 - 8));
          v30 -= 2;
        }
        while (v31 != v6);
      }
      if (!v6)
        goto LABEL_21;
    }
    operator delete(v6);
  }
  else
  {
    v6[1] = 0;
    v7 = (void **)*a2;
    *(_BYTE *)v6 = 4;
    v6[1] = v7;
    v8 = (char *)(v6 + 2);
  }
LABEL_21:
  v4[1] = v8;
}

void sub_20B505A90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E5B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B505AA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41E5B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B505AD0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t sub_20B505AE0()
{
  return std::ostream::put();
}

uint64_t sub_20B505AE8()
{
  return std::ostream::write();
}

void sub_20B505AF4()
{
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B505B08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  const void *v15;
  const void *v16;
  int v17;
  const void *v18;
  unint64_t v19;
  size_t v20;
  int v21;
  int v22;
  uint64_t **v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  std::string::size_type v29;
  uint64_t v30;
  const void *v31;
  std::string *p_s1;
  uint64_t v33;
  uint64_t v34;
  void *exception;
  char *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  std::string v41;
  std::string __s1;

  if (*(_BYTE *)(a1 + 88))
  {
    if (!*(_BYTE *)(a1 + 100))
      goto LABEL_47;
    v2 = *(unsigned int *)(a1 + 96);
    v39 = 6;
    v40 = v2;
    v3 = *(_QWORD *)(a1 + 40);
    if (!*(_BYTE *)v3)
    {
      *(_BYTE *)v3 = 1;
      v4 = (char *)operator new(0x18uLL);
      *((_QWORD *)v4 + 1) = 0;
      v5 = (uint64_t **)(v4 + 8);
      *((_QWORD *)v4 + 2) = 0;
      *(_QWORD *)v4 = v4 + 8;
      *(_QWORD *)(v3 + 8) = v4;
      *((_BYTE *)&__s1.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__s1, "version");
      v6 = (uint64_t **)(v4 + 8);
      v7 = (uint64_t **)(v4 + 8);
      goto LABEL_41;
    }
    if (*(_BYTE *)v3 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v37 = (char *)sub_20B452AD0((char *)v3);
      sub_20AEC0D64(&v41, v37);
      sub_20B1F16DC("cannot use operator[] with a string argument with ", &v41, &__s1);
      sub_20B452958(305, (uint64_t)&__s1, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
    }
    v4 = *(char **)(v3 + 8);
    v5 = (uint64_t **)(v4 + 8);
    v13 = (uint64_t *)*((_QWORD *)v4 + 1);
    *((_BYTE *)&__s1.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&__s1, "version");
    if (!v13)
    {
      v6 = (uint64_t **)(v4 + 8);
      v7 = (uint64_t **)(v4 + 8);
LABEL_41:
      v24 = (char *)operator new(0x48uLL);
      *(std::string *)(v24 + 32) = __s1;
      memset(&__s1, 0, sizeof(__s1));
      v24[56] = 0;
      *((_QWORD *)v24 + 8) = 0;
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = v7;
      *v6 = (uint64_t *)v24;
      v25 = **(_QWORD **)v4;
      v26 = (uint64_t *)v24;
      if (v25)
      {
        *(_QWORD *)v4 = v25;
        v26 = *v6;
      }
      sub_20AEC84C8(*v5, v26);
      ++*((_QWORD *)v4 + 2);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_45:
      v27 = v24[56];
      v24[56] = v39;
      v39 = v27;
      v28 = *((_QWORD *)v24 + 8);
      *((_QWORD *)v24 + 8) = v40;
      v40 = v28;
      sub_20B416E08(&v40, v27);
      if (*(_BYTE *)(a1 + 100))
        *(_BYTE *)(a1 + 100) = 0;
LABEL_47:
      v29 = *(_QWORD *)(a1 + 80);
      if (v29 >= 0x7FFFFFFFFFFFFFF8)
        sub_20AEC0138();
      v30 = *(_QWORD *)(a1 + 40);
      v31 = *(const void **)(a1 + 72);
      if (v29 >= 0x17)
      {
        v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v33 = v29 | 7;
        v34 = v33 + 1;
        p_s1 = (std::string *)operator new(v33 + 1);
        __s1.__r_.__value_.__l.__size_ = v29;
        __s1.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
        __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s1;
      }
      else
      {
        *((_BYTE *)&__s1.__r_.__value_.__s + 23) = v29;
        p_s1 = &__s1;
        if (!v29)
        {
LABEL_55:
          p_s1->__r_.__value_.__s.__data_[v29] = 0;
          v23 = sub_20B451C6C(v30, (const void **)&__s1.__r_.__value_.__l.__data_);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s1.__r_.__value_.__l.__data_);
          return (uint64_t)v23;
        }
      }
      memmove(p_s1, v31, v29);
      goto LABEL_55;
    }
    while (1)
    {
      v7 = (uint64_t **)v13;
      v16 = (const void *)v13[4];
      v14 = v13 + 4;
      v15 = v16;
      v17 = *((char *)v14 + 23);
      if (v17 >= 0)
        v18 = v14;
      else
        v18 = v15;
      if (v17 >= 0)
        v19 = *((unsigned __int8 *)v14 + 23);
      else
        v19 = v14[1];
      if (v19 >= 7)
        v20 = 7;
      else
        v20 = v19;
      v21 = memcmp(&__s1, v18, v20);
      if (v21)
      {
        if (v21 < 0)
          goto LABEL_15;
LABEL_29:
        v22 = memcmp(v18, &__s1, v20);
        if (v22)
        {
          if ((v22 & 0x80000000) == 0)
            goto LABEL_39;
        }
        else if (v19 >= 7)
        {
LABEL_39:
          v24 = (char *)v7;
          goto LABEL_45;
        }
        v13 = v7[1];
        if (!v13)
        {
          v6 = v7 + 1;
          goto LABEL_41;
        }
      }
      else
      {
        if (v19 <= 7)
          goto LABEL_29;
LABEL_15:
        v13 = *v7;
        if (!*v7)
        {
          v6 = v7;
          goto LABEL_41;
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 100))
  {
    v38 = *(unsigned int *)(a1 + 96);
    v8 = (unsigned __int8 *)sub_20B44F264(*(_QWORD *)(a1 + 40), 0);
    v9 = *v8;
    *v8 = 6;
    v10 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v38;
    v38 = v10;
    sub_20B416E08(&v38, v9);
    if (*(_BYTE *)(a1 + 100))
      *(_BYTE *)(a1 + 100) = 0;
  }
  v11 = *(unsigned __int8 **)(a1 + 40);
  v12 = *v11;
  if (*v11)
  {
    if ((_DWORD)v12 == 1)
    {
      v12 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 16);
    }
    else if ((_DWORD)v12 == 2)
    {
      v12 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1)) >> 4;
    }
    else
    {
      v12 = 1;
    }
  }
  return sub_20B44F264((uint64_t)v11, v12);
}

void sub_20B505F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t *v24;

  sub_20B416E08(v24, a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B505FB0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  void **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t result;

  v3 = *(char **)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  v4 = v3;
  if ((unint64_t)v3 >= v2)
  {
    v6 = (void **)(a1 + 48);
    v7 = *(char **)(a1 + 48);
    v8 = (v3 - v7) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_20B451A44();
    v10 = v2 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_20AEC60CC();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = *(_QWORD *)(a1 + 40);
    v5 = v13 + 8;
    if (v3 != v7)
    {
      v15 = v3 - v7 - 8;
      if (v15 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v7 - v12) < 0x20)
        goto LABEL_30;
      v16 = (v15 >> 3) + 1;
      v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      v4 = &v3[-v17];
      v13 -= v17;
      v18 = &v12[8 * v8 - 16];
      v19 = (__int128 *)(v3 - 16);
      v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v19;
        *((_OWORD *)v18 - 1) = *(v19 - 1);
        *(_OWORD *)v18 = v21;
        v18 -= 32;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v22 = *((_QWORD *)v4 - 1);
          v4 -= 8;
          *((_QWORD *)v13 - 1) = v22;
          v13 -= 8;
        }
        while (v4 != v7);
      }
      v4 = (char *)*v6;
    }
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v5;
    *(_QWORD *)(a1 + 64) = v14;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *(_QWORD *)v3 = *(_QWORD *)(a1 + 40);
    v5 = v3 + 8;
  }
  *(_QWORD *)(a1 + 56) = v5;
  result = sub_20B505B08(a1);
  *(_QWORD *)(a1 + 40) = result;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  return result;
}

void sub_20B50612C(uint64_t a1, size_t *a2)
{
  const void *v3;
  size_t v4;
  char *v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *a2;
  v3 = (const void *)a2[1];
  if (*a2)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v5 = (char *)operator new(v4);
    v6 = (unsigned __int8 *)&v5[v4];
    memcpy(v5, v3, v4);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_20B50F26C(v7, (unsigned __int8 *)v5, v6);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B505B08(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_20B416E08((uint64_t *)&v11, v9);
  if (v5)
    operator delete(v5);
}

void sub_20B506214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_20B416E08(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_20B506264(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24C41E750;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

uint64_t sub_20B5062B8(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24C41E750;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

void sub_20B50630C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24C41E750;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B506370(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  void **v7;
  unsigned __int8 *v8;
  unint64_t v9;
  char *v10;
  int v11;
  void **v12;
  std::string::size_type v13;
  uint64_t v14;
  const void *v15;
  std::string *p_p;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *exception;
  char *v22;
  void **v23;
  char v24;
  void **v25;
  std::string v26;
  std::string __p;

  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 100))
    {
      v2 = (void **)*(unsigned int *)(a1 + 96);
      v24 = 6;
      v25 = v2;
      v3 = *(_QWORD *)(a1 + 40);
      if (*(_BYTE *)v3)
      {
        if (*(_BYTE *)v3 != 1)
        {
          exception = __cxa_allocate_exception(0x20uLL);
          v22 = (char *)sub_20B452AD0((char *)v3);
          sub_20AEC0D64(&v26, v22);
          sub_20B1F16DC("cannot use operator[] with a string argument with ", &v26, &__p);
          sub_20B452958(305, (uint64_t)&__p, (uint64_t)exception);
          __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
        }
        v4 = *(uint64_t **)(v3 + 8);
      }
      else
      {
        *(_BYTE *)v3 = 1;
        v4 = (uint64_t *)operator new(0x18uLL);
        *v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
        *(_QWORD *)(v3 + 8) = v4;
      }
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__p, "version");
      v26.__r_.__value_.__s.__data_[0] = 0;
      v26.__r_.__value_.__l.__size_ = 0;
      v10 = sub_20B453E7C(v4, (uint64_t)&__p, (unsigned __int8 *)&v26);
      sub_20B4181DC((void ***)&v26.__r_.__value_.__l.__size_, v26.__r_.__value_.__s.__data_[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v11 = v10[24];
      v10[24] = v24;
      v24 = v11;
      v12 = (void **)*((_QWORD *)v10 + 4);
      *((_QWORD *)v10 + 4) = v25;
      v25 = v12;
      sub_20B4181DC(&v25, v11);
      if (*(_BYTE *)(a1 + 100))
        *(_BYTE *)(a1 + 100) = 0;
    }
    v13 = *(_QWORD *)(a1 + 80);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v14 = *(_QWORD *)(a1 + 40);
    v15 = *(const void **)(a1 + 72);
    if (v13 >= 0x17)
    {
      v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v17 = v13 | 7;
      v18 = v17 + 1;
      p_p = (std::string *)operator new(v17 + 1);
      __p.__r_.__value_.__l.__size_ = v13;
      __p.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v13;
      p_p = &__p;
      if (!v13)
      {
LABEL_26:
        p_p->__r_.__value_.__s.__data_[v13] = 0;
        v19 = sub_20B45315C(v14, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return (uint64_t)v19;
      }
    }
    memmove(p_p, v15, v13);
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 100))
  {
    v23 = (void **)*(unsigned int *)(a1 + 96);
    v5 = (unsigned __int8 *)sub_20B44F5D4(*(_QWORD *)(a1 + 40), 0);
    v6 = *v5;
    *v5 = 6;
    v7 = (void **)*((_QWORD *)v5 + 1);
    *((_QWORD *)v5 + 1) = v23;
    v23 = v7;
    sub_20B4181DC(&v23, v6);
    if (*(_BYTE *)(a1 + 100))
      *(_BYTE *)(a1 + 100) = 0;
  }
  v8 = *(unsigned __int8 **)(a1 + 40);
  v9 = *v8;
  if (*v8)
  {
    if ((_DWORD)v9 == 1)
    {
      v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v8 + 1) + 8) - **((_QWORD **)v8 + 1)) >> 3);
    }
    else if ((_DWORD)v9 == 2)
    {
      v9 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v8 + 1) + 8) - **((_QWORD **)v8 + 1)) >> 4;
    }
    else
    {
      v9 = 1;
    }
  }
  return sub_20B44F5D4((uint64_t)v8, v9);
}

void sub_20B50665C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void ***v24;

  sub_20B4181DC(v24, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B50671C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  void **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t result;

  v3 = *(char **)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  v4 = v3;
  if ((unint64_t)v3 >= v2)
  {
    v6 = (void **)(a1 + 48);
    v7 = *(char **)(a1 + 48);
    v8 = (v3 - v7) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_20B505354();
    v10 = v2 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_20AEC60CC();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = *(_QWORD *)(a1 + 40);
    v5 = v13 + 8;
    if (v3 != v7)
    {
      v15 = v3 - v7 - 8;
      if (v15 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v7 - v12) < 0x20)
        goto LABEL_30;
      v16 = (v15 >> 3) + 1;
      v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      v4 = &v3[-v17];
      v13 -= v17;
      v18 = &v12[8 * v8 - 16];
      v19 = (__int128 *)(v3 - 16);
      v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v19;
        *((_OWORD *)v18 - 1) = *(v19 - 1);
        *(_OWORD *)v18 = v21;
        v18 -= 32;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v22 = *((_QWORD *)v4 - 1);
          v4 -= 8;
          *((_QWORD *)v13 - 1) = v22;
          v13 -= 8;
        }
        while (v4 != v7);
      }
      v4 = (char *)*v6;
    }
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v5;
    *(_QWORD *)(a1 + 64) = v14;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *(_QWORD *)v3 = *(_QWORD *)(a1 + 40);
    v5 = v3 + 8;
  }
  *(_QWORD *)(a1 + 56) = v5;
  result = sub_20B506370(a1);
  *(_QWORD *)(a1 + 40) = result;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  return result;
}

void sub_20B506898(uint64_t a1, size_t *a2)
{
  const void *v3;
  size_t v4;
  char *v5;
  unsigned __int8 *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v4 = *a2;
  v3 = (const void *)a2[1];
  if (*a2)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v5 = (char *)operator new(v4);
    v6 = (unsigned __int8 *)&v5[v4];
    memcpy(v5, v3, v4);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_20B50FD94(v7, (unsigned __int8 *)v5, v6);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B506370(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20B4181DC(&v11, v9);
  if (v5)
    operator delete(v5);
}

void sub_20B506980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20B4181DC(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B5069D0(uint64_t a1, _DWORD *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 88)
    && *(_QWORD *)(a1 + 80) == 7
    && ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == 1936876918)
      ? (v5 = v4 == 1852795251)
      : (v5 = 0),
        v5))
  {
    *(_DWORD *)(a1 + 96) = *a2;
    *(_BYTE *)(a1 + 100) = 1;
    *(_BYTE *)(a1 + 88) = 0;
  }
  else
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_20B505B08(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20B416E08(&v9, v7);
  }
}

void sub_20B506A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B506AAC(uint64_t a1, float *a2)
{
  BOOL v3;
  double *v4;
  int v5;
  double v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  double v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD *v15;
  _BYTE v16[24];
  int v17;
  char v18;
  char *v19;

  if (*(_BYTE *)(a1 + 32))
    v3 = (*(_DWORD *)a2 & 0x7FFFFFFFu) < 0x7F800000;
  else
    v3 = 1;
  if (v3)
  {
    v11 = *a2;
    v4 = (double *)sub_20B505B08(a1);
    v5 = *(unsigned __int8 *)v4;
    *(_BYTE *)v4 = 7;
    v6 = v4[1];
    v4[1] = v11;
    v11 = v6;
    sub_20B416E08((uint64_t *)&v11, v5);
  }
  else
  {
    v17 = 0;
    sub_20AF57AB0((uint64_t)&v19, (uint64_t)v16, a2);
    if (v17 == -1)
      sub_20AECFAB8();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C41E9D0[v17])(__p, &v19, v16);
    if (v17 != -1)
      ((void (*)(char **, _BYTE *))off_24C41E9B8[v17])(&v19, v16);
    v15 = 0;
    v14 = 3;
    v7 = operator new(0x18uLL);
    *(_OWORD *)v7 = *(_OWORD *)__p;
    v7[2] = v13;
    __p[1] = 0;
    v13 = 0;
    __p[0] = 0;
    v15 = v7;
    v8 = (unsigned __int8 *)sub_20B505B08(a1);
    v9 = *v8;
    *v8 = v14;
    v14 = v9;
    v10 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v15;
    v15 = (_QWORD *)v10;
    sub_20B416E08((uint64_t *)&v15, v9);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
}

void sub_20B506C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unsigned __int8 a18)
{
  uint64_t *v18;

  sub_20B416E08(v18, a18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B506C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B506C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B506C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B506CA4(uint64_t a1, double *a2)
{
  BOOL v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD *v15;
  _BYTE v16[24];
  int v17;
  char v18;
  char *v19;

  if (*(_BYTE *)(a1 + 32))
    v3 = (*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  else
    v3 = 1;
  if (v3)
  {
    v11 = *(_QWORD *)a2;
    v4 = (unsigned __int8 *)sub_20B505B08(a1);
    v5 = *v4;
    *v4 = 7;
    v6 = *((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = v11;
    v11 = v6;
    sub_20B416E08(&v11, v5);
  }
  else
  {
    v17 = 0;
    sub_20AF55CBC((uint64_t)&v19, (uint64_t)v16, a2);
    if (v17 == -1)
      sub_20AECFAB8();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C41E9D0[v17])(__p, &v19, v16);
    if (v17 != -1)
      ((void (*)(char **, _BYTE *))off_24C41E9B8[v17])(&v19, v16);
    v15 = 0;
    v14 = 3;
    v7 = operator new(0x18uLL);
    *(_OWORD *)v7 = *(_OWORD *)__p;
    v7[2] = v13;
    __p[1] = 0;
    v13 = 0;
    __p[0] = 0;
    v15 = v7;
    v8 = (unsigned __int8 *)sub_20B505B08(a1);
    v9 = *v8;
    *v8 = v14;
    v14 = v9;
    v10 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v15;
    v15 = (_QWORD *)v10;
    sub_20B416E08((uint64_t *)&v15, v9);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
}

void sub_20B506E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unsigned __int8 a18)
{
  uint64_t *v18;

  sub_20B416E08(v18, a18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B506E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B506E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B506E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B506E98(uint64_t a1, uint64_t a2)
{
  int *v4;
  int v5;
  int v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v4 = *(int **)(a1 + 72), v5 = *v4, v6 = *(int *)((char *)v4 + 3), v5 == 1936876918)
      ? (v7 = v6 == 1852795251)
      : (v7 = 0),
        !v7))
  {
    v8 = operator new(0x18uLL);
    v9 = (uint64_t)v8;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20AEC60F4(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v8 = *(_OWORD *)a2;
      v8[2] = *(_QWORD *)(a2 + 16);
    }
    v13 = v9;
    v10 = (unsigned __int8 *)sub_20B505B08(a1);
    v11 = *v10;
    *v10 = 3;
    v12 = *((_QWORD *)v10 + 1);
    *((_QWORD *)v10 + 1) = v13;
    v13 = v12;
    sub_20B416E08(&v13, v11);
  }
}

void sub_20B506F7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B506F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B506FA8(uint64_t a1, size_t *a2)
{
  const void *v3;
  size_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *a2;
  v3 = (const void *)a2[1];
  if (*a2)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    memcpy(v5, v3, v4);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_20B50F17C(v7, v5, v6);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B505B08(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_20B416E08((uint64_t *)&v11, v9);
  if (v5)
    operator delete(v5);
}

void sub_20B507090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_20B416E08(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B5070E0(uint64_t a1, uint64_t a2)
{
  __int16 *v3;
  const void *v4;
  size_t v5;
  char *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(__int16 **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v5 = 2 * (_QWORD)v3;
    v6 = (char *)operator new(2 * (_QWORD)v3);
    v3 = (__int16 *)&v6[2 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_20B50F35C(v7, (__int16 *)v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B505B08(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_20B416E08((uint64_t *)&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_20B5071C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_20B416E08(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B507218(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v3;
  const void *v4;
  size_t v5;
  char *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(unsigned __int16 **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v5 = 2 * (_QWORD)v3;
    v6 = (char *)operator new(2 * (_QWORD)v3);
    v3 = (unsigned __int16 *)&v6[2 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_20B50F450(v7, (unsigned __int16 *)v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B505B08(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_20B416E08((uint64_t *)&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_20B507300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_20B416E08(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B507350(uint64_t a1, uint64_t a2)
{
  int *v3;
  const void *v4;
  size_t v5;
  char *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(int **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v5 = 4 * (_QWORD)v3;
    v6 = (char *)operator new(4 * (_QWORD)v3);
    v3 = (int *)&v6[4 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_20B50F544(v7, (int *)v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B505B08(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_20B416E08((uint64_t *)&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_20B507438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_20B416E08(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B507488(uint64_t a1, uint64_t a2)
{
  char *v3;
  const void *v4;
  size_t v5;
  char *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(char **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v5 = 4 * (_QWORD)v3;
    v6 = (char *)operator new(4 * (_QWORD)v3);
    v3 = &v6[4 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_20B50F63C(v7, v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B505B08(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_20B416E08((uint64_t *)&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_20B507570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_20B416E08(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B5075C0(uint64_t a1, uint64_t a2)
{
  char *v3;
  const void *v4;
  size_t v5;
  char *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(char **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v5 = 8 * (_QWORD)v3;
    v6 = (char *)operator new(8 * (_QWORD)v3);
    v3 = &v6[8 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_20B50F734(v7, v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B505B08(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_20B416E08((uint64_t *)&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_20B5076A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_20B416E08(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B5076F8(uint64_t a1, uint64_t a2)
{
  char *v3;
  const void *v4;
  size_t v5;
  char *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(char **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v5 = 8 * (_QWORD)v3;
    v6 = (char *)operator new(8 * (_QWORD)v3);
    v3 = &v6[8 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_20B50F82C(v7, v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B505B08(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_20B416E08((uint64_t *)&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_20B5077E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_20B416E08(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B507830(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  __int16 *v5;
  uint64_t v6;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  __int16 *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  unint64_t v24;
  _OWORD *v25;
  int8x16_t *v26;
  unint64_t v27;
  int8x16_t v35;
  __int16 v50;
  _QWORD *v53;
  unsigned __int8 *v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  void *__p[2];
  uint64_t v59;
  char v60[8];
  _QWORD *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[2];
  int v66;
  char v67;
  char *v68;

  if (*(_BYTE *)(a1 + 32))
  {
    v4 = (unsigned __int8 *)sub_20B505B08(a1);
    if (*a2)
    {
      v5 = (__int16 *)a2[1];
      v6 = 2 * *a2;
      do
      {
        if ((~(unsigned __int16)*v5 & 0x7C00) != 0)
        {
          _H0 = *v5;
          __asm { FCVT            D0, H0 }
          LOBYTE(v64) = 7;
          v65[0] = _D0;
          sub_20B50F924((uint64_t)v4, (char *)&v64);
          sub_20B416E08(v65, v64);
        }
        else
        {
          v66 = 0;
          sub_20B4E148C((uint64_t)&v68, (uint64_t)&v64, v5);
          if (v66 == -1)
            sub_20AECFAB8();
          v68 = &v67;
          ((void (*)(void **__return_ptr, char **, uint64_t *))off_24C41E9D0[v66])(__p, &v68, &v64);
          if (v66 != -1)
            ((void (*)(char **, uint64_t *))off_24C41E9B8[v66])(&v68, &v64);
          v61 = 0;
          v60[0] = 3;
          v12 = operator new(0x18uLL);
          *(_OWORD *)v12 = *(_OWORD *)__p;
          v12[2] = v59;
          __p[1] = 0;
          v59 = 0;
          __p[0] = 0;
          v61 = v12;
          sub_20B50F924((uint64_t)v4, v60);
          sub_20B416E08((uint64_t *)&v61, v60[0]);
          if (SHIBYTE(v59) < 0)
            operator delete(__p[0]);
        }
        ++v5;
        v6 -= 2;
      }
      while (v6);
    }
    else
    {
      v20 = operator new(0x18uLL);
      v20[1] = 0;
      v20[2] = 0;
      *v20 = 0;
      v21 = *v4;
      *v4 = 2;
      v62 = v21;
      v22 = *((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v20;
      v63 = v22;
      sub_20B416E08(&v63, v21);
    }
    return;
  }
  v13 = (char *)*a2;
  v14 = a2[1];
  v65[0] = 0;
  v65[1] = 0;
  v64 = 0;
  if (!v13)
  {
    v17 = 0;
    goto LABEL_27;
  }
  v15 = 2 * (_QWORD)v13;
  if ((unint64_t)-((-2 * (uint64_t)v13) >> 1) >> 61)
    sub_20AF6E1D0();
  v16 = (char *)operator new(-8 * ((-2 * (uint64_t)v13) >> 1));
  v17 = v16;
  v18 = (unint64_t)(v13 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v18 < 0x17)
  {
    v19 = (__int16 *)v14;
    v13 = v16;
    do
    {
LABEL_26:
      v50 = *v19++;
      _H0 = v50;
      __asm { FCVT            D0, H0 }
      *(_QWORD *)v13 = _D0;
      v13 += 8;
    }
    while (v19 != (__int16 *)(v14 + v15));
    goto LABEL_27;
  }
  _CF = (unint64_t)v16 >= v14 + 2 * (_QWORD)(v13 + 0x7FFFFFFFFFFFFFFFLL) + 2
     || v14 >= (unint64_t)&v16[8 * (_QWORD)(v13 + 0x7FFFFFFFFFFFFFFFLL) + 8];
  v19 = (__int16 *)v14;
  v13 = v16;
  if (!_CF)
    goto LABEL_26;
  v24 = v18 + 1;
  v19 = (__int16 *)(v14 + 2 * (v24 & 0xFFFFFFFFFFFFFFF0));
  v13 = &v16[8 * (v24 & 0xFFFFFFFFFFFFFFF0)];
  v25 = v16 + 64;
  v26 = (int8x16_t *)(v14 + 16);
  v27 = v24 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    _Q1 = v26[-1];
    _D2 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
    _H0 = WORD1(_D2);
    __asm
    {
      FCVT            D3, H0
      FCVT            D0, H2
    }
    *((_QWORD *)&_Q0 + 1) = _D3;
    LOWORD(_D3) = HIWORD(_D2);
    __asm { FCVT            D3, H3 }
    LOWORD(_D2) = WORD2(_D2);
    __asm { FCVT            D2, H2 }
    *((_QWORD *)&_Q2 + 1) = _D3;
    v35 = *v26;
    v26 += 2;
    _Q3 = v35;
    _H4 = _Q1.i16[1];
    __asm
    {
      FCVT            D4, H4
      FCVT            D5, H1
    }
    *((_QWORD *)&_Q5 + 1) = _D4;
    LOWORD(_D4) = _Q1.i16[3];
    __asm { FCVT            D4, H4 }
    _Q1.i16[0] = _Q1.i16[2];
    __asm { FCVT            D1, H1 }
    _Q1.i64[1] = _D4;
    _D4 = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
    _H6 = WORD1(_D4);
    __asm
    {
      FCVT            D6, H6
      FCVT            D7, H4
    }
    *((_QWORD *)&_Q7 + 1) = _D6;
    LOWORD(_D6) = HIWORD(_D4);
    __asm { FCVT            D6, H6 }
    LOWORD(_D4) = WORD2(_D4);
    __asm { FCVT            D4, H4 }
    *((_QWORD *)&_Q4 + 1) = _D6;
    LOWORD(_D6) = v35.i16[1];
    __asm
    {
      FCVT            D6, H6
      FCVT            D16, H3
    }
    *((_QWORD *)&_Q16 + 1) = _D6;
    LOWORD(_D6) = v35.i16[3];
    __asm { FCVT            D6, H6 }
    _Q3.i16[0] = v35.i16[2];
    __asm { FCVT            D3, H3 }
    _Q3.i64[1] = _D6;
    *(v25 - 4) = _Q5;
    *(v25 - 3) = _Q1;
    *(v25 - 2) = _Q0;
    *(v25 - 1) = _Q2;
    *v25 = _Q16;
    v25[1] = _Q3;
    v25[2] = _Q7;
    v25[3] = _Q4;
    v25 += 8;
    v27 -= 16;
  }
  while (v27);
  if (v24 != (v24 & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_26;
LABEL_27:
  v53 = operator new(0x18uLL);
  sub_20B50FABC(v53, v17, v13);
  v57 = v53;
  v54 = (unsigned __int8 *)sub_20B505B08(a1);
  v55 = *v54;
  *v54 = 2;
  v56 = *((_QWORD *)v54 + 1);
  *((_QWORD *)v54 + 1) = v57;
  v57 = (_QWORD *)v56;
  sub_20B416E08((uint64_t *)&v57, v55);
  if (v17)
    operator delete(v17);
}

void sub_20B507BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  uint64_t *v24;

  sub_20B416E08(v24, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B507CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B507CD8(uint64_t a1, float **__sz)
{
  unsigned __int8 *v4;
  float *v5;
  float *v6;
  uint64_t v7;
  float v8;
  _QWORD *v9;
  float *v10;
  float *v11;
  size_t v12;
  float *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  double *v19;
  float *v20;
  float v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  void *__p[2];
  uint64_t v27;
  char v28[8];
  _QWORD *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];
  int v34;
  char v35;
  char *v36;

  if (*(_BYTE *)(a1 + 32))
  {
    v4 = (unsigned __int8 *)sub_20B505B08(a1);
    v5 = *__sz;
    if (*__sz)
    {
      v6 = __sz[1];
      v7 = 4 * (_QWORD)v5;
      do
      {
        v8 = *v6;
        if ((*(_DWORD *)v6 & 0x7FFFFFFFu) > 0x7F7FFFFF)
        {
          v34 = 0;
          sub_20AF57AB0((uint64_t)&v36, (uint64_t)&v32, v6);
          if (v34 == -1)
            sub_20AECFAB8();
          v36 = &v35;
          ((void (*)(void **__return_ptr, char **, uint64_t *))off_24C41E9D0[v34])(__p, &v36, &v32);
          if (v34 != -1)
            ((void (*)(char **, uint64_t *))off_24C41E9B8[v34])(&v36, &v32);
          v29 = 0;
          v28[0] = 3;
          v9 = operator new(0x18uLL);
          *(_OWORD *)v9 = *(_OWORD *)__p;
          v9[2] = v27;
          __p[1] = 0;
          v27 = 0;
          __p[0] = 0;
          v29 = v9;
          sub_20B50F924((uint64_t)v4, v28);
          sub_20B416E08((uint64_t *)&v29, v28[0]);
          if (SHIBYTE(v27) < 0)
            operator delete(__p[0]);
        }
        else
        {
          LOBYTE(v32) = 7;
          *(double *)v33 = v8;
          sub_20B50F924((uint64_t)v4, (char *)&v32);
          sub_20B416E08(v33, v32);
        }
        ++v6;
        v7 -= 4;
      }
      while (v7);
    }
    else
    {
      v14 = operator new(0x18uLL);
      v14[1] = 0;
      v14[2] = 0;
      *v14 = 0;
      v15 = *v4;
      *v4 = 2;
      v30 = v15;
      v16 = *((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v14;
      v31 = v16;
      sub_20B416E08(&v31, v15);
    }
  }
  else
  {
    v11 = *__sz;
    v10 = __sz[1];
    v33[0] = 0;
    v33[1] = 0;
    v32 = 0;
    if (v11)
    {
      if (((unint64_t)v11 & 0x8000000000000000) != 0)
        sub_20AF6E1D0();
      v12 = 4 * (_QWORD)v11;
      v13 = (float *)operator new(4 * (_QWORD)v11);
      v11 = &v13[(_QWORD)v11];
      memcpy(v13, v10, v12);
    }
    else
    {
      v13 = 0;
    }
    v25 = 0;
    v17 = operator new(0x18uLL);
    *v17 = 0;
    v17[1] = 0;
    v17[2] = 0;
    v18 = (char *)v11 - (char *)v13;
    if (v11 != v13)
    {
      if ((unint64_t)v18 >= 0x3FFFFFFFFFFFFFFDLL)
        sub_20B41750C();
      v19 = (double *)operator new(4 * v18);
      *v17 = v19;
      v17[1] = v19;
      v17[2] = &v19[2 * (v18 >> 2)];
      if (v13 != v11)
      {
        v20 = v13;
        do
        {
          v21 = *v20++;
          *(_BYTE *)v19 = 7;
          v19[1] = v21;
          v19 += 2;
        }
        while (v20 != v11);
      }
      v17[1] = v19;
    }
    v25 = v17;
    v22 = (unsigned __int8 *)sub_20B505B08(a1);
    v23 = *v22;
    *v22 = 2;
    v24 = *((_QWORD *)v22 + 1);
    *((_QWORD *)v22 + 1) = v25;
    v25 = (_QWORD *)v24;
    sub_20B416E08((uint64_t *)&v25, v23);
    if (v13)
      operator delete(v13);
  }
}

void sub_20B507FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  uint64_t *v24;
  uint64_t *v25;

  v25 = v24;
  sub_20B416E08(v25, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B5080F8(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  double *v5;
  uint64_t v6;
  double v7;
  _QWORD *v8;
  char *v9;
  const void *v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  void *__p[2];
  uint64_t v22;
  char v23[8];
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[2];
  int v29;
  char v30;
  char *v31;

  if (*(_BYTE *)(a1 + 32))
  {
    v4 = (unsigned __int8 *)sub_20B505B08(a1);
    if (*a2)
    {
      v5 = (double *)a2[1];
      v6 = 8 * *a2;
      do
      {
        v7 = *v5;
        if ((*(_QWORD *)v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          LOBYTE(v27) = 7;
          *(double *)v28 = v7;
          sub_20B50F924((uint64_t)v4, (char *)&v27);
          sub_20B416E08(v28, v27);
        }
        else
        {
          v29 = 0;
          sub_20AF55CBC((uint64_t)&v31, (uint64_t)&v27, v5);
          if (v29 == -1)
            sub_20AECFAB8();
          v31 = &v30;
          ((void (*)(void **__return_ptr, char **, uint64_t *))off_24C41E9D0[v29])(__p, &v31, &v27);
          if (v29 != -1)
            ((void (*)(char **, uint64_t *))off_24C41E9B8[v29])(&v31, &v27);
          v24 = 0;
          v23[0] = 3;
          v8 = operator new(0x18uLL);
          *(_OWORD *)v8 = *(_OWORD *)__p;
          v8[2] = v22;
          __p[1] = 0;
          v22 = 0;
          __p[0] = 0;
          v24 = v8;
          sub_20B50F924((uint64_t)v4, v23);
          sub_20B416E08((uint64_t *)&v24, v23[0]);
          if (SHIBYTE(v22) < 0)
            operator delete(__p[0]);
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    else
    {
      v13 = operator new(0x18uLL);
      v13[1] = 0;
      v13[2] = 0;
      *v13 = 0;
      v14 = *v4;
      *v4 = 2;
      v25 = v14;
      v15 = *((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v13;
      v26 = v15;
      sub_20B416E08(&v26, v14);
    }
  }
  else
  {
    v9 = (char *)*a2;
    v10 = (const void *)a2[1];
    v28[0] = 0;
    v28[1] = 0;
    v27 = 0;
    if (v9)
    {
      if (((unint64_t)v9 & 0x8000000000000000) != 0)
        sub_20AF6E1D0();
      v11 = 8 * (_QWORD)v9;
      v12 = (char *)operator new(8 * (_QWORD)v9);
      v9 = &v12[8 * (_QWORD)v9];
      memcpy(v12, v10, v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = operator new(0x18uLL);
    sub_20B50FABC(v16, v12, v9);
    v20 = v16;
    v17 = (unsigned __int8 *)sub_20B505B08(a1);
    v18 = *v17;
    *v17 = 2;
    v19 = *((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v20;
    v20 = (_QWORD *)v19;
    sub_20B416E08((uint64_t *)&v20, v18);
    if (v12)
      operator delete(v12);
  }
}

void sub_20B508380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  uint64_t *v24;

  sub_20B416E08(v24, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B508464(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  void **v18;
  void **v19;
  void *v20;
  void *__p;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25[2];
  char v26;

  v3 = *a2;
  v4 = a2[1];
  v5 = v4 + 24 * *a2;
  v22 = 0;
  v23 = 0;
  __p = 0;
  sub_20B50C9A8((char *)&__p, v4, v5, v3);
  v25[0] = 0;
  v24 = 2;
  v6 = (char *)__p;
  v7 = v22;
  v8 = operator new(0x18uLL);
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  v25[1] = (uint64_t)v8;
  v26 = 0;
  if (v7 != v6)
  {
    if ((0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3)) >> 60)
      sub_20B41750C();
    v9 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * ((v7 - v6) >> 3));
    v10 = 0;
    *v8 = v9;
    v8[1] = v9;
    v8[2] = &v9[0xAAAAAAAAAAAAAAB0 * ((v7 - v6) >> 3)];
    do
    {
      v12 = &v9[v10];
      *((_QWORD *)v12 + 1) = 0;
      *v12 = 3;
      v13 = operator new(0x18uLL);
      v14 = v13;
      if (v6[23] < 0)
      {
        sub_20AEC60F4(v13, *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v11 = *(_OWORD *)v6;
        v13[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)v13 = v11;
      }
      *((_QWORD *)v12 + 1) = v14;
      v6 += 24;
      v10 += 16;
    }
    while (v6 != v7);
    v8[1] = &v9[v10];
  }
  v25[0] = (uint64_t)v8;
  v15 = (unsigned __int8 *)sub_20B505B08(a1);
  v16 = *v15;
  *v15 = v24;
  v24 = v16;
  v17 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v25[0];
  v25[0] = v17;
  sub_20B416E08(v25, v16);
  v18 = (void **)__p;
  if (__p)
  {
    v19 = (void **)v22;
    v20 = __p;
    if (v22 != __p)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = __p;
    }
    v22 = (char *)v18;
    operator delete(v20);
  }
}

void sub_20B508624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20B416E08(v13, a13);
  sub_20AEC2E90(&a10);
  _Unwind_Resume(a1);
}

void sub_20B508644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC2E90((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B508658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20B456BE4((void ***)va1);
  operator delete(v2);
  sub_20AEC2E90((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B5086B4(uint64_t a1, _DWORD *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (*(_BYTE *)(a1 + 88)
    && *(_QWORD *)(a1 + 80) == 7
    && ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == 1936876918)
      ? (v5 = v4 == 1852795251)
      : (v5 = 0),
        v5))
  {
    *(_DWORD *)(a1 + 96) = *a2;
    *(_BYTE *)(a1 + 100) = 1;
    *(_BYTE *)(a1 + 88) = 0;
  }
  else
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_20B506370(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20B4181DC(&v9, v7);
  }
}

void sub_20B508778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B508790(uint64_t a1, float *a2)
{
  BOOL v3;
  unsigned __int8 *v4;
  int v5;
  void **v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  double v11;
  void *__p[2];
  void *v13;
  char v14;
  void **v15;
  _BYTE v16[24];
  int v17;
  char v18;
  char *v19;

  if (*(_BYTE *)(a1 + 32))
    v3 = (*(_DWORD *)a2 & 0x7FFFFFFFu) < 0x7F800000;
  else
    v3 = 1;
  if (v3)
  {
    v11 = *a2;
    v4 = (unsigned __int8 *)sub_20B506370(a1);
    v5 = *v4;
    *v4 = 7;
    v6 = (void **)*((_QWORD *)v4 + 1);
    *((double *)v4 + 1) = v11;
    v11 = *(double *)&v6;
    sub_20B4181DC((void ***)&v11, v5);
  }
  else
  {
    v17 = 0;
    sub_20AF57AB0((uint64_t)&v19, (uint64_t)v16, a2);
    if (v17 == -1)
      sub_20AECFAB8();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C41E9D0[v17])(__p, &v19, v16);
    if (v17 != -1)
      ((void (*)(char **, _BYTE *))off_24C41E9B8[v17])(&v19, v16);
    v15 = 0;
    v14 = 3;
    v7 = (void **)operator new(0x18uLL);
    *(_OWORD *)v7 = *(_OWORD *)__p;
    v7[2] = v13;
    __p[1] = 0;
    v13 = 0;
    __p[0] = 0;
    v15 = v7;
    v8 = (unsigned __int8 *)sub_20B506370(a1);
    v9 = *v8;
    *v8 = v14;
    v14 = v9;
    v10 = (void **)*((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v15;
    v15 = v10;
    sub_20B4181DC(&v15, v9);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
}

void sub_20B508918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unsigned __int8 a18)
{
  void ***v18;

  sub_20B4181DC(v18, a18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B508948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B50895C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B508970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B508988(uint64_t a1, double *a2)
{
  BOOL v3;
  unsigned __int8 *v4;
  int v5;
  void **v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;
  void *__p[2];
  void *v13;
  char v14;
  void **v15;
  _BYTE v16[24];
  int v17;
  char v18;
  char *v19;

  if (*(_BYTE *)(a1 + 32))
    v3 = (*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  else
    v3 = 1;
  if (v3)
  {
    v11 = *(void ***)a2;
    v4 = (unsigned __int8 *)sub_20B506370(a1);
    v5 = *v4;
    *v4 = 7;
    v6 = (void **)*((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = v11;
    v11 = v6;
    sub_20B4181DC(&v11, v5);
  }
  else
  {
    v17 = 0;
    sub_20AF55CBC((uint64_t)&v19, (uint64_t)v16, a2);
    if (v17 == -1)
      sub_20AECFAB8();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C41E9D0[v17])(__p, &v19, v16);
    if (v17 != -1)
      ((void (*)(char **, _BYTE *))off_24C41E9B8[v17])(&v19, v16);
    v15 = 0;
    v14 = 3;
    v7 = (void **)operator new(0x18uLL);
    *(_OWORD *)v7 = *(_OWORD *)__p;
    v7[2] = v13;
    __p[1] = 0;
    v13 = 0;
    __p[0] = 0;
    v15 = v7;
    v8 = (unsigned __int8 *)sub_20B506370(a1);
    v9 = *v8;
    *v8 = v14;
    v14 = v9;
    v10 = (void **)*((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v15;
    v15 = v10;
    sub_20B4181DC(&v15, v9);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
}

void sub_20B508B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unsigned __int8 a18)
{
  void ***v18;

  sub_20B4181DC(v18, a18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B508B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B508B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B508B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B508B7C(uint64_t a1, uint64_t a2)
{
  int *v4;
  int v5;
  int v6;
  BOOL v7;
  void **v8;
  void **v9;
  unsigned __int8 *v10;
  int v11;
  void **v12;
  void **v13;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v4 = *(int **)(a1 + 72), v5 = *v4, v6 = *(int *)((char *)v4 + 3), v5 == 1936876918)
      ? (v7 = v6 == 1852795251)
      : (v7 = 0),
        !v7))
  {
    v8 = (void **)operator new(0x18uLL);
    v9 = v8;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20AEC60F4(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v8 = *(_OWORD *)a2;
      v8[2] = *(void **)(a2 + 16);
    }
    v13 = v9;
    v10 = (unsigned __int8 *)sub_20B506370(a1);
    v11 = *v10;
    *v10 = 3;
    v12 = (void **)*((_QWORD *)v10 + 1);
    *((_QWORD *)v10 + 1) = v13;
    v13 = v12;
    sub_20B4181DC(&v13, v11);
  }
}

void sub_20B508C60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B508C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B508C8C(uint64_t a1, size_t *a2)
{
  const void *v3;
  size_t v4;
  char *v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v4 = *a2;
  v3 = (const void *)a2[1];
  if (*a2)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    memcpy(v5, v3, v4);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_20B50FBB4(v7, v5, v6);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B506370(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20B4181DC(&v11, v9);
  if (v5)
    operator delete(v5);
}

void sub_20B508D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20B4181DC(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B508DC4(uint64_t a1, size_t *a2)
{
  const void *v3;
  size_t v4;
  char *v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v4 = *a2;
  v3 = (const void *)a2[1];
  if (*a2)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    memcpy(v5, v3, v4);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_20B50FCA4(v7, v5, v6);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B506370(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20B4181DC(&v11, v9);
  if (v5)
    operator delete(v5);
}

void sub_20B508EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20B4181DC(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B508EFC(uint64_t a1, uint64_t a2)
{
  __int16 *v3;
  const void *v4;
  size_t v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v3 = *(__int16 **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v5 = 2 * (_QWORD)v3;
    v6 = (char *)operator new(2 * (_QWORD)v3);
    v3 = (__int16 *)&v6[2 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_20B50FE84(v7, (__int16 *)v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B506370(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20B4181DC(&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_20B508FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20B4181DC(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B509034(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v3;
  const void *v4;
  size_t v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v3 = *(unsigned __int16 **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v5 = 2 * (_QWORD)v3;
    v6 = (char *)operator new(2 * (_QWORD)v3);
    v3 = (unsigned __int16 *)&v6[2 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_20B50FF78(v7, (unsigned __int16 *)v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B506370(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20B4181DC(&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_20B50911C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20B4181DC(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B50916C(uint64_t a1, uint64_t a2)
{
  int *v3;
  const void *v4;
  size_t v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v3 = *(int **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v5 = 4 * (_QWORD)v3;
    v6 = (char *)operator new(4 * (_QWORD)v3);
    v3 = (int *)&v6[4 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_20B51006C(v7, (int *)v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B506370(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20B4181DC(&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_20B509254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20B4181DC(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B5092A4(uint64_t a1, uint64_t a2)
{
  char *v3;
  const void *v4;
  size_t v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v3 = *(char **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v5 = 4 * (_QWORD)v3;
    v6 = (char *)operator new(4 * (_QWORD)v3);
    v3 = &v6[4 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_20B510164(v7, v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B506370(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20B4181DC(&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_20B50938C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20B4181DC(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B5093DC(uint64_t a1, uint64_t a2)
{
  char *v3;
  const void *v4;
  size_t v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v3 = *(char **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_20B50C994();
    v5 = 8 * (_QWORD)v3;
    v6 = (char *)operator new(8 * (_QWORD)v3);
    v3 = &v6[8 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_20B51025C(v7, v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B506370(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20B4181DC(&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_20B5094C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20B4181DC(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B509514(uint64_t a1, uint64_t a2)
{
  char *v3;
  const void *v4;
  size_t v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v3 = *(char **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_20B4268F4();
    v5 = 8 * (_QWORD)v3;
    v6 = (char *)operator new(8 * (_QWORD)v3);
    v3 = &v6[8 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_20B510354(v7, v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B506370(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20B4181DC(&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_20B5095FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20B4181DC(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B50964C(uint64_t a1, uint64_t a2)
{
  char *v3;
  const void *v4;
  size_t v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v3 = *(char **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v5 = 8 * (_QWORD)v3;
    v6 = (char *)operator new(8 * (_QWORD)v3);
    v3 = &v6[8 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_20B51044C(v7, v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B506370(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20B4181DC(&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_20B509734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20B4181DC(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B509784(uint64_t a1, uint64_t a2)
{
  char *v3;
  const void *v4;
  size_t v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v3 = *(char **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v5 = 8 * (_QWORD)v3;
    v6 = (char *)operator new(8 * (_QWORD)v3);
    v3 = &v6[8 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_20B510544(v7, v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_20B506370(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20B4181DC(&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_20B50986C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20B4181DC(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_20B5098BC(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  __int16 *v5;
  uint64_t v6;
  void **v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  __int16 *v19;
  _QWORD *v20;
  int v21;
  void **v22;
  unint64_t v24;
  _OWORD *v25;
  int8x16_t *v26;
  unint64_t v27;
  int8x16_t v35;
  __int16 v50;
  void **v53;
  unsigned __int8 *v54;
  int v55;
  void **v56;
  void **v57;
  void *__p[2];
  void *v59;
  char v60[8];
  void **v61;
  char v62;
  void **v63;
  uint64_t v64;
  void **v65[2];
  int v66;
  char v67;
  char *v68;

  if (*(_BYTE *)(a1 + 32))
  {
    v4 = (unsigned __int8 *)sub_20B506370(a1);
    if (*a2)
    {
      v5 = (__int16 *)a2[1];
      v6 = 2 * *a2;
      do
      {
        if ((~(unsigned __int16)*v5 & 0x7C00) != 0)
        {
          _H0 = *v5;
          __asm { FCVT            D0, H0 }
          LOBYTE(v64) = 7;
          v65[0] = _D0;
          sub_20B51063C((uint64_t)v4, (char *)&v64);
          sub_20B4181DC(v65, v64);
        }
        else
        {
          v66 = 0;
          sub_20B4E148C((uint64_t)&v68, (uint64_t)&v64, v5);
          if (v66 == -1)
            sub_20AECFAB8();
          v68 = &v67;
          ((void (*)(void **__return_ptr, char **, uint64_t *))off_24C41E9D0[v66])(__p, &v68, &v64);
          if (v66 != -1)
            ((void (*)(char **, uint64_t *))off_24C41E9B8[v66])(&v68, &v64);
          v61 = 0;
          v60[0] = 3;
          v12 = (void **)operator new(0x18uLL);
          *(_OWORD *)v12 = *(_OWORD *)__p;
          v12[2] = v59;
          __p[1] = 0;
          v59 = 0;
          __p[0] = 0;
          v61 = v12;
          sub_20B51063C((uint64_t)v4, v60);
          sub_20B4181DC(&v61, v60[0]);
          if (SHIBYTE(v59) < 0)
            operator delete(__p[0]);
        }
        ++v5;
        v6 -= 2;
      }
      while (v6);
    }
    else
    {
      v20 = operator new(0x18uLL);
      v20[1] = 0;
      v20[2] = 0;
      *v20 = 0;
      v21 = *v4;
      *v4 = 2;
      v62 = v21;
      v22 = (void **)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v20;
      v63 = v22;
      sub_20B4181DC(&v63, v21);
    }
    return;
  }
  v13 = (char *)*a2;
  v14 = a2[1];
  v65[0] = 0;
  v65[1] = 0;
  v64 = 0;
  if (!v13)
  {
    v17 = 0;
    goto LABEL_27;
  }
  v15 = 2 * (_QWORD)v13;
  if ((unint64_t)-((-2 * (uint64_t)v13) >> 1) >> 61)
    sub_20AF6E1D0();
  v16 = (char *)operator new(-8 * ((-2 * (uint64_t)v13) >> 1));
  v17 = v16;
  v18 = (unint64_t)(v13 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v18 < 0x17)
  {
    v19 = (__int16 *)v14;
    v13 = v16;
    do
    {
LABEL_26:
      v50 = *v19++;
      _H0 = v50;
      __asm { FCVT            D0, H0 }
      *(_QWORD *)v13 = _D0;
      v13 += 8;
    }
    while (v19 != (__int16 *)(v14 + v15));
    goto LABEL_27;
  }
  _CF = (unint64_t)v16 >= v14 + 2 * (_QWORD)(v13 + 0x7FFFFFFFFFFFFFFFLL) + 2
     || v14 >= (unint64_t)&v16[8 * (_QWORD)(v13 + 0x7FFFFFFFFFFFFFFFLL) + 8];
  v19 = (__int16 *)v14;
  v13 = v16;
  if (!_CF)
    goto LABEL_26;
  v24 = v18 + 1;
  v19 = (__int16 *)(v14 + 2 * (v24 & 0xFFFFFFFFFFFFFFF0));
  v13 = &v16[8 * (v24 & 0xFFFFFFFFFFFFFFF0)];
  v25 = v16 + 64;
  v26 = (int8x16_t *)(v14 + 16);
  v27 = v24 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    _Q1 = v26[-1];
    _D2 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
    _H0 = WORD1(_D2);
    __asm
    {
      FCVT            D3, H0
      FCVT            D0, H2
    }
    *((_QWORD *)&_Q0 + 1) = _D3;
    LOWORD(_D3) = HIWORD(_D2);
    __asm { FCVT            D3, H3 }
    LOWORD(_D2) = WORD2(_D2);
    __asm { FCVT            D2, H2 }
    *((_QWORD *)&_Q2 + 1) = _D3;
    v35 = *v26;
    v26 += 2;
    _Q3 = v35;
    _H4 = _Q1.i16[1];
    __asm
    {
      FCVT            D4, H4
      FCVT            D5, H1
    }
    *((_QWORD *)&_Q5 + 1) = _D4;
    LOWORD(_D4) = _Q1.i16[3];
    __asm { FCVT            D4, H4 }
    _Q1.i16[0] = _Q1.i16[2];
    __asm { FCVT            D1, H1 }
    _Q1.i64[1] = _D4;
    _D4 = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
    _H6 = WORD1(_D4);
    __asm
    {
      FCVT            D6, H6
      FCVT            D7, H4
    }
    *((_QWORD *)&_Q7 + 1) = _D6;
    LOWORD(_D6) = HIWORD(_D4);
    __asm { FCVT            D6, H6 }
    LOWORD(_D4) = WORD2(_D4);
    __asm { FCVT            D4, H4 }
    *((_QWORD *)&_Q4 + 1) = _D6;
    LOWORD(_D6) = v35.i16[1];
    __asm
    {
      FCVT            D6, H6
      FCVT            D16, H3
    }
    *((_QWORD *)&_Q16 + 1) = _D6;
    LOWORD(_D6) = v35.i16[3];
    __asm { FCVT            D6, H6 }
    _Q3.i16[0] = v35.i16[2];
    __asm { FCVT            D3, H3 }
    _Q3.i64[1] = _D6;
    *(v25 - 4) = _Q5;
    *(v25 - 3) = _Q1;
    *(v25 - 2) = _Q0;
    *(v25 - 1) = _Q2;
    *v25 = _Q16;
    v25[1] = _Q3;
    v25[2] = _Q7;
    v25[3] = _Q4;
    v25 += 8;
    v27 -= 16;
  }
  while (v27);
  if (v24 != (v24 & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_26;
LABEL_27:
  v53 = (void **)operator new(0x18uLL);
  sub_20B5107D4(v53, v17, v13);
  v57 = v53;
  v54 = (unsigned __int8 *)sub_20B506370(a1);
  v55 = *v54;
  *v54 = 2;
  v56 = (void **)*((_QWORD *)v54 + 1);
  *((_QWORD *)v54 + 1) = v57;
  v57 = v56;
  sub_20B4181DC(&v57, v55);
  if (v17)
    operator delete(v17);
}

void sub_20B509C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void ***v24;

  sub_20B4181DC(v24, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B509D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B509D64(uint64_t a1, float **__sz)
{
  unsigned __int8 *v4;
  float *v5;
  float *v6;
  uint64_t v7;
  float v8;
  void **v9;
  float *v10;
  float *v11;
  size_t v12;
  float *v13;
  _QWORD *v14;
  int v15;
  void **v16;
  void **v17;
  uint64_t v18;
  double *v19;
  float *v20;
  float v21;
  unsigned __int8 *v22;
  int v23;
  void **v24;
  void **v25;
  void *__p[2];
  void *v27;
  char v28[8];
  void **v29;
  char v30;
  void **v31;
  uint64_t v32;
  void **v33[2];
  int v34;
  char v35;
  char *v36;

  if (*(_BYTE *)(a1 + 32))
  {
    v4 = (unsigned __int8 *)sub_20B506370(a1);
    v5 = *__sz;
    if (*__sz)
    {
      v6 = __sz[1];
      v7 = 4 * (_QWORD)v5;
      do
      {
        v8 = *v6;
        if ((*(_DWORD *)v6 & 0x7FFFFFFFu) > 0x7F7FFFFF)
        {
          v34 = 0;
          sub_20AF57AB0((uint64_t)&v36, (uint64_t)&v32, v6);
          if (v34 == -1)
            sub_20AECFAB8();
          v36 = &v35;
          ((void (*)(void **__return_ptr, char **, uint64_t *))off_24C41E9D0[v34])(__p, &v36, &v32);
          if (v34 != -1)
            ((void (*)(char **, uint64_t *))off_24C41E9B8[v34])(&v36, &v32);
          v29 = 0;
          v28[0] = 3;
          v9 = (void **)operator new(0x18uLL);
          *(_OWORD *)v9 = *(_OWORD *)__p;
          v9[2] = v27;
          __p[1] = 0;
          v27 = 0;
          __p[0] = 0;
          v29 = v9;
          sub_20B51063C((uint64_t)v4, v28);
          sub_20B4181DC(&v29, v28[0]);
          if (SHIBYTE(v27) < 0)
            operator delete(__p[0]);
        }
        else
        {
          LOBYTE(v32) = 7;
          *(double *)v33 = v8;
          sub_20B51063C((uint64_t)v4, (char *)&v32);
          sub_20B4181DC(v33, v32);
        }
        ++v6;
        v7 -= 4;
      }
      while (v7);
    }
    else
    {
      v14 = operator new(0x18uLL);
      v14[1] = 0;
      v14[2] = 0;
      *v14 = 0;
      v15 = *v4;
      *v4 = 2;
      v30 = v15;
      v16 = (void **)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v14;
      v31 = v16;
      sub_20B4181DC(&v31, v15);
    }
  }
  else
  {
    v11 = *__sz;
    v10 = __sz[1];
    v33[0] = 0;
    v33[1] = 0;
    v32 = 0;
    if (v11)
    {
      if (((unint64_t)v11 & 0x8000000000000000) != 0)
        sub_20AF6E1D0();
      v12 = 4 * (_QWORD)v11;
      v13 = (float *)operator new(4 * (_QWORD)v11);
      v11 = &v13[(_QWORD)v11];
      memcpy(v13, v10, v12);
    }
    else
    {
      v13 = 0;
    }
    v25 = 0;
    v17 = (void **)operator new(0x18uLL);
    *v17 = 0;
    v17[1] = 0;
    v17[2] = 0;
    v18 = (char *)v11 - (char *)v13;
    if (v11 != v13)
    {
      if ((unint64_t)v18 >= 0x3FFFFFFFFFFFFFFDLL)
        sub_20B41750C();
      v19 = (double *)operator new(4 * v18);
      *v17 = v19;
      v17[1] = v19;
      v17[2] = &v19[2 * (v18 >> 2)];
      if (v13 != v11)
      {
        v20 = v13;
        do
        {
          v21 = *v20++;
          *(_BYTE *)v19 = 7;
          v19[1] = v21;
          v19 += 2;
        }
        while (v20 != v11);
      }
      v17[1] = v19;
    }
    v25 = v17;
    v22 = (unsigned __int8 *)sub_20B506370(a1);
    v23 = *v22;
    *v22 = 2;
    v24 = (void **)*((_QWORD *)v22 + 1);
    *((_QWORD *)v22 + 1) = v25;
    v25 = v24;
    sub_20B4181DC(&v25, v23);
    if (v13)
      operator delete(v13);
  }
}

void sub_20B50A05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void ***v24;
  void ***v25;

  v25 = v24;
  sub_20B4181DC(v25, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B50A184(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  double *v5;
  uint64_t v6;
  void **v7;
  void **v8;
  char *v9;
  const void *v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  int v14;
  void **v15;
  void **v16;
  unsigned __int8 *v17;
  int v18;
  void **v19;
  void **v20;
  void *__p[2];
  void *v22;
  char v23[8];
  void **v24;
  char v25;
  void **v26;
  uint64_t v27;
  void **v28[2];
  int v29;
  char v30;
  char *v31;

  if (*(_BYTE *)(a1 + 32))
  {
    v4 = (unsigned __int8 *)sub_20B506370(a1);
    if (*a2)
    {
      v5 = (double *)a2[1];
      v6 = 8 * *a2;
      do
      {
        v7 = *(void ***)v5;
        if ((*(_QWORD *)v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          LOBYTE(v27) = 7;
          v28[0] = v7;
          sub_20B51063C((uint64_t)v4, (char *)&v27);
          sub_20B4181DC(v28, v27);
        }
        else
        {
          v29 = 0;
          sub_20AF55CBC((uint64_t)&v31, (uint64_t)&v27, v5);
          if (v29 == -1)
            sub_20AECFAB8();
          v31 = &v30;
          ((void (*)(void **__return_ptr, char **, uint64_t *))off_24C41E9D0[v29])(__p, &v31, &v27);
          if (v29 != -1)
            ((void (*)(char **, uint64_t *))off_24C41E9B8[v29])(&v31, &v27);
          v24 = 0;
          v23[0] = 3;
          v8 = (void **)operator new(0x18uLL);
          *(_OWORD *)v8 = *(_OWORD *)__p;
          v8[2] = v22;
          __p[1] = 0;
          v22 = 0;
          __p[0] = 0;
          v24 = v8;
          sub_20B51063C((uint64_t)v4, v23);
          sub_20B4181DC(&v24, v23[0]);
          if (SHIBYTE(v22) < 0)
            operator delete(__p[0]);
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    else
    {
      v13 = operator new(0x18uLL);
      v13[1] = 0;
      v13[2] = 0;
      *v13 = 0;
      v14 = *v4;
      *v4 = 2;
      v25 = v14;
      v15 = (void **)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v13;
      v26 = v15;
      sub_20B4181DC(&v26, v14);
    }
  }
  else
  {
    v9 = (char *)*a2;
    v10 = (const void *)a2[1];
    v28[0] = 0;
    v28[1] = 0;
    v27 = 0;
    if (v9)
    {
      if (((unint64_t)v9 & 0x8000000000000000) != 0)
        sub_20AF6E1D0();
      v11 = 8 * (_QWORD)v9;
      v12 = (char *)operator new(8 * (_QWORD)v9);
      v9 = &v12[8 * (_QWORD)v9];
      memcpy(v12, v10, v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = (void **)operator new(0x18uLL);
    sub_20B5107D4(v16, v12, v9);
    v20 = v16;
    v17 = (unsigned __int8 *)sub_20B506370(a1);
    v18 = *v17;
    *v17 = 2;
    v19 = (void **)*((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v20;
    v20 = v19;
    sub_20B4181DC(&v20, v18);
    if (v12)
      operator delete(v12);
  }
}

void sub_20B50A40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void ***v24;

  sub_20B4181DC(v24, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B50A4F0(uint64_t a1, unint64_t *a2)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  void **v13;
  _BYTE v14[8];
  void **v15;
  void *__p;
  unint64_t v17;
  unint64_t v18;

  v4 = *a2;
  v3 = (_BYTE *)a2[1];
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20B451A44();
    v5 = (v4 - 1) >> 6;
    v6 = operator new(8 * (v5 + 1));
    v7 = 0;
    v17 = v4;
    v18 = v5 + 1;
    __p = v6;
    if (v4 >= 0x41)
      v8 = (v4 - 1) >> 6;
    else
      v8 = 0;
    v6[v8] = 0;
    do
    {
      v10 = 1 << v7;
      if (*v3)
        v9 = *v6 | v10;
      else
        v9 = *v6 & ~v10;
      *v6 = v9;
      ++v3;
      v6 += v7 == 63;
      if (v7 == 63)
        v7 = 0;
      else
        ++v7;
      --v4;
    }
    while (v4);
  }
  v14[0] = 0;
  v15 = 0;
  sub_20B5108CC((uint64_t)v14, (uint64_t)&__p);
  v11 = (unsigned __int8 *)sub_20B506370(a1);
  v12 = *v11;
  *v11 = v14[0];
  v14[0] = v12;
  v13 = (void **)*((_QWORD *)v11 + 1);
  *((_QWORD *)v11 + 1) = v15;
  v15 = v13;
  sub_20B4181DC(&v15, v12);
  if (__p)
    operator delete(__p);
}

void sub_20B50A610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *__p)
{
  void ***v12;

  sub_20B4181DC(v12, a10);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B50A640(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  char *v8;
  unsigned __int8 *v9;
  int v10;
  void **v11;
  __int128 *v12;
  __int128 *v13;
  void *v14;
  void *__p;
  __int128 *v16;
  uint64_t v17;
  char v18;
  void **v19;

  v3 = *a2;
  v4 = a2[1];
  v5 = v4 + 24 * *a2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  sub_20B50C9A8((char *)&__p, v4, v5, v3);
  v19 = 0;
  v18 = 2;
  v6 = (__int128 *)__p;
  v7 = v16;
  v8 = (char *)operator new(0x18uLL);
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  sub_20B510A0C(v8, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
  v19 = (void **)v8;
  v9 = (unsigned __int8 *)sub_20B506370(a1);
  v10 = *v9;
  *v9 = v18;
  v18 = v10;
  v11 = (void **)*((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = v19;
  v19 = v11;
  sub_20B4181DC(&v19, v10);
  v12 = (__int128 *)__p;
  if (__p)
  {
    v13 = v16;
    v14 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v13 - 1) < 0)
          operator delete(*((void **)v13 - 3));
        v13 = (__int128 *)((char *)v13 - 24);
      }
      while (v13 != v12);
      v14 = __p;
    }
    v16 = v12;
    operator delete(v14);
  }
}

void sub_20B50A754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20B4181DC(v13, a13);
  sub_20AEC2E90(&a10);
  _Unwind_Resume(a1);
}

void sub_20B50A774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  void *v10;

  operator delete(v10);
  sub_20AEC2E90(&a10);
  _Unwind_Resume(a1);
}

void sub_20B50A790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC2E90((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B50A7A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 32) = v3;
  v5 = *(char **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = v2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = *(char **)(a1 + 40);
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    sub_20B50C994();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      goto LABEL_47;
    v13 = (char *)operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v2;
    v7 = (uint64_t)(v14 + 8);
    v16 = (char *)(v5 - v8);
    if (v5 == v8)
      goto LABEL_21;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (char *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = v2;
  v7 = 8 * v9 + 8;
  v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58)
      goto LABEL_52;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_52;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 -= v19;
    v20 = &v13[8 * v9 - 16];
    v21 = (__int128 *)(v5 - 16);
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_52:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    v6 = *(char **)(a1 + 40);
  }
LABEL_21:
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v15;
  if (v6)
    operator delete(v6);
LABEL_23:
  *(_QWORD *)(a1 + 48) = v7;
  v26 = *(char **)(a1 + 72);
  v25 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v26 < v25)
  {
    *(_QWORD *)v26 = *(_QWORD *)(a1 + 112);
    v27 = v26 + 8;
    goto LABEL_44;
  }
  v28 = *(char **)(a1 + 64);
  v29 = (v26 - v28) >> 3;
  v30 = v29 + 1;
  if ((unint64_t)(v29 + 1) >> 61)
    sub_20B4268F4();
  v31 = v25 - (_QWORD)v28;
  if (v31 >> 2 > v30)
    v30 = v31 >> 2;
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
    v32 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v32 = v30;
  if (v32)
  {
    if (!(v32 >> 61))
    {
      v33 = operator new(8 * v32);
      goto LABEL_35;
    }
LABEL_47:
    sub_20AEC60CC();
  }
  v33 = 0;
LABEL_35:
  v34 = &v33[8 * v29];
  v35 = &v33[8 * v32];
  *v34 = *(_QWORD *)(a1 + 112);
  v27 = v34 + 1;
  if (v26 != v28)
  {
    v36 = v26 - v28 - 8;
    if (v36 < 0x58)
      goto LABEL_53;
    if ((unint64_t)(v28 - v33) < 0x20)
      goto LABEL_53;
    v37 = (v36 >> 3) + 1;
    v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v26[-v38];
    v34 = (_QWORD *)((char *)v34 - v38);
    v40 = &v33[8 * v29 - 16];
    v41 = v26 - 16;
    v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 4;
    }
    while (v42);
    v26 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        v44 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *--v34 = v44;
      }
      while (v26 != v28);
    }
  }
  *(_QWORD *)(a1 + 64) = v34;
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 80) = v35;
  if (v28)
    operator delete(v28);
LABEL_44:
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 112) = 0;
  if (*(_BYTE *)(a1 + 104))
    *(_BYTE *)(a1 + 104) = 0;
}

uint64_t sub_20B50AA5C(uint64_t *a1)
{
  _BYTE *v1;
  size_t v3;
  const void *v4;
  const void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  const void *__dst[2];
  unint64_t v10;

  v1 = (_BYTE *)a1[4];
  if (*v1 == 2)
    return sub_20B45491C(a1[4], a1[14]);
  v3 = a1[12];
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v4 = (const void *)a1[11];
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (const void **)operator new(v6 + 1);
    __dst[1] = (const void *)v3;
    v10 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v10) = a1[12];
    v5 = __dst;
    if (!v3)
      goto LABEL_11;
  }
  memmove(v5, v4, v3);
LABEL_11:
  *((_BYTE *)v5 + v3) = 0;
  v8 = sub_20B4FA0B0((uint64_t)v1, __dst);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__dst[0]);
  return (uint64_t)v8;
}

void sub_20B50AB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50AB74(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  _QWORD *exception;
  void *__p;
  _QWORD *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_20B50D194(a1, (uint64_t)&__p);
  v3 = __p;
  v4 = v8;
  if (__p != v8)
  {
    v5 = *(_BYTE **)(a2 + 8);
    do
    {
      if (*v3 >= 0x100uLL)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v3++;
    }
    while (v3 != v4);
    v3 = __p;
  }
  if (v3)
  {
    v8 = v3;
    operator delete(v3);
  }
}

void sub_20B50AC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B50AC30(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_24C41E890;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

void sub_20B50AC94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 32) = v3;
  v5 = *(char **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = v2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = *(char **)(a1 + 40);
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    sub_20B50C994();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      goto LABEL_47;
    v13 = (char *)operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v2;
    v7 = (uint64_t)(v14 + 8);
    v16 = (char *)(v5 - v8);
    if (v5 == v8)
      goto LABEL_21;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (char *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = v2;
  v7 = 8 * v9 + 8;
  v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58)
      goto LABEL_52;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_52;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 -= v19;
    v20 = &v13[8 * v9 - 16];
    v21 = (__int128 *)(v5 - 16);
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_52:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    v6 = *(char **)(a1 + 40);
  }
LABEL_21:
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v15;
  if (v6)
    operator delete(v6);
LABEL_23:
  *(_QWORD *)(a1 + 48) = v7;
  v26 = *(char **)(a1 + 72);
  v25 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v26 < v25)
  {
    *(_QWORD *)v26 = *(_QWORD *)(a1 + 112);
    v27 = v26 + 8;
    goto LABEL_44;
  }
  v28 = *(char **)(a1 + 64);
  v29 = (v26 - v28) >> 3;
  v30 = v29 + 1;
  if ((unint64_t)(v29 + 1) >> 61)
    sub_20B4268F4();
  v31 = v25 - (_QWORD)v28;
  if (v31 >> 2 > v30)
    v30 = v31 >> 2;
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
    v32 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v32 = v30;
  if (v32)
  {
    if (!(v32 >> 61))
    {
      v33 = operator new(8 * v32);
      goto LABEL_35;
    }
LABEL_47:
    sub_20AEC60CC();
  }
  v33 = 0;
LABEL_35:
  v34 = &v33[8 * v29];
  v35 = &v33[8 * v32];
  *v34 = *(_QWORD *)(a1 + 112);
  v27 = v34 + 1;
  if (v26 != v28)
  {
    v36 = v26 - v28 - 8;
    if (v36 < 0x58)
      goto LABEL_53;
    if ((unint64_t)(v28 - v33) < 0x20)
      goto LABEL_53;
    v37 = (v36 >> 3) + 1;
    v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v26[-v38];
    v34 = (_QWORD *)((char *)v34 - v38);
    v40 = &v33[8 * v29 - 16];
    v41 = v26 - 16;
    v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 4;
    }
    while (v42);
    v26 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        v44 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *--v34 = v44;
      }
      while (v26 != v28);
    }
  }
  *(_QWORD *)(a1 + 64) = v34;
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 80) = v35;
  if (v28)
    operator delete(v28);
LABEL_44:
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 112) = 0;
  if (*(_BYTE *)(a1 + 104))
    *(_BYTE *)(a1 + 104) = 0;
}

uint64_t sub_20B50AF4C(uint64_t *a1)
{
  _BYTE *v1;
  size_t v3;
  const void *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *__dst[2];
  unint64_t v10;

  v1 = (_BYTE *)a1[4];
  if (*v1 == 2)
    return sub_20B4551B8(a1[4], a1[14]);
  v3 = a1[12];
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v4 = (const void *)a1[11];
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (unsigned __int8 *)operator new(v6 + 1);
    __dst[1] = (unsigned __int8 *)v3;
    v10 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v10) = a1[12];
    v5 = (unsigned __int8 *)__dst;
    if (!v3)
      goto LABEL_11;
  }
  memmove(v5, v4, v3);
LABEL_11:
  v5[v3] = 0;
  v8 = sub_20B4FA1BC((uint64_t)v1, __dst);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
  return v8;
}

void sub_20B50B048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50B064(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  _QWORD *exception;
  void *__p;
  _QWORD *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_20B50E45C(a1, (uint64_t)&__p);
  v3 = __p;
  v4 = v8;
  if (__p != v8)
  {
    v5 = *(_BYTE **)(a2 + 8);
    do
    {
      if (*v3 >= 0x100uLL)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v3++;
    }
    while (v3 != v4);
    v3 = __p;
  }
  if (v3)
  {
    v8 = v3;
    operator delete(v3);
  }
}

void sub_20B50B100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50B120(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  _QWORD *exception;
  void *__p;
  _QWORD *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_20B50CAD8(a1, (uint64_t)&__p);
  v3 = __p;
  v4 = v8;
  if (__p != v8)
  {
    v5 = *(_BYTE **)(a2 + 8);
    do
    {
      if (*v3 != (char)*v3)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v3++;
    }
    while (v3 != v4);
    v3 = __p;
  }
  if (v3)
  {
    v8 = v3;
    operator delete(v3);
  }
}

void sub_20B50B1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50B1DC(uint64_t *a1, uint64_t a2)
{
  char *v4;

  v4 = (char *)sub_20B50AA5C(a1);
  ++a1[14];
  sub_20B50AB74(v4, a2);
}

void sub_20B50B210(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _WORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_20B50CAD8(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_WORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (*v6 != (__int16)*v6)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_20B50B2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50B2CC(uint64_t *a1, uint64_t a2)
{
  char *v4;

  v4 = (char *)sub_20B50AA5C(a1);
  ++a1[14];
  sub_20B50B300(v4, a2);
}

void sub_20B50B300(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _WORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_20B50D194(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_WORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (*v6 >= 0x10000uLL)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_20B50B39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50B3BC(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_20B50CAD8(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_DWORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (*v6 != (int)*v6)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_20B50B458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50B478(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_20B50D194(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_DWORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (HIDWORD(*v6))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_20B50B514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50B534(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_20B50AA5C(a1);
  ++a1[14];
  sub_20B50B568(v4, *(_WORD **)(a2 + 8));
}

void sub_20B50B568(unint64_t a1, _WORD *a2)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  int v11;
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  __int16 v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30[3];
  unsigned __int8 *v31[4];
  unsigned __int8 *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  void *__p[2];
  uint64_t v37;
  uint64_t v38;
  double v39;

  if (*(_BYTE *)a1 == 2)
  {
    v3 = *(uint64_t **)(a1 + 8);
    v5 = *v3;
    v4 = (unsigned __int8 *)v3[1];
    v32 = (unsigned __int8 *)a1;
    v33 = 0;
    v34 = v5;
    v35 = 0x8000000000000000;
    v31[0] = (unsigned __int8 *)a1;
    v31[1] = 0;
    v31[2] = v4;
    v31[3] = (unsigned __int8 *)0x8000000000000000;
    if (!sub_20B455B8C(&v32, v31))
    {
      v6 = *MEMORY[0x24BEDB7F0];
      v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v9 = MEMORY[0x24BEDB848] + 16;
      do
      {
        v10 = (void **)sub_20B455E70((uint64_t)&v32);
        v11 = *(unsigned __int8 *)v10;
        if ((v11 - 5) > 2)
        {
          if (v11 == 3)
          {
            __p[0] = 0;
            __p[1] = 0;
            v37 = 0;
            sub_20B45502C(v10, (uint64_t)__p);
            v18 = SHIBYTE(v37);
            v19 = (char *)__p[0];
            v20 = operator new();
            v21 = v20;
            if (v18 >= 0)
              v22 = (char *)__p;
            else
              v22 = v19;
            sub_20B52CF30(v20, v22);
            v38 = v21;
            v39 = 0.0;
            v23 = (_QWORD *)MEMORY[0x20BD35140](v21, &v39);
            _S0 = v39;
            __asm { FCVT            H0, S0 }
            _ZF = (*(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(*v23 - 24) + 32) & 5) == 0;
            *(_QWORD *)v21 = v6;
            *(_QWORD *)(v21 + *(_QWORD *)(v6 - 24)) = v7;
            if (_ZF)
              v26 = _H0;
            else
              v26 = 0;
            *(_QWORD *)(v21 + 24) = v9;
            *(_QWORD *)(v21 + 16) = v8;
            if (*(char *)(v21 + 111) < 0)
              operator delete(*(void **)(v21 + 88));
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x20BD35758](v21 + 128);
            MEMORY[0x20BD3583C](v21, 0x10B2C40EED050F3);
            if (SHIBYTE(v37) < 0)
              operator delete(__p[0]);
            *a2 = v26;
            v17 = *v32;
            if (v17 != 2)
            {
LABEL_21:
              if (v17 == 1)
              {
                v27 = v33;
                v28 = (_QWORD *)v33[1];
                if (v28)
                {
                  do
                  {
                    v29 = v28;
                    v28 = (_QWORD *)*v28;
                  }
                  while (v28);
                }
                else
                {
                  do
                  {
                    v29 = (_QWORD *)v27[2];
                    _ZF = *v29 == (_QWORD)v27;
                    v27 = v29;
                  }
                  while (!_ZF);
                }
                v33 = v29;
              }
              else
              {
                ++v35;
              }
              goto LABEL_5;
            }
          }
          else
          {
            *a2 = 0x7FFF;
            v17 = *v32;
            if (v17 != 2)
              goto LABEL_21;
          }
        }
        else
        {
          __p[0] = 0;
          sub_20B454DBC((uint64_t *)v10, (double *)__p);
          _S0 = *(double *)__p;
          __asm { FCVT            H0, S0 }
          *a2 = LOWORD(_S0);
          v17 = *v32;
          if (v17 != 2)
            goto LABEL_21;
        }
        v34 += 16;
LABEL_5:
        ++a2;
      }
      while (!sub_20B455B8C(&v32, v31));
    }
  }
  else
  {
    memset(v30, 0, sizeof(v30));
    sub_20B510D10(a1, (uint64_t)v30);
    if (v30[0])
      operator delete(v30[0]);
  }
}

void sub_20B50B818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50B878(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_20B50AA5C(a1);
  ++a1[14];
  sub_20B50B8AC(v4, *(float **)(a2 + 8));
}

void sub_20B50B8AC(unint64_t a1, float *a2)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  void *__p[3];
  unsigned __int8 *v13[4];
  unsigned __int8 *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;

  if (*(_BYTE *)a1 == 2)
  {
    v3 = *(uint64_t **)(a1 + 8);
    v5 = *v3;
    v4 = (unsigned __int8 *)v3[1];
    v14 = (unsigned __int8 *)a1;
    v15 = 0;
    v16 = v5;
    v17 = 0x8000000000000000;
    v13[0] = (unsigned __int8 *)a1;
    v13[1] = 0;
    v13[2] = v4;
    for (v13[3] = (unsigned __int8 *)0x8000000000000000; !sub_20B455B8C(&v14, v13); ++a2)
    {
      v6 = (uint64_t *)sub_20B455E70((uint64_t)&v14);
      *a2 = sub_20B510B54(v6);
      v7 = *v14;
      if (v7 == 2)
      {
        v16 += 16;
      }
      else if (v7 == 1)
      {
        v8 = v15;
        v9 = (_QWORD *)v15[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v8[2];
            v11 = *v10 == (_QWORD)v8;
            v8 = v10;
          }
          while (!v11);
        }
        v15 = v10;
      }
      else
      {
        ++v17;
      }
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    sub_20B510D10(a1, (uint64_t)__p);
    if (__p[0])
      operator delete(__p[0]);
  }
}

void sub_20B50B9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50B9DC(unint64_t a1, double *a2)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  void *__p[3];
  unsigned __int8 *v13[4];
  unsigned __int8 *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;

  if (*(_BYTE *)a1 == 2)
  {
    v3 = *(uint64_t **)(a1 + 8);
    v5 = *v3;
    v4 = (unsigned __int8 *)v3[1];
    v14 = (unsigned __int8 *)a1;
    v15 = 0;
    v16 = v5;
    v17 = 0x8000000000000000;
    v13[0] = (unsigned __int8 *)a1;
    v13[1] = 0;
    v13[2] = v4;
    for (v13[3] = (unsigned __int8 *)0x8000000000000000; !sub_20B455B8C(&v14, v13); ++a2)
    {
      v6 = (uint64_t *)sub_20B455E70((uint64_t)&v14);
      *a2 = sub_20B510C34(v6);
      v7 = *v14;
      if (v7 == 2)
      {
        v16 += 16;
      }
      else if (v7 == 1)
      {
        v8 = v15;
        v9 = (_QWORD *)v15[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v8[2];
            v11 = *v10 == (_QWORD)v8;
            v8 = v10;
          }
          while (!v11);
        }
        v15 = v10;
      }
      else
      {
        ++v17;
      }
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    sub_20B510D10(a1, (uint64_t)__p);
    if (__p[0])
      operator delete(__p[0]);
  }
}

void sub_20B50BAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B50BB0C(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  void **v4;
  void **v5;
  void *v6;
  double result;
  __int128 v8;
  void *v9;

  v8 = 0uLL;
  v9 = 0;
  sub_20B50DA50(a2, (void **)&v8);
  v4 = (void **)*a3;
  if (*a3)
  {
    v5 = (void **)a3[1];
    v6 = *a3;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = *a3;
    }
    a3[1] = v4;
    operator delete(v6);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  a3[2] = v9;
  return result;
}

void sub_20B50BBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  void **v11;
  void **v12;

  if (__p)
  {
    v11 = a10;
    v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != __p);
      v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B50BC00(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  _QWORD *exception;
  void *__p;
  _QWORD *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_20B50E120(a1, (uint64_t)&__p);
  v3 = __p;
  v4 = v8;
  if (__p != v8)
  {
    v5 = *(_BYTE **)(a2 + 8);
    do
    {
      if (*v3 != (char)*v3)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v3++;
    }
    while (v3 != v4);
    v3 = __p;
  }
  if (v3)
  {
    v8 = v3;
    operator delete(v3);
  }
}

void sub_20B50BC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50BCBC(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  _QWORD *exception;
  void *__p;
  _QWORD *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_20B50E120(a1, (uint64_t)&__p);
  v3 = __p;
  v4 = v8;
  if (__p != v8)
  {
    v5 = *(_BYTE **)(a2 + 8);
    do
    {
      if (*v3 != (char)*v3)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v3++;
    }
    while (v3 != v4);
    v3 = __p;
  }
  if (v3)
  {
    v8 = v3;
    operator delete(v3);
  }
}

void sub_20B50BD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50BD78(uint64_t *a1, uint64_t a2)
{
  char *v4;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  sub_20B50B064(v4, a2);
}

void sub_20B50BDAC(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _WORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_20B50E120(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_WORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (*v6 != (__int16)*v6)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_20B50BE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50BE68(uint64_t *a1, uint64_t a2)
{
  char *v4;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  sub_20B50BE9C(v4, a2);
}

void sub_20B50BE9C(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _WORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_20B50E45C(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_WORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (*v6 >= 0x10000uLL)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_20B50BF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50BF58(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_20B50E120(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_DWORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (*v6 != (int)*v6)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_20B50BFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50C014(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_20B50E45C(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_DWORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (HIDWORD(*v6))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C41FEF0;
        __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_20B50C0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50C0D0(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_20B50AF4C(a1);
  ++a1[14];
  sub_20B50C104(v4, *(_WORD **)(a2 + 8));
}

void sub_20B50C104(unint64_t a1, _WORD *a2)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  int v11;
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  __int16 v26;
  void *v27[3];
  unsigned __int8 *v28[4];
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *__p[2];
  uint64_t v34;
  uint64_t v35;
  double v36;

  if (*(_BYTE *)a1 == 2)
  {
    v3 = *(uint64_t **)(a1 + 8);
    v5 = *v3;
    v4 = (unsigned __int8 *)v3[1];
    v29 = (unsigned __int8 *)a1;
    v30 = 0;
    v31 = v5;
    v32 = 0x8000000000000000;
    v28[0] = (unsigned __int8 *)a1;
    v28[1] = 0;
    v28[2] = v4;
    v28[3] = (unsigned __int8 *)0x8000000000000000;
    if (!sub_20B45609C(&v29, v28))
    {
      v6 = *MEMORY[0x24BEDB7F0];
      v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v9 = MEMORY[0x24BEDB848] + 16;
      do
      {
        v10 = (void **)sub_20B45619C((uint64_t)&v29);
        v11 = *(unsigned __int8 *)v10;
        if ((v11 - 5) > 2)
        {
          if (v11 == 3)
          {
            __p[0] = 0;
            __p[1] = 0;
            v34 = 0;
            sub_20B4557C4(v10, (uint64_t)__p);
            v18 = SHIBYTE(v34);
            v19 = (char *)__p[0];
            v20 = operator new();
            v21 = v20;
            if (v18 >= 0)
              v22 = (char *)__p;
            else
              v22 = v19;
            sub_20B52CF30(v20, v22);
            v35 = v21;
            v36 = 0.0;
            v23 = (_QWORD *)MEMORY[0x20BD35140](v21, &v36);
            _S0 = v36;
            __asm { FCVT            H0, S0 }
            _ZF = (*(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(*v23 - 24) + 32) & 5) == 0;
            *(_QWORD *)v21 = v6;
            *(_QWORD *)(v21 + *(_QWORD *)(v6 - 24)) = v7;
            if (_ZF)
              v26 = _H0;
            else
              v26 = 0;
            *(_QWORD *)(v21 + 24) = v9;
            *(_QWORD *)(v21 + 16) = v8;
            if (*(char *)(v21 + 111) < 0)
              operator delete(*(void **)(v21 + 88));
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x20BD35758](v21 + 128);
            MEMORY[0x20BD3583C](v21, 0x10B2C40EED050F3);
            if (SHIBYTE(v34) < 0)
              operator delete(__p[0]);
            *a2 = v26;
            v17 = *v29;
            if (v17 != 2)
            {
LABEL_21:
              if (v17 == 1)
                v30 += 40;
              else
                ++v32;
              goto LABEL_5;
            }
          }
          else
          {
            *a2 = 0x7FFF;
            v17 = *v29;
            if (v17 != 2)
              goto LABEL_21;
          }
        }
        else
        {
          __p[0] = 0;
          sub_20B455554((uint64_t *)v10, (double *)__p);
          _S0 = *(double *)__p;
          __asm { FCVT            H0, S0 }
          *a2 = LOWORD(_S0);
          v17 = *v29;
          if (v17 != 2)
            goto LABEL_21;
        }
        v31 += 16;
LABEL_5:
        ++a2;
      }
      while (!sub_20B45609C(&v29, v28));
    }
  }
  else
  {
    memset(v27, 0, sizeof(v27));
    sub_20B5114B8(a1, (uint64_t)v27);
    if (v27[0])
      operator delete(v27[0]);
  }
}

void sub_20B50C38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50C3EC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_20B50AF4C(a1);
  ++a1[14];
  sub_20B50C420(v4, *(float **)(a2 + 8));
}

void sub_20B50C420(unint64_t a1, float *a2)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  void *__p[3];
  unsigned __int8 *v9[4];
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if (*(_BYTE *)a1 == 2)
  {
    v3 = *(uint64_t **)(a1 + 8);
    v5 = *v3;
    v4 = (unsigned __int8 *)v3[1];
    v10 = (unsigned __int8 *)a1;
    v11 = 0;
    v12 = v5;
    v13 = 0x8000000000000000;
    v9[0] = (unsigned __int8 *)a1;
    v9[1] = 0;
    v9[2] = v4;
    for (v9[3] = (unsigned __int8 *)0x8000000000000000; !sub_20B45609C(&v10, v9); ++a2)
    {
      v6 = (uint64_t *)sub_20B45619C((uint64_t)&v10);
      *a2 = sub_20B5112FC(v6);
      v7 = *v10;
      if (v7 == 2)
      {
        v12 += 16;
      }
      else if (v7 == 1)
      {
        v11 += 40;
      }
      else
      {
        ++v13;
      }
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    sub_20B5114B8(a1, (uint64_t)__p);
    if (__p[0])
      operator delete(__p[0]);
  }
}

void sub_20B50C510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50C528(unint64_t a1, double *a2)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  void *__p[3];
  unsigned __int8 *v9[4];
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if (*(_BYTE *)a1 == 2)
  {
    v3 = *(uint64_t **)(a1 + 8);
    v5 = *v3;
    v4 = (unsigned __int8 *)v3[1];
    v10 = (unsigned __int8 *)a1;
    v11 = 0;
    v12 = v5;
    v13 = 0x8000000000000000;
    v9[0] = (unsigned __int8 *)a1;
    v9[1] = 0;
    v9[2] = v4;
    for (v9[3] = (unsigned __int8 *)0x8000000000000000; !sub_20B45609C(&v10, v9); ++a2)
    {
      v6 = (uint64_t *)sub_20B45619C((uint64_t)&v10);
      *a2 = sub_20B5113DC(v6);
      v7 = *v10;
      if (v7 == 2)
      {
        v12 += 16;
      }
      else if (v7 == 1)
      {
        v11 += 40;
      }
      else
      {
        ++v13;
      }
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    sub_20B5114B8(a1, (uint64_t)__p);
    if (__p[0])
      operator delete(__p[0]);
  }
}

void sub_20B50C618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50C630(uint64_t *a1, uint64_t a2)
{
  char *v4;
  void *v5;
  int v6;
  int v8;
  int v9;
  char *v10;
  _BYTE *v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_20B50E798(v4, (uint64_t)&v15);
  v5 = v15;
  v6 = v16 & 0x3F;
  if (v16 > 0x3F || v6 != 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = &v15[8 * (v16 >> 6)];
    v11 = *(_BYTE **)(a2 + 8);
    v12 = v15;
    do
    {
      *v11++ = (*(_QWORD *)v12 >> v9) & 1;
      v13 = v9 + 1;
      v12 += 8 * (v8 == 63);
      if (v8 == 63)
        v8 = 0;
      else
        v8 = v13;
      v14 = v12 == v10 && v6 == v8;
      v9 = v8;
    }
    while (!v14);
  }
  if (v5)
    operator delete(v5);
}

void sub_20B50C6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B50C6F8(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  size_t *v5;
  size_t *v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  signed __int8 v10;
  __int128 v11;
  void **v12;
  void *v13;
  void *__p;
  void **v15;
  uint64_t v16;

  v4 = (unsigned __int8 *)sub_20B50AF4C(a1);
  ++a1[14];
  __p = 0;
  v15 = 0;
  v16 = 0;
  sub_20B50EE28(v4, &__p);
  v5 = (size_t *)__p;
  v6 = (size_t *)v15;
  if (__p != v15)
  {
    v7 = *(_QWORD *)(a2 + 8);
    do
    {
      if (v5 != (size_t *)v7)
      {
        v10 = *((_BYTE *)v5 + 23);
        if (*(char *)(v7 + 23) < 0)
        {
          if (v10 >= 0)
            v8 = v5;
          else
            v8 = (void *)*v5;
          if (v10 >= 0)
            v9 = *((unsigned __int8 *)v5 + 23);
          else
            v9 = v5[1];
          sub_20AEC8090((void **)v7, v8, v9);
        }
        else if ((*((_BYTE *)v5 + 23) & 0x80) != 0)
        {
          sub_20AEC7FCC((_QWORD *)v7, (void *)*v5, v5[1]);
        }
        else
        {
          v11 = *(_OWORD *)v5;
          *(_QWORD *)(v7 + 16) = v5[2];
          *(_OWORD *)v7 = v11;
        }
      }
      v5 += 3;
      v7 += 24;
    }
    while (v5 != v6);
    v5 = (size_t *)__p;
  }
  if (v5)
  {
    v12 = v15;
    v13 = v5;
    if (v15 != (void **)v5)
    {
      do
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      while (v12 != (void **)v5);
      v13 = __p;
    }
    v15 = (void **)v5;
    operator delete(v13);
  }
}

void sub_20B50C80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, void **a11)
{
  void **v12;
  void **v13;

  if (__p)
  {
    v12 = a11;
    v13 = __p;
    if (a11 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      while (v12 != __p);
      v13 = __p;
    }
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

double sub_20B50C8A0(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  void **v4;
  void **v5;
  void *v6;
  double result;
  __int128 v8;
  void *v9;

  v8 = 0uLL;
  v9 = 0;
  sub_20B50EE28(a2, (void **)&v8);
  v4 = (void **)*a3;
  if (*a3)
  {
    v5 = (void **)a3[1];
    v6 = *a3;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = *a3;
    }
    a3[1] = v4;
    operator delete(v6);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  a3[2] = v9;
  return result;
}

void sub_20B50C940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  void **v11;
  void **v12;

  if (__p)
  {
    v11 = a10;
    v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != __p);
      v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B50C994()
{
  sub_20AEC014C("vector");
}

char *sub_20B50C9A8(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_20AEC60B8();
    result = (char *)operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_20AEC60F4(result, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v10;
          *((_QWORD *)result + 2) = *(_QWORD *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20B50CA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20AEC7748(&a9);
  _Unwind_Resume(a1);
}

void sub_20B50CA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20AEC7748(&a9);
  _Unwind_Resume(a1);
}

double sub_20B50CAD8(char *a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_20B452AD0(a1);
    sub_20AEC0D64(&v6, v5);
    sub_20B1F16DC("type must be array, but is ", &v6, &v7);
    sub_20B452958(302, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  return sub_20B50CBDC((unsigned __int8 *)a1, a2);
}

void sub_20B50CB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_20B50CBDC(unsigned __int8 *a1, uint64_t a2)
{
  int v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  char *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *v15;
  double result;
  unsigned __int8 *v17;
  _QWORD *v18;
  __int128 v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;

  v24 = 0uLL;
  v25 = 0;
  v4 = *a1;
  if (v4 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    if (v6)
      goto LABEL_6;
  }
  else
  {
    if (v4 != 1)
    {
      if (!*a1)
      {
        v5 = 0;
        v20 = a1;
        v21 = 0;
        v22 = 0;
        v23 = 1;
        goto LABEL_17;
      }
      v6 = 1;
      goto LABEL_11;
    }
    v6 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
    if (v6)
    {
LABEL_6:
      if (v6 >> 61)
        sub_20AF6E1D0();
LABEL_11:
      v5 = (char *)operator new(8 * v6);
      *(_QWORD *)&v24 = v5;
      *((_QWORD *)&v24 + 1) = v5;
      v25 = &v5[8 * v6];
      v20 = a1;
      v21 = 0;
      v22 = 0;
      v23 = 0x8000000000000000;
      goto LABEL_12;
    }
  }
  v5 = 0;
  v20 = a1;
  v21 = 0;
  v22 = 0;
  v23 = 0x8000000000000000;
LABEL_12:
  if (v4 == 2)
  {
    v8 = (uint64_t *)*((_QWORD *)a1 + 1);
    v22 = *v8;
    v17 = a1;
    v18 = 0;
    *((_QWORD *)&v19 + 1) = 0x8000000000000000;
    *(_QWORD *)&v19 = v8[1];
    goto LABEL_19;
  }
  if (v4 == 1)
  {
    v7 = (_QWORD *)*((_QWORD *)a1 + 1);
    v21 = (_QWORD *)*v7;
    v19 = xmmword_20B60EF30;
    v17 = a1;
    v18 = v7 + 1;
    goto LABEL_19;
  }
  v23 = 0;
LABEL_17:
  v17 = a1;
  v18 = 0;
  *(_QWORD *)&v19 = 0;
  *((_QWORD *)&v19 + 1) = 1;
LABEL_19:
  while (!sub_20B455B8C(&v20, &v17))
  {
    v9 = sub_20B455E70((uint64_t)&v20);
    v26 = 0;
    sub_20B454C74(v9, &v26);
    v5 = sub_20B50CE24((void **)&v24, v5, &v26) + 8;
    v10 = *v20;
    if (v10 == 2)
    {
      v22 += 16;
    }
    else if (v10 == 1)
    {
      v11 = v21;
      v12 = (_QWORD *)v21[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v11[2];
          v14 = *v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v14);
      }
      v21 = v13;
    }
    else
    {
      ++v23;
    }
  }
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v15;
    operator delete(v15);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v24;
  *(_OWORD *)a2 = v24;
  *(_QWORD *)(a2 + 16) = v25;
  return result;
}

void sub_20B50CE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20B50CE24(void **a1, _BYTE *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 3;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v11 >> 3;
    v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v17 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = v14 + v6 + 8;
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          v45 = (v16 >> 3) + 1;
          v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          v13 = (uint64_t *)((char *)v13 + v46);
          v17 = (_QWORD *)(v5 + v46);
          v47 = (_OWORD *)(v5 + 16);
          v48 = (__int128 *)(8 * v12 + 8 * v8 + v6 + 16);
          v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            *v47 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 4;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
      }
      else
      {
        v17 = a1[1];
      }
      do
      {
        v51 = *v13++;
        *v17++ = v51;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8)
      memmove((void *)(v5 - 8 * v12), v9, v11);
    *(_QWORD *)v9 = *a3;
    return v9;
  }
  v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61)
    sub_20AF6E1D0();
  v20 = v10 - v6;
  if (v20 >> 2 > v18)
    v18 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 61)
      sub_20AEC60CC();
    v22 = (char *)operator new(8 * v21);
    v23 = &v22[8 * v8];
    v24 = &v22[8 * v21];
    if (v8 != v21)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(8 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v44 = 1;
    else
      v44 = v7 >> 2;
    if (v44 >> 61)
      sub_20AEC60CC();
    v23 = (char *)operator new(8 * v44);
    v24 = &v23[8 * v44];
    if (v22)
    {
      operator delete(v22);
      v24 = &v23[8 * v44];
      v26 = (char *)*a1;
      *(_QWORD *)v23 = *a3;
      v27 = v23 + 8;
      v28 = v23;
      if (v26 != v9)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
  else
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  v26 = (char *)v6;
  *(_QWORD *)v23 = *a3;
  v27 = v23 + 8;
  v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v30 = v29 - v26 - 8;
    v31 = v9;
    v28 = v23;
    if (v30 < 0x58)
      goto LABEL_58;
    v31 = v9;
    v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20)
      goto LABEL_58;
    v32 = (v30 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v31 = &v9[-v33];
    v28 = &v23[-v33];
    v34 = v23 - 16;
    v35 = (__int128 *)(v6 + 8 * v8 - 16);
    v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v38 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *((_QWORD *)v28 - 1) = v38;
        v28 -= 8;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  v39 = (char *)a1[1];
  v40 = v39 - v9;
  if (v39 != v9)
  {
    v41 = v9;
    v42 = v39 - v9;
    v43 = v24;
    memmove(v27, v41, v42);
    v24 = v43;
    v26 = (char *)*a1;
  }
  *a1 = v28;
  a1[1] = &v27[v40];
  a1[2] = v24;
  if (v26)
    operator delete(v26);
  return v23;
}

void sub_20B50D17C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

double sub_20B50D194(char *a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_20B452AD0(a1);
    sub_20AEC0D64(&v6, v5);
    sub_20B1F16DC("type must be array, but is ", &v6, &v7);
    sub_20B452958(302, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  return sub_20B50D298((unsigned __int8 *)a1, a2);
}

void sub_20B50D238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_20B50D298(unsigned __int8 *a1, uint64_t a2)
{
  int v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  char *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *v15;
  double result;
  unsigned __int8 *v17;
  _QWORD *v18;
  __int128 v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;

  v24 = 0uLL;
  v25 = 0;
  v4 = *a1;
  if (v4 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    if (v6)
      goto LABEL_6;
  }
  else
  {
    if (v4 != 1)
    {
      if (!*a1)
      {
        v5 = 0;
        v20 = a1;
        v21 = 0;
        v22 = 0;
        v23 = 1;
        goto LABEL_17;
      }
      v6 = 1;
      goto LABEL_11;
    }
    v6 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
    if (v6)
    {
LABEL_6:
      if (v6 >> 61)
        sub_20AF6E1D0();
LABEL_11:
      v5 = (char *)operator new(8 * v6);
      *(_QWORD *)&v24 = v5;
      *((_QWORD *)&v24 + 1) = v5;
      v25 = &v5[8 * v6];
      v20 = a1;
      v21 = 0;
      v22 = 0;
      v23 = 0x8000000000000000;
      goto LABEL_12;
    }
  }
  v5 = 0;
  v20 = a1;
  v21 = 0;
  v22 = 0;
  v23 = 0x8000000000000000;
LABEL_12:
  if (v4 == 2)
  {
    v8 = (uint64_t *)*((_QWORD *)a1 + 1);
    v22 = *v8;
    v17 = a1;
    v18 = 0;
    *((_QWORD *)&v19 + 1) = 0x8000000000000000;
    *(_QWORD *)&v19 = v8[1];
    goto LABEL_19;
  }
  if (v4 == 1)
  {
    v7 = (_QWORD *)*((_QWORD *)a1 + 1);
    v21 = (_QWORD *)*v7;
    v19 = xmmword_20B60EF30;
    v17 = a1;
    v18 = v7 + 1;
    goto LABEL_19;
  }
  v23 = 0;
LABEL_17:
  v17 = a1;
  v18 = 0;
  *(_QWORD *)&v19 = 0;
  *((_QWORD *)&v19 + 1) = 1;
LABEL_19:
  while (!sub_20B455B8C(&v20, &v17))
  {
    v9 = sub_20B455E70((uint64_t)&v20);
    v26 = 0;
    sub_20B454B2C(v9, &v26);
    v5 = sub_20B50D4E0((void **)&v24, v5, &v26) + 8;
    v10 = *v20;
    if (v10 == 2)
    {
      v22 += 16;
    }
    else if (v10 == 1)
    {
      v11 = v21;
      v12 = (_QWORD *)v21[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v11[2];
          v14 = *v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v14);
      }
      v21 = v13;
    }
    else
    {
      ++v23;
    }
  }
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v15;
    operator delete(v15);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v24;
  *(_OWORD *)a2 = v24;
  *(_QWORD *)(a2 + 16) = v25;
  return result;
}

void sub_20B50D4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20B50D4E0(void **a1, _BYTE *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 3;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v11 >> 3;
    v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v17 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = v14 + v6 + 8;
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          v45 = (v16 >> 3) + 1;
          v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          v13 = (uint64_t *)((char *)v13 + v46);
          v17 = (_QWORD *)(v5 + v46);
          v47 = (_OWORD *)(v5 + 16);
          v48 = (__int128 *)(8 * v12 + 8 * v8 + v6 + 16);
          v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            *v47 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 4;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
      }
      else
      {
        v17 = a1[1];
      }
      do
      {
        v51 = *v13++;
        *v17++ = v51;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8)
      memmove((void *)(v5 - 8 * v12), v9, v11);
    *(_QWORD *)v9 = *a3;
    return v9;
  }
  v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61)
    sub_20AF6E1D0();
  v20 = v10 - v6;
  if (v20 >> 2 > v18)
    v18 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 61)
      sub_20AEC60CC();
    v22 = (char *)operator new(8 * v21);
    v23 = &v22[8 * v8];
    v24 = &v22[8 * v21];
    if (v8 != v21)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(8 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v44 = 1;
    else
      v44 = v7 >> 2;
    if (v44 >> 61)
      sub_20AEC60CC();
    v23 = (char *)operator new(8 * v44);
    v24 = &v23[8 * v44];
    if (v22)
    {
      operator delete(v22);
      v24 = &v23[8 * v44];
      v26 = (char *)*a1;
      *(_QWORD *)v23 = *a3;
      v27 = v23 + 8;
      v28 = v23;
      if (v26 != v9)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
  else
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  v26 = (char *)v6;
  *(_QWORD *)v23 = *a3;
  v27 = v23 + 8;
  v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v30 = v29 - v26 - 8;
    v31 = v9;
    v28 = v23;
    if (v30 < 0x58)
      goto LABEL_58;
    v31 = v9;
    v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20)
      goto LABEL_58;
    v32 = (v30 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v31 = &v9[-v33];
    v28 = &v23[-v33];
    v34 = v23 - 16;
    v35 = (__int128 *)(v6 + 8 * v8 - 16);
    v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v38 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *((_QWORD *)v28 - 1) = v38;
        v28 -= 8;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  v39 = (char *)a1[1];
  v40 = v39 - v9;
  if (v39 != v9)
  {
    v41 = v9;
    v42 = v39 - v9;
    v43 = v24;
    memmove(v27, v41, v42);
    v24 = v43;
    v26 = (char *)*a1;
  }
  *a1 = v28;
  a1[1] = &v27[v40];
  a1[2] = v24;
  if (v26)
    operator delete(v26);
  return v23;
}

void sub_20B50D838(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B50D850(uint64_t result, uint64_t a2, unsigned int a3, _QWORD *a4, unsigned int a5, uint64_t a6)
{
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t *v23;
  uint64_t v24;

  v6 = a5 - (unint64_t)a3 + 8 * ((_QWORD)a4 - a2);
  if (v6 <= 0)
  {
    v11 = *(unint64_t **)a6;
    LODWORD(v9) = *(_DWORD *)(a6 + 8);
LABEL_16:
    *(_QWORD *)result = v11;
    *(_DWORD *)(result + 8) = v9;
    return result;
  }
  if (a5)
  {
    if (v6 >= (unint64_t)a5)
      v7 = a5;
    else
      v7 = a5 - (unint64_t)a3 + 8 * ((_QWORD)a4 - a2);
    v6 -= v7;
    v8 = (-1 << (a5 - v7)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a5) & *a4;
    v9 = *(unsigned int *)(a6 + 8);
    if (v7 >= v9)
      v10 = *(unsigned int *)(a6 + 8);
    else
      v10 = v7;
    v11 = *(unint64_t **)a6;
    if (v10)
    {
      v12 = v8 >> (a5 - v9);
      if (v9 > a5)
        v12 = v8 << (v9 - a5);
      *v11 = *v11 & ~((-1 << (v9 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9)) | v12;
      LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v10) & 0x3F;
      *(_DWORD *)(a6 + 8) = v9;
      v7 -= v10;
    }
    if (v7 >= 1)
    {
      v13 = *--v11;
      *(_QWORD *)a6 = v11;
      LODWORD(v9) = -(int)v7 & 0x3F;
      *(_DWORD *)(a6 + 8) = v9;
      *v11 = v13 & ~(-1 << -(char)v7) | (v8 << (v7 + v10 - a5 + (-(char)v7 & 0x3F)));
    }
  }
  else
  {
    LODWORD(v9) = *(_DWORD *)(a6 + 8);
    v11 = *(unint64_t **)a6;
  }
  v14 = 64 - v9;
  v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
  if (v6 >= 64)
  {
    v16 = *v11;
    do
    {
      v17 = v6;
      v19 = *--a4;
      v18 = v19;
      *v11 = (v19 >> v14) | v16 & ~v15;
      v20 = *--v11;
      v16 = v20 & v15 | (v18 << v9);
      *v11 = v16;
      v6 = v17 - 64;
    }
    while (v17 > 0x7F);
    *(_QWORD *)a6 = v11;
  }
  if (v6 < 1)
    goto LABEL_16;
  v21 = *(a4 - 1) & (-1 << -(char)v6);
  v22 = v6 >= (unint64_t)v9 ? v9 : v6;
  *v11 = *v11 & ~((-1 << (v9 - v22)) & v15) | (v21 >> v14);
  LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v22) & 0x3F;
  *(_DWORD *)(a6 + 8) = v9;
  if (v6 - v22 < 1)
    goto LABEL_16;
  v24 = *(v11 - 1);
  v23 = v11 - 1;
  *(_QWORD *)a6 = v23;
  *(_DWORD *)(a6 + 8) = (v22 - v6) & 0x3F;
  *v23 = v24 & ~(-1 << (v22 - v6)) | (v21 << (v6 + ((v22 - v6) & 0x3F)));
  *(_QWORD *)result = v23;
  *(_DWORD *)(result + 8) = (v22 - v6) & 0x3F;
  return result;
}

double sub_20B50DA50(unsigned __int8 *a1, void **a2)
{
  int v4;
  std::string::size_type *v5;
  std::string::size_type *v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  std::string::size_type size;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void **v15;
  void **v16;
  void *v17;
  double result;
  void *exception;
  char *v20;
  unsigned __int8 *v21;
  std::string::size_type *v22;
  __int128 v23;
  std::string v24;
  unint64_t v25;
  __int128 v26;
  void *v27;
  __int128 v28;
  uint64_t v29;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v20 = (char *)sub_20B452AD0((char *)a1);
    sub_20AEC0D64(&v21, v20);
    sub_20B1F16DC("type must be array, but is ", (std::string *)&v21, &v24);
    sub_20B452958(302, (uint64_t)&v24, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  v27 = 0;
  v26 = 0uLL;
  sub_20AECF88C((uint64_t)&v26, (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4);
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v24.__r_.__value_.__r.__words[2] = 0;
  v25 = 0x8000000000000000;
  v4 = *a1;
  if (*a1)
  {
    if (v4 == 2)
    {
      v6 = (std::string::size_type *)*((_QWORD *)a1 + 1);
      v24.__r_.__value_.__r.__words[2] = *v6;
      v21 = a1;
      v22 = 0;
      *((_QWORD *)&v23 + 1) = 0x8000000000000000;
      *(_QWORD *)&v23 = v6[1];
      goto LABEL_10;
    }
    if (v4 == 1)
    {
      v5 = (std::string::size_type *)*((_QWORD *)a1 + 1);
      v24.__r_.__value_.__l.__size_ = *v5;
      v23 = xmmword_20B60EF30;
      v21 = a1;
      v22 = v5 + 1;
      goto LABEL_10;
    }
    v25 = 0;
  }
  else
  {
    v25 = 1;
  }
  v21 = a1;
  v22 = 0;
  *(_QWORD *)&v23 = 0;
  *((_QWORD *)&v23 + 1) = 1;
LABEL_10:
  v7 = *((_QWORD *)&v26 + 1);
  while (!sub_20B455B8C((unsigned __int8 **)&v24, &v21))
  {
    v8 = (void **)sub_20B455E70((uint64_t)&v24);
    v28 = 0uLL;
    v29 = 0;
    sub_20B45502C(v8, (uint64_t)&v28);
    v9 = sub_20B50DD88((uint64_t *)&v26, v7, &v28);
    if (SHIBYTE(v29) < 0)
    {
      operator delete((void *)v28);
      v10 = *v24.__r_.__value_.__l.__data_;
      if (v10 != 2)
      {
LABEL_13:
        if (v10 == 1)
        {
          size = v24.__r_.__value_.__l.__size_;
          v12 = *(_QWORD **)(v24.__r_.__value_.__l.__size_ + 8);
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = *(_QWORD **)(size + 16);
              v14 = *v13 == size;
              size = (std::string::size_type)v13;
            }
            while (!v14);
          }
          v24.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
        }
        else
        {
          ++v25;
        }
        goto LABEL_23;
      }
    }
    else
    {
      v10 = *v24.__r_.__value_.__l.__data_;
      if (v10 != 2)
        goto LABEL_13;
    }
    v24.__r_.__value_.__r.__words[2] += 16;
LABEL_23:
    v7 = v9 + 24;
  }
  v15 = (void **)*a2;
  if (*a2)
  {
    v16 = (void **)a2[1];
    v17 = *a2;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v16 - 1) < 0)
          operator delete(*(v16 - 3));
        v16 -= 3;
      }
      while (v16 != v15);
      v17 = *a2;
    }
    a2[1] = v15;
    operator delete(v17);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  result = *(double *)&v26;
  *(_OWORD *)a2 = v26;
  a2[2] = v27;
  return result;
}

void sub_20B50DCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AEC2E90((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B50DD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v22 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (v22)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B50DD88(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v6 = *a1;
  v5 = a1[1];
  v7 = a2 - *a1;
  v8 = v7 / 24;
  v9 = *a1 + 24 * (v7 / 24);
  v10 = a1[2];
  if (v5 >= v10)
  {
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v6) >> 3) + 1;
    if (v16 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60B8();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v6) >> 3);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 > 0xAAAAAAAAAAAAAAALL)
        sub_20AEC60CC();
      v19 = (char *)operator new(24 * v18);
    }
    else
    {
      v19 = 0;
    }
    v21 = &v19[24 * v8];
    v22 = &v19[24 * v18];
    if (v8 == v18)
    {
      if (v7 < 24)
      {
        if ((unint64_t)(v7 + 23) < 0x2F)
          v28 = 1;
        else
          v28 = 2 * v8;
        if (v28 > 0xAAAAAAAAAAAAAAALL)
          sub_20AEC60CC();
        v29 = (char *)operator new(24 * v28);
        v21 = &v29[24 * (v28 >> 2)];
        v22 = &v29[24 * v28];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v23 = v8 + 2;
        if (v8 >= -1)
          v23 = v8 + 1;
        v21 -= 24 * (v23 >> 1);
      }
    }
    *(_OWORD *)v21 = *a3;
    *((_QWORD *)v21 + 2) = *((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    v30 = v21 + 24;
    v31 = *a1;
    v32 = v21;
    if (*a1 != v9)
    {
      v33 = v21;
      v34 = v9;
      do
      {
        v32 = v33 - 24;
        v35 = *(_OWORD *)(v34 - 24);
        *((_QWORD *)v33 - 1) = *(_QWORD *)(v34 - 8);
        *(_OWORD *)(v33 - 24) = v35;
        *(_QWORD *)(v34 - 16) = 0;
        *(_QWORD *)(v34 - 8) = 0;
        *(_QWORD *)(v34 - 24) = 0;
        v33 -= 24;
        v34 -= 24;
      }
      while (v34 != v31);
    }
    v36 = a1[1];
    if (v36 != v9)
    {
      do
      {
        v37 = *(_OWORD *)v9;
        *((_QWORD *)v30 + 2) = *(_QWORD *)(v9 + 16);
        *(_OWORD *)v30 = v37;
        v30 += 24;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)v9 = 0;
        v9 += 24;
      }
      while (v9 != v36);
      v9 = a1[1];
    }
    v38 = *a1;
    *a1 = (uint64_t)v32;
    a1[1] = (uint64_t)v30;
    a1[2] = (uint64_t)v22;
    if (v9 == v38)
    {
      if (!v9)
        return (uint64_t)v21;
    }
    else
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v38);
      v9 = v38;
      if (!v38)
        return (uint64_t)v21;
    }
    operator delete((void *)v9);
    return (uint64_t)v21;
  }
  if (v9 == v5)
  {
    v20 = *a3;
    *(_QWORD *)(v9 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v9 = v20;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    a1[1] = v9 + 24;
    return v9;
  }
  v11 = v9 + 24;
  v12 = v5 - 24;
  if (v5 >= 0x18)
  {
    v13 = v5 - 24;
    v14 = a1[1];
    do
    {
      v15 = *(_OWORD *)v13;
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v13 + 16);
      *(_OWORD *)v14 = v15;
      v14 += 24;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      v13 += 24;
    }
    while (v13 < v5);
    a1[1] = v14;
    if (v5 == v11)
      goto LABEL_29;
LABEL_25:
    v24 = 8 * ((uint64_t)(v5 - v11) >> 3);
    do
    {
      if (*(char *)(v12 + 23) < 0)
        operator delete(*(void **)v12);
      v25 = (__int128 *)(v9 + v24 - 24);
      v26 = *v25;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v9 + v24 - 8);
      *(_OWORD *)v12 = v26;
      v12 -= 24;
      *(_BYTE *)(v9 + v24 - 1) = 0;
      *(_BYTE *)v25 = 0;
      v24 -= 24;
    }
    while (v24);
    goto LABEL_29;
  }
  a1[1] = v5;
  if (v5 != v11)
    goto LABEL_25;
LABEL_29:
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  v27 = *a3;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v9 = v27;
  *((_BYTE *)a3 + 23) = 0;
  *(_BYTE *)a3 = 0;
  return v9;
}

void sub_20B50E10C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20B50E120(char *a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_20B452AD0(a1);
    sub_20AEC0D64(&v6, v5);
    sub_20B1F16DC("type must be array, but is ", &v6, &v7);
    sub_20B452958(302, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  return sub_20B50E224((unsigned __int8 *)a1, a2);
}

void sub_20B50E1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_20B50E224(unsigned __int8 *a1, uint64_t a2)
{
  int v4;
  char *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  int v11;
  void *v12;
  double result;
  unsigned __int8 *v14;
  uint64_t v15;
  __int128 v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v21 = 0uLL;
  v22 = 0;
  v4 = *a1;
  if (v4 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    if (v6)
      goto LABEL_6;
  }
  else
  {
    if (v4 != 1)
    {
      if (!*a1)
      {
        v5 = 0;
        v17 = a1;
        v18 = 0;
        v19 = 0;
        v20 = 0x8000000000000000;
        v20 = 1;
        goto LABEL_18;
      }
      v6 = 1;
      goto LABEL_12;
    }
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 3);
    if (v6)
    {
LABEL_6:
      if (v6 >> 61)
        sub_20AF6E1D0();
LABEL_12:
      v5 = (char *)operator new(8 * v6);
      *(_QWORD *)&v21 = v5;
      *((_QWORD *)&v21 + 1) = v5;
      v22 = &v5[8 * v6];
      v17 = a1;
      v18 = 0;
      v19 = 0;
      v20 = 0x8000000000000000;
      goto LABEL_13;
    }
  }
  v5 = 0;
  v17 = a1;
  v18 = 0;
  v19 = 0;
  v20 = 0x8000000000000000;
LABEL_13:
  if (v4 == 2)
  {
    v9 = (uint64_t *)*((_QWORD *)a1 + 1);
    v19 = *v9;
    v14 = a1;
    v15 = 0;
    *((_QWORD *)&v16 + 1) = 0x8000000000000000;
    *(_QWORD *)&v16 = v9[1];
    goto LABEL_20;
  }
  if (v4 == 1)
  {
    v7 = (uint64_t *)*((_QWORD *)a1 + 1);
    v18 = *v7;
    v16 = xmmword_20B60EF30;
    v8 = v7[1];
    v14 = a1;
    v15 = v8;
    goto LABEL_20;
  }
  v20 = 0;
LABEL_18:
  v14 = a1;
  v15 = 0;
  *(_QWORD *)&v16 = 0;
  *((_QWORD *)&v16 + 1) = 1;
LABEL_20:
  while (!sub_20B45609C(&v17, &v14))
  {
    v10 = sub_20B45619C((uint64_t)&v17);
    v23 = 0;
    sub_20B45540C(v10, &v23);
    v5 = sub_20B50CE24((void **)&v21, v5, &v23) + 8;
    v11 = *v17;
    if (v11 == 2)
    {
      v19 += 16;
    }
    else if (v11 == 1)
    {
      v18 += 40;
    }
    else
    {
      ++v20;
    }
  }
  v12 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v12;
    operator delete(v12);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v21;
  *(_OWORD *)a2 = v21;
  *(_QWORD *)(a2 + 16) = v22;
  return result;
}

void sub_20B50E43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B50E45C(char *a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_20B452AD0(a1);
    sub_20AEC0D64(&v6, v5);
    sub_20B1F16DC("type must be array, but is ", &v6, &v7);
    sub_20B452958(302, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  return sub_20B50E560((unsigned __int8 *)a1, a2);
}

void sub_20B50E500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_20B50E560(unsigned __int8 *a1, uint64_t a2)
{
  int v4;
  char *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  int v11;
  void *v12;
  double result;
  unsigned __int8 *v14;
  uint64_t v15;
  __int128 v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v21 = 0uLL;
  v22 = 0;
  v4 = *a1;
  if (v4 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    if (v6)
      goto LABEL_6;
  }
  else
  {
    if (v4 != 1)
    {
      if (!*a1)
      {
        v5 = 0;
        v17 = a1;
        v18 = 0;
        v19 = 0;
        v20 = 0x8000000000000000;
        v20 = 1;
        goto LABEL_18;
      }
      v6 = 1;
      goto LABEL_12;
    }
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 3);
    if (v6)
    {
LABEL_6:
      if (v6 >> 61)
        sub_20AF6E1D0();
LABEL_12:
      v5 = (char *)operator new(8 * v6);
      *(_QWORD *)&v21 = v5;
      *((_QWORD *)&v21 + 1) = v5;
      v22 = &v5[8 * v6];
      v17 = a1;
      v18 = 0;
      v19 = 0;
      v20 = 0x8000000000000000;
      goto LABEL_13;
    }
  }
  v5 = 0;
  v17 = a1;
  v18 = 0;
  v19 = 0;
  v20 = 0x8000000000000000;
LABEL_13:
  if (v4 == 2)
  {
    v9 = (uint64_t *)*((_QWORD *)a1 + 1);
    v19 = *v9;
    v14 = a1;
    v15 = 0;
    *((_QWORD *)&v16 + 1) = 0x8000000000000000;
    *(_QWORD *)&v16 = v9[1];
    goto LABEL_20;
  }
  if (v4 == 1)
  {
    v7 = (uint64_t *)*((_QWORD *)a1 + 1);
    v18 = *v7;
    v16 = xmmword_20B60EF30;
    v8 = v7[1];
    v14 = a1;
    v15 = v8;
    goto LABEL_20;
  }
  v20 = 0;
LABEL_18:
  v14 = a1;
  v15 = 0;
  *(_QWORD *)&v16 = 0;
  *((_QWORD *)&v16 + 1) = 1;
LABEL_20:
  while (!sub_20B45609C(&v17, &v14))
  {
    v10 = sub_20B45619C((uint64_t)&v17);
    v23 = 0;
    sub_20B4552C4(v10, &v23);
    v5 = sub_20B50D4E0((void **)&v21, v5, &v23) + 8;
    v11 = *v17;
    if (v11 == 2)
    {
      v19 += 16;
    }
    else if (v11 == 1)
    {
      v18 += 40;
    }
    else
    {
      ++v20;
    }
  }
  v12 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v12;
    operator delete(v12);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v21;
  *(_OWORD *)a2 = v21;
  *(_QWORD *)(a2 + 16) = v22;
  return result;
}

void sub_20B50E778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B50E798(char *a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_20B452AD0(a1);
    sub_20AEC0D64(&v6, v5);
    sub_20B1F16DC("type must be array, but is ", &v6, &v7);
    sub_20B452958(302, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  return sub_20B50E89C((unsigned __int8 *)a1, a2);
}

void sub_20B50E83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_20B50E89C(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  unint64_t *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  unint64_t *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  double result;
  unsigned __int8 *v56;
  uint64_t v57;
  __int128 v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *__p;
  __int128 v64;
  char v65[16];
  void *__dst;
  __int128 v67;
  char *v68;
  int v69;

  __p = 0;
  v64 = 0uLL;
  v4 = *a1;
  if (*a1)
  {
    if ((_DWORD)v4 == 1)
    {
      v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 3);
    }
    else if ((_DWORD)v4 == 2)
    {
      v4 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    }
    else
    {
      v4 = 1;
    }
  }
  sub_20B45D3B8((uint64_t)&__p, v4);
  v59 = a1;
  v60 = 0;
  v61 = 0;
  v62 = 0x8000000000000000;
  v5 = *a1;
  if (!*a1)
  {
    v62 = 1;
LABEL_14:
    v56 = a1;
    v57 = 0;
    *(_QWORD *)&v58 = 0;
    *((_QWORD *)&v58 + 1) = 1;
    goto LABEL_15;
  }
  if (v5 == 2)
  {
    v8 = (uint64_t *)*((_QWORD *)a1 + 1);
    v61 = *v8;
    v56 = a1;
    v57 = 0;
    *((_QWORD *)&v58 + 1) = 0x8000000000000000;
    *(_QWORD *)&v58 = v8[1];
    goto LABEL_15;
  }
  if (v5 != 1)
  {
    v62 = 0;
    goto LABEL_14;
  }
  v6 = (uint64_t *)*((_QWORD *)a1 + 1);
  v60 = *v6;
  v58 = xmmword_20B60EF30;
  v7 = v6[1];
  v56 = a1;
  v57 = v7;
LABEL_15:
  v9 = (char *)__p + 8 * ((unint64_t)v64 >> 6);
  v10 = v64 & 0x3F;
  v11 = a2;
  while (!sub_20B45609C(&v59, &v56))
  {
    v12 = sub_20B45619C((uint64_t)&v59);
    LOBYTE(__dst) = 0;
    sub_20B4556BC(v12, &__dst);
    v13 = __dst;
    v14 = v64;
    if ((unint64_t)v64 < *((_QWORD *)&v64 + 1) << 6)
    {
      v15 = (char *)__p + 8 * ((unint64_t)v64 >> 6);
      v16 = v64 & 0x3F;
      v17 = v64 & 0x3F;
      *(_QWORD *)&v64 = v64 + 1;
      v18 = (unint64_t *)((char *)__p + 8 * ((unint64_t)(v14 + 1) >> 6));
      if ((v64 & 0x3F) == v16)
      {
        v19 = v17 - v10 + 8 * (v15 - v9);
        if (v19 >= 1)
        {
          if (v17)
          {
            if (v19 >= v17)
              v20 = v17;
            else
              v20 = v17 - v10 + 8 * (v15 - v9);
            v19 -= v20;
            v21 = (-1 << (v17 - v20)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v17);
            *v18 = *v18 & ~v21 | *(_QWORD *)v15 & v21;
          }
          if (v19 >= 0)
            v22 = v19;
          else
            v22 = v19 + 63;
          v23 = v22 >> 6;
          v24 = 8 * (v22 >> 6);
          v25 = &v18[v24 / 0xFFFFFFFFFFFFFFF8];
          v26 = &v15[-v24];
          if ((unint64_t)(v19 + 63) >= 0x7F)
            memmove(&v18[v24 / 0xFFFFFFFFFFFFFFF8], &v15[-v24], v24);
          v27 = v19 - (v23 << 6);
          a2 = v11;
          if (v27 >= 1)
            *(v25 - 1) = *(v25 - 1) & ~(-1 << -(char)v27) | *((_QWORD *)v26 - 1) & (-1 << -(char)v27);
        }
        v28 = (char *)__p;
        v29 = v10 + 8 * (v9 - (_BYTE *)__p);
        if (v29 >= 0)
        {
LABEL_34:
          v30 = (unint64_t)v29 >> 6;
LABEL_44:
          v33 = &v28[8 * v30];
          v34 = v29 & 0x3F;
          goto LABEL_70;
        }
      }
      else
      {
        __dst = v18;
        LODWORD(v67) = v64 & 0x3F;
        sub_20B50D850((uint64_t)&v68, (uint64_t)v9, v10, v15, v17, (uint64_t)&__dst);
        v28 = (char *)__p;
        v29 = v10 + 8 * (v9 - (_BYTE *)__p);
        if (v29 >= 0)
          goto LABEL_34;
      }
      v32 = v29 - 63;
      if (v29 - 63 < 0)
        v32 = v29;
      v30 = v32 >> 6;
      goto LABEL_44;
    }
    __dst = 0;
    v67 = 0uLL;
    if ((uint64_t)v64 + 1 < 0)
      sub_20B451A44();
    if (*((_QWORD *)&v64 + 1) << 6 > 0x3FFFFFFFFFFFFFFEuLL)
    {
      v31 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else if (*((_QWORD *)&v64 + 1) << 7 <= ((unint64_t)v64 & 0xFFFFFFFFFFFFFFC0) + 64)
    {
      v31 = (v64 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    else
    {
      v31 = *((_QWORD *)&v64 + 1) << 7;
    }
    sub_20B45D3B8((uint64_t)&__dst, v31);
    v35 = __p;
    *(_QWORD *)&v67 = v64 + 1;
    v33 = (char *)__dst;
    v36 = v10 + 8 * (v9 - (_BYTE *)__p);
    if (v36 < 1)
    {
      v34 = 0;
    }
    else
    {
      v37 = (unint64_t)v36 >> 6;
      if ((unint64_t)v36 >= 0x40)
        memmove(__dst, __p, 8 * v37);
      v33 += 8 * v37;
      v34 = v36 & 0x3F;
      if (v34)
        *(_QWORD *)v33 = *(_QWORD *)v33 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v34) | v35[v37] & (0xFFFFFFFFFFFFFFFFLL >> -(char)v34);
      a2 = v11;
    }
    v38 = (char *)__p + 8 * ((unint64_t)v64 >> 6);
    v39 = v64 & 0x3F;
    v40 = (unint64_t *)((char *)__dst + 8 * ((unint64_t)v67 >> 6));
    if ((v67 & 0x3F) == (v64 & 0x3F))
    {
      v41 = v39 - v10 + 8 * (v38 - v9);
      if (v41 >= 1)
      {
        if ((v64 & 0x3F) != 0)
        {
          if (v41 >= v39)
            v42 = v64 & 0x3F;
          else
            v42 = v39 - v10 + 8 * (v38 - v9);
          v41 -= v42;
          v43 = (-1 << (v39 - v42)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v39);
          *v40 = *v40 & ~v43 | *(_QWORD *)v38 & v43;
        }
        if (v41 >= 0)
          v44 = v41;
        else
          v44 = v41 + 63;
        v45 = v44 >> 6;
        v46 = 8 * (v44 >> 6);
        v47 = &v40[v46 / 0xFFFFFFFFFFFFFFF8];
        v48 = &v38[-v46];
        if ((unint64_t)(v41 + 63) >= 0x7F)
          memmove(&v40[v46 / 0xFFFFFFFFFFFFFFF8], &v38[-v46], v46);
        v49 = v41 - (v45 << 6);
        a2 = v11;
        if (v49 >= 1)
          *(v47 - 1) = *(v47 - 1) & ~(-1 << -(char)v49) | *((_QWORD *)v48 - 1) & (-1 << -(char)v49);
      }
    }
    else
    {
      v68 = (char *)__dst + 8 * ((unint64_t)v67 >> 6);
      v69 = v67 & 0x3F;
      sub_20B50D850((uint64_t)v65, (uint64_t)v9, v10, v38, v39, (uint64_t)&v68);
    }
    v50 = __p;
    __p = __dst;
    __dst = v50;
    v51 = v64;
    v64 = v67;
    v67 = v51;
    if (v50)
      operator delete(v50);
LABEL_70:
    v52 = 1 << v34;
    if (v13)
      v53 = *(_QWORD *)v33 | v52;
    else
      v53 = *(_QWORD *)v33 & ~v52;
    *(_QWORD *)v33 = v53;
    v9 = &v33[8 * (v34 == 63)];
    if (v34 == 63)
      v10 = 0;
    else
      v10 = v34 + 1;
    v54 = *v59;
    if (v54 == 2)
    {
      v61 += 16;
    }
    else if (v54 == 1)
    {
      v60 += 40;
    }
    else
    {
      ++v62;
    }
  }
  if (*(_QWORD *)a2)
  {
    operator delete(*(void **)a2);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_QWORD *)a2 = __p;
  result = *(double *)&v64;
  *(_OWORD *)(a2 + 8) = v64;
  return result;
}

void sub_20B50EDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_20B50EE28(unsigned __int8 *a1, void **a2)
{
  int v4;
  std::string::size_type *v5;
  std::string::size_type v6;
  std::string::size_type *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  int v11;
  void **v12;
  void **v13;
  void *v14;
  double result;
  void *exception;
  char *v17;
  unsigned __int8 *v18;
  std::string::size_type v19;
  __int128 v20;
  std::string v21;
  unint64_t v22;
  __int128 v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v17 = (char *)sub_20B452AD0((char *)a1);
    sub_20AEC0D64(&v18, v17);
    sub_20B1F16DC("type must be array, but is ", (std::string *)&v18, &v21);
    sub_20B452958(302, (uint64_t)&v21, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  v24 = 0;
  v23 = 0uLL;
  sub_20AECF88C((uint64_t)&v23, (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4);
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v21.__r_.__value_.__r.__words[2] = 0;
  v22 = 0x8000000000000000;
  v4 = *a1;
  if (*a1)
  {
    if (v4 == 2)
    {
      v7 = (std::string::size_type *)*((_QWORD *)a1 + 1);
      v21.__r_.__value_.__r.__words[2] = *v7;
      v18 = a1;
      v19 = 0;
      *((_QWORD *)&v20 + 1) = 0x8000000000000000;
      *(_QWORD *)&v20 = v7[1];
      goto LABEL_10;
    }
    if (v4 == 1)
    {
      v5 = (std::string::size_type *)*((_QWORD *)a1 + 1);
      v21.__r_.__value_.__l.__size_ = *v5;
      v20 = xmmword_20B60EF30;
      v6 = v5[1];
      v18 = a1;
      v19 = v6;
      goto LABEL_10;
    }
    v22 = 0;
  }
  else
  {
    v22 = 1;
  }
  v18 = a1;
  v19 = 0;
  *(_QWORD *)&v20 = 0;
  *((_QWORD *)&v20 + 1) = 1;
LABEL_10:
  v8 = *((_QWORD *)&v23 + 1);
  while (!sub_20B45609C((unsigned __int8 **)&v21, &v18))
  {
    v9 = (void **)sub_20B45619C((uint64_t)&v21);
    v25 = 0uLL;
    v26 = 0;
    sub_20B4557C4(v9, (uint64_t)&v25);
    v10 = sub_20B50DD88((uint64_t *)&v23, v8, &v25);
    if (SHIBYTE(v26) < 0)
    {
      operator delete((void *)v25);
      v11 = *v21.__r_.__value_.__l.__data_;
      if (v11 != 2)
      {
LABEL_13:
        if (v11 == 1)
          v21.__r_.__value_.__l.__size_ += 40;
        else
          ++v22;
        goto LABEL_18;
      }
    }
    else
    {
      v11 = *v21.__r_.__value_.__l.__data_;
      if (v11 != 2)
        goto LABEL_13;
    }
    v21.__r_.__value_.__r.__words[2] += 16;
LABEL_18:
    v8 = v10 + 24;
  }
  v12 = (void **)*a2;
  if (*a2)
  {
    v13 = (void **)a2[1];
    v14 = *a2;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v13 - 1) < 0)
          operator delete(*(v13 - 3));
        v13 -= 3;
      }
      while (v13 != v12);
      v14 = *a2;
    }
    a2[1] = v12;
    operator delete(v14);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  result = *(double *)&v23;
  *(_OWORD *)a2 = v23;
  a2[2] = v24;
  return result;
}

void sub_20B50F08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AEC2E90((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B50F0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v22 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (v22)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void ***sub_20B50F13C(void ***result)
{
  if (result)
  {
    sub_20B4181DC(result + 1, *(unsigned __int8 *)result);
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

_QWORD *sub_20B50F17C(_QWORD *a1, char *a2, char *a3)
{
  unint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 >> 60)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(16 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * v4]; v6 != a3; v7 += 2)
    {
      *(_BYTE *)v7 = 0;
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B50F21C(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B416E08(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B50F26C(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v4;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned int v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 >> 60)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(16 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * v4]; v6 != a3; v7 += 2)
    {
      *(_BYTE *)v7 = 0;
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B50F30C(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B416E08(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B50F35C(_QWORD *a1, __int16 *a2, __int16 *a3)
{
  uint64_t v4;
  __int16 *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(8 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 1)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B50F400(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B416E08(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B50F450(_QWORD *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v4;
  unsigned __int16 *v6;
  _QWORD *v7;
  unsigned int v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(8 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 1)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B50F4F4(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B416E08(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B50F544(_QWORD *a1, int *a2, int *a3)
{
  uint64_t v4;
  int *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x3FFFFFFFFFFFFFFDLL)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(4 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 2)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B50F5EC(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B416E08(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B50F63C(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  unsigned int v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x3FFFFFFFFFFFFFFDLL)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(4 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 2)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_DWORD *)v6;
      v6 += 4;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B50F6E4(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B416E08(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B50F734(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_QWORD *)v6;
      v6 += 8;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B50F7DC(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B416E08(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B50F82C(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_QWORD *)v6;
      v6 += 8;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B50F8D4(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B416E08(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B50F924(uint64_t a1, char *a2)
{
  void **v4;
  char *v5;
  char *result;
  void *exception;
  char *v8;
  std::string v9;
  std::string v10;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v8 = (char *)sub_20B452AD0((char *)a1);
      sub_20AEC0D64(&v9, v8);
      sub_20B1F16DC("cannot use push_back() with ", &v9, &v10);
      sub_20B452958(308, (uint64_t)&v10, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
    }
    v4 = *(void ***)(a1 + 8);
    v5 = (char *)v4[1];
    if (v5 < v4[2])
      goto LABEL_3;
  }
  else
  {
    *(_BYTE *)a1 = 2;
    v4 = (void **)operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = (char *)v4[1];
    if (v5 < v4[2])
    {
LABEL_3:
      *v5 = *a2;
      *((_QWORD *)v5 + 1) = *((_QWORD *)a2 + 1);
      *a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      result = v5 + 16;
      v4[1] = v5 + 16;
      return result;
    }
  }
  result = sub_20B417520(v4, a2);
  v4[1] = result;
  return result;
}

void sub_20B50FA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20B50FABC(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_QWORD *)v6;
      v6 += 8;
      *(_BYTE *)v7 = 7;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B50FB64(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B416E08(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B50FBB4(_QWORD *a1, char *a2, char *a3)
{
  unint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 >> 60)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(16 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * v4]; v6 != a3; v7 += 2)
    {
      *(_BYTE *)v7 = 0;
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B50FC54(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B4181DC(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B50FCA4(_QWORD *a1, char *a2, char *a3)
{
  unint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 >> 60)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(16 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * v4]; v6 != a3; v7 += 2)
    {
      *(_BYTE *)v7 = 0;
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B50FD44(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B4181DC(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B50FD94(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v4;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned int v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 >> 60)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(16 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * v4]; v6 != a3; v7 += 2)
    {
      *(_BYTE *)v7 = 0;
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B50FE34(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B4181DC(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B50FE84(_QWORD *a1, __int16 *a2, __int16 *a3)
{
  uint64_t v4;
  __int16 *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(8 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 1)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B50FF28(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B4181DC(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B50FF78(_QWORD *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v4;
  unsigned __int16 *v6;
  _QWORD *v7;
  unsigned int v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(8 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 1)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B51001C(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B4181DC(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B51006C(_QWORD *a1, int *a2, int *a3)
{
  uint64_t v4;
  int *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x3FFFFFFFFFFFFFFDLL)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(4 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 2)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B510114(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B4181DC(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B510164(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  unsigned int v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x3FFFFFFFFFFFFFFDLL)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(4 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 2)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_DWORD *)v6;
      v6 += 4;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B51020C(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B4181DC(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B51025C(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_QWORD *)v6;
      v6 += 8;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B510304(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B4181DC(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B510354(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_QWORD *)v6;
      v6 += 8;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B5103FC(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B4181DC(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B51044C(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_QWORD *)v6;
      v6 += 8;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B5104F4(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B4181DC(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B510544(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_QWORD *)v6;
      v6 += 8;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B5105EC(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B4181DC(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B51063C(uint64_t a1, char *a2)
{
  void **v4;
  char *v5;
  char *result;
  void *exception;
  char *v8;
  std::string v9;
  std::string v10;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v8 = (char *)sub_20B452AD0((char *)a1);
      sub_20AEC0D64(&v9, v8);
      sub_20B1F16DC("cannot use push_back() with ", &v9, &v10);
      sub_20B452958(308, (uint64_t)&v10, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
    }
    v4 = *(void ***)(a1 + 8);
    v5 = (char *)v4[1];
    if (v5 < v4[2])
      goto LABEL_3;
  }
  else
  {
    *(_BYTE *)a1 = 2;
    v4 = (void **)operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = (char *)v4[1];
    if (v5 < v4[2])
    {
LABEL_3:
      *v5 = *a2;
      *((_QWORD *)v5 + 1) = *((_QWORD *)a2 + 1);
      *a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      result = v5 + 16;
      v4[1] = v5 + 16;
      return result;
    }
  }
  result = sub_20B4188F0(v4, a2);
  v4[1] = result;
  return result;
}

void sub_20B510764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20B5107D4(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9)
      sub_20B41750C();
    v6 = a2;
    v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_QWORD *)v6;
      v6 += 8;
      *(_BYTE *)v7 = 7;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B51087C(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20B4181DC(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B5108CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  int v6;
  int v8;
  int v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  char *v16;
  char v17[8];
  void **v18;

  *(_BYTE *)a1 = 2;
  v4 = operator new(0x18uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  *(_QWORD *)(a1 + 8) = v4;
  sub_20B41880C((uint64_t)v4, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v5 & 0x3F;
  if (v5 > 0x3F || v6 != 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(unint64_t **)a2;
    v11 = *(_QWORD *)a2 + 8 * (v5 >> 6);
    do
    {
      v12 = *v10;
      v13 = *(_QWORD *)(a1 + 8);
      v17[0] = 4;
      v18 = (void **)((v12 >> v9) & 1);
      v14 = *(_QWORD *)(v13 + 8);
      if (v14 >= *(_QWORD *)(v13 + 16))
      {
        v16 = sub_20B4188F0((void **)v13, v17);
        v15 = v17[0];
      }
      else
      {
        v15 = 0;
        *(_BYTE *)v14 = 4;
        *(_QWORD *)(v14 + 8) = v18;
        v17[0] = 0;
        v18 = 0;
        v16 = (char *)(v14 + 16);
      }
      *(_QWORD *)(v13 + 8) = v16;
      sub_20B4181DC(&v18, v15);
      v10 += v8 == 63;
      if (v8 == 63)
        v9 = 0;
      else
        ++v9;
      v8 = v9;
    }
    while (v10 != (unint64_t *)v11 || v6 != v9);
  }
}

void sub_20B5109F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

char *sub_20B510A0C(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  __int128 v10;
  char *v11;
  char *v12;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      sub_20B41750C();
    result = (char *)operator new(16 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[16 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v11 = &v8[v9];
        *((_QWORD *)v11 + 1) = 0;
        *v11 = 3;
        result = (char *)operator new(0x18uLL);
        v12 = result;
        if (*((char *)a2 + 23) < 0)
        {
          result = (char *)sub_20AEC60F4(result, *(void **)a2, *((_QWORD *)a2 + 1));
        }
        else
        {
          v10 = *a2;
          *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
          *(_OWORD *)result = v10;
        }
        *((_QWORD *)v11 + 1) = v12;
        a2 = (__int128 *)((char *)a2 + 24);
        v9 += 16;
      }
      while (a2 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20B510AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20B454644(&a9);
  _Unwind_Resume(a1);
}

void sub_20B510B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  operator delete(v11);
  for (; v12; v12 -= 16)
    sub_20B4181DC((void ***)(v10 + v12 - 8), *(unsigned __int8 *)(v10 + v12 - 16));
  *(_QWORD *)(v9 + 8) = v10;
  sub_20B454644(&a9);
  _Unwind_Resume(a1);
}

float sub_20B510B54(uint64_t *a1)
{
  int v1;
  float v2;
  std::string __str;

  v1 = *(unsigned __int8 *)a1;
  if ((v1 - 5) <= 2)
  {
    __str.__r_.__value_.__r.__words[0] = 0;
    sub_20B454DBC(a1, (double *)&__str);
    return *(double *)&__str.__r_.__value_.__l.__data_;
  }
  if (v1 != 3)
    return NAN;
  memset(&__str, 0, sizeof(__str));
  sub_20B45502C((void **)a1, (uint64_t)&__str);
  v2 = std::stof(&__str, 0);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v2;
  operator delete(__str.__r_.__value_.__l.__data_);
  return v2;
}

void sub_20B510C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B510C34(uint64_t *a1)
{
  int v1;
  double v2;
  std::string __str;

  v1 = *(unsigned __int8 *)a1;
  if ((v1 - 5) <= 2)
  {
    __str.__r_.__value_.__r.__words[0] = 0;
    sub_20B454DBC(a1, (double *)&__str);
    return *(double *)&__str.__r_.__value_.__l.__data_;
  }
  if (v1 != 3)
    return NAN;
  memset(&__str, 0, sizeof(__str));
  sub_20B45502C((void **)a1, (uint64_t)&__str);
  v2 = std::stod(&__str, 0);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v2;
  operator delete(__str.__r_.__value_.__l.__data_);
  return v2;
}

void sub_20B510CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B510D10(unint64_t a1, uint64_t a2)
{
  std::string::size_type *v4;
  std::string::size_type v5;
  uint64_t v6;
  char *v7;
  std::string::size_type v8;
  uint64_t *v9;
  int v10;
  std::string::size_type size;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *v15;
  double result;
  void *exception;
  char *v18;
  std::string v19;
  unint64_t v20;
  std::string v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  uint64_t v25;

  if (*(_BYTE *)a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v18 = (char *)sub_20B452AD0((char *)a1);
    sub_20AEC0D64(&v19, v18);
    sub_20B1F16DC("type must be array, but is ", &v19, &v21);
    sub_20B452958(302, (uint64_t)&v21, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  v24 = 0;
  v23 = 0uLL;
  v4 = *(std::string::size_type **)(a1 + 8);
  v5 = v4[1];
  v6 = v5 - *v4;
  if (v5 == *v4)
  {
    v7 = 0;
    v8 = v4[1];
  }
  else
  {
    if (v6 < 0)
      sub_20AF6E1D0();
    v7 = (char *)operator new((unint64_t)v6 >> 1);
    *(_QWORD *)&v23 = v7;
    *((_QWORD *)&v23 + 1) = v7;
    v24 = &v7[8 * (v6 >> 4)];
    v8 = *v4;
    v5 = v4[1];
  }
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = a1;
  v21.__r_.__value_.__r.__words[2] = v8;
  v22 = 0x8000000000000000;
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = a1;
  v19.__r_.__value_.__r.__words[2] = v5;
  v20 = 0x8000000000000000;
  while (!sub_20B455B8C((unsigned __int8 **)&v21, (unsigned __int8 **)&v19))
  {
    v9 = (uint64_t *)sub_20B455E70((uint64_t)&v21);
    v25 = 0;
    sub_20B454DBC(v9, (double *)&v25);
    v7 = sub_20B510F8C((void **)&v23, v7, &v25) + 8;
    v10 = *v21.__r_.__value_.__l.__data_;
    if (v10 == 2)
    {
      v21.__r_.__value_.__r.__words[2] += 16;
    }
    else if (v10 == 1)
    {
      size = v21.__r_.__value_.__l.__size_;
      v12 = *(_QWORD **)(v21.__r_.__value_.__l.__size_ + 8);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = *(_QWORD **)(size + 16);
          v14 = *v13 == size;
          size = (std::string::size_type)v13;
        }
        while (!v14);
      }
      v21.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
    }
    else
    {
      ++v22;
    }
  }
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v15;
    operator delete(v15);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v23;
  *(_OWORD *)a2 = v23;
  *(_QWORD *)(a2 + 16) = v24;
  return result;
}

void sub_20B510EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B510F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v14);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

char *sub_20B510F8C(void **a1, _BYTE *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 3;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v11 >> 3;
    v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v17 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = v14 + v6 + 8;
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          v45 = (v16 >> 3) + 1;
          v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          v13 = (uint64_t *)((char *)v13 + v46);
          v17 = (_QWORD *)(v5 + v46);
          v47 = (_OWORD *)(v5 + 16);
          v48 = (__int128 *)(8 * v12 + 8 * v8 + v6 + 16);
          v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            *v47 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 4;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
      }
      else
      {
        v17 = a1[1];
      }
      do
      {
        v51 = *v13++;
        *v17++ = v51;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8)
      memmove((void *)(v5 - 8 * v12), v9, v11);
    *(_QWORD *)v9 = *a3;
    return v9;
  }
  v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61)
    sub_20AF6E1D0();
  v20 = v10 - v6;
  if (v20 >> 2 > v18)
    v18 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 61)
      sub_20AEC60CC();
    v22 = (char *)operator new(8 * v21);
    v23 = &v22[8 * v8];
    v24 = &v22[8 * v21];
    if (v8 != v21)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(8 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v44 = 1;
    else
      v44 = v7 >> 2;
    if (v44 >> 61)
      sub_20AEC60CC();
    v23 = (char *)operator new(8 * v44);
    v24 = &v23[8 * v44];
    if (v22)
    {
      operator delete(v22);
      v24 = &v23[8 * v44];
      v26 = (char *)*a1;
      *(_QWORD *)v23 = *a3;
      v27 = v23 + 8;
      v28 = v23;
      if (v26 != v9)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
  else
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  v26 = (char *)v6;
  *(_QWORD *)v23 = *a3;
  v27 = v23 + 8;
  v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v30 = v29 - v26 - 8;
    v31 = v9;
    v28 = v23;
    if (v30 < 0x58)
      goto LABEL_58;
    v31 = v9;
    v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20)
      goto LABEL_58;
    v32 = (v30 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v31 = &v9[-v33];
    v28 = &v23[-v33];
    v34 = v23 - 16;
    v35 = (__int128 *)(v6 + 8 * v8 - 16);
    v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v38 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *((_QWORD *)v28 - 1) = v38;
        v28 -= 8;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  v39 = (char *)a1[1];
  v40 = v39 - v9;
  if (v39 != v9)
  {
    v41 = v9;
    v42 = v39 - v9;
    v43 = v24;
    memmove(v27, v41, v42);
    v24 = v43;
    v26 = (char *)*a1;
  }
  *a1 = v28;
  a1[1] = &v27[v40];
  a1[2] = v24;
  if (v26)
    operator delete(v26);
  return v23;
}

void sub_20B5112E4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

float sub_20B5112FC(uint64_t *a1)
{
  int v1;
  float v2;
  std::string __str;

  v1 = *(unsigned __int8 *)a1;
  if ((v1 - 5) <= 2)
  {
    __str.__r_.__value_.__r.__words[0] = 0;
    sub_20B455554(a1, (double *)&__str);
    return *(double *)&__str.__r_.__value_.__l.__data_;
  }
  if (v1 != 3)
    return NAN;
  memset(&__str, 0, sizeof(__str));
  sub_20B4557C4((void **)a1, (uint64_t)&__str);
  v2 = std::stof(&__str, 0);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v2;
  operator delete(__str.__r_.__value_.__l.__data_);
  return v2;
}

void sub_20B5113BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B5113DC(uint64_t *a1)
{
  int v1;
  double v2;
  std::string __str;

  v1 = *(unsigned __int8 *)a1;
  if ((v1 - 5) <= 2)
  {
    __str.__r_.__value_.__r.__words[0] = 0;
    sub_20B455554(a1, (double *)&__str);
    return *(double *)&__str.__r_.__value_.__l.__data_;
  }
  if (v1 != 3)
    return NAN;
  memset(&__str, 0, sizeof(__str));
  sub_20B4557C4((void **)a1, (uint64_t)&__str);
  v2 = std::stod(&__str, 0);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v2;
  operator delete(__str.__r_.__value_.__l.__data_);
  return v2;
}

void sub_20B511498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20B5114B8(unint64_t a1, uint64_t a2)
{
  std::string::size_type *v4;
  std::string::size_type v5;
  std::string::size_type v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  double result;
  void *exception;
  char *v14;
  std::string v15;
  unint64_t v16;
  std::string v17;
  unint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;

  if (*(_BYTE *)a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v14 = (char *)sub_20B452AD0((char *)a1);
    sub_20AEC0D64(&v15, v14);
    sub_20B1F16DC("type must be array, but is ", &v15, &v17);
    sub_20B452958(302, (uint64_t)&v17, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41D9F0, (void (*)(void *))sub_20B452AF8);
  }
  v20 = 0;
  v19 = 0uLL;
  v4 = *(std::string::size_type **)(a1 + 8);
  v6 = *v4;
  v5 = v4[1];
  v7 = v5 - *v4;
  if (v5 == *v4)
  {
    v8 = 0;
  }
  else
  {
    if (v7 < 0)
      sub_20AF6E1D0();
    v8 = (char *)operator new((unint64_t)v7 >> 1);
    *(_QWORD *)&v19 = v8;
    *((_QWORD *)&v19 + 1) = v8;
    v20 = &v8[8 * (v7 >> 4)];
  }
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = a1;
  v17.__r_.__value_.__r.__words[2] = v6;
  v18 = 0x8000000000000000;
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = a1;
  v15.__r_.__value_.__r.__words[2] = v5;
  v16 = 0x8000000000000000;
  while (!sub_20B45609C((unsigned __int8 **)&v17, (unsigned __int8 **)&v15))
  {
    v9 = (uint64_t *)sub_20B45619C((uint64_t)&v17);
    v21 = 0;
    sub_20B455554(v9, (double *)&v21);
    v8 = sub_20B510F8C((void **)&v19, v8, &v21) + 8;
    v10 = *v17.__r_.__value_.__l.__data_;
    if (v10 == 2)
    {
      v17.__r_.__value_.__r.__words[2] += 16;
    }
    else if (v10 == 1)
    {
      v17.__r_.__value_.__l.__size_ += 40;
    }
    else
    {
      ++v18;
    }
  }
  v11 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v11;
    operator delete(v11);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v19;
  *(_OWORD *)a2 = v19;
  *(_QWORD *)(a2 + 16) = v20;
  return result;
}

void sub_20B511674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B5116CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v14);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B511704(_QWORD *a1, uint64_t *a2)
{
  int v3;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  std::string __p;

  v3 = *((_DWORD *)a2 + 2);
  v8 = *a2;
  v9 = v3;
  sub_20AF9E124((unsigned int *)&v8, &v10, ".", 1uLL, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  result = sub_20AEC01D0(a1, (uint64_t)p_p, size);
  v7 = result;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    return v7;
  }
  return result;
}

void sub_20B5117A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B5117C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  std::logic_error *exception;
  std::logic_error *v7;
  std::logic_error *v8;
  std::string v9;
  char v10;
  _QWORD v11[13];
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = 0uLL;
  v15 = 0;
  sub_20B1C68C0(a1, (uint64_t)&v14);
  sub_20AEC2AE0((uint64_t)v11, &v14, 24);
  v10 = 0;
  MEMORY[0x20BD35164](v11, a2);
  if (std::istream::peek() != 46)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20B511AA4(&v9, (uint64_t *)&v14);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  sub_20B511B44(v11, &v10);
  MEMORY[0x20BD35164](v11, a2 + 4);
  if (std::istream::peek() != 46)
  {
    v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20B511AA4(&v9, (uint64_t *)&v14);
    std::logic_error::logic_error(v7, &v9);
    v7->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v7, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  sub_20B511B44(v11, &v10);
  MEMORY[0x20BD35164](v11, a2 + 8);
  if ((*(_DWORD *)((_BYTE *)&v11[4] + *(_QWORD *)(v11[0] - 24)) & 3) != 2)
  {
    v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20B511AA4(&v9, (uint64_t *)&v14);
    std::logic_error::logic_error(v8, &v9);
    v8->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v8, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v11[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v11[2] = v4;
  v11[3] = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete((void *)v11[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](&v13);
  if (SHIBYTE(v15) < 0)
    operator delete((void *)v14);
  return a1;
}

void sub_20B511A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  void *v16;
  int v17;
  uint64_t v18;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v17)
  {
LABEL_6:
    sub_20AEC2E08((uint64_t)&a16);
    if (*(char *)(v18 - 49) < 0)
      operator delete(*(void **)(v18 - 72));
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_20B511AA4(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[6];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[1] = 26;
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = "'. Expected pattern 'major.minor.revision'";
  v4[5] = 42;
  sub_20AECFDF8((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

_QWORD *sub_20B511B44(_QWORD *a1, _BYTE *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  int v6;
  char v8;

  MEMORY[0x20BD3511C](&v8, a1, 0);
  if (v8)
  {
    v4 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v5 = (_BYTE *)v4[3];
    if (v5 == (_BYTE *)v4[4])
    {
      LODWORD(v4) = (*(uint64_t (**)(_QWORD *))(*v4 + 80))(v4);
      if ((_DWORD)v4 == -1)
      {
        v6 = 6;
        goto LABEL_6;
      }
    }
    else
    {
      v4[3] = v5 + 1;
      LOBYTE(v4) = *v5;
    }
    v6 = 0;
    *a2 = (_BYTE)v4;
LABEL_6:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v6);
  }
  return a1;
}

void sub_20B511BF0(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x20B511BBCLL);
  }
  __cxa_rethrow();
}

void sub_20B511C30(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B511C50()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B511C68()
{
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B511C84()
{
  return std::ostream::write();
}

uint64_t sub_20B511C90()
{
  return std::ostream::write();
}

uint64_t sub_20B511C9C()
{
  return std::ostream::write();
}

uint64_t sub_20B511CA8()
{
  return std::ostream::write();
}

uint64_t sub_20B511CB4()
{
  return std::ostream::write();
}

uint64_t sub_20B511CC0()
{
  return std::ostream::write();
}

uint64_t sub_20B511CCC()
{
  return std::ostream::write();
}

uint64_t sub_20B511CD8()
{
  return std::ostream::write();
}

uint64_t sub_20B511CE4()
{
  return std::ostream::write();
}

uint64_t sub_20B511CF0()
{
  return std::ostream::write();
}

uint64_t sub_20B511CFC()
{
  return std::ostream::write();
}

uint64_t sub_20B511D08()
{
  return std::ostream::write();
}

uint64_t sub_20B511D14()
{
  return std::ostream::write();
}

uint64_t sub_20B511D20()
{
  return std::ostream::write();
}

uint64_t sub_20B511D2C()
{
  std::ostream::write();
  return std::ostream::write();
}

uint64_t sub_20B511D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = a2;
    do
    {
      result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B511DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = a2;
    do
    {
      result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B511E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 2 * a2;
    do
    {
      result = std::ostream::write();
      a3 += 2;
      v4 -= 2;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B511E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 4 * a2;
    do
    {
      result = std::ostream::write();
      a3 += 4;
      v4 -= 4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B511EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 8 * a2;
    do
    {
      result = std::ostream::write();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B511F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 8 * a2;
    do
    {
      result = std::ostream::write();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B511F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = a2;
    do
    {
      result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B511FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = a2;
    do
    {
      result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B511FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 2 * a2;
    do
    {
      result = std::ostream::write();
      a3 += 2;
      v4 -= 2;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B512044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 4 * a2;
    do
    {
      result = std::ostream::write();
      a3 += 4;
      v4 -= 4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B512090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 8 * a2;
    do
    {
      result = std::ostream::write();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B5120DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 8 * a2;
    do
    {
      result = std::ostream::write();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B512128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 4 * a2;
    do
    {
      result = std::ostream::write();
      a3 += 4;
      v4 -= 4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B512174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 8 * a2;
    do
    {
      result = std::ostream::write();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B5121C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 24 * a2;
    do
    {
      std::ostream::write();
      result = std::ostream::write();
      a3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B51224C(uint64_t a1, uint64_t *a2)
{
  _QWORD *exception;
  uint64_t v4;

  v4 = *a2;
  std::ostream::write();
  if (v4 < 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  return std::ostream::write();
}

uint64_t sub_20B5122C4(uint64_t a1, uint64_t *a2)
{
  _QWORD *exception;
  uint64_t v4;

  v4 = *a2;
  std::ostream::write();
  if (v4 < 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  return std::ostream::write();
}

uint64_t sub_20B51234C()
{
  return std::istream::read();
}

uint64_t sub_20B512358()
{
  return std::istream::read();
}

uint64_t sub_20B512364()
{
  return std::istream::read();
}

uint64_t sub_20B512370()
{
  return std::istream::read();
}

uint64_t sub_20B51237C()
{
  return std::istream::read();
}

uint64_t sub_20B512388()
{
  return std::istream::read();
}

uint64_t sub_20B512394()
{
  return std::istream::read();
}

uint64_t sub_20B5123A0()
{
  return std::istream::read();
}

uint64_t sub_20B5123AC()
{
  return std::istream::read();
}

uint64_t sub_20B5123B8()
{
  return std::istream::read();
}

uint64_t sub_20B5123C4()
{
  return std::istream::read();
}

uint64_t sub_20B5123D0()
{
  return std::istream::read();
}

uint64_t sub_20B5123DC()
{
  return std::istream::read();
}

uint64_t sub_20B5123E8()
{
  return std::istream::read();
}

uint64_t sub_20B5123F4(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;

  std::istream::read();
  if (*(char *)(a2 + 23) < 0)
  {
    v3 = *(_BYTE **)a2;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 0;
    v3 = (_BYTE *)a2;
  }
  *v3 = 0;
  return std::istream::read();
}

uint64_t sub_20B5124A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = a2;
    do
    {
      result = std::istream::read();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B5124EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = a2;
    do
    {
      result = std::istream::read();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B512538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 2 * a2;
    do
    {
      result = std::istream::read();
      a3 += 2;
      v4 -= 2;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B512584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 4 * a2;
    do
    {
      result = std::istream::read();
      a3 += 4;
      v4 -= 4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B5125D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 8 * a2;
    do
    {
      result = std::istream::read();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B51261C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 8 * a2;
    do
    {
      result = std::istream::read();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B512668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = a2;
    do
    {
      result = std::istream::read();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B5126B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = a2;
    do
    {
      result = std::istream::read();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B512700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 2 * a2;
    do
    {
      result = std::istream::read();
      a3 += 2;
      v4 -= 2;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B51274C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 4 * a2;
    do
    {
      result = std::istream::read();
      a3 += 4;
      v4 -= 4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B512798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 8 * a2;
    do
    {
      result = std::istream::read();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B5127E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 8 * a2;
    do
    {
      result = std::istream::read();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B512830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 4 * a2;
    do
    {
      result = std::istream::read();
      a3 += 4;
      v4 -= 4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B51287C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a2)
  {
    v4 = 8 * a2;
    do
    {
      result = std::istream::read();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B5128C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  _BYTE *v6;

  if (a2)
  {
    v4 = 24 * a2;
    do
    {
      std::istream::read();
      if (*(char *)(a3 + 23) < 0)
      {
        v6 = *(_BYTE **)a3;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)(a3 + 23) = 0;
        v6 = (_BYTE *)a3;
      }
      *v6 = 0;
      result = std::istream::read();
      a3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B512998(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  std::logic_error *exception;
  _DWORD v6[6];
  int v7;
  std::string v8;
  std::string *v9;
  std::string v10;
  std::string *v11;
  std::string *v12;

  std::istream::read();
  v3 = *a2;
  if (*a2)
  {
    v7 = 0;
    sub_20AF86A14(v6, "Size mismatch between the input archive (");
    std::to_string(&v8, v3);
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    v10.__r_.__value_.__l.__size_ = (std::string::size_type)&v8;
    v10.__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
    v11 = &v8;
    v12 = &v8;
    if (v7 == -1)
      sub_20AECFAB8();
    v9 = &v10;
    ((void (*)(std::string **, _DWORD *))off_24C41ED98[v7])(&v9, v6);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    v10.__r_.__value_.__l.__size_ = (std::string::size_type)") and the input blob (";
    v10.__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
    v11 = (std::string *)") and the input blob (";
    v12 = (std::string *)") and the input blob (";
    if (v7 == -1)
      sub_20AECFAB8();
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
    ((void (*)(std::string *, _DWORD *))off_24C41EDB0[v7])(&v8, v6);
    std::to_string(&v8, 0);
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    v10.__r_.__value_.__l.__size_ = (std::string::size_type)&v8;
    v10.__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
    v11 = &v8;
    v12 = &v8;
    if (v7 == -1)
      sub_20AECFAB8();
    v9 = &v10;
    ((void (*)(std::string **, _DWORD *))off_24C41ED98[v7])(&v9, v6);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    v10.__r_.__value_.__l.__size_ = (std::string::size_type)")";
    v10.__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
    v11 = (std::string *)")";
    v12 = (std::string *)")";
    if (v7 == -1)
      sub_20AECFAB8();
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
    ((void (*)(std::string *, _DWORD *))off_24C41EDC8[v7])(&v8, v6);
    if (v7 == -1)
      sub_20AECFAB8();
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
    ((void (*)(std::string *__return_ptr, std::string *, _DWORD *))off_24C41EDE0[v7])(&v10, &v8, v6);
    if (v7 != -1)
      ((void (*)(std::string *, _DWORD *))off_24C41ED80[v7])(&v8, v6);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  return std::istream::read();
}

void sub_20B512C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, int a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B512CCC(uint64_t a1, char *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  unsigned __int8 v9;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    LOBYTE(__p[0]) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v4, (uint64_t)__p, 1);
  }
  v5 = *(_QWORD **)(a1 + 24);
  sub_20B512D88(a2);
  if ((v9 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v7 = v9;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v5, (uint64_t)v6, v7);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  ++*(_QWORD *)(a1 + 40);
}

void sub_20B512D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B512D88(char *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_20AED65E8)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_20AECFAB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C41F190[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C41F130[v3])(v5, v2);
  return result;
}

void sub_20B512E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B512E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20B512EB0(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  unsigned __int8 v9;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    LOBYTE(__p[0]) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v4, (uint64_t)__p, 1);
  }
  v5 = *(_QWORD **)(a1 + 24);
  sub_20B2DA93C(a2);
  if ((v9 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v7 = v9;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v5, (uint64_t)v6, v7);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  ++*(_QWORD *)(a1 + 40);
}

void sub_20B512F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B512F6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10[2];
  unsigned __int8 v11;
  std::string __p;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v4, (uint64_t)&__p, 1);
  }
  v5 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = 34;
  v6 = sub_20AEC01D0(v5, (uint64_t)&__p, 1);
  if (*(char *)(a2 + 23) < 0)
    sub_20AEC60F4(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  sub_20B52B814(&__p, "\"", 1, "\"\"", 2uLL, 0, 0, (uint64_t)v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v11 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (void **)v10[0];
  if ((v11 & 0x80u) == 0)
    v8 = v11;
  else
    v8 = (uint64_t)v10[1];
  v9 = sub_20AEC01D0(v6, (uint64_t)v7, v8);
  __p.__r_.__value_.__s.__data_[0] = 34;
  sub_20AEC01D0(v9, (uint64_t)&__p, 1);
  if ((char)v11 < 0)
    operator delete(v10[0]);
  ++*(_QWORD *)(a1 + 40);
}

void sub_20B513090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B5130C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *__p[2];
  char v9;

  v2 = *a2;
  if (*a2)
  {
    v4 = (unsigned __int8 *)a2[1];
    v5 = *(_QWORD *)(a1 + 40);
    do
    {
      if (v5)
      {
        v6 = *(_QWORD **)(a1 + 24);
        LOBYTE(__p[0]) = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v6, (uint64_t)__p, 1);
      }
      v7 = *(_QWORD **)(a1 + 24);
      __p[0] = (void *)*v4;
      v9 = 1;
      sub_20AEC01D0(v7, (uint64_t)__p, 1);
      if (v9 < 0)
        operator delete(__p[0]);
      v5 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v5;
      ++v4;
      --v2;
    }
    while (v2);
  }
}

void sub_20B513168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B513184(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;

  if (*a2)
  {
    v2 = result;
    v3 = a2[1];
    v4 = *(_QWORD *)(result + 40);
    v5 = 2 * *a2;
    do
    {
      if (v4)
      {
        v6 = *(_QWORD **)(v2 + 24);
        v7 = *(_BYTE *)(v2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v7, 1);
      }
      v3 += 2;
      result = std::ostream::operator<<();
      v4 = *(_QWORD *)(v2 + 40) + 1;
      *(_QWORD *)(v2 + 40) = v4;
      v5 -= 2;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_20B513208(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;

  if (*a2)
  {
    v2 = result;
    v3 = a2[1];
    v4 = *(_QWORD *)(result + 40);
    v5 = 4 * *a2;
    do
    {
      if (v4)
      {
        v6 = *(_QWORD **)(v2 + 24);
        v7 = *(_BYTE *)(v2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v7, 1);
      }
      *(_QWORD *)(*(_QWORD *)(v2 + 24) + *(_QWORD *)(**(_QWORD **)(v2 + 24) - 24) + 16) = 9;
      v3 += 4;
      result = std::ostream::operator<<();
      v4 = *(_QWORD *)(v2 + 40) + 1;
      *(_QWORD *)(v2 + 40) = v4;
      v5 -= 4;
    }
    while (v5);
  }
  return result;
}

void sub_20B5132A0(uint64_t a1, std::string::size_type *a2)
{
  _QWORD *v4;
  std::string::size_type v5;
  const void *v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16[2];
  unsigned __int8 v17;
  std::string __dst;
  std::string __p;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v4, (uint64_t)&__p, 1);
  }
  v5 = *a2;
  if (*a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = (const void *)a2[1];
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_10:
    memmove(p_dst, v6, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v10 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = 34;
  v11 = sub_20AEC01D0(v10, (uint64_t)&__p, 1);
  v12 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    __p = __dst;
  sub_20B52B814(&__p, "\"", 1, "\"\"", 2uLL, 0, 0, (uint64_t)v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v17 & 0x80u) == 0)
    v13 = v16;
  else
    v13 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v14 = v17;
  else
    v14 = (uint64_t)v16[1];
  v15 = sub_20AEC01D0(v11, (uint64_t)v13, v14);
  __p.__r_.__value_.__s.__data_[0] = 34;
  sub_20AEC01D0(v15, (uint64_t)&__p, 1);
  if ((char)v17 < 0)
  {
    operator delete(v16[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_24;
LABEL_26:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_24;
  }
  if (v12 < 0)
    goto LABEL_26;
LABEL_24:
  ++*(_QWORD *)(a1 + 40);
}

void sub_20B513458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  char v26;

  if (v26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B5134A8(uint64_t a1, std::string::size_type *a2)
{
  _QWORD *v4;
  std::string::size_type v5;
  const void *v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16[2];
  unsigned __int8 v17;
  std::string __dst;
  std::string __p;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v4, (uint64_t)&__p, 1);
  }
  v5 = *a2;
  if (*a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = (const void *)a2[1];
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_10:
    memmove(p_dst, v6, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v10 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = 34;
  v11 = sub_20AEC01D0(v10, (uint64_t)&__p, 1);
  v12 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    __p = __dst;
  sub_20B52B814(&__p, "\"", 1, "\"\"", 2uLL, 0, 0, (uint64_t)v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v17 & 0x80u) == 0)
    v13 = v16;
  else
    v13 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v14 = v17;
  else
    v14 = (uint64_t)v16[1];
  v15 = sub_20AEC01D0(v11, (uint64_t)v13, v14);
  __p.__r_.__value_.__s.__data_[0] = 34;
  sub_20AEC01D0(v15, (uint64_t)&__p, 1);
  if ((char)v17 < 0)
  {
    operator delete(v16[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_24;
LABEL_26:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_24;
  }
  if (v12 < 0)
    goto LABEL_26;
LABEL_24:
  ++*(_QWORD *)(a1 + 40);
}

void sub_20B513660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  char v26;

  if (v26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B5136B0(uint64_t a1, _BYTE *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20B5166E8(a1, v4))
  {
    sub_20B51680C(a1, (uint64_t)&v21);
    sub_20AEC2AE0((uint64_t)v14, &v21, 24);
    sub_20B511B44(v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20B2D6C14(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B5138D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AEC2E08((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20B513904(uint64_t a1, _BYTE *a2)
{
  int v4;
  const char *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  const char *p_p;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  void *__p;
  uint64_t v22;
  unsigned __int8 v23;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20B5166E8(a1, v4))
  {
    sub_20B51680C(a1, (uint64_t)&__p);
    if ((v23 & 0x80u) == 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v14 = strtol(p_p, 0, 10);
    v15 = 127;
    if (v14 < 127)
      v15 = v14;
    if (v15 <= -128)
      LODWORD(v15) = -128;
    *a2 = v15;
    if (!(_DWORD)v15)
    {
      v16 = (v23 & 0x80u) == 0 ? &__p : (void **)__p;
      v17 = (v23 & 0x80u) == 0 ? v23 : v22;
      if (v17)
      {
        v18 = MEMORY[0x24BDAC740];
        while (1)
        {
          v19 = *(char *)v16;
          if (!((v19 & 0x80000000) != 0 ? __maskrune(v19, 0x500uLL) : *(_DWORD *)(v18 + 4 * v19 + 60) & 0x500))
            break;
          v16 = (void **)((char *)v16 + 1);
          if (!--v17)
            goto LABEL_35;
        }
        *(_BYTE *)(a1 + 130) = 1;
      }
    }
LABEL_35:
    if ((char)v23 < 0)
      operator delete(__p);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(__p) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = __p;
    sub_20B2D6C14(v5, (uint64_t)&__p);
    v7 = v23;
    if ((v23 & 0x80u) == 0)
      v8 = (unsigned __int8 *)&__p;
    else
      v8 = (unsigned __int8 *)__p;
    if ((v23 & 0x80u) != 0)
      v7 = v22;
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *v8++;
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if (((char)v23 & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if (((char)v23 & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(__p);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B513B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B513B4C(uint64_t a1, _BYTE *a2)
{
  int v4;
  const char *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  const char *p_p;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  void *__p;
  uint64_t v22;
  unsigned __int8 v23;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20B5166E8(a1, v4))
  {
    sub_20B51680C(a1, (uint64_t)&__p);
    if ((v23 & 0x80u) == 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v14 = strtol(p_p, 0, 10);
    v15 = 255;
    if (v14 < 255)
      v15 = v14;
    *a2 = v15 & ~(v15 >> 63);
    if (v15 <= 0)
    {
      v16 = (v23 & 0x80u) == 0 ? &__p : (void **)__p;
      v17 = (v23 & 0x80u) == 0 ? v23 : v22;
      if (v17)
      {
        v18 = MEMORY[0x24BDAC740];
        while (1)
        {
          v19 = *(char *)v16;
          if (!((v19 & 0x80000000) != 0 ? __maskrune(v19, 0x500uLL) : *(_DWORD *)(v18 + 4 * v19 + 60) & 0x500))
            break;
          v16 = (void **)((char *)v16 + 1);
          if (!--v17)
            goto LABEL_33;
        }
        *(_BYTE *)(a1 + 130) = 1;
      }
    }
LABEL_33:
    if ((char)v23 < 0)
      operator delete(__p);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(__p) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = __p;
    sub_20B2D6C14(v5, (uint64_t)&__p);
    v7 = v23;
    if ((v23 & 0x80u) == 0)
      v8 = (unsigned __int8 *)&__p;
    else
      v8 = (unsigned __int8 *)__p;
    if ((v23 & 0x80u) != 0)
      v7 = v22;
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *v8++;
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if (((char)v23 & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if (((char)v23 & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(__p);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B513D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B513D94(uint64_t a1, _WORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20B5166E8(a1, v4))
  {
    sub_20B51680C(a1, (uint64_t)&v21);
    sub_20AEC2AE0((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD35188](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20B2D6C14(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B513FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AEC2E08((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20B513FE8(uint64_t a1, _WORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20B5166E8(a1, v4))
  {
    sub_20B51680C(a1, (uint64_t)&v21);
    sub_20AEC2AE0((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD35194](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20B2D6C14(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B514210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AEC2E08((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20B51423C(uint64_t a1, _DWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20B5166E8(a1, v4))
  {
    sub_20B51680C(a1, (uint64_t)&v21);
    sub_20AEC2AE0((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD35158](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20B2D6C14(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B514464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AEC2E08((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20B514490(uint64_t a1, _DWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20B5166E8(a1, v4))
  {
    sub_20B51680C(a1, (uint64_t)&v21);
    sub_20AEC2AE0((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD35164](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20B2D6C14(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B5146B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AEC2E08((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20B5146E4(uint64_t a1, _QWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20B5166E8(a1, v4))
  {
    sub_20B51680C(a1, (uint64_t)&v21);
    sub_20AEC2AE0((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD35170](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20B2D6C14(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B51490C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AEC2E08((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20B514938(uint64_t a1, _QWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20B5166E8(a1, v4))
  {
    sub_20B51680C(a1, (uint64_t)&v21);
    sub_20AEC2AE0((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD3517C](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20B2D6C14(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B514B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AEC2E08((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20B514B8C(uint64_t a1, _QWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20B5166E8(a1, v4))
  {
    sub_20B51680C(a1, (uint64_t)&v21);
    sub_20AEC2AE0((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD351A0](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20B2D6C14(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B514DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AEC2E08((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20B514DE0(uint64_t a1, _QWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20B5166E8(a1, v4))
  {
    sub_20B51680C(a1, (uint64_t)&v21);
    sub_20AEC2AE0((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD351AC](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20B2D6C14(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B515008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AEC2E08((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20B515034(uint64_t a1, _WORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  _QWORD *v13;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[56];
  void *__p;
  char v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  double v28;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20B5166E8(a1, v4))
  {
    sub_20B51680C(a1, (uint64_t)&v26);
    sub_20AEC2AE0((uint64_t)v19, &v26, 24);
    v28 = 0.0;
    v13 = (_QWORD *)MEMORY[0x20BD35140](v19, &v28);
    if ((*((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 32) & 5) == 0)
    {
      _S0 = v28;
      __asm { FCVT            H0, S0 }
      *a2 = LOWORD(_S0);
    }
    if ((v22[*((_QWORD *)v19[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v19[0] = *(void **)MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v19 + *((_QWORD *)v19[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v20 = v18;
    v21 = MEMORY[0x24BEDB848] + 16;
    if (v24 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](&v25);
    if (v27 < 0)
      operator delete((void *)v26);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v19[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v19[0]);
    sub_20B2D6C14(v5, (uint64_t)v19);
    v7 = (char *)HIBYTE(v20);
    if (v20 >= 0)
      v8 = v19;
    else
      v8 = (void **)v19[0];
    if (v20 < 0)
      v7 = (char *)v19[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v20) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v20) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v19[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B515284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC2E08((uint64_t)va);
  if (*(char *)(v2 - 41) < 0)
    operator delete(*(void **)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_20B5152B0(uint64_t a1, _DWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20B5166E8(a1, v4))
  {
    sub_20B51680C(a1, (uint64_t)&v21);
    sub_20AEC2AE0((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD3514C](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20B2D6C14(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B5154D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AEC2E08((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20B515504(uint64_t a1, _QWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20B5166E8(a1, v4))
  {
    sub_20B51680C(a1, (uint64_t)&v21);
    sub_20AEC2AE0((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD35140](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20B2D6C14(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B51572C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AEC2E08((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20B515758(uint64_t a1, _BYTE *a2)
{
  int v4;
  const char *v5;
  int v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  int v10;
  BOOL v11;
  std::string *p_p;
  int v14;
  std::string::size_type v15;
  std::string::size_type size;
  std::string::value_type v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::value_type v20;
  std::string::size_type v21;
  std::string *v22;
  unsigned int v23;
  int v24;
  _BOOL4 v25;
  std::string __p;
  std::string v27;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20B5166E8(a1, v4))
  {
    p_p = &__p;
    sub_20B51680C(a1, (uint64_t)&__p);
    v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v15 = __p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    memset(&v27, 0, sizeof(v27));
    std::string::reserve(&v27, size);
    if (v14 < 0)
      p_p = (std::string *)v15;
    for (; size; --size)
    {
      v17 = __tolower(p_p->__r_.__value_.__s.__data_[0]);
      std::string::push_back(&v27, v17);
      p_p = (std::string *)((char *)p_p + 1);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    else
      v18 = v27.__r_.__value_.__l.__size_;
    if (v18)
    {
      if (v18 == 1)
      {
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v27;
        else
          v19 = (std::string *)v27.__r_.__value_.__r.__words[0];
        if (v19->__r_.__value_.__s.__data_[0] == 48)
          goto LABEL_68;
      }
      else if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v19 = &v27;
      }
      else
      {
        v19 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      memset(&__p, 0, sizeof(__p));
      std::string::reserve(&__p, v18);
      do
      {
        v20 = __tolower(v19->__r_.__value_.__s.__data_[0]);
        std::string::push_back(&__p, v20);
        v19 = (std::string *)((char *)v19 + 1);
        --v18;
      }
      while (v18);
      v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = __p.__r_.__value_.__l.__size_;
      if (v21 == 5)
      {
        v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &__p;
        v23 = bswap32(v22->__r_.__value_.__l.__data_);
        if (v23 == 1717660787)
        {
          v24 = v22->__r_.__value_.__s.__data_[4] - 101;
        }
        else if (v23 < 0x66616C73)
        {
          v24 = -1;
        }
        else
        {
          v24 = 1;
        }
        v25 = v24 == 0;
      }
      else
      {
        v25 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v25)
      {
        *a2 = 1;
        if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_26;
        goto LABEL_71;
      }
    }
LABEL_68:
    *a2 = 0;
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
LABEL_71:
    operator delete(v27.__r_.__value_.__l.__data_);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    v27.__r_.__value_.__s.__data_[0] = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = v27.__r_.__value_.__s.__data_[0];
    sub_20B2D6C14(v5, (uint64_t)&v27);
    v7 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v27;
    else
      v8 = (std::string *)v27.__r_.__value_.__r.__words[0];
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = v27.__r_.__value_.__l.__size_;
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = v8->__r_.__value_.__s.__data_[0];
        v8 = (std::string *)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v27.__r_.__value_.__l.__data_);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B515A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B515AB4(uint64_t a1, uint64_t *a2, uint64_t a3, __int16 a4, __int16 a5, __int16 a6)
{
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  char v10;
  void *__p;
  char v13;
  void *v14;
  char v15;

  *(_QWORD *)a1 = off_24C41E9F8;
  v7 = *a2;
  *(_QWORD *)a1 = &off_24C41EE08;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = &unk_24C41EF58;
  *(_QWORD *)(a1 + 24) = a3;
  if ((a4 & 0xFF00) != 0)
    v8 = a4;
  else
    v8 = 44;
  *(_BYTE *)(a1 + 32) = v8;
  if ((a5 & 0xFF00) != 0)
    v9 = a5;
  else
    v9 = 10;
  *(_BYTE *)(a1 + 33) = v9;
  if ((a6 & 0xFF00) != 0)
    v10 = a6;
  else
    v10 = 124;
  *(_BYTE *)(a1 + 34) = v10;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v15 = 1;
  LOWORD(v14) = v8;
  v13 = 1;
  LOWORD(__p) = v9;
  sub_20B515BD8((char *)&v14, (char *)&__p, v10);
  if (v13 < 0)
  {
    operator delete(__p);
    if ((v15 & 0x80000000) == 0)
      return a1;
  }
  else if ((v15 & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v14);
  return a1;
}

void sub_20B515B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *sub_20B515BD8(char *a1, char *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  void *v8;
  void **v9;
  char *v10;
  unint64_t v11;
  char v12;
  void *v13;
  void **v14;
  char *v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  size_t v21;
  char v22;
  char *v23;
  char *v24;
  char *v25;
  size_t v26;
  char *v27;
  int v28;
  char *v29;
  size_t v30;
  char v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  size_t v36;
  size_t v37;
  char *result;
  char *v39;
  std::logic_error *v40;
  std::logic_error *v41;
  std::logic_error *exception;
  std::logic_error *v43;
  std::logic_error *v44;
  std::logic_error *v45;
  int __c;
  std::string v47;
  void *__dst[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  const char *v53;

  v52 = a3;
  if (a1[23] < 0)
  {
    sub_20AEC60F4(__p, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v51 = *((_QWORD *)a1 + 2);
  }
  v6 = HIBYTE(v51);
  v7 = HIBYTE(v51);
  v8 = __p[1];
  if (v51 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if (v51 >= 0)
    v10 = (char *)HIBYTE(v51);
  else
    v10 = (char *)__p[1];
  if (v10)
  {
    do
    {
      sub_20B51746C(*(char *)v9, (uint64_t)"separator");
      v9 = (void **)((char *)v9 + 1);
      --v10;
    }
    while (v10);
    v6 = HIBYTE(v51);
    v8 = __p[1];
    v7 = HIBYTE(v51);
  }
  if (v7 < 0)
    v6 = (unint64_t)v8;
  if (!v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Must at least have one separator.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if ((a2[23] & 0x80000000) == 0)
  {
LABEL_18:
    *(_OWORD *)__dst = *(_OWORD *)a2;
    v49 = *((_QWORD *)a2 + 2);
    goto LABEL_21;
  }
  sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
LABEL_21:
  v11 = HIBYTE(v49);
  v12 = HIBYTE(v49);
  v13 = __dst[1];
  if (v49 >= 0)
    v14 = __dst;
  else
    v14 = (void **)__dst[0];
  if (v49 >= 0)
    v15 = (char *)HIBYTE(v49);
  else
    v15 = (char *)__dst[1];
  if (v15)
  {
    do
    {
      sub_20B51746C(*(char *)v14, (uint64_t)"separator");
      v14 = (void **)((char *)v14 + 1);
      --v15;
    }
    while (v15);
    v11 = HIBYTE(v49);
    v13 = __dst[1];
    v12 = HIBYTE(v49);
  }
  if (v12 < 0)
    v11 = (unint64_t)v13;
  if (!v11)
  {
    v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v43, "Must at least have one separator.");
    v43->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v43, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (v12 < 0)
    operator delete(__dst[0]);
  sub_20B51746C(a3, (uint64_t)"field end marker");
  v16 = a1[23];
  __c = a3;
  if (a1[23] < 0)
  {
    v17 = *(char **)a1;
    v18 = *((_QWORD *)a1 + 1);
    v19 = a2[23];
    if (!v18)
      goto LABEL_50;
  }
  else
  {
    v17 = a1;
    v18 = a1[23];
    v19 = a2[23];
    if (!a1[23])
      goto LABEL_50;
  }
  if ((v19 & 0x80u) == 0)
    v20 = a2;
  else
    v20 = *(char **)a2;
  if ((v19 & 0x80u) == 0)
    v21 = v19;
  else
    v21 = *((_QWORD *)a2 + 1);
  do
  {
    v22 = *v17;
    v23 = (char *)memchr(v20, *v17, v21);
    if (v23)
      v24 = v23;
    else
      v24 = &v20[v21];
    if (v24 - v20 != v21)
    {
      v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      LOBYTE(v53) = v22;
      sub_20B517C94((uint64_t)&v47, (unsigned __int8 *)&v53);
      std::logic_error::logic_error(v40, &v47);
      v40->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(v40, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    ++v17;
    --v18;
  }
  while (v18);
LABEL_50:
  if ((v19 & 0x80) == 0)
  {
    v25 = a2;
    v26 = v19;
    v27 = *(char **)a1;
    v28 = (char)v16;
    if (v19)
      goto LABEL_52;
LABEL_65:
    if (v28 >= 0)
      v29 = a1;
    else
      v29 = v27;
    if (v28 >= 0)
      v30 = v16;
    else
      v30 = *((_QWORD *)a1 + 1);
    goto LABEL_71;
  }
  v25 = *(char **)a2;
  v26 = *((_QWORD *)a2 + 1);
  v27 = *(char **)a1;
  v28 = (char)v16;
  if (!v26)
    goto LABEL_65;
LABEL_52:
  if (v28 >= 0)
    v29 = a1;
  else
    v29 = v27;
  if (v28 >= 0)
    v30 = v16;
  else
    v30 = *((_QWORD *)a1 + 1);
  do
  {
    v31 = *v25;
    v32 = (char *)memchr(v29, *v25, v30);
    if (v32)
      v33 = v32;
    else
      v33 = &v29[v30];
    if (v33 - v29 != v30)
    {
      v41 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      LOBYTE(v53) = v31;
      sub_20B517C94((uint64_t)&v47, (unsigned __int8 *)&v53);
      std::logic_error::logic_error(v41, &v47);
      v41->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(v41, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    ++v25;
    --v26;
  }
  while (v26);
LABEL_71:
  v34 = (char *)memchr(v29, __c, v30);
  if (v34)
    v35 = v34;
  else
    v35 = &v29[v30];
  if (v35 - v29 != v30)
  {
    v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v53 = "field";
    sub_20B517E30((uint64_t)&v47, &v52, (const char *)&v53);
    std::logic_error::logic_error(v44, &v47);
    v44->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v44, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v36 = *((_QWORD *)a2 + 1);
  if ((v19 & 0x80u) == 0)
  {
    v37 = v19;
  }
  else
  {
    a2 = *(char **)a2;
    v37 = v36;
  }
  result = (char *)memchr(a2, __c, v37);
  if (result)
    v39 = result;
  else
    v39 = &a2[v37];
  if (v39 - a2 != v37)
  {
    v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v53 = "row";
    sub_20B517E30((uint64_t)&v47, &v52, (const char *)&v53);
    std::logic_error::logic_error(v45, &v47);
    v45->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v45, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return result;
}

void sub_20B5160E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v29)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v28);
  _Unwind_Resume(exception_object);
}

void sub_20B5161E8()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B5161FC()
{
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B516214(uint64_t a1)
{
  char v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  char v6;
  char v7;

  v2 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = *(_QWORD **)(a1 + 24);
    v6 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v3, (uint64_t)&v6, 1);
  }
  v4 = *(_QWORD **)(a1 + 24);
  v7 = v2;
  result = sub_20AEC01D0(v4, (uint64_t)&v7, 1);
  ++*(_QWORD *)(a1 + 40);
  return result;
}

_QWORD *sub_20B51627C(uint64_t a1)
{
  char v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  char v6;
  char v7;

  v2 = *(_BYTE *)(a1 + 18);
  if (*(_QWORD *)(a1 + 24))
  {
    v3 = *(_QWORD **)(a1 + 8);
    v6 = *(_BYTE *)(a1 + 16);
    sub_20AEC01D0(v3, (uint64_t)&v6, 1);
  }
  v4 = *(_QWORD **)(a1 + 8);
  v7 = v2;
  result = sub_20AEC01D0(v4, (uint64_t)&v7, 1);
  ++*(_QWORD *)(a1 + 24);
  return result;
}

uint64_t sub_20B5162E4(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4, __int128 *a5, __int16 a6, char a7)
{
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  void *__p[2];
  uint64_t v19;
  void *__dst[2];
  uint64_t v21;

  *(_QWORD *)a1 = off_24C41E9F8;
  v11 = *a2;
  *(_QWORD *)a1 = off_24C41EF88;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = a3;
  v12 = a1 + 24;
  if (*((_BYTE *)a4 + 24))
  {
    if ((*((char *)a4 + 23) & 0x80000000) == 0)
    {
      v13 = *a4;
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a4 + 2);
      *(_OWORD *)v12 = v13;
      v14 = a1 + 48;
      if (!*((_BYTE *)a5 + 24))
        goto LABEL_9;
LABEL_6:
      if (*((char *)a5 + 23) < 0)
      {
        sub_20AEC60F4((_BYTE *)v14, *(void **)a5, *((_QWORD *)a5 + 1));
      }
      else
      {
        v15 = *a5;
        *(_QWORD *)(v14 + 16) = *((_QWORD *)a5 + 2);
        *(_OWORD *)v14 = v15;
      }
      goto LABEL_11;
    }
    sub_20AEC60F4((_BYTE *)(a1 + 24), *(void **)a4, *((_QWORD *)a4 + 1));
    v14 = a1 + 48;
    if (*((_BYTE *)a5 + 24))
      goto LABEL_6;
  }
  else
  {
    *(_BYTE *)(a1 + 47) = 2;
    strcpy((char *)(a1 + 24), ",;");
    v14 = a1 + 48;
    if (*((_BYTE *)a5 + 24))
      goto LABEL_6;
  }
LABEL_9:
  *(_BYTE *)(a1 + 71) = 1;
  *(_WORD *)(a1 + 48) = 10;
LABEL_11:
  if ((a6 & 0xFF00) != 0)
    v16 = a6;
  else
    v16 = 124;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 72) = v16;
  *(_BYTE *)(a1 + 73) = a7;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 131) = 0;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v12;
    v21 = *(_QWORD *)(v12 + 16);
  }
  if (*(char *)(a1 + 71) < 0)
  {
    sub_20AEC60F4(__p, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v14;
    v19 = *(_QWORD *)(v14 + 16);
  }
  sub_20B515BD8((char *)__dst, (char *)__p, *(char *)(a1 + 72));
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      return a1;
LABEL_24:
    operator delete(__dst[0]);
    return a1;
  }
  if (SHIBYTE(v21) < 0)
    goto LABEL_24;
  return a1;
}

void sub_20B5164BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void **v22;

  if ((*(char *)(v21 + 47) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B516570(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C41EF88;
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_20B5165EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C41EF88;
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20B516668(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C41EF88;
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 48));
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
LABEL_8:
    JUMPOUT(0x20BD3583CLL);
LABEL_7:
  operator delete(*(void **)(a1 + 24));
  goto LABEL_8;
}

uint64_t sub_20B5166E8(uint64_t a1, unsigned __int8 a2)
{
  const char *v3;
  int v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  _BOOL8 v11;
  const char *v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  int v17;
  void **v19;
  uint64_t v20;
  unsigned __int8 v21;

  v3 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v3 = *(const char **)v3;
  v4 = a2;
  sub_20B2D6C14(v3, (uint64_t)&v19);
  v5 = v21;
  if ((v21 & 0x80u) == 0)
    v6 = (void **)&v19;
  else
    v6 = v19;
  if ((v21 & 0x80u) != 0)
    v5 = v20;
  if (!v5)
  {
    v9 = 0;
    if (((char)v21 & 0x80000000) == 0)
      goto LABEL_16;
LABEL_20:
    operator delete(v19);
    if (v9)
      return 1;
    goto LABEL_21;
  }
  v7 = v5 - 1;
  do
  {
    v8 = *(unsigned __int8 *)v6;
    v6 = (void **)((char *)v6 + 1);
    v9 = v8 == v4;
  }
  while (v8 != v4 && v7-- != 0);
  if ((char)v21 < 0)
    goto LABEL_20;
LABEL_16:
  if (v9)
    return 1;
LABEL_21:
  v13 = (const char *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    v13 = *(const char **)v13;
  sub_20B2D6C14(v13, (uint64_t)&v19);
  v14 = v21;
  if ((v21 & 0x80u) == 0)
    v15 = (void **)&v19;
  else
    v15 = v19;
  if ((v21 & 0x80u) != 0)
    v14 = v20;
  if (v14)
  {
    v16 = v14 - 1;
    do
    {
      v17 = *(unsigned __int8 *)v15;
      v15 = (void **)((char *)v15 + 1);
      v11 = v17 == v4;
    }
    while (v17 != v4 && v16-- != 0);
    if (((char)v21 & 0x80000000) == 0)
      return v11;
  }
  else
  {
    v11 = 0;
    if (((char)v21 & 0x80000000) == 0)
      return v11;
  }
  operator delete(v19);
  return v11;
}

void sub_20B51680C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  char v6;
  unsigned __int8 v7;
  const char *v8;
  unint64_t v9;
  void **v10;
  char *v11;
  int v12;
  BOOL v13;
  void *v15[2];
  unsigned __int8 v16;

  v4 = (std::string *)(a1 + 136);
  std::string::reserve((std::string *)(a1 + 136), 0x20uLL);
  if (*(char *)(a1 + 159) < 0)
  {
    v5 = *(std::string **)(a1 + 136);
    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 159) = 0;
    v5 = v4;
  }
  v5->__r_.__value_.__s.__data_[0] = 0;
  LOBYTE(v15[0]) = 0;
  std::istream::read();
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
  {
    v6 = 0;
    v7 = v15[0];
    while (1)
    {
      if ((v6 & 1) != 0)
      {
        if (v7 == 34)
        {
          if (std::istream::peek() != 34)
          {
            v6 = 0;
            goto LABEL_8;
          }
          std::istream::seekg();
          v7 = 34;
        }
      }
      else
      {
        if (sub_20B5166E8(a1, v7))
        {
          v8 = (const char *)(a1 + 48);
          if (*(char *)(a1 + 71) < 0)
            v8 = *(const char **)v8;
          sub_20B2D6C14(v8, (uint64_t)v15);
          v9 = v16;
          if ((v16 & 0x80u) == 0)
            v10 = v15;
          else
            v10 = (void **)v15[0];
          if ((v16 & 0x80u) != 0)
            v9 = (unint64_t)v15[1];
          if (v9)
          {
            v11 = (char *)(v9 - 1);
            do
            {
              v12 = *(unsigned __int8 *)v10;
              v10 = (void **)((char *)v10 + 1);
              v13 = v12 == v7;
            }
            while (v12 != v7 && v11-- != 0);
            if (((char)v16 & 0x80000000) == 0)
              goto LABEL_35;
LABEL_38:
            operator delete(v15[0]);
            *(_BYTE *)(a1 + 131) = v13;
            if ((*(char *)(a1 + 159) & 0x80000000) == 0)
              goto LABEL_19;
          }
          else
          {
            v13 = 0;
            if ((char)v16 < 0)
              goto LABEL_38;
LABEL_35:
            *(_BYTE *)(a1 + 131) = v13;
            if ((*(char *)(a1 + 159) & 0x80000000) == 0)
              goto LABEL_19;
          }
LABEL_36:
          sub_20AEC60F4((_BYTE *)a2, *(void **)(a1 + 136), *(_QWORD *)(a1 + 144));
          return;
        }
        if (v7 == 34)
        {
          v6 = 1;
          goto LABEL_8;
        }
      }
      std::string::push_back(v4, v7);
LABEL_8:
      LOBYTE(v15[0]) = 0;
      std::istream::read();
      v7 = 0;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
      {
        if ((v6 & 1) != 0)
          *(_BYTE *)(a1 + 129) = 1;
        break;
      }
    }
  }
  if (*(char *)(a1 + 159) < 0)
    goto LABEL_36;
LABEL_19:
  *(_OWORD *)a2 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&v4->__r_.__value_.__l + 2);
}

void sub_20B516A0C(uint64_t a1, uint64_t a2)
{
  size_t v4;
  const void *p_src;
  std::runtime_error *exception;
  void *__src;
  size_t v8;
  unsigned __int8 v9;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  sub_20B51680C(a1, (uint64_t)&__src);
  if ((char)v9 < 0)
  {
    v4 = v8;
    if (v8 == *(_QWORD *)a2)
    {
      p_src = __src;
      if (!v8 || __src)
      {
        if (!v8)
        {
LABEL_15:
          operator delete(__src);
          goto LABEL_16;
        }
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        p_src = 0;
      }
      goto LABEL_14;
    }
LABEL_17:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "loaded binary data size does not match given data blob size");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v4 = v9;
  if (*(_QWORD *)a2 != v9)
    goto LABEL_17;
  if (!v9)
    goto LABEL_16;
  p_src = &__src;
LABEL_14:
  memmove(*(void **)(a2 + 8), p_src, v4);
  if ((char)v9 < 0)
    goto LABEL_15;
LABEL_16:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20B516B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B516B94(uint64_t a1)
{
  int v2;
  const char **v3;
  int v4;
  char v5;
  int v6;
  char v7;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  void *__p;
  char v13;
  void *v14[2];
  char v15;

  if (!*(_QWORD *)(a1 + 80))
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v3 = (const char **)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
    {
      sub_20B2D6C14(*v3, (uint64_t)v14);
      if ((v15 & 0x80000000) == 0)
        goto LABEL_13;
    }
    else
    {
      sub_20B2D6C14((const char *)v3, (uint64_t)v14);
      if ((v15 & 0x80000000) == 0)
      {
LABEL_13:
        *(_BYTE *)(a1 + 131) = 1;
        *(_BYTE *)(a1 + 128) = 0;
        goto LABEL_14;
      }
    }
    operator delete(v14[0]);
    goto LABEL_13;
  }
  v2 = *(unsigned __int8 *)(a1 + 131);
  *(_BYTE *)(a1 + 128) = 0;
  if (v2
    || (*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0
    && !*(_BYTE *)(a1 + 129))
  {
LABEL_14:
    v4 = *(unsigned __int8 *)(a1 + 130);
    v5 = 1;
    v6 = 0;
    if (*(_BYTE *)(a1 + 130))
    {
      v4 = 1;
      v7 = 1;
      v8 = *(_QWORD *)(a1 + 80);
      v9 = 1;
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_28;
    }
    else
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
      *(_BYTE *)(a1 + 120) = 1;
      v7 = 1;
      v5 = 0;
      v8 = *(_QWORD *)(a1 + 80);
      v9 = 1;
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_28;
    }
LABEL_18:
    v10 = *(_QWORD *)(a1 + 88) == v8;
    *(_QWORD *)(a1 + 88) = v8;
    *(_BYTE *)(a1 + 96) = 1;
    if (!*(_BYTE *)(a1 + 120))
      goto LABEL_20;
    goto LABEL_19;
  }
  do
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
      break;
    sub_20B51680C(a1, (uint64_t)&__p);
    if (v13 < 0)
      operator delete(__p);
  }
  while (!*(_BYTE *)(a1 + 131));
  v7 = 0;
  v4 = *(_BYTE *)(a1 + 130) != 0;
  v5 = 1;
  v6 = 1;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = 1;
  if (*(_BYTE *)(a1 + 96))
    goto LABEL_18;
LABEL_28:
  v10 = 1;
  *(_QWORD *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 96) = 1;
  if (*(_BYTE *)(a1 + 120))
LABEL_19:
    v9 = *(_QWORD *)(a1 + 112) == v8;
LABEL_20:
  *(_BYTE *)(a1 + 133) = v7;
  *(_BYTE *)(a1 + 134) = v10;
  if (*(_BYTE *)(a1 + 73))
  {
    if (((v6 | (!v10 || !v9) | v4) & 1) != 0)
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  return !*(_BYTE *)(a1 + 129) && *(_BYTE *)(a1 + 132) == 0;
}

void sub_20B516DBC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string::size_type size;
  std::string *v4;
  std::string v5;
  std::string v6;
  std::string __p;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  _QWORD v15[4];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  sub_20B5287D4(a1, &v5);
  v15[0] = "Exception while parsing row: ";
  v15[1] = 29;
  size = HIBYTE(v5.__r_.__value_.__r.__words[2]);
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v5;
  else
    v4 = (std::string *)v5.__r_.__value_.__r.__words[0];
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v5.__r_.__value_.__l.__size_;
  v15[2] = v4;
  v15[3] = size;
  sub_20AECFDF8((uint64_t)v15, (uint64_t)&v16, 0, 0, &v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  v8 = 1;
  LOBYTE(v9) = 0;
  v13 = 0;
  v14 = 1;
  sub_20AF558C0(5u, (__int128 *)&__p, a2);
  if (v14)
  {
    if (!v13)
      goto LABEL_13;
    if (v12 < 0)
    {
      operator delete(v11);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v8)
          goto LABEL_16;
LABEL_14:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_16;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v9);
    if (!v8)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_16:
  if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_20:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
}

void sub_20B516F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B516F9C(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  char *v5;
  __int128 v6;
  char *v7;
  __int128 v8;
  int64x2_t v9;
  int8x16_t v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  unint64_t v14;
  void *v15;
  int v16;
  char *v17;
  char *v18;
  void *v19;
  std::string v20;
  _DWORD v21[2];
  __int128 __p;
  _BYTE v23[7];
  char v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  std::string v35;
  int v36;
  char v37;
  char *v38;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  if (a1[129])
  {
    *((_BYTE *)&v35.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&v35, "early eof");
    v3 = sub_20AEC81D4((void **)&v32, (uint64_t)&v35);
    goto LABEL_3;
  }
  if (a1[130]
    && (*((_BYTE *)&v35.__r_.__value_.__s + 23) = 16,
        strcpy((char *)&v35, "invalid field(s)"),
        v33 = sub_20AEC81D4((void **)&v32, (uint64_t)&v35),
        SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(v35.__r_.__value_.__l.__data_);
    if (!a1[133])
    {
LABEL_8:
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&v35.__r_.__value_.__r.__words[1] = xmmword_20B5E35C0;
      strcpy(v35.__r_.__value_.__l.__data_, "did not reach end of row");
      v5 = v33;
      if ((unint64_t)v33 >= v34)
      {
        v33 = sub_20AEC81D4((void **)&v32, (uint64_t)&v35);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
      }
      else
      {
        v6 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
        *((_QWORD *)v33 + 2) = *((_QWORD *)&v35.__r_.__value_.__l + 2);
        *(_OWORD *)v5 = v6;
        v33 = v5 + 24;
      }
    }
  }
  else if (!a1[133])
  {
    goto LABEL_8;
  }
  if (a1[134])
    goto LABEL_17;
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v35.__r_.__value_.__r.__words[1] = xmmword_20B5C7C80;
  strcpy(v35.__r_.__value_.__l.__data_, "inconsistent field count in row");
  v7 = v33;
  if ((unint64_t)v33 < v34)
  {
    v8 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    *((_QWORD *)v33 + 2) = *((_QWORD *)&v35.__r_.__value_.__l + 2);
    *(_OWORD *)v7 = v8;
    v33 = v7 + 24;
    goto LABEL_17;
  }
  v3 = sub_20AEC81D4((void **)&v32, (uint64_t)&v35);
LABEL_3:
  v33 = v3;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
LABEL_17:
  v36 = 0;
  sub_20B07E63C(&v35, "Failure while parsing row: ");
  if (v36 == -1)
    sub_20AECFAB8();
  v38 = &v37;
  ((void (*)(std::string *__return_ptr, char **, std::string *))off_24C41F190[v36])(&v20, &v38, &v35);
  if (v36 != -1)
    ((void (*)(char **, std::string *))off_24C41F130[v36])(&v38, &v35);
  sub_20AECFBC8(v32, (uint64_t)v33, "; ", 2uLL, &v35, v9, v10);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v35;
  else
    v11 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  else
    size = v35.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v20, (const std::string::value_type *)v11, size);
  v15 = (void *)v13->__r_.__value_.__r.__words[0];
  v14 = v13->__r_.__value_.__l.__size_;
  v21[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v21 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v16 < 0)
  {
    sub_20AEC60F4(&__p, v15, v14);
  }
  else
  {
    *(_QWORD *)&__p = v15;
    *((_QWORD *)&__p + 1) = v14;
    *(_DWORD *)v23 = v21[0];
    *(_DWORD *)&v23[3] = *(_DWORD *)((char *)v21 + 3);
    v24 = v16;
  }
  v25 = 1;
  LOBYTE(v26) = 0;
  v30 = 0;
  v31 = 1;
  sub_20AF558C0(5u, &__p, a2);
  if (v31)
  {
    if (!v30)
      goto LABEL_33;
    if (v29 < 0)
    {
      operator delete(v28);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_33:
        if (!v25)
          goto LABEL_36;
LABEL_34:
        if (v24 < 0)
          operator delete((void *)__p);
        goto LABEL_36;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_33;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_36;
    goto LABEL_34;
  }
LABEL_36:
  if (v16 < 0)
  {
    operator delete(v15);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
LABEL_43:
      operator delete(v20.__r_.__value_.__l.__data_);
      v17 = (char *)v32;
      if (!v32)
        return;
      goto LABEL_44;
    }
  }
  else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_43;
LABEL_39:
  v17 = (char *)v32;
  if (!v32)
    return;
LABEL_44:
  v18 = v33;
  v19 = v17;
  if (v33 != v17)
  {
    do
    {
      if (*(v18 - 1) < 0)
        operator delete(*((void **)v18 - 3));
      v18 -= 24;
    }
    while (v18 != v17);
    v19 = (void *)v32;
  }
  v33 = v17;
  operator delete(v19);
}

void sub_20B51737C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 57) < 0)
  {
    operator delete(*(void **)(v16 - 80));
    sub_20AEC2E90((void **)(v16 - 104));
    _Unwind_Resume(a1);
  }
  sub_20AEC2E90((void **)(v16 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_20B51746C(uint64_t result, uint64_t a2)
{
  std::logic_error *exception;
  std::string v3;
  uint64_t v4;

  v4 = a2;
  if ((_DWORD)result == 34)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20B517530((uint64_t)&v3, (const char *)&v4);
    std::logic_error::logic_error(exception, &v3);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return result;
}

void sub_20B5174F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_20B517530(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20AF71210(v4, "Invalid .csv ");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24C41F160[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_11:
    sub_20AECFAB8();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_11;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C41F148[v5])(&v11, v4);
LABEL_6:
  v6 = (_QWORD **)v4;
  v7 = "'\"'";
  v8 = v4;
  v9 = "'\"'";
  v10 = "'\"'";
  if (v5 == -1)
    sub_20AECFAB8();
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C41F178[v5])(&v11, v4);
  if (v5 == -1)
    sub_20AECFAB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C41F190[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C41F130[v5])(&v6, v4);
  return result;
}

void sub_20B5176AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B5176C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B5176D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B5176E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

size_t sub_20B5176FC(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24C41F130[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20B5177E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C41F130[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20B5179A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B5179E4(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20B517C74(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B517C8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20B517C94(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v3;
  uint64_t result;
  _DWORD v5[6];
  int v6;
  void *__p[2];
  char v8;
  void ***v9;
  void **v10;
  void **v11;
  _DWORD *v12;
  void **v13;
  void **v14;

  v6 = 0;
  sub_20B07E63C(v5, "Cannot use same separator '");
  v3 = *a2;
  v8 = 1;
  LOWORD(__p[0]) = v3;
  v10 = (void **)v5;
  v11 = __p;
  v12 = v5;
  v13 = __p;
  v14 = __p;
  if (v6 == -1)
    sub_20AECFAB8();
  v9 = &v10;
  ((void (*)(void ****, _DWORD *))off_24C41F1C0[v6])(&v9, v5);
  if (v8 < 0)
    operator delete(__p[0]);
  v10 = (void **)v5;
  v11 = (void **)"' for fields and rows";
  v12 = v5;
  v13 = (void **)"' for fields and rows";
  v14 = (void **)"' for fields and rows";
  if (v6 == -1)
    sub_20AECFAB8();
  __p[0] = &v10;
  ((void (*)(void **, _DWORD *))off_24C41F1D8[v6])(__p, v5);
  if (v6 == -1)
    sub_20AECFAB8();
  v10 = __p;
  result = ((uint64_t (*)(void ***, _DWORD *))off_24C41F190[v6])(&v10, v5);
  if (v6 != -1)
    return ((uint64_t (*)(void ***, _DWORD *))off_24C41F130[v6])(&v10, v5);
  return result;
}

void sub_20B517DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B517E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20B517DFCLL);
}

uint64_t sub_20B517E30(uint64_t a1, unsigned __int8 *a2, const char *a3)
{
  unsigned __int8 v5;
  uint64_t result;
  _DWORD v7[6];
  int v8;
  void *__p[2];
  char v10;
  void ***v11;
  void **v12;
  const char *v13;
  _DWORD *v14;
  const char *v15;
  const char *v16;

  v8 = 0;
  sub_20AFAE5CC(v7, "Cannot use field end marker '");
  v5 = *a2;
  v10 = 1;
  LOWORD(__p[0]) = v5;
  v12 = (void **)v7;
  v13 = (const char *)__p;
  v14 = v7;
  v15 = (const char *)__p;
  v16 = (const char *)__p;
  if (v8 == -1)
    sub_20AECFAB8();
  v11 = &v12;
  ((void (*)(void ****, _DWORD *))off_24C41F1C0[v8])(&v11, v7);
  if (v10 < 0)
    operator delete(__p[0]);
  v12 = (void **)v7;
  v13 = "' since it is also used as ";
  v14 = v7;
  v15 = "' since it is also used as ";
  v16 = "' since it is also used as ";
  if (v8 == -1)
    sub_20AECFAB8();
  __p[0] = &v12;
  ((void (*)(void **, _DWORD *))off_24C41F1A8[v8])(__p, v7);
  if (*(_QWORD *)a3)
  {
    v12 = (void **)v7;
    v13 = a3;
    v14 = v7;
    v15 = a3;
    v16 = a3;
    if (v8 != -1)
    {
      __p[0] = &v12;
      ((void (*)(void **, _DWORD *))off_24C41F160[v8])(__p, v7);
      goto LABEL_10;
    }
LABEL_17:
    sub_20AECFAB8();
  }
  v12 = (void **)v7;
  v13 = "nullptr";
  v14 = v7;
  v15 = "nullptr";
  v16 = "nullptr";
  if (v8 == -1)
    goto LABEL_17;
  __p[0] = &v12;
  ((void (*)(void **, _DWORD *))off_24C41F148[v8])(__p, v7);
LABEL_10:
  v12 = (void **)v7;
  v13 = " separator";
  v14 = v7;
  v15 = " separator";
  v16 = " separator";
  if (v8 == -1)
    sub_20AECFAB8();
  __p[0] = &v12;
  ((void (*)(void **, _DWORD *))off_24C41F1F0[v8])(__p, v7);
  if (v8 == -1)
    sub_20AECFAB8();
  v12 = __p;
  result = ((uint64_t (*)(void ***, _DWORD *))off_24C41F190[v8])(&v12, v7);
  if (v8 != -1)
    return ((uint64_t (*)(void ***, _DWORD *))off_24C41F130[v8])(&v12, v7);
  return result;
}

void sub_20B518070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B518094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20B518084);
}

_BYTE *sub_20B5180B8(uint64_t a1, _WORD *a2)
{
  unsigned int v3;
  uint64_t *v4;
  char v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 40))
  {
    v4 = (uint64_t *)(a1 + 16);
    return sub_20B51E278(&v4, (unsigned __int16)*a2);
  }
  else
  {
    v3 = (unsigned __int16)*a2;
    if (v3 > 0x7F)
    {
      if (v3 > 0xFF)
      {
        v5 = -51;
        v6 = __rev16(v3);
      }
      else
      {
        v7 = -52;
        v8 = v3;
      }
      return (_BYTE *)std::ostream::write();
    }
    else
    {
      v9 = *a2;
      return (_BYTE *)std::ostream::write();
    }
  }
}

uint64_t sub_20B518174(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t *v9;
  char v10;
  char v11;
  char v12;

  v2 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v9 = (uint64_t *)(v2 + 16);
    v3 = *a2;
    if (*a2)
    {
      v4 = (char *)a2[1];
      do
      {
        v5 = *v4++;
        result = (uint64_t)sub_20B51DD74(&v9, v5);
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    v6 = *a2;
    if (*a2)
    {
      v7 = (char *)a2[1];
      do
      {
        while (1)
        {
          v8 = *v7;
          if ((v8 & 0x80000000) == 0)
            break;
          v10 = -52;
          v11 = v8;
          result = std::ostream::write();
          ++v7;
          if (!--v6)
            return result;
        }
        v12 = *v7;
        result = std::ostream::write();
        ++v7;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_20B518234(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  unsigned int v4;
  _WORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  char v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;

  if (*(_BYTE *)(result + 40))
  {
    v8 = (uint64_t *)(result + 16);
    if (*a2)
    {
      v2 = (unsigned __int16 *)a2[1];
      v3 = 2 * *a2;
      do
      {
        v4 = *v2++;
        result = (uint64_t)sub_20B51E278(&v8, v4);
        v3 -= 2;
      }
      while (v3);
    }
  }
  else if (*a2)
  {
    v5 = (_WORD *)a2[1];
    v6 = 2 * *a2;
    do
    {
      v7 = (unsigned __int16)*v5;
      if (v7 <= 0x7F)
      {
        v13 = *v5;
      }
      else if (v7 > 0xFF)
      {
        v9 = -51;
        v10 = __rev16(v7);
      }
      else
      {
        v11 = -52;
        v12 = v7;
      }
      result = std::ostream::write();
      ++v5;
      v6 -= 2;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20B518324(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  _BYTE v9[2];
  unsigned int v10;

  v2 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v8 = (uint64_t *)(v2 + 16);
    if (*a2)
    {
      v3 = (unsigned int *)a2[1];
      v4 = 4 * *a2;
      do
      {
        result = (uint64_t)sub_20B51F73C((uint64_t)v9, &v8, v3++);
        v4 -= 4;
      }
      while (v4);
    }
  }
  else if (*a2)
  {
    v5 = (unsigned int *)a2[1];
    v6 = 4 * *a2;
    do
    {
      v7 = *v5++;
      v9[1] = -54;
      v10 = bswap32(v7);
      result = std::ostream::write();
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

void sub_20B5183CC(uint64_t a1, _BYTE *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;

  sub_20B51A6D4(a1, (uint64_t)&v9);
  v12 = v9;
  v13 = v10;
  *a2 = sub_20B51FFA8((uint64_t)&v12);
  v3 = v11;
  v11 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20B518464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B51847C(uint64_t a1, _BYTE *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;

  sub_20B51A6D4(a1, (uint64_t)&v9);
  v12 = v9;
  v13 = v10;
  *a2 = sub_20B51FFA8((uint64_t)&v12);
  v3 = v11;
  v11 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20B518514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B51852C(uint64_t a1, _BYTE *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;

  sub_20B51A6D4(a1, (uint64_t)&v11);
  if (v11 != 2 || v12 >= 0x100)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
    __cxa_throw(v10, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20B5185F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B518610(uint64_t a1, _WORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;

  sub_20B51A6D4(a1, (uint64_t)&v9);
  v12 = v9;
  v13 = v10;
  *a2 = sub_20B52000C((uint64_t)&v12);
  v3 = v11;
  v11 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20B5186A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B5186C0(uint64_t a1, _WORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;

  sub_20B51A6D4(a1, (uint64_t)&v11);
  if (v11 != 2 || v12 >= 0x10000)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
    __cxa_throw(v10, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20B51878C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B5187A4(uint64_t a1, _DWORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;

  sub_20B51A6D4(a1, (uint64_t)&v9);
  v12 = v9;
  v13 = v10;
  *a2 = sub_20B520074((uint64_t)&v12);
  v3 = v11;
  v11 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20B51883C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B518854(uint64_t a1, _DWORD *a2)
{
  _QWORD *v4;
  char *i;
  uint64_t v6;
  void (*v7)(uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  std::bad_cast *exception;
  std::bad_cast *v11;
  int v12;
  unint64_t v13;
  _QWORD *v14;

  sub_20B51A6D4(a1, (uint64_t)&v12);
  if (v12 != 2 || HIDWORD(v13) != 0)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
    __cxa_throw(v11, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v13;
  v4 = v14;
  v14 = 0;
  if (v4)
  {
    for (i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      v7 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v6 = *((_QWORD *)i - 1);
      v7(v6);
    }
    free(i);
    v8 = (_QWORD *)v4[3];
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_20B518920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B518938(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;

  sub_20B51A6D4(a1, (uint64_t)&v11);
  if (v11 != 3 && (v11 != 2 || v12 < 0))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
    __cxa_throw(v10, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20B518A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B518A20(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;

  sub_20B51A6D4(a1, (uint64_t)&v11);
  if (v11 != 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
    __cxa_throw(v10, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  v3 = v13;
  *a2 = v12;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20B518AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B518AFC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;

  sub_20B51A6D4(a1, (uint64_t)&v11);
  if (v11 != 3 && (v11 != 2 || v12 < 0))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
    __cxa_throw(v10, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20B518BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B518BE4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;

  sub_20B51A6D4(a1, (uint64_t)&v11);
  if (v11 != 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
    __cxa_throw(v10, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  v3 = v13;
  *a2 = v12;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20B518CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B518CC0(uint64_t a1, float *a2)
{
  float v3;
  _QWORD *v4;
  char *i;
  uint64_t v6;
  void (*v7)(uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  std::bad_cast *exception;
  std::bad_cast *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;

  sub_20B51A6D4(a1, (uint64_t)&v12);
  if (v12 == 2)
  {
    *a2 = (float)(unint64_t)v13;
    v4 = v14;
    v14 = 0;
    if (!v4)
      return;
    goto LABEL_9;
  }
  if (v12 == 3)
  {
    *a2 = (float)v13;
    v4 = v14;
    v14 = 0;
    if (!v4)
      return;
    goto LABEL_9;
  }
  if (v12 != 4)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
    __cxa_throw(v11, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  v3 = *(double *)&v13;
  *a2 = v3;
  v4 = v14;
  v14 = 0;
  if (v4)
  {
LABEL_9:
    for (i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      v7 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v6 = *((_QWORD *)i - 1);
      v7(v6);
    }
    free(i);
    v8 = (_QWORD *)v4[3];
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_20B518DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B518DF0(uint64_t a1, double *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;

  sub_20B51A6D4(a1, (uint64_t)&v11);
  if (v11 == 2)
  {
    *a2 = (double)(unint64_t)v12;
    v3 = v13;
    v13 = 0;
    if (!v3)
      return;
    goto LABEL_9;
  }
  if (v11 == 3)
  {
    *a2 = (double)v12;
    v3 = v13;
    v13 = 0;
    if (!v3)
      return;
    goto LABEL_9;
  }
  if (v11 != 4)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
    __cxa_throw(v10, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
LABEL_9:
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20B518F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B518F1C(uint64_t a1, _BYTE *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  char v12;
  _QWORD *v13;

  sub_20B51A6D4(a1, (uint64_t)&v11);
  if (v11 != 1)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
    __cxa_throw(v10, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20B518FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B518FF8(uint64_t a1, void **a2)
{
  _QWORD *v4;
  char *i;
  uint64_t v6;
  void (*v7)(uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  std::bad_cast *exception;
  std::bad_cast *v11;
  int v12;
  size_t __len;
  void *__src;
  _QWORD *v15;

  sub_20B51A6D4(a1, (uint64_t)&v12);
  if (v12 != 8 && v12 != 5)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
    __cxa_throw(v11, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  sub_20B421D00(a2, __src, __len);
  v4 = v15;
  v15 = 0;
  if (v4)
  {
    for (i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      v7 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v6 = *((_QWORD *)i - 1);
      v7(v6);
    }
    free(i);
    v8 = (_QWORD *)v4[3];
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_20B5190C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20B5190E0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  BOOL v8;
  char *result;
  char *v10;
  std::bad_alloc *exception;
  std::bad_alloc *v12;

  v4 = a1[2];
  v5 = *a1;
  if ((unint64_t)(v4 - *a1) >= 9)
  {
    result = (char *)a1[1];
  }
  else
  {
    if (v4)
      v6 = 2 * v4;
    else
      v6 = 0x2000;
    v7 = v5 + 9;
    while (v6 < v7)
    {
      v8 = (uint64_t)v6 <= 0;
      v6 *= 2;
      if (v8)
      {
        v6 = v7;
        break;
      }
    }
    result = (char *)malloc_type_realloc((void *)a1[1], v6, 0xAD6A59EEuLL);
    if (!result)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v12 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v12, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    a1[1] = (uint64_t)result;
    a1[2] = v6;
    v5 = *a1;
  }
  v10 = &result[v5];
  *v10 = -49;
  *(_QWORD *)(v10 + 1) = bswap64(a2);
  *a1 += 9;
  return result;
}

void sub_20B5191B4(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  char *i;
  uint64_t v6;
  void (*v7)(uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  std::bad_cast *exception;
  std::bad_cast *v11;
  _DWORD v12[4];
  uint64_t v13;
  _QWORD *v14;

  sub_20B51A6D4(a1, (uint64_t)v12);
  if (v12[0] != 8)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
    __cxa_throw(v11, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  v3 = v12[2];
  v4 = v14;
  *(_QWORD *)(a2 + 8) = v13;
  *(_DWORD *)a2 = v3;
  v14 = 0;
  if (v4)
  {
    for (i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      v7 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v6 = *((_QWORD *)i - 1);
      v7(v6);
    }
    free(i);
    v8 = (_QWORD *)v4[3];
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_20B51927C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B51CA64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::bad_cast *sub_20B519294(std::bad_cast *a1)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
  return result;
}

_QWORD *sub_20B5192B8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C41F230;
  v2 = a1[3];
  a1[2] = &unk_24C41F380;
  a1[3] = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 80);
    if (v3)
    {
      *(_QWORD *)(v2 + 88) = v3;
      operator delete(v3);
    }
    if (*(_BYTE *)(v2 + 72))
      free(*(void **)(v2 + 56));
    if (*(_BYTE *)(v2 + 40))
      free(*(void **)(v2 + 24));
    MEMORY[0x20BD3583C](v2, 0x1030C408C1A3048);
  }
  return a1;
}

_QWORD *sub_20B51933C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C41F230;
  v2 = a1[3];
  a1[2] = &unk_24C41F380;
  a1[3] = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 80);
    if (v3)
    {
      *(_QWORD *)(v2 + 88) = v3;
      operator delete(v3);
    }
    if (*(_BYTE *)(v2 + 72))
      free(*(void **)(v2 + 56));
    if (*(_BYTE *)(v2 + 40))
      free(*(void **)(v2 + 24));
    MEMORY[0x20BD3583C](v2, 0x1030C408C1A3048);
  }
  return a1;
}

_QWORD *sub_20B5193C0(_QWORD *result)
{
  uint64_t v1;
  void *v2;

  *(result - 2) = &off_24C41F230;
  v1 = result[1];
  *result = &unk_24C41F380;
  result[1] = 0;
  if (v1)
  {
    v2 = *(void **)(v1 + 80);
    if (v2)
    {
      *(_QWORD *)(v1 + 88) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(v1 + 72))
      free(*(void **)(v1 + 56));
    if (*(_BYTE *)(v1 + 40))
      free(*(void **)(v1 + 24));
    return (_QWORD *)MEMORY[0x20BD3583C](v1, 0x1030C408C1A3048);
  }
  return result;
}

void sub_20B51943C(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  *a1 = &off_24C41F230;
  v1 = a1[3];
  a1[2] = &unk_24C41F380;
  a1[3] = 0;
  if (v1)
  {
    v2 = *(void **)(v1 + 80);
    if (v2)
    {
      *(_QWORD *)(v1 + 88) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(v1 + 72))
      free(*(void **)(v1 + 56));
    if (*(_BYTE *)(v1 + 40))
      free(*(void **)(v1 + 24));
    MEMORY[0x20BD3583C](v1, 0x1030C408C1A3048);
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B5194D0(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  v1 = a1[1];
  *a1 = &unk_24C41F380;
  a1[1] = 0;
  *(a1 - 2) = &off_24C41F230;
  if (v1)
  {
    v2 = *(void **)(v1 + 80);
    if (v2)
    {
      *(_QWORD *)(v1 + 88) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(v1 + 72))
      free(*(void **)(v1 + 56));
    if (*(_BYTE *)(v1 + 40))
      free(*(void **)(v1 + 24));
    MEMORY[0x20BD3583C](v1, 0x1030C408C1A3048);
  }
  JUMPOUT(0x20BD3583CLL);
}

char *sub_20B519564(uint64_t a1)
{
  return sub_20B51956C(*(_QWORD *)(a1 + 24));
}

char *sub_20B51956C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  std::bad_alloc *exception;
  std::bad_alloc *v30;

  if (*(_BYTE *)(a1 + 40))
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 72))
      goto LABEL_6;
LABEL_11:
    v6 = *(_QWORD *)(a1 + 16);
    v8 = *(char **)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 96);
    if ((unint64_t)v8 >= v7)
      goto LABEL_14;
    goto LABEL_12;
  }
  v2 = malloc_type_malloc(0x2000uLL, 0x3BE130FuLL);
  if (!v2)
    goto LABEL_34;
  v3 = v2;
  if (*(_BYTE *)(a1 + 40))
  {
    free(*(void **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = 0x2000;
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = 0x2000;
  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_11;
LABEL_6:
  v4 = malloc_type_malloc(0x2000uLL, 0x3BE130FuLL);
  if (!v4)
  {
LABEL_34:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v30 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v30, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v5 = v4;
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = v4;
    *(_QWORD *)(a1 + 64) = 0x2000;
    *(_BYTE *)(a1 + 72) = 1;
    v6 = *(_QWORD *)(a1 + 16);
    v8 = *(char **)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 96);
    if ((unint64_t)v8 >= v7)
      goto LABEL_14;
LABEL_12:
    *(_QWORD *)v8 = v6;
    v9 = (uint64_t)(v8 + 8);
    goto LABEL_33;
  }
  free(*(void **)(a1 + 56));
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = 0x2000;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(char **)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  if ((unint64_t)v8 < v7)
    goto LABEL_12;
LABEL_14:
  v10 = *(char **)(a1 + 80);
  v11 = (v8 - v10) >> 3;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61)
    sub_20AEC60B8();
  v13 = v7 - (_QWORD)v10;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      sub_20AEC60CC();
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v6;
    v9 = (uint64_t)(v16 + 1);
    v18 = v8 - v10;
    if (v8 == v10)
      goto LABEL_31;
    goto LABEL_25;
  }
  v15 = 0;
  v16 = (_QWORD *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = v6;
  v9 = 8 * v11 + 8;
  v18 = v8 - v10;
  if (v8 != v10)
  {
LABEL_25:
    v19 = v18 - 8;
    if (v19 < 0x58)
      goto LABEL_39;
    if ((unint64_t)(v10 - v15) < 0x20)
      goto LABEL_39;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v8[-v21];
    v16 = (_QWORD *)((char *)v16 - v21);
    v23 = &v15[8 * v11 - 16];
    v24 = v8 - 16;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v8 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_39:
      do
      {
        v27 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *--v16 = v27;
      }
      while (v8 != v10);
    }
  }
LABEL_31:
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = v17;
  if (v10)
    operator delete(v10);
LABEL_33:
  *(_QWORD *)(a1 + 88) = v9;
  return sub_20B5190E0((uint64_t *)(a1 + 16), 0);
}

char *sub_20B5197CC(uint64_t a1)
{
  return sub_20B51956C(*(_QWORD *)(a1 + 8));
}

void sub_20B5197D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v1 + 48), *(_QWORD *)(v1 + 16) - v2 - 9);
  v3 = *(_QWORD *)(v1 + 48);
  if (v3)
    memmove((void *)(*(_QWORD *)(v1 + 24) + v2), *(const void **)(v1 + 56), v3);
  *(_QWORD *)(v1 + 48) = 0;
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 88) - 8;
  *(_QWORD *)(v1 + 88) = v5;
  if (v4 == v5)
  {
    std::ostream::write();
    if (*(_BYTE *)(v1 + 40))
    {
      free(*(void **)(v1 + 24));
      *(_BYTE *)(v1 + 40) = 0;
    }
  }
}

void sub_20B519868(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v1 + 48), *(_QWORD *)(v1 + 16) - v2 - 9);
  v3 = *(_QWORD *)(v1 + 48);
  if (v3)
    memmove((void *)(*(_QWORD *)(v1 + 24) + v2), *(const void **)(v1 + 56), v3);
  *(_QWORD *)(v1 + 48) = 0;
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 88) - 8;
  *(_QWORD *)(v1 + 88) = v5;
  if (v4 == v5)
  {
    std::ostream::write();
    if (*(_BYTE *)(v1 + 40))
    {
      free(*(void **)(v1 + 24));
      *(_BYTE *)(v1 + 40) = 0;
    }
  }
}

_QWORD *sub_20B5198FC(_QWORD *a1, uint64_t *a2, uint64_t a3, size_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t v10;
  __int128 v12[8];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *a1 = off_24C41E9F8;
  v7 = *a2;
  a1[4] = 0;
  a1[5] = 0;
  *a1 = &off_24C41F3B0;
  a1[1] = v7;
  a1[2] = &unk_24C41F4F8;
  a1[3] = 0;
  v8 = (_QWORD *)operator new();
  *v8 = a3;
  *(_QWORD *)&v9 = 0xFFFFFFFFLL;
  *((_QWORD *)&v9 + 1) = 0xFFFFFFFFLL;
  v12[0] = v9;
  v12[1] = v9;
  v12[2] = v9;
  sub_20B519E44((uint64_t)(v8 + 1), (uint64_t)sub_20B519E3C, 0, a4, v12);
  v8[34] = 0;
  v8[35] = 0;
  v8[33] = a4;
  std::istream::tellg();
  v8[34] = v13;
  if (a4 >= 0x400)
    v10 = 1024;
  else
    v10 = a4;
  if (v8[10] < v10)
    sub_20B51A0CC((uint64_t)(v8 + 1), v10);
  a1[6] = v8;
  return a1;
}

void sub_20B519A1C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void *v5;

  sub_20B51A350(v3);
  MEMORY[0x20BD3583C](v2, 0x10F2C40853B94B7);
  v1[2] = off_24C41F618;
  v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20B519A78(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C41F3B0;
  a1[2] = &unk_24C41F4F8;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_20B51A350((_QWORD *)(v2 + 8));
    MEMORY[0x20BD3583C](v2, 0x10F2C40853B94B7);
  }
  a1[2] = off_24C41F618;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *sub_20B519AF4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C41F3B0;
  a1[2] = &unk_24C41F4F8;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_20B51A350((_QWORD *)(v2 + 8));
    MEMORY[0x20BD3583C](v2, 0x10F2C40853B94B7);
  }
  a1[2] = off_24C41F618;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20B519B70(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *(a1 - 2) = &off_24C41F3B0;
  *a1 = &unk_24C41F4F8;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    sub_20B51A350((_QWORD *)(v2 + 8));
    MEMORY[0x20BD3583C](v2, 0x10F2C40853B94B7);
  }
  *a1 = off_24C41F618;
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void sub_20B519BE8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C41F3B0;
  a1[2] = &unk_24C41F4F8;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_20B51A350((_QWORD *)(v2 + 8));
    MEMORY[0x20BD3583C](v2, 0x10F2C40853B94B7);
  }
  a1[2] = off_24C41F618;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B519C74(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *(a1 - 2) = &off_24C41F3B0;
  *a1 = &unk_24C41F4F8;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    sub_20B51A350((_QWORD *)(v2 + 8));
    MEMORY[0x20BD3583C](v2, 0x10F2C40853B94B7);
  }
  *a1 = off_24C41F618;
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B519D0C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 280);
}

uint64_t sub_20B519D18(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 280);
}

uint64_t sub_20B519D24(uint64_t result, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD **)(result + 48);
  v4 = v3[11];
  if (v3[9] - v4 < a2)
  {
    do
    {
      sub_20B51A40C(v3, (uint64_t)"RefillBuffer", "");
      if (v3[33] >= 0x400uLL)
        v8 = 1024;
      else
        v8 = v3[33];
      if (v3[10] < v8)
        sub_20B51A0CC((uint64_t)(v3 + 1), v8);
      result = std::istream::read();
      v5 = *(_QWORD *)(*v3 + 8);
      v6 = v3[10];
      v7 = v3[9] + v5;
      v3[9] = v7;
      v3[10] = v6 - v5;
      v4 = v3[11];
    }
    while (v7 - v4 < a2);
  }
  v3[11] = v4 + a2;
  v3[35] += a2;
  return result;
}

uint64_t sub_20B519E08(uint64_t a1, unint64_t a2)
{
  return sub_20B519D24(a1 - 16, a2);
}

void sub_20B519E10(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B519E3C()
{
  return 1;
}

uint64_t sub_20B519E44(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, __int128 *a5)
{
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  _DWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::bad_alloc *exception;
  std::bad_alloc *v23;
  std::bad_alloc *v24;
  std::bad_alloc *v25;
  std::bad_alloc *v26;
  std::bad_alloc *v27;

  *(_QWORD *)(a1 + 32) = 0;
  v10 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v11 = a1 + 248;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v12 = (char *)operator new(0x100uLL);
  *v10 = v12;
  v10[1] = v12;
  v10[2] = v12 + 256;
  v10[9] = v11;
  if (a4 <= 4)
    a4 = 4;
  v13 = malloc_type_malloc(a4, 0xFB9145DuLL);
  if (!v13)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v23 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v23, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = 4;
  *(_QWORD *)(a1 + 72) = a4 - 4;
  *(_OWORD *)(a1 + 80) = xmmword_20B610840;
  *(_QWORD *)(a1 + 96) = a4;
  *v13 = 1;
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 120) = a3;
  v14 = *a5;
  v15 = a5[1];
  v16 = a5[2];
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = v15;
  *(_OWORD *)(a1 + 160) = v16;
  *(_OWORD *)(a1 + 128) = v14;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v17 = operator new(0x100uLL);
  *(_QWORD *)(a1 + 200) = v17;
  *v17 = a1 + 176;
  *(_QWORD *)(a1 + 208) = v17 + 1;
  *(_QWORD *)(a1 + 216) = v17 + 32;
  v18 = malloc_type_malloc(0x38uLL, 0x2A498C84uLL);
  v19 = v18;
  if (!v18)
  {
    v24 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v25 = std::bad_alloc::bad_alloc(v24);
    __cxa_throw(v25, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  *v18 = 0x2000;
  v20 = malloc_type_malloc(0x2008uLL, 0x1DB03DE0uLL);
  if (!v20)
  {
    v26 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v27 = std::bad_alloc::bad_alloc(v26);
    __cxa_throw(v27, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v19[3] = v20;
  *v20 = 0;
  v19[1] = 0x2000;
  v19[2] = v20 + 1;
  v19[4] = 0;
  v19[5] = 0;
  v19[6] = 0;
  *(_QWORD *)(a1 + 240) = v19;
  *(_QWORD *)(a1 + 248) = v19;
  *(_QWORD *)(a1 + 224) = v19;
  *(_BYTE *)(a1 + 232) = 0;
  return a1;
}

void sub_20B51A008(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B51A060(v1);
  _Unwind_Resume(a1);
}

void sub_20B51A020(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[26] = v4;
    operator delete(v4);
  }
  sub_20B51A060(v1);
  _Unwind_Resume(a1);
}

void sub_20B51A044(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B51A060(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;

  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      free(v2);
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_20B51A0B0(void *a1)
{
  unsigned int v1;
  unsigned int v2;

  do
  {
    v1 = __ldaxr((unsigned int *)a1);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, (unsigned int *)a1));
  if (!v2)
    free(a1);
}

void sub_20B51A0CC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  void *v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  BOOL v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  BOOL v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  std::bad_alloc *exception;
  std::bad_alloc *v29;
  std::bad_alloc *v30;
  std::bad_alloc *v31;

  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 80);
  if (v3 == v4)
  {
    v5 = atomic_load(*(unsigned int **)(a1 + 56));
    if (v5 == 1 && *(_BYTE *)(a1 + 232))
    {
      v6 = *(_QWORD *)(a1 + 64) + *(_QWORD *)(a1 + 72) - 4;
      v3 = 4;
      *(_QWORD *)(a1 + 64) = 4;
      *(_QWORD *)(a1 + 72) = v6;
      *(_QWORD *)(a1 + 80) = 4;
      if (v6 >= a2)
        return;
      goto LABEL_9;
    }
    v4 = *(_QWORD *)(a1 + 80);
    v3 = *(_QWORD *)(a1 + 64);
  }
  if (v4 == 4)
  {
    v6 = *(_QWORD *)(a1 + 72);
LABEL_9:
    v7 = v3 + v6;
    v8 = v3 + a2;
    while (1)
    {
      v7 *= 2;
      if (v7 >= v8)
        break;
      if (v7 <= 0)
      {
        v7 = v8;
        break;
      }
    }
    v9 = malloc_type_realloc(*(void **)(a1 + 56), v7, 0x6311493AuLL);
    if (v9)
    {
      *(_QWORD *)(a1 + 56) = v9;
      *(_QWORD *)(a1 + 72) = v7 - *(_QWORD *)(a1 + 64);
      return;
    }
LABEL_34:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v29 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v29, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v10 = *(_QWORD *)(a1 + 96);
  v11 = v3 - v4;
  v12 = a2 + v3 - v4 + 4;
  while (v10 < v12)
  {
    v13 = (uint64_t)v10 <= 0;
    v10 *= 2;
    if (v13)
    {
      v10 = v12;
      break;
    }
  }
  v14 = malloc_type_malloc(v10, 0x355C421CuLL);
  if (!v14)
    goto LABEL_34;
  v15 = v14;
  *v14 = 1;
  memcpy(v14 + 1, (const void *)(*(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 80)), v11);
  if (*(_BYTE *)(a1 + 232))
  {
    v16 = *(_QWORD *)(a1 + 56);
    v17 = **(_QWORD ***)(a1 + 104);
    v18 = (char *)v17[4];
    if (v18 == (char *)v17[5])
    {
      v19 = (char *)v17[6];
      v21 = v18 - v19;
      v20 = v18 == v19;
      v22 = (v18 - v19) >> 3;
      if (v20)
        v23 = 4;
      else
        v23 = v22;
      v24 = (char *)malloc_type_realloc(v19, 16 * v23, 0x80040803F642BuLL);
      if (!v24)
      {
        v30 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v31 = std::bad_alloc::bad_alloc(v30);
        __cxa_throw(v31, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      v17[5] = &v24[16 * v23];
      v17[6] = v24;
      v18 = &v24[v21];
    }
    *(_QWORD *)v18 = sub_20B51A0B0;
    *((_QWORD *)v18 + 1) = v16;
    v17[4] = v18 + 16;
    *(_BYTE *)(a1 + 232) = 0;
  }
  else
  {
    v25 = *(unsigned int **)(a1 + 56);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
      free(v25);
  }
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v11 + 4;
  *(_QWORD *)(a1 + 72) = v10 - (v11 + 4);
  *(_QWORD *)(a1 + 80) = 4;
}

void sub_20B51A324()
{
  __break(1u);
}

void sub_20B51A33C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20B51A350(_QWORD *a1)
{
  _QWORD *v2;
  char *i;
  uint64_t v4;
  void (*v5)(uint64_t);
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;

  v2 = (_QWORD *)a1[30];
  a1[30] = 0;
  if (v2)
  {
    for (i = (char *)v2[4]; i != (char *)v2[6]; i -= 16)
    {
      v5 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v4 = *((_QWORD *)i - 1);
      v5(v4);
    }
    free(i);
    v6 = (_QWORD *)v2[3];
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        free(v6);
        v6 = v7;
      }
      while (v7);
    }
    free(v2);
  }
  v8 = (void *)a1[25];
  if (v8)
  {
    a1[26] = v8;
    operator delete(v8);
  }
  v9 = (unsigned int *)a1[7];
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      free(v9);
  }
  v12 = (void *)a1[4];
  if (v12)
  {
    a1[5] = v12;
    operator delete(v12);
  }
  return a1;
}

_QWORD *sub_20B51A40C(_QWORD *result, uint64_t a2, const char *a3)
{
  std::ios_base::failure *exception;
  std::error_code __ec;
  std::string __msg;
  const char *v6;
  uint64_t v7;

  v7 = a2;
  v6 = a3;
  if (*(_DWORD *)(*result + *(_QWORD *)(*(_QWORD *)*result - 24) + 32))
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    sub_20B51A4EC(&v6, "Input stream not in good state, in ", (const char *)&v7);
    *(_QWORD *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, &__msg, &__ec);
    __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
  }
  return result;
}

void sub_20B51A4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t sub_20B51A4EC(const char **a1, const char *a2, const char *a3)
{
  uint64_t result;
  _DWORD v6[6];
  int v7;
  _QWORD **v8;
  const char *v9;
  _DWORD *v10;
  const char *v11;
  const char *v12;
  _QWORD *v13;

  v7 = 0;
  if (*a1)
    sub_20AED077C(v6, a1);
  else
    sub_20AED0170(v6, "nullptr");
  v8 = (_QWORD **)v6;
  v9 = a2;
  v10 = v6;
  v11 = a2;
  v12 = a2;
  if (v7 == -1)
    sub_20AECFAB8();
  v13 = &v8;
  ((void (*)(_QWORD **, _DWORD *))off_24C41F690[v7])(&v13, v6);
  if (*(_QWORD *)a3)
  {
    v8 = (_QWORD **)v6;
    v9 = a3;
    v10 = v6;
    v11 = a3;
    v12 = a3;
    if (v7 != -1)
    {
      v13 = &v8;
      ((void (*)(_QWORD **, _DWORD *))off_24C41F648[v7])(&v13, v6);
      goto LABEL_10;
    }
LABEL_15:
    sub_20AECFAB8();
  }
  v8 = (_QWORD **)v6;
  v9 = "nullptr";
  v10 = v6;
  v11 = "nullptr";
  v12 = "nullptr";
  if (v7 == -1)
    goto LABEL_15;
  v13 = &v8;
  ((void (*)(_QWORD **, _DWORD *))off_24C41F678[v7])(&v13, v6);
LABEL_10:
  if (v7 == -1)
    sub_20AECFAB8();
  v8 = &v13;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C41F6A8[v7])(&v8, v6);
  if (v7 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C41F660[v7])(&v8, v6);
  return result;
}

void sub_20B51A684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B51A698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B51A6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B51A6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B51A6D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  void **v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  char v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void *v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  void *v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  void *v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  void *v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  void *v83;
  int v84;
  int v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  void *v95;
  int v96;
  int v97;
  int v98;
  void *v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  void *v104;
  int v105;
  int v106;
  int v107;
  double v108;
  uint64_t v109;
  void *v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  void *v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  int v132;
  int v133;
  int v134;
  void *v135;
  int v136;
  int v137;
  int v138;
  void *v139;
  int v140;
  int v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  void *v145;
  int v146;
  int v147;
  int v148;
  void *v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  void *v155;
  int v156;
  int v157;
  int v158;
  void *v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  void *v167;
  int v168;
  int v169;
  int v170;
  void *v171;
  int v172;
  int v173;
  int v174;
  void *v175;
  int v176;
  int v177;
  int v178;
  void *v179;
  int v180;
  int v181;
  int v182;
  void *v183;
  int v184;
  int v185;
  int v186;
  void *v187;
  int v188;
  int v189;
  int v190;
  void *v191;
  int v192;
  int v193;
  int v194;
  uint64_t v195;
  void *v196;
  int v197;
  int v198;
  int v199;
  void *v200;
  int v201;
  int v202;
  int v203;
  void *v204;
  int v205;
  int v206;
  int v207;
  uint64_t v208;
  void *v209;
  int v210;
  int v211;
  int v212;
  void *v213;
  int v214;
  int v215;
  int v216;
  unint64_t v217;
  int v218;
  BOOL v219;
  unsigned __int8 *v220;
  unsigned __int8 *v221;
  unint64_t v222;
  unsigned __int8 *v223;
  _QWORD *v224;
  void (**v225)(void *);
  unsigned int *v226;
  void (**v227)(void *);
  unsigned int **v228;
  unsigned int *v229;
  _QWORD *v230;
  char *i;
  uint64_t v232;
  void (*v233)(uint64_t);
  _QWORD *v234;
  _QWORD *v235;
  unint64_t v236;
  BOOL v237;
  int64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  unsigned int v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  uint64_t v246;
  _QWORD *v247;
  char *j;
  uint64_t v249;
  void (*v250)(uint64_t);
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  _BYTE *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char *v263;
  size_t v264;
  char *v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  std::bad_alloc *exception;
  std::bad_alloc *v271;
  std::bad_alloc *v272;
  std::bad_alloc *v273;
  std::bad_alloc *v274;
  std::bad_alloc *v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t *v278;
  void **v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t *v282;

  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 96) - v4 + v5;
  v282 = (uint64_t *)(a1 + 16);
  v7 = (uint64_t *)(a1 + 216);
  v276 = (_QWORD *)(a1 + 120);
  v277 = a2;
  *(_DWORD *)a2 = 0;
  v8 = (void **)(a1 + 40);
  v9 = (uint64_t *)(a1 + 48);
  *(_QWORD *)(a2 + 24) = 0;
  v280 = (_QWORD *)(a1 + 8);
  v281 = a1 + 184;
  v278 = (uint64_t *)(a1 + 48);
  v279 = (void **)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = (unsigned __int8 *)(v10 + v4);
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v10 + v4;
  if (v4 == v5)
    goto LABEL_476;
LABEL_2:
  v12 = 0;
  v13 = 0;
  v14 = (unsigned __int8 *)(v10 + v5);
  v15 = *(_DWORD *)(a1 + 32);
  do
  {
LABEL_3:
    while (v15)
    {
      if ((v12 & 1) == 0)
      {
        v13 = v11;
        v16 = *(_QWORD *)(a1 + 24);
        if (v14 - v11 < v16)
        {
LABEL_467:
          v218 = 0;
          v221 = &v13[-*v280];
          a2 = v277;
          *(_QWORD *)(a1 + 88) = v221;
          v219 = (unint64_t)v221 > v4;
          v220 = &v221[-v4];
          if (!v219)
            goto LABEL_479;
          goto LABEL_478;
        }
        goto LABEL_20;
      }
LABEL_5:
      v13 = v11 + 1;
      *v282 = (uint64_t)(v11 + 1);
      v16 = *(_QWORD *)(a1 + 24);
      if (v14 - (v11 + 1) < v16)
        goto LABEL_467;
LABEL_20:
      v11 = &v13[v16 - 1];
      *v282 = (uint64_t)v11;
      switch(v15)
      {
        case 4:
          v26 = *v13;
          *(_QWORD *)(a1 + 24) = v26;
          if (v26)
            goto LABEL_159;
          sub_20B51CE2C((uint64_t)v276, v13, 0);
          v20 = *v282 + 1;
          *v282 = v20;
          v27 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v34 = *(_DWORD *)(v22 - 8);
            if (v34)
            {
              if (v34 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v33 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v33;
                if (v33)
                  goto LABEL_388;
LABEL_39:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v27 = *v8;
LABEL_40:
                if (v27 == (void *)v22)
                  goto LABEL_463;
                continue;
              }
              if (v34 != 1)
                goto LABEL_40;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v35 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v35;
          if (!v35)
            goto LABEL_39;
          goto LABEL_318;
        case 5:
          v93 = *(unsigned __int16 *)v13;
          v94 = __rev16(v93);
          *(_QWORD *)(a1 + 24) = v94;
          if (v93)
            goto LABEL_159;
          sub_20B51CE2C((uint64_t)v276, v13, v94);
          v20 = *v282 + 1;
          *v282 = v20;
          v179 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v181 = *(_DWORD *)(v22 - 8);
            if (v181)
            {
              if (v181 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v180 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v180;
                if (v180)
                  goto LABEL_388;
LABEL_359:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v179 = *v8;
LABEL_360:
                if (v179 == (void *)v22)
                  goto LABEL_463;
                continue;
              }
              if (v181 != 1)
                goto LABEL_360;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v182 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v182;
          if (!v182)
            goto LABEL_359;
          goto LABEL_318;
        case 6:
          v74 = *(_DWORD *)v13;
          v75 = bswap32(*(_DWORD *)v13);
          *(_QWORD *)(a1 + 24) = v75;
          if (!v74)
          {
            sub_20B51CE2C((uint64_t)v276, v13, v75);
            v20 = *v282 + 1;
            *v282 = v20;
            v76 = *v8;
            v22 = *v9;
            if (*v8 == (void *)*v9)
              goto LABEL_464;
            while (1)
            {
              v78 = *(_DWORD *)(v22 - 8);
              if (!v78)
                break;
              if (v78 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v77 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v77;
                if (v77)
                  goto LABEL_388;
LABEL_124:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v76 = *v8;
                goto LABEL_125;
              }
              if (v78 == 1)
                goto LABEL_446;
LABEL_125:
              if (v76 == (void *)v22)
                goto LABEL_463;
            }
            *(_QWORD *)(*v7 - 8) += 24;
            v79 = *(_DWORD *)(v22 - 4) - 1;
            *(_DWORD *)(v22 - 4) = v79;
            if (v79)
              goto LABEL_318;
            goto LABEL_124;
          }
LABEL_159:
          v12 = 1;
          v15 = 33;
          *(_DWORD *)(a1 + 32) = 33;
          v11 = *(unsigned __int8 **)(a1 + 16);
          if (v11 == v14)
            goto LABEL_473;
          continue;
        case 7:
          v57 = *v13;
          goto LABEL_173;
        case 8:
          v57 = bswap32(*(unsigned __int16 *)v13) >> 16;
          goto LABEL_173;
        case 9:
          v57 = bswap32(*(_DWORD *)v13);
LABEL_173:
          *(_QWORD *)(a1 + 24) = v57 + 1;
          v12 = 1;
          v15 = 34;
          *(_DWORD *)(a1 + 32) = 34;
          v11 = *(unsigned __int8 **)(a1 + 16);
          if (v11 == v14)
            goto LABEL_473;
          continue;
        case 10:
          v108 = COERCE_FLOAT(bswap32(*(_DWORD *)v13));
          v109 = *(_QWORD *)(*v7 - 8);
          *(_DWORD *)v109 = 4;
          *(double *)(v109 + 8) = v108;
          v20 = *v282 + 1;
          *v282 = v20;
          v110 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v112 = *(_DWORD *)(v22 - 8);
            if (v112)
            {
              if (v112 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v111 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v111;
                if (v111)
                  goto LABEL_388;
LABEL_201:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v110 = *v8;
              }
              else if (v112 == 1)
              {
                goto LABEL_446;
              }
              if (v110 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v113 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v113;
          if (!v113)
            goto LABEL_201;
          goto LABEL_318;
        case 11:
          v87 = bswap64(*(_QWORD *)v13);
          v88 = *(_QWORD *)(*v7 - 8);
          *(_DWORD *)v88 = 4;
          *(_QWORD *)(v88 + 8) = v87;
          v20 = *v282 + 1;
          *v282 = v20;
          v89 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v91 = *(_DWORD *)(v22 - 8);
            if (v91)
            {
              if (v91 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v90 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v90;
                if (v90)
                  goto LABEL_388;
LABEL_150:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v89 = *v8;
              }
              else if (v91 == 1)
              {
                goto LABEL_446;
              }
              if (v89 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v92 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v92;
          if (!v92)
            goto LABEL_150;
          goto LABEL_318;
        case 12:
          v123 = *v13;
          v124 = *(_QWORD *)(*v7 - 8);
          *(_DWORD *)v124 = 2;
          *(_QWORD *)(v124 + 8) = v123;
          v20 = *v282 + 1;
          *v282 = v20;
          v125 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v127 = *(_DWORD *)(v22 - 8);
            if (v127)
            {
              if (v127 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v126 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v126;
                if (v126)
                  goto LABEL_388;
LABEL_226:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v125 = *v8;
              }
              else if (v127 == 1)
              {
                goto LABEL_446;
              }
              if (v125 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v128 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v128;
          if (!v128)
            goto LABEL_226;
          goto LABEL_318;
        case 13:
          v65 = bswap32(*(unsigned __int16 *)v13);
          v66 = *(_QWORD *)(*v7 - 8);
          *(_DWORD *)v66 = 2;
          *(_QWORD *)(v66 + 8) = HIWORD(v65);
          v20 = *v282 + 1;
          *v282 = v20;
          v67 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v69 = *(_DWORD *)(v22 - 8);
            if (v69)
            {
              if (v69 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v68 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v68;
                if (v68)
                  goto LABEL_388;
LABEL_107:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v67 = *v8;
LABEL_108:
                if (v67 == (void *)v22)
                  goto LABEL_463;
                continue;
              }
              if (v69 != 1)
                goto LABEL_108;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v70 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v70;
          if (!v70)
            goto LABEL_107;
          goto LABEL_318;
        case 14:
          v129 = bswap32(*(_DWORD *)v13);
          v130 = *(_QWORD *)(*v7 - 8);
          *(_DWORD *)v130 = 2;
          *(_QWORD *)(v130 + 8) = v129;
          v20 = *v282 + 1;
          *v282 = v20;
          v131 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v133 = *(_DWORD *)(v22 - 8);
            if (v133)
            {
              if (v133 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v132 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v132;
                if (v132)
                  goto LABEL_388;
LABEL_237:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v131 = *v8;
              }
              else if (v133 == 1)
              {
                goto LABEL_446;
              }
              if (v131 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v134 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v134;
          if (!v134)
            goto LABEL_237;
          goto LABEL_318;
        case 15:
          v51 = bswap64(*(_QWORD *)v13);
          v52 = *(_QWORD *)(*v7 - 8);
          *(_DWORD *)v52 = 2;
          *(_QWORD *)(v52 + 8) = v51;
          v20 = *v282 + 1;
          *v282 = v20;
          v53 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v55 = *(_DWORD *)(v22 - 8);
            if (v55)
            {
              if (v55 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v54 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v54;
                if (v54)
                  goto LABEL_388;
LABEL_81:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v53 = *v8;
LABEL_82:
                if (v53 == (void *)v22)
                  goto LABEL_463;
                continue;
              }
              if (v55 != 1)
                goto LABEL_82;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v56 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v56;
          if (!v56)
            goto LABEL_81;
          goto LABEL_318;
        case 16:
          v58 = (char)*v13;
          v59 = *(_QWORD *)(*v7 - 8);
          if ((int)v58 >= 0)
            v60 = 2;
          else
            v60 = 3;
          *(_DWORD *)v59 = v60;
          *(_QWORD *)(v59 + 8) = v58;
          v20 = *v282 + 1;
          *v282 = v20;
          v61 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v63 = *(_DWORD *)(v22 - 8);
            if (v63)
            {
              if (v63 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v62 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v62;
                if (v62)
                  goto LABEL_388;
LABEL_96:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v61 = *v8;
LABEL_97:
                if (v61 == (void *)v22)
                  goto LABEL_463;
                continue;
              }
              if (v63 != 1)
                goto LABEL_97;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v64 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v64;
          if (!v64)
            goto LABEL_96;
          goto LABEL_318;
        case 17:
          v114 = bswap32(*(unsigned __int16 *)v13);
          v115 = v114 >> 16;
          v116 = SHIWORD(v114);
          v117 = *(_QWORD *)(*v7 - 8);
          if (v115 >= 0)
            v118 = 2;
          else
            v118 = 3;
          *(_DWORD *)v117 = v118;
          *(_QWORD *)(v117 + 8) = v116;
          v20 = *v282 + 1;
          *v282 = v20;
          v119 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v121 = *(_DWORD *)(v22 - 8);
            if (v121)
            {
              if (v121 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v120 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v120;
                if (v120)
                  goto LABEL_388;
LABEL_215:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v119 = *v8;
              }
              else if (v121 == 1)
              {
                goto LABEL_446;
              }
              if (v119 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v122 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v122;
          if (!v122)
            goto LABEL_215;
          goto LABEL_318;
        case 18:
          v43 = bswap32(*(_DWORD *)v13);
          v44 = v43;
          v45 = *(_QWORD *)(*v7 - 8);
          if (v43 >= 0)
            v46 = 2;
          else
            v46 = 3;
          *(_DWORD *)v45 = v46;
          *(_QWORD *)(v45 + 8) = v44;
          v20 = *v282 + 1;
          *v282 = v20;
          v47 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v49 = *(_DWORD *)(v22 - 8);
            if (v49)
            {
              if (v49 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v48 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v48;
                if (v48)
                  goto LABEL_388;
LABEL_70:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v47 = *v8;
LABEL_71:
                if (v47 == (void *)v22)
                  goto LABEL_463;
                continue;
              }
              if (v49 != 1)
                goto LABEL_71;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v50 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v50;
          if (!v50)
            goto LABEL_70;
          goto LABEL_318;
        case 19:
          v80 = bswap64(*(_QWORD *)v13);
          v81 = *(_QWORD *)(*v7 - 8);
          if (v80 >= 0)
            v82 = 2;
          else
            v82 = 3;
          *(_DWORD *)v81 = v82;
          *(_QWORD *)(v81 + 8) = v80;
          v20 = *v282 + 1;
          *v282 = v20;
          v83 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v85 = *(_DWORD *)(v22 - 8);
            if (v85)
            {
              if (v85 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v84 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v84;
                if (v84)
                  goto LABEL_388;
LABEL_138:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v83 = *v8;
              }
              else if (v85 == 1)
              {
LABEL_446:
                v15 = 0;
                v12 = 0;
                v166 = *v7;
                goto LABEL_447;
              }
              if (v83 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v86 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v86;
          if (!v86)
            goto LABEL_138;
          goto LABEL_318;
        case 20:
          sub_20B51CCA8((uint64_t)v276, v13, 2u);
          v20 = *v282 + 1;
          *v282 = v20;
          v39 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v41 = *(_DWORD *)(v22 - 8);
            if (v41)
            {
              if (v41 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v40 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v40;
                if (v40)
                  goto LABEL_388;
LABEL_56:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v39 = *v8;
LABEL_57:
                if (v39 == (void *)v22)
                  goto LABEL_463;
                continue;
              }
              if (v41 != 1)
                goto LABEL_57;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v42 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v42;
          if (!v42)
            goto LABEL_56;
          goto LABEL_318;
        case 21:
          sub_20B51CCA8((uint64_t)v276, v13, 3u);
          v20 = *v282 + 1;
          *v282 = v20;
          v95 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v97 = *(_DWORD *)(v22 - 8);
            if (v97)
            {
              if (v97 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v96 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v96;
                if (v96)
                  goto LABEL_388;
LABEL_164:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v95 = *v8;
              }
              else if (v97 == 1)
              {
                goto LABEL_446;
              }
              if (v95 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v98 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v98;
          if (!v98)
            goto LABEL_164;
          goto LABEL_318;
        case 22:
          sub_20B51CCA8((uint64_t)v276, v13, 5u);
          v20 = *v282 + 1;
          *v282 = v20;
          v135 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v137 = *(_DWORD *)(v22 - 8);
            if (v137)
            {
              if (v137 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v136 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v136;
                if (v136)
                  goto LABEL_388;
LABEL_248:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v135 = *v8;
              }
              else if (v137 == 1)
              {
                goto LABEL_446;
              }
              if (v135 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v138 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v138;
          if (!v138)
            goto LABEL_248;
          goto LABEL_318;
        case 23:
          sub_20B51CCA8((uint64_t)v276, v13, 9u);
          v20 = *v282 + 1;
          *v282 = v20;
          v149 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v151 = *(_DWORD *)(v22 - 8);
            if (v151)
            {
              if (v151 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v150 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v150;
                if (v150)
                  goto LABEL_388;
LABEL_282:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v149 = *v8;
              }
              else if (v151 == 1)
              {
                goto LABEL_446;
              }
              if (v149 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v152 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v152;
          if (!v152)
            goto LABEL_282;
          goto LABEL_318;
        case 24:
          sub_20B51CCA8((uint64_t)v276, v13, 0x11u);
          v20 = *v282 + 1;
          *v282 = v20;
          v99 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v101 = *(_DWORD *)(v22 - 8);
            if (v101)
            {
              if (v101 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v100 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v100;
                if (v100)
                  goto LABEL_388;
LABEL_178:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v99 = *v8;
              }
              else if (v101 == 1)
              {
                goto LABEL_446;
              }
              if (v99 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v102 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v102;
          if (!v102)
            goto LABEL_178;
          goto LABEL_318;
        case 25:
          v103 = *v13;
          *(_QWORD *)(a1 + 24) = v103;
          if (v103)
            goto LABEL_291;
          sub_20B51CAE0((uint64_t)v276, v13, 0);
          v20 = *v282 + 1;
          *v282 = v20;
          v104 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v106 = *(_DWORD *)(v22 - 8);
            if (v106)
            {
              if (v106 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v105 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v105;
                if (v105)
                  goto LABEL_388;
LABEL_190:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v104 = *v8;
              }
              else if (v106 == 1)
              {
                goto LABEL_446;
              }
              if (v104 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v107 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v107;
          if (!v107)
            goto LABEL_190;
          goto LABEL_318;
        case 26:
          v143 = *(unsigned __int16 *)v13;
          v144 = __rev16(v143);
          *(_QWORD *)(a1 + 24) = v144;
          if (v143)
            goto LABEL_291;
          sub_20B51CAE0((uint64_t)v276, v13, v144);
          v20 = *v282 + 1;
          *v282 = v20;
          v145 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v147 = *(_DWORD *)(v22 - 8);
            if (v147)
            {
              if (v147 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v146 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v146;
                if (v146)
                  goto LABEL_388;
LABEL_271:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v145 = *v8;
              }
              else if (v147 == 1)
              {
                goto LABEL_446;
              }
              if (v145 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v148 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v148;
          if (!v148)
            goto LABEL_271;
          goto LABEL_318;
        case 27:
          v153 = *(_DWORD *)v13;
          v154 = bswap32(*(_DWORD *)v13);
          *(_QWORD *)(a1 + 24) = v154;
          if (!v153)
          {
            sub_20B51CAE0((uint64_t)v276, v13, v154);
            v20 = *v282 + 1;
            *v282 = v20;
            v183 = *v8;
            v22 = *v9;
            if (*v8 == (void *)*v9)
              goto LABEL_464;
            while (1)
            {
              v185 = *(_DWORD *)(v22 - 8);
              if (!v185)
                break;
              if (v185 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v184 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v184;
                if (v184)
                  goto LABEL_388;
LABEL_370:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v183 = *v8;
                goto LABEL_371;
              }
              if (v185 == 1)
                goto LABEL_446;
LABEL_371:
              if (v183 == (void *)v22)
                goto LABEL_463;
            }
            *(_QWORD *)(*v7 - 8) += 24;
            v186 = *(_DWORD *)(v22 - 4) - 1;
            *(_DWORD *)(v22 - 4) = v186;
            if (v186)
              goto LABEL_318;
            goto LABEL_370;
          }
LABEL_291:
          v12 = 1;
          v15 = 32;
          *(_DWORD *)(a1 + 32) = 32;
          v11 = *(unsigned __int8 **)(a1 + 16);
          if (v11 == v14)
            goto LABEL_473;
          continue;
        case 28:
          v73 = *(unsigned __int16 *)v13;
          *v282 = (uint64_t)&v13[v16];
          if (v73)
          {
            v72 = __rev16(v73);
            sub_20B51CFFC(v8, 0, v72);
            goto LABEL_119;
          }
          sub_20B51D170(v276, 0);
          v166 = *v7 - 8;
          *v7 = v166;
          v175 = *v8;
          v22 = *v9;
          while (1)
          {
            while (1)
            {
              if (v175 == (void *)v22)
                goto LABEL_470;
              v177 = *(_DWORD *)(v22 - 8);
              if (v177)
                break;
              *(_QWORD *)(v166 - 8) += 24;
              v178 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v178;
              if (v178)
                goto LABEL_318;
LABEL_348:
              v22 = *v9 - 8;
              *v9 = v22;
              v166 = *v7 - 8;
              *v7 = v166;
              v175 = *v8;
            }
            if (v177 == 2)
            {
              *(_QWORD *)(v166 - 8) += 24;
              v176 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v176;
              if (v176)
                goto LABEL_388;
              goto LABEL_348;
            }
            if (v177 == 1)
              goto LABEL_462;
          }
        case 29:
          v71 = *(_DWORD *)v13;
          *v282 = (uint64_t)&v13[v16];
          if (!v71)
          {
            sub_20B51D170(v276, 0);
            v166 = *v7 - 8;
            *v7 = v166;
            v171 = *v8;
            v22 = *v9;
            while (1)
            {
              while (1)
              {
                if (v171 == (void *)v22)
                  goto LABEL_470;
                v173 = *(_DWORD *)(v22 - 8);
                if (v173)
                  break;
                *(_QWORD *)(v166 - 8) += 24;
                v174 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v174;
                if (v174)
                  goto LABEL_318;
LABEL_338:
                v22 = *v9 - 8;
                *v9 = v22;
                v166 = *v7 - 8;
                *v7 = v166;
                v171 = *v8;
              }
              if (v173 == 2)
              {
                *(_QWORD *)(v166 - 8) += 24;
                v172 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v172;
                if (v172)
                  goto LABEL_388;
                goto LABEL_338;
              }
              if (v173 == 1)
                goto LABEL_462;
            }
          }
          v72 = bswap32(v71);
          sub_20B51CFFC(v8, 0, v72);
LABEL_119:
          sub_20B51D170(v276, v72);
LABEL_318:
          v15 = 0;
          v12 = 0;
          *(_DWORD *)(a1 + 32) = 0;
          v11 = *(unsigned __int8 **)(a1 + 16);
          if (v11 == v14)
            goto LABEL_473;
          continue;
        case 30:
          v163 = *(unsigned __int16 *)v13;
          *v282 = (uint64_t)&v13[v16];
          if (v163)
          {
            v38 = __rev16(v163);
            sub_20B51CFFC(v8, 1u, v38);
            goto LABEL_317;
          }
          sub_20B51D500(v276, 0);
          v166 = *v7 - 8;
          *v7 = v166;
          v187 = *v8;
          v22 = *v9;
          while (1)
          {
            while (1)
            {
              if (v187 == (void *)v22)
                goto LABEL_470;
              v189 = *(_DWORD *)(v22 - 8);
              if (v189)
                break;
              *(_QWORD *)(v166 - 8) += 24;
              v190 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v190;
              if (v190)
                goto LABEL_318;
LABEL_380:
              v22 = *v9 - 8;
              *v9 = v22;
              v166 = *v7 - 8;
              *v7 = v166;
              v187 = *v8;
            }
            if (v189 == 2)
            {
              *(_QWORD *)(v166 - 8) += 24;
              v188 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v188;
              if (v188)
                goto LABEL_388;
              goto LABEL_380;
            }
            if (v189 == 1)
              goto LABEL_462;
          }
        case 31:
          v37 = *(_DWORD *)v13;
          *v282 = (uint64_t)&v13[v16];
          if (v37)
          {
            v38 = bswap32(v37);
            sub_20B51CFFC(v8, 1u, v38);
LABEL_317:
            sub_20B51D500(v276, v38);
            goto LABEL_318;
          }
          sub_20B51D500(v276, 0);
          v166 = *v7 - 8;
          *v7 = v166;
          v167 = *v8;
          v22 = *v9;
          while (1)
          {
            while (1)
            {
              if (v167 == (void *)v22)
                goto LABEL_470;
              v169 = *(_DWORD *)(v22 - 8);
              if (v169)
                break;
              *(_QWORD *)(v166 - 8) += 24;
              v170 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v170;
              if (v170)
                goto LABEL_318;
LABEL_328:
              v22 = *v9 - 8;
              *v9 = v22;
              v166 = *v7 - 8;
              *v7 = v166;
              v167 = *v8;
            }
            if (v169 == 2)
            {
              *(_QWORD *)(v166 - 8) += 24;
              v168 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v168;
              if (v168)
                goto LABEL_388;
              goto LABEL_328;
            }
            if (v169 == 1)
              goto LABEL_462;
          }
        case 32:
          sub_20B51CAE0((uint64_t)v276, v13, v16);
          v20 = *v282 + 1;
          *v282 = v20;
          v155 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v157 = *(_DWORD *)(v22 - 8);
            if (v157)
            {
              if (v157 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v156 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v156;
                if (v156)
                  goto LABEL_388;
LABEL_296:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v155 = *v8;
              }
              else if (v157 == 1)
              {
                goto LABEL_446;
              }
              if (v155 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v158 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v158;
          if (!v158)
            goto LABEL_296;
          goto LABEL_318;
        case 33:
          sub_20B51CE2C((uint64_t)v276, v13, v16);
          v20 = *v282 + 1;
          *v282 = v20;
          v159 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v161 = *(_DWORD *)(v22 - 8);
            if (v161)
            {
              if (v161 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v160 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v160;
                if (v160)
                  goto LABEL_388;
LABEL_307:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v159 = *v8;
              }
              else if (v161 == 1)
              {
                goto LABEL_446;
              }
              if (v159 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v162 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v162;
          if (!v162)
            goto LABEL_307;
          goto LABEL_318;
        case 34:
          sub_20B51CCA8((uint64_t)v276, v13, v16);
          v20 = *v282 + 1;
          *v282 = v20;
          v139 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v141 = *(_DWORD *)(v22 - 8);
            if (!v141)
            {
              *(_QWORD *)(*v7 - 8) += 24;
              v142 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v142;
              if (v142)
                goto LABEL_318;
LABEL_259:
              v22 = *v9 - 8;
              *v9 = v22;
              *v7 -= 8;
              v139 = *v8;
LABEL_260:
              if (v139 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          if (v141 != 2)
          {
            if (v141 == 1)
              goto LABEL_446;
            goto LABEL_260;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v140 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v140;
          if (!v140)
            goto LABEL_259;
LABEL_388:
          v15 = 0;
          v12 = 0;
          *(_DWORD *)(v22 - 8) = 1;
          *(_DWORD *)(a1 + 32) = 0;
          v11 = *(unsigned __int8 **)(a1 + 16);
          if (v11 == v14)
            goto LABEL_473;
          break;
        default:
          goto LABEL_537;
      }
    }
    v17 = (char)*v11;
    v18 = *v11;
    if ((v17 & 0x8000000000000000) == 0)
    {
      v19 = *(_QWORD *)(*v7 - 8);
      *(_DWORD *)v19 = 2;
      *(_QWORD *)(v19 + 8) = v18;
      v20 = *v282 + 1;
      *v282 = v20;
      v21 = *v8;
      v22 = *v9;
      if (*v8 == (void *)*v9)
        goto LABEL_464;
      while (1)
      {
        v24 = *(_DWORD *)(v22 - 8);
        if (!v24)
          break;
        if (v24 == 2)
        {
          *(_QWORD *)(*v7 - 8) += 24;
          v23 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v23;
          if (v23)
            goto LABEL_460;
LABEL_11:
          v22 = *v9 - 8;
          *v9 = v22;
          *v7 -= 8;
          v21 = *v8;
          goto LABEL_12;
        }
        if (v24 == 1)
          goto LABEL_446;
LABEL_12:
        if (v21 == (void *)v22)
          goto LABEL_463;
      }
      *(_QWORD *)(*v7 - 8) += 24;
      v25 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v25;
      if (v25)
        goto LABEL_318;
      goto LABEL_11;
    }
    if (v17 >= 0xFFFFFFE0)
    {
      v28 = *(_QWORD *)(*v7 - 8);
      *(_DWORD *)v28 = 3;
      *(_QWORD *)(v28 + 8) = v17;
      v20 = *v282 + 1;
      *v282 = v20;
      v29 = *v8;
      v22 = *v9;
      if (*v8 == (void *)*v9)
        goto LABEL_464;
      while (1)
      {
        v31 = *(_DWORD *)(v22 - 8);
        if (!v31)
          break;
        if (v31 == 2)
        {
          *(_QWORD *)(*v7 - 8) += 24;
          v30 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v30;
          if (v30)
            goto LABEL_460;
LABEL_28:
          v22 = *v9 - 8;
          *v9 = v22;
          *v7 -= 8;
          v29 = *v8;
          goto LABEL_29;
        }
        if (v31 == 1)
          goto LABEL_446;
LABEL_29:
        if (v29 == (void *)v22)
          goto LABEL_463;
      }
      *(_QWORD *)(*v7 - 8) += 24;
      v32 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v32;
      if (v32)
        goto LABEL_318;
      goto LABEL_28;
    }
    if (v18 >= 0xC4)
    {
      *(_QWORD *)(a1 + 24) = dword_20B610A04[(v18 - 196)];
      v15 = *v11 & 0x1F;
LABEL_50:
      *(_DWORD *)(a1 + 32) = v15;
      goto LABEL_5;
    }
    if ((v18 & 0xE0) == 0xA0)
    {
      v36 = v18 & 0x1F;
      *(_QWORD *)(a1 + 24) = v36;
      if ((_DWORD)v36)
      {
        v15 = 32;
        goto LABEL_50;
      }
      sub_20B51CAE0((uint64_t)v276, v13, 0);
      v20 = *v282 + 1;
      *v282 = v20;
      v191 = *v8;
      v22 = *v9;
      if (*v8 == (void *)*v9)
      {
LABEL_464:
        v217 = v20 - *v280;
        v218 = 1;
        a2 = v277;
        *(_QWORD *)(a1 + 88) = v217;
        v219 = v217 > v4;
        v220 = (unsigned __int8 *)(v217 - v4);
        if (!v219)
          goto LABEL_479;
        goto LABEL_478;
      }
      while (1)
      {
        v193 = *(_DWORD *)(v22 - 8);
        if (!v193)
          break;
        if (v193 == 2)
        {
          *(_QWORD *)(*v7 - 8) += 24;
          v192 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v192;
          if (v192)
            goto LABEL_460;
LABEL_393:
          v22 = *v9 - 8;
          *v9 = v22;
          *v7 -= 8;
          v191 = *v8;
          goto LABEL_394;
        }
        if (v193 == 1)
          goto LABEL_446;
LABEL_394:
        if (v191 == (void *)v22)
          goto LABEL_463;
      }
      *(_QWORD *)(*v7 - 8) += 24;
      v194 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v194;
      if (v194)
        goto LABEL_318;
      goto LABEL_393;
    }
    if ((v17 & 0xFFFFFFF0) == 0xFFFFFF90)
    {
      *v282 = (uint64_t)(v11 + 1);
      v164 = v18 & 0xF;
      if ((v18 & 0xF) != 0)
      {
        sub_20B51CFFC(v8, 0, v18 & 0xF);
        sub_20B51D170(v276, v164);
        goto LABEL_318;
      }
      sub_20B51D170(v276, 0);
      v166 = *v7 - 8;
      *v7 = v166;
      v200 = *v8;
      v22 = *v9;
      while (1)
      {
        while (1)
        {
          if (v200 == (void *)v22)
            goto LABEL_470;
          v202 = *(_DWORD *)(v22 - 8);
          if (v202)
            break;
          *(_QWORD *)(v166 - 8) += 24;
          v203 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v203;
          if (v203)
            goto LABEL_318;
LABEL_417:
          v22 = *v9 - 8;
          *v9 = v22;
          v166 = *v7 - 8;
          *v7 = v166;
          v200 = *v8;
        }
        if (v202 == 2)
        {
          *(_QWORD *)(v166 - 8) += 24;
          v201 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v201;
          if (v201)
            goto LABEL_460;
          goto LABEL_417;
        }
        if (v202 == 1)
          goto LABEL_462;
      }
    }
    if (v18 <= 0x8F)
    {
      *v282 = (uint64_t)(v11 + 1);
      v165 = v17 & 0xF;
      if ((v17 & 0xF) != 0)
      {
        sub_20B51CFFC(v8, 1u, v17 & 0xF);
        sub_20B51D500(v276, v165);
        goto LABEL_318;
      }
      sub_20B51D500(v276, 0);
      v166 = *v7 - 8;
      *v7 = v166;
      v204 = *v8;
      v22 = *v9;
      while (1)
      {
        while (1)
        {
          if (v204 == (void *)v22)
          {
LABEL_470:
            v222 = *v282 - *v280;
            v218 = 1;
            a2 = v277;
            *(_QWORD *)(a1 + 88) = v222;
            v219 = v222 > v4;
            v220 = (unsigned __int8 *)(v222 - v4);
            if (!v219)
              goto LABEL_479;
LABEL_478:
            *(_QWORD *)(a1 + 96) += v220;
            goto LABEL_479;
          }
          v206 = *(_DWORD *)(v22 - 8);
          if (v206)
            break;
          *(_QWORD *)(v166 - 8) += 24;
          v207 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v207;
          if (v207)
            goto LABEL_318;
LABEL_427:
          v22 = *v9 - 8;
          *v9 = v22;
          v166 = *v7 - 8;
          *v7 = v166;
          v204 = *v8;
        }
        if (v206 == 2)
        {
          *(_QWORD *)(v166 - 8) += 24;
          v205 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v205;
          if (v205)
            goto LABEL_460;
          goto LABEL_427;
        }
        if (v206 == 1)
          goto LABEL_462;
      }
    }
    if ((_DWORD)v18 != 192)
    {
      if ((_DWORD)v18 != 195)
      {
        if ((_DWORD)v18 != 194)
        {
LABEL_537:
          *(_QWORD *)(a1 + 88) = &v11[-*(_QWORD *)(a1 + 8)];
          sub_20B51CC60();
        }
        v195 = *(_QWORD *)(*v7 - 8);
        *(_DWORD *)v195 = 1;
        *(_BYTE *)(v195 + 8) = 0;
        v20 = *v282 + 1;
        *v282 = v20;
        v196 = *v8;
        v22 = *v9;
        if (*v8 == (void *)*v9)
          goto LABEL_464;
        while (1)
        {
          v198 = *(_DWORD *)(v22 - 8);
          if (!v198)
            break;
          if (v198 == 2)
          {
            *(_QWORD *)(*v7 - 8) += 24;
            v197 = *(_DWORD *)(v22 - 4) - 1;
            *(_DWORD *)(v22 - 4) = v197;
            if (v197)
              goto LABEL_460;
LABEL_407:
            v22 = *v9 - 8;
            *v9 = v22;
            *v7 -= 8;
            v196 = *v8;
            goto LABEL_408;
          }
          if (v198 == 1)
            goto LABEL_446;
LABEL_408:
          if (v196 == (void *)v22)
            goto LABEL_463;
        }
        *(_QWORD *)(*v7 - 8) += 24;
        v199 = *(_DWORD *)(v22 - 4) - 1;
        *(_DWORD *)(v22 - 4) = v199;
        if (v199)
          goto LABEL_318;
        goto LABEL_407;
      }
      v208 = *(_QWORD *)(*v7 - 8);
      *(_DWORD *)v208 = 1;
      *(_BYTE *)(v208 + 8) = 1;
      v20 = *v282 + 1;
      *v282 = v20;
      v209 = *v8;
      v22 = *v9;
      if (*v8 == (void *)*v9)
        goto LABEL_464;
      while (1)
      {
        v211 = *(_DWORD *)(v22 - 8);
        if (!v211)
          break;
        if (v211 == 2)
        {
          *(_QWORD *)(*v7 - 8) += 24;
          v210 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v210;
          if (v210)
            goto LABEL_460;
LABEL_438:
          v22 = *v9 - 8;
          *v9 = v22;
          *v7 -= 8;
          v209 = *v8;
          goto LABEL_439;
        }
        if (v211 == 1)
          goto LABEL_446;
LABEL_439:
        if (v209 == (void *)v22)
          goto LABEL_463;
      }
      *(_QWORD *)(*v7 - 8) += 24;
      v212 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v212;
      if (v212)
        goto LABEL_318;
      goto LABEL_438;
    }
    v166 = *v7;
    **(_DWORD **)(*v7 - 8) = 0;
    v20 = (uint64_t)(v11 + 1);
    *v282 = (uint64_t)(v11 + 1);
    v213 = *v8;
    v22 = *v9;
    if (*v8 == (void *)*v9)
      goto LABEL_464;
    while (1)
    {
      v215 = *(_DWORD *)(v22 - 8);
      if (v215)
        break;
      *(_QWORD *)(v166 - 8) += 24;
      v216 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v216;
      if (v216)
        goto LABEL_318;
LABEL_452:
      v22 = *v9 - 8;
      *v9 = v22;
      v166 = *v7 - 8;
      *v7 = v166;
      v213 = *v8;
LABEL_453:
      if (v213 == (void *)v22)
      {
LABEL_463:
        v20 = *v282;
        goto LABEL_464;
      }
    }
    if (v215 == 2)
    {
      *(_QWORD *)(v166 - 8) += 24;
      v214 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v214;
      if (v214)
      {
LABEL_460:
        v15 = 0;
        v12 = 0;
        *(_DWORD *)(v22 - 8) = 1;
        *(_DWORD *)(a1 + 32) = 0;
        v11 = *(unsigned __int8 **)(a1 + 16);
        if (v11 == v14)
          break;
        goto LABEL_3;
      }
      goto LABEL_452;
    }
    if (v215 != 1)
      goto LABEL_453;
LABEL_462:
    v15 = 0;
    v12 = 0;
LABEL_447:
    *(_QWORD *)(v166 - 8) += 24;
    *(_DWORD *)(v22 - 8) = 2;
    *(_DWORD *)(a1 + 32) = 0;
    v11 = *(unsigned __int8 **)(a1 + 16);
  }
  while (v11 != v14);
LABEL_473:
  v218 = 0;
  v223 = &v14[-*v280];
  a2 = v277;
  *(_QWORD *)(a1 + 88) = v223;
  v219 = (unint64_t)v223 > v4;
  v220 = &v223[-v4];
  if (v219)
    goto LABEL_478;
LABEL_479:
  while (!v218)
  {
    v230 = *(_QWORD **)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    if (v230)
    {
      for (i = (char *)v230[4]; i != (char *)v230[6]; i -= 16)
      {
        v233 = (void (*)(uint64_t))*((_QWORD *)i - 2);
        v232 = *((_QWORD *)i - 1);
        v233(v232);
      }
      free(i);
      v234 = (_QWORD *)v230[3];
      if (v234)
      {
        do
        {
          v235 = (_QWORD *)*v234;
          free(v234);
          v234 = v235;
        }
        while (v235);
      }
      free(v230);
    }
    *(_DWORD *)a2 = 0;
    sub_20B51A40C((_QWORD *)a1, (uint64_t)"RefillBuffer", "");
    if (*(_QWORD *)(a1 + 264) >= 0x400uLL)
      v266 = 1024;
    else
      v266 = *(_QWORD *)(a1 + 264);
    if (*(_QWORD *)(a1 + 80) < v266)
      sub_20B51A0CC((uint64_t)v280, v266);
    std::istream::read();
    v267 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v5 = *(_QWORD *)(a1 + 72) + v267;
    v268 = *(_QWORD *)(a1 + 80) - v267;
    *(_QWORD *)(a1 + 72) = v5;
    *(_QWORD *)(a1 + 80) = v268;
    v4 = *(_QWORD *)(a1 + 88);
    v6 = *(_QWORD *)(a1 + 96) + v5 - v4;
    v9 = v278;
    v8 = v279;
    v10 = *(_QWORD *)(a1 + 64);
    v11 = (unsigned __int8 *)(v10 + v4);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v10 + v4;
    if (v4 != v5)
      goto LABEL_2;
LABEL_476:
    v218 = 0;
    *(_QWORD *)(a1 + 88) = v5;
    v219 = v5 > v4;
    v220 = (unsigned __int8 *)(v5 - v4);
    if (v219)
      goto LABEL_478;
  }
  v224 = *(_QWORD **)(a1 + 248);
  v225 = (void (**)(void *))v224[6];
  if (v225)
  {
    if (*(_BYTE *)(a1 + 240))
    {
      v226 = *(unsigned int **)(a1 + 64);
      v227 = (void (**)(void *))v224[4];
      if (v227 == (void (**)(void *))v224[5])
      {
        v236 = v6;
        v238 = (char *)v227 - (char *)v225;
        v237 = v227 == v225;
        v239 = v227 - v225;
        if (v237)
          v240 = 4;
        else
          v240 = v239;
        v241 = (char *)malloc_type_realloc(v225, 16 * v240, 0x80040803F642BuLL);
        if (!v241)
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v271 = std::bad_alloc::bad_alloc(exception);
          __cxa_throw(v271, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
        }
        v224[5] = &v241[16 * v240];
        v224[6] = v241;
        v227 = (void (**)(void *))&v241[v238];
        *(_QWORD *)&v241[v238] = sub_20B51A0B0;
        v228 = (unsigned int **)&v241[v238 + 8];
        v229 = *(unsigned int **)(a1 + 64);
        a2 = v277;
        v6 = v236;
      }
      else
      {
        *v227 = sub_20B51A0B0;
        v228 = (unsigned int **)(v227 + 1);
        v229 = v226;
      }
      *v228 = v226;
      v224[4] = v227 + 2;
      *(_BYTE *)(a1 + 240) = 0;
      do
        v242 = __ldaxr(v229);
      while (__stlxr(v242 + 1, v229));
    }
    v243 = malloc_type_malloc(0x38uLL, 0x2A498C84uLL);
    v244 = v243;
    if (!v243)
    {
      v274 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v275 = std::bad_alloc::bad_alloc(v274);
      __cxa_throw(v275, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    *v243 = 0x2000;
    v245 = malloc_type_malloc(0x2008uLL, 0x1DB03DE0uLL);
    if (!v245)
    {
      v272 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v273 = std::bad_alloc::bad_alloc(v272);
      __cxa_throw(v273, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v244[3] = v245;
    *v245 = 0;
    v244[1] = 0x2000;
    v244[2] = v245 + 1;
    v244[4] = 0;
    v244[5] = 0;
    v244[6] = 0;
    v246 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 232) = v244;
    *(_QWORD *)(a1 + 248) = v244;
    *(_QWORD *)(a1 + 256) = v244;
    v247 = *(_QWORD **)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v246;
    if (v247)
    {
      for (j = (char *)v247[4]; j != (char *)v247[6]; j -= 16)
      {
        v250 = (void (*)(uint64_t))*((_QWORD *)j - 2);
        v249 = *((_QWORD *)j - 1);
        v250(v249);
      }
      free(j);
      v251 = (_QWORD *)v247[3];
      if (v251)
      {
        do
        {
          v252 = (_QWORD *)*v251;
          free(v251);
          v251 = v252;
        }
        while (v252);
      }
      free(v247);
    }
  }
  *(_OWORD *)a2 = *(_OWORD *)v281;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v281 + 16);
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
  v253 = *(_QWORD **)(a1 + 208);
  v254 = *(_BYTE **)(a1 + 216);
  v255 = v254 - (_BYTE *)v253;
  if (v254 != (_BYTE *)v253)
  {
    if ((unint64_t)v255 >= 9)
    {
      *v7 = (uint64_t)(v253 + 1);
      *(_DWORD *)(a1 + 184) = 0;
      *v253 = v281;
      *(_QWORD *)(a1 + 96) = 0;
      goto LABEL_533;
    }
LABEL_521:
    *(_DWORD *)(a1 + 184) = 0;
    *v253 = v281;
    *(_QWORD *)(a1 + 96) = 0;
    goto LABEL_533;
  }
  v256 = v255 >> 3;
  v257 = 1 - (v255 >> 3);
  v258 = *(_QWORD *)(a1 + 224);
  if (v257 > (v258 - (uint64_t)v254) >> 3)
  {
    v259 = v6;
    v260 = v258 - (_QWORD)v253;
    v261 = v260 >> 2;
    if ((unint64_t)(v260 >> 2) <= 1)
      v261 = 1;
    if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFF8)
      v262 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v262 = v261;
    if (v262 >> 61)
      sub_20AEC60CC();
    v263 = (char *)operator new(8 * v262);
    v264 = 8 * v257;
    v265 = &v263[8 * v256];
    bzero(v265, v264);
    *(_QWORD *)(a1 + 208) = v265;
    *(_QWORD *)(a1 + 216) = &v265[v264];
    *(_QWORD *)(a1 + 224) = &v263[8 * v262];
    v6 = v259;
    if (v254)
      operator delete(v254);
    v253 = *(_QWORD **)(a1 + 208);
    goto LABEL_521;
  }
  if (v255 != 8)
  {
    bzero(*(void **)(a1 + 216), 8 * v257);
    v254 += 8 * v257;
  }
  *v7 = (uint64_t)v254;
  v269 = *(_QWORD **)(a1 + 208);
  *(_DWORD *)(a1 + 184) = 0;
  *v269 = v281;
  *(_QWORD *)(a1 + 96) = 0;
LABEL_533:
  *(_QWORD *)(a1 + 280) += v6 + *(_QWORD *)(a1 + 88) - (*(_QWORD *)(a1 + 96) + *(_QWORD *)(a1 + 72));
}

void sub_20B51CA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_20B51CA64(a11);
  _Unwind_Resume(a1);
}

void sub_20B51CA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_20B51CA64(a11);
  _Unwind_Resume(a1);
}

void sub_20B51CA48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B51CA64(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B51CA64(uint64_t a1)
{
  _QWORD *v2;
  char *i;
  uint64_t v4;
  void (*v5)(uint64_t);
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    for (i = (char *)v2[4]; i != (char *)v2[6]; i -= 16)
    {
      v5 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v4 = *((_QWORD *)i - 1);
      v5(v4);
    }
    free(i);
    v6 = (_QWORD *)v2[3];
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        free(v6);
        v6 = v7;
      }
      while (v7);
    }
    free(v2);
  }
  return a1;
}

void *sub_20B51CAE0(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v3;
  uint64_t v7;
  void *result;
  size_t *v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  BOOL v18;
  _QWORD *v19;
  std::runtime_error *exception;
  std::bad_alloc *v21;
  std::bad_alloc *v22;

  v3 = a3;
  if (*(_QWORD *)(a1 + 32) < (unint64_t)a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20B51CFAC(exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41F6F0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 96) - 8);
  *(_DWORD *)v7 = 5;
  if (*(_QWORD *)a1
    && (result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))a1)(5, a3, *(_QWORD *)(a1 + 8)),
        (_DWORD)result))
  {
    *(_QWORD *)(v7 + 16) = a2;
    *(_BYTE *)(a1 + 120) = 1;
  }
  else
  {
    v9 = *(size_t **)(a1 + 112);
    v11 = v9[1];
    v10 = v9[2];
    v12 = (char *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = &v12[v3 - v10];
    v14 = v11 >= (unint64_t)v13;
    v15 = v11 - (_QWORD)v13;
    if (v14)
    {
      v9[1] = v15;
      v9[2] = (size_t)&v12[v3];
    }
    else
    {
      v16 = v3 + 7;
      v17 = *v9;
      while (v17 < v16)
      {
        v18 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v18)
        {
          v17 = v3 + 7;
          break;
        }
      }
      v19 = malloc_type_malloc(v17 + 8, 0xB5DF8709uLL);
      if (!v19)
      {
        v21 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v22 = std::bad_alloc::bad_alloc(v21);
        __cxa_throw(v22, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      *v19 = v9[3];
      v9[1] = v17 - v16;
      v9[2] = (size_t)v19 + v16 + 8;
      v9[3] = (size_t)v19;
      v12 = (char *)((unint64_t)(v19 + 1) & 0xFFFFFFFFFFFFFFF8);
    }
    result = memcpy(v12, a2, v3);
    *(_QWORD *)(v7 + 16) = v12;
  }
  *(_DWORD *)(v7 + 8) = a3;
  return result;
}

void sub_20B51CC4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B51CC60()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  sub_20B51D840(exception);
  __cxa_throw(exception, (struct type_info *)&unk_24C41F7F0, (void (*)(void *))std::runtime_error::~runtime_error);
}

void sub_20B51CC94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_20B51CCA8(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v3;
  uint64_t v7;
  void *result;
  size_t *v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  BOOL v18;
  _QWORD *v19;
  std::runtime_error *exception;
  std::bad_alloc *v21;
  std::bad_alloc *v22;

  v3 = a3;
  if (*(_QWORD *)(a1 + 48) < (unint64_t)a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20B51D890(exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41F830, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 96) - 8);
  *(_DWORD *)v7 = 9;
  if (*(_QWORD *)a1
    && (result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))a1)(9, a3, *(_QWORD *)(a1 + 8)),
        (_DWORD)result))
  {
    *(_QWORD *)(v7 + 16) = a2;
    *(_BYTE *)(a1 + 120) = 1;
  }
  else
  {
    v9 = *(size_t **)(a1 + 112);
    v11 = v9[1];
    v10 = v9[2];
    v12 = (char *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = &v12[v3 - v10];
    v14 = v11 >= (unint64_t)v13;
    v15 = v11 - (_QWORD)v13;
    if (v14)
    {
      v9[1] = v15;
      v9[2] = (size_t)&v12[v3];
    }
    else
    {
      v16 = v3 + 7;
      v17 = *v9;
      while (v17 < v16)
      {
        v18 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v18)
        {
          v17 = v3 + 7;
          break;
        }
      }
      v19 = malloc_type_malloc(v17 + 8, 0xB5DF8709uLL);
      if (!v19)
      {
        v21 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v22 = std::bad_alloc::bad_alloc(v21);
        __cxa_throw(v22, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      *v19 = v9[3];
      v9[1] = v17 - v16;
      v9[2] = (size_t)v19 + v16 + 8;
      v9[3] = (size_t)v19;
      v12 = (char *)((unint64_t)(v19 + 1) & 0xFFFFFFFFFFFFFFF8);
    }
    result = memcpy(v12, a2, v3);
    *(_QWORD *)(v7 + 16) = v12;
  }
  *(_DWORD *)(v7 + 8) = a3 - 1;
  return result;
}

void sub_20B51CE18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_20B51CE2C(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v3;
  uint64_t v7;
  void *result;
  size_t *v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  BOOL v18;
  _QWORD *v19;
  std::runtime_error *exception;
  std::bad_alloc *v21;
  std::bad_alloc *v22;

  v3 = a3;
  if (*(_QWORD *)(a1 + 40) < (unint64_t)a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20B51D8E0(exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41F870, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 96) - 8);
  *(_DWORD *)v7 = 8;
  if (*(_QWORD *)a1
    && (result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))a1)(8, a3, *(_QWORD *)(a1 + 8)),
        (_DWORD)result))
  {
    *(_QWORD *)(v7 + 16) = a2;
    *(_BYTE *)(a1 + 120) = 1;
  }
  else
  {
    v9 = *(size_t **)(a1 + 112);
    v11 = v9[1];
    v10 = v9[2];
    v12 = (char *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = &v12[v3 - v10];
    v14 = v11 >= (unint64_t)v13;
    v15 = v11 - (_QWORD)v13;
    if (v14)
    {
      v9[1] = v15;
      v9[2] = (size_t)&v12[v3];
    }
    else
    {
      v16 = v3 + 7;
      v17 = *v9;
      while (v17 < v16)
      {
        v18 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v18)
        {
          v17 = v3 + 7;
          break;
        }
      }
      v19 = malloc_type_malloc(v17 + 8, 0xB5DF8709uLL);
      if (!v19)
      {
        v21 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v22 = std::bad_alloc::bad_alloc(v21);
        __cxa_throw(v22, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      *v19 = v9[3];
      v9[1] = v17 - v16;
      v9[2] = (size_t)v19 + v16 + 8;
      v9[3] = (size_t)v19;
      v12 = (char *)((unint64_t)(v19 + 1) & 0xFFFFFFFFFFFFFFF8);
    }
    result = memcpy(v12, a2, v3);
    *(_QWORD *)(v7 + 16) = v12;
  }
  *(_DWORD *)(v7 + 8) = a3;
  return result;
}

void sub_20B51CF98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_20B51CFAC(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "str size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C41F718;
  return result;
}

void sub_20B51CFD8(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B51CFFC(void **a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t *v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;

  v7 = (unint64_t *)a1[1];
  v6 = (unint64_t)a1[2];
  v8 = (char *)v7;
  if ((unint64_t)v7 >= v6)
  {
    v10 = (char *)*a1;
    v11 = (char *)v7 - (_BYTE *)*a1;
    v12 = v11 >> 3;
    v13 = (v11 >> 3) + 1;
    if (v13 >> 61)
      sub_20AEC60B8();
    v14 = v6 - (_QWORD)v10;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        sub_20AEC60CC();
      v16 = operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (unint64_t *)&v16[8 * v12];
    *v17 = a2 | (unint64_t)(a3 << 32);
    v9 = v17 + 1;
    if (v7 != (unint64_t *)v10)
    {
      v18 = (char *)v7 - v10 - 8;
      if (v18 < 0x58)
        goto LABEL_28;
      if ((unint64_t)((char *)v7 - v16 - v11) < 0x20)
        goto LABEL_28;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (char *)&v7[v20 / 0xFFFFFFFFFFFFFFF8];
      v17 = (unint64_t *)((char *)v17 - v20);
      v21 = &v16[8 * v12 - 16];
      v22 = (__int128 *)(v7 - 2);
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v25 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *--v17 = v25;
        }
        while (v8 != v10);
      }
      v8 = (char *)*a1;
    }
    *a1 = v17;
    a1[1] = v9;
    a1[2] = &v16[8 * v15];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v7 = a2 | (unint64_t)(a3 << 32);
    v9 = v7 + 1;
  }
  a1[1] = v9;
}

void sub_20B51D170(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  char *v33;
  unint64_t *v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  std::runtime_error *exception;
  std::runtime_error *v39;
  std::bad_alloc *v40;
  std::bad_alloc *v41;

  if (a1[2] < (unint64_t)a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20B51D460(exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41F730, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v3 = a1[12];
  if (a1[7] < (unint64_t)((v3 - a1[11]) >> 3))
  {
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20B51D48C(v39);
    __cxa_throw(v39, (struct type_info *)&unk_24C41F748, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v4 = *(_QWORD *)(v3 - 8);
  *(_DWORD *)v4 = 6;
  *(_DWORD *)(v4 + 8) = a2;
  if (!a2)
  {
    v9 = 0;
    *(_QWORD *)(v4 + 16) = 0;
    v18 = (unint64_t *)a1[12];
    v17 = a1[13];
    if ((unint64_t)v18 >= v17)
      goto LABEL_16;
    goto LABEL_14;
  }
  v5 = (uint64_t *)a1[14];
  v6 = 24 * a2;
  v8 = v5[1];
  v7 = v5[2];
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 - v7 + v6;
  v11 = v8 >= v10;
  v12 = v8 - v10;
  if (v11)
  {
    v5[1] = v12;
    v5[2] = v9 + v6;
    *(_QWORD *)(v4 + 16) = v9;
    v18 = (unint64_t *)a1[12];
    v17 = a1[13];
    if ((unint64_t)v18 >= v17)
      goto LABEL_16;
LABEL_14:
    *v18 = v9;
    v19 = (uint64_t)(v18 + 1);
    goto LABEL_36;
  }
  v13 = v6 | 7;
  v14 = *v5;
  while (v14 < v13)
  {
    v15 = v14 <= 0;
    v14 *= 2;
    if (v15)
    {
      v14 = v6 | 7;
      break;
    }
  }
  v16 = malloc_type_malloc(v14 + 8, 0xB5DF8709uLL);
  if (!v16)
  {
    v40 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v41 = std::bad_alloc::bad_alloc(v40);
    __cxa_throw(v41, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  *v16 = v5[3];
  v5[1] = v14 - v13;
  v5[2] = (uint64_t)v16 + v13 + 8;
  v5[3] = (uint64_t)v16;
  v9 = (unint64_t)(v16 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v4 + 16) = v9;
  v18 = (unint64_t *)a1[12];
  v17 = a1[13];
  if ((unint64_t)v18 < v17)
    goto LABEL_14;
LABEL_16:
  v20 = (char *)a1[11];
  v21 = ((char *)v18 - v20) >> 3;
  v22 = v21 + 1;
  if ((unint64_t)(v21 + 1) >> 61)
    sub_20AEC60B8();
  v23 = v17 - (_QWORD)v20;
  if (v23 >> 2 > v22)
    v22 = v23 >> 2;
  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
    v24 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v24 = v22;
  if (v24)
  {
    if (v24 >> 61)
      sub_20AEC60CC();
    v25 = (char *)operator new(8 * v24);
    v26 = (unint64_t *)&v25[8 * v21];
    v27 = &v25[8 * v24];
    *v26 = v9;
    v19 = (uint64_t)(v26 + 1);
    v28 = (char *)((char *)v18 - v20);
    if (v18 == (unint64_t *)v20)
      goto LABEL_34;
    goto LABEL_27;
  }
  v25 = 0;
  v26 = (unint64_t *)(8 * v21);
  v27 = 0;
  *(_QWORD *)(8 * v21) = v9;
  v19 = 8 * v21 + 8;
  v28 = (char *)((char *)v18 - v20);
  if (v18 != (unint64_t *)v20)
  {
LABEL_27:
    v29 = (unint64_t)(v28 - 8);
    if (v29 < 0x58)
      goto LABEL_44;
    if ((unint64_t)(v20 - v25) < 0x20)
      goto LABEL_44;
    v30 = (v29 >> 3) + 1;
    v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    v32 = &v18[v31 / 0xFFFFFFFFFFFFFFF8];
    v26 = (unint64_t *)((char *)v26 - v31);
    v33 = &v25[8 * v21 - 16];
    v34 = v18 - 2;
    v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v36 = *(_OWORD *)v34;
      *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
      *(_OWORD *)v33 = v36;
      v33 -= 32;
      v34 -= 4;
      v35 -= 4;
    }
    while (v35);
    v18 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
      {
        v37 = *--v18;
        *--v26 = v37;
      }
      while (v18 != (unint64_t *)v20);
    }
    v18 = (unint64_t *)a1[11];
  }
LABEL_34:
  a1[11] = v26;
  a1[12] = v19;
  a1[13] = v27;
  if (v18)
    operator delete(v18);
LABEL_36:
  a1[12] = v19;
}

void sub_20B51D438(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B51D44C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_20B51D460(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "array size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C41F770;
  return result;
}

std::runtime_error *sub_20B51D48C(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "depth size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C41F798;
  return result;
}

void sub_20B51D4B8(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B51D4DC(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B51D500(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  char *v33;
  unint64_t *v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  std::runtime_error *exception;
  std::runtime_error *v39;
  std::bad_alloc *v40;
  std::bad_alloc *v41;

  if (a1[3] < (unint64_t)a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20B51D7F0(exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C41F7B0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v3 = a1[12];
  if (a1[7] < (unint64_t)((v3 - a1[11]) >> 3))
  {
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20B51D48C(v39);
    __cxa_throw(v39, (struct type_info *)&unk_24C41F748, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v4 = *(_QWORD *)(v3 - 8);
  *(_DWORD *)v4 = 7;
  *(_DWORD *)(v4 + 8) = a2;
  if (!a2)
  {
    v9 = 0;
    *(_QWORD *)(v4 + 16) = 0;
    v18 = (unint64_t *)a1[12];
    v17 = a1[13];
    if ((unint64_t)v18 >= v17)
      goto LABEL_16;
    goto LABEL_14;
  }
  v5 = (uint64_t *)a1[14];
  v6 = 48 * a2;
  v8 = v5[1];
  v7 = v5[2];
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 - v7 + v6;
  v11 = v8 >= v10;
  v12 = v8 - v10;
  if (v11)
  {
    v5[1] = v12;
    v5[2] = v9 + v6;
    *(_QWORD *)(v4 + 16) = v9;
    v18 = (unint64_t *)a1[12];
    v17 = a1[13];
    if ((unint64_t)v18 >= v17)
      goto LABEL_16;
LABEL_14:
    *v18 = v9;
    v19 = (uint64_t)(v18 + 1);
    goto LABEL_36;
  }
  v13 = v6 | 7;
  v14 = *v5;
  while (v14 < v13)
  {
    v15 = v14 <= 0;
    v14 *= 2;
    if (v15)
    {
      v14 = v6 | 7;
      break;
    }
  }
  v16 = malloc_type_malloc(v14 + 8, 0xB5DF8709uLL);
  if (!v16)
  {
    v40 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v41 = std::bad_alloc::bad_alloc(v40);
    __cxa_throw(v41, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  *v16 = v5[3];
  v5[1] = v14 - v13;
  v5[2] = (uint64_t)v16 + v13 + 8;
  v5[3] = (uint64_t)v16;
  v9 = (unint64_t)(v16 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v4 + 16) = v9;
  v18 = (unint64_t *)a1[12];
  v17 = a1[13];
  if ((unint64_t)v18 < v17)
    goto LABEL_14;
LABEL_16:
  v20 = (char *)a1[11];
  v21 = ((char *)v18 - v20) >> 3;
  v22 = v21 + 1;
  if ((unint64_t)(v21 + 1) >> 61)
    sub_20AEC60B8();
  v23 = v17 - (_QWORD)v20;
  if (v23 >> 2 > v22)
    v22 = v23 >> 2;
  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
    v24 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v24 = v22;
  if (v24)
  {
    if (v24 >> 61)
      sub_20AEC60CC();
    v25 = (char *)operator new(8 * v24);
    v26 = (unint64_t *)&v25[8 * v21];
    v27 = &v25[8 * v24];
    *v26 = v9;
    v19 = (uint64_t)(v26 + 1);
    v28 = (char *)((char *)v18 - v20);
    if (v18 == (unint64_t *)v20)
      goto LABEL_34;
    goto LABEL_27;
  }
  v25 = 0;
  v26 = (unint64_t *)(8 * v21);
  v27 = 0;
  *(_QWORD *)(8 * v21) = v9;
  v19 = 8 * v21 + 8;
  v28 = (char *)((char *)v18 - v20);
  if (v18 != (unint64_t *)v20)
  {
LABEL_27:
    v29 = (unint64_t)(v28 - 8);
    if (v29 < 0x58)
      goto LABEL_44;
    if ((unint64_t)(v20 - v25) < 0x20)
      goto LABEL_44;
    v30 = (v29 >> 3) + 1;
    v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    v32 = &v18[v31 / 0xFFFFFFFFFFFFFFF8];
    v26 = (unint64_t *)((char *)v26 - v31);
    v33 = &v25[8 * v21 - 16];
    v34 = v18 - 2;
    v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v36 = *(_OWORD *)v34;
      *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
      *(_OWORD *)v33 = v36;
      v33 -= 32;
      v34 -= 4;
      v35 -= 4;
    }
    while (v35);
    v18 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
      {
        v37 = *--v18;
        *--v26 = v37;
      }
      while (v18 != (unint64_t *)v20);
    }
    v18 = (unint64_t *)a1[11];
  }
LABEL_34:
  a1[11] = v26;
  a1[12] = v19;
  a1[13] = v27;
  if (v18)
    operator delete(v18);
LABEL_36:
  a1[12] = v19;
}

void sub_20B51D7C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B51D7DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_20B51D7F0(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "map size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C41F7D8;
  return result;
}

void sub_20B51D81C(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x20BD3583CLL);
}

std::runtime_error *sub_20B51D840(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "parse error");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C41F818;
  return result;
}

void sub_20B51D86C(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x20BD3583CLL);
}

std::runtime_error *sub_20B51D890(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "ext size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C41F858;
  return result;
}

void sub_20B51D8BC(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x20BD3583CLL);
}

std::runtime_error *sub_20B51D8E0(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "bin size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C41F898;
  return result;
}

void sub_20B51D90C(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t **sub_20B51D930(uint64_t a1, uint64_t **a2, unsigned int *a3)
{
  const void *v5;
  size_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  BOOL v12;
  char *v13;
  std::bad_alloc *exception;
  std::bad_alloc *v16;

  sub_20B51DA24(a2, *a3);
  v5 = (const void *)*((_QWORD *)a3 + 1);
  v6 = *a3;
  v7 = *a2;
  v8 = (*a2)[2];
  v9 = **a2;
  if (v8 - v9 >= v6)
  {
    v13 = (char *)v7[1];
  }
  else
  {
    if (v8)
      v10 = 2 * v8;
    else
      v10 = 0x2000;
    v11 = v9 + v6;
    while (v10 < v11)
    {
      v12 = (uint64_t)v10 <= 0;
      v10 *= 2;
      if (v12)
      {
        v10 = v11;
        break;
      }
    }
    v13 = (char *)malloc_type_realloc((void *)v7[1], v10, 0xAD6A59EEuLL);
    if (!v13)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v16 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v16, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v7[1] = (uint64_t)v13;
    v7[2] = v10;
    v9 = *v7;
  }
  memcpy(&v13[v9], v5, v6);
  *v7 += v6;
  return a2;
}

uint64_t **sub_20B51DA24(uint64_t **a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  BOOL v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  char *v22;
  char *v23;
  char *v24;
  std::bad_alloc *exception;
  std::bad_alloc *v27;

  if (a2 > 0xFF)
  {
    if (!HIWORD(a2))
    {
      v4 = *a1;
      v11 = (*a1)[2];
      v12 = **a1;
      if ((unint64_t)(v11 - v12) >= 3)
      {
        v15 = (char *)v4[1];
      }
      else
      {
        if (v11)
          v13 = 2 * v11;
        else
          v13 = 0x2000;
        v14 = v12 + 3;
        while (v13 < v14)
        {
          v9 = (uint64_t)v13 <= 0;
          v13 *= 2;
          if (v9)
          {
            v13 = v14;
            break;
          }
        }
        v15 = (char *)malloc_type_realloc((void *)v4[1], v13, 0xAD6A59EEuLL);
        if (!v15)
          goto LABEL_43;
        v4[1] = (uint64_t)v15;
        v4[2] = v13;
        v12 = *v4;
      }
      v23 = &v15[v12];
      *v23 = -59;
      *(_WORD *)(v23 + 1) = bswap32(a2) >> 16;
      v17 = 3;
      goto LABEL_42;
    }
    v4 = *a1;
    v18 = (*a1)[2];
    v19 = **a1;
    if ((unint64_t)(v18 - v19) >= 5)
    {
      v22 = (char *)v4[1];
    }
    else
    {
      if (v18)
        v20 = 2 * v18;
      else
        v20 = 0x2000;
      v21 = v19 + 5;
      while (v20 < v21)
      {
        v9 = (uint64_t)v20 <= 0;
        v20 *= 2;
        if (v9)
        {
          v20 = v21;
          break;
        }
      }
      v22 = (char *)malloc_type_realloc((void *)v4[1], v20, 0xAD6A59EEuLL);
      if (!v22)
        goto LABEL_43;
      v4[1] = (uint64_t)v22;
      v4[2] = v20;
      v19 = *v4;
    }
    v24 = &v22[v19];
    *v24 = -58;
    *(_DWORD *)(v24 + 1) = bswap32(a2);
    v17 = 5;
    goto LABEL_42;
  }
  v4 = *a1;
  v5 = (*a1)[2];
  v6 = **a1;
  if ((unint64_t)(v5 - v6) >= 2)
  {
    v10 = (char *)v4[1];
    goto LABEL_26;
  }
  if (v5)
    v7 = 2 * v5;
  else
    v7 = 0x2000;
  v8 = v6 + 2;
  while (v7 < v8)
  {
    v9 = (uint64_t)v7 <= 0;
    v7 *= 2;
    if (v9)
    {
      v7 = v8;
      break;
    }
  }
  v10 = (char *)malloc_type_realloc((void *)v4[1], v7, 0xAD6A59EEuLL);
  if (!v10)
  {
LABEL_43:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v27 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v27, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v4[1] = (uint64_t)v10;
  v4[2] = v7;
  v6 = *v4;
LABEL_26:
  v16 = &v10[v6];
  *v16 = -60;
  v16[1] = a2;
  v17 = 2;
LABEL_42:
  *v4 += v17;
  return a1;
}

char *sub_20B51DC2C(uint64_t **a1, int a2)
{
  char v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  BOOL v8;
  char *result;
  size_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  v2 = a2;
  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 > -33)
  {
    if (v4 == v5)
    {
      if (v4)
        v10 = 2 * v4;
      else
        v10 = 0x2000;
      while (v10 < v4 + 1)
      {
        v8 = (uint64_t)v10 <= 0;
        v10 *= 2;
        if (v8)
        {
          v10 = v4 + 1;
          break;
        }
      }
      result = (char *)malloc_type_realloc((void *)v3[1], v10, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_28;
      v3[1] = (uint64_t)result;
      v3[2] = v10;
      v5 = *v3;
    }
    else
    {
      result = (char *)v3[1];
    }
    v12 = &result[v5];
    v13 = 1;
    goto LABEL_27;
  }
  if ((unint64_t)(v4 - v5) >= 2)
  {
    result = (char *)v3[1];
    goto LABEL_24;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  v7 = v5 + 2;
  while (v6 < v7)
  {
    v8 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v8)
    {
      v6 = v7;
      break;
    }
  }
  result = (char *)malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_28:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v15 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v15, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_24:
  v11 = &result[v5];
  *v11 = -48;
  v12 = v11 + 1;
  v13 = 2;
LABEL_27:
  *v12 = v2;
  *v3 += v13;
  return result;
}

char *sub_20B51DD74(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  BOOL v7;
  char *result;
  size_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 < 0)
  {
    if ((unint64_t)(v4 - v5) >= 2)
    {
      result = (char *)v3[1];
    }
    else
    {
      if (v4)
        v9 = 2 * v4;
      else
        v9 = 0x2000;
      v10 = v5 + 2;
      while (v9 < v10)
      {
        v7 = (uint64_t)v9 <= 0;
        v9 *= 2;
        if (v7)
        {
          v9 = v10;
          break;
        }
      }
      result = (char *)malloc_type_realloc((void *)v3[1], v9, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_28;
      v3[1] = (uint64_t)result;
      v3[2] = v9;
      v5 = *v3;
    }
    v13 = &result[v5];
    *v13 = -52;
    v11 = v13 + 1;
    v12 = 2;
    goto LABEL_27;
  }
  if (v4 != v5)
  {
    result = (char *)v3[1];
    goto LABEL_24;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  while (v6 < v4 + 1)
  {
    v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      v6 = v4 + 1;
      break;
    }
  }
  result = (char *)malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_28:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v15 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v15, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_24:
  v11 = &result[v5];
  v12 = 1;
LABEL_27:
  *v11 = a2;
  *v3 += v12;
  return result;
}

_BYTE *sub_20B51DEB8(uint64_t **a1, signed int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  BOOL v9;
  _BYTE *result;
  size_t v11;
  size_t v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  unsigned int v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char v22;
  size_t v23;
  size_t v24;
  std::bad_alloc *exception;
  std::bad_alloc *v26;

  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 <= -33)
  {
    v6 = v4 - v5;
    if (a2 <= 0xFFFFFF7F)
    {
      if (v6 >= 3)
      {
        result = (_BYTE *)v3[1];
        goto LABEL_49;
      }
      if (v4)
        v7 = 2 * v4;
      else
        v7 = 0x2000;
      v8 = v5 + 3;
      while (v7 < v8)
      {
        v9 = (uint64_t)v7 <= 0;
        v7 *= 2;
        if (v9)
        {
          v7 = v8;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v7, 0xAD6A59EEuLL);
      if (result)
      {
        v3[1] = (uint64_t)result;
        v3[2] = v7;
        v5 = *v3;
LABEL_49:
        v17 = bswap32(a2) >> 16;
        v18 = &result[v5];
        v19 = -47;
LABEL_70:
        *v18 = v19;
        *(_WORD *)(v18 + 1) = v17;
        v20 = 3;
        goto LABEL_71;
      }
LABEL_72:
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v26 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v26, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    if (v6 >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v4)
        v12 = 2 * v4;
      else
        v12 = 0x2000;
      v13 = v5 + 2;
      while (v12 < v13)
      {
        v9 = (uint64_t)v12 <= 0;
        v12 *= 2;
        if (v9)
        {
          v12 = v13;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v12, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_72;
      v3[1] = (uint64_t)result;
      v3[2] = v12;
      v5 = *v3;
    }
    v21 = &result[v5];
    v22 = -48;
LABEL_67:
    *v21 = v22;
    v21[1] = a2;
    v20 = 2;
    goto LABEL_71;
  }
  if (a2 > 127)
  {
    v14 = v4 - v5;
    if (a2 > 0xFF)
    {
      if (v14 >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v4)
          v23 = 2 * v4;
        else
          v23 = 0x2000;
        v24 = v5 + 3;
        while (v23 < v24)
        {
          v9 = (uint64_t)v23 <= 0;
          v23 *= 2;
          if (v9)
          {
            v23 = v24;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v23, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_72;
        v3[1] = (uint64_t)result;
        v3[2] = v23;
        v5 = *v3;
      }
      v17 = bswap32(a2) >> 16;
      v18 = &result[v5];
      v19 = -51;
      goto LABEL_70;
    }
    if (v14 >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v4)
        v15 = 2 * v4;
      else
        v15 = 0x2000;
      v16 = v5 + 2;
      while (v15 < v16)
      {
        v9 = (uint64_t)v15 <= 0;
        v15 *= 2;
        if (v9)
        {
          v15 = v16;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v15, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_72;
      v3[1] = (uint64_t)result;
      v3[2] = v15;
      v5 = *v3;
    }
    v21 = &result[v5];
    v22 = -52;
    goto LABEL_67;
  }
  if (v4 == v5)
  {
    if (v4)
      v11 = 2 * v4;
    else
      v11 = 0x2000;
    while (v11 < v4 + 1)
    {
      v9 = (uint64_t)v11 <= 0;
      v11 *= 2;
      if (v9)
      {
        v11 = v4 + 1;
        break;
      }
    }
    result = malloc_type_realloc((void *)v3[1], v11, 0xAD6A59EEuLL);
    if (!result)
      goto LABEL_72;
    v3[1] = (uint64_t)result;
    v3[2] = v11;
    v5 = *v3;
  }
  else
  {
    result = (_BYTE *)v3[1];
  }
  result[v5] = a2;
  v20 = 1;
LABEL_71:
  *v3 += v20;
  return result;
}

uint64_t sub_20B51E17C()
{
  return std::ostream::write();
}

_BYTE *sub_20B51E278(uint64_t **a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  BOOL v7;
  _BYTE *result;
  unint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  _BYTE *v15;
  char *v16;
  std::bad_alloc *exception;
  std::bad_alloc *v18;

  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 > 0x7F)
  {
    v9 = v4 - v5;
    if (a2 <= 0xFF)
    {
      if (v9 >= 2)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v4)
          v10 = 2 * v4;
        else
          v10 = 0x2000;
        v11 = v5 + 2;
        while (v10 < v11)
        {
          v7 = (uint64_t)v10 <= 0;
          v10 *= 2;
          if (v7)
          {
            v10 = v11;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v10, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_42;
        v3[1] = (uint64_t)result;
        v3[2] = v10;
        v5 = *v3;
      }
      v15 = &result[v5];
      *v15 = -52;
      v15[1] = a2;
      v12 = 2;
      goto LABEL_41;
    }
    if (v9 >= 3)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v4)
        v13 = 2 * v4;
      else
        v13 = 0x2000;
      v14 = v5 + 3;
      while (v13 < v14)
      {
        v7 = (uint64_t)v13 <= 0;
        v13 *= 2;
        if (v7)
        {
          v13 = v14;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v13, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_42;
      v3[1] = (uint64_t)result;
      v3[2] = v13;
      v5 = *v3;
    }
    v16 = &result[v5];
    *v16 = -51;
    *(_WORD *)(v16 + 1) = __rev16(a2);
    v12 = 3;
    goto LABEL_41;
  }
  if (v4 != v5)
  {
    result = (_BYTE *)v3[1];
    goto LABEL_25;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  while (v6 < v4 + 1)
  {
    v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      v6 = v4 + 1;
      break;
    }
  }
  result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_42:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v18 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v18, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_25:
  result[v5] = a2;
  v12 = 1;
LABEL_41:
  *v3 += v12;
  return result;
}

_BYTE *sub_20B51E444(uint64_t **a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  BOOL v8;
  _BYTE *result;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  unsigned int v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  size_t v32;
  unsigned int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  size_t v41;
  std::bad_alloc *exception;
  std::bad_alloc *v43;

  if ((int)a2 > -33)
  {
    if ((int)a2 <= 127)
    {
      v3 = *a1;
      v10 = (*a1)[2];
      v11 = **a1;
      if (v10 == v11)
      {
        if (v10)
          v12 = 2 * v10;
        else
          v12 = 0x2000;
        while (v12 < v10 + 1)
        {
          v8 = (uint64_t)v12 <= 0;
          v12 *= 2;
          if (v8)
          {
            v12 = v10 + 1;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v12, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_101;
        v3[1] = (uint64_t)result;
        v3[2] = v12;
        v11 = *v3;
      }
      else
      {
        result = (_BYTE *)v3[1];
      }
      result[v11] = a2;
      v24 = 1;
      goto LABEL_98;
    }
    if (a2 > 0xFF)
    {
      if (HIWORD(a2))
      {
        v3 = *a1;
        v38 = (*a1)[2];
        v39 = **a1;
        if ((unint64_t)(v38 - v39) >= 5)
        {
          result = (_BYTE *)v3[1];
        }
        else
        {
          if (v38)
            v40 = 2 * v38;
          else
            v40 = 0x2000;
          v41 = v39 + 5;
          while (v40 < v41)
          {
            v8 = (uint64_t)v40 <= 0;
            v40 *= 2;
            if (v8)
            {
              v40 = v41;
              break;
            }
          }
          result = malloc_type_realloc((void *)v3[1], v40, 0xAD6A59EEuLL);
          if (!result)
            goto LABEL_101;
          v3[1] = (uint64_t)result;
          v3[2] = v40;
          v39 = *v3;
        }
        v21 = bswap32(a2);
        v22 = &result[v39];
        v23 = -50;
        goto LABEL_51;
      }
      v3 = *a1;
      v29 = (*a1)[2];
      v30 = **a1;
      if ((unint64_t)(v29 - v30) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v29)
          v31 = 2 * v29;
        else
          v31 = 0x2000;
        v32 = v30 + 3;
        while (v31 < v32)
        {
          v8 = (uint64_t)v31 <= 0;
          v31 *= 2;
          if (v8)
          {
            v31 = v32;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v31, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_101;
        v3[1] = (uint64_t)result;
        v3[2] = v31;
        v30 = *v3;
      }
      v33 = bswap32(a2) >> 16;
      v34 = &result[v30];
      v35 = -51;
LABEL_97:
      *v34 = v35;
      *(_WORD *)(v34 + 1) = v33;
      v24 = 3;
      goto LABEL_98;
    }
    v3 = *a1;
    v17 = (*a1)[2];
    v18 = **a1;
    if ((unint64_t)(v17 - v18) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v17)
        v19 = 2 * v17;
      else
        v19 = 0x2000;
      v20 = v18 + 2;
      while (v19 < v20)
      {
        v8 = (uint64_t)v19 <= 0;
        v19 *= 2;
        if (v8)
        {
          v19 = v20;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v19, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_101;
      v3[1] = (uint64_t)result;
      v3[2] = v19;
      v18 = *v3;
    }
    v36 = &result[v18];
    v37 = -52;
LABEL_83:
    *v36 = v37;
    v36[1] = a2;
    v24 = 2;
    goto LABEL_98;
  }
  if (a2 > 0xFFFF7FFF)
  {
    if (a2 <= 0xFFFFFF7F)
    {
      v3 = *a1;
      v13 = (*a1)[2];
      v14 = **a1;
      if ((unint64_t)(v13 - v14) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v13)
          v15 = 2 * v13;
        else
          v15 = 0x2000;
        v16 = v14 + 3;
        while (v15 < v16)
        {
          v8 = (uint64_t)v15 <= 0;
          v15 *= 2;
          if (v8)
          {
            v15 = v16;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v15, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_101;
        v3[1] = (uint64_t)result;
        v3[2] = v15;
        v14 = *v3;
      }
      v33 = bswap32(a2) >> 16;
      v34 = &result[v14];
      v35 = -47;
      goto LABEL_97;
    }
    v3 = *a1;
    v25 = (*a1)[2];
    v26 = **a1;
    if ((unint64_t)(v25 - v26) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v25)
        v27 = 2 * v25;
      else
        v27 = 0x2000;
      v28 = v26 + 2;
      while (v27 < v28)
      {
        v8 = (uint64_t)v27 <= 0;
        v27 *= 2;
        if (v8)
        {
          v27 = v28;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v27, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_101;
      v3[1] = (uint64_t)result;
      v3[2] = v27;
      v26 = *v3;
    }
    v36 = &result[v26];
    v37 = -48;
    goto LABEL_83;
  }
  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if ((unint64_t)(v4 - v5) >= 5)
  {
    result = (_BYTE *)v3[1];
    goto LABEL_50;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  v7 = v5 + 5;
  while (v6 < v7)
  {
    v8 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v8)
    {
      v6 = v7;
      break;
    }
  }
  result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_101:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v43 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v43, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_50:
  v21 = bswap32(a2);
  v22 = &result[v5];
  v23 = -46;
LABEL_51:
  *v22 = v23;
  *(_DWORD *)(v22 + 1) = v21;
  v24 = 5;
LABEL_98:
  *v3 += v24;
  return result;
}

uint64_t sub_20B51E860()
{
  return std::ostream::write();
}

_BYTE *sub_20B51E95C(uint64_t **a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  BOOL v7;
  _BYTE *result;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  char *v22;
  std::bad_alloc *exception;
  std::bad_alloc *v24;

  if (a2 > 0xFF)
  {
    if (!HIWORD(a2))
    {
      v3 = *a1;
      v9 = (*a1)[2];
      v10 = **a1;
      if ((unint64_t)(v9 - v10) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v9)
          v11 = 2 * v9;
        else
          v11 = 0x2000;
        v12 = v10 + 3;
        while (v11 < v12)
        {
          v7 = (uint64_t)v11 <= 0;
          v11 *= 2;
          if (v7)
          {
            v11 = v12;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v11, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_56;
        v3[1] = (uint64_t)result;
        v3[2] = v11;
        v10 = *v3;
      }
      v20 = &result[v10];
      *v20 = -51;
      *(_WORD *)(v20 + 1) = bswap32(a2) >> 16;
      v19 = 3;
      goto LABEL_55;
    }
    v3 = *a1;
    v15 = (*a1)[2];
    v16 = **a1;
    if ((unint64_t)(v15 - v16) >= 5)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v15)
        v17 = 2 * v15;
      else
        v17 = 0x2000;
      v18 = v16 + 5;
      while (v17 < v18)
      {
        v7 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v7)
        {
          v17 = v18;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v17, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_56;
      v3[1] = (uint64_t)result;
      v3[2] = v17;
      v16 = *v3;
    }
    v22 = &result[v16];
    *v22 = -50;
    *(_DWORD *)(v22 + 1) = bswap32(a2);
    v19 = 5;
    goto LABEL_55;
  }
  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 > 0x7F)
  {
    if ((unint64_t)(v4 - v5) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v4)
        v13 = 2 * v4;
      else
        v13 = 0x2000;
      v14 = v5 + 2;
      while (v13 < v14)
      {
        v7 = (uint64_t)v13 <= 0;
        v13 *= 2;
        if (v7)
        {
          v13 = v14;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v13, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_56;
      v3[1] = (uint64_t)result;
      v3[2] = v13;
      v5 = *v3;
    }
    v21 = &result[v5];
    *v21 = -52;
    v21[1] = a2;
    v19 = 2;
    goto LABEL_55;
  }
  if (v4 != v5)
  {
    result = (_BYTE *)v3[1];
    goto LABEL_48;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  while (v6 < v4 + 1)
  {
    v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      v6 = v4 + 1;
      break;
    }
  }
  result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_56:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v24 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v24, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_48:
  result[v5] = a2;
  v19 = 1;
LABEL_55:
  *v3 += v19;
  return result;
}

uint64_t sub_20B51EBD0(uint64_t a1, uint64_t a2)
{
  std::ostream::write();
  return a2;
}

_BYTE *sub_20B51ECC0(uint64_t **a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  BOOL v8;
  _BYTE *result;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  unint64_t v34;
  char *v35;
  char v36;
  unsigned int v37;
  char *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  unsigned int v44;
  char *v45;
  char v46;
  char *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  size_t v52;
  std::bad_alloc *exception;
  std::bad_alloc *v54;

  if ((uint64_t)a2 <= -33)
  {
    if (a2 <= 0xFFFFFFFFFFFF7FFFLL)
    {
      if (a2 <= 0xFFFFFFFF7FFFFFFFLL)
      {
        v3 = *a1;
        v4 = (*a1)[2];
        v5 = **a1;
        if ((unint64_t)(v4 - v5) >= 9)
        {
          result = (_BYTE *)v3[1];
          goto LABEL_88;
        }
        if (v4)
          v6 = 2 * v4;
        else
          v6 = 0x2000;
        v7 = v5 + 9;
        while (v6 < v7)
        {
          v8 = (uint64_t)v6 <= 0;
          v6 *= 2;
          if (v8)
          {
            v6 = v7;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
        if (result)
        {
          v3[1] = (uint64_t)result;
          v3[2] = v6;
          v5 = *v3;
LABEL_88:
          v34 = bswap64(a2);
          v35 = &result[v5];
          v36 = -45;
LABEL_128:
          *v35 = v36;
          *(_QWORD *)(v35 + 1) = v34;
          v25 = 9;
          goto LABEL_129;
        }
LABEL_130:
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v54 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v54, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      v3 = *a1;
      v21 = (*a1)[2];
      v22 = **a1;
      if ((unint64_t)(v21 - v22) >= 5)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v21)
          v23 = 2 * v21;
        else
          v23 = 0x2000;
        v24 = v22 + 5;
        while (v23 < v24)
        {
          v8 = (uint64_t)v23 <= 0;
          v23 *= 2;
          if (v8)
          {
            v23 = v24;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v23, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_130;
        v3[1] = (uint64_t)result;
        v3[2] = v23;
        v22 = *v3;
      }
      v44 = bswap32(a2);
      v45 = &result[v22];
      v46 = -46;
LABEL_122:
      *v45 = v46;
      *(_DWORD *)(v45 + 1) = v44;
      v25 = 5;
      goto LABEL_129;
    }
    if (a2 <= 0xFFFFFFFFFFFFFF7FLL)
    {
      v3 = *a1;
      v13 = (*a1)[2];
      v14 = **a1;
      if ((unint64_t)(v13 - v14) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v13)
          v15 = 2 * v13;
        else
          v15 = 0x2000;
        v16 = v14 + 3;
        while (v15 < v16)
        {
          v8 = (uint64_t)v15 <= 0;
          v15 *= 2;
          if (v8)
          {
            v15 = v16;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v15, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_130;
        v3[1] = (uint64_t)result;
        v3[2] = v15;
        v14 = *v3;
      }
      v37 = bswap32(a2) >> 16;
      v38 = &result[v14];
      v39 = -47;
LABEL_125:
      *v38 = v39;
      *(_WORD *)(v38 + 1) = v37;
      v25 = 3;
      goto LABEL_129;
    }
    v3 = *a1;
    v26 = (*a1)[2];
    v27 = **a1;
    if ((unint64_t)(v26 - v27) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v26)
        v28 = 2 * v26;
      else
        v28 = 0x2000;
      v29 = v27 + 2;
      while (v28 < v29)
      {
        v8 = (uint64_t)v28 <= 0;
        v28 *= 2;
        if (v8)
        {
          v28 = v29;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v28, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_130;
      v3[1] = (uint64_t)result;
      v3[2] = v28;
      v27 = *v3;
    }
    v47 = &result[v27];
    v48 = -48;
LABEL_119:
    *v47 = v48;
    v47[1] = a2;
    v25 = 2;
    goto LABEL_129;
  }
  if ((uint64_t)a2 > 127)
  {
    if (a2 >> 16)
    {
      if (HIDWORD(a2))
      {
        v3 = *a1;
        v49 = (*a1)[2];
        v50 = **a1;
        if ((unint64_t)(v49 - v50) >= 9)
        {
          result = (_BYTE *)v3[1];
        }
        else
        {
          if (v49)
            v51 = 2 * v49;
          else
            v51 = 0x2000;
          v52 = v50 + 9;
          while (v51 < v52)
          {
            v8 = (uint64_t)v51 <= 0;
            v51 *= 2;
            if (v8)
            {
              v51 = v52;
              break;
            }
          }
          result = malloc_type_realloc((void *)v3[1], v51, 0xAD6A59EEuLL);
          if (!result)
            goto LABEL_130;
          v3[1] = (uint64_t)result;
          v3[2] = v51;
          v50 = *v3;
        }
        v34 = bswap64(a2);
        v35 = &result[v50];
        v36 = -49;
        goto LABEL_128;
      }
      v3 = *a1;
      v30 = (*a1)[2];
      v31 = **a1;
      if ((unint64_t)(v30 - v31) >= 5)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v30)
          v32 = 2 * v30;
        else
          v32 = 0x2000;
        v33 = v31 + 5;
        while (v32 < v33)
        {
          v8 = (uint64_t)v32 <= 0;
          v32 *= 2;
          if (v8)
          {
            v32 = v33;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v32, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_130;
        v3[1] = (uint64_t)result;
        v3[2] = v32;
        v31 = *v3;
      }
      v44 = bswap32(a2);
      v45 = &result[v31];
      v46 = -50;
      goto LABEL_122;
    }
    if (a2 > 0xFF)
    {
      v3 = *a1;
      v40 = (*a1)[2];
      v41 = **a1;
      if ((unint64_t)(v40 - v41) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v40)
          v42 = 2 * v40;
        else
          v42 = 0x2000;
        v43 = v41 + 3;
        while (v42 < v43)
        {
          v8 = (uint64_t)v42 <= 0;
          v42 *= 2;
          if (v8)
          {
            v42 = v43;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v42, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_130;
        v3[1] = (uint64_t)result;
        v3[2] = v42;
        v41 = *v3;
      }
      v37 = bswap32(a2) >> 16;
      v38 = &result[v41];
      v39 = -51;
      goto LABEL_125;
    }
    v3 = *a1;
    v17 = (*a1)[2];
    v18 = **a1;
    if ((unint64_t)(v17 - v18) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v17)
        v19 = 2 * v17;
      else
        v19 = 0x2000;
      v20 = v18 + 2;
      while (v19 < v20)
      {
        v8 = (uint64_t)v19 <= 0;
        v19 *= 2;
        if (v8)
        {
          v19 = v20;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v19, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_130;
      v3[1] = (uint64_t)result;
      v3[2] = v19;
      v18 = *v3;
    }
    v47 = &result[v18];
    v48 = -52;
    goto LABEL_119;
  }
  v3 = *a1;
  v10 = (*a1)[2];
  v11 = **a1;
  if (v10 == v11)
  {
    if (v10)
      v12 = 2 * v10;
    else
      v12 = 0x2000;
    while (v12 < v10 + 1)
    {
      v8 = (uint64_t)v12 <= 0;
      v12 *= 2;
      if (v8)
      {
        v12 = v10 + 1;
        break;
      }
    }
    result = malloc_type_realloc((void *)v3[1], v12, 0xAD6A59EEuLL);
    if (!result)
      goto LABEL_130;
    v3[1] = (uint64_t)result;
    v3[2] = v12;
    v11 = *v3;
  }
  else
  {
    result = (_BYTE *)v3[1];
  }
  result[v11] = a2;
  v25 = 1;
LABEL_129:
  *v3 += v25;
  return result;
}

uint64_t sub_20B51F1FC()
{
  return std::ostream::write();
}

_BYTE *sub_20B51F33C(uint64_t **a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  BOOL v7;
  _BYTE *result;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  char *v26;
  char *v27;
  std::bad_alloc *exception;
  std::bad_alloc *v29;

  if (a2 > 0xFF)
  {
    if (!(a2 >> 16))
    {
      v3 = *a1;
      v9 = (*a1)[2];
      v10 = **a1;
      if ((unint64_t)(v9 - v10) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v9)
          v11 = 2 * v9;
        else
          v11 = 0x2000;
        v12 = v10 + 3;
        while (v11 < v12)
        {
          v7 = (uint64_t)v11 <= 0;
          v11 *= 2;
          if (v7)
          {
            v11 = v12;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v11, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_70;
        v3[1] = (uint64_t)result;
        v3[2] = v11;
        v10 = *v3;
      }
      v20 = &result[v10];
      *v20 = -51;
      *(_WORD *)(v20 + 1) = bswap32(a2) >> 16;
      v19 = 3;
      goto LABEL_69;
    }
    if (!HIDWORD(a2))
    {
      v3 = *a1;
      v15 = (*a1)[2];
      v16 = **a1;
      if ((unint64_t)(v15 - v16) >= 5)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v15)
          v17 = 2 * v15;
        else
          v17 = 0x2000;
        v18 = v16 + 5;
        while (v17 < v18)
        {
          v7 = (uint64_t)v17 <= 0;
          v17 *= 2;
          if (v7)
          {
            v17 = v18;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v17, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_70;
        v3[1] = (uint64_t)result;
        v3[2] = v17;
        v16 = *v3;
      }
      v26 = &result[v16];
      *v26 = -50;
      *(_DWORD *)(v26 + 1) = bswap32(a2);
      v19 = 5;
      goto LABEL_69;
    }
    v3 = *a1;
    v22 = (*a1)[2];
    v23 = **a1;
    if ((unint64_t)(v22 - v23) >= 9)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v22)
        v24 = 2 * v22;
      else
        v24 = 0x2000;
      v25 = v23 + 9;
      while (v24 < v25)
      {
        v7 = (uint64_t)v24 <= 0;
        v24 *= 2;
        if (v7)
        {
          v24 = v25;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v24, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_70;
      v3[1] = (uint64_t)result;
      v3[2] = v24;
      v23 = *v3;
    }
    v27 = &result[v23];
    *v27 = -49;
    *(_QWORD *)(v27 + 1) = bswap64(a2);
    v19 = 9;
    goto LABEL_69;
  }
  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 > 0x7F)
  {
    if ((unint64_t)(v4 - v5) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v4)
        v13 = 2 * v4;
      else
        v13 = 0x2000;
      v14 = v5 + 2;
      while (v13 < v14)
      {
        v7 = (uint64_t)v13 <= 0;
        v13 *= 2;
        if (v7)
        {
          v13 = v14;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v13, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_70;
      v3[1] = (uint64_t)result;
      v3[2] = v13;
      v5 = *v3;
    }
    v21 = &result[v5];
    *v21 = -52;
    v21[1] = a2;
    v19 = 2;
    goto LABEL_69;
  }
  if (v4 != v5)
  {
    result = (_BYTE *)v3[1];
    goto LABEL_49;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  while (v6 < v4 + 1)
  {
    v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      v6 = v4 + 1;
      break;
    }
  }
  result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_70:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v29 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v29, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_49:
  result[v5] = a2;
  v19 = 1;
LABEL_69:
  *v3 += v19;
  return result;
}

uint64_t sub_20B51F644()
{
  return std::ostream::write();
}

uint64_t **sub_20B51F73C(uint64_t a1, uint64_t **a2, unsigned int *a3)
{
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  BOOL v10;
  char *v11;
  char *v12;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  v4 = *a3;
  v5 = *a2;
  v6 = (*a2)[2];
  v7 = **a2;
  if ((unint64_t)(v6 - v7) >= 5)
  {
    v11 = (char *)v5[1];
  }
  else
  {
    if (v6)
      v8 = 2 * v6;
    else
      v8 = 0x2000;
    v9 = v7 + 5;
    while (v8 < v9)
    {
      v10 = (uint64_t)v8 <= 0;
      v8 *= 2;
      if (v10)
      {
        v8 = v9;
        break;
      }
    }
    v11 = (char *)malloc_type_realloc((void *)v5[1], v8, 0xAD6A59EEuLL);
    if (!v11)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v15 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v15, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v5[1] = (uint64_t)v11;
    v5[2] = v8;
    v7 = *v5;
  }
  v12 = &v11[v7];
  *v12 = -54;
  *(_DWORD *)(v12 + 1) = bswap32(v4);
  *v5 += 5;
  return a2;
}

uint64_t **sub_20B51F818(uint64_t a1, uint64_t **a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  BOOL v10;
  char *v11;
  char *v12;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  v4 = *a3;
  v5 = *a2;
  v6 = (*a2)[2];
  v7 = **a2;
  if ((unint64_t)(v6 - v7) >= 9)
  {
    v11 = (char *)v5[1];
  }
  else
  {
    if (v6)
      v8 = 2 * v6;
    else
      v8 = 0x2000;
    v9 = v7 + 9;
    while (v8 < v9)
    {
      v10 = (uint64_t)v8 <= 0;
      v8 *= 2;
      if (v10)
      {
        v8 = v9;
        break;
      }
    }
    v11 = (char *)malloc_type_realloc((void *)v5[1], v8, 0xAD6A59EEuLL);
    if (!v11)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v15 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v15, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v5[1] = (uint64_t)v11;
    v5[2] = v8;
    v7 = *v5;
  }
  v12 = &v11[v7];
  *v12 = -53;
  *(_QWORD *)(v12 + 1) = bswap64(v4);
  *v5 += 9;
  return a2;
}

uint64_t **sub_20B51F8F4(uint64_t a1, uint64_t **a2, _BYTE *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  BOOL v8;
  size_t v9;
  _BYTE *v10;
  char v11;
  std::bad_alloc *exception;
  std::bad_alloc *v14;

  v4 = *a2;
  v5 = (*a2)[2];
  v6 = **a2;
  if (!*a3)
  {
    if (v5 == v6)
    {
      if (v5)
        v9 = 2 * v5;
      else
        v9 = 0x2000;
      while (v9 < v5 + 1)
      {
        v8 = (uint64_t)v9 <= 0;
        v9 *= 2;
        if (v8)
        {
          v9 = v5 + 1;
          break;
        }
      }
      v10 = malloc_type_realloc((void *)v4[1], v9, 0xAD6A59EEuLL);
      if (!v10)
        goto LABEL_26;
      v4[1] = (uint64_t)v10;
      v4[2] = v9;
      v6 = *v4;
    }
    else
    {
      v10 = (_BYTE *)v4[1];
    }
    v11 = -62;
    goto LABEL_25;
  }
  if (v5 == v6)
  {
    if (v5)
      v7 = 2 * v5;
    else
      v7 = 0x2000;
    while (v7 < v5 + 1)
    {
      v8 = (uint64_t)v7 <= 0;
      v7 *= 2;
      if (v8)
      {
        v7 = v5 + 1;
        break;
      }
    }
    v10 = malloc_type_realloc((void *)v4[1], v7, 0xAD6A59EEuLL);
    if (v10)
    {
      v4[1] = (uint64_t)v10;
      v4[2] = v7;
      v6 = *v4;
      v11 = -61;
      goto LABEL_25;
    }
LABEL_26:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v14, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v10 = (_BYTE *)v4[1];
  v11 = -61;
LABEL_25:
  v10[v6] = v11;
  ++*v4;
  return a2;
}

uint64_t **sub_20B51FA2C(uint64_t a1, uint64_t **a2, const void **a3)
{
  size_t v5;
  int v6;
  const void **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  BOOL v13;
  char *v14;
  const void **v15;
  std::bad_alloc *v17;
  std::bad_alloc *v18;
  std::runtime_error *exception;

  if (*((char *)a3 + 23) < 0)
  {
    v5 = (size_t)a3[1];
    if (HIDWORD(v5))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20B51FE1C(exception, "container size overflow");
      __cxa_throw(exception, (struct type_info *)&unk_24C41F8B0, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  else
  {
    v5 = *((unsigned __int8 *)a3 + 23);
  }
  sub_20B51FB8C(a2, v5);
  v6 = *((char *)a3 + 23);
  v7 = (const void **)*a3;
  v8 = *a2;
  v9 = (*a2)[2];
  v10 = **a2;
  if (v9 - v10 >= v5)
  {
    v14 = (char *)v8[1];
  }
  else
  {
    if (v9)
      v11 = 2 * v9;
    else
      v11 = 0x2000;
    v12 = v10 + v5;
    while (v11 < v12)
    {
      v13 = (uint64_t)v11 <= 0;
      v11 *= 2;
      if (v13)
      {
        v11 = v12;
        break;
      }
    }
    v14 = (char *)malloc_type_realloc((void *)v8[1], v11, 0xAD6A59EEuLL);
    if (!v14)
    {
      v17 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v18 = std::bad_alloc::bad_alloc(v17);
      __cxa_throw(v18, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v8[1] = (uint64_t)v14;
    v8[2] = v11;
    v10 = *v8;
  }
  if (v6 >= 0)
    v15 = a3;
  else
    v15 = v7;
  memcpy(&v14[v10], v15, v5);
  *v8 += v5;
  return a2;
}

void sub_20B51FB78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_20B51FB8C(uint64_t **a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  BOOL v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  std::bad_alloc *exception;
  std::bad_alloc *v31;

  if (a2 > 0x1F)
  {
    if (a2 <= 0xFF)
    {
      v4 = *a1;
      v10 = (*a1)[2];
      v11 = **a1;
      if ((unint64_t)(v10 - v11) >= 2)
      {
        v14 = (char *)v4[1];
      }
      else
      {
        if (v10)
          v12 = 2 * v10;
        else
          v12 = 0x2000;
        v13 = v11 + 2;
        while (v12 < v13)
        {
          v8 = (uint64_t)v12 <= 0;
          v12 *= 2;
          if (v8)
          {
            v12 = v13;
            break;
          }
        }
        v14 = (char *)malloc_type_realloc((void *)v4[1], v12, 0xAD6A59EEuLL);
        if (!v14)
          goto LABEL_56;
        v4[1] = (uint64_t)v14;
        v4[2] = v12;
        v11 = *v4;
      }
      v21 = &v14[v11];
      *v21 = -39;
      v21[1] = a2;
      v15 = 2;
      goto LABEL_55;
    }
    if (!HIWORD(a2))
    {
      v4 = *a1;
      v16 = (*a1)[2];
      v17 = **a1;
      if ((unint64_t)(v16 - v17) >= 3)
      {
        v20 = (char *)v4[1];
      }
      else
      {
        if (v16)
          v18 = 2 * v16;
        else
          v18 = 0x2000;
        v19 = v17 + 3;
        while (v18 < v19)
        {
          v8 = (uint64_t)v18 <= 0;
          v18 *= 2;
          if (v8)
          {
            v18 = v19;
            break;
          }
        }
        v20 = (char *)malloc_type_realloc((void *)v4[1], v18, 0xAD6A59EEuLL);
        if (!v20)
          goto LABEL_56;
        v4[1] = (uint64_t)v20;
        v4[2] = v18;
        v17 = *v4;
      }
      v27 = &v20[v17];
      *v27 = -38;
      *(_WORD *)(v27 + 1) = bswap32(a2) >> 16;
      v15 = 3;
      goto LABEL_55;
    }
    v4 = *a1;
    v22 = (*a1)[2];
    v23 = **a1;
    if ((unint64_t)(v22 - v23) >= 5)
    {
      v26 = (char *)v4[1];
    }
    else
    {
      if (v22)
        v24 = 2 * v22;
      else
        v24 = 0x2000;
      v25 = v23 + 5;
      while (v24 < v25)
      {
        v8 = (uint64_t)v24 <= 0;
        v24 *= 2;
        if (v8)
        {
          v24 = v25;
          break;
        }
      }
      v26 = (char *)malloc_type_realloc((void *)v4[1], v24, 0xAD6A59EEuLL);
      if (!v26)
        goto LABEL_56;
      v4[1] = (uint64_t)v26;
      v4[2] = v24;
      v23 = *v4;
    }
    v28 = &v26[v23];
    *v28 = -37;
    *(_DWORD *)(v28 + 1) = bswap32(a2);
    v15 = 5;
    goto LABEL_55;
  }
  v4 = *a1;
  v5 = (*a1)[2];
  v6 = **a1;
  if (v5 != v6)
  {
    v9 = (_BYTE *)v4[1];
    goto LABEL_25;
  }
  if (v5)
    v7 = 2 * v5;
  else
    v7 = 0x2000;
  while (v7 < v5 + 1)
  {
    v8 = (uint64_t)v7 <= 0;
    v7 *= 2;
    if (v8)
    {
      v7 = v5 + 1;
      break;
    }
  }
  v9 = malloc_type_realloc((void *)v4[1], v7, 0xAD6A59EEuLL);
  if (!v9)
  {
LABEL_56:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v31 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v31, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v4[1] = (uint64_t)v9;
  v4[2] = v7;
  v6 = *v4;
LABEL_25:
  v9[v6] = a2 | 0xA0;
  v15 = 1;
LABEL_55:
  *v4 += v15;
  return a1;
}

std::runtime_error *sub_20B51FE1C(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_24C41F8D8;
  return result;
}

void sub_20B51FE40(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B51FE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::runtime_error *exception;

  if (*(char *)(a3 + 23) < 0)
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (HIDWORD(v4))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20B51FE1C(exception, "container size overflow");
      __cxa_throw(exception, (struct type_info *)&unk_24C41F8B0, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  std::ostream::write();
  std::ostream::write();
  return a2;
}

void sub_20B51FF94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B51FFA8(uint64_t a1)
{
  uint64_t v1;
  std::bad_cast *exception;
  std::bad_cast *v3;

  if (*(_DWORD *)a1 == 3)
  {
    v1 = *(_QWORD *)(a1 + 8);
    if (v1 <= -129)
      goto LABEL_4;
  }
  else if (*(_DWORD *)a1 != 2 || (v1 = *(_QWORD *)(a1 + 8), (unint64_t)v1 >= 0x80))
  {
LABEL_4:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_20B519294(exception);
    __cxa_throw(v3, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  return (char)v1;
}

uint64_t sub_20B52000C(uint64_t a1)
{
  uint64_t v1;
  std::bad_cast *exception;
  std::bad_cast *v3;

  if (*(_DWORD *)a1 == 3)
  {
    v1 = *(_QWORD *)(a1 + 8);
    if (v1 <= -32769)
      goto LABEL_4;
  }
  else if (*(_DWORD *)a1 != 2 || (v1 = *(_QWORD *)(a1 + 8), (unint64_t)v1 >= 0x8000))
  {
LABEL_4:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_20B519294(exception);
    __cxa_throw(v3, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  return (__int16)v1;
}

int64_t sub_20B520074(uint64_t a1)
{
  int64_t result;
  std::bad_cast *exception;
  std::bad_cast *v3;

  if (*(_DWORD *)a1 == 3)
  {
    result = *(_QWORD *)(a1 + 8);
    if (result <= (uint64_t)0xFFFFFFFF7FFFFFFFLL)
      goto LABEL_4;
  }
  else if (*(_DWORD *)a1 != 2 || (result = *(_QWORD *)(a1 + 8), (unint64_t)result >> 31))
  {
LABEL_4:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_20B519294(exception);
    __cxa_throw(v3, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

void sub_20B5200D8(std::string *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  void *v5[2];
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  unsigned int v16;
  unsigned int v17;

  v16 = a3;
  v17 = a2;
  sub_20B52022C("Failed to load sample ", a1, (std::string *)". Minimum version required is ", &v17, (std::string *)" but current sample version is ", &v16, (std::string *)".");
  if (SHIBYTE(v6) < 0)
  {
    sub_20AEC60F4(__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v5;
    v8 = v6;
  }
  v9 = 1;
  LOBYTE(v10) = 0;
  v14 = 0;
  v15 = 1;
  sub_20AF55A38(a4, 5u, (__int128 *)__p);
  if (!v15)
    goto LABEL_11;
  if (v14)
  {
    if ((v13 & 0x80000000) == 0)
    {
      if ((v11 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v10);
      if (!v9)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v12);
    if (v11 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v9)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_20B520200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B52022C(char *__s, std::string *a2, std::string *a3, unsigned int *a4, std::string *a5, unsigned int *a6, std::string *a7)
{
  uint64_t result;
  _DWORD v14[6];
  int v15;
  std::string v16;
  std::string **v17;
  std::string *v18;
  std::string *v19;
  _DWORD *v20;
  std::string *v21;
  std::string *v22;

  v15 = 0;
  sub_20B00222C(v14, __s);
  v18 = (std::string *)v14;
  v19 = a2;
  v20 = v14;
  v21 = a2;
  v22 = a2;
  if (v15 == -1)
    sub_20AECFAB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C41F908[v15])(&v16, v14);
  v18 = (std::string *)v14;
  v19 = a3;
  v20 = v14;
  v21 = a3;
  v22 = a3;
  if (v15 == -1)
    sub_20AECFAB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C41F920[v15])(&v16, v14);
  std::to_string(&v16, *a4);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_20AECFAB8();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24C41F938[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v18 = (std::string *)v14;
  v19 = a5;
  v20 = v14;
  v21 = a5;
  v22 = a5;
  if (v15 == -1)
    sub_20AECFAB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C41F950[v15])(&v16, v14);
  std::to_string(&v16, *a6);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_20AECFAB8();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24C41F938[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v18 = (std::string *)v14;
  v19 = a7;
  v20 = v14;
  v21 = a7;
  v22 = a7;
  if (v15 == -1)
    sub_20AECFAB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C41F968[v15])(&v16, v14);
  if (v15 == -1)
    sub_20AECFAB8();
  v18 = &v16;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C41F980[v15])(&v18, v14);
  if (v15 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C41F8F0[v15])(&v18, v14);
  return result;
}

void sub_20B5204C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20B520518(std::string *a1, unsigned int a2, unsigned int a3)
{
  _BYTE v3[120];

  sub_20B5200D8(a1, a2, a3, (uint64_t)v3);
  sub_20B0BFB50((uint64_t)v3);
}

void sub_20B52053C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if ((_BYTE)a34)
  {
    if (a32)
    {
      if (a31 < 0)
        operator delete(__p);
      if (a24 < 0)
        operator delete(a19);
    }
    if (a18)
    {
      if (a17 < 0)
        operator delete(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B520590(int **a1@<X0>, _QWORD *a2@<X8>)
{
  int *v3;
  int *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = *a1;
  v4 = a1[1];
  v5 = (std::__shared_weak_count *)operator new(0x48uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41FAD8;
  v7 = sub_20B5208CC(&v5[1].__vftable, v3, v4);
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  *a2 = &off_24C41F9C8;
  a2[1] = v7;
  a2[2] = v5;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20B520688(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20B5206A0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B520708(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B520770(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B520780(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B520790(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B5207A0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B5207B0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

void sub_20B5207C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41FA70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B5207D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41FA70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B520800(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_20B52081C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41FAD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B52082C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C41FAD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B52085C(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *sub_20B5208CC(_QWORD *a1, int *a2, int *a3)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  char *v9;

  *a1 = &off_24C41FB28;
  v6 = operator new(0x30uLL);
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = 0;
  *v6 = &off_24C41FA70;
  v6[4] = 0;
  v6[5] = 0;
  sub_20B520FBC((uint64_t)(v6 + 3), a2, a3);
  a1[3] = 0;
  a1[1] = v6 + 3;
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = 0;
  v7 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if (v7 < 0)
      sub_20AF6E1D0();
    v8 = (char *)operator new((char *)a3 - (char *)a2);
    a1[3] = v8;
    a1[4] = v8;
    v9 = &v8[4 * (v7 >> 2)];
    a1[5] = v9;
    if (a3 != a2)
      memmove(v8, a2, (char *)a3 - (char *)a2);
    a1[4] = v9;
  }
  return a1;
}

void sub_20B5209AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v5);
  }
  sub_20AEC147C(v2);
  _Unwind_Resume(a1);
}

void sub_20B5209D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B5209F8(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20B520A70(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B520AE8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_20B520AF4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_20B520B00(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int **v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  _OWORD *v7;
  _QWORD *v8;
  unsigned int *v9;
  unint64_t v10;
  _QWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unsigned int v17;
  char *v18;
  char *v19;

  v3 = *(unsigned int ***)(a1 + 8);
  v5 = *v3;
  v4 = v3[1];
  v6 = (char *)v4 - (char *)*v3;
  if (v4 == *v3)
  {
    v7 = 0;
    v19 = 0;
    v18 = 0;
  }
  else
  {
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_20B4268F4();
    v7 = operator new(2 * v6);
    bzero(v7, 2 * v6);
    v8 = v7;
    v9 = v5;
    if ((unint64_t)(v6 - 4) < 0xC)
      goto LABEL_14;
    v10 = ((unint64_t)(v6 - 4) >> 2) + 1;
    v8 = (_QWORD *)v7 + (v10 & 0x7FFFFFFFFFFFFFFCLL);
    v9 = &v5[v10 & 0x7FFFFFFFFFFFFFFCLL];
    v11 = v5 + 2;
    v12 = v7 + 1;
    v13 = v10 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      v14 = *(v11 - 1);
      *(_QWORD *)&v15 = v14;
      *((_QWORD *)&v15 + 1) = HIDWORD(v14);
      v16 = v15;
      *(_QWORD *)&v15 = *v11;
      *((_QWORD *)&v15 + 1) = HIDWORD(*v11);
      *(v12 - 1) = v16;
      *v12 = v15;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFFCLL))
    {
LABEL_14:
      do
      {
        v17 = *v9++;
        *v8++ = v17;
      }
      while (v9 != v4);
    }
    v18 = (char *)v7 + 8 * (v6 >> 2);
    v19 = (char *)v7 + 2 * v6;
  }
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v19;
  *(_QWORD *)(a2 + 16) = v18;
  *(_BYTE *)(a2 + 24) = 1;
}

void sub_20B520C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B520C3C()
{
  return 0;
}

void sub_20B520C48(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  void *__p[2];
  unsigned __int8 v11;
  std::string v12;
  _DWORD v13[6];
  int v14;
  std::string v15;
  std::string *v16;
  std::string *v17;
  _DWORD *v18;
  std::string *v19;
  std::string *v20;
  std::string **v21;

  v12.__r_.__value_.__l.__size_ = 0;
  v12.__r_.__value_.__r.__words[2] = 0x700000000000000;
  strcpy((char *)&v12, "uint32:");
  v14 = 0;
  if ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) <= 3)
  {
    sub_20AEF9DBC(v13, "{}");
    goto LABEL_16;
  }
  sub_20AED5B5C(v13, "{");
  v4 = *(unsigned int **)(a1 + 24);
  std::to_string(&v15, *v4);
  v16 = (std::string *)v13;
  v17 = &v15;
  v18 = v13;
  v19 = &v15;
  v20 = &v15;
  if (v14 == -1)
    sub_20AECFAB8();
  v21 = &v16;
  ((void (*)(std::string ***, _DWORD *))off_24C41FA18[v14])(&v21, v13);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    v5 = *(unsigned int **)(a1 + 32);
    v6 = v4 + 1;
    if (v6 != v5)
    {
LABEL_10:
      while (1)
      {
        v16 = (std::string *)v13;
        v17 = (std::string *)",";
        v18 = v13;
        v19 = (std::string *)",";
        v20 = (std::string *)",";
        if (v14 == -1)
          break;
        v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
        ((void (*)(std::string *, _DWORD *))off_24C41FAB0[v14])(&v15, v13);
        std::to_string(&v15, *v6);
        v16 = (std::string *)v13;
        v17 = &v15;
        v18 = v13;
        v19 = &v15;
        v20 = &v15;
        if (v14 == -1)
          sub_20AECFAB8();
        v21 = &v16;
        ((void (*)(std::string ***, _DWORD *))off_24C41FA18[v14])(&v21, v13);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
        if (++v6 == v5)
          goto LABEL_14;
      }
LABEL_30:
      sub_20AECFAB8();
    }
  }
  else
  {
    v5 = *(unsigned int **)(a1 + 32);
    v6 = v4 + 1;
    if (v6 != v5)
      goto LABEL_10;
  }
LABEL_14:
  v16 = (std::string *)v13;
  v17 = (std::string *)"}";
  v18 = v13;
  v19 = (std::string *)"}";
  v20 = (std::string *)"}";
  if (v14 == -1)
    goto LABEL_30;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  ((void (*)(std::string *, _DWORD *))off_24C41FAB0[v14])(&v15, v13);
LABEL_16:
  if (v14 == -1)
    sub_20AECFAB8();
  v16 = &v15;
  ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24C41FA48[v14])(__p, &v16, v13);
  if (v14 != -1)
    ((void (*)(std::string **, _DWORD *))off_24C41FA30[v14])(&v16, v13);
  if ((v11 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v8 = v11;
  else
    v8 = (std::string::size_type)__p[1];
  v9 = std::string::append(&v12, (const std::string::value_type *)v7, v8);
  *a2 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (((char)v11 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(v12.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_29;
}

void sub_20B520F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_20B520FBC(uint64_t a1, int *a2, int *a3)
{
  int *v4;
  char *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _DWORD *v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  int v28;

  if (a2 != a3)
  {
    v4 = a2;
    v6 = *(char **)(a1 + 8);
    while (1)
    {
      v8 = *v4;
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v6 >= v9)
        break;
      *(_DWORD *)v6 = v8;
      v7 = (uint64_t)(v6 + 4);
LABEL_4:
      *(_QWORD *)(a1 + 8) = v7;
      ++v4;
      v6 = (char *)v7;
      if (v4 == a3)
        return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v6[-*(_QWORD *)a1];
    v12 = v11 >> 2;
    v13 = (v11 >> 2) + 1;
    if (v13 >> 62)
      sub_20AF6E1D0();
    v14 = v9 - (_QWORD)v10;
    if (v14 >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 62)
        sub_20AEC60CC();
      v16 = operator new(4 * v15);
      v17 = &v16[4 * v12];
      *v17 = v8;
      v7 = (uint64_t)(v17 + 1);
      v18 = v6 - v10;
      if (v6 == v10)
        goto LABEL_29;
    }
    else
    {
      v16 = 0;
      v17 = (_DWORD *)(4 * v12);
      *(_DWORD *)(4 * v12) = v8;
      v7 = 4 * v12 + 4;
      v18 = v6 - v10;
      if (v6 == v10)
        goto LABEL_29;
    }
    v19 = v18 - 4;
    if (v19 >= 0xBC)
    {
      v21 = (v6 - 4 - v10) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v16[v11 - 4 - v21] > &v16[v11 - 4])
      {
        v20 = v6;
      }
      else if (&v6[-v21 - 4] > v6 - 4)
      {
        v20 = v6;
      }
      else if ((unint64_t)(v6 - v16 - v11) >= 0x20)
      {
        v22 = (v19 >> 2) + 1;
        v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
        v20 = &v6[-v23];
        v17 = (_DWORD *)((char *)v17 - v23);
        v24 = &v16[4 * v12 - 16];
        v25 = v6 - 16;
        v26 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 32;
          v26 -= 8;
        }
        while (v26);
        if (v22 == (v22 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_29;
      }
      else
      {
        v20 = v6;
      }
    }
    else
    {
      v20 = v6;
    }
    do
    {
      v28 = *((_DWORD *)v20 - 1);
      v20 -= 4;
      *--v17 = v28;
    }
    while (v20 != v10);
LABEL_29:
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v16[4 * v15];
    if (v10)
      operator delete(v10);
    goto LABEL_4;
  }
}

uint64_t sub_20B5211A0@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v11 = a1[9];
  v12 = a1[10];
  v13 = a1[11];
  v14 = a1[12];
  v15 = a1[13];
  v16 = a1[14];
  v17 = a1[15];
  a2[36] = 0;
  *a2 = byte_20B610CD0[v2 >> 4];
  a2[1] = byte_20B610CD0[v2 & 0xF];
  a2[2] = byte_20B610CD0[v3 >> 4];
  a2[3] = byte_20B610CD0[v3 & 0xF];
  a2[4] = byte_20B610CD0[v4 >> 4];
  a2[5] = byte_20B610CD0[v4 & 0xF];
  a2[6] = byte_20B610CD0[v5 >> 4];
  a2[7] = byte_20B610CD0[v5 & 0xF];
  result = 45;
  a2[8] = 45;
  a2[9] = byte_20B610CD0[v6 >> 4];
  a2[10] = byte_20B610CD0[v6 & 0xF];
  a2[11] = byte_20B610CD0[v7 >> 4];
  a2[12] = byte_20B610CD0[v7 & 0xF];
  a2[13] = 45;
  a2[14] = byte_20B610CD0[v8 >> 4];
  LOBYTE(v7) = byte_20B610CD0[v9 >> 4];
  a2[15] = byte_20B610CD0[v8 & 0xF];
  a2[16] = v7;
  a2[17] = byte_20B610CD0[v9 & 0xF];
  a2[18] = 45;
  a2[19] = byte_20B610CD0[v10 >> 4];
  a2[20] = byte_20B610CD0[v10 & 0xF];
  a2[21] = byte_20B610CD0[v11 >> 4];
  a2[22] = byte_20B610CD0[v11 & 0xF];
  a2[23] = 45;
  LOBYTE(v11) = byte_20B610CD0[v12 >> 4];
  LOBYTE(v12) = byte_20B610CD0[v12 & 0xF];
  a2[24] = v11;
  a2[25] = v12;
  a2[26] = byte_20B610CD0[v13 >> 4];
  LOBYTE(v12) = byte_20B610CD0[v14 >> 4];
  a2[27] = byte_20B610CD0[v13 & 0xF];
  a2[28] = v12;
  a2[29] = byte_20B610CD0[v14 & 0xF];
  LOBYTE(v14) = byte_20B610CD0[v15 >> 4];
  LOBYTE(v15) = byte_20B610CD0[v15 & 0xF];
  a2[30] = v14;
  a2[31] = v15;
  a2[32] = byte_20B610CD0[v16 >> 4];
  LOBYTE(v15) = byte_20B610CD0[v17 >> 4];
  a2[33] = byte_20B610CD0[v16 & 0xF];
  a2[34] = v15;
  a2[35] = byte_20B610CD0[v17 & 0xF];
  return result;
}

unint64_t sub_20B52138C@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  char *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  uint64_t v18;
  unsigned int v20;
  uint64_t v21;
  unsigned int v23;
  uint64_t v24;
  unsigned int v26;
  uint64_t v27;
  unsigned int v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  char v56;
  char v57;
  char v58;
  int v59;
  char v60;
  char v61;
  uint64_t v62;
  int v63;
  char v64;
  char v65;
  char v66;
  int v67;
  char v68;
  char v69;
  unint64_t v70;
  int v71;
  char v72;
  char v73;
  char v74;
  int v75;
  char v76;
  char v77;
  unint64_t v78;
  int v79;
  char v80;
  char v81;
  char v82;
  int v83;
  char v84;
  char v85;
  unint64_t v86;
  int v87;
  char v88;
  char v89;
  char v90;
  int v91;
  char v92;
  char v93;
  uint64_t v94;
  int v95;
  char v96;
  char v97;
  char v98;
  int v99;
  char v100;
  char v101;
  unsigned __int8 v102;
  unint64_t v103;
  int v104;
  char v105;
  char v106;
  char v107;
  int v108;
  char v109;
  char v110;
  unsigned __int8 v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  char v118;
  char v119;
  char v120;
  int v121;
  char v122;
  char v123;
  uint64_t v124;
  int v125;
  char v126;
  char v127;
  char v128;
  int v129;
  char v130;
  char v131;
  unint64_t v132;
  int v133;
  char v134;
  char v135;
  char v136;
  int v137;
  char v138;
  char v139;
  unint64_t v140;
  int v141;
  char v142;
  char v143;
  char v144;
  int v145;
  char v146;
  char v147;
  unint64_t v148;
  int v149;
  char v150;
  char v151;
  int v152;
  int v153;
  unsigned int v154;
  int v155;
  char v156;
  char v157;
  char v158;
  int v159;
  char v160;
  char v161;
  char v162;
  char v163;
  char v164;
  char v165;
  char v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  int v174;

  v3 = *(unsigned __int8 *)(result + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(result + 8);
  if (v3 != 36)
    goto LABEL_209;
  v5 = (char *)result;
  if (v4 >= 0)
    v6 = (unsigned __int8 *)result;
  else
    v6 = *(unsigned __int8 **)result;
  if (!v6)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      abort();
  }
  if ((*v6 - 48) >= 0xAu)
  {
    v7 = *v6 - 65;
    v8 = v7 > 0x25;
    v9 = (1 << v7) & 0x3F0000003FLL;
    if (v8 || v9 == 0)
      goto LABEL_209;
  }
  if ((v6[1] - 48) >= 0xAu)
  {
    v11 = v6[1] - 65;
    v8 = v11 > 0x25;
    v12 = (1 << v11) & 0x3F0000003FLL;
    if (v8 || v12 == 0)
      goto LABEL_209;
  }
  if ((v6[2] - 48) >= 0xAu)
  {
    v14 = v6[2] - 65;
    v8 = v14 > 0x25;
    v15 = (1 << v14) & 0x3F0000003FLL;
    if (v8 || v15 == 0)
      goto LABEL_209;
  }
  if ((v6[3] - 48) >= 0xAu)
  {
    v17 = v6[3] - 65;
    v8 = v17 > 0x25;
    v18 = (1 << v17) & 0x3F0000003FLL;
    if (v8 || v18 == 0)
      goto LABEL_209;
  }
  if ((v6[4] - 48) >= 0xAu)
  {
    v20 = v6[4] - 65;
    v8 = v20 > 0x25;
    v21 = (1 << v20) & 0x3F0000003FLL;
    if (v8 || v21 == 0)
      goto LABEL_209;
  }
  if ((v6[5] - 48) >= 0xAu)
  {
    v23 = v6[5] - 65;
    v8 = v23 > 0x25;
    v24 = (1 << v23) & 0x3F0000003FLL;
    if (v8 || v24 == 0)
      goto LABEL_209;
  }
  if ((v6[6] - 48) >= 0xAu)
  {
    v26 = v6[6] - 65;
    v8 = v26 > 0x25;
    v27 = (1 << v26) & 0x3F0000003FLL;
    if (v8 || v27 == 0)
      goto LABEL_209;
  }
  if ((v6[7] - 48) >= 0xAu)
  {
    v29 = v6[7] - 65;
    if (v29 > 0x25 || ((1 << v29) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  v30 = v5[23] >= 0 ? v5 : *(char **)v5;
  if (v30[8] != 45)
    goto LABEL_209;
  if ((v6[9] - 48) >= 0xAu)
  {
    v31 = v6[9] - 65;
    if (v31 > 0x25 || ((1 << v31) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if ((v6[10] - 48) >= 0xAu)
  {
    v32 = v6[10] - 65;
    if (v32 > 0x25 || ((1 << v32) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if ((v6[11] - 48) >= 0xAu)
  {
    v33 = v6[11] - 65;
    if (v33 > 0x25 || ((1 << v33) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if ((v6[12] - 48) >= 0xAu)
  {
    v34 = v6[12] - 65;
    if (v34 > 0x25 || ((1 << v34) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if (v30[13] != 45)
    goto LABEL_209;
  if ((v6[14] - 48) >= 0xAu)
  {
    v35 = v6[14] - 65;
    if (v35 > 0x25 || ((1 << v35) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if ((v6[15] - 48) >= 0xAu)
  {
    v36 = v6[15] - 65;
    if (v36 > 0x25 || ((1 << v36) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if ((v6[16] - 48) >= 0xAu)
  {
    v37 = v6[16] - 65;
    if (v37 > 0x25 || ((1 << v37) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if ((v6[17] - 48) >= 0xAu)
  {
    v38 = v6[17] - 65;
    if (v38 > 0x25 || ((1 << v38) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if (v30[18] != 45)
    goto LABEL_209;
  if ((v6[19] - 48) >= 0xAu)
  {
    v39 = v6[19] - 65;
    if (v39 > 0x25 || ((1 << v39) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if ((v6[20] - 48) >= 0xAu)
  {
    v40 = v6[20] - 65;
    if (v40 > 0x25 || ((1 << v40) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if ((v6[21] - 48) >= 0xAu)
  {
    v41 = v6[21] - 65;
    if (v41 > 0x25 || ((1 << v41) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if ((v6[22] - 48) >= 0xAu)
  {
    v42 = v6[22] - 65;
    if (v42 > 0x25 || ((1 << v42) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if (*(_BYTE *)(*(_QWORD *)v5 + 23) != 45)
    goto LABEL_209;
  if ((v6[24] - 48) >= 0xAu)
  {
    v43 = v6[24] - 65;
    if (v43 > 0x25 || ((1 << v43) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if ((v6[25] - 48) >= 0xAu)
  {
    v44 = v6[25] - 65;
    if (v44 > 0x25 || ((1 << v44) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if ((v6[26] - 48) >= 0xAu)
  {
    v45 = v6[26] - 65;
    if (v45 > 0x25 || ((1 << v45) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if ((v6[27] - 48) >= 0xAu)
  {
    v46 = v6[27] - 65;
    if (v46 > 0x25 || ((1 << v46) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if ((v6[28] - 48) >= 0xAu)
  {
    v47 = v6[28] - 65;
    if (v47 > 0x25 || ((1 << v47) & 0x3F0000003FLL) == 0)
      goto LABEL_209;
  }
  if (((v6[29] - 48) < 0xAu || (v48 = v6[29] - 65, v48 <= 0x25)
                                              && ((1 << v48) & 0x3F0000003FLL) != 0)
    && ((v6[30] - 48) < 0xAu || (v49 = v6[30] - 65, v49 <= 0x25)
                                              && ((1 << v49) & 0x3F0000003FLL) != 0)
    && ((v6[31] - 48) < 0xAu || (v50 = v6[31] - 65, v50 <= 0x25)
                                              && ((1 << v50) & 0x3F0000003FLL) != 0)
    && ((v6[32] - 48) < 0xAu || (v51 = v6[32] - 65, v51 <= 0x25)
                                              && ((1 << v51) & 0x3F0000003FLL) != 0)
    && ((v6[33] - 48) < 0xAu || (v52 = v6[33] - 65, v52 <= 0x25)
                                              && ((1 << v52) & 0x3F0000003FLL) != 0)
    && ((v6[34] - 48) < 0xAu || (v53 = v6[34] - 65, v53 <= 0x25)
                                              && ((1 << v53) & 0x3F0000003FLL) != 0)
    && ((v6[35] - 48) < 0xAu || (v54 = v6[35] - 65, v54 <= 0x25)
                                              && ((1 << v54) & 0x3F0000003FLL) != 0))
  {
    v55 = *v30;
    if (v55 >= 58)
      v56 = 9;
    else
      v56 = 0;
    v57 = v56 + v55;
    v58 = v30[1];
    v59 = v58;
    v60 = v58 - 48;
    v61 = (v58 & 0xDF) - 55;
    if (v59 < 58)
      v61 = v60;
    v62 = (v61 | (16 * v57));
    v63 = v30[2];
    if (v63 >= 58)
      v64 = 9;
    else
      v64 = 0;
    v65 = v64 + v63;
    v66 = v30[3];
    v67 = v66;
    v68 = v66 - 48;
    v69 = (v66 & 0xDF) - 55;
    if (v67 < 58)
      v69 = v68;
    v70 = v62 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)(v69 | (16 * v65)) << 8);
    v71 = v30[4];
    if (v71 >= 58)
      v72 = 9;
    else
      v72 = 0;
    v73 = v72 + v71;
    v74 = v30[5];
    v75 = v74;
    v76 = v74 - 48;
    v77 = (v74 & 0xDF) - 55;
    if (v75 < 58)
      v77 = v76;
    v78 = v70 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)(v77 | (16 * v73)) << 16);
    v79 = v30[6];
    if (v79 >= 58)
      v80 = 9;
    else
      v80 = 0;
    v81 = v80 + v79;
    v82 = v30[7];
    v83 = v82;
    v84 = v82 - 48;
    v85 = (v82 & 0xDF) - 55;
    if (v83 < 58)
      v85 = v84;
    v86 = v78 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)(v85 | (16 * v81)) << 24);
    v87 = v30[9];
    if (v87 >= 58)
      v88 = 9;
    else
      v88 = 0;
    v89 = v88 + v87;
    v90 = v30[10];
    v91 = v90;
    v92 = v90 - 48;
    v93 = (v90 & 0xDF) - 55;
    if (v91 < 58)
      v93 = v92;
    v94 = (v93 | (16 * v89));
    v95 = v30[11];
    if (v95 >= 58)
      v96 = 9;
    else
      v96 = 0;
    v97 = v96 + v95;
    v98 = v30[12];
    v99 = v98;
    v100 = v98 - 48;
    v101 = (v98 & 0xDF) - 55;
    if (v99 < 58)
      v101 = v100;
    v102 = v101 | (16 * v97);
    v103 = v86 | (v94 << 32);
    v104 = v30[14];
    if (v104 >= 58)
      v105 = 9;
    else
      v105 = 0;
    v106 = v105 + v104;
    v107 = v30[15];
    v108 = v107;
    v109 = v107 - 48;
    v110 = (v107 & 0xDF) - 55;
    if (v108 < 58)
      v110 = v109;
    v111 = v110 | (16 * v106);
    v112 = v30[16];
    if (v112 >= 58)
      v113 = 9;
    else
      v113 = 0;
    v114 = v113 + v112;
    v115 = v30[17];
    if (v115 >= 58)
      v116 = (v115 & 0xDF) - 55;
    else
      v116 = v115 - 48;
    v117 = v30[19];
    if (v117 >= 58)
      v118 = 9;
    else
      v118 = 0;
    v119 = v118 + v117;
    v120 = v30[20];
    v121 = v120;
    v122 = v120 - 48;
    v123 = (v120 & 0xDF) - 55;
    if (v121 < 58)
      v123 = v122;
    v124 = (v123 | (16 * v119));
    v125 = v30[21];
    if (v125 >= 58)
      v126 = 9;
    else
      v126 = 0;
    v127 = v126 + v125;
    v128 = v30[22];
    v129 = v128;
    v130 = v128 - 48;
    v131 = (v128 & 0xDF) - 55;
    if (v129 < 58)
      v131 = v130;
    v132 = v124 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)(v131 | (16 * v127)) << 8);
    v133 = v30[24];
    if (v133 >= 58)
      v134 = 9;
    else
      v134 = 0;
    v135 = v134 + v133;
    v136 = v30[25];
    v137 = v136;
    v138 = v136 - 48;
    v139 = (v136 & 0xDF) - 55;
    if (v137 < 58)
      v139 = v138;
    v140 = v132 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)(v139 | (16 * v135)) << 16);
    v141 = v30[26];
    if (v141 >= 58)
      v142 = 9;
    else
      v142 = 0;
    v143 = v142 + v141;
    v144 = v30[27];
    v145 = v144;
    v146 = v144 - 48;
    v147 = (v144 & 0xDF) - 55;
    if (v145 < 58)
      v147 = v146;
    v148 = v140 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)(v147 | (16 * v143)) << 24);
    v149 = v30[28];
    if (v149 >= 58)
      v150 = 9;
    else
      v150 = 0;
    v151 = v150 + v149;
    v152 = v30[29];
    v153 = (char)v152;
    v154 = v152 - 48;
    LODWORD(result) = (v152 & 0xFFFFFFDF) - 55;
    if (v153 >= 58)
      result = result;
    else
      result = v154;
    v155 = v30[30];
    if (v155 >= 58)
      v156 = 9;
    else
      v156 = 0;
    v157 = v156 + v155;
    v158 = v30[31];
    v8 = v158 < 58;
    v159 = v30[32];
    v160 = v30[33];
    v161 = v158 - 48;
    v162 = (v158 & 0xDF) - 55;
    if (v8)
      v162 = v161;
    if (v159 >= 58)
      v163 = 9;
    else
      v163 = 0;
    v164 = v163 + v159;
    v8 = v160 < 58;
    v165 = v160 - 48;
    v166 = (v160 & 0xDF) - 55;
    if (v8)
      v166 = v165;
    v167 = v30[34];
    if (v167 >= 58)
      v168 = 9;
    else
      v168 = 0;
    v169 = v168 + v167;
    v170 = v116 | (16 * v114);
    v171 = v30[35];
    v172 = v171 & 0xDF;
    v8 = v171 < 58;
    v173 = v171 - 48;
    v174 = v172 - 55;
    if (!v8)
      v173 = v174;
    *(_QWORD *)a2 = v103 | ((unint64_t)v102 << 40) | ((unint64_t)v111 << 48) | (v170 << 56);
    *(_QWORD *)(a2 + 8) = v148 | ((unint64_t)(result | (16 * v151)) << 32) | ((unint64_t)(v162 | (16 * v157)) << 40) | ((unint64_t)(v166 | (16 * v164)) << 48) | ((unint64_t)(v173 | (16 * v169)) << 56);
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
LABEL_209:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

void sub_20B521E58(unsigned __int8 a1)
{
  std::logic_error *exception;
  unsigned __int8 v3;
  std::string v4;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  v3 = a1;
  sub_20B521F24("Invalid ArithmeticType value '", &v3, (std::string *)"'");
  std::logic_error::logic_error(exception, &v4);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
}

void sub_20B521EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
      goto LABEL_3;
  }
  else if (!v16)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_20B521F10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B521F24(char *__s, unsigned __int8 *a2, std::string *a3)
{
  uint64_t result;
  _DWORD v6[6];
  int v7;
  std::string v8;
  std::string **v9;
  std::string *v10;
  std::string *v11;
  _DWORD *v12;
  std::string *v13;
  std::string *v14;

  v7 = 0;
  sub_20AF810D0(v6, __s);
  std::to_string(&v8, *a2);
  v10 = (std::string *)v6;
  v11 = &v8;
  v12 = v6;
  v13 = &v8;
  v14 = &v8;
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v10;
  ((void (*)(std::string ***, _DWORD *))off_24C41FB78[v7])(&v9, v6);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v10 = (std::string *)v6;
  v11 = a3;
  v12 = v6;
  v13 = a3;
  v14 = a3;
  if (v7 == -1)
    sub_20AECFAB8();
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  ((void (*)(std::string *, _DWORD *))off_24C41FBC0[v7])(&v8, v6);
  if (v7 == -1)
    sub_20AECFAB8();
  v10 = &v8;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C41FBA8[v7])(&v10, v6);
  if (v7 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C41FB90[v7])(&v10, v6);
  return result;
}

void sub_20B522070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B522090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20B522080);
}

_QWORD *sub_20B5220B4(_QWORD *a1, _BYTE *a2)
{
  const char *v2;
  uint64_t v3;

  switch(*a2)
  {
    case 0:
      v2 = "u8";
      v3 = 2;
      break;
    case 1:
      v2 = "u16";
      v3 = 3;
      break;
    case 2:
      v2 = "u32";
      v3 = 3;
      break;
    case 3:
      v2 = "u64";
      v3 = 3;
      break;
    case 5:
      v2 = "i8";
      v3 = 2;
      break;
    case 6:
      v2 = "i16";
      v3 = 3;
      break;
    case 7:
      v2 = "i32";
      v3 = 3;
      break;
    case 8:
      v2 = "i64";
      v3 = 3;
      break;
    case 0xB:
      v2 = "f32";
      v3 = 3;
      break;
    case 0xC:
      v2 = "f64";
      v3 = 3;
      break;
    default:
      v2 = "unknown arithmetic type";
      v3 = 23;
      break;
  }
  return sub_20AEC01D0(a1, (uint64_t)v2, v3);
}

uint64_t *sub_20B522188(uint64_t *a1, _BYTE *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  int v6;
  void *v7;
  void **v8;
  size_t v9;
  uint64_t *v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  std::logic_error *exception;
  std::string v23;
  std::string v24;
  void *v25;
  size_t v26;
  uint64_t v27;

  v4 = atomic_load((unsigned __int8 *)&qword_25463CBF0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463CBF0))
  {
    sub_20B522428();
    __cxa_atexit((void (*)(void *))sub_20B5227E4, &qword_25463CBF8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CBF0);
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  sub_20B1C68C0(a1, (uint64_t)&v25);
  v5 = qword_25463CC00;
  if (!qword_25463CC00)
    goto LABEL_41;
  v6 = SHIBYTE(v27);
  v7 = v25;
  if (v27 >= 0)
    v8 = &v25;
  else
    v8 = (void **)v25;
  if (v27 >= 0)
    v9 = HIBYTE(v27);
  else
    v9 = v26;
  v10 = &qword_25463CC00;
  do
  {
    while (1)
    {
      v11 = *(char *)(v5 + 55);
      v12 = v11 >= 0 ? (const void *)(v5 + 32) : *(const void **)(v5 + 32);
      v13 = v11 >= 0 ? *(unsigned __int8 *)(v5 + 55) : *(_QWORD *)(v5 + 40);
      v14 = v9 >= v13 ? v13 : v9;
      v15 = memcmp(v12, v8, v14);
      if (v15)
        break;
      if (v13 >= v9)
        goto LABEL_24;
LABEL_10:
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
        goto LABEL_25;
    }
    if (v15 < 0)
      goto LABEL_10;
LABEL_24:
    v10 = (uint64_t *)v5;
    v5 = *(_QWORD *)v5;
  }
  while (v5);
LABEL_25:
  if (v10 == &qword_25463CC00)
    goto LABEL_41;
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= v9)
    v19 = v9;
  else
    v19 = v18;
  v20 = memcmp(v8, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_37;
LABEL_41:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_20B214D58(", expected [u|i|f][{size}]", &v23, &v24);
    std::logic_error::logic_error(exception, &v24);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (v9 < v18)
    goto LABEL_41;
LABEL_37:
  *a2 = *((_BYTE *)v10 + 56);
  if (v6 < 0)
    operator delete(v7);
  return a1;
}

void sub_20B522398(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CBF0);
  _Unwind_Resume(a1);
}

void sub_20B5223B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (a27 < 0)
        operator delete(a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void sub_20B522428()
{
  uint64_t v0;
  void *v1;
  void *v2;
  size_t v3;
  int v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  int v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  uint64_t *v19;
  size_t v20;
  size_t v21;
  const void *v22;
  size_t v23;
  size_t v24;
  int v25;
  int v26;
  void *v27;
  _BYTE v28[15];
  unsigned __int8 v29;
  _BYTE v30[24];
  int v31;
  char v32;
  _QWORD v33[2];
  uint64_t v34;
  __int16 v35;
  _QWORD v36[3];

  v0 = 0;
  v36[2] = *MEMORY[0x24BDAC8D0];
  v34 = 0x807060503020100;
  qword_25463CC00 = 0;
  v35 = 3083;
  qword_25463CC08 = 0;
  qword_25463CBF8 = (uint64_t)&qword_25463CC00;
  v1 = &unk_25463C000;
  do
  {
    while (1)
    {
      v31 = 0;
      sub_20AF6A118((uint64_t)v33, (uint64_t)v30, (_BYTE *)&v34 + v0);
      if (v31 == -1)
        sub_20AECFAB8();
      v33[0] = &v32;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24C41FBA8[v31])(&v27, v33, v30);
      if (v31 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24C41FB90[v31])(v33, v30);
      v2 = v27;
      v36[0] = *(_QWORD *)v28;
      *(_QWORD *)((char *)v36 + 7) = *(_QWORD *)&v28[7];
      v3 = v29;
      v4 = (char)v29;
      v5 = operator new(0x40uLL);
      v5[4] = v2;
      v5[5] = v36[0];
      *(_QWORD *)((char *)v5 + 47) = *(_QWORD *)((char *)v36 + 7);
      *((_BYTE *)v5 + 55) = v4;
      v36[0] = 0;
      *(_QWORD *)((char *)v36 + 7) = 0;
      *((_BYTE *)v5 + 56) = *((_BYTE *)&v34 + v0);
      v6 = (uint64_t *)*((_QWORD *)v1 + 383);
      v8 = &qword_25463CC00;
      v7 = qword_25463CC00;
      if (v6 == &qword_25463CC00)
        goto LABEL_52;
      v9 = qword_25463CC00;
      if (qword_25463CC00)
      {
        do
        {
          v8 = (uint64_t *)v9;
          v9 = *(_QWORD *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        v10 = &qword_25463CC00;
        do
        {
          v8 = (uint64_t *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      v12 = *((char *)v8 + 55);
      if (v12 >= 0)
        v13 = v8 + 4;
      else
        v13 = (const void *)v8[4];
      if (v12 >= 0)
        v14 = *((unsigned __int8 *)v8 + 55);
      else
        v14 = v8[5];
      if (v4 >= 0)
        v15 = v5 + 4;
      else
        v15 = v2;
      if (v4 >= 0)
        v16 = v3;
      else
        v16 = v5[5];
      if (v16 >= v14)
        v17 = v14;
      else
        v17 = v16;
      v18 = memcmp(v13, v15, v17);
      if (!v18)
      {
        if (v14 < v16)
          goto LABEL_52;
LABEL_29:
        if (!v7)
        {
LABEL_58:
          v8 = &qword_25463CC00;
          v19 = &qword_25463CC00;
          goto LABEL_59;
        }
        while (1)
        {
          v8 = (uint64_t *)v7;
          v20 = *(unsigned __int8 *)(v7 + 55);
          v21 = *(_QWORD *)(v7 + 40);
          if ((v20 & 0x80u) == 0)
            v22 = (const void *)(v7 + 32);
          else
            v22 = *(const void **)(v7 + 32);
          if ((v20 & 0x80u) == 0)
            v23 = v20;
          else
            v23 = v21;
          if (v23 >= v16)
            v24 = v16;
          else
            v24 = v23;
          v25 = memcmp(v15, v22, v24);
          if (v25)
          {
            if (v25 < 0)
              goto LABEL_31;
LABEL_45:
            v26 = memcmp(v22, v15, v24);
            if (v26)
            {
              if ((v26 & 0x80000000) == 0)
                goto LABEL_54;
            }
            else if (v23 >= v16)
            {
              goto LABEL_54;
            }
            v7 = v8[1];
            if (!v7)
            {
              v19 = v8 + 1;
              goto LABEL_59;
            }
          }
          else
          {
            if (v16 >= v23)
              goto LABEL_45;
LABEL_31:
            v7 = *v8;
            v19 = v8;
            if (!*v8)
              goto LABEL_59;
          }
        }
      }
      if ((v18 & 0x80000000) == 0)
        goto LABEL_29;
LABEL_52:
      if (!v7)
        goto LABEL_58;
      v19 = v8 + 1;
      if (v8[1])
        break;
LABEL_59:
      *v5 = 0;
      v5[1] = 0;
      v5[2] = v8;
      *v19 = (uint64_t)v5;
      v1 = &unk_25463C000;
      if (*(_QWORD *)qword_25463CBF8)
      {
        qword_25463CBF8 = *(_QWORD *)qword_25463CBF8;
        v5 = (_QWORD *)*v19;
      }
      sub_20AEC84C8((uint64_t *)qword_25463CC00, v5);
      ++qword_25463CC08;
      if (++v0 == 10)
        return;
    }
LABEL_54:
    if (v4 < 0)
      operator delete(v2);
    operator delete(v5);
    v1 = &unk_25463C000;
    ++v0;
  }
  while (v0 != 10);
}

void sub_20B522778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B5227E4(uint64_t a1)
{
  sub_20B231C6C(*(char **)(a1 + 8));
  return a1;
}

void sub_20B52280C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *__p[2];
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  char v11;
  char v12;

  LOBYTE(__p[0]) = 0;
  v12 = 0;
  if (*(_BYTE *)(a1 + 96))
  {
    v5 = 0;
    if (*(_BYTE *)(a1 + 24))
    {
      *(_OWORD *)__p = *(_OWORD *)a1;
      v4 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      v5 = 1;
    }
    LOBYTE(v6) = 0;
    v11 = 0;
    if (*(_BYTE *)(a1 + 88))
    {
      v2 = *(_QWORD *)(a1 + 56);
      v7 = *(_QWORD *)(a1 + 48);
      v6 = *(_OWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v8 = v2;
      *(_OWORD *)v9 = *(_OWORD *)(a1 + 64);
      v10 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      v11 = 1;
    }
    v12 = 1;
  }
  sub_20AF558C0(0x16u, (__int128 *)__p, a2);
  if (v12)
  {
    if (!v11)
      goto LABEL_11;
    if (SHIBYTE(v10) < 0)
    {
      operator delete(v9[0]);
      if ((SHIBYTE(v7) & 0x80000000) == 0)
      {
LABEL_11:
        if (!v5)
          return;
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v7) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete((void *)v6);
    if (!v5)
      return;
LABEL_12:
    if (SHIBYTE(v4) < 0)
      operator delete(__p[0]);
  }
}

void sub_20B52292C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCDB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B522940(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *__p[2];
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  char v11;
  char v12;

  LOBYTE(__p[0]) = 0;
  v12 = 0;
  if (*(_BYTE *)(a1 + 96))
  {
    v5 = 0;
    if (*(_BYTE *)(a1 + 24))
    {
      *(_OWORD *)__p = *(_OWORD *)a1;
      v4 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      v5 = 1;
    }
    LOBYTE(v6) = 0;
    v11 = 0;
    if (*(_BYTE *)(a1 + 88))
    {
      v2 = *(_QWORD *)(a1 + 56);
      v7 = *(_QWORD *)(a1 + 48);
      v6 = *(_OWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v8 = v2;
      *(_OWORD *)v9 = *(_OWORD *)(a1 + 64);
      v10 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      v11 = 1;
    }
    v12 = 1;
  }
  sub_20AF558C0(0x66u, (__int128 *)__p, a2);
  if (v12)
  {
    if (!v11)
      goto LABEL_11;
    if (SHIBYTE(v10) < 0)
    {
      operator delete(v9[0]);
      if ((SHIBYTE(v7) & 0x80000000) == 0)
      {
LABEL_11:
        if (!v5)
          return;
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v7) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete((void *)v6);
    if (!v5)
      return;
LABEL_12:
    if (SHIBYTE(v4) < 0)
      operator delete(__p[0]);
  }
}

void sub_20B522A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCDB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B522A74(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 0;
  if (*(_BYTE *)a1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B522B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_20B522B54(char *__s, _BYTE *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  unsigned int v10;
  _QWORD v11[5];
  _QWORD *v12;

  v10 = 0;
  sub_20AF6B5FC(v9, __s);
  sub_20AF6A118((uint64_t)&v8, (uint64_t)v9, a2);
  v11[0] = v9;
  v11[1] = a3;
  v11[2] = v9;
  v11[3] = a3;
  v11[4] = a3;
  if (v10 == -1)
    sub_20AECFAB8();
  v12 = v11;
  ((void (*)(_QWORD **, _DWORD *))*(&off_24C41FBF0 + v10))(&v12, v9);
  sub_20AF6A118((uint64_t)v11, (uint64_t)v9, a4);
  if (v10 == -1)
    sub_20AECFAB8();
  v11[0] = &v12;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))*(&off_24C41FC08 + v10))(v11, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))*(&off_24C41FBD8 + v10))(v11, v9);
  return result;
}

void sub_20B522C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B522C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B522C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B522CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B522CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B522CCC(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 1;
  if (*(_BYTE *)a1 != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B522D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_20B522DB4(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 2;
  if (*(_BYTE *)a1 != 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B522E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_20B522E9C(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 3;
  if (*(_BYTE *)a1 != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B522F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_20B522F84(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 5;
  if (*(_BYTE *)a1 != 5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B523034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_20B52306C(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 6;
  if (*(_BYTE *)a1 != 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B52311C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_20B523154(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 7;
  if (*(_BYTE *)a1 != 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B523204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_20B52323C(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 8;
  if (*(_BYTE *)a1 != 8)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B5232EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_20B523324(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 11;
  if (*(_BYTE *)a1 != 11)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B5233D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_20B52340C(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 12;
  if (*(_BYTE *)a1 != 12)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B5234BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_20B5234F4(unsigned __int8 *a1, _BYTE *a2)
{
  int v3;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  __int16 *v15;
  int v16;
  int *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  float v21;
  unsigned int v22;
  double v23;
  unint64_t v24;
  unint64_t *v25;
  _DWORD *v27;
  _DWORD *v28;
  _QWORD *v29;
  float v30;
  float v31;
  double v32;
  double v33;
  _QWORD *v34;
  unsigned int *v35;
  _QWORD *v36;
  BOOL v37;
  _BOOL4 v38;
  BOOL v39;
  _BOOL4 v40;
  uint64_t v41;
  double v42;
  double v43;
  float v44;
  int8x8_t v45;
  int16x4_t v46;
  float v47;
  int16x4_t v48;
  uint64_t v49;

  v3 = *a1;
  switch(v3)
  {
    case 0:
      sub_20B522A74((uint64_t)a1);
      v5 = (unsigned __int8 *)sub_20B522A74((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v6 = *v5;
      switch(*a2)
      {
        case 0:
          goto LABEL_4;
        case 1:
          goto LABEL_38;
        case 2:
          goto LABEL_23;
        case 3:
          goto LABEL_20;
        case 5:
          goto LABEL_26;
        case 6:
          goto LABEL_27;
        case 7:
          goto LABEL_28;
        case 8:
          goto LABEL_31;
        case 0xB:
          goto LABEL_34;
        case 0xC:
          goto LABEL_35;
        default:
          goto LABEL_130;
      }
    case 1:
      sub_20B522CCC((uint64_t)a1);
      v7 = (unsigned __int16 *)sub_20B522CCC((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v6 = *v7;
      switch(*a2)
      {
        case 0:
LABEL_4:
          sub_20B522A74((uint64_t)a2);
          v8 = *(unsigned __int8 *)sub_20B522A74((uint64_t)a2);
          goto LABEL_53;
        case 1:
LABEL_38:
          sub_20B522CCC((uint64_t)a2);
          v8 = *(unsigned __int16 *)sub_20B522CCC((uint64_t)a2);
          goto LABEL_53;
        case 2:
          goto LABEL_23;
        case 3:
          goto LABEL_20;
        case 5:
          goto LABEL_26;
        case 6:
          goto LABEL_27;
        case 7:
          goto LABEL_28;
        case 8:
          goto LABEL_31;
        case 0xB:
          goto LABEL_34;
        case 0xC:
          goto LABEL_35;
        default:
          goto LABEL_130;
      }
    case 2:
      sub_20B522DB4((uint64_t)a1);
      v9 = (unsigned int *)sub_20B522DB4((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v6 = *v9;
      switch(*a2)
      {
        case 0:
          sub_20B522A74((uint64_t)a2);
          v10 = *(unsigned __int8 *)sub_20B522A74((uint64_t)a2);
          goto LABEL_48;
        case 1:
          sub_20B522CCC((uint64_t)a2);
          v10 = *(unsigned __int16 *)sub_20B522CCC((uint64_t)a2);
          goto LABEL_48;
        case 2:
          goto LABEL_43;
        case 3:
          goto LABEL_20;
        case 5:
          sub_20B522F84((uint64_t)a2);
          v10 = *(char *)sub_20B522F84((uint64_t)a2);
          goto LABEL_48;
        case 6:
          sub_20B52306C((uint64_t)a2);
          v10 = *(__int16 *)sub_20B52306C((uint64_t)a2);
LABEL_48:
          if (v6 < v10)
            return 0xFFFFFFFFLL;
          else
            return v6 > v10;
        case 7:
          sub_20B523154((uint64_t)a2);
          v35 = (unsigned int *)sub_20B523154((uint64_t)a2);
          goto LABEL_52;
        case 8:
          goto LABEL_31;
        case 0xB:
LABEL_34:
          sub_20B523324((uint64_t)a2);
          v30 = *(float *)sub_20B523324((uint64_t)a2);
          v31 = (float)v6;
          goto LABEL_92;
        case 0xC:
LABEL_35:
          sub_20B52340C((uint64_t)a2);
          v32 = *(double *)sub_20B52340C((uint64_t)a2);
          v33 = (double)v6;
          goto LABEL_97;
        default:
          goto LABEL_130;
      }
    case 3:
      sub_20B522E9C((uint64_t)a1);
      v11 = (uint64_t *)sub_20B522E9C((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v12 = *v11;
      switch(*a2)
      {
        case 0:
          sub_20B522A74((uint64_t)a2);
          v13 = *(unsigned __int8 *)sub_20B522A74((uint64_t)a2);
          goto LABEL_61;
        case 1:
          sub_20B522CCC((uint64_t)a2);
          v13 = *(unsigned __int16 *)sub_20B522CCC((uint64_t)a2);
          goto LABEL_61;
        case 2:
          sub_20B522DB4((uint64_t)a2);
          v13 = *(unsigned int *)sub_20B522DB4((uint64_t)a2);
          goto LABEL_61;
        case 3:
          goto LABEL_44;
        case 5:
          sub_20B522F84((uint64_t)a2);
          v13 = *(char *)sub_20B522F84((uint64_t)a2);
          goto LABEL_61;
        case 6:
          sub_20B52306C((uint64_t)a2);
          v13 = *(__int16 *)sub_20B52306C((uint64_t)a2);
          goto LABEL_61;
        case 7:
          sub_20B523154((uint64_t)a2);
          v13 = *(int *)sub_20B523154((uint64_t)a2);
LABEL_61:
          v37 = v12 >= v13;
          v38 = v12 > v13;
          if (v37)
            return v38;
          else
            return 0xFFFFFFFFLL;
        case 8:
          sub_20B52323C((uint64_t)a2);
          v36 = (_QWORD *)sub_20B52323C((uint64_t)a2);
          goto LABEL_65;
        case 0xB:
          sub_20B523324((uint64_t)a2);
          v30 = *(float *)sub_20B523324((uint64_t)a2);
          v31 = (float)(unint64_t)v12;
          goto LABEL_92;
        case 0xC:
          sub_20B52340C((uint64_t)a2);
          v32 = *(double *)sub_20B52340C((uint64_t)a2);
          v33 = (double)(unint64_t)v12;
          goto LABEL_97;
        default:
          goto LABEL_130;
      }
    case 5:
      sub_20B522F84((uint64_t)a1);
      v14 = (char *)sub_20B522F84((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v6 = *v14;
      switch(*a2)
      {
        case 0:
          goto LABEL_11;
        case 1:
          goto LABEL_39;
        case 2:
          goto LABEL_23;
        case 3:
          goto LABEL_20;
        case 5:
          goto LABEL_26;
        case 6:
          goto LABEL_27;
        case 7:
          goto LABEL_28;
        case 8:
          goto LABEL_40;
        case 0xB:
          goto LABEL_36;
        case 0xC:
          goto LABEL_37;
        default:
          goto LABEL_130;
      }
    case 6:
      sub_20B52306C((uint64_t)a1);
      v15 = (__int16 *)sub_20B52306C((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v6 = *v15;
      switch(*a2)
      {
        case 0:
LABEL_11:
          sub_20B522A74((uint64_t)a2);
          v16 = *(unsigned __int8 *)sub_20B522A74((uint64_t)a2);
          goto LABEL_77;
        case 1:
LABEL_39:
          sub_20B522CCC((uint64_t)a2);
          v16 = *(unsigned __int16 *)sub_20B522CCC((uint64_t)a2);
          goto LABEL_77;
        case 2:
LABEL_23:
          sub_20B522DB4((uint64_t)a2);
          v27 = (_DWORD *)sub_20B522DB4((uint64_t)a2);
          if (*v27 > v6)
            return 0xFFFFFFFFLL;
          else
            return *v27 < v6;
        case 3:
          goto LABEL_20;
        case 5:
LABEL_26:
          sub_20B522F84((uint64_t)a2);
          v16 = *(char *)sub_20B522F84((uint64_t)a2);
          goto LABEL_77;
        case 6:
LABEL_27:
          sub_20B52306C((uint64_t)a2);
          v16 = *(__int16 *)sub_20B52306C((uint64_t)a2);
          goto LABEL_77;
        case 7:
LABEL_28:
          sub_20B523154((uint64_t)a2);
          v28 = (_DWORD *)sub_20B523154((uint64_t)a2);
          if (*v28 > (int)v6)
            return 0xFFFFFFFFLL;
          else
            return *v28 < (int)v6;
        case 8:
LABEL_40:
          sub_20B52323C((uint64_t)a2);
          v34 = (_QWORD *)sub_20B52323C((uint64_t)a2);
          if (*v34 > (int)v6)
            return 0xFFFFFFFFLL;
          else
            return *v34 < (int)v6;
        case 0xB:
          goto LABEL_36;
        case 0xC:
          goto LABEL_37;
        default:
          goto LABEL_130;
      }
    case 7:
      sub_20B523154((uint64_t)a1);
      v17 = (int *)sub_20B523154((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v6 = *v17;
      switch(*a2)
      {
        case 0:
          sub_20B522A74((uint64_t)a2);
          v18 = *(unsigned __int8 *)sub_20B522A74((uint64_t)a2);
          goto LABEL_73;
        case 1:
          sub_20B522CCC((uint64_t)a2);
          v18 = *(unsigned __int16 *)sub_20B522CCC((uint64_t)a2);
          goto LABEL_73;
        case 2:
LABEL_43:
          sub_20B522DB4((uint64_t)a2);
          v35 = (unsigned int *)sub_20B522DB4((uint64_t)a2);
LABEL_52:
          v8 = *v35;
LABEL_53:
          if (v6 < v8)
            return 0xFFFFFFFFLL;
          else
            return v8 < v6;
        case 3:
LABEL_20:
          sub_20B522E9C((uint64_t)a2);
          v25 = (unint64_t *)sub_20B522E9C((uint64_t)a2);
          if (*v25 > v6)
            return 0xFFFFFFFFLL;
          else
            return *v25 < v6;
        case 5:
          sub_20B522F84((uint64_t)a2);
          v18 = *(char *)sub_20B522F84((uint64_t)a2);
          goto LABEL_73;
        case 6:
          sub_20B52306C((uint64_t)a2);
          v18 = *(__int16 *)sub_20B52306C((uint64_t)a2);
LABEL_73:
          if ((int)v6 < v18)
            return 0xFFFFFFFFLL;
          else
            return (int)v6 > v18;
        case 7:
          sub_20B523154((uint64_t)a2);
          v16 = *(_DWORD *)sub_20B523154((uint64_t)a2);
LABEL_77:
          if ((int)v6 < v16)
            return 0xFFFFFFFFLL;
          else
            return v16 < (int)v6;
        case 8:
LABEL_31:
          sub_20B52323C((uint64_t)a2);
          v29 = (_QWORD *)sub_20B52323C((uint64_t)a2);
          if (*v29 > (int64_t)v6)
            return 0xFFFFFFFFLL;
          else
            return *v29 < (uint64_t)v6;
        case 0xB:
LABEL_36:
          sub_20B523324((uint64_t)a2);
          v30 = *(float *)sub_20B523324((uint64_t)a2);
          v31 = (float)(int)v6;
          goto LABEL_92;
        case 0xC:
LABEL_37:
          sub_20B52340C((uint64_t)a2);
          v32 = *(double *)sub_20B52340C((uint64_t)a2);
          v33 = (double)(int)v6;
          goto LABEL_97;
        default:
          goto LABEL_130;
      }
    case 8:
      sub_20B52323C((uint64_t)a1);
      v19 = (uint64_t *)sub_20B52323C((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v12 = *v19;
      switch(*a2)
      {
        case 0:
          sub_20B522A74((uint64_t)a2);
          v20 = *(unsigned __int8 *)sub_20B522A74((uint64_t)a2);
          goto LABEL_85;
        case 1:
          sub_20B522CCC((uint64_t)a2);
          v20 = *(unsigned __int16 *)sub_20B522CCC((uint64_t)a2);
          goto LABEL_85;
        case 2:
          sub_20B522DB4((uint64_t)a2);
          v20 = *(unsigned int *)sub_20B522DB4((uint64_t)a2);
          goto LABEL_85;
        case 3:
LABEL_44:
          sub_20B522E9C((uint64_t)a2);
          v36 = (_QWORD *)sub_20B522E9C((uint64_t)a2);
LABEL_65:
          if ((unint64_t)v12 < *v36)
            return 0xFFFFFFFFLL;
          else
            return *v36 < (unint64_t)v12;
        case 5:
          sub_20B522F84((uint64_t)a2);
          v20 = *(char *)sub_20B522F84((uint64_t)a2);
          goto LABEL_85;
        case 6:
          sub_20B52306C((uint64_t)a2);
          v20 = *(__int16 *)sub_20B52306C((uint64_t)a2);
          goto LABEL_85;
        case 7:
          sub_20B523154((uint64_t)a2);
          v20 = *(int *)sub_20B523154((uint64_t)a2);
LABEL_85:
          v39 = v12 < v20;
          v40 = v12 > v20;
          if (v39)
            return 0xFFFFFFFFLL;
          else
            return v40;
        case 8:
          sub_20B52323C((uint64_t)a2);
          v41 = *(_QWORD *)sub_20B52323C((uint64_t)a2);
          if (v12 < v41)
            return 0xFFFFFFFFLL;
          else
            return v41 < v12;
        case 0xB:
          sub_20B523324((uint64_t)a2);
          v30 = *(float *)sub_20B523324((uint64_t)a2);
          v31 = (float)v12;
LABEL_92:
          if (v30 > v31)
            return 0xFFFFFFFFLL;
          else
            return v30 < v31;
        case 0xC:
          sub_20B52340C((uint64_t)a2);
          v32 = *(double *)sub_20B52340C((uint64_t)a2);
          v33 = (double)v12;
          goto LABEL_97;
        default:
          goto LABEL_130;
      }
    case 11:
      sub_20B523324((uint64_t)a1);
      v21 = *(float *)sub_20B523324((uint64_t)a1);
      LOBYTE(v3) = *a2;
      switch(*a2)
      {
        case 0:
          sub_20B522A74((uint64_t)a2);
          LOBYTE(v22) = *(_BYTE *)sub_20B522A74((uint64_t)a2);
          goto LABEL_106;
        case 1:
          sub_20B522CCC((uint64_t)a2);
          LOWORD(v22) = *(_WORD *)sub_20B522CCC((uint64_t)a2);
          goto LABEL_106;
        case 2:
          sub_20B522DB4((uint64_t)a2);
          v22 = *(_DWORD *)sub_20B522DB4((uint64_t)a2);
LABEL_106:
          v44 = (float)v22;
          goto LABEL_112;
        case 3:
          sub_20B522E9C((uint64_t)a2);
          v44 = (float)*(unint64_t *)sub_20B522E9C((uint64_t)a2);
          goto LABEL_112;
        case 5:
          sub_20B522F84((uint64_t)a2);
          v45.i8[0] = *(_BYTE *)sub_20B522F84((uint64_t)a2);
          v44 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v45)).i32[0];
          goto LABEL_112;
        case 6:
          sub_20B52306C((uint64_t)a2);
          v46.i16[0] = *(_WORD *)sub_20B52306C((uint64_t)a2);
          v44 = (float)vmovl_s16(v46).i32[0];
          goto LABEL_112;
        case 7:
          sub_20B523154((uint64_t)a2);
          v44 = (float)*(int *)sub_20B523154((uint64_t)a2);
          goto LABEL_112;
        case 8:
          sub_20B52323C((uint64_t)a2);
          v44 = (float)*(uint64_t *)sub_20B52323C((uint64_t)a2);
LABEL_112:
          if (v21 < v44)
            return 0xFFFFFFFFLL;
          else
            return v21 > v44;
        case 0xB:
          sub_20B523324((uint64_t)a2);
          v47 = *(float *)sub_20B523324((uint64_t)a2);
          if (v21 < v47)
            return 0xFFFFFFFFLL;
          else
            return v47 < v21;
        case 0xC:
          sub_20B52340C((uint64_t)a2);
          v32 = *(double *)sub_20B52340C((uint64_t)a2);
          v33 = v21;
LABEL_97:
          if (v32 > v33)
            return 0xFFFFFFFFLL;
          else
            return v32 < v33;
        default:
          goto LABEL_130;
      }
    case 12:
      sub_20B52340C((uint64_t)a1);
      v23 = *(double *)sub_20B52340C((uint64_t)a1);
      LOBYTE(v3) = *a2;
      switch(*a2)
      {
        case 0:
          sub_20B522A74((uint64_t)a2);
          LOBYTE(v24) = *(_BYTE *)sub_20B522A74((uint64_t)a2);
          goto LABEL_121;
        case 1:
          sub_20B522CCC((uint64_t)a2);
          LOWORD(v24) = *(_WORD *)sub_20B522CCC((uint64_t)a2);
          goto LABEL_121;
        case 2:
          sub_20B522DB4((uint64_t)a2);
          LODWORD(v24) = *(_DWORD *)sub_20B522DB4((uint64_t)a2);
          goto LABEL_121;
        case 3:
          sub_20B522E9C((uint64_t)a2);
          v24 = *(_QWORD *)sub_20B522E9C((uint64_t)a2);
LABEL_121:
          v42 = (double)v24;
          goto LABEL_127;
        case 5:
          sub_20B522F84((uint64_t)a2);
          v42 = (double)*(char *)sub_20B522F84((uint64_t)a2);
          goto LABEL_127;
        case 6:
          sub_20B52306C((uint64_t)a2);
          v48.i16[0] = *(_WORD *)sub_20B52306C((uint64_t)a2);
          v49 = vmovl_s16(v48).i32[0];
          goto LABEL_125;
        case 7:
          sub_20B523154((uint64_t)a2);
          v49 = *(int *)sub_20B523154((uint64_t)a2);
LABEL_125:
          v42 = (double)v49;
          goto LABEL_127;
        case 8:
          sub_20B52323C((uint64_t)a2);
          v42 = (double)*(uint64_t *)sub_20B52323C((uint64_t)a2);
          goto LABEL_127;
        case 0xB:
          sub_20B523324((uint64_t)a2);
          v42 = *(float *)sub_20B523324((uint64_t)a2);
LABEL_127:
          if (v23 < v42)
            return 0xFFFFFFFFLL;
          else
            return v23 > v42;
        case 0xC:
          sub_20B52340C((uint64_t)a2);
          v43 = *(double *)sub_20B52340C((uint64_t)a2);
          if (v23 < v43)
            return 0xFFFFFFFFLL;
          else
            return v43 < v23;
        default:
          goto LABEL_130;
      }
    default:
      break;
  }
LABEL_130:
  sub_20B521E58(v3);
}

_QWORD *sub_20B524068(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  std::string *v7;
  std::string::size_type size;
  unsigned __int16 *v9;
  unsigned int *v10;
  unint64_t *v11;
  char *v12;
  __int16 *v13;
  uint64_t *v14;
  int *v15;
  std::string v17;
  double v18;
  char v19;

  v4 = sub_20AEC01D0(a1, (uint64_t)"{", 1);
  v17.__r_.__value_.__s.__data_[0] = *a2;
  v5 = sub_20B5220B4(v4, &v17);
  sub_20AEC01D0(v5, (uint64_t)",", 1);
  switch(*a2)
  {
    case 0u:
      v6 = (unsigned __int8 *)sub_20B522A74((uint64_t)a2);
      std::to_string(&v17, *v6);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      goto LABEL_52;
    case 1u:
      v9 = (unsigned __int16 *)sub_20B522CCC((uint64_t)a2);
      std::to_string(&v17, *v9);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      goto LABEL_52;
    case 2u:
      v10 = (unsigned int *)sub_20B522DB4((uint64_t)a2);
      std::to_string(&v17, *v10);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      goto LABEL_52;
    case 3u:
      v11 = (unint64_t *)sub_20B522E9C((uint64_t)a2);
      std::to_string(&v17, *v11);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      goto LABEL_52;
    case 5u:
      v12 = (char *)sub_20B522F84((uint64_t)a2);
      std::to_string(&v17, *v12);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      goto LABEL_52;
    case 6u:
      v13 = (__int16 *)sub_20B52306C((uint64_t)a2);
      std::to_string(&v17, *v13);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      goto LABEL_52;
    case 7u:
      v15 = (int *)sub_20B523154((uint64_t)a2);
      std::to_string(&v17, *v15);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      goto LABEL_52;
    case 8u:
      v14 = (uint64_t *)sub_20B52323C((uint64_t)a2);
      std::to_string(&v17, *v14);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
LABEL_52:
      sub_20AEC01D0(a1, (uint64_t)v7, size);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      break;
    case 0xBu:
      LODWORD(v18) = *(_DWORD *)sub_20B523324((uint64_t)a2);
      v17.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      sub_20B0F9B58((uint64_t)&v19, &v17, (float *)&v18);
      break;
    case 0xCu:
      v18 = *(double *)sub_20B52340C((uint64_t)a2);
      v17.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      sub_20B43E9F0((uint64_t)&v19, &v17, &v18);
      break;
    default:
      sub_20B521E58(*a2);
  }
  return sub_20AEC01D0(a1, (uint64_t)"}", 1);
}

void sub_20B524338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B524370(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  uint64_t v15;
  const std::ios_base *v16;
  const std::locale::facet *v17;
  int v18;
  uint64_t i;
  size_t v20;
  void **p_dst;
  unint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void **v27;
  void **__dst;
  size_t v31;
  int64_t v32;
  std::locale v33;
  uint64_t v34;
  _QWORD v35[2];
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  unint64_t v40;
  void *__p[2];
  __int128 v42;
  int v43;
  _QWORD v44[21];

  v44[19] = *MEMORY[0x24BDAC8D0];
  v8 = MEMORY[0x24BEDB870];
  v9 = MEMORY[0x24BEDB870] + 64;
  v10 = (uint64_t *)MEMORY[0x24BEDB800];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v12 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v44[0] = MEMORY[0x24BEDB870] + 64;
  v34 = v11;
  *(_QWORD *)((char *)&v35[-1] + *(_QWORD *)(v11 - 24)) = v12;
  v13 = (std::ios_base *)((char *)&v35[-1] + *(_QWORD *)(v34 - 24));
  std::ios_base::init(v13, v35);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v34 = v8 + 24;
  v44[0] = v9;
  std::streambuf::basic_streambuf();
  v14 = MEMORY[0x24BEDB848];
  v35[0] = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v42 = 0u;
  v43 = 16;
  v15 = v34;
  *(_DWORD *)((char *)v35 + *(_QWORD *)(v34 - 24)) = *(_DWORD *)((_BYTE *)v35 + *(_QWORD *)(v34 - 24)) & 0xFFFFFFB5 | 8;
  v16 = (const std::ios_base *)((char *)&v35[-1] + *(_QWORD *)(v15 - 24));
  if (v16[1].__fmtflags_ != -1)
  {
    v16[1].__fmtflags_ = 48;
    if (!a1)
      goto LABEL_11;
LABEL_5:
    v18 = 0;
    for (i = a1 - 1; ; --i)
    {
      v18 |= *(_BYTE *)(a2 + i) != 0;
      if ((v18 & 1) != 0)
      {
        *(const void **)((char *)&v36 + *(_QWORD *)(v34 - 24)) = (const void *)2;
        std::ostream::operator<<();
        if (!i)
          goto LABEL_12;
      }
      else if (!i)
      {
        goto LABEL_11;
      }
    }
  }
  std::ios_base::getloc(v16);
  v17 = std::locale::use_facet(&v33, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 32);
  std::locale::~locale(&v33);
  v16[1].__fmtflags_ = 48;
  if (a1)
    goto LABEL_5;
LABEL_11:
  *(const void **)((char *)&v36 + *(_QWORD *)(v34 - 24)) = (const void *)2;
  std::ostream::operator<<();
LABEL_12:
  if ((v43 & 0x10) != 0)
  {
    v22 = *((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1) < v40)
    {
      *((_QWORD *)&v42 + 1) = v40;
      v22 = v40;
    }
    v23 = v39;
    v20 = v22 - (_QWORD)v39;
    if (v22 - (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_33;
  }
  else
  {
    if ((v43 & 8) == 0)
    {
      v20 = 0;
      HIBYTE(v32) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_25;
    }
    v23 = v36;
    v20 = v38 - (_QWORD)v36;
    if ((unint64_t)(v38 - (_QWORD)v36) >= 0x7FFFFFFFFFFFFFF8)
LABEL_33:
      sub_20AEC0138();
  }
  if (v20 >= 0x17)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v24 = v20 | 7;
    v25 = v24 + 1;
    p_dst = (void **)operator new(v24 + 1);
    v31 = v20;
    v32 = v25 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_24;
  }
  HIBYTE(v32) = v20;
  p_dst = (void **)&__dst;
  if (v20)
LABEL_24:
    memmove(p_dst, v23, v20);
LABEL_25:
  *((_BYTE *)p_dst + v20) = 0;
  v34 = *v10;
  *(_QWORD *)((char *)&v35[-1] + *(_QWORD *)(v34 - 24)) = v10[3];
  v35[0] = v14 + 16;
  if (SBYTE7(v42) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD35758](v44);
  v34 = a3;
  v35[0] = a4;
  v26 = HIBYTE(v32);
  v27 = (void **)&__dst;
  if (v32 < 0)
  {
    v27 = __dst;
    v26 = v31;
  }
  v35[1] = v27;
  v36 = (const void *)v26;
  sub_20AECFDF8((uint64_t)&v34, (uint64_t)&v37, 0, 0, a5);
  if (SHIBYTE(v32) < 0)
    operator delete(__dst);
}

void sub_20B5246E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B43596C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B5246F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B43596C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B52470C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, char a16)
{
  std::locale::~locale(&a15);
  sub_20B43596C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20B524728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B52476C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B43596C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B524780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B43596C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B524794(_QWORD *a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v10;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *result;
  _QWORD *v16;
  std::string __p;
  unsigned int v18;
  uint64_t v19;

  sub_20B52490C();
  v4 = qword_25463D108;
  if (!qword_25463D108)
    goto LABEL_12;
  v5 = *a2;
  v6 = &qword_25463D108;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = (uint64_t *)v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != &qword_25463D108 && v5 >= *((_DWORD *)v6 + 8))
  {
    sub_20B52490C();
    return sub_20AEC01D0(a1, v6[5], v6[6]);
  }
  else
  {
LABEL_12:
    sub_20B52490C();
    v18 = *a2;
    v10 = sub_20AEC01D0(a1, (uint64_t)"Unknown pixel format '", 22);
    sub_20B5256FC((uint64_t)&v19, (uint64_t)&v18, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v13 = sub_20AEC01D0(v10, (uint64_t)p_p, size);
    sub_20AEC01D0(v13, (uint64_t)"' (=", 4);
    v14 = (_QWORD *)std::ostream::operator<<();
    result = sub_20AEC01D0(v14, (uint64_t)")", 1);
    v16 = result;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      return v16;
    }
  }
  return result;
}

void sub_20B5248F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B52490C()
{
  unsigned __int8 v0;
  uint64_t v1[3];
  int v2;
  const char *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  int v26;
  const char *v27;
  uint64_t v28;
  int v29;
  const char *v30;
  uint64_t v31;
  int v32;
  const char *v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  int v38;
  const char *v39;
  uint64_t v40;
  int v41;
  const char *v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  int v47;
  const char *v48;
  uint64_t v49;
  int v50;
  const char *v51;
  uint64_t v52;
  int v53;
  const char *v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  int v59;
  const char *v60;
  uint64_t v61;
  int v62;
  const char *v63;
  uint64_t v64;
  int v65;
  const char *v66;
  uint64_t v67;
  int v68;
  const char *v69;
  uint64_t v70;
  int v71;
  const char *v72;
  uint64_t v73;
  int v74;
  const char *v75;
  uint64_t v76;
  int v77;
  const char *v78;
  uint64_t v79;
  int v80;
  const char *v81;
  uint64_t v82;
  int v83;
  const char *v84;
  uint64_t v85;
  int v86;
  const char *v87;
  uint64_t v88;
  int v89;
  const char *v90;
  uint64_t v91;
  int v92;
  const char *v93;
  uint64_t v94;
  int v95;
  const char *v96;
  uint64_t v97;
  int v98;
  const char *v99;
  uint64_t v100;
  int v101;
  const char *v102;
  uint64_t v103;
  int v104;
  const char *v105;
  uint64_t v106;
  int v107;
  const char *v108;
  uint64_t v109;
  int v110;
  const char *v111;
  uint64_t v112;
  int v113;
  const char *v114;
  uint64_t v115;
  int v116;
  const char *v117;
  uint64_t v118;
  int v119;
  const char *v120;
  uint64_t v121;
  int v122;
  const char *v123;
  uint64_t v124;
  int v125;
  const char *v126;
  uint64_t v127;
  int v128;
  const char *v129;
  uint64_t v130;
  int v131;
  const char *v132;
  uint64_t v133;
  int v134;
  const char *v135;
  uint64_t v136;
  int v137;
  const char *v138;
  uint64_t v139;
  int v140;
  const char *v141;
  uint64_t v142;
  int v143;
  const char *v144;
  uint64_t v145;
  int v146;
  const char *v147;
  uint64_t v148;
  int v149;
  const char *v150;
  uint64_t v151;
  int v152;
  const char *v153;
  uint64_t v154;
  int v155;
  const char *v156;
  uint64_t v157;
  int v158;
  const char *v159;
  uint64_t v160;
  int v161;
  const char *v162;
  uint64_t v163;
  int v164;
  const char *v165;
  uint64_t v166;
  int v167;
  const char *v168;
  uint64_t v169;
  int v170;
  const char *v171;
  uint64_t v172;
  int v173;
  const char *v174;
  uint64_t v175;
  int v176;
  const char *v177;
  uint64_t v178;
  int v179;
  const char *v180;
  uint64_t v181;
  int v182;
  const char *v183;
  uint64_t v184;
  int v185;
  const char *v186;
  uint64_t v187;
  int v188;
  const char *v189;
  uint64_t v190;
  int v191;
  const char *v192;
  uint64_t v193;
  int v194;
  const char *v195;
  uint64_t v196;
  int v197;
  const char *v198;
  uint64_t v199;
  int v200;
  const char *v201;
  uint64_t v202;
  int v203;
  const char *v204;
  uint64_t v205;
  int v206;
  const char *v207;
  uint64_t v208;
  int v209;
  const char *v210;
  uint64_t v211;
  int v212;
  const char *v213;
  uint64_t v214;
  int v215;
  const char *v216;
  uint64_t v217;
  int v218;
  const char *v219;
  uint64_t v220;
  int v221;
  const char *v222;
  uint64_t v223;
  int v224;
  const char *v225;
  uint64_t v226;
  int v227;
  const char *v228;
  uint64_t v229;
  int v230;
  const char *v231;
  uint64_t v232;
  int v233;
  const char *v234;
  uint64_t v235;
  int v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;

  v239 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25463CC10);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25463CC10))
    {
      LODWORD(v1[0]) = 1278226488;
      v1[1] = (uint64_t)"OneComponent8";
      v1[2] = 13;
      v2 = 24;
      v3 = "24RGB";
      v4 = 5;
      v5 = 32;
      v6 = "32ARGB";
      v7 = 6;
      v8 = 1111970369;
      v9 = "32BGRA";
      v10 = 6;
      v11 = 1647719521;
      v12 = "64ARGB";
      v13 = 6;
      v14 = 1647589490;
      v15 = "48RGB";
      v16 = 5;
      v17 = 1647392359;
      v18 = "16Gray";
      v19 = 6;
      v20 = 875704438;
      v21 = "420YpCbCr8BiPlanarVideoRange";
      v22 = 28;
      v23 = 875704422;
      v24 = "420YpCbCr8BiPlanarFullRange";
      v25 = 27;
      v26 = 875836534;
      v27 = "444YpCbCr8BiPlanarVideoRange";
      v28 = 28;
      v29 = 875836518;
      v30 = "444YpCbCr8BiPlanarFullRange";
      v31 = 27;
      v32 = 843264056;
      v33 = "TwoComponent8";
      v34 = 13;
      v35 = 1278226536;
      v36 = "OneComponent16Half";
      v37 = 18;
      v38 = 1278226534;
      v39 = "OneComponent32Float";
      v40 = 19;
      v41 = 843264104;
      v42 = "TwoComponent16Half";
      v43 = 18;
      v44 = 843264102;
      v45 = "TwoComponent32Float";
      v46 = 19;
      v47 = 1380411457;
      v48 = "64RGBAHalf";
      v49 = 10;
      v50 = 1380410945;
      v51 = "128RGBAFloat";
      v52 = 12;
      v53 = 1751411059;
      v54 = "DisparityFloat16";
      v55 = 16;
      v56 = 1717856627;
      v57 = "DisparityFloat32";
      v58 = 16;
      v59 = 1751410032;
      v60 = "DepthFloat16";
      v61 = 12;
      v62 = 1717855600;
      v63 = "DepthFloat32";
      v64 = 12;
      v65 = 842285639;
      v66 = "24BGR";
      v67 = 5;
      v68 = 1380401729;
      v69 = "32RGBA";
      v70 = 6;
      v71 = 1094862674;
      v72 = "32ABGR";
      v73 = 6;
      v74 = 1278226742;
      v75 = "OneComponent16";
      v76 = 14;
      v77 = 843264310;
      v78 = "TwoComponent16";
      v79 = 14;
      v80 = 1;
      v81 = "1Monochrome";
      v82 = 11;
      v83 = 2;
      v84 = "2Indexed";
      v85 = 8;
      v86 = 4;
      v87 = "4Indexed";
      v88 = 8;
      v89 = 8;
      v90 = "8Indexed";
      v91 = 8;
      v92 = 33;
      v93 = "1IndexedGray_WhiteIsZero";
      v94 = 24;
      v95 = 34;
      v96 = "2IndexedGray_WhiteIsZero";
      v97 = 24;
      v98 = 36;
      v99 = "4IndexedGray_WhiteIsZero";
      v100 = 24;
      v101 = 40;
      v102 = "8IndexedGray_WhiteIsZero";
      v103 = 24;
      v104 = 16;
      v105 = "16BE555";
      v106 = 7;
      v107 = 1278555445;
      v108 = "16LE555";
      v109 = 7;
      v110 = 892679473;
      v111 = "16LE5551";
      v112 = 8;
      v113 = 1110783541;
      v114 = "16BE565";
      v115 = 7;
      v116 = 1278555701;
      v117 = "16LE565";
      v118 = 7;
      v119 = 1815491698;
      v120 = "64RGBALE";
      v121 = 8;
      v122 = 1647522401;
      v123 = "32AlphaGray";
      v124 = 11;
      v125 = 1378955371;
      v126 = "30RGB";
      v127 = 5;
      v128 = 846624121;
      v129 = "422YpCbCr8";
      v130 = 10;
      v131 = 1983131704;
      v132 = "4444YpCbCrA8";
      v133 = 12;
      v134 = 1916022840;
      v135 = "4444YpCbCrA8R";
      v136 = 13;
      v137 = 2033463352;
      v138 = "4444AYpCbCr8";
      v139 = 12;
      v140 = 2033463606;
      v141 = "4444AYpCbCr16";
      v142 = 13;
      v143 = 1983066168;
      v144 = "444YpCbCr8";
      v145 = 10;
      v146 = 1983000886;
      v147 = "422YpCbCr16";
      v148 = 11;
      v149 = 1983000880;
      v150 = "422YpCbCr10";
      v151 = 11;
      v152 = 1983131952;
      v153 = "444YpCbCr10";
      v154 = 11;
      v155 = 2033463856;
      v156 = "420YpCbCr8Planar";
      v157 = 16;
      v158 = 1714696752;
      v159 = "420YpCbCr8PlanarFullRange";
      v160 = 25;
      v161 = 1630697081;
      v162 = "422YpCbCr_4A_8BiPlanar";
      v163 = 22;
      v164 = 875704950;
      v165 = "422YpCbCr8BiPlanarVideoRange";
      v166 = 28;
      v167 = 875704934;
      v168 = "422YpCbCr8BiPlanarFullRange";
      v169 = 27;
      v170 = 2037741171;
      v171 = "422YpCbCr8_yuvs";
      v172 = 15;
      v173 = 2037741158;
      v174 = "422YpCbCr8FullRange";
      v175 = 19;
      v176 = 1999843442;
      v177 = "30RGBLEPackedWideGamut";
      v178 = 22;
      v179 = 1815162994;
      v180 = "ARGB2101010LEPacked";
      v181 = 19;
      v182 = 1999908961;
      v183 = "40ARGBLEWideGamut";
      v184 = 17;
      v185 = 1999908973;
      v186 = "40ARGBLEWideGamutPremultiplied";
      v187 = 30;
      v188 = 1278226736;
      v189 = "OneComponent10";
      v190 = 14;
      v191 = 1278226738;
      v192 = "OneComponent12";
      v193 = 14;
      v194 = 1735549492;
      v195 = "14Bayer_GRBG";
      v196 = 12;
      v197 = 1919379252;
      v198 = "14Bayer_RGGB";
      v199 = 12;
      v200 = 1650943796;
      v201 = "14Bayer_BGGR";
      v202 = 12;
      v203 = 1734505012;
      v204 = "14Bayer_GBRG";
      v205 = 12;
      v206 = 1751411059;
      v207 = "DisparityFloat16";
      v208 = 16;
      v209 = 1717856627;
      v210 = "DisparityFloat32";
      v211 = 16;
      v212 = 2016686640;
      v213 = "420YpCbCr10BiPlanarVideoRange";
      v214 = 29;
      v215 = 2016686642;
      v216 = "422YpCbCr10BiPlanarVideoRange";
      v217 = 29;
      v218 = 2016687156;
      v219 = "444YpCbCr10BiPlanarVideoRange";
      v220 = 29;
      v221 = 2019963440;
      v222 = "420YpCbCr10BiPlanarFullRange";
      v223 = 28;
      v224 = 2019963442;
      v225 = "422YpCbCr10BiPlanarFullRange";
      v226 = 28;
      v227 = 2019963956;
      v228 = "444YpCbCr10BiPlanarFullRange";
      v229 = 28;
      v230 = 1982882104;
      v231 = "420YpCbCr8VideoRange_8A_TriPlanar";
      v232 = 33;
      v233 = 1651519798;
      v234 = "16VersatileBayer";
      v235 = 16;
      v236 = 1651521076;
      v237 = "64RGBA_DownscaledProResRAW";
      v238 = 26;
      sub_20B525568(v1, 80);
      __cxa_atexit((void (*)(void *))sub_20B525540, &qword_25463D100, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CC10);
    }
  }
}

void sub_20B5251B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CC10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B5251D0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463D0F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463D0F8))
  {
    sub_20B52490C();
    sub_20B525278(&qword_25463D100, (char **)&qword_25463D0E0);
    __cxa_atexit((void (*)(void *))sub_20AF7993C, &qword_25463D0E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463D0F8);
  }
  return (unk_25463D0E8 - qword_25463D0E0) >> 2;
}

void sub_20B525260(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D0F8);
  _Unwind_Resume(a1);
}

void sub_20B525278(_QWORD *a1@<X0>, char **a2@<X8>)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  char *v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  int v22;
  _QWORD *v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  char **v32;
  char *v33;

  v4 = a1[2];
  v33 = 0;
  if (v4)
  {
    if (v4 >> 62)
      sub_20AEC60B8();
    v5 = (char *)operator new(4 * v4);
    v6 = &v5[4 * v4];
    v33 = v5;
    v9 = (_QWORD *)*a1;
    v7 = a1 + 1;
    v8 = v9;
    if (v9 != v7)
      goto LABEL_4;
LABEL_43:
    v12 = (uint64_t)v5;
    goto LABEL_44;
  }
  v6 = 0;
  v5 = 0;
  v7 = a1 + 1;
  v8 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
    goto LABEL_43;
LABEL_4:
  v32 = a2;
  v10 = v5;
  do
  {
    v11 = *((_DWORD *)v8 + 8);
    if (v5 < v6)
    {
      *(_DWORD *)v5 = v11;
      v12 = (uint64_t)(v5 + 4);
      v13 = (_QWORD *)v8[1];
      if (!v13)
        goto LABEL_28;
      goto LABEL_26;
    }
    v14 = (v5 - v10) >> 2;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62)
      sub_20AEC60B8();
    if ((v6 - v10) >> 1 > v15)
      v15 = (v6 - v10) >> 1;
    if ((unint64_t)(v6 - v10) >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 >> 62)
        sub_20AEC60CC();
      v17 = operator new(4 * v16);
      v18 = &v17[4 * v14];
      *(_DWORD *)v18 = v11;
      v12 = (uint64_t)(v18 + 4);
      v19 = v5 - v10;
      if (v5 == v10)
        goto LABEL_23;
    }
    else
    {
      v17 = 0;
      v18 = (char *)(4 * v14);
      *(_DWORD *)(4 * v14) = v11;
      v12 = 4 * v14 + 4;
      v19 = v5 - v10;
      if (v5 == v10)
        goto LABEL_23;
    }
    v20 = v19 - 4;
    if (v20 < 0xBC)
    {
      v21 = v5;
      goto LABEL_22;
    }
    v25 = (v5 - 4 - v10) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v17[v5 - v10 - 4 - v25] > &v17[v5 - v10 - 4])
    {
      v21 = v5;
      do
      {
LABEL_22:
        v22 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *((_DWORD *)v18 - 1) = v22;
        v18 -= 4;
      }
      while (v21 != v10);
      goto LABEL_23;
    }
    if (&v5[-v25 - 4] > v5 - 4)
    {
      v21 = v5;
      goto LABEL_22;
    }
    if ((unint64_t)(v10 - v17) < 0x20)
    {
      v21 = v5;
      goto LABEL_22;
    }
    v26 = (v20 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v21 = &v5[-v27];
    v18 -= v27;
    v28 = &v17[4 * v14 - 16];
    v29 = v5 - 16;
    v30 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 8;
    }
    while (v30);
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_22;
LABEL_23:
    v6 = &v17[4 * v16];
    v33 = v18;
    if (v10)
      operator delete(v10);
    v10 = v18;
    v13 = (_QWORD *)v8[1];
    if (!v13)
    {
      do
      {
LABEL_28:
        v23 = (_QWORD *)v8[2];
        v24 = *v23 == (_QWORD)v8;
        v8 = v23;
      }
      while (!v24);
      goto LABEL_5;
    }
    do
    {
LABEL_26:
      v23 = v13;
      v13 = (_QWORD *)*v13;
    }
    while (v13);
LABEL_5:
    v5 = (char *)v12;
    v8 = v23;
  }
  while (v23 != v7);
  a2 = v32;
  v5 = v33;
LABEL_44:
  *a2 = v5;
  a2[1] = (char *)v12;
  a2[2] = v6;
}

void sub_20B525514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B525540(uint64_t a1)
{
  sub_20B1F7D90(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *sub_20B525568(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  __int128 v14;

  qword_25463D110 = 0;
  qword_25463D108 = 0;
  qword_25463D100 = (uint64_t)&qword_25463D108;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = &result[3 * a2];
LABEL_6:
    v6 = &qword_25463D108;
LABEL_10:
    if (v3)
    {
      v10 = v6 + 1;
      if (v6[1])
        goto LABEL_24;
    }
    else
    {
LABEL_20:
      v10 = &qword_25463D108;
      v6 = &qword_25463D108;
    }
LABEL_21:
    v13 = operator new(0x38uLL);
    v14 = *(_OWORD *)v2;
    v13[6] = v2[2];
    *((_OWORD *)v13 + 2) = v14;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = v6;
    *v10 = (uint64_t)v13;
    if (*(_QWORD *)qword_25463D100)
    {
      qword_25463D100 = *(_QWORD *)qword_25463D100;
      v13 = (_QWORD *)*v10;
    }
    result = sub_20AEC84C8((uint64_t *)qword_25463D108, v13);
    ++qword_25463D110;
LABEL_24:
    while (1)
    {
      v2 += 3;
      if (v2 == v4)
        break;
      v3 = qword_25463D108;
      if ((uint64_t *)qword_25463D100 == &qword_25463D108)
        goto LABEL_6;
      v5 = qword_25463D108;
      if (qword_25463D108)
      {
        do
        {
          v6 = (uint64_t *)v5;
          v5 = *(_QWORD *)(v5 + 8);
        }
        while (v5);
      }
      else
      {
        v7 = &qword_25463D108;
        do
        {
          v6 = (uint64_t *)v7[2];
          v8 = *v6 == (_QWORD)v7;
          v7 = v6;
        }
        while (v8);
      }
      v9 = *(_DWORD *)v2;
      if (*((_DWORD *)v6 + 8) < *(_DWORD *)v2)
        goto LABEL_10;
      if (!qword_25463D108)
        goto LABEL_20;
      v11 = qword_25463D108;
      while (1)
      {
        while (1)
        {
          v6 = (uint64_t *)v11;
          v12 = *(_DWORD *)(v11 + 32);
          if (v12 <= v9)
            break;
          v11 = *v6;
          v10 = v6;
          if (!*v6)
            goto LABEL_21;
        }
        if (v12 >= v9)
          break;
        v11 = v6[1];
        if (!v11)
        {
          v10 = v6 + 1;
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

void sub_20B5256E8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B1F7D90(v1);
  _Unwind_Resume(a1);
}

void sub_20B5256FC(uint64_t a1@<X0>, uint64_t a2@<X2>, const std::string::value_type *a3@<X4>, std::string::size_type a4@<X5>, std::string *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  std::string::value_type __s[8];
  char v17;

  v10 = a1 - a2;
  if (a1 == a2)
    v11 = 0;
  else
    v11 = a1 - a2;
  if (v10 <= 1)
    v12 = 1;
  else
    v12 = a1 - a2;
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v11 + (v12 - 1) * a4);
  if (v10 >= 1)
  {
    v14 = *(unsigned __int8 *)(a1 - 1);
    v13 = a1 - 1;
    *(_QWORD *)__s = v14;
    v17 = 1;
    std::string::append(a5, __s, 1uLL);
    if (v17 < 0)
    {
      operator delete(*(void **)__s);
      if ((unint64_t)v10 < 2)
        return;
    }
    else if ((unint64_t)v10 < 2)
    {
      return;
    }
    while (v13 != a2)
    {
      std::string::append(a5, a3, a4);
      v15 = *(unsigned __int8 *)--v13;
      *(_QWORD *)__s = v15;
      v17 = 1;
      std::string::append(a5, __s, 1uLL);
      if (v17 < 0)
        operator delete(*(void **)__s);
    }
  }
}

void sub_20B52580C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B525848(uint64_t *a1, void **a2, unsigned int a3, unsigned int a4)
{
  int v7;
  size_t v8;
  void *v10;
  _BYTE *v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;

  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  if (v8
    && (v7 >= 0 ? (v10 = a2) : (v10 = *a2),
        (v11 = memchr(v10, 46, v8), v12 = v11 - (_BYTE *)v10, v11) ? (v13 = v12 == -1) : (v13 = 1),
        !v13 ? (v14 = a4 > v12) : (v14 = 0),
        v14))
  {
    v21 = a4 - v12;
    *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = v21;
    sub_20AEC01D0(a1, (uint64_t)"", 0);
    v15 = a3 - v21;
  }
  else
  {
    v15 = a3;
  }
  v16 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = v15;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v16 - 24) + 8) = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(v16 - 24) + 8) & 0xFFFFFF4F | 0x20;
  v17 = *((char *)a2 + 23);
  if (v17 >= 0)
    v18 = (uint64_t)a2;
  else
    v18 = (uint64_t)*a2;
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)a2 + 23);
  else
    v19 = (uint64_t)a2[1];
  return sub_20AEC01D0(a1, v18, v19);
}

void sub_20B525948(int a1, unint64_t a2, unint64_t a3)
{
  const char *v3;
  std::string *v4;
  std::string::size_type size;
  const char *v6;
  std::string v7;
  unint64_t v8;
  unint64_t v9;
  int v10;

  v10 = a1;
  v9 = a2;
  v8 = a3;
  v3 = " (ENOMEM)";
  if (a1 != 12)
    v3 = (const char *)&unk_20B5AFC6E;
  v6 = v3;
  sub_20B525A14("posix_memalign failed to allocate ", &v9, (std::string *)" bytes with alignment ", &v8, (std::string *)": error code ", &v10, (std::string *)&v6);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v7;
  else
    v4 = (std::string *)v7.__r_.__value_.__r.__words[0];
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  else
    size = v7.__r_.__value_.__l.__size_;
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/src/ArrayBuffer.cpp", 37, (uint64_t)&unk_20B5AFC6E, 0, (uint64_t)v4, size, (void (*)(void **))sub_20B532360);
  std::string::~string(&v7);
  abort();
}

void sub_20B5259F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B525A14(char *__s, unint64_t *a2, std::string *a3, unint64_t *a4, std::string *a5, int *a6, std::string *a7)
{
  uint64_t result;
  _DWORD v14[6];
  int v15;
  std::string v16;
  std::string **v17;
  std::string *v18;
  std::string *v19;
  _DWORD *v20;
  std::string *v21;
  std::string *v22;

  v15 = 0;
  sub_20AF55FA0(v14, __s);
  std::to_string(&v16, *a2);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_20AECFAB8();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24C41FC68[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v18 = (std::string *)v14;
  v19 = a3;
  v20 = v14;
  v21 = a3;
  v22 = a3;
  if (v15 == -1)
    sub_20AECFAB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C41FC80[v15])(&v16, v14);
  std::to_string(&v16, *a4);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_20AECFAB8();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24C41FC68[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v18 = (std::string *)v14;
  v19 = a5;
  v20 = v14;
  v21 = a5;
  v22 = a5;
  if (v15 == -1)
    sub_20AECFAB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C41FC98[v15])(&v16, v14);
  std::to_string(&v16, *a6);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_20AECFAB8();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24C41FC68[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    if (a7->__r_.__value_.__r.__words[0])
    {
LABEL_12:
      v18 = (std::string *)v14;
      v19 = a7;
      v20 = v14;
      v21 = a7;
      v22 = a7;
      if (v15 != -1)
      {
        v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
        ((void (*)(std::string *, _DWORD *))off_24C41FCB0[v15])(&v16, v14);
        goto LABEL_17;
      }
LABEL_26:
      sub_20AECFAB8();
    }
  }
  else if (a7->__r_.__value_.__r.__words[0])
  {
    goto LABEL_12;
  }
  v18 = (std::string *)v14;
  v19 = (std::string *)"nullptr";
  v20 = v14;
  v21 = (std::string *)"nullptr";
  v22 = (std::string *)"nullptr";
  if (v15 == -1)
    goto LABEL_26;
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C41FC50[v15])(&v16, v14);
LABEL_17:
  if (v15 == -1)
    sub_20AECFAB8();
  v18 = &v16;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C41FCC8[v15])(&v18, v14);
  if (v15 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C41FC38[v15])(&v18, v14);
  return result;
}

void sub_20B525D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20B525D74(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_25463D138);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463D138))
  {
    sub_20B525E84(&sub_20B525D74, (uint64_t)&xmmword_25463D118);
    __cxa_atexit((void (*)(void *))sub_20B526E20, &xmmword_25463D118, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463D138);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (byte_25463D130)
  {
    if (byte_25463D12F < 0)
    {
      sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_25463D118, *((unint64_t *)&xmmword_25463D118 + 1));
    }
    else
    {
      *(_OWORD *)a1 = xmmword_25463D118;
      *(_QWORD *)(a1 + 16) = unk_25463D128;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_20B525E48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D138);
  _Unwind_Resume(a1);
}

void sub_20B525E60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B525E84(const void *a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  std::__fs::filesystem::path::__string_view v5;
  char *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v7;
  std::basic_string_view<_CharT, _Traits>::size_type v8;
  std::__fs::filesystem::path::__string_view v9;
  char *v10;
  std::basic_string_view<_CharT, _Traits>::size_type v11;
  std::basic_string_view<_CharT, _Traits>::size_type v12;
  std::__fs::filesystem::path::__string_view v13;
  int v14;
  std::__fs::filesystem::path::__string_view v15;
  char *v16;
  std::basic_string_view<_CharT, _Traits>::size_type v17;
  std::basic_string_view<_CharT, _Traits>::size_type v18;
  std::__fs::filesystem::path::__string_view v19;
  char *v20;
  std::basic_string_view<_CharT, _Traits>::size_type v21;
  std::basic_string_view<_CharT, _Traits>::size_type v22;
  std::__fs::filesystem::path::__string_view v23;
  int v24;
  int v25;
  std::__fs::filesystem::path::__string_view v26;
  char *v27;
  std::basic_string_view<_CharT, _Traits>::size_type v28;
  std::basic_string_view<_CharT, _Traits>::size_type v29;
  std::__fs::filesystem::path::__string_view v30;
  char *v31;
  std::basic_string_view<_CharT, _Traits>::size_type v32;
  std::basic_string_view<_CharT, _Traits>::size_type v33;
  std::__fs::filesystem::path::__string_view v34;
  int v35;
  __int16 v36;
  size_t data_low;
  char *v38;
  char *v39;
  int v41;
  std::__fs::filesystem::path::__string_view v42;
  char *v43;
  std::basic_string_view<_CharT, _Traits>::size_type v44;
  std::basic_string_view<_CharT, _Traits>::size_type v45;
  char *dli_fname;
  int dli_sname_high;
  std::__fs::filesystem::path::__string_view v48;
  char data;
  _BYTE *v50;
  std::basic_string_view<_CharT, _Traits>::size_type v51;
  std::basic_string_view<_CharT, _Traits>::size_type v52;
  std::__fs::filesystem::path::__string_view v53;
  std::__fs::filesystem::path::__string_view v54;
  _BYTE *v55;
  _BOOL4 v56;
  int dli_saddr_low;
  int v58;
  char *v59;
  std::basic_string_view<_CharT, _Traits>::size_type v60;
  std::basic_string_view<_CharT, _Traits>::size_type v61;
  std::__fs::filesystem::path::__string_view v62;
  int v63;
  int v64;
  char *v65;
  std::__fs::filesystem::path::__string_view v67;
  char *v68;
  std::basic_string_view<_CharT, _Traits>::size_type v69;
  std::basic_string_view<_CharT, _Traits>::size_type v70;
  void *dli_fbase;
  uint64_t v72;
  __int16 v73;
  std::__fs::filesystem::path __p;
  unsigned __int8 v75;
  std::__fs::filesystem::path v76;
  unsigned __int8 v77;
  std::__fs::filesystem::path v78;
  char v79;
  std::__fs::filesystem::path v80;
  std::__fs::filesystem::path v81;
  std::__fs::filesystem::path v82;
  _DWORD v83[2];
  std::__fs::filesystem::path v84;
  _BYTE v85[15];
  char v86;
  Dl_info __dst;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  if (!dladdr(a1, &__dst))
    goto LABEL_10;
  memset(&__p, 0, sizeof(__p));
  v3 = (char *)(__dst.dli_fname - 1);
  while (*++v3)
    ;
  sub_20AF08074((unint64_t)&__p, (char *)__dst.dli_fname, v3);
  std::__fs::filesystem::__weakly_canonical(&v76, &__p, 0);
  v78 = v76;
  memset(&v76, 0, sizeof(v76));
  v79 = 1;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if (!v79)
    {
LABEL_10:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return;
    }
  }
  v5 = std::__fs::filesystem::path::__parent_path(&v78);
  if (v5.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v5.__size_ >= 0x17)
  {
    v7 = (v5.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5.__size_ | 7) != 0x17)
      v7 = v5.__size_ | 7;
    v8 = v7 + 1;
    p_dst = (char *)operator new(v7 + 1);
    __dst.dli_fbase = (void *)v5.__size_;
    __dst.dli_sname = (const char *)(v8 | 0x8000000000000000);
    __dst.dli_fname = p_dst;
    goto LABEL_14;
  }
  HIBYTE(__dst.dli_sname) = v5.__size_;
  p_dst = (char *)&__dst;
  if (v5.__size_)
LABEL_14:
    memmove(p_dst, v5.__data_, v5.__size_);
  p_dst[v5.__size_] = 0;
  *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  v9 = std::__fs::filesystem::path::__extension(&__p);
  if (v9.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v9.__size_ >= 0x17)
  {
    v11 = (v9.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9.__size_ | 7) != 0x17)
      v11 = v9.__size_ | 7;
    v12 = v11 + 1;
    v10 = (char *)operator new(v11 + 1);
    __dst.dli_fbase = (void *)v9.__size_;
    __dst.dli_sname = (const char *)(v12 | 0x8000000000000000);
    __dst.dli_fname = v10;
    goto LABEL_22;
  }
  HIBYTE(__dst.dli_sname) = v9.__size_;
  v10 = (char *)&__dst;
  if (v9.__size_)
LABEL_22:
    memmove(v10, v9.__data_, v9.__size_);
  v10[v9.__size_] = 0;
  *(_OWORD *)&v84.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v84.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  memset(&__dst, 0, 24);
  sub_20AF08074((unint64_t)&__dst, ".framework", "");
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v13.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v13.__data_ = __dst.dli_fname;
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v13.__size_ = HIBYTE(__dst.dli_sname);
  else
    v13.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__dst.dli_fbase;
  v14 = std::__fs::filesystem::path::__compare(&v84, v13);
  if (SHIBYTE(__dst.dli_sname) < 0)
  {
    operator delete((void *)__dst.dli_fname);
    if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if (v14)
        goto LABEL_32;
LABEL_38:
      v76 = __p;
      v77 = 1;
      goto LABEL_92;
    }
  }
  else if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v84.__pn_.__r_.__value_.__l.__data_);
  if (!v14)
    goto LABEL_38;
LABEL_32:
  v15 = std::__fs::filesystem::path::__parent_path(&__p);
  if (v15.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v15.__size_ >= 0x17)
  {
    v17 = (v15.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15.__size_ | 7) != 0x17)
      v17 = v15.__size_ | 7;
    v18 = v17 + 1;
    v16 = (char *)operator new(v17 + 1);
    __dst.dli_fbase = (void *)v15.__size_;
    __dst.dli_sname = (const char *)(v18 | 0x8000000000000000);
    __dst.dli_fname = v16;
    goto LABEL_42;
  }
  HIBYTE(__dst.dli_sname) = v15.__size_;
  v16 = (char *)&__dst;
  if (v15.__size_)
LABEL_42:
    memmove(v16, v15.__data_, v15.__size_);
  v16[v15.__size_] = 0;
  *(_OWORD *)&v84.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v84.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  v19 = std::__fs::filesystem::path::__filename(&v84);
  if (v19.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v19.__size_ >= 0x17)
  {
    v21 = (v19.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19.__size_ | 7) != 0x17)
      v21 = v19.__size_ | 7;
    v22 = v21 + 1;
    v20 = (char *)operator new(v21 + 1);
    __dst.dli_fbase = (void *)v19.__size_;
    __dst.dli_sname = (const char *)(v22 | 0x8000000000000000);
    __dst.dli_fname = v20;
    goto LABEL_50;
  }
  HIBYTE(__dst.dli_sname) = v19.__size_;
  v20 = (char *)&__dst;
  if (v19.__size_)
LABEL_50:
    memmove(v20, v19.__data_, v19.__size_);
  v20[v19.__size_] = 0;
  *(_OWORD *)&v82.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v82.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  memset(&__dst, 0, 24);
  sub_20AF08074((unint64_t)&__dst, "Versions", "");
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v23.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v23.__data_ = __dst.dli_fname;
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v23.__size_ = HIBYTE(__dst.dli_sname);
  else
    v23.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__dst.dli_fbase;
  v24 = std::__fs::filesystem::path::__compare(&v82, v23);
  v25 = v24;
  if (SHIBYTE(__dst.dli_sname) < 0)
  {
    operator delete((void *)__dst.dli_fname);
    if (v25)
      goto LABEL_88;
  }
  else if (v24)
  {
    goto LABEL_88;
  }
  v26 = std::__fs::filesystem::path::__parent_path(&v84);
  if (v26.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v26.__size_ >= 0x17)
  {
    v28 = (v26.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26.__size_ | 7) != 0x17)
      v28 = v26.__size_ | 7;
    v29 = v28 + 1;
    v27 = (char *)operator new(v28 + 1);
    __dst.dli_fbase = (void *)v26.__size_;
    __dst.dli_sname = (const char *)(v29 | 0x8000000000000000);
    __dst.dli_fname = v27;
    goto LABEL_68;
  }
  HIBYTE(__dst.dli_sname) = v26.__size_;
  v27 = (char *)&__dst;
  if (v26.__size_)
LABEL_68:
    memmove(v27, v26.__data_, v26.__size_);
  v27[v26.__size_] = 0;
  *(_OWORD *)&v81.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v81.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  v30 = std::__fs::filesystem::path::__extension(&v81);
  if (v30.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v30.__size_ >= 0x17)
  {
    v32 = (v30.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30.__size_ | 7) != 0x17)
      v32 = v30.__size_ | 7;
    v33 = v32 + 1;
    v31 = (char *)operator new(v32 + 1);
    __dst.dli_fbase = (void *)v30.__size_;
    __dst.dli_sname = (const char *)(v33 | 0x8000000000000000);
    __dst.dli_fname = v31;
    goto LABEL_76;
  }
  HIBYTE(__dst.dli_sname) = v30.__size_;
  v31 = (char *)&__dst;
  if (v30.__size_)
LABEL_76:
    memmove(v31, v30.__data_, v30.__size_);
  v31[v30.__size_] = 0;
  *(_OWORD *)&v80.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v80.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  memset(&__dst, 0, 24);
  sub_20AF08074((unint64_t)&__dst, ".framework", "");
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v34.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v34.__data_ = __dst.dli_fname;
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v34.__size_ = HIBYTE(__dst.dli_sname);
  else
    v34.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__dst.dli_fbase;
  v35 = std::__fs::filesystem::path::__compare(&v80, v34);
  if (SHIBYTE(__dst.dli_sname) < 0)
  {
    operator delete((void *)__dst.dli_fname);
    if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_85:
      if (v35)
        goto LABEL_86;
      goto LABEL_100;
    }
  }
  else if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_85;
  }
  operator delete(v80.__pn_.__r_.__value_.__l.__data_);
  if (v35)
  {
LABEL_86:
    if (SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__pn_.__r_.__value_.__l.__data_);
LABEL_88:
    v76.__pn_.__r_.__value_.__s.__data_[0] = 0;
    v77 = 0;
    if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_89;
    goto LABEL_101;
  }
LABEL_100:
  v76 = v81;
  v77 = 1;
  if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_102;
  }
LABEL_101:
  operator delete(v82.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_90:
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_103;
  }
LABEL_102:
  operator delete(v84.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_91:
    if (!v77)
      goto LABEL_104;
    goto LABEL_92;
  }
LABEL_103:
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (!v77)
    goto LABEL_104;
LABEL_92:
  std::__fs::filesystem::__status(&v76, 0);
  if (!LOBYTE(__dst.dli_fname)
    || LOBYTE(__dst.dli_fname) == 255
    || (std::__fs::filesystem::__status(&v76, 0),
        v36 = WORD2(__dst.dli_fname),
        std::__fs::filesystem::__status(&v76, 0),
        LOBYTE(__dst.dli_fname) != 2)
    || (v36 & 0x100) == 0)
  {
LABEL_104:
    LODWORD(v82.__pn_.__r_.__value_.__l.__data_) = 1026;
    if (!_NSGetExecutablePath((char *)&__dst, (uint32_t *)&v82))
    {
      memset(&v84, 0, sizeof(v84));
      v39 = &v86;
      while (*++v39)
        ;
      sub_20AF08074((unint64_t)&v84, (char *)&__dst, v39);
      __p = v84;
      v75 = 1;
      goto LABEL_115;
    }
    data_low = LODWORD(v82.__pn_.__r_.__value_.__l.__data_);
    if (LODWORD(v82.__pn_.__r_.__value_.__l.__data_))
    {
      v38 = (char *)operator new(LODWORD(v82.__pn_.__r_.__value_.__l.__data_));
      bzero(v38, data_low);
    }
    else
    {
      v38 = 0;
    }
    if (_NSGetExecutablePath(v38, (uint32_t *)&v82))
    {
      v41 = 0;
      __p.__pn_.__r_.__value_.__s.__data_[0] = 0;
      v75 = 0;
      if (!v38)
        goto LABEL_114;
    }
    else
    {
      memset(&v84, 0, sizeof(v84));
      v65 = v38 - 1;
      while (*++v65)
        ;
      sub_20AF08074((unint64_t)&v84, v38, v65);
      __p = v84;
      v41 = 1;
      v75 = 1;
      if (!v38)
      {
LABEL_114:
        if (!v41)
        {
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 24) = 0;
          goto LABEL_209;
        }
LABEL_115:
        v42 = std::__fs::filesystem::path::__parent_path(&__p);
        if (v42.__size_ > 0x7FFFFFFFFFFFFFF7)
          sub_20AEC0138();
        if (v42.__size_ >= 0x17)
        {
          v44 = (v42.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v42.__size_ | 7) != 0x17)
            v44 = v42.__size_ | 7;
          v45 = v44 + 1;
          v43 = (char *)operator new(v44 + 1);
          __dst.dli_fbase = (void *)v42.__size_;
          __dst.dli_sname = (const char *)(v45 | 0x8000000000000000);
          __dst.dli_fname = v43;
        }
        else
        {
          HIBYTE(__dst.dli_sname) = v42.__size_;
          v43 = (char *)&__dst;
          if (!v42.__size_)
          {
LABEL_123:
            v43[v42.__size_] = 0;
            dli_fname = (char *)__dst.dli_fname;
            v83[0] = __dst.dli_sname;
            *(_DWORD *)((char *)v83 + 3) = *(_DWORD *)((char *)&__dst.dli_sname + 3);
            dli_sname_high = SHIBYTE(__dst.dli_sname);
            LOBYTE(__dst.dli_fname) = 0;
            LOBYTE(__dst.dli_saddr) = 0;
            if (SHIBYTE(__dst.dli_sname) < 0)
            {
              sub_20AEC60F4(&__dst, dli_fname, (unint64_t)__dst.dli_fbase);
            }
            else
            {
              __dst.dli_fname = dli_fname;
              LODWORD(__dst.dli_sname) = v83[0];
              *(_DWORD *)((char *)&__dst.dli_sname + 3) = *(_DWORD *)((char *)v83 + 3);
            }
            LOBYTE(__dst.dli_saddr) = 1;
            v48 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)&__dst);
            if (v48.__size_ > 0x7FFFFFFFFFFFFFF7)
              sub_20AEC0138();
            data = (char)v48.__data_;
            if (v48.__size_ >= 0x17)
            {
              v51 = (v48.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v48.__size_ | 7) != 0x17)
                v51 = v48.__size_ | 7;
              v52 = v51 + 1;
              v50 = operator new(v51 + 1);
              v84.__pn_.__r_.__value_.__l.__size_ = v48.__size_;
              v84.__pn_.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
              v84.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
            }
            else
            {
              *((_BYTE *)&v84.__pn_.__r_.__value_.__s + 23) = v48.__size_;
              v50 = &v84;
              if (!v48.__size_)
              {
LABEL_134:
                v50[v48.__size_] = 0;
                v82 = v84;
                memset(&v81, 0, sizeof(v81));
                sub_20AF08074((unint64_t)&v81, ".app", "");
                if ((v81.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v53.__data_ = (const std::string_view::value_type *)&v81;
                else
                  v53.__data_ = (const std::string_view::value_type *)v81.__pn_.__r_.__value_.__r.__words[0];
                if ((v81.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v53.__size_ = HIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]);
                else
                  v53.__size_ = v81.__pn_.__r_.__value_.__l.__size_;
                if (!std::__fs::filesystem::path::__compare(&v82, v53))
                {
                  v56 = 1;
                  if ((SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_164;
                  goto LABEL_146;
                }
                v54 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)&__dst);
                if (v54.__size_ > 0x7FFFFFFFFFFFFFF7)
                  sub_20AEC0138();
                data = (char)v54.__data_;
                if (v54.__size_ >= 0x17)
                {
                  v60 = (v54.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v54.__size_ | 7) != 0x17)
                    v60 = v54.__size_ | 7;
                  v61 = v60 + 1;
                  v55 = operator new(v60 + 1);
                  v84.__pn_.__r_.__value_.__l.__size_ = v54.__size_;
                  v84.__pn_.__r_.__value_.__r.__words[2] = v61 | 0x8000000000000000;
                  v84.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
                }
                else
                {
                  *((_BYTE *)&v84.__pn_.__r_.__value_.__s + 23) = v54.__size_;
                  v55 = &v84;
                  if (!v54.__size_)
                  {
LABEL_155:
                    v55[v54.__size_] = 0;
                    v80 = v84;
                    memset(&v84, 0, sizeof(v84));
                    sub_20AF08074((unint64_t)&v84, ".bundle", "");
                    if ((v84.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v62.__data_ = (const std::string_view::value_type *)&v84;
                    else
                      v62.__data_ = (const std::string_view::value_type *)v84.__pn_.__r_.__value_.__r.__words[0];
                    if ((v84.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v62.__size_ = HIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]);
                    else
                      v62.__size_ = v84.__pn_.__r_.__value_.__l.__size_;
                    v56 = std::__fs::filesystem::path::__compare(&v80, v62) == 0;
                    if (SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v84.__pn_.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_163:
                        if ((SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_164;
                        goto LABEL_146;
                      }
                    }
                    else if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_163;
                    }
                    operator delete(v80.__pn_.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_164:
                      if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_165:
                        dli_saddr_low = LOBYTE(__dst.dli_saddr);
                        if (v56)
                        {
LABEL_166:
                          if (dli_saddr_low)
                          {
                            v59 = (char *)__dst.dli_fname;
                            *(_QWORD *)v85 = __dst.dli_fbase;
                            *(_QWORD *)&v85[7] = *(void **)((char *)&__dst.dli_fbase + 7);
                            v58 = 1;
                            data = HIBYTE(__dst.dli_sname);
LABEL_168:
                            if ((dli_sname_high & 0x80000000) == 0)
                              goto LABEL_169;
                            goto LABEL_176;
                          }
                          goto LABEL_174;
                        }
LABEL_148:
                        v58 = 0;
                        v59 = 0;
                        if (!dli_saddr_low)
                          goto LABEL_175;
                        if ((SHIBYTE(__dst.dli_sname) & 0x80000000) == 0)
                          goto LABEL_168;
                        operator delete((void *)__dst.dli_fname);
LABEL_174:
                        v59 = 0;
                        v58 = 0;
LABEL_175:
                        if ((dli_sname_high & 0x80000000) == 0)
                        {
LABEL_169:
                          v63 = v77;
                          if (v77 == v58)
                            goto LABEL_170;
                          goto LABEL_177;
                        }
LABEL_176:
                        operator delete(dli_fname);
                        v63 = v77;
                        if (v77 == v58)
                        {
LABEL_170:
                          if (v63)
                          {
                            if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v76.__pn_.__r_.__value_.__l.__data_);
                            v76.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
                            v76.__pn_.__r_.__value_.__l.__size_ = *(_QWORD *)v85;
                            *(std::string::size_type *)((char *)&v76.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v85[7];
                            *((_BYTE *)&v76.__pn_.__r_.__value_.__s + 23) = data;
                            goto LABEL_186;
                          }
LABEL_181:
                          if (data < 0)
                            v64 = v58;
                          else
                            v64 = 0;
                          if (v64 == 1)
                            operator delete(v59);
LABEL_186:
                          if (!v77)
                            goto LABEL_199;
                          goto LABEL_197;
                        }
LABEL_177:
                        if (!v63)
                        {
                          v76.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
                          v76.__pn_.__r_.__value_.__l.__size_ = *(_QWORD *)v85;
                          *(std::string::size_type *)((char *)&v76.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v85[7];
                          *((_BYTE *)&v76.__pn_.__r_.__value_.__s + 23) = data;
                          v77 = 1;
LABEL_197:
                          std::__fs::filesystem::__status(&v76, 0);
                          if (LOBYTE(__dst.dli_fname))
                          {
                            if (LOBYTE(__dst.dli_fname) != 255)
                            {
                              std::__fs::filesystem::__status(&v76, 0);
                              v73 = WORD2(__dst.dli_fname);
                              std::__fs::filesystem::__status(&v76, 0);
                              if (LOBYTE(__dst.dli_fname) == 2 && (v73 & 0x100) != 0)
                              {
                                *(_BYTE *)a2 = 0;
                                *(_BYTE *)(a2 + 24) = 0;
                                if (!v77)
                                {
LABEL_209:
                                  if (v75 && SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                                  if (v77 && SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v76.__pn_.__r_.__value_.__l.__data_);
                                  goto LABEL_215;
                                }
                                *(std::__fs::filesystem::path *)a2 = v76;
                                memset(&v76, 0, sizeof(v76));
LABEL_208:
                                *(_BYTE *)(a2 + 24) = 1;
                                goto LABEL_209;
                              }
                            }
                          }
LABEL_199:
                          v67 = std::__fs::filesystem::path::__parent_path(&__p);
                          if (v67.__size_ > 0x7FFFFFFFFFFFFFF7)
                            sub_20AEC0138();
                          if (v67.__size_ >= 0x17)
                          {
                            v69 = (v67.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v67.__size_ | 7) != 0x17)
                              v69 = v67.__size_ | 7;
                            v70 = v69 + 1;
                            v68 = (char *)operator new(v69 + 1);
                            __dst.dli_fbase = (void *)v67.__size_;
                            __dst.dli_sname = (const char *)(v70 | 0x8000000000000000);
                            __dst.dli_fname = v68;
                          }
                          else
                          {
                            HIBYTE(__dst.dli_sname) = v67.__size_;
                            v68 = (char *)&__dst;
                            if (!v67.__size_)
                              goto LABEL_207;
                          }
                          memmove(v68, v67.__data_, v67.__size_);
LABEL_207:
                          v68[v67.__size_] = 0;
                          dli_fbase = __dst.dli_fbase;
                          v72 = *(uint64_t *)((char *)&__dst.dli_fbase + 7);
                          *(_QWORD *)a2 = __dst.dli_fname;
                          *(_QWORD *)(a2 + 8) = dli_fbase;
                          *(_QWORD *)(a2 + 15) = v72;
                          *(_BYTE *)(a2 + 23) = HIBYTE(__dst.dli_sname);
                          goto LABEL_208;
                        }
                        if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v76.__pn_.__r_.__value_.__l.__data_);
                        v77 = 0;
                        goto LABEL_181;
                      }
LABEL_147:
                      operator delete(v82.__pn_.__r_.__value_.__l.__data_);
                      dli_saddr_low = LOBYTE(__dst.dli_saddr);
                      if (v56)
                        goto LABEL_166;
                      goto LABEL_148;
                    }
LABEL_146:
                    operator delete(v81.__pn_.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_165;
                    goto LABEL_147;
                  }
                }
                memmove(v55, v54.__data_, v54.__size_);
                goto LABEL_155;
              }
            }
            memmove(v50, v48.__data_, v48.__size_);
            goto LABEL_134;
          }
        }
        memmove(v43, v42.__data_, v42.__size_);
        goto LABEL_123;
      }
    }
    operator delete(v38);
    v41 = v75;
    goto LABEL_114;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v77)
  {
    *(std::__fs::filesystem::path *)a2 = v76;
    *(_BYTE *)(a2 + 24) = 1;
  }
LABEL_215:
  if (v79)
  {
    if (SHIBYTE(v78.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_20B526BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;

  if (a44 < 0)
    operator delete(__p);
  if (v44)
    operator delete(v44);
  if (a19 && a18 < 0)
    operator delete(exception_object);
  if (a26)
  {
    if (a25 < 0)
    {
      operator delete(a20);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B526E20(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 24))
  {
    if (*(char *)(result + 23) < 0)
    {
      operator delete(*(void **)result);
      return v1;
    }
  }
  return result;
}

void sub_20B526E68(std::string *a1, uint64_t a2)
{
  void **v4;
  const __CFAllocator *v5;
  CFIndex v6;
  const __CFString *v7;
  CFURLRef v8;
  CFBundleRef v9;
  const __CFString *ValueForInfoDictionaryKey;
  const __CFString *v11;
  void *__p[2];
  uint64_t v13;
  void *__dst[2];
  uint64_t v15;
  const __CFString *v16;

  if (!*(_BYTE *)(a2 + 24))
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)__dst = *(_OWORD *)a2;
    if (v15 >= 0)
      v4 = __dst;
    else
      v4 = (void **)__dst[0];
LABEL_10:
    *(_OWORD *)__p = *(_OWORD *)a2;
    v13 = *(_QWORD *)(a2 + 16);
    goto LABEL_11;
  }
  v4 = __dst;
  sub_20AEC60F4(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  if (v15 < 0)
    v4 = (void **)__dst[0];
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    goto LABEL_10;
  sub_20AEC60F4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_11:
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (v13 >= 0)
    v6 = HIBYTE(v13);
  else
    v6 = (CFIndex)__p[1];
  v7 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)v4, v6, 0x8000100u, 0);
  v16 = v7;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_19:
    operator delete(__dst[0]);
    if (!v7)
      goto LABEL_20;
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_19;
LABEL_16:
  if (!v7)
  {
LABEL_20:
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Apple/src/BundlePath.cpp", 66, (uint64_t)"cf_path_str", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
  }
LABEL_21:
  v8 = CFURLCreateWithFileSystemPath(v5, v7, kCFURLPOSIXPathStyle, 1u);
  __dst[0] = v8;
  if (!v8
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Apple/src/BundlePath.cpp", 70, (uint64_t)"cf_path_url", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = CFBundleCreate(v5, v8);
  __p[0] = v9;
  if (!v9
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Apple/src/BundlePath.cpp", 73, (uint64_t)"cf_current_bundle", 17, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  ValueForInfoDictionaryKey = (const __CFString *)CFBundleGetValueForInfoDictionaryKey(v9, (CFStringRef)*MEMORY[0x24BDBD288]);
  v11 = ValueForInfoDictionaryKey;
  if (ValueForInfoDictionaryKey)
    CFRetain(ValueForInfoDictionaryKey);
  sub_20B5285F0(v11, a1);
  if (v11)
    CFRelease(v11);
  __p[0] = 0;
  if (v9)
    CFRelease(v9);
  __dst[0] = 0;
  if (v8)
    CFRelease(v8);
  v16 = 0;
  if (v7)
    CFRelease(v7);
}

void sub_20B527114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B5271B0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  char v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25463D160);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463D160))
  {
    sub_20B525D74((uint64_t)__p);
    sub_20B526E68((std::string *)&xmmword_25463D140, (uint64_t)__p);
    if (v5 && v4 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))sub_20B527314, &xmmword_25463D140, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463D160);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (byte_25463D158)
  {
    if (byte_25463D157 < 0)
    {
      sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_25463D140, *((unint64_t *)&xmmword_25463D140 + 1));
    }
    else
    {
      *(_OWORD *)a1 = xmmword_25463D140;
      *(_QWORD *)(a1 + 16) = unk_25463D150;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_20B5272A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
    {
      operator delete(__p);
      __cxa_guard_abort(&qword_25463D160);
      _Unwind_Resume(a1);
    }
  }
  __cxa_guard_abort(&qword_25463D160);
  _Unwind_Resume(a1);
}

void sub_20B5272F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B527314(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 24))
  {
    if (*(char *)(result + 23) < 0)
    {
      operator delete(*(void **)result);
      return v1;
    }
  }
  return result;
}

const void **sub_20B52735C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_20B527390(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_20B5273C4(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_20B5273FC()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B527410(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_20B5285F0(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_20B527468(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20B527480(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_20B5285F0(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_20B5274D8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20B5274F0(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_20B5285F0(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_20B527548(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20B527560(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_20B5285F0(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_20B5275B8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20B5275D0(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_20B5285F0(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_20B527628(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20B527640(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_20B5285F0(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_20B527698(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20B5276B0(uint64_t a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;
  std::string::value_type v4;
  std::string::size_type v5;
  __int16 v6;
  char v7;
  std::string v8;
  std::string::value_type v9;
  const __CFString *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (const __CFString *)MGGetStringAnswer();
  v10 = v2;
  if (!v2)
  {
    v4 = 0;
    goto LABEL_5;
  }
  v3 = v2;
  sub_20B5285F0(v2, &v8);
  CFRelease(v3);
  v4 = v9;
  if (!v9)
  {
LABEL_5:
    v7 = 10;
    v6 = 28271;
    v5 = 0x69746375646F7250;
    goto LABEL_6;
  }
  v5 = v8.__r_.__value_.__r.__words[0];
  v6 = v8.__r_.__value_.__r.__words[1];
  v4 = v8.__r_.__value_.__s.__data_[10];
  v10 = *(const __CFString **)((char *)&v8.__r_.__value_.__r.__words[1] + 3);
  v11 = *(_DWORD *)((char *)&v8.__r_.__value_.__r.__words[2] + 3);
  v7 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
LABEL_6:
  *(_QWORD *)a1 = v5;
  *(_WORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 10) = v4;
  *(_QWORD *)(a1 + 11) = v10;
  *(_DWORD *)(a1 + 19) = v11;
  *(_BYTE *)(a1 + 23) = v7;
  *(_BYTE *)(a1 + 24) = 1;
}

void sub_20B527798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B5277BC()
{
  return MGGetSInt64Answer();
}

uint64_t sub_20B5277E0()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

uint64_t sub_20B52784C()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

uint64_t sub_20B5278B8()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

uint64_t sub_20B527924()
{
  return MGGetSInt32Answer() | 0x100000000;
}

void sub_20B52794C(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_20B5285F0(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_20B5279A4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20B5279BC(uint64_t a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;
  std::string *p_p;
  std::string::size_type size;
  __int128 v6;
  uint64_t v7;
  std::string __p;
  char v9;

  v2 = (const __CFString *)MGGetStringAnswer();
  *(_QWORD *)&v6 = v2;
  if (v2 && (v3 = v2, sub_20B5285F0(v2, &__p), CFRelease(v3), v9))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_20AF4E53C((char *)p_p, size, ":", 1, 0, (uint64_t)&v6);
    *(_OWORD *)a1 = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = 1;
    if (v9)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
}

void sub_20B527A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B527AC8()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

char *sub_20B527B34(char *__dst, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, __int128 *a7)
{
  __int128 v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    v14 = __dst + 24;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v13 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v13;
    v14 = __dst + 24;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v15 = *a3;
      *((_QWORD *)v14 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v14 = v15;
      goto LABEL_6;
    }
  }
  sub_20AEC60F4(v14, *(void **)a3, *((_QWORD *)a3 + 1));
LABEL_6:
  if (*((char *)a4 + 23) < 0)
  {
    sub_20AEC60F4(__dst + 48, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v16 = *a4;
    *((_QWORD *)__dst + 8) = *((_QWORD *)a4 + 2);
    *((_OWORD *)__dst + 3) = v16;
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_20AEC60F4(__dst + 72, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v17 = *a5;
    *((_QWORD *)__dst + 11) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(__dst + 72) = v17;
  }
  if (*((char *)a6 + 23) < 0)
  {
    sub_20AEC60F4(__dst + 96, *(void **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v18 = *a6;
    *((_QWORD *)__dst + 14) = *((_QWORD *)a6 + 2);
    *((_OWORD *)__dst + 6) = v18;
  }
  v19 = __dst + 120;
  if (*((char *)a7 + 23) < 0)
  {
    sub_20AEC60F4(v19, *(void **)a7, *((_QWORD *)a7 + 1));
  }
  else
  {
    v20 = *a7;
    *((_QWORD *)__dst + 17) = *((_QWORD *)a7 + 2);
    *(_OWORD *)v19 = v20;
  }
  return __dst;
}

void sub_20B527C8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (*(char *)(v1 + 119) < 0)
  {
    operator delete(*v5);
    if ((*(char *)(v1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20B527D50(char *a1, uint64_t a2)
{
  void *v5[2];
  uint64_t v6;
  char v7;
  void *__p[2];
  uint64_t v9;
  void *v10[2];
  uint64_t v11;
  char v12;
  void *v13[2];
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  char v17;
  void *v18[2];
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;

  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&v30, a2);
  if (v32)
  {
    v33 = v30;
    v34 = v31;
    v31 = 0;
    v30 = 0uLL;
  }
  else
  {
    HIBYTE(v34) = 13;
    strcpy((char *)&v33, "not_available");
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v25, a2);
  if (v27)
  {
    v28 = v25;
    v29 = v26;
    v26 = 0;
    v25 = 0uLL;
  }
  else
  {
    HIBYTE(v29) = 13;
    strcpy((char *)&v28, "not_available");
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 32))(v20, a2);
  if (v22)
  {
    v23 = *(_OWORD *)v20;
    v24 = v21;
    v20[1] = 0;
    v21 = 0;
    v20[0] = 0;
  }
  else
  {
    HIBYTE(v24) = 13;
    strcpy((char *)&v23, "not_available");
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(v15, a2);
  if (v17)
  {
    *(_OWORD *)v18 = *(_OWORD *)v15;
    v19 = v16;
    v15[1] = 0;
    v16 = 0;
    v15[0] = 0;
  }
  else
  {
    HIBYTE(v19) = 13;
    strcpy((char *)v18, "not_available");
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(v10, a2);
  if (v12)
  {
    *(_OWORD *)v13 = *(_OWORD *)v10;
    v14 = v11;
    v10[1] = 0;
    v11 = 0;
    v10[0] = 0;
  }
  else
  {
    HIBYTE(v14) = 13;
    strcpy((char *)v13, "not_available");
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 56))(v5, a2);
  if (v7)
  {
    *(_OWORD *)__p = *(_OWORD *)v5;
    v9 = v6;
    v5[1] = 0;
    v6 = 0;
    v5[0] = 0;
  }
  else
  {
    HIBYTE(v9) = 13;
    strcpy((char *)__p, "not_available");
  }
  sub_20B527B34(a1, &v33, &v28, &v23, (__int128 *)v18, (__int128 *)v13, (__int128 *)__p);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (v7 && SHIBYTE(v6) < 0)
    operator delete(v5[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  if (v12 && SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  if (v17 && SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
  if (v22 && SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  if (v27 && SHIBYTE(v26) < 0)
    operator delete((void *)v25);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  return a1;
}

void sub_20B5280C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57)
{
  uint64_t v57;

  if (a21 < 0)
    operator delete(__p);
  if (a15 && a14 < 0)
    operator delete(a9);
  if (a35 < 0)
    operator delete(a30);
  if (a29 && a28 < 0)
    operator delete(a23);
  if (a49 < 0)
    operator delete(a44);
  if (a43 && a42 < 0)
    operator delete(a37);
  if (*(char *)(v57 - 169) < 0)
    operator delete(*(void **)(v57 - 192));
  if (a57 && a56 < 0)
    operator delete(a51);
  if (*(char *)(v57 - 105) < 0)
    operator delete(*(void **)(v57 - 128));
  if (*(_BYTE *)(v57 - 136) && *(char *)(v57 - 137) < 0)
    operator delete(*(void **)(v57 - 160));
  if (*(char *)(v57 - 41) < 0)
    operator delete(*(void **)(v57 - 64));
  if (*(_BYTE *)(v57 - 72))
  {
    if (*(char *)(v57 - 73) < 0)
      operator delete(*(void **)(v57 - 96));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B5281E4(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_12:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_12;
LABEL_6:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_13:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B52829C(uint64_t a1, const void ***a2, unsigned __int8 **a3)
{
  const void **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  size_t v7;
  const void *v8;
  const void *v9;
  int v10;
  const void **v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t result;
  uint64_t v16;
  const void *v17;
  const void *v18;
  int v19;
  unsigned __int8 *v20;
  const void **v21;
  unsigned __int8 **v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  const void **v28;
  unsigned __int8 **v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  const void **v35;
  unsigned __int8 **v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  int v40;
  unsigned __int8 *v41;
  const void **v42;
  unsigned __int8 **v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  BOOL v55;

  v4 = *a2;
  v5 = *a3;
  v6 = *((unsigned __int8 *)*a2 + 23);
  v7 = (size_t)(*a2)[1];
  if ((v6 & 0x80u) == 0)
    v8 = (const void *)*((unsigned __int8 *)*a2 + 23);
  else
    v8 = (*a2)[1];
  v9 = (const void *)v5[23];
  v10 = (char)v9;
  if ((char)v9 < 0)
    v9 = (const void *)*((_QWORD *)v5 + 1);
  if (v8 != v9)
    return 0;
  v12 = a2[1];
  v13 = a3[1];
  if (v10 >= 0)
    v14 = v5;
  else
    v14 = *(unsigned __int8 **)v5;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v4, v14, v7))
      return 0;
  }
  else if ((_DWORD)v6)
  {
    while (*(unsigned __int8 *)v4 == *v14)
    {
      v4 = (const void **)((char *)v4 + 1);
      ++v14;
      if (!--v6)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  v16 = *((unsigned __int8 *)v12 + 23);
  if ((v16 & 0x80u) == 0)
    v17 = (const void *)*((unsigned __int8 *)v12 + 23);
  else
    v17 = v12[1];
  v18 = (const void *)v13[23];
  v19 = (char)v18;
  if ((char)v18 < 0)
    v18 = (const void *)*((_QWORD *)v13 + 1);
  if (v17 != v18)
    return 0;
  if (v19 >= 0)
    v20 = v13;
  else
    v20 = *(unsigned __int8 **)v13;
  if ((v16 & 0x80) != 0)
  {
    if (memcmp(*v12, v20, (size_t)v12[1]))
      return 0;
  }
  else if (*((_BYTE *)v12 + 23))
  {
    while (*(unsigned __int8 *)v12 == *v20)
    {
      v12 = (const void **)((char *)v12 + 1);
      ++v20;
      if (!--v16)
        goto LABEL_33;
    }
    return 0;
  }
LABEL_33:
  v21 = a2[2];
  v22 = (unsigned __int8 **)a3[2];
  v23 = *((unsigned __int8 *)v21 + 23);
  if ((v23 & 0x80u) == 0)
    v24 = (unsigned __int8 *)*((unsigned __int8 *)v21 + 23);
  else
    v24 = (unsigned __int8 *)v21[1];
  v25 = (unsigned __int8 *)*((unsigned __int8 *)v22 + 23);
  v26 = (char)v25;
  if ((char)v25 < 0)
    v25 = v22[1];
  if (v24 != v25)
    return 0;
  if (v26 >= 0)
    v27 = a3[2];
  else
    v27 = *v22;
  if ((v23 & 0x80) != 0)
  {
    if (memcmp(*v21, v27, (size_t)v21[1]))
      return 0;
  }
  else if (*((_BYTE *)v21 + 23))
  {
    while (*(unsigned __int8 *)v21 == *v27)
    {
      v21 = (const void **)((char *)v21 + 1);
      ++v27;
      if (!--v23)
        goto LABEL_48;
    }
    return 0;
  }
LABEL_48:
  v28 = a2[3];
  v29 = (unsigned __int8 **)a3[3];
  v30 = *((unsigned __int8 *)v28 + 23);
  if ((v30 & 0x80u) == 0)
    v31 = (unsigned __int8 *)*((unsigned __int8 *)v28 + 23);
  else
    v31 = (unsigned __int8 *)v28[1];
  v32 = (unsigned __int8 *)*((unsigned __int8 *)v29 + 23);
  v33 = (char)v32;
  if ((char)v32 < 0)
    v32 = v29[1];
  if (v31 != v32)
    return 0;
  if (v33 >= 0)
    v34 = a3[3];
  else
    v34 = *v29;
  if ((v30 & 0x80) != 0)
  {
    if (memcmp(*v28, v34, (size_t)v28[1]))
      return 0;
  }
  else if (*((_BYTE *)v28 + 23))
  {
    while (*(unsigned __int8 *)v28 == *v34)
    {
      v28 = (const void **)((char *)v28 + 1);
      ++v34;
      if (!--v30)
        goto LABEL_63;
    }
    return 0;
  }
LABEL_63:
  v35 = a2[4];
  v36 = (unsigned __int8 **)a3[4];
  v37 = *((unsigned __int8 *)v35 + 23);
  if ((v37 & 0x80u) == 0)
    v38 = (unsigned __int8 *)*((unsigned __int8 *)v35 + 23);
  else
    v38 = (unsigned __int8 *)v35[1];
  v39 = (unsigned __int8 *)*((unsigned __int8 *)v36 + 23);
  v40 = (char)v39;
  if ((char)v39 < 0)
    v39 = v36[1];
  if (v38 != v39)
    return 0;
  if (v40 >= 0)
    v41 = a3[4];
  else
    v41 = *v36;
  if ((v37 & 0x80) != 0)
  {
    if (!memcmp(*v35, v41, (size_t)v35[1]))
      goto LABEL_78;
    return 0;
  }
  if (*((_BYTE *)v35 + 23))
  {
    while (*(unsigned __int8 *)v35 == *v41)
    {
      v35 = (const void **)((char *)v35 + 1);
      ++v41;
      if (!--v37)
        goto LABEL_78;
    }
    return 0;
  }
LABEL_78:
  v42 = a2[5];
  v43 = (unsigned __int8 **)a3[5];
  v44 = *((unsigned __int8 *)v42 + 23);
  if ((v44 & 0x80u) == 0)
    v45 = (unsigned __int8 *)*((unsigned __int8 *)v42 + 23);
  else
    v45 = (unsigned __int8 *)v42[1];
  v46 = (unsigned __int8 *)*((unsigned __int8 *)v43 + 23);
  v47 = (char)v46;
  if ((char)v46 < 0)
    v46 = v43[1];
  if (v45 != v46)
    return 0;
  if (v47 >= 0)
    v48 = a3[5];
  else
    v48 = *v43;
  if ((v44 & 0x80) != 0)
    return memcmp(*v42, v48, (size_t)v42[1]) == 0;
  if (!*((_BYTE *)v42 + 23))
    return 1;
  v49 = v44 - 1;
  do
  {
    v51 = *(unsigned __int8 *)v42;
    v42 = (const void **)((char *)v42 + 1);
    v50 = v51;
    v53 = *v48++;
    v52 = v53;
    v55 = v49-- != 0;
    result = v50 == v52;
  }
  while (v50 == v52 && v55);
  return result;
}

const __CFString *sub_20B5285F0@<X0>(const __CFString *result@<X0>, std::string *a2@<X8>)
{
  const __CFString *v3;
  CFIndex v4;
  CFIndex v5;
  std::string *v6;
  std::string v7;
  CFIndex usedBufLen;
  CFRange v9;
  CFRange v10;

  if (!result)
    goto LABEL_8;
  v3 = result;
  result = (const __CFString *)CFStringGetLength(result);
  if (result)
  {
    v4 = (CFIndex)result;
    usedBufLen = 0;
    v9.location = 0;
    v9.length = (CFIndex)result;
    result = (const __CFString *)CFStringGetBytes(v3, v9, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
    if ((uint64_t)result > 0)
    {
      memset(&v7, 0, sizeof(v7));
      if (usedBufLen)
      {
        std::string::append(&v7, usedBufLen, 0);
        v5 = usedBufLen;
        if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v6 = &v7;
        else
          v6 = (std::string *)v7.__r_.__value_.__r.__words[0];
      }
      else
      {
        v5 = 0;
        v6 = &v7;
      }
      v10.location = 0;
      v10.length = v4;
      result = (const __CFString *)CFStringGetBytes(v3, v10, 0x8000100u, 0, 0, (UInt8 *)v6, v5, 0);
      *a2 = v7;
      goto LABEL_12;
    }
LABEL_8:
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return result;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
LABEL_12:
  a2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_20B528714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B528730(uint64_t a1, _OWORD *a2)
{
  std::string v5;

  sub_20B5287D4((uint64_t)a2, &v5);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_24C41FDB0;
  *(_OWORD *)(a1 + 16) = *a2;
  sub_20AECEBD0((_BYTE *)(a1 + 32), a2 + 1);
  return a1;
}

void sub_20B5287A4(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_20B5287B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B5287D4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const char *v4;
  void **v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  std::string::size_type size;
  int v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  void **p_dst;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  const char *v25;
  const char *v26;
  void **__dst;
  const char *v28;
  int64_t v29;
  void *v30[2];
  unsigned __int8 v31;
  std::string v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  const void *v36;
  unint64_t v37;
  void *__p;
  char v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  std::string v43;
  const char *v44[4];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 112))
  {
    v44[0] = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
    LODWORD(v43.__r_.__value_.__l.__data_) = *(_DWORD *)a1;
    std::error_condition::message(&v32, (const std::error_condition *)a1);
    sub_20B52B3D0((uint64_t)a2, v44, (int *)&v43, &v32);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v9 = (void *)v32.__r_.__value_.__r.__words[0];
    goto LABEL_61;
  }
  v43.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  LODWORD(__dst) = *(_DWORD *)a1;
  std::error_condition::message(&v32, (const std::error_condition *)a1);
  sub_20B52B3D0((uint64_t)v30, (const char **)&v43.__r_.__value_.__l.__data_, (int *)&__dst, &v32);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v4 = (const char *)v31;
  v5 = v30;
  if ((v31 & 0x80u) != 0)
  {
    v5 = (void **)v30[0];
    v4 = (const char *)v30[1];
  }
  v44[0] = (const char *)v5;
  v44[1] = v4;
  sub_20AEC0BD8((uint64_t)&v32);
  if (*(_BYTE *)(a1 + 40))
  {
    sub_20AEC01D0(&v32.__r_.__value_.__r.__words[2], (uint64_t)"detail", 6);
    sub_20AEC01D0(&v32.__r_.__value_.__r.__words[2], (uint64_t)": ", 2);
    v6 = *(char *)(a1 + 39);
    if (v6 >= 0)
      v7 = a1 + 16;
    else
      v7 = *(_QWORD *)(a1 + 16);
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a1 + 39);
    else
      v8 = *(_QWORD *)(a1 + 24);
    sub_20AEC01D0(&v32.__r_.__value_.__r.__words[2], v7, v8);
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_39;
    sub_20AEC01D0(&v32.__r_.__value_.__r.__words[2], (uint64_t)", ", 2);
  }
  else if (!*(_BYTE *)(a1 + 104))
  {
    goto LABEL_39;
  }
  sub_20AEC01D0(&v32.__r_.__value_.__r.__words[2], (uint64_t)"location", 8);
  sub_20AEC01D0(&v32.__r_.__value_.__r.__words[2], (uint64_t)": ", 2);
  sub_20AEC01D0(&v32.__r_.__value_.__r.__words[2], (uint64_t)"{", 1);
  v10 = *(char *)(a1 + 71);
  if (v10 >= 0)
    v11 = a1 + 48;
  else
    v11 = *(_QWORD *)(a1 + 48);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 71);
  else
    v12 = *(_QWORD *)(a1 + 56);
  sub_20AEC01D0(&v32.__r_.__value_.__r.__words[2], v11, v12);
  sub_20AEC01D0(&v32.__r_.__value_.__r.__words[2], (uint64_t)",", 1);
  std::to_string(&v43, *(_QWORD *)(a1 + 72));
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v43;
  else
    v13 = (std::string *)v43.__r_.__value_.__r.__words[0];
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  else
    size = v43.__r_.__value_.__l.__size_;
  sub_20AEC01D0(&v32.__r_.__value_.__r.__words[2], (uint64_t)v13, size);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  sub_20AEC01D0(&v32.__r_.__value_.__r.__words[2], (uint64_t)",", 1);
  v15 = *(char *)(a1 + 103);
  if (v15 >= 0)
    v16 = a1 + 80;
  else
    v16 = *(_QWORD *)(a1 + 80);
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a1 + 103);
  else
    v17 = *(_QWORD *)(a1 + 88);
  sub_20AEC01D0(&v32.__r_.__value_.__r.__words[2], v16, v17);
  sub_20AEC01D0(&v32.__r_.__value_.__r.__words[2], (uint64_t)"}", 1);
LABEL_39:
  if ((v41 & 0x10) != 0)
  {
    v20 = v40;
    if (v40 < v37)
    {
      v40 = v37;
      v20 = v37;
    }
    v21 = v36;
    v18 = v20 - (_QWORD)v36;
    if (v20 - (unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_64;
  }
  else
  {
    if ((v41 & 8) == 0)
    {
      v18 = 0;
      HIBYTE(v29) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_52;
    }
    v21 = v34;
    v18 = v35 - (_QWORD)v34;
    if ((unint64_t)(v35 - (_QWORD)v34) >= 0x7FFFFFFFFFFFFFF8)
LABEL_64:
      sub_20AEC0138();
  }
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    p_dst = (void **)operator new(v22 + 1);
    v28 = (const char *)v18;
    v29 = v23 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v29) = v18;
    p_dst = (void **)&__dst;
    if (!v18)
      goto LABEL_52;
  }
  memmove(p_dst, v21, v18);
LABEL_52:
  *((_BYTE *)p_dst + v18) = 0;
  v32.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
  v24 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + *(_QWORD *)(v32.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v32.__r_.__value_.__r.__words[2] = v24;
  v33 = MEMORY[0x24BEDB848] + 16;
  if (v39 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](&v42);
  v25 = (const char *)HIBYTE(v29);
  v26 = (const char *)&__dst;
  if (v29 < 0)
  {
    v26 = (const char *)__dst;
    v25 = v28;
  }
  v44[2] = v26;
  v44[3] = v25;
  sub_20AECFDF8((uint64_t)v44, (uint64_t)&v45, "; ", 2uLL, a2);
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__dst);
    if (((char)v31 & 0x80000000) == 0)
      return;
  }
  else if (((char)v31 & 0x80000000) == 0)
  {
    return;
  }
  v9 = v30[0];
LABEL_61:
  operator delete(v9);
}

void sub_20B528C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B528CA8(std::runtime_error *this)
{
  if (!LOBYTE(this[8].__vftable))
    goto LABEL_7;
  if (!LOBYTE(this[7].__imp_.__imp_))
    goto LABEL_5;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if (SHIBYTE(this[5].__vftable) < 0)
      goto LABEL_10;
LABEL_5:
    if (!LOBYTE(this[3].__imp_.__imp_))
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_10:
  operator delete(this[4].__vftable);
  if (!LOBYTE(this[3].__imp_.__imp_))
    goto LABEL_7;
LABEL_6:
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[2].__vftable);
    std::runtime_error::~runtime_error(this);
    return;
  }
LABEL_7:
  std::runtime_error::~runtime_error(this);
}

void sub_20B528D34(std::runtime_error *this)
{
  if (!LOBYTE(this[8].__vftable))
    goto LABEL_10;
  if (!LOBYTE(this[7].__imp_.__imp_))
    goto LABEL_5;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    {
LABEL_5:
      if (!LOBYTE(this[3].__imp_.__imp_))
        goto LABEL_10;
      goto LABEL_6;
    }
  }
  else if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(this[4].__vftable);
  if (!LOBYTE(this[3].__imp_.__imp_))
    goto LABEL_10;
LABEL_6:
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[2].__vftable);
LABEL_10:
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x20BD3583CLL);
}

const char *sub_20B528DC4()
{
  return "cv3d";
}

double sub_20B528DD0@<D0>(int a1@<W1>, uint64_t a2@<X8>)
{
  double result;
  char *v4;

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "no error");
      break;
    case 1:
      *(_BYTE *)(a2 + 23) = 9;
      strcpy((char *)a2, "exception");
      break;
    case 2:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "runtime error");
      break;
    case 3:
      v4 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v4;
      *(_OWORD *)(a2 + 8) = xmmword_20B5B35F0;
      strcpy(v4, "caught unknown thrown object");
      result = *(double *)"wn thrown object";
      break;
    default:
      *(_BYTE *)(a2 + 23) = 18;
      result = *(double *)"unknown error code";
      strcpy((char *)a2, "unknown error code");
      break;
  }
  return result;
}

void sub_20B528F00(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  char v7;
  void *__dst[2];
  uint64_t v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  char v16;

  LOBYTE(__dst[0]) = 0;
  v10 = 0;
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a1;
      v9 = *(_QWORD *)(a1 + 16);
    }
    v10 = 1;
  }
  sub_20AECEC88((char *)&v11, (__int128 *)(a1 + 32));
  v16 = 1;
  v7 = 2;
  strcpy((char *)__p, ", ");
  sub_20B529070(a3, (uint64_t)__dst, a2, 1, (const std::string::value_type *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v16)
  {
    if (!v15)
      goto LABEL_12;
    if (v14 < 0)
    {
      operator delete(v13);
      if ((v12 & 0x80000000) == 0)
      {
LABEL_12:
        if (!v10)
          return;
        goto LABEL_13;
      }
    }
    else if ((v12 & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(v11);
    if (!v10)
      return;
LABEL_13:
    if (SHIBYTE(v9) < 0)
      operator delete(__dst[0]);
  }
}

void sub_20B529024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a22)
  {
    if (a21 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B529070(uint64_t a1, uint64_t a2, void **a3, int a4, const std::string::value_type *a5)
{
  void *v7;
  void *v8;
  int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  std::string::size_type v15;
  void *v16;
  void *v17;
  std::string::size_type v18;
  void *v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  std::string __p;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 __dst;
  void *v50;
  unsigned __int8 v51;
  __int128 v52;
  void *v53;
  _QWORD v54[2];
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  _BYTE v59[15];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 96))
  {
    if (*(_BYTE *)(a2 + 24))
    {
      v7 = (void *)*(unsigned __int8 *)(a2 + 23);
      if (*(char *)(a2 + 23) < 0)
      {
        if (*(_QWORD *)(a2 + 8))
        {
LABEL_5:
          if (a4)
          {
            if ((v7 & 0x80) != 0)
            {
              v8 = *(void **)a2;
              v7 = *(void **)(a2 + 8);
            }
            else
            {
              v8 = (void *)a2;
            }
            v55 = v8;
            v56 = v7;
            v16 = (void *)*((unsigned __int8 *)a3 + 23);
            if ((char)v16 >= 0)
              v17 = a3;
            else
              v17 = *a3;
            if ((char)v16 < 0)
              v16 = a3[1];
            v57 = v17;
            v58 = v16;
            if (a5[23] < 0)
            {
              v25 = a5;
              a5 = *(const std::string::value_type **)a5;
              v18 = *((_QWORD *)v25 + 1);
            }
            else
            {
              v18 = *((unsigned __int8 *)a5 + 23);
            }
            sub_20AECFDF8((uint64_t)&v55, (uint64_t)v59, a5, v18, &__p);
            *(_QWORD *)v59 = __p.__r_.__value_.__l.__size_;
            v26 = __p.__r_.__value_.__r.__words[0];
            *(_QWORD *)&v59[7] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
            v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            memset(&__p, 0, sizeof(__p));
            sub_20AECEC88((char *)&v36, (__int128 *)(a2 + 32));
            v28 = *(_QWORD *)v59;
            *(_QWORD *)a1 = v26;
            *(_QWORD *)(a1 + 8) = v28;
            *(_QWORD *)(a1 + 15) = *(_QWORD *)&v59[7];
            *(_BYTE *)(a1 + 23) = v27;
            *(_BYTE *)(a1 + 24) = 1;
            *(_BYTE *)(a1 + 32) = 0;
            *(_BYTE *)(a1 + 88) = 0;
            if (!v41)
              goto LABEL_47;
            v29 = v38;
            *(_QWORD *)(a1 + 48) = v37;
            *(_OWORD *)(a1 + 32) = v36;
            v36 = 0uLL;
            *(_QWORD *)(a1 + 56) = v29;
            *(_OWORD *)(a1 + 64) = v39;
            *(_QWORD *)(a1 + 80) = v40;
            v37 = 0;
            v39 = 0uLL;
            v40 = 0;
            goto LABEL_46;
          }
          v12 = (void *)*((unsigned __int8 *)a3 + 23);
          if ((char)v12 >= 0)
            v13 = a3;
          else
            v13 = *a3;
          if ((char)v12 < 0)
            v12 = a3[1];
          v55 = v13;
          v56 = v12;
          if ((v7 & 0x80) != 0)
          {
            v19 = *(void **)(a2 + 8);
            v57 = *(void **)a2;
            v58 = v19;
            v14 = a5[23];
            if ((v14 & 0x80000000) == 0)
              goto LABEL_30;
          }
          else
          {
            v57 = (void *)a2;
            v58 = v7;
            v14 = a5[23];
            if ((v14 & 0x80000000) == 0)
            {
LABEL_30:
              v15 = v14;
LABEL_41:
              sub_20AECFDF8((uint64_t)&v55, (uint64_t)v59, a5, v15, &__p);
              v54[0] = __p.__r_.__value_.__l.__size_;
              v21 = __p.__r_.__value_.__r.__words[0];
              *(_QWORD *)((char *)v54 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
              v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              memset(&__p, 0, sizeof(__p));
              sub_20AECEC88((char *)&v30, (__int128 *)(a2 + 32));
              v23 = v54[0];
              *(_QWORD *)a1 = v21;
              *(_QWORD *)(a1 + 8) = v23;
              *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v54 + 7);
              *(_BYTE *)(a1 + 23) = v22;
              *(_BYTE *)(a1 + 24) = 1;
              *(_BYTE *)(a1 + 32) = 0;
              *(_BYTE *)(a1 + 88) = 0;
              if (!v35)
              {
LABEL_47:
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  return;
                v11 = (void *)__p.__r_.__value_.__r.__words[0];
                goto LABEL_49;
              }
              v24 = v32;
              *(_QWORD *)(a1 + 48) = v31;
              *(_OWORD *)(a1 + 32) = v30;
              v30 = 0uLL;
              *(_QWORD *)(a1 + 56) = v24;
              *(_OWORD *)(a1 + 64) = v33;
              *(_QWORD *)(a1 + 80) = v34;
              v31 = 0;
              v33 = 0uLL;
              v34 = 0;
LABEL_46:
              *(_BYTE *)(a1 + 88) = 1;
              goto LABEL_47;
            }
          }
          v20 = a5;
          a5 = *(const std::string::value_type **)a5;
          v15 = *((_QWORD *)v20 + 1);
          goto LABEL_41;
        }
      }
      else if (*(_BYTE *)(a2 + 23))
      {
        goto LABEL_5;
      }
    }
    if (*((char *)a3 + 23) < 0)
    {
      sub_20AEC60F4(&__dst, *a3, (unint64_t)a3[1]);
    }
    else
    {
      __dst = *(_OWORD *)a3;
      v50 = a3[2];
    }
    v51 = 1;
    sub_20AECEC88((char *)&v43, (__int128 *)(a2 + 32));
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v9 = v51;
    if (v51)
    {
      *(_OWORD *)a1 = __dst;
      *(_QWORD *)(a1 + 16) = v50;
      v50 = 0;
      __dst = 0uLL;
      *(_BYTE *)(a1 + 24) = 1;
    }
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 88) = 0;
    if (v48)
    {
      v10 = v45;
      *(_QWORD *)(a1 + 48) = v44;
      *(_OWORD *)(a1 + 32) = v43;
      v43 = 0uLL;
      *(_QWORD *)(a1 + 56) = v10;
      *(_OWORD *)(a1 + 64) = v46;
      *(_QWORD *)(a1 + 80) = v47;
      v44 = 0;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(a1 + 88) = 1;
    }
    if (v9 && SHIBYTE(v50) < 0)
    {
      v11 = (void *)__dst;
LABEL_49:
      operator delete(v11);
    }
  }
  else
  {
    if (*((char *)a3 + 23) < 0)
    {
      sub_20AEC60F4(&v52, *a3, (unint64_t)a3[1]);
    }
    else
    {
      v52 = *(_OWORD *)a3;
      v53 = a3[2];
    }
    *(_OWORD *)a1 = v52;
    *(_QWORD *)(a1 + 16) = v53;
    *(_BYTE *)(a1 + 24) = 1;
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 88) = 0;
  }
}

void sub_20B529414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  int v32;

  if (v32 < 0)
    operator delete(v31);
  if (a31 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B529470(char *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  char v11;
  int v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26[2];
  char v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  char v33;
  void *__p;
  __int128 v35;
  unsigned __int8 v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  void *v40;
  __int128 v41;
  unsigned __int8 v42;
  _QWORD v43[2];
  _QWORD v44[2];
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)a1;
  v6 = *((_QWORD *)a1 + 1);
  LOBYTE(v18) = 0;
  v20 = 0;
  LOBYTE(v21) = 0;
  v25 = 0;
  sub_20AFF435C(a1 + 16, (uint64_t)&v18, (uint64_t)v26);
  sub_20B528F00((uint64_t)v26, a2, (uint64_t)&__p);
  v12 = v36;
  if (v36)
  {
    v13 = __p;
    v45[0] = v35;
    *(_QWORD *)((char *)v45 + 7) = *(_QWORD *)((char *)&v35 + 7);
    v7 = HIBYTE(v35);
    v35 = 0uLL;
    __p = 0;
    v14 = v42;
    if (v42)
      goto LABEL_3;
  }
  else
  {
    v13 = 0;
    v14 = v42;
    if (v42)
    {
LABEL_3:
      v15 = v37;
      v44[0] = v38;
      *(_QWORD *)((char *)v44 + 7) = *(_QWORD *)((char *)&v38 + 7);
      v9 = HIBYTE(v38);
      v37 = 0;
      v38 = 0uLL;
      v10 = v39;
      v8 = v40;
      v43[0] = v41;
      *(_QWORD *)((char *)v43 + 7) = *(_QWORD *)((char *)&v41 + 7);
      v11 = HIBYTE(v41);
      v40 = 0;
      v41 = 0uLL;
      *(_QWORD *)a3 = v5;
      *(_QWORD *)(a3 + 8) = v6;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      if (!v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v15 = 0;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  if (v12)
  {
LABEL_4:
    v16 = v45[0];
    *(_QWORD *)(a3 + 16) = v13;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 31) = *(_QWORD *)((char *)v45 + 7);
    *(_BYTE *)(a3 + 39) = v7;
    v45[0] = 0;
    *(_QWORD *)((char *)v45 + 7) = 0;
    *(_BYTE *)(a3 + 40) = 1;
    v13 = 0;
    v7 = 0;
  }
LABEL_5:
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v14)
  {
    v17 = v44[0];
    *(_QWORD *)(a3 + 48) = v15;
    *(_QWORD *)(a3 + 56) = v17;
    *(_QWORD *)(a3 + 63) = *(_QWORD *)((char *)v44 + 7);
    *(_BYTE *)(a3 + 71) = v9;
    v44[0] = 0;
    *(_QWORD *)((char *)v44 + 7) = 0;
    *(_QWORD *)(a3 + 72) = v10;
    *(_QWORD *)(a3 + 80) = v8;
    *(_QWORD *)(a3 + 88) = v43[0];
    *(_QWORD *)(a3 + 95) = *(_QWORD *)((char *)v43 + 7);
    *(_BYTE *)(a3 + 103) = v11;
    v43[0] = 0;
    *(_QWORD *)((char *)v43 + 7) = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  if (v12 && v7 < 0)
  {
    operator delete(v13);
    v14 = v42;
  }
  if (v14)
  {
    if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v38) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_33:
      operator delete(v37);
      if (!v36)
        goto LABEL_16;
      goto LABEL_14;
    }
    operator delete(v40);
    if (SHIBYTE(v38) < 0)
      goto LABEL_33;
  }
LABEL_13:
  if (!v36)
    goto LABEL_16;
LABEL_14:
  if (SHIBYTE(v35) < 0)
    operator delete(__p);
LABEL_16:
  if (!v33)
    goto LABEL_19;
  if ((v32 & 0x80000000) == 0)
  {
    if ((v30 & 0x80000000) == 0)
      goto LABEL_19;
LABEL_36:
    operator delete(v29);
    if (!v28)
      goto LABEL_22;
    goto LABEL_20;
  }
  operator delete(v31);
  if (v30 < 0)
    goto LABEL_36;
LABEL_19:
  if (!v28)
    goto LABEL_22;
LABEL_20:
  if (v27 < 0)
    operator delete(v26[0]);
LABEL_22:
  if (!v25)
    goto LABEL_25;
  if (v24 < 0)
  {
    operator delete(v23);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_25:
      if (!v20)
        return;
      goto LABEL_26;
    }
  }
  else if ((v22 & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v21);
  if (!v20)
    return;
LABEL_26:
  if (v19 < 0)
    operator delete(v18);
}

void sub_20B529738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20AFF2FD8((uint64_t)va1);
  sub_20AFF2FD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B529754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AFF2FD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B529768(char *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  char v11;
  int v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26[2];
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  void *__p;
  __int128 v36;
  unsigned __int8 v37;
  void *v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  unsigned __int8 v43;
  void *v44[2];
  char v45;
  __int128 __dst;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  char v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[3];

  v58[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)a1;
  v6 = *((_QWORD *)a1 + 1);
  LOBYTE(v18) = 0;
  v20 = 0;
  LOBYTE(v21) = 0;
  v25 = 0;
  sub_20AFF435C(a1 + 16, (uint64_t)&v18, (uint64_t)v26);
  LOBYTE(__dst) = 0;
  v48 = 0;
  if (v28)
  {
    if (SHIBYTE(v27) < 0)
    {
      sub_20AEC60F4(&__dst, v26[0], (unint64_t)v26[1]);
    }
    else
    {
      __dst = *(_OWORD *)v26;
      v47 = v27;
    }
    v48 = 1;
  }
  LOBYTE(v49) = 0;
  v54 = 0;
  if (v34)
  {
    if (SHIBYTE(v30) < 0)
    {
      sub_20AEC60F4(&v49, (void *)v29, *((unint64_t *)&v29 + 1));
    }
    else
    {
      v49 = v29;
      v50 = v30;
    }
    v51 = v31;
    if (SHIBYTE(v33) < 0)
    {
      sub_20AEC60F4(&v52, (void *)v32, *((unint64_t *)&v32 + 1));
    }
    else
    {
      v52 = v32;
      v53 = v33;
    }
    v54 = 1;
  }
  v55 = 1;
  v45 = 2;
  strcpy((char *)v44, ", ");
  sub_20B529070((uint64_t)&__p, (uint64_t)&__dst, a2, 0, (const std::string::value_type *)v44);
  if (v45 < 0)
    operator delete(v44[0]);
  if (v55)
  {
    if (!v54)
      goto LABEL_20;
    if (SHIBYTE(v53) < 0)
    {
      operator delete((void *)v52);
      if ((SHIBYTE(v50) & 0x80000000) == 0)
      {
LABEL_20:
        if (!v48)
          goto LABEL_23;
LABEL_21:
        if (SHIBYTE(v47) < 0)
          operator delete((void *)__dst);
        goto LABEL_23;
      }
    }
    else if ((SHIBYTE(v50) & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete((void *)v49);
    if (!v48)
      goto LABEL_23;
    goto LABEL_21;
  }
LABEL_23:
  v12 = v37;
  if (v37)
  {
    v13 = __p;
    v58[0] = v36;
    *(_QWORD *)((char *)v58 + 7) = *(_QWORD *)((char *)&v36 + 7);
    v7 = HIBYTE(v36);
    v36 = 0uLL;
    __p = 0;
    v14 = v43;
    if (v43)
      goto LABEL_25;
  }
  else
  {
    v13 = 0;
    v14 = v43;
    if (v43)
    {
LABEL_25:
      v15 = v38;
      v57[0] = v39;
      *(_QWORD *)((char *)v57 + 7) = *(_QWORD *)((char *)&v39 + 7);
      v9 = HIBYTE(v39);
      v38 = 0;
      v39 = 0uLL;
      v10 = v40;
      v8 = v41;
      v56[0] = v42;
      *(_QWORD *)((char *)v56 + 7) = *(_QWORD *)((char *)&v42 + 7);
      v11 = HIBYTE(v42);
      v41 = 0;
      v42 = 0uLL;
      *(_QWORD *)a3 = v5;
      *(_QWORD *)(a3 + 8) = v6;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      if (!v12)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  v15 = 0;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  if (v12)
  {
LABEL_26:
    v16 = v58[0];
    *(_QWORD *)(a3 + 16) = v13;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 31) = *(_QWORD *)((char *)v58 + 7);
    *(_BYTE *)(a3 + 39) = v7;
    v58[0] = 0;
    *(_QWORD *)((char *)v58 + 7) = 0;
    *(_BYTE *)(a3 + 40) = 1;
    v13 = 0;
    v7 = 0;
  }
LABEL_27:
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v14)
  {
    v17 = v57[0];
    *(_QWORD *)(a3 + 48) = v15;
    *(_QWORD *)(a3 + 56) = v17;
    *(_QWORD *)(a3 + 63) = *(_QWORD *)((char *)v57 + 7);
    *(_BYTE *)(a3 + 71) = v9;
    v57[0] = 0;
    *(_QWORD *)((char *)v57 + 7) = 0;
    *(_QWORD *)(a3 + 72) = v10;
    *(_QWORD *)(a3 + 80) = v8;
    *(_QWORD *)(a3 + 88) = v56[0];
    *(_QWORD *)(a3 + 95) = *(_QWORD *)((char *)v56 + 7);
    *(_BYTE *)(a3 + 103) = v11;
    v56[0] = 0;
    *(_QWORD *)((char *)v56 + 7) = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  if (v12 && v7 < 0)
  {
    operator delete(v13);
    v14 = v43;
  }
  if (v14)
  {
    if ((SHIBYTE(v42) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v39) & 0x80000000) == 0)
        goto LABEL_35;
LABEL_55:
      operator delete(v38);
      if (!v37)
        goto LABEL_38;
      goto LABEL_36;
    }
    operator delete(v41);
    if (SHIBYTE(v39) < 0)
      goto LABEL_55;
  }
LABEL_35:
  if (!v37)
    goto LABEL_38;
LABEL_36:
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
LABEL_38:
  if (!v34)
    goto LABEL_41;
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      goto LABEL_41;
LABEL_58:
    operator delete((void *)v29);
    if (!v28)
      goto LABEL_44;
    goto LABEL_42;
  }
  operator delete((void *)v32);
  if (SHIBYTE(v30) < 0)
    goto LABEL_58;
LABEL_41:
  if (!v28)
    goto LABEL_44;
LABEL_42:
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
LABEL_44:
  if (!v25)
    goto LABEL_47;
  if ((v24 & 0x80000000) == 0)
  {
    if ((v22 & 0x80000000) == 0)
      goto LABEL_47;
LABEL_61:
    operator delete(v21);
    if (!v20)
      return;
    goto LABEL_48;
  }
  operator delete(v23);
  if (v22 < 0)
    goto LABEL_61;
LABEL_47:
  if (!v20)
    return;
LABEL_48:
  if (v19 < 0)
    operator delete(v18);
}

void sub_20B529B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  if (*(char *)(v3 - 169) < 0)
    operator delete(*(void **)(v3 - 192));
  sub_20AECEB70(v2);
  if (*(_BYTE *)(v3 - 200))
  {
    if (*(char *)(v3 - 201) < 0)
      operator delete(*(void **)(v3 - 224));
  }
  sub_20AFF2FD8((uint64_t)va1);
  sub_20AFF2FD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B529C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AFF2FD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B529C20(uint64_t a1)
{
  unsigned __int8 v2;
  int v3;
  std::logic_error *v4;
  std::runtime_error *v5;
  void *v6;
  std::logic_error *v7;
  std::logic_error *exception;

  v2 = atomic_load((unsigned __int8 *)&qword_25463D218);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463D218))
  {
    qword_25463D210 = (uint64_t)std::generic_category();
    __cxa_guard_release(&qword_25463D218);
  }
  if (*(_QWORD *)(a1 + 8) == qword_25463D210)
  {
    v3 = *(_DWORD *)a1;
    if (*(int *)a1 > 33)
    {
      if (v3 == 34)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20B529F90(exception, a1);
        __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
      }
      if (v3 == 84)
      {
        v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_20B52A064(v5, a1);
        __cxa_throw(v5, (struct type_info *)off_24C3F18E8, MEMORY[0x24BEDAB78]);
      }
    }
    else
    {
      if (v3 == 22)
      {
        v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20B529DE8(v7, a1);
        __cxa_throw(v7, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      if (v3 == 33)
      {
        v4 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20B529EBC(v4, a1);
        __cxa_throw(v4, (struct type_info *)off_24C3F18C8, MEMORY[0x24BEDAAE0]);
      }
    }
  }
  v6 = __cxa_allocate_exception(0x88uLL);
  sub_20B528CA4(v6, a1);
  __cxa_throw(v6, (struct type_info *)&unk_24C41FE10, (void (*)(void *))sub_20B528CA8);
}

void sub_20B529D84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B529D98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B529DAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B529DC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B529DD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B529DE8(std::logic_error *this, uint64_t a2)
{
  __int128 *v3;
  std::string v4;

  if (*(_BYTE *)(a2 + 112))
    v3 = (__int128 *)(a2 + 16);
  else
    v3 = (__int128 *)&unk_20B610E70;
  if (*((_BYTE *)v3 + 24))
  {
    sub_20B211404(v3);
    std::logic_error::logic_error(this, &v4);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    std::logic_error::logic_error(this, "");
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
}

void sub_20B529EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B529EBC(std::logic_error *this, uint64_t a2)
{
  __int128 *v3;
  std::string v4;

  if (*(_BYTE *)(a2 + 112))
    v3 = (__int128 *)(a2 + 16);
  else
    v3 = (__int128 *)&unk_20B610E70;
  if (*((_BYTE *)v3 + 24))
  {
    sub_20B211404(v3);
    std::logic_error::logic_error(this, &v4);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B0] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    std::logic_error::logic_error(this, "");
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B0] + 16);
  }
}

void sub_20B529F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B529F90(std::logic_error *this, uint64_t a2)
{
  __int128 *v3;
  std::string v4;

  if (*(_BYTE *)(a2 + 112))
    v3 = (__int128 *)(a2 + 16);
  else
    v3 = (__int128 *)&unk_20B610E70;
  if (*((_BYTE *)v3 + 24))
  {
    sub_20B211404(v3);
    std::logic_error::logic_error(this, &v4);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    std::logic_error::logic_error(this, "");
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  }
}

void sub_20B52A048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B52A064(std::runtime_error *this, uint64_t a2)
{
  __int128 *v3;
  std::string v4;

  if (*(_BYTE *)(a2 + 112))
    v3 = (__int128 *)(a2 + 16);
  else
    v3 = (__int128 *)&unk_20B610E70;
  if (*((_BYTE *)v3 + 24))
  {
    sub_20B211404(v3);
    std::runtime_error::runtime_error(this, &v4);
    this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8C8] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    std::runtime_error::runtime_error(this, "");
    this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8C8] + 16);
  }
}

void sub_20B52A11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B52A138(void **a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  char v11;
  int v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  void *__dst[2];
  char v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  char v27;
  char v28;
  void *__p;
  __int128 v30;
  unsigned __int8 v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  unsigned __int8 v37;
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[3];

  v40[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  sub_20AECEBD0(__dst, a2 + 1);
  v19 = 0;
  LOBYTE(v18) = 0;
  sub_20B529070((uint64_t)&__p, (uint64_t)__dst, a1, 0, (const std::string::value_type *)&v18);
  v12 = v31;
  if (v31)
  {
    v13 = __p;
    v40[0] = v30;
    *(_QWORD *)((char *)v40 + 7) = *(_QWORD *)((char *)&v30 + 7);
    v7 = HIBYTE(v30);
    v30 = 0uLL;
    __p = 0;
    v14 = v37;
    if (v37)
      goto LABEL_3;
  }
  else
  {
    v13 = 0;
    v14 = v37;
    if (v37)
    {
LABEL_3:
      v15 = v32;
      v39[0] = v33;
      *(_QWORD *)((char *)v39 + 7) = *(_QWORD *)((char *)&v33 + 7);
      v9 = HIBYTE(v33);
      v32 = 0;
      v33 = 0uLL;
      v10 = v34;
      v8 = v35;
      v38[0] = v36;
      *(_QWORD *)((char *)v38 + 7) = *(_QWORD *)((char *)&v36 + 7);
      v11 = HIBYTE(v36);
      v35 = 0;
      v36 = 0uLL;
      *(_QWORD *)a3 = v5;
      *(_QWORD *)(a3 + 8) = v6;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      if (!v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v15 = 0;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  if (v12)
  {
LABEL_4:
    v16 = v40[0];
    *(_QWORD *)(a3 + 16) = v13;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 31) = *(_QWORD *)((char *)v40 + 7);
    *(_BYTE *)(a3 + 39) = v7;
    v40[0] = 0;
    *(_QWORD *)((char *)v40 + 7) = 0;
    *(_BYTE *)(a3 + 40) = 1;
    v13 = 0;
    v7 = 0;
  }
LABEL_5:
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v14)
  {
    v17 = v39[0];
    *(_QWORD *)(a3 + 48) = v15;
    *(_QWORD *)(a3 + 56) = v17;
    *(_QWORD *)(a3 + 63) = *(_QWORD *)((char *)v39 + 7);
    *(_BYTE *)(a3 + 71) = v9;
    v39[0] = 0;
    *(_QWORD *)((char *)v39 + 7) = 0;
    *(_QWORD *)(a3 + 72) = v10;
    *(_QWORD *)(a3 + 80) = v8;
    *(_QWORD *)(a3 + 88) = v38[0];
    *(_QWORD *)(a3 + 95) = *(_QWORD *)((char *)v38 + 7);
    *(_BYTE *)(a3 + 103) = v11;
    v38[0] = 0;
    *(_QWORD *)((char *)v38 + 7) = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  if (v12 && v7 < 0)
  {
    operator delete(v13);
    v14 = v37;
  }
  if (v14)
  {
    if ((SHIBYTE(v36) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v33) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_30:
      operator delete(v32);
      if (!v31)
        goto LABEL_16;
      goto LABEL_14;
    }
    operator delete(v35);
    if (SHIBYTE(v33) < 0)
      goto LABEL_30;
  }
LABEL_13:
  if (!v31)
    goto LABEL_16;
LABEL_14:
  if (SHIBYTE(v30) < 0)
    operator delete(__p);
LABEL_16:
  if (v19 < 0)
    operator delete(v18);
  if (v28)
  {
    if (!v27)
      goto LABEL_22;
    if (v26 < 0)
    {
      operator delete(v25);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_22:
        if (!v22)
          return;
        goto LABEL_23;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v23);
    if (!v22)
      return;
LABEL_23:
    if (v21 < 0)
      operator delete(__dst[0]);
  }
}

void sub_20B52A3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_20AECCDB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20B52A3E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  *(_BYTE *)(a2 + 120) = 1;
  return result;
}

void sub_20B52A690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20AECCE40((uint64_t)&a28);
  sub_20AECCDB4((uint64_t)&a15);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B52A810(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 __p;
  uint64_t v18;
  unsigned __int8 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;

  sub_20AECEBD0(v7, a2);
  sub_20B52B618((uint64_t)&v16, a1, (__int128 *)v7);
  *(_OWORD *)a3 = v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v26)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v18;
      v18 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v25)
    {
      v6 = v22;
      *(_QWORD *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      v20 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v23;
      *(_QWORD *)(a3 + 96) = v24;
      v21 = 0;
      v23 = 0uLL;
      v24 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0)
      operator delete((void *)__p);
  }
  if (v15)
  {
    if (!v14)
      goto LABEL_13;
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9)
          return;
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9)
      return;
LABEL_14:
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_20B52A974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCDB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B52A988(uint64_t a1, unsigned int a2, void **a3)
{
  uint64_t v6;
  size_t v7;
  size_t v8;
  int64_t v9;
  size_t size;
  void **v11;
  void **v12;
  std::string *v13;
  void *v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  char v26;
  void *v27[2];
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  char v34;
  char v35;
  void *__p[2];
  char v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  char v43;
  char v44;
  __int128 __dst;
  void *v46;
  char v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  char v53;
  char v54;
  std::string v55;

  sub_20AF55B94((uint64_t)__p, "");
  v44 = 1;
  v6 = sub_20B52B618((uint64_t)&__dst, a2, (__int128 *)__p);
  sub_20B5287D4(v6, &v55);
  if (!v54)
    goto LABEL_8;
  if (!v53)
    goto LABEL_5;
  if ((v52 & 0x80000000) == 0)
  {
    if ((v50 & 0x80000000) == 0)
      goto LABEL_5;
LABEL_49:
    operator delete(v49);
    if (!v48)
      goto LABEL_8;
    goto LABEL_6;
  }
  operator delete(v51);
  if (v50 < 0)
    goto LABEL_49;
LABEL_5:
  if (!v48)
    goto LABEL_8;
LABEL_6:
  if (v47 < 0)
    operator delete(v46);
LABEL_8:
  if (!v44)
    goto LABEL_15;
  if (v43)
  {
    if ((v42 & 0x80000000) == 0)
    {
      if ((v40 & 0x80000000) == 0)
        goto LABEL_12;
LABEL_52:
      operator delete(v39);
      if (!v38)
        goto LABEL_15;
      goto LABEL_13;
    }
    operator delete(v41);
    if (v40 < 0)
      goto LABEL_52;
  }
LABEL_12:
  if (!v38)
    goto LABEL_15;
LABEL_13:
  if (v37 < 0)
    operator delete(__p[0]);
LABEL_15:
  v7 = *((unsigned __int8 *)a3 + 23);
  v8 = (size_t)a3[1];
  if ((v7 & 0x80u) == 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = (int64_t)a3[1];
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  else
    size = v55.__r_.__value_.__l.__size_;
  if ((uint64_t)size <= v9)
  {
    v11 = (void **)*a3;
    v12 = (v7 & 0x80u) == 0 ? a3 : (void **)*a3;
    v13 = (v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v55
        : (std::string *)v55.__r_.__value_.__r.__words[0];
    if (!memcmp(v12, v13, size))
    {
      if ((v7 & 0x80) != 0)
      {
        a3 = v11;
        if (v8 >= size)
        {
LABEL_41:
          if (v8 - size < v8)
            v8 -= size;
          if (v8 >= 0x7FFFFFFFFFFFFFF8)
            sub_20AEC0138();
          if (v8 >= 0x17)
          {
            v16 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v8 | 7) != 0x17)
              v16 = v8 | 7;
            v17 = v16 + 1;
            p_dst = (__int128 *)operator new(v16 + 1);
            *((_QWORD *)&__dst + 1) = v8;
            v46 = (void *)(v17 | 0x8000000000000000);
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v46) = v8;
            p_dst = &__dst;
            if (!v8)
            {
              LOBYTE(__dst) = 0;
              if ((SHIBYTE(v46) & 0x80000000) == 0)
              {
LABEL_47:
                *(_OWORD *)v27 = __dst;
                v28 = v46;
                goto LABEL_62;
              }
LABEL_61:
              sub_20AEC60F4(v27, (void *)__dst, *((unint64_t *)&__dst + 1));
LABEL_62:
              v29 = 1;
              LOBYTE(v30) = 0;
              v34 = 0;
              v35 = 1;
              sub_20B52A810(a2, (__int128 *)v27, a1);
              if (v35)
              {
                if (v34)
                {
                  if (v33 < 0)
                    operator delete(v32);
                  if (v31 < 0)
                    operator delete(v30);
                }
                if (v29 && SHIBYTE(v28) < 0)
                  operator delete(v27[0]);
              }
              if (SHIBYTE(v46) < 0)
              {
                v14 = (void *)__dst;
LABEL_73:
                operator delete(v14);
                goto LABEL_74;
              }
              goto LABEL_74;
            }
          }
          memmove(p_dst, (char *)a3 + size, v8);
          *((_BYTE *)p_dst + v8) = 0;
          if ((SHIBYTE(v46) & 0x80000000) == 0)
            goto LABEL_47;
          goto LABEL_61;
        }
      }
      else
      {
        v8 = v7;
        if (size <= v7)
          goto LABEL_41;
      }
      sub_20AEC73F8();
    }
  }
  if ((v7 & 0x80) != 0)
  {
    sub_20AEC60F4(&v18, *a3, v8);
  }
  else
  {
    v18 = *(_OWORD *)a3;
    v19 = a3[2];
  }
  v20 = 1;
  LOBYTE(v21) = 0;
  v25 = 0;
  v26 = 1;
  sub_20B52A810(a2, &v18, a1);
  if (v26)
  {
    if (!v25)
      goto LABEL_36;
    if (v24 < 0)
    {
      operator delete(v23);
      if ((v22 & 0x80000000) == 0)
      {
LABEL_36:
        if (!v20)
          goto LABEL_74;
        goto LABEL_37;
      }
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_36;
    }
    operator delete(v21);
    if (v20)
    {
LABEL_37:
      if ((SHIBYTE(v19) & 0x80000000) == 0)
        goto LABEL_74;
      v14 = (void *)v18;
      goto LABEL_73;
    }
  }
LABEL_74:
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
}

void sub_20B52AD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 185) < 0)
  {
    operator delete(*(void **)(v23 - 208));
    if ((*(char *)(v23 - 65) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v23 - 65) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v23 - 88));
  _Unwind_Resume(exception_object);
}

void sub_20B52AD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  sub_20AECCE40(v36 - 208);
  sub_20AECCDB4((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_20B52ADB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_20AECCDB4((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_20B52ADC4(uint64_t a1, unsigned int a2, void **a3)
{
  const std::error_category *v6;
  size_t v7;
  size_t v8;
  int64_t v9;
  size_t size;
  void **v11;
  void **v12;
  std::string *v13;
  void *v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  char v26;
  void *v27[2];
  uint64_t v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  char v34;
  char v35;
  void *v36[2];
  char v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  char v43;
  char v44;
  __int128 __dst;
  __int128 __p;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  char v55;
  std::string v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  char v66;

  sub_20AF55B94((uint64_t)v36, "");
  v44 = 1;
  v6 = std::generic_category();
  sub_20AECEBD0(&v57, (__int128 *)v36);
  *(_QWORD *)&__dst = a2;
  *((_QWORD *)&__dst + 1) = v6;
  LOBYTE(__p) = 0;
  v55 = 0;
  if (v66)
  {
    v48 = 0;
    if (v59)
    {
      __p = v57;
      v47 = v58;
      v58 = 0;
      v57 = 0uLL;
      v48 = 1;
    }
    LOBYTE(v49) = 0;
    v54 = 0;
    if (v65)
    {
      v50 = v61;
      v49 = v60;
      v60 = 0uLL;
      v52 = v63;
      v51 = v62;
      v53 = v64;
      v61 = 0;
      v63 = 0uLL;
      v64 = 0;
      v54 = 1;
    }
    v55 = 1;
    if (v59 && SHIBYTE(v58) < 0)
      operator delete((void *)v57);
  }
  sub_20B5287D4((uint64_t)&__dst, &v56);
  if (v55)
  {
    if (!v54)
      goto LABEL_13;
    if (SHIBYTE(v53) < 0)
    {
      operator delete((void *)v52);
      if ((SHIBYTE(v50) & 0x80000000) == 0)
      {
LABEL_13:
        if (!v48)
          goto LABEL_16;
LABEL_14:
        if (SHIBYTE(v47) < 0)
          operator delete((void *)__p);
        goto LABEL_16;
      }
    }
    else if ((SHIBYTE(v50) & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete((void *)v49);
    if (!v48)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_16:
  if (!v44)
    goto LABEL_23;
  if (v43)
  {
    if ((v42 & 0x80000000) == 0)
    {
      if ((v40 & 0x80000000) == 0)
        goto LABEL_20;
LABEL_60:
      operator delete(v39);
      if (!v38)
        goto LABEL_23;
      goto LABEL_21;
    }
    operator delete(v41);
    if (v40 < 0)
      goto LABEL_60;
  }
LABEL_20:
  if (!v38)
    goto LABEL_23;
LABEL_21:
  if (v37 < 0)
    operator delete(v36[0]);
LABEL_23:
  v7 = *((unsigned __int8 *)a3 + 23);
  v8 = (size_t)a3[1];
  if ((v7 & 0x80u) == 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = (int64_t)a3[1];
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
  else
    size = v56.__r_.__value_.__l.__size_;
  if ((uint64_t)size <= v9)
  {
    v11 = (void **)*a3;
    v12 = (v7 & 0x80u) == 0 ? a3 : (void **)*a3;
    v13 = (v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v56
        : (std::string *)v56.__r_.__value_.__r.__words[0];
    if (!memcmp(v12, v13, size))
    {
      if ((v7 & 0x80) != 0)
      {
        a3 = v11;
        if (v8 >= size)
        {
LABEL_49:
          if (v8 - size < v8)
            v8 -= size;
          if (v8 >= 0x7FFFFFFFFFFFFFF8)
            sub_20AEC0138();
          if (v8 >= 0x17)
          {
            v16 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v8 | 7) != 0x17)
              v16 = v8 | 7;
            v17 = v16 + 1;
            p_dst = (__int128 *)operator new(v16 + 1);
            *((_QWORD *)&__dst + 1) = v8;
            *(_QWORD *)&__p = v17 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            BYTE7(__p) = v8;
            p_dst = &__dst;
            if (!v8)
            {
              LOBYTE(__dst) = 0;
              if ((SBYTE7(__p) & 0x80000000) == 0)
              {
LABEL_55:
                *(_OWORD *)v27 = __dst;
                v28 = __p;
                goto LABEL_70;
              }
LABEL_69:
              sub_20AEC60F4(v27, (void *)__dst, *((unint64_t *)&__dst + 1));
LABEL_70:
              v29 = 1;
              LOBYTE(v30) = 0;
              v34 = 0;
              v35 = 1;
              sub_20AF558C0(a2, (__int128 *)v27, a1);
              if (v35)
              {
                if (v34)
                {
                  if (v33 < 0)
                    operator delete(v32);
                  if (v31 < 0)
                    operator delete(v30);
                }
                if (v29 && SHIBYTE(v28) < 0)
                  operator delete(v27[0]);
              }
              if (SBYTE7(__p) < 0)
              {
                v14 = (void *)__dst;
LABEL_81:
                operator delete(v14);
                goto LABEL_82;
              }
              goto LABEL_82;
            }
          }
          memmove(p_dst, (char *)a3 + size, v8);
          *((_BYTE *)p_dst + v8) = 0;
          if ((SBYTE7(__p) & 0x80000000) == 0)
            goto LABEL_55;
          goto LABEL_69;
        }
      }
      else
      {
        v8 = v7;
        if (size <= v7)
          goto LABEL_49;
      }
      sub_20AEC73F8();
    }
  }
  if ((v7 & 0x80) != 0)
  {
    sub_20AEC60F4(&v18, *a3, v8);
  }
  else
  {
    v18 = *(_OWORD *)a3;
    v19 = a3[2];
  }
  v20 = 1;
  LOBYTE(v21) = 0;
  v25 = 0;
  v26 = 1;
  sub_20AF558C0(a2, &v18, a1);
  if (v26)
  {
    if (!v25)
      goto LABEL_44;
    if (v24 < 0)
    {
      operator delete(v23);
      if ((v22 & 0x80000000) == 0)
      {
LABEL_44:
        if (!v20)
          goto LABEL_82;
        goto LABEL_45;
      }
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
    operator delete(v21);
    if (v20)
    {
LABEL_45:
      if ((SHIBYTE(v19) & 0x80000000) == 0)
        goto LABEL_82;
      v14 = (void *)v18;
      goto LABEL_81;
    }
  }
LABEL_82:
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
}

void sub_20B52B224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;

  if (a55 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v55 - 185) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v55 - 185) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v55 - 208));
  _Unwind_Resume(exception_object);
}

void sub_20B52B29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  sub_20AECCE40((uint64_t)&a50);
  sub_20AECCDB4((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20B52B2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20AECCDB4((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20B52B2CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  uint64_t v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_20AEC60F4(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v4 = *(_QWORD *)(a1 + 16);
  }
  v5 = 1;
  LOBYTE(v6) = 0;
  v10 = 0;
  v11 = 1;
  sub_20B52A810(2u, (__int128 *)__p, a2);
  if (v11)
  {
    if (!v10)
      goto LABEL_8;
    if (v9 < 0)
    {
      operator delete(v8);
      if ((v7 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v5)
          return;
        goto LABEL_9;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v6);
    if (!v5)
      return;
LABEL_9:
    if (SHIBYTE(v4) < 0)
      operator delete(__p[0]);
  }
}

void sub_20B52B398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCDB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B52B3AC(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B52B3D0(uint64_t a1, const char **a2, int *a3, std::string *a4)
{
  uint64_t result;
  _DWORD v7[6];
  int v8;
  std::string v9;
  std::string **v10;
  std::string *v11;
  std::string *v12;
  _DWORD *v13;
  std::string *v14;
  std::string *v15;

  v8 = 0;
  if (*a2)
    sub_20AED077C(v7, a2);
  else
    sub_20AED0170(v7, "nullptr");
  v11 = (std::string *)v7;
  v12 = (std::string *)" error ";
  v13 = v7;
  v14 = (std::string *)" error ";
  v15 = (std::string *)" error ";
  if (v8 == -1)
    sub_20AECFAB8();
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _DWORD *))off_24C41FE68[v8])(&v9, v7);
  std::to_string(&v9, *a3);
  v11 = (std::string *)v7;
  v12 = &v9;
  v13 = v7;
  v14 = &v9;
  v15 = &v9;
  if (v8 == -1)
    sub_20AECFAB8();
  v10 = &v11;
  ((void (*)(std::string ***, _DWORD *))off_24C41FE80[v8])(&v10, v7);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  v11 = (std::string *)v7;
  v12 = (std::string *)": ";
  v13 = v7;
  v14 = (std::string *)": ";
  v15 = (std::string *)": ";
  if (v8 == -1)
    sub_20AECFAB8();
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _DWORD *))off_24C41FE98[v8])(&v9, v7);
  v11 = (std::string *)v7;
  v12 = a4;
  v13 = v7;
  v14 = a4;
  v15 = a4;
  if (v8 == -1)
    sub_20AECFAB8();
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _DWORD *))off_24C41FEB0[v8])(&v9, v7);
  if (v8 == -1)
    sub_20AECFAB8();
  v11 = &v9;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C41FEC8[v8])(&v11, v7);
  if (v8 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C41FE50[v8])(&v11, v7);
  return result;
}

void sub_20B52B5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B52B618(uint64_t a1, unsigned int a2, __int128 *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  __int128 *v11;
  void *__p[2];
  uint64_t v13;
  unsigned __int8 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  char v21;

  v4 = atomic_load((unsigned __int8 *)&qword_25463CC18);
  if ((v4 & 1) == 0)
  {
    v11 = a3;
    v10 = a2;
    v9 = __cxa_guard_acquire(&qword_25463CC18);
    a2 = v10;
    a3 = v11;
    if (v9)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253EC31E8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CC18);
      a2 = v10;
      a3 = v11;
    }
  }
  v5 = a2;
  sub_20AECEBD0(__p, a3);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = &off_253EC31E8;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v21)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v6 = v14;
    if (v14)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 32) = v13;
      __p[1] = 0;
      v13 = 0;
      __p[0] = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v20)
    {
      v7 = v17;
      *(_QWORD *)(a1 + 64) = v16;
      *(_OWORD *)(a1 + 48) = v15;
      v15 = 0uLL;
      *(_QWORD *)(a1 + 72) = v7;
      *(_OWORD *)(a1 + 80) = v18;
      *(_QWORD *)(a1 + 96) = v19;
      v16 = 0;
      v18 = 0uLL;
      v19 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    if (v6 && SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20B52B770(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B52B794(unsigned __int8 *a1@<X0>, std::string::size_type a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v3;
  std::string::value_type v6;

  v3 = a2;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a3, a2);
  for (; v3; --v3)
  {
    v6 = __toupper(*a1);
    std::string::push_back(a3, v6);
    ++a1;
  }
}

void sub_20B52B7F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_20B52B814@<Q0>(std::string *__s@<X0>, char *a2@<X1>, int64_t a3@<X2>, const std::string::value_type *a4@<X3>, std::string::size_type a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  int64_t size;
  BOOL v15;
  uint64_t v16;
  std::string *v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  int v21;
  std::string *v22;
  int64_t v23;
  char *v24;
  char *v25;
  __n128 result;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  char *v31;
  char *v32;
  int64_t v33;
  int v34;
  int64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s->__r_.__value_.__l.__size_;
    if (size)
      v18 = a3 == 0;
    else
      v18 = 1;
    if (v18)
      goto LABEL_24;
    v19 = a7 ? a6 : -1;
    v38 = v19;
    v17 = (std::string *)__s->__r_.__value_.__r.__words[0];
    if (size < a3)
      goto LABEL_24;
  }
  else
  {
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__s->__r_.__value_.__s + 23))
      v15 = a3 == 0;
    else
      v15 = 1;
    if (v15)
      goto LABEL_24;
    v16 = a7 ? a6 : -1;
    v38 = v16;
    v17 = __s;
    if (size < a3)
      goto LABEL_24;
  }
  v20 = (char *)v17 + size;
  v21 = *a2;
  v22 = v17;
  do
  {
    v23 = size - a3;
    if (v23 == -1)
      break;
    v24 = (char *)memchr(v22, v21, v23 + 1);
    if (!v24)
      break;
    v25 = v24;
    if (!memcmp(v24, a2, a3))
    {
      if (v38)
      {
        if (v25 != v20)
        {
          v27 = v25 - (char *)v17;
          if (v25 - (char *)v17 != -1)
          {
LABEL_28:
            std::string::replace(__s, v27, a3, a4, a5);
            if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
            {
              v29 = (std::string *)__s->__r_.__value_.__r.__words[0];
              v28 = __s->__r_.__value_.__l.__size_;
            }
            else
            {
              v28 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
              v29 = __s;
            }
            v30 = v27 + a5;
            if (v28 >= v27 + a5)
            {
              v31 = (char *)v29 + v30;
              v32 = (char *)v29 + v28;
              v33 = v28 - v30;
              if (v33 >= a3)
              {
                --v38;
                v34 = *a2;
                while (1)
                {
                  v35 = v33 - a3;
                  if (v35 == -1)
                    break;
                  v36 = (char *)memchr(v31, v34, v35 + 1);
                  if (!v36)
                    break;
                  v37 = v36;
                  if (!memcmp(v36, a2, a3))
                  {
                    if (v38)
                    {
                      if (v37 != v32)
                      {
                        v27 = v37 - (char *)v29;
                        if (v37 - (char *)v29 != -1)
                          goto LABEL_28;
                      }
                    }
                    goto LABEL_24;
                  }
                  v31 = v37 + 1;
                  v33 = v32 - (v37 + 1);
                  if (v33 < a3)
                    goto LABEL_24;
                }
              }
            }
          }
        }
      }
      break;
    }
    v22 = (std::string *)(v25 + 1);
    size = v20 - (v25 + 1);
  }
  while (size >= a3);
LABEL_24:
  result = *(__n128 *)&__s->__r_.__value_.__l.__data_;
  *(_OWORD *)a8 = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
  *(_QWORD *)(a8 + 16) = *((_QWORD *)&__s->__r_.__value_.__l + 2);
  __s->__r_.__value_.__l.__size_ = 0;
  __s->__r_.__value_.__r.__words[2] = 0;
  __s->__r_.__value_.__r.__words[0] = 0;
  return result;
}

uint64_t sub_20B52BA04@<X0>(char *__format@<X0>, std::string *a2@<X8>, ...)
{
  uint64_t result;
  unint64_t size;
  unint64_t v6;
  std::string *v7;
  int v8;
  char *v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  char __str[256];
  uint64_t v16;
  va_list va;

  va_start(va, a2);
  v16 = *MEMORY[0x24BDAC8D0];
  result = vsnprintf(__str, 0x100uLL, __format, va);
  if (result <= 0xFF)
  {
    v11 = result;
    if (result >= 0x17)
    {
      v12 = (result & 0xFFFFFFF8) + 8;
      if ((result | 7) != 0x17)
        v12 = result | 7;
      v13 = v12 + 1;
      v14 = (std::string *)operator new(v12 + 1);
      a2->__r_.__value_.__l.__size_ = v11;
      a2->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      a2 = v14;
    }
    else
    {
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = result;
      if (!(_DWORD)result)
        goto LABEL_27;
    }
    result = (uint64_t)memcpy(a2, __str, v11);
LABEL_27:
    a2->__r_.__value_.__s.__data_[v11] = 0;
    return result;
  }
  size = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    while (1)
    {
      v6 = (int)result + 1;
      if ((size & 0x80) != 0)
      {
        size = a2->__r_.__value_.__l.__size_;
        if (size < v6)
        {
LABEL_8:
          std::string::append(a2, v6 - size, 0);
          goto LABEL_11;
        }
        v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
        a2->__r_.__value_.__l.__size_ = v6;
      }
      else
      {
        if (v6 > size)
          goto LABEL_8;
        *((_BYTE *)&a2->__r_.__value_.__s + 23) = v6 & 0x7F;
        v7 = a2;
      }
      v7->__r_.__value_.__s.__data_[v6] = 0;
LABEL_11:
      va_copy(__str, va);
      v8 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
      v9 = v8 >= 0 ? (char *)a2 : (char *)a2->__r_.__value_.__r.__words[0];
      v10 = v8 >= 0 ? HIBYTE(a2->__r_.__value_.__r.__words[2]) : a2->__r_.__value_.__l.__size_;
      result = vsnprintf(v9, v10, __format, va);
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
        break;
      if (size > (int)result)
      {
        *((_BYTE *)&a2->__r_.__value_.__s + 23) = result & 0x7F;
        goto LABEL_29;
      }
    }
  }
  while (a2->__r_.__value_.__l.__size_ <= (int)result);
  a2->__r_.__value_.__l.__size_ = (int)result;
  a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
LABEL_29:
  a2->__r_.__value_.__s.__data_[(int)result] = 0;
  return result;
}

void sub_20B52BBC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B52BBE0(uint64_t a1, uint64_t a2, char *a3, std::string::size_type __requested_capacity, int a5)
{
  char *v8;
  char *v9;
  unint64_t v10;
  _OWORD *v11;
  char *v12;
  _BYTE *v13;
  _OWORD *v14;
  __int128 *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void **v21;
  std::string::size_type v22;
  int v23;
  uint64_t (**v24)();
  int v25;
  std::string::size_type size;
  std::string *v27;
  unsigned int v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::locale v36;
  const std::locale::facet *v37;
  const std::locale::facet *v38;
  int v39;
  __int128 v40;
  __int128 v41;
  int v42;
  std::string v43;
  void *__p[2];
  _QWORD v45[6];
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  char v50;
  uint64_t v51;

  memset(&v43, 0, sizeof(v43));
  std::string::reserve(&v43, __requested_capacity);
  if (__requested_capacity)
  {
    v8 = &a3[__requested_capacity];
    while (1)
    {
      v9 = a3;
      while (2)
      {
        switch(*v9)
        {
          case '$':
          case '(':
          case ')':
          case '*':
          case '+':
          case '.':
          case '/':
          case '?':
          case '[':
          case '\\':
          case ']':
          case '^':
          case '|':
            break;
          default:
            if (++v9 != v8)
              continue;
            v9 = v8;
            break;
        }
        break;
      }
      v10 = v9 - a3;
      if ((unint64_t)(v9 - a3) >= 0x7FFFFFFFFFFFFFF8)
        sub_20AEC0138();
      if (v10 > 0x16)
      {
        v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17)
          v18 = v10 | 7;
        v19 = v18 + 1;
        v11 = operator new(v18 + 1);
        __p[1] = (void *)(v9 - a3);
        v45[0] = v19 | 0x8000000000000000;
        __p[0] = v11;
        if (a3 == v9)
        {
LABEL_21:
          v13 = v11;
          goto LABEL_24;
        }
      }
      else
      {
        HIBYTE(v45[0]) = (_BYTE)v9 - (_BYTE)a3;
        v11 = __p;
        if (a3 == v9)
          goto LABEL_21;
      }
      if (v10 < 0x20 || (unint64_t)((char *)v11 - a3) < 0x20)
        break;
      v12 = &a3[v10 & 0xFFFFFFFFFFFFFFE0];
      v13 = (char *)v11 + (v10 & 0xFFFFFFFFFFFFFFE0);
      v14 = v11 + 1;
      v15 = (__int128 *)(a3 + 16);
      v16 = v10 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = *v15;
        *(v14 - 1) = *(v15 - 1);
        *v14 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v10 != (v10 & 0xFFFFFFFFFFFFFFE0))
        goto LABEL_23;
LABEL_24:
      *v13 = 0;
      if (v45[0] >= 0)
        v21 = __p;
      else
        v21 = (void **)__p[0];
      if (v45[0] >= 0)
        v22 = HIBYTE(v45[0]);
      else
        v22 = (std::string::size_type)__p[1];
      std::string::append(&v43, (const std::string::value_type *)v21, v22);
      if (SHIBYTE(v45[0]) < 0)
        operator delete(__p[0]);
      if (v9 != v8)
      {
        v23 = *v9;
        v24 = (uint64_t (**)())&unk_24C41FF38;
        if (v23 != 42)
          v24 = off_24C41FF50;
        if (v23 == 63)
          v24 = (uint64_t (**)())&unk_24C41FF20;
        if (v24 == off_24C41FF50)
        {
          std::string::push_back(&v43, 92);
          std::string::push_back(&v43, v23);
        }
        else
        {
          std::string::append(&v43, (const std::string::value_type *)v24[1], (std::string::size_type)v24[2]);
        }
        a3 = v9 + 1;
        if (v9 + 1 != v8)
          continue;
      }
      goto LABEL_39;
    }
    v12 = a3;
    v13 = v11;
    do
    {
LABEL_23:
      v20 = *v12++;
      *v13++ = v20;
    }
    while (v12 != v9);
    goto LABEL_24;
  }
LABEL_39:
  if (a5)
    v25 = 1;
  else
    v25 = 16;
  MEMORY[0x20BD3568C](&v36);
  v37 = std::locale::use_facet(&v36, MEMORY[0x24BEDB350]);
  v38 = std::locale::use_facet(&v36, MEMORY[0x24BEDB4B0]);
  v39 = v25;
  v40 = 0u;
  v41 = 0u;
  v42 = 0;
  size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &v43;
  else
    v27 = (std::string *)v43.__r_.__value_.__r.__words[0];
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v43.__r_.__value_.__l.__size_;
  if ((char *)v27 + size != sub_20B52D024((uint64_t)&v36, (char *)v27, (char *)v27 + size))
    sub_20B0A7FDC();
  v45[4] = 0;
  v45[5] = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  *(_OWORD *)__p = 0u;
  memset(v45, 0, 25);
  v28 = sub_20B0ADBE8((uint64_t)&v36, a1, a1 + a2, (uint64_t)__p, 4160);
  v29 = v49;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v30 = *(std::__shared_weak_count **)((char *)&v41 + 4);
  if (!*(_QWORD *)((char *)&v41 + 4))
    goto LABEL_54;
  v31 = (unint64_t *)(*(_QWORD *)((char *)&v41 + 4) + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
  {
LABEL_54:
    std::locale::~locale(&v36);
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  std::locale::~locale(&v36);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
LABEL_55:
    operator delete(v43.__r_.__value_.__l.__data_);
LABEL_56:
  if (v29)
    return 0;
  else
    return v28;
}

void sub_20B52BF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20B0A7CC8(&a12);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B52BFE4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  float v22;
  float v23;
  uint64_t v24;
  _QWORD *v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  void *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  _QWORD *i;
  size_t v38;
  uint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (!a3)
    return a1;
  v5 = a2;
  v6 = 0;
  v7 = 0;
  v8 = &a2[3 * a3];
  v9 = a1 + 2;
  do
  {
    v10 = *v5;
    v11 = v5[1];
    v12 = (v11 + 2654435769 + ((unint64_t)(*v5 + 2654435769) >> 2) + ((*v5 + 2654435769) << 6)) ^ (*v5 + 2654435769);
    if (v7)
    {
      v13 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        v3 = (v11 + 2654435769 + ((unint64_t)(*v5 + 2654435769) >> 2) + ((*v5 + 2654435769) << 6)) ^ (*v5 + 2654435769);
        if (v12 >= v7)
          v3 = v12 % v7;
      }
      else
      {
        v3 = v12 & (v7 - 1);
      }
      v14 = *(_QWORD **)(*a1 + 8 * v3);
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if (v15)
        {
          if (v13.u32[0] < 2uLL)
          {
            while (1)
            {
              v19 = v15[1];
              if (v19 == v12)
              {
                if (v15[2] == v10 && v15[3] == v11)
                  goto LABEL_102;
              }
              else if ((v19 & (v7 - 1)) != v3)
              {
                goto LABEL_29;
              }
              v15 = (_QWORD *)*v15;
              if (!v15)
                goto LABEL_29;
            }
          }
          do
          {
            v17 = v15[1];
            if (v17 == v12)
            {
              if (v15[2] == v10 && v15[3] == v11)
                goto LABEL_102;
            }
            else
            {
              if (v17 >= v7)
                v17 %= v7;
              if (v17 != v3)
                break;
            }
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
      }
    }
LABEL_29:
    v20 = operator new(0x28uLL);
    *v20 = 0;
    v20[1] = v12;
    v21 = *(_OWORD *)v5;
    v20[4] = v5[2];
    *((_OWORD *)v20 + 1) = v21;
    v22 = (float)(unint64_t)(v6 + 1);
    v23 = *((float *)a1 + 8);
    if (!v7 || (float)(v23 * (float)v7) < v22)
    {
      v26 = (v7 & (v7 - 1)) != 0;
      if (v7 < 3)
        v26 = 1;
      v27 = v26 | (2 * v7);
      v28 = vcvtps_u32_f32(v22 / v23);
      if (v27 <= v28)
        prime = v28;
      else
        prime = v27;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v7 = a1[1];
      }
      if (prime <= v7)
      {
        if (prime >= v7)
          goto LABEL_79;
        v40 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
        if (v7 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
        {
          v40 = std::__next_prime(v40);
        }
        else
        {
          v42 = 1 << -(char)__clz(v40 - 1);
          if (v40 >= 2)
            v40 = v42;
        }
        if (prime <= v40)
          prime = v40;
        if (prime >= v7)
        {
          v7 = a1[1];
          v45 = v7 - 1;
          if ((v7 & (v7 - 1)) == 0)
            goto LABEL_80;
LABEL_92:
          if (v12 >= v7)
          {
            v3 = v12 % v7;
            v24 = *a1;
            v25 = *(_QWORD **)(*a1 + 8 * (v12 % v7));
            if (!v25)
              goto LABEL_81;
          }
          else
          {
            v3 = v12;
            v24 = *a1;
            v25 = *(_QWORD **)(*a1 + 8 * v12);
            if (!v25)
              goto LABEL_81;
          }
LABEL_32:
          *v20 = *v25;
LABEL_100:
          *v25 = v20;
          goto LABEL_101;
        }
        if (!prime)
        {
          v44 = (void *)*a1;
          *a1 = 0;
          if (v44)
            operator delete(v44);
          v7 = 0;
          a1[1] = 0;
          v45 = -1;
          goto LABEL_80;
        }
      }
      if (prime >> 61)
        sub_20AEC60CC();
      v30 = operator new(8 * prime);
      v31 = (void *)*a1;
      *a1 = (uint64_t)v30;
      if (v31)
        operator delete(v31);
      v32 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v32++) = 0;
      while (prime != v32);
      v33 = (_QWORD *)*v9;
      if (!*v9)
      {
LABEL_91:
        v7 = prime;
        v45 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_92;
LABEL_80:
        v3 = v45 & v12;
        v24 = *a1;
        v25 = *(_QWORD **)(*a1 + 8 * (v45 & v12));
        if (!v25)
          goto LABEL_81;
        goto LABEL_32;
      }
      v34 = v33[1];
      v35 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v36 = v34 & v35;
        *(_QWORD *)(*a1 + 8 * v36) = v9;
        for (i = (_QWORD *)*v33; *v33; i = (_QWORD *)*v33)
        {
          v38 = i[1] & v35;
          if (v38 == v36)
          {
            v33 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v38))
          {
            *v33 = *i;
            v39 = 8 * v38;
            *i = **(_QWORD **)(*a1 + v39);
            **(_QWORD **)(*a1 + v39) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v38) = v33;
            v33 = i;
            v36 = v38;
          }
        }
        goto LABEL_91;
      }
      if (v34 < prime)
      {
        *(_QWORD *)(*a1 + 8 * v34) = v9;
        v43 = (_QWORD *)*v33;
        if (*v33)
          goto LABEL_86;
        goto LABEL_78;
      }
      v34 %= prime;
      *(_QWORD *)(*a1 + 8 * v34) = v9;
      v43 = (_QWORD *)*v33;
      if (!*v33)
      {
LABEL_78:
        v7 = prime;
LABEL_79:
        v45 = v7 - 1;
        if ((v7 & (v7 - 1)) != 0)
          goto LABEL_92;
        goto LABEL_80;
      }
      while (1)
      {
LABEL_86:
        v48 = v43[1];
        if (v48 >= prime)
          v48 %= prime;
        if (v48 == v34)
          goto LABEL_85;
        if (*(_QWORD *)(*a1 + 8 * v48))
        {
          *v33 = *v43;
          v47 = 8 * v48;
          *v43 = **(_QWORD **)(*a1 + v47);
          **(_QWORD **)(*a1 + v47) = v43;
          v43 = v33;
LABEL_85:
          v33 = v43;
          v43 = (_QWORD *)*v43;
          if (!v43)
            goto LABEL_91;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v48) = v33;
          v33 = v43;
          v43 = (_QWORD *)*v43;
          v34 = v48;
          if (!v43)
            goto LABEL_91;
        }
      }
    }
    v24 = *a1;
    v25 = *(_QWORD **)(*a1 + 8 * v3);
    if (v25)
      goto LABEL_32;
LABEL_81:
    *v20 = *v9;
    *v9 = v20;
    *(_QWORD *)(v24 + 8 * v3) = v9;
    if (*v20)
    {
      v46 = *(_QWORD *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v46 >= v7)
          v46 %= v7;
      }
      else
      {
        v46 &= v7 - 1;
      }
      v25 = (_QWORD *)(*a1 + 8 * v46);
      goto LABEL_100;
    }
LABEL_101:
    v6 = a1[3] + 1;
    a1[3] = v6;
LABEL_102:
    v5 += 3;
  }
  while (v5 != v8);
  return a1;
}

void sub_20B52C4F4(_Unwind_Exception *a1)
{
  void **v1;
  void *v2;
  _QWORD **v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  operator delete(v2);
  v5 = *v3;
  if (*v3)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *v1;
  *v1 = 0;
  if (v7)
    operator delete(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_20B52C53C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_20B52C584(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t v16;
  unsigned __int8 v17;
  uint8x8_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v25;
  std::string *v26;
  __int128 v27;
  const char *v28;
  size_t v29;
  size_t v30;
  const char *v31;
  size_t v32;
  std::string::size_type v33;
  _BYTE *p_dst;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  std::string __dst;
  _DWORD v41[6];
  int v42;
  std::string v43;
  int64x2_t *v44;
  int64x2_t v45;
  const char *v46;
  __int128 v47;
  const char *v48;
  __int128 v49;
  const char *v50;
  __int128 v51;
  const char *v52;
  __int128 v53;
  const char *v54;
  __int128 v55;
  const char *v56;
  __int128 v57;
  const char *v58;
  __int128 v59;
  const char *v60;
  __int128 v61;
  const char *v62;
  __int128 v63;
  const char *v64;
  __int128 v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  __int128 v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  __int128 v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25463CC28);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25463CC28))
  {
    v45 = vdupq_n_s64(1uLL);
    v46 = "seconds";
    v47 = xmmword_20B6111D0;
    v49 = xmmword_20B6111E0;
    v48 = "minutes";
    v50 = "hours";
    v51 = xmmword_20B6111F0;
    v53 = xmmword_20B611200;
    v52 = "days";
    v54 = "weeks";
    v55 = xmmword_20B611210;
    v57 = xmmword_20B611220;
    v56 = "months";
    v58 = "years";
    sub_20B52BFE4(&qword_25463CC58, v45.i64, 7);
    __cxa_atexit((void (*)(void *))sub_20B52C53C, &qword_25463CC58, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CC28);
  }
  v7 = a2 + ((unint64_t)(a1 + 2654435769) >> 2) + ((a1 + 2654435769) << 6);
  v8 = (v7 + 2654435769u) ^ (a1 + 2654435769);
  if (qword_25463CC60)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25463CC60);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = (v7 + 2654435769u) ^ (a1 + 2654435769);
      if (v8 >= qword_25463CC60)
        v10 = v8 % qword_25463CC60;
    }
    else
    {
      v10 = (qword_25463CC60 - 1) & v8;
    }
    v11 = *(_QWORD **)(qword_25463CC58 + 8 * v10);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v12[1];
            if (v8 == v16)
            {
              if (v12[2] == a1 && v12[3] == a2)
                goto LABEL_69;
            }
            else if ((v16 & (qword_25463CC60 - 1)) != v10)
            {
              goto LABEL_28;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_28;
          }
        }
        do
        {
          v14 = v12[1];
          if (v8 == v14)
          {
            if (v12[2] == a1 && v12[3] == a2)
            {
LABEL_69:
              v28 = (const char *)v12[4];
              v29 = strlen(v28);
              if (v29 > 0x7FFFFFFFFFFFFFF7)
                sub_20AEC0138();
              v30 = v29;
              if (v29 >= 0x17)
              {
                v35 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v29 | 7) != 0x17)
                  v35 = v29 | 7;
                v36 = v35 + 1;
                v37 = operator new(v35 + 1);
                a3[1] = v30;
                a3[2] = v36 | 0x8000000000000000;
                *a3 = v37;
                a3 = v37;
              }
              else
              {
                *((_BYTE *)a3 + 23) = v29;
                if (!v29)
                {
LABEL_81:
                  *((_BYTE *)a3 + v30) = 0;
                  return;
                }
              }
              memmove(a3, v28, v30);
              goto LABEL_81;
            }
          }
          else
          {
            if (v14 >= qword_25463CC60)
              v14 %= (unint64_t)qword_25463CC60;
            if (v14 != v10)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_28:
  v17 = atomic_load((unsigned __int8 *)&qword_25463CC20);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_25463CC20))
  {
    v45 = (int64x2_t)xmmword_20B611230;
    v46 = "atto";
    v47 = xmmword_20B611240;
    v49 = xmmword_20B611250;
    v48 = "femto";
    v50 = "pico";
    v51 = xmmword_20B611260;
    v53 = xmmword_20B611270;
    v52 = "nano";
    v54 = "micro";
    v55 = xmmword_20B611280;
    v57 = xmmword_20B611290;
    v56 = "milli";
    v58 = "centi";
    v59 = xmmword_20B6112A0;
    v61 = xmmword_20B6112B0;
    v60 = "deci";
    v62 = "deca";
    v63 = xmmword_20B6112C0;
    v65 = xmmword_20B6112D0;
    v64 = "hecto";
    v66 = "kilo";
    v67 = 1000000;
    v70 = xmmword_20B6112E0;
    v68 = 1;
    v69 = "mega";
    v71 = "giga";
    v72 = 1000000000000;
    v73 = 1;
    v75 = xmmword_20B6112F0;
    v74 = "tera";
    v76 = "peta";
    v77 = 1000000000000000000;
    v78 = 1;
    v79 = "exa";
    sub_20B52BFE4(&qword_25463CC30, v45.i64, 16);
    __cxa_atexit((void (*)(void *))sub_20B52C53C, &qword_25463CC30, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CC20);
  }
  if (qword_25463CC38)
  {
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25463CC38);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      v19 = v8;
      if (v8 >= qword_25463CC38)
        v19 = v8 % qword_25463CC38;
    }
    else
    {
      v19 = (qword_25463CC38 - 1) & v8;
    }
    v20 = *(_QWORD **)(qword_25463CC30 + 8 * v19);
    if (v20)
    {
      v21 = (_QWORD *)*v20;
      if (v21)
      {
        if (v18.u32[0] < 2uLL)
        {
          while (1)
          {
            v25 = v21[1];
            if (v8 == v25)
            {
              if (v21[2] == a1 && v21[3] == a2)
                goto LABEL_73;
            }
            else if ((v25 & (qword_25463CC38 - 1)) != v19)
            {
              goto LABEL_55;
            }
            v21 = (_QWORD *)*v21;
            if (!v21)
              goto LABEL_55;
          }
        }
        do
        {
          v23 = v21[1];
          if (v8 == v23)
          {
            if (v21[2] == a1 && v21[3] == a2)
            {
LABEL_73:
              v31 = (const char *)v21[4];
              v32 = strlen(v31);
              if (v32 > 0x7FFFFFFFFFFFFFF7)
                sub_20AEC0138();
              v33 = v32;
              if (v32 >= 0x17)
              {
                v38 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v32 | 7) != 0x17)
                  v38 = v32 | 7;
                v39 = v38 + 1;
                p_dst = operator new(v38 + 1);
                __dst.__r_.__value_.__l.__size_ = v33;
                __dst.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v32;
                p_dst = &__dst;
                if (!v32)
                {
LABEL_86:
                  p_dst[v33] = 0;
                  goto LABEL_66;
                }
              }
              memmove(p_dst, v31, v33);
              goto LABEL_86;
            }
          }
          else
          {
            if (v23 >= qword_25463CC38)
              v23 %= (unint64_t)qword_25463CC38;
            if (v23 != v19)
              break;
          }
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
    }
  }
LABEL_55:
  v42 = 0;
  sub_20AEF7138(v41, "ratio<");
  std::to_string(&v43, a1);
  v45.i64[0] = (uint64_t)v41;
  v45.i64[1] = (uint64_t)&v43;
  v46 = (const char *)v41;
  *(_QWORD *)&v47 = &v43;
  *((_QWORD *)&v47 + 1) = &v43;
  if (v42 == -1)
    sub_20AECFAB8();
  v44 = &v45;
  ((void (*)(int64x2_t **, _DWORD *))off_24C41FF68[v42])(&v44, v41);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v45.i64[0] = (uint64_t)v41;
  v45.i64[1] = (uint64_t)",";
  v46 = (const char *)v41;
  *(_QWORD *)&v47 = ",";
  *((_QWORD *)&v47 + 1) = ",";
  if (v42 == -1)
    sub_20AECFAB8();
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  ((void (*)(std::string *, _DWORD *))off_24C41FF80[v42])(&v43, v41);
  std::to_string(&v43, a2);
  v45.i64[0] = (uint64_t)v41;
  v45.i64[1] = (uint64_t)&v43;
  v46 = (const char *)v41;
  *(_QWORD *)&v47 = &v43;
  *((_QWORD *)&v47 + 1) = &v43;
  if (v42 == -1)
    sub_20AECFAB8();
  v44 = &v45;
  ((void (*)(int64x2_t **, _DWORD *))off_24C41FF68[v42])(&v44, v41);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v45.i64[0] = (uint64_t)v41;
  v45.i64[1] = (uint64_t)">";
  v46 = (const char *)v41;
  *(_QWORD *)&v47 = ">";
  *((_QWORD *)&v47 + 1) = ">";
  if (v42 == -1)
    sub_20AECFAB8();
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  ((void (*)(std::string *, _DWORD *))off_24C41FF80[v42])(&v43, v41);
  if (v42 == -1)
    sub_20AECFAB8();
  v45.i64[0] = (uint64_t)&v43;
  ((void (*)(std::string *__return_ptr, int64x2_t *, _DWORD *))off_24C41FF98[v42])(&__dst, &v45, v41);
  if (v42 != -1)
    ((void (*)(int64x2_t *, _DWORD *))off_24C41FF50[v42])(&v45, v41);
LABEL_66:
  v26 = std::string::append(&__dst, "seconds", 7uLL);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  a3[2] = *((_QWORD *)&v26->__r_.__value_.__l + 2);
  *(_OWORD *)a3 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20B52CDD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CC20);
  _Unwind_Resume(a1);
}

void sub_20B52CDEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CC28);
  _Unwind_Resume(a1);
}

void sub_20B52CE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B52CE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B52CE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20B52CE50);
}

uint64_t *sub_20B52CE84(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = MEMORY[0x24BEDB7F0];
    v4 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v2 = *MEMORY[0x24BEDB7F0];
    v5 = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v2 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 64);
    *(_QWORD *)(v2 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v2 + 16) = v5;
    if (*(char *)(v2 + 111) < 0)
      operator delete(*(void **)(v2 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v2 + 128);
    MEMORY[0x20BD3583C](v2, 0x10B2C40EED050F3);
  }
  return a1;
}

uint64_t sub_20B52CF30(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  __int128 __dst;
  unint64_t v11;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v11 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v11) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  *((_BYTE *)p_dst + v5) = 0;
  sub_20B206D10(a1, &__dst, 24);
  if (SHIBYTE(v11) < 0)
    operator delete((void *)__dst);
  return a1;
}

void sub_20B52D008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20B52D024(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_24C40C318;
  v7 = (_QWORD *)operator new();
  *v7 = &unk_24C40C3C0;
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &unk_24C40C370;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (!v9)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
LABEL_5:
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v12;
    v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v13 <= 0x3F)
      goto LABEL_6;
LABEL_11:
    switch(v13)
    {
      case 0x40u:
        return sub_20B52DA1C(a1, a2, a3);
      case 0x80u:
        v20 = (char *)memchr(a2, 10, a3 - a2);
        if (v20)
          v21 = v20;
        else
          v21 = a3;
        if (v21 == a2)
        {
          v22 = (_QWORD *)operator new();
          v23 = *(_QWORD *)(a1 + 56);
          v24 = *(_QWORD *)(v23 + 8);
          *v22 = &unk_24C40C3C0;
          v22[1] = v24;
          *(_QWORD *)(v23 + 8) = v22;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          if (v21 != a3)
            ++v21;
          if (v21 == a3)
            return a3;
        }
        else
        {
          sub_20B52D884(a1, (unsigned __int8 *)a2, v21);
          if (v21 != a3)
            ++v21;
          if (v21 == a3)
            return a3;
        }
        v37 = *(_QWORD *)(a1 + 56);
        do
        {
          v47 = (char *)memchr(v21, 10, a3 - v21);
          if (v47)
            v48 = v47;
          else
            v48 = a3;
          if (v48 == v21)
          {
            v38 = (_QWORD *)operator new();
            v39 = *(_QWORD *)(a1 + 56);
            v40 = *(_QWORD *)(v39 + 8);
            *v38 = &unk_24C40C3C0;
            v38[1] = v40;
            *(_QWORD *)(v39 + 8) = v38;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            sub_20B52D884(a1, (unsigned __int8 *)v21, v48);
          }
          v41 = (_QWORD *)operator new();
          v42 = *(_QWORD *)(v37 + 8);
          v41[1] = *(_QWORD *)(v12 + 8);
          v41[2] = v42;
          *v41 = &unk_24C40C930;
          *(_QWORD *)(v12 + 8) = v41;
          *(_QWORD *)(v37 + 8) = 0;
          v43 = (_QWORD *)operator new();
          v44 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *v43 = &unk_24C40C3C0;
          v43[1] = v44;
          *(_QWORD *)(v37 + 8) = v43;
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
          v45 = (_QWORD *)operator new();
          v46 = *(_QWORD *)(v37 + 8);
          *v45 = &unk_24C40C978;
          v45[1] = v46;
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v45;
          v37 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(a1 + 56) = v37;
          if (v48 == a3)
            v21 = v48;
          else
            v21 = v48 + 1;
        }
        while (v21 != a3);
        break;
      case 0x100u:
        v14 = (char *)memchr(a2, 10, a3 - a2);
        if (v14)
          v15 = v14;
        else
          v15 = a3;
        if (v15 == a2)
        {
          v16 = (_QWORD *)operator new();
          v17 = *(_QWORD *)(a1 + 56);
          v18 = *(_QWORD *)(v17 + 8);
          *v16 = &unk_24C40C3C0;
          v16[1] = v18;
          *(_QWORD *)(v17 + 8) = v16;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          if (v15 != a3)
            ++v15;
          if (v15 == a3)
            return a3;
        }
        else
        {
          sub_20B52DA1C(a1, a2, v15);
          if (v15 != a3)
            ++v15;
          if (v15 == a3)
            return a3;
        }
        v25 = *(_QWORD *)(a1 + 56);
        do
        {
          v35 = (char *)memchr(v15, 10, a3 - v15);
          if (v35)
            v36 = v35;
          else
            v36 = a3;
          if (v36 == v15)
          {
            v26 = (_QWORD *)operator new();
            v27 = *(_QWORD *)(a1 + 56);
            v28 = *(_QWORD *)(v27 + 8);
            *v26 = &unk_24C40C3C0;
            v26[1] = v28;
            *(_QWORD *)(v27 + 8) = v26;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            sub_20B52DA1C(a1, v15, v36);
          }
          v29 = (_QWORD *)operator new();
          v30 = *(_QWORD *)(v25 + 8);
          v29[1] = *(_QWORD *)(v12 + 8);
          v29[2] = v30;
          *v29 = &unk_24C40C930;
          *(_QWORD *)(v12 + 8) = v29;
          *(_QWORD *)(v25 + 8) = 0;
          v31 = (_QWORD *)operator new();
          v32 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *v31 = &unk_24C40C3C0;
          v31[1] = v32;
          *(_QWORD *)(v25 + 8) = v31;
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
          v33 = (_QWORD *)operator new();
          v34 = *(_QWORD *)(v25 + 8);
          *v33 = &unk_24C40C978;
          v33[1] = v34;
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v33;
          v25 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(a1 + 56) = v25;
          if (v36 == a3)
            v15 = v36;
          else
            v15 = v36 + 1;
        }
        while (v15 != a3);
        break;
      default:
        goto LABEL_62;
    }
    return a3;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
    goto LABEL_11;
LABEL_6:
  if (!v13)
    return sub_20B52D5C8(a1, a2, a3);
  if (v13 != 16)
  {
    if (v13 != 32)
LABEL_62:
      sub_20B0A8028();
    return sub_20B52DA1C(a1, a2, a3);
  }
  return sub_20B52D884(a1, (unsigned __int8 *)a2, a3);
}

void sub_20B52D580(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20B52D5AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *sub_20B52D5C8(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = a2;
  while (1)
  {
    v8 = v7;
    v7 = sub_20B52DBB4(a1, v7, a3);
    if (v8 == v7)
      break;
LABEL_2:
    if (v7 == v8)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(a1 + 28);
  v11 = sub_20B52DF18(a1, v8, a3);
  if (v8 != v11)
  {
    v7 = sub_20B52E4EC(a1, v11, a3, v9, v10 + 1, *(_DWORD *)(a1 + 28) + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 != a2)
  {
    if (v8 != a3)
      goto LABEL_14;
    return a3;
  }
  v12 = (_QWORD *)operator new();
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(v13 + 8);
  *v12 = &unk_24C40C3C0;
  v12[1] = v14;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  if (v8 != a3)
  {
LABEL_14:
    if (*v8 != 124)
      return v8;
    v21 = *(_QWORD *)(a1 + 56);
    v22 = v8 + 1;
    v23 = v8 + 1;
    while (1)
    {
      v8 = v23;
      v23 = sub_20B52DBB4(a1, v23, a3);
      if (v8 == v23)
      {
        v24 = *(_QWORD *)(a1 + 56);
        v25 = *(_DWORD *)(a1 + 28);
        v26 = sub_20B52DF18(a1, v8, a3);
        if (v8 == v26)
        {
LABEL_11:
          if (v8 == v22)
          {
            v27 = (_QWORD *)operator new();
            v28 = *(_QWORD *)(a1 + 56);
            v29 = *(_QWORD *)(v28 + 8);
            *v27 = &unk_24C40C3C0;
            v27[1] = v29;
            *(_QWORD *)(v28 + 8) = v27;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          v15 = (_QWORD *)operator new();
          v16 = *(_QWORD *)(v21 + 8);
          v15[1] = *(_QWORD *)(v6 + 8);
          v15[2] = v16;
          *v15 = &unk_24C40C930;
          *(_QWORD *)(v6 + 8) = v15;
          *(_QWORD *)(v21 + 8) = 0;
          v17 = (_QWORD *)operator new();
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *v17 = &unk_24C40C3C0;
          v17[1] = v18;
          *(_QWORD *)(v21 + 8) = v17;
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
          v19 = (_QWORD *)operator new();
          v20 = *(_QWORD *)(v21 + 8);
          *v19 = &unk_24C40C978;
          v19[1] = v20;
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(v21 + 8);
          if (v8 == a3)
            return a3;
          goto LABEL_14;
        }
        v23 = sub_20B52E4EC(a1, v26, a3, v24, v25 + 1, *(_DWORD *)(a1 + 28) + 1);
      }
      if (v23 == v8)
        goto LABEL_11;
    }
  }
  return a3;
}

char *sub_20B52D884(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v3;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2;
  if (a2 == (unsigned __int8 *)a3)
    return (char *)a2;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_24C40C468;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)a3)
  {
    while (v3 != (unsigned __int8 *)a3)
    {
      v10 = (char *)v3;
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = (unsigned __int8 *)sub_20B530788(a1, v10, a3);
      if (v10 != (char *)v13)
      {
        v3 = sub_20B530A8C(a1, v13, (unsigned __int8 *)a3, v11, v12 + 1, *(_DWORD *)(a1 + 28) + 1);
        if (v10 != (char *)v3)
          continue;
      }
      if (v10 + 1 != a3 || *v10 != 36)
        sub_20B0ADA64();
      v14 = operator new();
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)v14 = &unk_24C40C4B0;
      *(_QWORD *)(v14 + 8) = v17;
      *(_BYTE *)(v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

char *sub_20B52DA1C(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = sub_20B531050(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_12;
  do
  {
    v8 = v7;
    v7 = sub_20B531050(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
LABEL_12:
    sub_20B0ADA64();
  if (v8 == a3)
    return a3;
  while (*v8 == 124)
  {
    v9 = *(_QWORD *)(a1 + 56);
    v10 = v8 + 1;
    v11 = sub_20B531050(a1, v8 + 1, a3);
    if (v8 + 1 == v11)
      goto LABEL_12;
    do
    {
      v8 = v11;
      v11 = sub_20B531050(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10)
      goto LABEL_12;
    v12 = (_QWORD *)operator new();
    v13 = *(_QWORD *)(v9 + 8);
    v12[1] = *(_QWORD *)(v6 + 8);
    v12[2] = v13;
    *v12 = &unk_24C40C930;
    *(_QWORD *)(v6 + 8) = v12;
    *(_QWORD *)(v9 + 8) = 0;
    v14 = (_QWORD *)operator new();
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *v14 = &unk_24C40C3C0;
    v14[1] = v15;
    *(_QWORD *)(v9 + 8) = v14;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v16 = (_QWORD *)operator new();
    v17 = *(_QWORD *)(v9 + 8);
    *v16 = &unk_24C40C978;
    v16[1] = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
    if (v8 == a3)
      return a3;
  }
  return v8;
}

char *sub_20B52DBB4(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  int v7;
  char *v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  std::locale v21[3];
  int v22;
  int v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v16 = a2[1];
        if (v16 == 66)
        {
          v17 = operator new();
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v17 = &unk_24C40C4F8;
          *(_QWORD *)(v17 + 8) = v19;
          std::locale::locale((std::locale *)(v17 + 16), (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v17 + 40) = 1;
        }
        else
        {
          if (v16 != 98)
            return v3;
          v17 = operator new();
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v17 = &unk_24C40C4F8;
          *(_QWORD *)(v17 + 8) = v18;
          std::locale::locale((std::locale *)(v17 + 16), (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v17 + 40) = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v17;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94)
      return v3;
    v10 = operator new();
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = (char *)&unk_24C40C458;
LABEL_17:
    *(_QWORD *)v10 = v14 + 16;
    *(_QWORD *)(v10 + 8) = v13;
    *(_BYTE *)(v10 + 16) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    v10 = operator new();
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = (char *)&unk_24C40C4A0;
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3)
    return v3;
  v7 = a2[2];
  if (v7 == 33)
  {
    sub_20B0A82A4((uint64_t)v21);
    v22 = *(_DWORD *)(a1 + 24);
    v8 = (char *)sub_20B52D024(v21, v3 + 3, a3);
    v20 = v23;
    sub_20B0A8310(a1, (uint64_t)v21, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += v20;
    if (v8 == a3 || *v8 != 41)
      sub_20B0A83D8();
    goto LABEL_27;
  }
  if (v7 != 61)
    return v3;
  sub_20B0A82A4((uint64_t)v21);
  v22 = *(_DWORD *)(a1 + 24);
  v8 = (char *)sub_20B52D024(v21, v3 + 3, a3);
  v9 = v23;
  sub_20B0A8310(a1, (uint64_t)v21, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v9;
  if (v8 == a3 || *v8 != 41)
    sub_20B0A83D8();
LABEL_27:
  sub_20B0A7CC8(v21);
  return v8 + 1;
}

void sub_20B52DEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_20B0A7CC8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B52DEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_20B0A7CC8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B52DEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_20B0A7CC8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B52DF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_20B0A7CC8(&a9);
  _Unwind_Resume(a1);
}

char *sub_20B52DF18(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v5;
  char *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v5 = *a2;
  v7 = a2;
  switch(*a2)
  {
    case '$':
    case ')':
    case ']':
    case '^':
    case '|':
    case '}':
      return v7;
    case '(':
      if (a2 + 1 == a3)
        goto LABEL_57;
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        ++*(_DWORD *)(a1 + 36);
        v12 = (char *)sub_20B52D5C8(a1, a2 + 3, a3);
        if (v12 != a3 && *v12 == 41)
        {
          --*(_DWORD *)(a1 + 36);
          return v12 + 1;
        }
LABEL_57:
        sub_20B0A83D8();
      }
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v17 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v16 = operator new();
        v17 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v17;
        v18 = *(_QWORD *)(a1 + 56);
        v19 = *(_QWORD *)(v18 + 8);
        *(_QWORD *)v16 = &unk_24C40C7C8;
        *(_QWORD *)(v16 + 8) = v19;
        *(_DWORD *)(v16 + 16) = v17;
        *(_QWORD *)(v18 + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v20 = (char *)sub_20B52D5C8(a1, v3 + 1, a3);
      if (v20 == a3)
        goto LABEL_57;
      v3 = v20;
      if (*v20 != 41)
        goto LABEL_57;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v21 = operator new();
        v22 = *(_QWORD *)(a1 + 56);
        v23 = *(_QWORD *)(v22 + 8);
        *(_QWORD *)v21 = &unk_24C40C810;
        *(_QWORD *)(v21 + 8) = v23;
        *(_DWORD *)(v21 + 16) = v17;
        *(_QWORD *)(v22 + 8) = v21;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      return v3 + 1;
    case '*':
    case '+':
    case '?':
    case '{':
      sub_20B0A9920();
    case '.':
      v9 = (_QWORD *)operator new();
      v10 = *(_QWORD *)(a1 + 56);
      v11 = *(_QWORD *)(v10 + 8);
      *v9 = &unk_24C40C588;
      v9[1] = v11;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v3 + 1;
    case '[':
      return sub_20B52EEDC(a1, a2, a3);
    case '\\':
      v7 = a2;
      if (v5 != 92)
        return v7;
      v13 = (unsigned __int8 *)(a2 + 1);
      if (a2 + 1 == a3)
        sub_20B0A9A04();
      v14 = *v13;
      v15 = (v14 - 48);
      if (v14 != 48)
      {
        if ((v14 - 49) <= 8)
        {
          v7 = v3 + 2;
          if (v3 + 2 == a3)
          {
            v7 = a3;
          }
          else
          {
            while (1)
            {
              v24 = *v7;
              if ((v24 - 48) > 9)
                break;
              if (v15 >= 0x19999999)
                goto LABEL_58;
              ++v7;
              LODWORD(v15) = v24 + 10 * v15 - 48;
              if (v7 == a3)
              {
                v7 = a3;
                break;
              }
            }
            if (!(_DWORD)v15)
LABEL_58:
              sub_20B0A9BD4();
          }
          if (v15 > *(_DWORD *)(a1 + 28))
            goto LABEL_58;
          sub_20B0A9C20(a1, v15);
          if (v7 != (char *)v13)
            return v7;
          LOBYTE(v14) = *v13;
        }
        switch((char)v14)
        {
          case 'D':
            v25 = operator new();
            sub_20B0AA92C(v25, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
            goto LABEL_49;
          case 'S':
            v25 = operator new();
            sub_20B0AA92C(v25, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
            goto LABEL_53;
          case 'W':
            v27 = operator new();
            sub_20B0AA92C(v27, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
            goto LABEL_51;
          case 'd':
            v25 = operator new();
            sub_20B0AA92C(v25, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_49:
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v25;
            *(_QWORD *)(a1 + 56) = v25;
            v28 = *(_DWORD *)(v25 + 160) | 0x400;
            goto LABEL_54;
          case 's':
            v25 = operator new();
            sub_20B0AA92C(v25, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_53:
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v25;
            *(_QWORD *)(a1 + 56) = v25;
            v28 = *(_DWORD *)(v25 + 160) | 0x4000;
LABEL_54:
            *(_DWORD *)(v25 + 160) = v28;
            break;
          case 'w':
            v27 = operator new();
            sub_20B0AA92C(v27, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_51:
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v27;
            *(_QWORD *)(a1 + 56) = v27;
            *(_DWORD *)(v27 + 160) |= 0x500u;
            sub_20B0AA4B4(v27, 95);
            break;
          default:
            v26 = sub_20B52FA00(a1, (unsigned __int8 *)v3 + 1, (unsigned __int8 *)a3, 0);
            if (v13 == v26)
              return v3;
            else
              return (char *)v26;
        }
        return v3 + 2;
      }
      sub_20B0A9A50(a1, v15);
      return v3 + 2;
    default:
      sub_20B0A9A50(a1, (char)v5);
      return v3 + 1;
  }
}

void sub_20B52E4B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

char *sub_20B52E4EC(uint64_t a1, char *a2, char *a3, uint64_t a4, int a5, int a6)
{
  char *v6;
  int v11;
  int v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char *v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  char *v66;
  int v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;

  v6 = a2;
  if (a2 == a3)
    return v6;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = *a2;
  if (v12 <= 62)
  {
    if (v12 == 42)
    {
      v13 = a2 + 1;
      if (v11)
        v29 = 1;
      else
        v29 = v13 == a3;
      if (!v29 && *v13 == 63)
      {
        v30 = (_QWORD *)operator new();
        v31 = *(_QWORD *)(a1 + 56);
        v32 = *(_QWORD *)(v31 + 8);
        *v30 = &unk_24C40C3C0;
        v30[1] = v32;
        *(_QWORD *)(v31 + 8) = 0;
        v17 = operator new();
        v33 = *(_DWORD *)(a1 + 32);
        *(_QWORD *)(v17 + 16) = v30;
        v34 = *(_QWORD *)(a4 + 8);
        *(_QWORD *)v17 = &unk_24C40C858;
        *(_QWORD *)(v17 + 8) = v34;
        *(_OWORD *)(v17 + 24) = xmmword_20B611310;
        *(_DWORD *)(v17 + 40) = v33;
        *(_DWORD *)(v17 + 44) = a5;
        *(_DWORD *)(v17 + 48) = a6;
        *(_BYTE *)(v17 + 52) = 0;
        *(_QWORD *)(a4 + 8) = 0;
        v20 = (_QWORD *)operator new();
        goto LABEL_40;
      }
      v48 = (_QWORD *)operator new();
      v49 = *(_QWORD *)(a1 + 56);
      v50 = *(_QWORD *)(v49 + 8);
      *v48 = &unk_24C40C3C0;
      v48[1] = v50;
      *(_QWORD *)(v49 + 8) = 0;
      v44 = operator new();
      v51 = *(_DWORD *)(a1 + 32);
      v52 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v44 + 16) = v48;
      *(_QWORD *)v44 = &unk_24C40C858;
      *(_QWORD *)(v44 + 8) = v52;
      *(_OWORD *)(v44 + 24) = xmmword_20B611310;
      *(_DWORD *)(v44 + 40) = v51;
      *(_DWORD *)(v44 + 44) = a5;
      *(_DWORD *)(v44 + 48) = a6;
      *(_BYTE *)(v44 + 52) = 1;
      *(_QWORD *)(a4 + 8) = 0;
      v47 = (_QWORD *)operator new();
      goto LABEL_44;
    }
    if (v12 == 43)
    {
      v13 = a2 + 1;
      if (!v11 && v13 != a3 && *v13 == 63)
      {
        v14 = (_QWORD *)operator new();
        v15 = *(_QWORD *)(a1 + 56);
        v16 = *(_QWORD *)(v15 + 8);
        *v14 = &unk_24C40C3C0;
        v14[1] = v16;
        *(_QWORD *)(v15 + 8) = 0;
        v17 = operator new();
        v18 = *(_DWORD *)(a1 + 32);
        *(_QWORD *)(v17 + 16) = v14;
        v19 = *(_QWORD *)(a4 + 8);
        *(_QWORD *)v17 = &unk_24C40C858;
        *(_QWORD *)(v17 + 8) = v19;
        *(_OWORD *)(v17 + 24) = xmmword_20B60C780;
        *(_DWORD *)(v17 + 40) = v18;
        *(_DWORD *)(v17 + 44) = a5;
        *(_DWORD *)(v17 + 48) = a6;
        *(_BYTE *)(v17 + 52) = 0;
        *(_QWORD *)(a4 + 8) = 0;
        v20 = (_QWORD *)operator new();
LABEL_40:
        v6 += 2;
LABEL_71:
        *v20 = &unk_24C40C8E8;
        v20[1] = v17;
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v20;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(v17 + 16);
        *(_QWORD *)(a4 + 8) = v17;
        ++*(_DWORD *)(a1 + 32);
        return v6;
      }
      v41 = (_QWORD *)operator new();
      v42 = *(_QWORD *)(a1 + 56);
      v43 = *(_QWORD *)(v42 + 8);
      *v41 = &unk_24C40C3C0;
      v41[1] = v43;
      *(_QWORD *)(v42 + 8) = 0;
      v44 = operator new();
      v45 = *(_DWORD *)(a1 + 32);
      v46 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v44 + 16) = v41;
      *(_QWORD *)v44 = &unk_24C40C858;
      *(_QWORD *)(v44 + 8) = v46;
      *(_OWORD *)(v44 + 24) = xmmword_20B60C780;
      *(_DWORD *)(v44 + 40) = v45;
      *(_DWORD *)(v44 + 44) = a5;
      *(_DWORD *)(v44 + 48) = a6;
      *(_BYTE *)(v44 + 52) = 1;
      *(_QWORD *)(a4 + 8) = 0;
      v47 = (_QWORD *)operator new();
      goto LABEL_44;
    }
    return v6;
  }
  if (v12 == 63)
  {
    v13 = a2 + 1;
    if (v11)
      v35 = 1;
    else
      v35 = v13 == a3;
    if (!v35 && *v13 == 63)
    {
      v36 = (_QWORD *)operator new();
      v37 = *(_QWORD *)(a1 + 56);
      v38 = *(_QWORD *)(v37 + 8);
      *v36 = &unk_24C40C3C0;
      v36[1] = v38;
      *(_QWORD *)(v37 + 8) = 0;
      v17 = operator new();
      v39 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v17 + 16) = v36;
      v40 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)v17 = &unk_24C40C858;
      *(_QWORD *)(v17 + 8) = v40;
      *(_OWORD *)(v17 + 24) = xmmword_20B611300;
      *(_DWORD *)(v17 + 40) = v39;
      *(_DWORD *)(v17 + 44) = a5;
      *(_DWORD *)(v17 + 48) = a6;
      *(_BYTE *)(v17 + 52) = 0;
      *(_QWORD *)(a4 + 8) = 0;
      v20 = (_QWORD *)operator new();
      goto LABEL_40;
    }
    v53 = (_QWORD *)operator new();
    v54 = *(_QWORD *)(a1 + 56);
    v55 = *(_QWORD *)(v54 + 8);
    *v53 = &unk_24C40C3C0;
    v53[1] = v55;
    *(_QWORD *)(v54 + 8) = 0;
    v44 = operator new();
    v56 = *(_DWORD *)(a1 + 32);
    v57 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(v44 + 16) = v53;
    *(_QWORD *)v44 = &unk_24C40C858;
    *(_QWORD *)(v44 + 8) = v57;
    *(_OWORD *)(v44 + 24) = xmmword_20B611300;
    *(_DWORD *)(v44 + 40) = v56;
    *(_DWORD *)(v44 + 44) = a5;
    *(_DWORD *)(v44 + 48) = a6;
    *(_BYTE *)(v44 + 52) = 1;
    *(_QWORD *)(a4 + 8) = 0;
    v47 = (_QWORD *)operator new();
LABEL_44:
    *v47 = &unk_24C40C8E8;
    v47[1] = v44;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v47;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v44 + 16);
    *(_QWORD *)(a4 + 8) = v44;
    ++*(_DWORD *)(a1 + 32);
    return v13;
  }
  if (v12 == 123)
  {
    v21 = a2 + 1;
    if (a2 + 1 == a3)
      goto LABEL_73;
    v22 = *v21;
    if ((v22 & 0xF8) != 0x30 && (v22 & 0xFE) != 0x38)
      goto LABEL_73;
    v23 = v22 - 48;
    v24 = a2 + 2;
    if (a2 + 2 == a3)
    {
LABEL_19:
      v24 = a3;
    }
    else
    {
      while (1)
      {
        v25 = *v24;
        if ((v25 & 0xF8) != 0x30 && (v25 & 0xFE) != 0x38)
          break;
        if (v23 >= 214748364)
          goto LABEL_73;
        v23 = v25 + 10 * v23 - 48;
        if (++v24 == a3)
          goto LABEL_19;
      }
    }
    if (v24 == v21)
      goto LABEL_73;
    if (v24 != a3)
    {
      v26 = *v24;
      if (v26 != 44)
      {
        if (v26 == 125)
        {
          v6 = v24 + 1;
          if (v11 || v6 == a3 || *v6 != 63)
          {
            v60 = (_QWORD *)operator new();
            v61 = *(_QWORD *)(a1 + 56);
            v62 = *(_QWORD *)(v61 + 8);
            *v60 = &unk_24C40C3C0;
            v60[1] = v62;
            *(_QWORD *)(v61 + 8) = 0;
            v17 = operator new();
            v63 = *(_DWORD *)(a1 + 32);
            v64 = *(_QWORD *)(a4 + 8);
            *(_QWORD *)v17 = &unk_24C40C858;
            *(_QWORD *)(v17 + 8) = v64;
            *(_QWORD *)(v17 + 16) = v60;
            *(_QWORD *)(v17 + 24) = v23;
            *(_QWORD *)(v17 + 32) = v23;
            *(_DWORD *)(v17 + 40) = v63;
            *(_DWORD *)(v17 + 44) = a5;
            *(_DWORD *)(v17 + 48) = a6;
            *(_BYTE *)(v17 + 52) = 1;
            *(_QWORD *)(a4 + 8) = 0;
            v20 = (_QWORD *)operator new();
            goto LABEL_71;
          }
          v27 = v23;
          v6 = v24 + 2;
          v28 = v23;
          goto LABEL_68;
        }
        goto LABEL_73;
      }
      v58 = v24 + 1;
      if (v24 + 1 == a3)
        goto LABEL_73;
      v59 = *v58;
      if (v59 == 125)
      {
        v6 = v24 + 2;
        if (v11 || v6 == a3 || *v6 != 63)
        {
          v68 = (_QWORD *)operator new();
          v69 = *(_QWORD *)(a1 + 56);
          v70 = *(_QWORD *)(v69 + 8);
          *v68 = &unk_24C40C3C0;
          v68[1] = v70;
          *(_QWORD *)(v69 + 8) = 0;
          v17 = operator new();
          v71 = *(_DWORD *)(a1 + 32);
          v72 = *(_QWORD *)(a4 + 8);
          *(_QWORD *)v17 = &unk_24C40C858;
          *(_QWORD *)(v17 + 8) = v72;
          *(_QWORD *)(v17 + 16) = v68;
          *(_QWORD *)(v17 + 24) = v23;
          *(_QWORD *)(v17 + 32) = -1;
          *(_DWORD *)(v17 + 40) = v71;
          *(_DWORD *)(v17 + 44) = a5;
          *(_DWORD *)(v17 + 48) = a6;
          *(_BYTE *)(v17 + 52) = 1;
          *(_QWORD *)(a4 + 8) = 0;
          v20 = (_QWORD *)operator new();
          goto LABEL_71;
        }
        v6 = v24 + 3;
        sub_20B0AD14C(a1, v23, a4, a5, a6);
        return v6;
      }
      if ((v59 & 0xF8) == 0x30 || (v59 & 0xFE) == 0x38)
      {
        v65 = v59 - 48;
        v66 = v24 + 2;
        if (v66 == a3)
        {
LABEL_59:
          v66 = a3;
        }
        else
        {
          while (1)
          {
            v67 = *v66;
            if ((v67 & 0xF8) != 0x30 && (v67 & 0xFE) != 0x38)
              break;
            if (v65 >= 214748364)
              goto LABEL_73;
            v65 = v67 + 10 * v65 - 48;
            if (++v66 == a3)
              goto LABEL_59;
          }
        }
        if (v66 != v58 && v66 != a3 && *v66 == 125)
        {
          if (v65 >= v23)
          {
            v6 = v66 + 1;
            if (v11 || v6 == a3 || *v6 != 63)
            {
              v73 = (_QWORD *)operator new();
              v74 = *(_QWORD *)(a1 + 56);
              v75 = *(_QWORD *)(v74 + 8);
              *v73 = &unk_24C40C3C0;
              v73[1] = v75;
              *(_QWORD *)(v74 + 8) = 0;
              v17 = operator new();
              v76 = *(_DWORD *)(a1 + 32);
              v77 = *(_QWORD *)(a4 + 8);
              *(_QWORD *)v17 = &unk_24C40C858;
              *(_QWORD *)(v17 + 8) = v77;
              *(_QWORD *)(v17 + 16) = v73;
              *(_QWORD *)(v17 + 24) = v23;
              *(_QWORD *)(v17 + 32) = v65;
              *(_DWORD *)(v17 + 40) = v76;
              *(_DWORD *)(v17 + 44) = a5;
              *(_DWORD *)(v17 + 48) = a6;
              *(_BYTE *)(v17 + 52) = 1;
              *(_QWORD *)(a4 + 8) = 0;
              v20 = (_QWORD *)operator new();
              goto LABEL_71;
            }
            v27 = v23;
            v28 = v65;
            v6 = v66 + 2;
LABEL_68:
            sub_20B0AD29C(a1, v27, v28, a4, a5, a6, 0);
            return v6;
          }
LABEL_73:
          sub_20B0AD3F8();
        }
      }
    }
    sub_20B0AD444();
  }
  return v6;
}

void sub_20B52EE44(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *sub_20B52EEDC(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  unint64_t v28;
  char *v29;
  int v30;
  int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  __int128 *v36;
  __int128 *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  _OWORD *v42;
  unint64_t v43;
  __int128 v44;
  void *v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  int v50;
  void **v51;
  _BYTE *v52;
  char *v53;
  _BYTE *v54;
  char *v55;
  char *v56;
  int v57;
  char *v58;
  char v59;
  char *v60;
  char v61;
  uint64_t v62;
  char *v63;
  const char *v64;
  std::regex_traits<char>::char_class_type classname;
  char *v66;
  uint64_t v68;
  void *v69[2];
  int64_t v70;
  void *__p[2];
  unint64_t v72;
  void *__src[2];
  int64_t v74;
  __int128 v75;
  int64_t v76;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_192;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = (uint64_t)(v5 == 94 ? a2 + 2 : a2 + 1);
    v8 = operator new();
    sub_20B0AA92C(v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if ((char *)v7 == a3)
      goto LABEL_192;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v7 == 93)
    {
      sub_20B0AA4B4(v8, 93);
      ++v7;
    }
    if ((char *)v7 == a3)
      goto LABEL_192;
    v68 = 4 - (_QWORD)a3;
    while (1)
    {
      v9 = (_BYTE *)v7;
      if ((char *)v7 == a3)
      {
        v7 = (uint64_t)a3;
        goto LABEL_15;
      }
      v10 = *(unsigned __int8 *)v7;
      v11 = (char *)v7;
      if (v10 == 93)
        goto LABEL_14;
      __p[0] = 0;
      __p[1] = 0;
      v72 = 0;
      v11 = (char *)v7;
      if ((char *)(v7 + 1) == a3 || v10 != 91)
        goto LABEL_60;
      v12 = *(unsigned __int8 *)(v7 + 1);
      if (v12 != 46)
      {
        if (v12 == 58)
        {
          v19 = (char *)(v7 + 2);
          if (a3 - (v9 + 2) < 2)
            goto LABEL_190;
          v20 = v9 - a3;
          v21 = 2;
          while (1)
          {
            v22 = v21 - 2;
            while (v9[v22 + 2] != 58)
            {
              ++v22;
              if (v20 + v22 == -3)
                goto LABEL_190;
            }
            if (v9[v22 + 3] == 93)
              break;
            v21 = v22 + 3;
            if (v20 + v22 == -4)
              goto LABEL_190;
          }
          v34 = (uint64_t)&v9[v22 + 2];
          if ((char *)v34 == a3)
            goto LABEL_190;
          if (v22 >= 0x7FFFFFFFFFFFFFF8)
            sub_20AEC0138();
          v35 = *(_DWORD *)(a1 + 24);
          if (v22 >= 0x17)
          {
            v39 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17)
              v39 = v22 | 7;
            v40 = v39 + 1;
            v36 = (__int128 *)operator new(v39 + 1);
            *((_QWORD *)&v75 + 1) = v22;
            v76 = v40 | 0x8000000000000000;
            *(_QWORD *)&v75 = v36;
          }
          else
          {
            HIBYTE(v76) = v22;
            v36 = &v75;
            if (!v22)
            {
              v37 = &v75;
              goto LABEL_144;
            }
          }
          if (v22 < 0x20)
          {
            v37 = v36;
          }
          else if ((unint64_t)((char *)v36 - v19) < 0x20)
          {
            v37 = v36;
          }
          else
          {
            v37 = (__int128 *)((char *)v36 + (v22 & 0xFFFFFFFFFFFFFFE0));
            v19 += v22 & 0xFFFFFFFFFFFFFFE0;
            v41 = (__int128 *)(v9 + 18);
            v42 = v36 + 1;
            v43 = v22 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v44 = *v41;
              *(v42 - 1) = *(v41 - 1);
              *v42 = v44;
              v41 += 2;
              v42 += 2;
              v43 -= 32;
            }
            while (v43);
            if (v22 == (v22 & 0x7FFFFFFFFFFFFFE0))
              goto LABEL_144;
          }
          do
          {
            v61 = *v19++;
            *(_BYTE *)v37 = v61;
            v37 = (__int128 *)((char *)v37 + 1);
          }
          while (v19 != (char *)v34);
LABEL_144:
          *(_BYTE *)v37 = 0;
          v62 = HIBYTE(v76);
          if (v76 >= 0)
            v63 = (char *)&v75;
          else
            v63 = (char *)v75;
          if (v76 < 0)
            v62 = *((_QWORD *)&v75 + 1);
          (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v63, &v63[v62]);
          if (v76 >= 0)
            v64 = (const char *)&v75;
          else
            v64 = (const char *)v75;
          classname = std::__get_classname(v64, v35 & 1);
          if (SHIBYTE(v76) < 0)
            operator delete((void *)v75);
          if (!classname)
            sub_20B0AC778();
          v59 = 0;
          *(_DWORD *)(v8 + 160) |= classname;
          v7 = (uint64_t)&v9[v22 + 4];
          v53 = v9;
          if ((SHIBYTE(v72) & 0x80000000) == 0)
          {
LABEL_135:
            v11 = v53;
            if ((v59 & 1) == 0)
              goto LABEL_15;
            goto LABEL_14;
          }
          goto LABEL_164;
        }
        if (v12 == 61)
        {
          if ((uint64_t)&a3[-v7 - 2] < 2)
            goto LABEL_190;
          v13 = 0;
          v14 = v7;
          v15 = v68 + v7;
          if (*(_BYTE *)(v7 + 2) == 61)
            goto LABEL_27;
          do
          {
            do
            {
              if (!v15)
LABEL_190:
                sub_20B0ABBF8();
              ++v13;
              v14 = v7 + v13;
              v15 = v68 + v7 + v13;
            }
            while (*(_BYTE *)(v7 + v13 + 2) != 61);
LABEL_27:
            ;
          }
          while (*(_BYTE *)(v14 + 3) != 93);
          v16 = (char *)(v7 + v13 + 2);
          if (v16 == a3)
            goto LABEL_190;
          sub_20B530494((uint64_t)&v75, a1, v7 + 2, v16);
          if (SHIBYTE(v76) < 0)
          {
            v17 = *((_QWORD *)&v75 + 1);
            if (!*((_QWORD *)&v75 + 1))
LABEL_194:
              sub_20B0AC538();
            v18 = (char *)v75;
          }
          else
          {
            v17 = HIBYTE(v76);
            if (!HIBYTE(v76))
              goto LABEL_194;
            v18 = (char *)&v75;
          }
          sub_20B0AC584(a1, (uint64_t)v18, &v18[v17], (uint64_t)__src);
          v45 = (void *)HIBYTE(v74);
          if (v74 < 0)
            v45 = __src[1];
          if (v45)
          {
            v46 = *(_QWORD *)(v8 + 144);
            if (v46 >= *(_QWORD *)(v8 + 152))
            {
              *(_QWORD *)(v8 + 144) = sub_20AEC63D0((char **)(v8 + 136), (uint64_t)__src);
              if (SHIBYTE(v74) < 0)
                goto LABEL_170;
            }
            else
            {
              if (SHIBYTE(v74) < 0)
              {
                sub_20AEC60F4(*(_BYTE **)(v8 + 144), __src[0], (unint64_t)__src[1]);
              }
              else
              {
                v47 = *(_OWORD *)__src;
                *(_QWORD *)(v46 + 16) = v74;
                *(_OWORD *)v46 = v47;
              }
              *(_QWORD *)(v8 + 144) = v46 + 24;
              *(_QWORD *)(v8 + 144) = v46 + 24;
              if (SHIBYTE(v74) < 0)
                goto LABEL_170;
            }
LABEL_162:
            if ((SHIBYTE(v76) & 0x80000000) == 0)
              goto LABEL_163;
          }
          else
          {
            v48 = HIBYTE(v76);
            if (v76 < 0)
              v48 = *((_QWORD *)&v75 + 1);
            if (v48 == 2)
            {
              if (v76 >= 0)
                v66 = (char *)&v75;
              else
                v66 = (char *)v75;
              sub_20B0AC170(v8, *v66, v66[1]);
            }
            else
            {
              if (v48 != 1)
                sub_20B0AC538();
              if (v76 >= 0)
                v49 = (char *)&v75;
              else
                v49 = (char *)v75;
              sub_20B0AA4B4(v8, *v49);
            }
            if ((SHIBYTE(v74) & 0x80000000) == 0)
              goto LABEL_162;
LABEL_170:
            operator delete(__src[0]);
            if ((SHIBYTE(v76) & 0x80000000) == 0)
            {
LABEL_163:
              v59 = 0;
              v7 += v13 + 4;
              v53 = v9;
              if ((SHIBYTE(v72) & 0x80000000) == 0)
                goto LABEL_135;
              goto LABEL_164;
            }
          }
          operator delete((void *)v75);
          goto LABEL_163;
        }
        v11 = (char *)v7;
LABEL_60:
        v7 = *(_DWORD *)(a1 + 24) & 0x1F0;
        v30 = 0;
        goto LABEL_61;
      }
      v23 = (_BYTE *)(v7 + 2);
      if ((uint64_t)&a3[-v7 - 2] < 2)
        goto LABEL_191;
      v24 = (char *)v7;
      v25 = (char *)(v7 + 2);
      v26 = (char *)(v7 + 3);
      if (*v23 != 46)
        break;
LABEL_46:
      if (*v26 != 93)
        goto LABEL_44;
      if (v25 == a3)
LABEL_191:
        sub_20B0ABBF8();
      sub_20B530494((uint64_t)&v75, a1, (uint64_t)v23, v24 + 2);
      if (SHIBYTE(v72) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v75;
      v72 = v76;
      v28 = *((_QWORD *)&v75 + 1);
      if (v76 >= 0)
        v29 = (char *)HIBYTE(v72);
      else
        v29 = (char *)__p[1];
      if ((unint64_t)(v29 - 1) >= 2)
        sub_20B0AC538();
      v11 = v25 + 2;
      v7 = *(_DWORD *)(a1 + 24) & 0x1F0;
      v30 = SHIBYTE(v76);
      if (v76 >= 0)
        v28 = HIBYTE(v72);
      if (v28)
      {
        if (v11 == a3)
          goto LABEL_106;
        goto LABEL_105;
      }
LABEL_61:
      if ((v7 | 0x40) == 0x40)
      {
        v31 = *v11;
        if (v31 == 92)
        {
          v32 = v11 + 1;
          if ((_DWORD)v7)
            v33 = sub_20B530090(a1, v32, a3, (uint64_t *)__p);
          else
            v33 = (char *)sub_20B52FED0(a1, (unsigned __int8 *)v32, (unsigned __int8 *)a3, (uint64_t)__p, v8);
          v11 = v33;
          if (v33 == a3)
            goto LABEL_106;
          goto LABEL_105;
        }
      }
      else
      {
        LOBYTE(v31) = *v11;
      }
      if (v30 < 0)
      {
        v38 = __p[0];
        __p[1] = (void *)1;
        *(_BYTE *)__p[0] = v31;
        v38[1] = 0;
        if (++v11 == a3)
          goto LABEL_106;
      }
      else
      {
        HIBYTE(v72) = 1;
        LOWORD(__p[0]) = v31;
        if (++v11 == a3)
          goto LABEL_106;
      }
LABEL_105:
      v50 = *v11;
      if (v50 != 93)
      {
        v52 = v11 + 1;
        if (v11 + 1 != a3 && v50 == 45 && *v52 != 93)
        {
          __src[0] = 0;
          __src[1] = 0;
          v74 = 0;
          v53 = v11 + 2;
          if (v11 + 2 == a3 || *v52 != 91 || *v53 != 46)
          {
            if ((v7 | 0x40) == 0x40)
            {
              LODWORD(v52) = *v52;
              if ((_DWORD)v52 == 92)
              {
                if ((_DWORD)v7)
                  v60 = sub_20B530090(a1, v11 + 2, a3, (uint64_t *)__src);
                else
                  v60 = (char *)sub_20B52FED0(a1, (unsigned __int8 *)v11 + 2, (unsigned __int8 *)a3, (uint64_t)__src, v8);
                v53 = v60;
                goto LABEL_174;
              }
            }
            else
            {
              LOBYTE(v52) = *v52;
            }
            HIBYTE(v74) = 1;
            LOWORD(__src[0]) = v52;
            goto LABEL_174;
          }
          v54 = v11 + 3;
          if (a3 - (v11 + 3) < 2)
            goto LABEL_193;
          v55 = v11 + 3;
          v56 = v11 + 4;
          if (*v54 == 46)
            goto LABEL_124;
          do
          {
            do
            {
              if (a3 - 5 == v11)
                goto LABEL_193;
              ++v11;
              v55 = v56;
              v57 = *v56++;
            }
            while (v57 != 46);
LABEL_124:
            ;
          }
          while (*v56 != 93);
          if (v55 == a3)
LABEL_193:
            sub_20B0ABBF8();
          sub_20B530494((uint64_t)&v75, a1, (uint64_t)v54, v11 + 3);
          if (SHIBYTE(v74) < 0)
            operator delete(__src[0]);
          v74 = v76;
          *(_OWORD *)__src = v75;
          v58 = (char *)HIBYTE(v76);
          if (v76 < 0)
            v58 = (char *)__src[1];
          if ((unint64_t)(v58 - 1) >= 2)
            sub_20B0AC538();
          v53 = v55 + 2;
LABEL_174:
          v75 = *(_OWORD *)__p;
          v76 = v72;
          __p[1] = 0;
          v72 = 0;
          __p[0] = 0;
          *(_OWORD *)v69 = *(_OWORD *)__src;
          v70 = v74;
          __src[0] = 0;
          __src[1] = 0;
          v74 = 0;
          sub_20B0ABC44(v8, (char *)&v75, (uint64_t)v69);
          if (SHIBYTE(v70) < 0)
          {
            operator delete(v69[0]);
            if (SHIBYTE(v76) < 0)
              goto LABEL_180;
LABEL_176:
            if ((SHIBYTE(v74) & 0x80000000) == 0)
              goto LABEL_177;
LABEL_181:
            operator delete(__src[0]);
            v59 = 1;
            if ((SHIBYTE(v72) & 0x80000000) == 0)
              goto LABEL_135;
          }
          else
          {
            if ((SHIBYTE(v76) & 0x80000000) == 0)
              goto LABEL_176;
LABEL_180:
            operator delete((void *)v75);
            if (SHIBYTE(v74) < 0)
              goto LABEL_181;
LABEL_177:
            v59 = 1;
            if ((SHIBYTE(v72) & 0x80000000) == 0)
              goto LABEL_135;
          }
LABEL_164:
          operator delete(__p[0]);
          v11 = v53;
          if ((v59 & 1) == 0)
            goto LABEL_15;
          goto LABEL_14;
        }
      }
LABEL_106:
      if (SHIBYTE(v72) < 0)
      {
        if (__p[1])
        {
          if (__p[1] == (void *)1)
          {
            v51 = (void **)__p[0];
LABEL_113:
            sub_20B0AA4B4(v8, *(char *)v51);
LABEL_134:
            v59 = 1;
            v53 = v11;
            if ((SHIBYTE(v72) & 0x80000000) == 0)
              goto LABEL_135;
            goto LABEL_164;
          }
          v51 = (void **)__p[0];
LABEL_133:
          sub_20B0AC170(v8, *(char *)v51, *((char *)v51 + 1));
          goto LABEL_134;
        }
        operator delete(__p[0]);
      }
      else if (HIBYTE(v72))
      {
        v51 = __p;
        if (HIBYTE(v72) == 1)
          goto LABEL_113;
        goto LABEL_133;
      }
LABEL_14:
      v7 = (uint64_t)v11;
LABEL_15:
      if (v9 == (_BYTE *)v7)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            sub_20B0AA4B4(v8, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93)
            return v9 + 1;
        }
LABEL_192:
        sub_20B0ABBF8();
      }
    }
    do
    {
LABEL_44:
      if (a3 - 4 == v24)
        goto LABEL_191;
      ++v24;
      v25 = v26;
      v27 = *v26++;
    }
    while (v27 != 46);
    goto LABEL_46;
  }
  return a2;
}

void sub_20B52F8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_20B52FA00(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *result;
  unsigned int v8;
  int v10;
  int v11;
  unsigned __int8 v12;
  char v13;
  unsigned __int8 v14;
  char v15;
  char v16;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = (char)v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        sub_20B0A9A50(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || (char)v4[1] < 65)
        goto LABEL_85;
      v8 = v4[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u)
        goto LABEL_85;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = v8 & 0x1F;
        return v4 + 2;
      }
      else
      {
        sub_20B0A9A50(a1, v8 & 0x1F);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        sub_20B0A9A50(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        sub_20B0A9A50(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        sub_20B0A9A50(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        sub_20B0A9A50(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v10 = v4[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
              goto LABEL_42;
          }
        }
      }
      goto LABEL_85;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_68:
        sub_20B0A9A50(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_42:
      if (v4 + 1 == a3)
        goto LABEL_85;
      v12 = v4[1];
      v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
        goto LABEL_47;
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u)
        goto LABEL_85;
      v13 = -87;
LABEL_47:
      if (v4 + 2 == a3)
        goto LABEL_85;
      v14 = v4[2];
      v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u)
LABEL_85:
          sub_20B0A9A04();
        v15 = -87;
      }
      v16 = v14 + 16 * (v12 + v13) + v15;
      if (!a4)
      {
        sub_20B0A9A50(a1, v16);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v16;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((_DWORD)v6 == 95
        || (v6 & 0x80000000) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 4 * v5) & 0x500) != 0)
      {
        goto LABEL_85;
      }
      if (!a4)
        goto LABEL_68;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = v5;
      return v4 + 1;
  }
  return result;
}

unsigned __int8 *sub_20B52FED0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    sub_20B0A9A04();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      sub_20B0AC7C4(a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      sub_20B0AA4B4(a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = sub_20B52FA00(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

char *sub_20B530090(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  char v5;
  char v7;
  char *v8;
  char v9;
  int v10;
  char v11;

  if (a2 == a3)
LABEL_70:
    sub_20B0A9A04();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        sub_20B0A9A50(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        sub_20B0A9A50(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        sub_20B0A9A50(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        sub_20B0A9A50(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        sub_20B0A9A50(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        sub_20B0A9A50(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        sub_20B0A9A50(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        sub_20B0A9A50(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        sub_20B0A9A50(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

void sub_20B530494(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v4;
  char *v9;
  char *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  const char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char **v23;
  int v24;
  uint64_t v25;
  char **v26;
  size_t v27;
  std::string v28;
  char *__s[2];
  int64_t v30;

  v4 = (unint64_t)&a4[-a3];
  if ((unint64_t)&a4[-a3] >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v4 <= 0x16)
  {
    HIBYTE(v30) = (_BYTE)a4 - a3;
    v9 = (char *)__s;
    if ((char *)a3 != a4)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v16 = v4 | 7;
  v17 = v16 + 1;
  v9 = (char *)operator new(v16 + 1);
  __s[1] = (char *)v4;
  v30 = v17 | 0x8000000000000000;
  __s[0] = v9;
  if ((char *)a3 == a4)
    goto LABEL_13;
LABEL_4:
  if (v4 < 0x20 || (unint64_t)&v9[-a3] < 0x20)
  {
    v10 = v9;
    v11 = (char *)a3;
    do
    {
LABEL_15:
      v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a4);
    goto LABEL_16;
  }
  v10 = &v9[v4 & 0xFFFFFFFFFFFFFFE0];
  v11 = (char *)(a3 + (v4 & 0xFFFFFFFFFFFFFFE0));
  v12 = (__int128 *)(a3 + 16);
  v13 = v9 + 16;
  v14 = v4 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    *v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v4 != (v4 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_15;
LABEL_16:
  *v10 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(v30) < 0)
  {
    if (!__s[1])
      goto LABEL_24;
    v19 = __s[0];
  }
  else
  {
    if (!HIBYTE(v30))
      return;
    v19 = (const char *)__s;
  }
  std::__get_collation_name(&v28, v19);
  *(_OWORD *)a1 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
  v20 = v28.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v28.__r_.__value_.__l + 2);
  v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a1 + 8);
  if (v21)
    goto LABEL_24;
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    v22 = (char *)HIBYTE(v30);
    if (HIBYTE(v30) >= 3u)
      return;
    v23 = __s;
    goto LABEL_32;
  }
  v22 = __s[1];
  if (__s[1] < (char *)3)
  {
    v23 = (char **)__s[0];
LABEL_32:
    (*(void (**)(std::string *__return_ptr, _QWORD, char **, char *))(**(_QWORD **)(a2 + 16) + 32))(&v28, *(_QWORD *)(a2 + 16), v23, &v22[(_QWORD)v23]);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(std::string *)a1 = v28;
    if (*(char *)(a1 + 23) < 0)
    {
      v25 = *(_QWORD *)(a1 + 8);
      if (v25 == 1 || v25 == 12)
      {
        if (__s != (char **)a1)
        {
          if (v30 >= 0)
            v26 = __s;
          else
            v26 = (char **)__s[0];
          if (v30 >= 0)
            v27 = HIBYTE(v30);
          else
            v27 = (size_t)__s[1];
          sub_20AEC8090((void **)a1, v26, v27);
        }
      }
      else
      {
        **(_BYTE **)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
    else
    {
      v24 = *(unsigned __int8 *)(a1 + 23);
      if (v24 == 1 || v24 == 12)
      {
        if (__s != (char **)a1)
        {
          if (SHIBYTE(v30) < 0)
          {
            sub_20AEC7FCC((_QWORD *)a1, __s[0], (size_t)__s[1]);
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)__s;
            *(_QWORD *)(a1 + 16) = v30;
          }
        }
      }
      else
      {
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 23) = 0;
      }
    }
  }
LABEL_24:
  if (SHIBYTE(v30) < 0)
    operator delete(__s[0]);
}

void sub_20B530744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20B530788(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a2 == a3)
    goto LABEL_4;
  v7 = a2 + 1;
  v6 = *a2;
  if (a2 + 1 == a3 && v6 == 36)
    goto LABEL_4;
  if ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0)
  {
    sub_20B0A9A50(a1, (char)v6);
  }
  else
  {
    if (v7 != a3 && v6 == 92)
    {
      v15 = *v7;
      if ((v15 - 36) <= 0x3A && ((1 << (v15 - 36)) & 0x580000000000441) != 0)
      {
        sub_20B0A9A50(a1, (char)v15);
        v7 = a2 + 2;
        goto LABEL_5;
      }
LABEL_4:
      v7 = sub_20B52EEDC(a1, a2, a3);
      goto LABEL_5;
    }
    if (v6 != 46)
      goto LABEL_4;
    v16 = (_QWORD *)operator new();
    v17 = *(_QWORD *)(a1 + 56);
    v18 = *(_QWORD *)(v17 + 8);
    *v16 = &unk_24C40C9C0;
    v16[1] = v18;
    *(_QWORD *)(v17 + 8) = v16;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
LABEL_5:
  if (a2 == a3 || a2 != v7 || a2 + 1 == a3 || *a2 != 92)
    return v7;
  v8 = a2[1];
  if (v8 == 40)
  {
    v9 = (unsigned __int8 *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new();
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)v10 = &unk_24C40C7C8;
      *(_QWORD *)(v10 + 8) = v13;
      *(_DWORD *)(v10 + 16) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (unsigned __int8 *)a3)
        goto LABEL_39;
      v20 = v9;
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_DWORD *)(a1 + 28);
      v23 = (unsigned __int8 *)sub_20B530788(a1, v20, a3);
      if (v20 == v23)
        break;
      v9 = sub_20B530A8C(a1, v23, (unsigned __int8 *)a3, v21, v22 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    while (v20 != v9);
    if (v20 + 1 == (unsigned __int8 *)a3 || *v20 != 92 || v20[1] != 41)
LABEL_39:
      sub_20B0A83D8();
    v7 = (char *)&v20[2 * (v20[1] == 41)];
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v24 = operator new();
      v25 = *(_QWORD *)(a1 + 56);
      v26 = *(_QWORD *)(v25 + 8);
      *(_QWORD *)v24 = &unk_24C40C810;
      *(_QWORD *)(v24 + 8) = v26;
      *(_DWORD *)(v24 + 16) = v11;
      *(_QWORD *)(v25 + 8) = v24;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return v7;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    sub_20B0A9BD4();
  sub_20B0A9C20(a1, v8 - 48);
  return a2 + 2;
}

unsigned __int8 *sub_20B530A8C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;
  int v30;
  _BOOL4 v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  if (a2 == a3)
    return a2;
  v11 = *a2;
  if (v11 != 42)
  {
    v19 = a3;
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v20 = &a2[2 * (a2[1] == 123)];
      if (v20 == a3)
        goto LABEL_47;
      v21 = *v20;
      if ((v21 & 0xF8) != 0x30 && (v21 & 0xFE) != 0x38)
        goto LABEL_47;
      v22 = v21 - 48;
      v23 = v20 + 1;
      if (v20 + 1 == a3)
      {
LABEL_15:
        v23 = a3;
      }
      else
      {
        while (1)
        {
          v24 = *v23;
          if ((v24 & 0xF8) != 0x30 && (v24 & 0xFE) != 0x38)
            break;
          if (v22 >= 214748364)
            goto LABEL_47;
          v22 = v24 + 10 * v22 - 48;
          if (++v23 == a3)
            goto LABEL_15;
        }
      }
      if (v23 == v20)
        goto LABEL_47;
      if (v23 == a3)
LABEL_48:
        sub_20B0AD444();
      v25 = v23 + 1;
      v26 = *v23;
      if (v26 != 44)
      {
        if (v25 != a3 && v26 == 92)
        {
          v30 = v23[1];
          v31 = v30 == 125;
          if (v30 == 125)
          {
            v32 = (_QWORD *)operator new();
            v33 = *(_QWORD *)(a1 + 56);
            v34 = *(_QWORD *)(v33 + 8);
            *v32 = &unk_24C40C3C0;
            v32[1] = v34;
            *(_QWORD *)(v33 + 8) = 0;
            v35 = operator new();
            v36 = *(_DWORD *)(a1 + 32);
            v37 = *(_QWORD *)(a4 + 8);
            *(_QWORD *)v35 = &unk_24C40C858;
            *(_QWORD *)(v35 + 8) = v37;
            *(_QWORD *)(v35 + 16) = v32;
            *(_QWORD *)(v35 + 24) = v22;
            *(_QWORD *)(v35 + 32) = v22;
            *(_DWORD *)(v35 + 40) = v36;
            *(_DWORD *)(v35 + 44) = a5;
            *(_DWORD *)(v35 + 48) = a6;
            *(_BYTE *)(v35 + 52) = 1;
            *(_QWORD *)(a4 + 8) = 0;
            v38 = (_QWORD *)operator new();
            v19 = &v23[2 * v31];
LABEL_46:
            *v38 = &unk_24C40C8E8;
            v38[1] = v35;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v38;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(v35 + 16);
            *(_QWORD *)(a4 + 8) = v35;
            ++*(_DWORD *)(a1 + 32);
            return v19;
          }
        }
        goto LABEL_48;
      }
      if (v25 == a3)
        goto LABEL_48;
      v27 = *v25;
      if ((v27 & 0xF8) == 0x30 || (v27 & 0xFE) == 0x38)
      {
        v28 = v27 - 48;
        v25 = v23 + 2;
        if (v23 + 2 == a3)
        {
LABEL_38:
          v25 = a3;
          goto LABEL_41;
        }
        while (1)
        {
          v27 = *v25;
          if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38)
            break;
          if (v28 >= 214748364)
            goto LABEL_47;
          v28 = v27 + 10 * v28 - 48;
          if (++v25 == a3)
            goto LABEL_38;
        }
      }
      else
      {
        v28 = -1;
      }
      if (v25 == a3)
      {
        v39 = v25;
        v25 = a3;
        v19 = v39;
      }
      else if (v25 + 1 == a3 || v27 != 92)
      {
        v19 = v25;
      }
      else
      {
        v19 = &v25[2 * (v25[1] == 125)];
      }
LABEL_41:
      if (v25 != v19)
      {
        if (v28 == -1)
        {
          v45 = (_QWORD *)operator new();
          v46 = *(_QWORD *)(a1 + 56);
          v47 = *(_QWORD *)(v46 + 8);
          *v45 = &unk_24C40C3C0;
          v45[1] = v47;
          *(_QWORD *)(v46 + 8) = 0;
          v35 = operator new();
          v48 = *(_DWORD *)(a1 + 32);
          v49 = *(_QWORD *)(a4 + 8);
          *(_QWORD *)v35 = &unk_24C40C858;
          *(_QWORD *)(v35 + 8) = v49;
          *(_QWORD *)(v35 + 16) = v45;
          *(_QWORD *)(v35 + 24) = v22;
          *(_QWORD *)(v35 + 32) = -1;
          *(_DWORD *)(v35 + 40) = v48;
          *(_DWORD *)(v35 + 44) = a5;
          *(_DWORD *)(v35 + 48) = a6;
          *(_BYTE *)(v35 + 52) = 1;
          *(_QWORD *)(a4 + 8) = 0;
          v38 = (_QWORD *)operator new();
          goto LABEL_46;
        }
        if (v28 >= v22)
        {
          v40 = (_QWORD *)operator new();
          v41 = *(_QWORD *)(a1 + 56);
          v42 = *(_QWORD *)(v41 + 8);
          *v40 = &unk_24C40C3C0;
          v40[1] = v42;
          *(_QWORD *)(v41 + 8) = 0;
          v35 = operator new();
          v43 = *(_DWORD *)(a1 + 32);
          v44 = *(_QWORD *)(a4 + 8);
          *(_QWORD *)v35 = &unk_24C40C858;
          *(_QWORD *)(v35 + 8) = v44;
          *(_QWORD *)(v35 + 16) = v40;
          *(_QWORD *)(v35 + 24) = v22;
          *(_QWORD *)(v35 + 32) = v28;
          *(_DWORD *)(v35 + 40) = v43;
          *(_DWORD *)(v35 + 44) = a5;
          *(_DWORD *)(v35 + 48) = a6;
          *(_BYTE *)(v35 + 52) = 1;
          *(_QWORD *)(a4 + 8) = 0;
          v38 = (_QWORD *)operator new();
          goto LABEL_46;
        }
LABEL_47:
        sub_20B0AD3F8();
      }
      goto LABEL_48;
    }
    return a2;
  }
  v12 = (_QWORD *)operator new();
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(v13 + 8);
  *v12 = &unk_24C40C3C0;
  v12[1] = v14;
  *(_QWORD *)(v13 + 8) = 0;
  v15 = operator new();
  v16 = *(_DWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(v15 + 16) = v12;
  *(_QWORD *)v15 = &unk_24C40C858;
  *(_QWORD *)(v15 + 8) = v17;
  *(_OWORD *)(v15 + 24) = xmmword_20B611310;
  *(_DWORD *)(v15 + 40) = v16;
  *(_DWORD *)(v15 + 44) = a5;
  *(_DWORD *)(v15 + 48) = a6;
  *(_BYTE *)(v15 + 52) = 1;
  *(_QWORD *)(a4 + 8) = 0;
  v18 = (_QWORD *)operator new();
  *v18 = &unk_24C40C8E8;
  v18[1] = v15;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v18;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(a4 + 8) = v15;
  ++*(_DWORD *)(a1 + 32);
  return a2 + 1;
}

void sub_20B530FE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *sub_20B531050(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  char *v9;
  signed __int8 v10;
  char *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 != a3)
  {
    v8 = *a2;
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        goto LABEL_3;
      case ')':
        if (!*(_DWORD *)(a1 + 36))
          goto LABEL_8;
LABEL_3:
        v9 = a2 + 1;
        if (a2 + 1 != a3 && v8 == 92)
        {
          v10 = *v9;
          switch(*v9)
          {
            case '$':
            case '(':
            case ')':
            case '*':
            case '+':
            case '.':
            case '?':
            case '[':
            case '\\':
            case '^':
            case '{':
            case '|':
            case '}':
              sub_20B0A9A50(a1, v10);
              v9 = a2 + 2;
              return sub_20B52E4EC(a1, v9, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
            default:
              if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
              {
                v11 = sub_20B530090(a1, a2 + 1, a3, 0);
              }
              else
              {
                v12 = sub_20B0ADB88(a1, v10);
                v13 = 2;
                if (!v12)
                  v13 = 0;
                v11 = &a2[v13];
              }
              if (v11 != a2)
                goto LABEL_19;
              v8 = *a2;
              break;
          }
        }
        if (v8 != 46)
          goto LABEL_18;
        v14 = (_QWORD *)operator new();
        v15 = *(_QWORD *)(a1 + 56);
        v16 = *(_QWORD *)(v15 + 8);
        *v14 = &unk_24C40C9C0;
        v14[1] = v16;
        *(_QWORD *)(v15 + 8) = v14;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        break;
      default:
LABEL_8:
        sub_20B0A9A50(a1, (char)v8);
        v9 = a2 + 1;
        return sub_20B52E4EC(a1, v9, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    return sub_20B52E4EC(a1, v9, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
  }
LABEL_18:
  v11 = sub_20B52EEDC(a1, a2, a3);
LABEL_19:
  if (v11 != a2 || v11 == a3)
  {
LABEL_35:
    v9 = v11;
    if (v11 != a2)
      return sub_20B52E4EC(a1, v9, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    return a2;
  }
  v17 = *a2;
  switch(v17)
  {
    case '$':
      v18 = operator new();
      v19 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v20 = *(_QWORD *)(a1 + 56);
      v21 = (char *)&unk_24C40C4A0;
      goto LABEL_26;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v24 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v23 = operator new();
        v24 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v24;
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *(_QWORD *)v23 = &unk_24C40C7C8;
        *(_QWORD *)(v23 + 8) = v26;
        *(_DWORD *)(v23 + 16) = v24;
        *(_QWORD *)(v25 + 8) = v23;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v27 = (char *)sub_20B52DA1C(a1, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
        sub_20B0A83D8();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v29 = operator new();
        v30 = *(_QWORD *)(a1 + 56);
        v31 = *(_QWORD *)(v30 + 8);
        *(_QWORD *)v29 = &unk_24C40C810;
        *(_QWORD *)(v29 + 8) = v31;
        *(_DWORD *)(v29 + 16) = v24;
        *(_QWORD *)(v30 + 8) = v29;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v11 = v28 + 1;
      goto LABEL_35;
    case '^':
      v18 = operator new();
      v19 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v20 = *(_QWORD *)(a1 + 56);
      v21 = (char *)&unk_24C40C458;
LABEL_26:
      v22 = *(_QWORD *)(v20 + 8);
      *(_QWORD *)v18 = v21 + 16;
      *(_QWORD *)(v18 + 8) = v22;
      *(_BYTE *)(v18 + 16) = v19;
      *(_QWORD *)(v20 + 8) = v18;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = a2 + 1;
      return sub_20B52E4EC(a1, v9, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
  }
  return a2;
}

size_t sub_20B5313E4@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  size_t result;
  size_t v7;
  char *v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v4 = strstr(a1, "T = ");
  if (v4)
  {
    v5 = v4;
    result = strlen(v4);
    v7 = result - 5;
    if (result - 5 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v7 >= 0x17)
      {
        v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17)
          v11 = v7 | 7;
        v12 = v11 + 1;
        v13 = operator new(v11 + 1);
        a2[1] = v7;
        a2[2] = v12 | 0x8000000000000000;
        *a2 = v13;
        a2 = v13;
      }
      else
      {
        *((_BYTE *)a2 + 23) = v7;
        if (result == 5)
          goto LABEL_15;
      }
      result = (size_t)memmove(a2, v5 + 4, v7);
LABEL_15:
      *((_BYTE *)a2 + v7) = 0;
      return result;
    }
LABEL_40:
    sub_20AEC0138();
  }
  v8 = strstr(a1, "= ");
  if (v8)
  {
    v9 = v8;
    result = strlen(v8);
    v10 = result - 3;
    if (result - 3 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_40;
    if (v10 >= 0x17)
    {
      v17 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v17 = v10 | 7;
      v18 = v17 + 1;
      v19 = operator new(v17 + 1);
      a2[1] = v10;
      a2[2] = v18 | 0x8000000000000000;
      *a2 = v19;
      a2 = v19;
    }
    else
    {
      *((_BYTE *)a2 + 23) = v10;
      if (result == 3)
        goto LABEL_25;
    }
    result = (size_t)memmove(a2, v9 + 2, v10);
LABEL_25:
    *((_BYTE *)a2 + v10) = 0;
    return result;
  }
  v14 = strchr(a1, 61);
  if (v14)
  {
    v15 = v14;
    result = strlen(v14);
    v16 = result - 2;
    if (result - 2 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_40;
    if (v16 >= 0x17)
    {
      v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v21 = v16 | 7;
      v22 = v21 + 1;
      v23 = operator new(v21 + 1);
      a2[1] = v16;
      a2[2] = v22 | 0x8000000000000000;
      *a2 = v23;
      a2 = v23;
    }
    else
    {
      *((_BYTE *)a2 + 23) = v16;
      if (result == 2)
        goto LABEL_34;
    }
    result = (size_t)memmove(a2, v15 + 1, v16);
LABEL_34:
    *((_BYTE *)a2 + v16) = 0;
    return result;
  }
  result = strlen(a1);
  if (result > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_40;
  v20 = result;
  if (result >= 0x17)
  {
    v24 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v24 = result | 7;
    v25 = v24 + 1;
    v26 = operator new(v24 + 1);
    a2[1] = v20;
    a2[2] = v25 | 0x8000000000000000;
    *a2 = v26;
    a2 = v26;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
      goto LABEL_39;
  }
  result = (size_t)memcpy(a2, a1, v20);
LABEL_39:
  *((_BYTE *)a2 + v20) = 0;
  return result;
}

void sub_20B531658(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20AEC60F4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_20B52B814(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20B5316F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B53170C(char *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>, int64x2_t a4@<Q3>, int8x16_t a5@<Q5>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  std::string *p_p;
  std::string __p;
  _QWORD v14[8];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = a2[1];
  if (v7 == v8)
  {
    if (a1[23] < 0)
    {
      sub_20AEC60F4(a3, *(void **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 2);
    }
  }
  else
  {
    v9 = a1[23];
    v10 = *((_QWORD *)a1 + 1);
    if ((v9 & 0x80u) != 0)
    {
      a1 = *(char **)a1;
      v9 = v10;
    }
    v14[0] = a1;
    v14[1] = v9;
    v14[2] = "<";
    v14[3] = 1;
    sub_20AECFBC8(v7, v8, ",", 1uLL, &__p, a4, a5);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    v14[4] = p_p;
    v14[5] = size;
    v14[6] = ">";
    v14[7] = 1;
    sub_20AECFDF8((uint64_t)v14, (uint64_t)&v15, 0, 0, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20B53185C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B531884(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v3;
  _BYTE *v4;
  uint64_t v5;
  char v6;
  int v7;
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  int v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *v21;
  std::string v22;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v22, 0, sizeof(v22));
  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (_BYTE *)a1;
  else
    v4 = *(_BYTE **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 1;
    v11 = MEMORY[0x24BDAC740];
    while (1)
    {
      v13 = (char)*v4;
      if ((v13 & 0x80000000) == 0 && (*(_DWORD *)(v11 + 4 * v13 + 60) & 0x400) != 0)
        break;
      if (v13 == 76)
      {
        if (!v6)
          goto LABEL_49;
        std::string::push_back(&v22, 76);
        if (v8)
        {
          if (v7)
          {
            if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v14 = &v22;
            else
              v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
            if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
            else
              size = v22.__r_.__value_.__l.__size_;
            goto LABEL_34;
          }
          v8 = 1;
          v7 = 1;
          v6 = 1;
        }
        else
        {
          v8 = 1;
          v6 = 1;
        }
      }
      else
      {
        if (*v4 != 85)
        {
          if ((v13 & 0x80000000) != 0)
            v17 = __maskrune((char)*v4, 0x500uLL);
          else
            v17 = *(_DWORD *)(v11 + 4 * v13 + 60) & 0x500;
          if (v17)
          {
            if (v6)
            {
              if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v18 = &v22;
              else
                v18 = (std::string *)v22.__r_.__value_.__r.__words[0];
              if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v19 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
              else
                v19 = v22.__r_.__value_.__l.__size_;
              std::string::append(a2, (const std::string::value_type *)v18, v19);
              if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              {
                v22.__r_.__value_.__l.__size_ = 0;
                v20 = (std::string *)v22.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((_BYTE *)&v22.__r_.__value_.__s + 23) = 0;
                v20 = &v22;
              }
              v9 = 0;
              v8 = 0;
              v7 = 0;
              v6 = 0;
              v10 = 0;
              v20->__r_.__value_.__s.__data_[0] = 0;
            }
            else
            {
LABEL_49:
              v6 = 0;
              v10 = 0;
            }
          }
          else
          {
            if (v6)
            {
              if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              {
                v22.__r_.__value_.__l.__size_ = 0;
                v21 = (std::string *)v22.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((_BYTE *)&v22.__r_.__value_.__s + 23) = 0;
                v21 = &v22;
              }
              v9 = 0;
              v8 = 0;
              v7 = 0;
              v6 = 0;
              v21->__r_.__value_.__s.__data_[0] = 0;
            }
            else
            {
              v6 = 0;
            }
            v10 = 1;
          }
LABEL_11:
          std::string::push_back(a2, v13);
          goto LABEL_12;
        }
        if (!v6)
          goto LABEL_49;
        std::string::push_back(&v22, 85);
        if (v9)
        {
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v14 = &v22;
          else
            v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
          else
            size = v22.__r_.__value_.__l.__size_;
LABEL_34:
          std::string::append(a2, (const std::string::value_type *)v14, size);
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          {
            v22.__r_.__value_.__l.__size_ = 0;
            v16 = (std::string *)v22.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((_BYTE *)&v22.__r_.__value_.__s + 23) = 0;
            v16 = &v22;
          }
          v9 = 0;
          v8 = 0;
          v7 = 0;
          v6 = 0;
          v16->__r_.__value_.__s.__data_[0] = 0;
          goto LABEL_12;
        }
        v9 = 1;
        v6 = 1;
      }
LABEL_12:
      ++v4;
      if (!--v5)
      {
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        return;
      }
    }
    v12 = (v10 & 1) == 0;
    v10 = 0;
    if (!v12)
      v6 = 1;
    goto LABEL_11;
  }
}

void sub_20B531B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B531B64(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void **))
{
  unsigned __int8 v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned __int8 v17;
  int v18;

  sub_20B531CBC(a1, a2, a3, a4, a5, a6, a7);
  v11 = atomic_load((unsigned __int8 *)&qword_25463D258);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25463D258))
  {
    __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463D258);
  }
  if (byte_25463D248)
    v12 = byte_25463D250 == 0;
  else
    v12 = 0;
  if (!v12)
  {
    v13 = qword_25463D220;
    v14 = qword_25463D228;
    while (v13 != v14)
    {
      v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v13;
      v15 = *(_QWORD *)(v13 + 8);
      v13 += 16;
      v16(v15, a3, a4, a5, a6);
    }
  }
  v17 = atomic_load((unsigned __int8 *)&qword_25463D258);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_25463D258))
  {
    __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463D258);
  }
  v18 = byte_25463D248;
  if (byte_25463D248)
    qword_25463D238(unk_25463D240, a3, a4, a5, a6);
  return v18 == 0;
}

void sub_20B531CBC(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void **))
{
  unsigned __int8 v13;
  const char *v14;
  uint64_t v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  void *v21;
  unint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void *v28[2];
  int64_t v29;
  _QWORD v30[2];
  _QWORD v31[3];
  const void *v32;
  uint64_t v33;
  const void *v34;
  unint64_t v35;
  void *__p;
  char v37;
  unint64_t v38;
  int v39;
  uint64_t v40;

  v13 = atomic_load((unsigned __int8 *)&qword_25463D258);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_25463D258))
  {
    __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463D258);
  }
  if (!byte_25463D248)
  {
    sub_20AEC0BD8((uint64_t)v30);
    if (a4)
      v14 = "Assert: ";
    else
      v14 = "Abort: ";
    if (a4)
      v15 = 8;
    else
      v15 = 7;
    sub_20AEC01D0(v31, (uint64_t)v14, v15);
    v16 = strlen(a1);
    v17 = sub_20AEC01D0(v31, (uint64_t)a1, v16);
    sub_20AEC01D0(v17, (uint64_t)":", 1);
    std::ostream::operator<<();
    if (a4)
    {
      v18 = sub_20AEC01D0(v31, (uint64_t)" : ", 3);
      sub_20AEC01D0(v18, a3, a4);
    }
    if (a6)
    {
      v19 = sub_20AEC01D0(v31, (uint64_t)" : ", 3);
      sub_20AEC01D0(v19, a5, a6);
    }
    sub_20AEC01D0(v31, (uint64_t)"\n", 1);
    if ((v39 & 0x10) != 0)
    {
      v22 = v38;
      if (v38 < v35)
      {
        v38 = v35;
        v22 = v35;
      }
      v23 = v34;
      v20 = v22 - (_QWORD)v34;
      if (v22 - (unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_35;
    }
    else
    {
      if ((v39 & 8) == 0)
      {
        v20 = 0;
        HIBYTE(v29) = 0;
        v21 = v28;
        goto LABEL_26;
      }
      v23 = v32;
      v20 = v33 - (_QWORD)v32;
      if ((unint64_t)(v33 - (_QWORD)v32) >= 0x7FFFFFFFFFFFFFF8)
LABEL_35:
        sub_20AEC0138();
    }
    if (v20 >= 0x17)
    {
      v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v24 = v20 | 7;
      v25 = v24 + 1;
      v21 = operator new(v24 + 1);
      v28[1] = (void *)v20;
      v29 = v25 | 0x8000000000000000;
      v28[0] = v21;
    }
    else
    {
      HIBYTE(v29) = v20;
      v21 = v28;
      if (!v20)
        goto LABEL_26;
    }
    memmove(v21, v23, v20);
LABEL_26:
    *((_BYTE *)v21 + v20) = 0;
    v30[0] = *MEMORY[0x24BEDB7F0];
    v26 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v31[0] = v26;
    v31[1] = MEMORY[0x24BEDB848] + 16;
    if (v37 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](&v40);
    if (v29 >= 0)
      v27 = v28;
    else
      v27 = (void **)v28[0];
    a7(v27);
    if (SHIBYTE(v29) < 0)
      operator delete(v28[0]);
  }
}

void sub_20B531F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B531FC0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = atomic_load((unsigned __int8 *)&qword_25463D260);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463D260))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254636FE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463D260);
  }
  std::mutex::lock(&stru_254636FE0);
  v5 = atomic_load((unsigned __int8 *)&qword_25463D258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25463D258))
  {
    __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463D258);
  }
  v6 = (_QWORD *)qword_25463D228;
  if (qword_25463D228 < (unint64_t)qword_25463D230)
  {
    *(_QWORD *)qword_25463D228 = a1;
    v6[1] = a2;
    v7 = (uint64_t)(v6 + 2);
    goto LABEL_16;
  }
  v8 = qword_25463D220;
  v9 = (qword_25463D228 - qword_25463D220) >> 4;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60)
    sub_20B532510();
  v11 = qword_25463D230 - qword_25463D220;
  if ((qword_25463D230 - qword_25463D220) >> 3 > v10)
    v10 = v11 >> 3;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
    v12 = 0xFFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 60)
      sub_20AEC60CC();
    v13 = (char *)operator new(16 * v12);
    v14 = &v13[16 * v9];
    v15 = (uint64_t)&v13[16 * v12];
    *(_QWORD *)v14 = a1;
    *((_QWORD *)v14 + 1) = a2;
    v7 = (uint64_t)(v14 + 16);
    if (v6 == (_QWORD *)v8)
    {
LABEL_14:
      qword_25463D220 = (uint64_t)v14;
      qword_25463D228 = v7;
      qword_25463D230 = v15;
      if (!v6)
        goto LABEL_16;
LABEL_15:
      operator delete(v6);
      goto LABEL_16;
    }
  }
  else
  {
    v14 = (char *)(16 * v9);
    v15 = 0;
    *(_QWORD *)v14 = a1;
    *((_QWORD *)v14 + 1) = a2;
    v7 = 16 * v9 + 16;
    if (v6 == (_QWORD *)v8)
      goto LABEL_14;
  }
  do
  {
    *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
    v14 -= 16;
    v6 -= 2;
  }
  while (v6 != (_QWORD *)v8);
  v6 = (_QWORD *)qword_25463D220;
  qword_25463D220 = (uint64_t)v14;
  qword_25463D228 = v7;
  qword_25463D230 = v15;
  if (v6)
    goto LABEL_15;
LABEL_16:
  qword_25463D228 = v7;
  std::mutex::unlock(&stru_254636FE0);
}

void sub_20B5321BC(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_254636FE0);
  _Unwind_Resume(a1);
}

void sub_20B5321D4(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v4;
  _QWORD *v5;
  _OWORD *v6;

  v2 = atomic_load((unsigned __int8 *)&qword_25463D260);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463D260))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254636FE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463D260);
  }
  std::mutex::lock(&stru_254636FE0);
  v3 = atomic_load((unsigned __int8 *)&qword_25463D258);
  if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463D258))
  {
    v5 = (_QWORD *)qword_25463D220;
    v4 = qword_25463D228;
    if (qword_25463D220 != qword_25463D228)
      goto LABEL_4;
  }
  else
  {
    __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463D258);
    v5 = (_QWORD *)qword_25463D220;
    v4 = qword_25463D228;
    if (qword_25463D220 != qword_25463D228)
    {
LABEL_4:
      while (*v5 != a1)
      {
        v5 += 2;
        if (v5 == (_QWORD *)v4)
          goto LABEL_6;
      }
      if (v5 != (_QWORD *)v4)
      {
        v6 = v5 + 2;
        if (v5 + 2 != (_QWORD *)v4)
        {
          do
          {
            if (*(_QWORD *)v6 != a1)
            {
              *(_OWORD *)v5 = *v6;
              v5 += 2;
            }
            ++v6;
          }
          while (v6 != (_OWORD *)v4);
          v4 = qword_25463D228;
        }
      }
      if (v5 != (_QWORD *)v4)
      {
        qword_25463D228 = (uint64_t)v5;
        std::mutex::unlock(&stru_254636FE0);
        return;
      }
    }
  }
LABEL_6:
  std::mutex::unlock(&stru_254636FE0);
}

uint64_t sub_20B532360(char *__s)
{
  unsigned __int8 v2;
  size_t v3;
  uint64_t *v4;
  unsigned __int8 v5;
  NSObject *v6;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25463D268);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463D268))
  {
    __cxa_atexit((void (*)(void *))sub_20B532524, &off_253EC31F0, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463D268);
  }
  v3 = strlen(__s);
  sub_20B421D00((void **)&qword_253EC31F8, __s, v3);
  if (byte_253EC320F >= 0)
    v4 = &qword_253EC31F8;
  else
    v4 = (uint64_t *)qword_253EC31F8;
  qword_254637028 = (uint64_t)v4;
  v5 = atomic_load((unsigned __int8 *)&qword_25463CC88);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25463CC88))
  {
    qword_25463CC80 = (uint64_t)os_log_create("cv3d", "");
    __cxa_guard_release(&qword_25463CC88);
  }
  v6 = qword_25463CC80;
  if (os_log_type_enabled((os_log_t)qword_25463CC80, OS_LOG_TYPE_FAULT))
  {
    v8 = 136315138;
    v9 = __s;
    _os_log_impl(&dword_20AEBB000, v6, OS_LOG_TYPE_FAULT, "%s", (uint8_t *)&v8, 0xCu);
  }
  return fputs(__s, (FILE *)*MEMORY[0x24BDAC8D8]);
}

uint64_t sub_20B5324E0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B532510()
{
  sub_20AEC014C("vector");
}

uint64_t sub_20B532524(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24C41FFC0;
  qword_254637028 = 0;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20B532578(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C41FFC0;
  qword_254637028 = 0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B5325CC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20B5325EC(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
  sub_20AECAC00();
}

void sub_20B532634(void **a1, char *a2, void **a3)
{
  char *v5;
  void *v6;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v5 = (char *)*a1;
  v6 = a2;
  if (v5 != a2)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v5 -= 16;
    }
    while (v5 != a2);
    v6 = *a3;
  }
  *a1 = a2;
  operator delete(v6);
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x24BDBB7A8]();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x24BDBB7C8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x24BDBB808](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x24BDBB850]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x24BDBBA20](BOOLean);
}

CFURLRef CFBundleCopyExecutableURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x24BDBBA40](bundle);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x24BDBBA98](allocator, bundleURL);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x24BDBBAD8]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x24BDBBAE0](bundle, key);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x24BDBBC58](cf);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x24BDBBC80](type_id);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x24BDBBCC0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x24BDBBDC0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDD8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x24BDBBE00](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x24BDBBE10](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x24BDBBE38](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x24BDBBE68](cf1, cf2);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x24BDBBE88](allocator, domain, code, userInfo);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x24BDBC110](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x24BDBC118]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x24BDBC558](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x24BDBC5F8](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x24BDBC658](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x24BDBC798](anURL, pathStyle);
}

CFStringRef CFURLCopyScheme(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x24BDBC7D8](anURL);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x24BDBC858](allocator, filePath, pathStyle, isDirectory);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x24BDBC8E0](alloc, *(_QWORD *)&bytes.byte0, *(_QWORD *)&bytes.byte8);
}

CFTypeID CFUUIDGetTypeID(void)
{
  return MEMORY[0x24BDBC900]();
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1;
  uint64_t v2;
  CFUUIDBytes result;

  v1 = MEMORY[0x24BDBC908](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDB80]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDB88]();
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x24BDBDC10](space);
}

size_t CGColorSpaceGetNumberOfComponents(CGColorSpaceRef space)
{
  return MEMORY[0x24BDBDC20](space);
}

CGDataConsumerRef CGDataConsumerCreate(void *info, const CGDataConsumerCallbacks *cbks)
{
  return (CGDataConsumerRef)MEMORY[0x24BDBE140](info, cbks);
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x24BDBE168](provider);
}

CGDataProviderRef CGDataProviderCreateSequential(void *info, const CGDataProviderSequentialCallbacks *callbacks)
{
  return (CGDataProviderRef)MEMORY[0x24BDBE178](info, callbacks);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x24BDBE180](data);
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x24BDBE5E0](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(_QWORD *)&bitmapInfo, provider);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x24BDD9048](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithDataConsumer(CGDataConsumerRef consumer, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x24BDD9080](consumer, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x24BDD9090](idst);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x24BDBE620](image);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x24BDBE628](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x24BDBE630](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x24BDBE638](image);
}

CGImageByteOrderInfo CGImageGetByteOrderInfo(CGImageRef image)
{
  return MEMORY[0x24BDBE640](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x24BDBE648](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBE658](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x24BDBE668](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x24BDBE680](image);
}

CGImagePixelFormatInfo CGImageGetPixelFormatInfo(CGImageRef image)
{
  return MEMORY[0x24BDBE6B0](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x24BDBE6E0](image);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x24BDD9158](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithDataProvider(CGDataProviderRef provider, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9178](provider, options);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5248](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5250](allocator, width, height, *(_QWORD *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDC5288](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC5290](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52B0](pixelBuffer);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x24BDC52C0](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D0](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D8](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52E8](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x24BDC5308](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x24BDC53B0](pixelBuffer, unlockFlags);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x24BDD8B50](properties);
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDD8BA8](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerElement(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8BC0](buffer);
}

size_t IOSurfaceGetBytesPerElementOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8BC8](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8BD0](buffer);
}

size_t IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8BE0](buffer, planeIndex);
}

size_t IOSurfaceGetElementHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C18](buffer);
}

size_t IOSurfaceGetElementHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8C20](buffer, planeIndex);
}

size_t IOSurfaceGetElementWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C28](buffer);
}

size_t IOSurfaceGetElementWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8C30](buffer, planeIndex);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C48](buffer);
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8C58](buffer, planeIndex);
}

size_t IOSurfaceGetNumberOfComponentsOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8C70](buffer, planeIndex);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C80](buffer);
}

size_t IOSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C88](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8CD0](buffer);
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8CE0](buffer, planeIndex);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x24BDD8D08](buffer, *(_QWORD *)&options, seed);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x24BDD8DD0](buffer, *(_QWORD *)&options, seed);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x24BED8448]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x24BED8490]();
}

uint64_t MGGetSInt64Answer()
{
  return MEMORY[0x24BED84A0]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x24BED84B0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

int _NSGetExecutablePath(char *buf, uint32_t *bufsize)
{
  return MEMORY[0x24BDAC770](buf, bufsize);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

const char *__cdecl std::logic_error::what(const std::logic_error *this)
{
  return (const char *)MEMORY[0x24BEDA970](this);
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x24BEDA978](this);
}

std::string *__cdecl std::error_condition::message(std::string *__return_ptr retstr, const std::error_condition *this)
{
  return (std::string *)MEMORY[0x24BEDA9E8](retstr, this);
}

const std::__fs::filesystem::directory_entry *__cdecl std::__fs::filesystem::directory_iterator::__dereference(const std::__fs::filesystem::directory_iterator *this)
{
  return (const std::__fs::filesystem::directory_entry *)MEMORY[0x24BEDA9F0](this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA00](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__extension(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA08](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__parent_path(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA10](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA18](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::path::lexically_relative(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *__base)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDAA28](retstr, this, __base);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__stem(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA40](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

int std::__fs::filesystem::path::__compare(const std::__fs::filesystem::path *this, std::__fs::filesystem::path::__string_view a2)
{
  return MEMORY[0x24BEDAA48](this, a2.__data_, a2.__size_);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x24BEDAA50](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return (const char *)MEMORY[0x24BEDAA88](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAB0](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAB8](this, a2);
}

std::exception_ptr *__cdecl std::exception_ptr::exception_ptr(std::exception_ptr *this, const std::exception_ptr *a2)
{
  return (std::exception_ptr *)MEMORY[0x24BEDAB18](this, a2);
}

void std::exception_ptr::~exception_ptr(std::exception_ptr *this)
{
  MEMORY[0x24BEDAB20](this);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB48](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB38](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB50](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB40](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB58](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x24BEDAB60](this);
}

{
  MEMORY[0x24BEDAB68](this);
}

void std::invalid_argument::~invalid_argument(std::invalid_argument *this)
{
  MEMORY[0x24BEDAB88](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x24BEDABC0](a1, a2, a3);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x24BEDABC8](this, *(_QWORD *)&__ecode);
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
  MEMORY[0x24BEDABD8](__ns);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x24BEDAC50](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x24BEDACA8](this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

void std::string::~string(std::string *this)
{
  MEMORY[0x24BEDACF0](this);
}

std::future_error *__cdecl std::future_error::future_error(std::future_error *this, std::error_code __ec)
{
  return (std::future_error *)MEMORY[0x24BEDAD78](this, *(_QWORD *)&__ec.__val_, __ec.__cat_);
}

void std::future_error::~future_error(std::future_error *this)
{
  MEMORY[0x24BEDAD80](this);
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x24BEDADF0]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x24BEDAE10]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x24BEDAE18]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x24BEDAE30]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x24BEDAE38]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x24BEDAE50]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x24BEDAE68]();
}

{
  return MEMORY[0x24BEDAE70]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x24BEDAE80]();
}

{
  return MEMORY[0x24BEDAE88]();
}

{
  return MEMORY[0x24BEDAE90]();
}

{
  return MEMORY[0x24BEDAE98]();
}

{
  return MEMORY[0x24BEDAEA0]();
}

{
  return MEMORY[0x24BEDAEA8]();
}

{
  return MEMORY[0x24BEDAEB0]();
}

{
  return MEMORY[0x24BEDAEB8]();
}

{
  return MEMORY[0x24BEDAEC0]();
}

{
  return MEMORY[0x24BEDAEC8]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x24BEDAEE0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x24BEDAEF0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF08]();
}

{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF18]();
}

{
  return MEMORY[0x24BEDAF28]();
}

{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF40]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF58]();
}

{
  return MEMORY[0x24BEDAF60]();
}

{
  return MEMORY[0x24BEDAF68]();
}

{
  return MEMORY[0x24BEDAF70]();
}

{
  return MEMORY[0x24BEDAF78]();
}

{
  return MEMORY[0x24BEDAF80]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x24BEDAFD8](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
  MEMORY[0x24BEDAFE0](this);
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x24BEDAFE8](this);
}

void std::__shared_count::~__shared_count(std::__shared_count *this)
{
  MEMORY[0x24BEDAFF8](this);
}

uint64_t std::ifstream::open()
{
  return MEMORY[0x24BEDB000]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::ofstream::open()
{
  return MEMORY[0x24BEDB018]();
}

void std::error_category::~error_category(std::error_category *this)
{
  MEMORY[0x24BEDB028](this);
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x24BEDB030](__s, __icase);
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x24BEDB038](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
  MEMORY[0x24BEDB040](this);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

const std::error_category *std::future_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB080]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB088](this);
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB090](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x24BEDB0A0](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB0A8](this);
}

const std::error_category *std::generic_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B8]();
}

void std::__assoc_sub_state::__sub_wait(std::__assoc_sub_state *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x24BEDB0C0](this, __lk);
}

void std::__assoc_sub_state::set_exception(std::__assoc_sub_state *this, std::exception_ptr __p)
{
  MEMORY[0x24BEDB0C8](this, __p.__ptr_);
}

void std::__assoc_sub_state::wait(std::__assoc_sub_state *this)
{
  MEMORY[0x24BEDB0D8](this);
}

const std::error_category *std::iostream_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0E8]();
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
  MEMORY[0x24BEDB0F8](this);
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
  MEMORY[0x24BEDB100](this);
}

void std::condition_variable::__do_timed_wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk, std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> a3)
{
  MEMORY[0x24BEDB108](this, __lk, a3.__d_.__rep_);
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x24BEDB110](this, __lk);
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x24BEDB118](this);
}

void std::__shared_mutex_base::lock_shared(std::__shared_mutex_base *this)
{
  MEMORY[0x24BEDB148](this);
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
  MEMORY[0x24BEDB150](this);
}

void std::__shared_mutex_base::lock(std::__shared_mutex_base *this)
{
  MEMORY[0x24BEDB160](this);
}

void std::__shared_mutex_base::unlock(std::__shared_mutex_base *this)
{
  MEMORY[0x24BEDB168](this);
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  return (std::__shared_mutex_base *)MEMORY[0x24BEDB178](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x24BEDB188](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x24BEDB198]();
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x24BEDB1A0](retstr, __s);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x24BEDB1B0](*(_QWORD *)&__ev, __what_arg);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__absolute(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB1E0](retstr, a2, __ec);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__canonical(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB1E8](retstr, a2, __ec);
}

BOOL std::__fs::filesystem::__copy_file(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt, std::error_code *__ec)
{
  return MEMORY[0x24BEDB1F0](__from, __to, __opt, __ec);
}

uintmax_t std::__fs::filesystem::__file_size(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x24BEDB1F8](a1, __ec);
}

BOOL std::__fs::filesystem::__equivalent(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return MEMORY[0x24BEDB200](a1, a2, __ec);
}

uintmax_t std::__fs::filesystem::__remove_all(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x24BEDB208](a1, __ec);
}

BOOL std::__fs::filesystem::__fs_is_empty(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x24BEDB210](__p, __ec);
}

void std::__fs::filesystem::__permissions(const std::__fs::filesystem::path *a1, std::__fs::filesystem::perms a2, std::__fs::filesystem::perm_options a3, std::error_code *a4)
{
  MEMORY[0x24BEDB218](a1, *(_QWORD *)&a2, a3, a4);
}

void std::__fs::filesystem::__resize_file(const std::__fs::filesystem::path *a1, uintmax_t __size, std::error_code *a3)
{
  MEMORY[0x24BEDB220](a1, __size, a3);
}

void std::__fs::filesystem::__copy_symlink(const std::__fs::filesystem::path *__existing_symlink, const std::__fs::filesystem::path *__new_symlink, std::error_code *__ec)
{
  MEMORY[0x24BEDB228](__existing_symlink, __new_symlink, __ec);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__current_path(std::__fs::filesystem::path *__return_ptr retstr, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB230](retstr, __ec);
}

void std::__fs::filesystem::__current_path(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  MEMORY[0x24BEDB238](a1, __ec);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__read_symlink(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB240](retstr, a2, __ec);
}

std::__fs::filesystem::_FilesystemClock::time_point std::__fs::filesystem::_FilesystemClock::now(void)
{
  uint64_t v0;
  uint64_t v1;
  std::__fs::filesystem::_FilesystemClock::time_point result;

  v0 = MEMORY[0x24BEDB248]();
  *((_QWORD *)&result.__d_.__rep_ + 1) = v1;
  *(_QWORD *)&result.__d_.__rep_ = v0;
  return result;
}

void std::__fs::filesystem::__create_symlink(const std::__fs::filesystem::path *__to, const std::__fs::filesystem::path *__new_symlink, std::error_code *__ec)
{
  MEMORY[0x24BEDB250](__to, __new_symlink, __ec);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__symlink_status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x24BEDB258](a1, __ec);
}

void std::__fs::filesystem::filesystem_error::~filesystem_error(std::__fs::filesystem::filesystem_error *this)
{
  MEMORY[0x24BEDB268](this);
}

uintmax_t std::__fs::filesystem::__hard_link_count(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x24BEDB270](a1, __ec);
}

std::__fs::filesystem::file_time_type std::__fs::filesystem::__last_write_time(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  uint64_t v2;
  uint64_t v3;
  std::__fs::filesystem::file_time_type result;

  v2 = MEMORY[0x24BEDB278](a1, __ec);
  *((_QWORD *)&result.__d_.__rep_ + 1) = v3;
  *(_QWORD *)&result.__d_.__rep_ = v2;
  return result;
}

BOOL std::__fs::filesystem::__create_directory(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return MEMORY[0x24BEDB280](a1, a2);
}

BOOL std::__fs::filesystem::__create_directory(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *__attributes, std::error_code *a3)
{
  return MEMORY[0x24BEDB288](a1, __attributes, a3);
}

void std::__fs::filesystem::__create_hard_link(const std::__fs::filesystem::path *__to, const std::__fs::filesystem::path *__new_hard_link, std::error_code *__ec)
{
  MEMORY[0x24BEDB290](__to, __new_hard_link, __ec);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__weakly_canonical(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB298](retstr, __p, __ec);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::__increment(std::__fs::filesystem::directory_iterator *this, std::error_code *__ec)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x24BEDB2A0](this, __ec);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::directory_iterator(std::__fs::filesystem::directory_iterator *this, const std::__fs::filesystem::path *a2, std::error_code *a3, std::__fs::filesystem::directory_options a4)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x24BEDB2A8](this, a2, a3, a4);
}

BOOL std::__fs::filesystem::__create_directories(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return MEMORY[0x24BEDB2B0](a1, a2);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__temp_directory_path(std::__fs::filesystem::path *__return_ptr retstr, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB2B8](retstr, __ec);
}

void std::__fs::filesystem::__create_directory_symlink(const std::__fs::filesystem::path *__to, const std::__fs::filesystem::path *__new_symlink, std::error_code *__ec)
{
  MEMORY[0x24BEDB2C0](__to, __new_symlink, __ec);
}

void std::__fs::filesystem::__copy(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt, std::error_code *__ec)
{
  MEMORY[0x24BEDB2E8](__from, __to, __opt, __ec);
}

std::__fs::filesystem::space_info *__cdecl std::__fs::filesystem::__space(std::__fs::filesystem::space_info *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::space_info *)MEMORY[0x24BEDB2F0](retstr, a2, __ec);
}

BOOL std::__fs::filesystem::__remove(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x24BEDB2F8](a1, __ec);
}

void std::__fs::filesystem::__rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x24BEDB300](__from, __to, __ec);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x24BEDB308](a1, __ec);
}

double std::stod(const std::string *__str, size_t *__idx)
{
  double result;

  MEMORY[0x24BEDB320](__str, __idx);
  return result;
}

float std::stof(const std::string *__str, size_t *__idx)
{
  float result;

  MEMORY[0x24BEDB328](__str, __idx);
  return result;
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

BOOL std::mutex::try_lock(std::mutex *this)
{
  return MEMORY[0x24BEDB378](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

uint64_t std::stoll(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x24BEDB388](__str, __idx, *(_QWORD *)&__base);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x24BEDB3E0]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x24BEDB3F0]();
}

time_t std::chrono::system_clock::to_time_t(const std::chrono::system_clock::time_point *__t)
{
  return MEMORY[0x24BEDB3F8](__t);
}

void std::future<void>::~future(std::future<void> *this)
{
  MEMORY[0x24BEDB410](this);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x24BEDB438](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x24BEDB440](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x24BEDB450](this, a2);
}

unint64_t std::stoull(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x24BEDB458](__str, __idx, *(_QWORD *)&__base);
}

void std::thread::join(std::thread *this)
{
  MEMORY[0x24BEDB468](this);
}

void std::thread::detach(std::thread *this)
{
  MEMORY[0x24BEDB470](this);
}

void std::thread::~thread(std::thread *this)
{
  MEMORY[0x24BEDB478](this);
}

std::future<void> std::promise<void>::get_future(std::promise<void> *this)
{
  return (std::future<void>)MEMORY[0x24BEDB4C0](this);
}

void std::promise<void>::set_exception(std::promise<void> *this, std::exception_ptr __p)
{
  MEMORY[0x24BEDB4C8](this, __p.__ptr_);
}

void std::promise<void>::set_value(std::promise<void> *this)
{
  MEMORY[0x24BEDB4D0](this);
}

std::promise<void> *__cdecl std::promise<void>::promise(std::promise<void> *this)
{
  return (std::promise<void> *)MEMORY[0x24BEDB4D8](this);
}

void std::promise<void>::~promise(std::promise<void> *this)
{
  MEMORY[0x24BEDB4E0](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::move(std::ios_base *this, std::ios_base *a2)
{
  MEMORY[0x24BEDB520](this, a2);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

std::ios_base::failure *__cdecl std::ios_base::failure::failure(std::ios_base::failure *this, const std::string *__msg, const std::error_code *__ec)
{
  return (std::ios_base::failure *)MEMORY[0x24BEDB558](this, __msg, __ec);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x24BEDB5F8](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x24BEDB600](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB618](retstr, __val);
}

{
  return (std::string *)MEMORY[0x24BEDB628](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

{
  return (std::string *)MEMORY[0x24BEDB630](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

std::bad_cast *__cdecl std::bad_cast::bad_cast(std::bad_cast *this)
{
  return (std::bad_cast *)MEMORY[0x24BEDB648](this);
}

void std::bad_cast::~bad_cast(std::bad_cast *this)
{
  MEMORY[0x24BEDB658](this);
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x24BEDB660](this);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

std::exception_ptr std::current_exception(void)
{
  return (std::exception_ptr)MEMORY[0x24BEDB6A0]();
}

void std::rethrow_exception(std::exception_ptr a1)
{
  MEMORY[0x24BEDB6A8](a1.__ptr_);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete(void *__p)
{
  off_24C3F19F0(__p);
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  off_24C3F19F8(__p, a2);
}

uint64_t operator delete()
{
  return off_24C3F1A00();
}

void *__cdecl operator new[](size_t __sz, std::align_val_t a2)
{
  return (void *)off_24C3F1A08(__sz, a2);
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24C3F1A10(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_24C3F1A18(__sz, a2);
}

uint64_t operator new()
{
  return off_24C3F1A20();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x24BEDB938](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x24BDAC7B8](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x24BEDB968](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x24BDAC7D8](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x24BDAC890](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x24BDAC898](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC938](*(_QWORD *)&a1);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _os_log_pack_fill()
{
  return MEMORY[0x24BDACB98]();
}

uint64_t _os_log_pack_size()
{
  return MEMORY[0x24BDACBA0]();
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x24BDACBA8]();
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

int accept(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x24BDAD030](*(_QWORD *)&a1, a2, a3);
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x24BDAD108](__x);
  return result;
}

float acosf(float a1)
{
  float result;

  MEMORY[0x24BDAD110](a1);
  return result;
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x24BDAD188](__x);
  return result;
}

float asinf(float a1)
{
  float result;

  MEMORY[0x24BDAD190](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x24BDAD258](a1);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x24BDAD2C8](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x24BDADA10](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x24BDADC58](object);
}

void dispatch_group_async_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x24BDADDC0](group, queue, context, work);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADDF0](group, timeout);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEC8](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
  MEMORY[0x24BDADF60](object, queue);
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x24BDADFF0](queue, context, work);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x24BDAE018](label);
}

void dispatch_workloop_set_os_workgroup(dispatch_workloop_t workloop, os_workgroup_t workgroup)
{
  MEMORY[0x24BDAE038](workloop, workgroup);
}

uint64_t dispatch_workloop_set_qos_class_floor()
{
  return MEMORY[0x24BDAE040]();
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x24BDAE048]();
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x24BDAE058](a1, a2);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x24BDAE2E8](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x24BDAE440](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void freeaddrinfo(addrinfo *a1)
{
  MEMORY[0x24BDAE458](a1);
}

int getaddrinfo(const char *a1, const char *a2, const addrinfo *a3, addrinfo **a4)
{
  return MEMORY[0x24BDAE5A0](a1, a2, a3, a4);
}

pid_t getpid(void)
{
  return MEMORY[0x24BDAE6D0]();
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x24BDAE770](*(_QWORD *)&a1, a2, a3);
}

int getsockopt(int a1, int a2, int a3, void *a4, socklen_t *a5)
{
  return MEMORY[0x24BDAE778](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4, a5);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x24BDAE8B0](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int listen(int a1, int a2)
{
  return MEMORY[0x24BDAEA78](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x24BDAEA90]();
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x24BDAEAA0](a1, a2);
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x24BDAEB48]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x24BDAEC68](info);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x24BDAED80](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x24BDAF010](__rqtp, __rmtp);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

uint64_t os_log_pack_send()
{
  return MEMORY[0x24BDAF378]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x24BDAF3F0](object);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x24BDAF818](a1, a2, a3, a4);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x24BDAF978]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x24BDAF998](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x24BDAF9A8](a1, a2);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x24BDAFAE0](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int sched_yield(void)
{
  return MEMORY[0x24BDAFC68]();
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x24BDAFC70](*(_QWORD *)&a1, a2, a3, a4, a5);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x24BDAFCE8](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x24BDAFD78](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4, *(_QWORD *)&a5);
}

int shutdown(int a1, int a2)
{
  return MEMORY[0x24BDAFDB0](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x24BDAFE50](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFEA0](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFEE8](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x24BDAFF28](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFFA8](__s, *(_QWORD *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFFC8](__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x24BDAFFD0](a1, a2);
  return result;
}

float strtof(const char *a1, char **a2)
{
  float result;

  MEMORY[0x24BDAFFE0](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0000](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0010](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0040](__str, __endptr, *(_QWORD *)&__base);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x24BDB0380](*(_QWORD *)&target_task, address, size, *(_QWORD *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x24BDB0390](*(_QWORD *)&target_task, address, size);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x24BDB0448](__str, __size, __format, a4);
}

