_OWORD *initializeWithTake for ReferenceRange(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(_OWORD *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  _OWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  char *__dst;
  uint64_t v59;
  unsigned int (*v60)(_OWORD *, uint64_t, uint64_t);
  unsigned int (*v61)(_OWORD *, uint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v6 = type metadata accessor for Quantity();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    *(_QWORD *)((char *)a1 + 13) = *(_QWORD *)((char *)a2 + 13);
    *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
    v10 = *(int *)(v6 + 28);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_224F675D4();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 32));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v16 = a3[5];
  v17 = (_OWORD *)((char *)a1 + v16);
  v18 = (_OWORD *)((char *)a2 + v16);
  if (v8((_OWORD *)((char *)a2 + v16), 1, v6))
  {
    sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v60 = v8;
    v63 = v7;
    *v17 = *v18;
    *(_QWORD *)((char *)v17 + 13) = *(_QWORD *)((char *)v18 + 13);
    *(_OWORD *)((char *)v17 + 24) = *(_OWORD *)((char *)v18 + 24);
    *(_OWORD *)((char *)v17 + 40) = *(_OWORD *)((char *)v18 + 40);
    v20 = *(int *)(v6 + 28);
    v21 = (char *)v17 + v20;
    v22 = (char *)v18 + v20;
    v23 = sub_224F675D4();
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    *(_OWORD *)((char *)v17 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v18 + *(int *)(v6 + 32));
    v7 = v63;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v17, 0, 1, v6);
    v8 = v60;
  }
  v26 = a3[6];
  v27 = a3[7];
  v28 = (char *)a1 + v26;
  v29 = (char *)a2 + v26;
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
  v30 = (char *)a1 + v27;
  v31 = (char *)a2 + v27;
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
  v32 = a3[8];
  v33 = a3[9];
  v34 = (char *)a1 + v32;
  v35 = (char *)a2 + v32;
  v36 = *(_OWORD *)v35;
  *((_QWORD *)v34 + 2) = *((_QWORD *)v35 + 2);
  *(_OWORD *)v34 = v36;
  v37 = (_OWORD *)((char *)a1 + v33);
  v38 = (_OWORD *)((char *)a2 + v33);
  v39 = type metadata accessor for Range();
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    sub_224E63218(0, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v59 = v40;
    if (v8(v38, 1, v6))
    {
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v61 = v8;
      v64 = v7;
      *v37 = *v38;
      *(_QWORD *)((char *)v37 + 13) = *(_QWORD *)((char *)v38 + 13);
      *(_OWORD *)((char *)v37 + 24) = *(_OWORD *)((char *)v38 + 24);
      *(_OWORD *)((char *)v37 + 40) = *(_OWORD *)((char *)v38 + 40);
      v43 = *(int *)(v6 + 28);
      __dst = (char *)v37 + v43;
      v44 = (char *)v38 + v43;
      v45 = sub_224F675D4();
      v46 = *(_QWORD *)(v45 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
      {
        sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(__dst, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v46 + 32))(__dst, v44, v45);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(__dst, 0, 1, v45);
      }
      *(_OWORD *)((char *)v37 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v38 + *(int *)(v6 + 32));
      v7 = v64;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v37, 0, 1, v6);
      v8 = v61;
    }
    v48 = *(int *)(v39 + 20);
    v49 = (_OWORD *)((char *)v37 + v48);
    v50 = (_OWORD *)((char *)v38 + v48);
    if (v8(v50, 1, v6))
    {
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      *v49 = *v50;
      *(_QWORD *)((char *)v49 + 13) = *(_QWORD *)((char *)v50 + 13);
      *(_OWORD *)((char *)v49 + 24) = *(_OWORD *)((char *)v50 + 24);
      *(_OWORD *)((char *)v49 + 40) = *(_OWORD *)((char *)v50 + 40);
      v52 = *(int *)(v6 + 28);
      v62 = (char *)v49 + v52;
      v65 = v7;
      v53 = (char *)v50 + v52;
      v54 = sub_224F675D4();
      v57 = *(_QWORD *)(v54 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v53, 1, v54))
      {
        sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(v62, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v62, v53, v54);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v62, 0, 1, v54);
      }
      *(_OWORD *)((char *)v49 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v50 + *(int *)(v6 + 32));
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v49, 0, 1, v6);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v37, 0, 1, v39);
  }
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  return a1;
}

_QWORD *assignWithTake for ReferenceRange(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(char *, uint64_t, uint64_t);
  int v53;
  uint64_t v54;
  size_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(_QWORD *, uint64_t, uint64_t);
  int v81;
  int v82;
  uint64_t v83;
  size_t v84;
  void *v85;
  const void *v86;
  unsigned int (*v87)(_OWORD *, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t, uint64_t);
  int v90;
  int v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  _OWORD *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t (*v124)(char *, uint64_t, uint64_t);
  int v125;
  uint64_t v126;
  size_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t (*v154)(void *, uint64_t, uint64_t);
  int v155;
  uint64_t v156;
  size_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void (**v167)(void *, const void *, uint64_t);
  char *__src;
  void *__srca;
  int *v170;
  int *v171;
  int *v172;
  int *v173;
  int *v174;
  int *v175;
  uint64_t (*__dst)(_QWORD *, uint64_t, uint64_t);
  char *__dsta;
  void *__dstb;
  _QWORD *v179;

  v6 = type metadata accessor for Quantity();
  v179 = *(_QWORD **)(v6 - 8);
  v7 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v179[6];
  v8 = v7(a1, 1, v6);
  v9 = v7(a2, 1, v6);
  __dst = v7;
  if (!v8)
  {
    if (v9)
    {
      sub_224DDEAA0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
LABEL_6:
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      goto LABEL_18;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)((char *)a1 + 13) = *(_QWORD *)((char *)a2 + 13);
    v17 = a2[4];
    a1[3] = a2[3];
    a1[4] = v17;
    swift_bridgeObjectRelease();
    v18 = a2[6];
    a1[5] = a2[5];
    a1[6] = v18;
    swift_bridgeObjectRelease();
    v19 = *(int *)(v6 + 28);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = sub_224F675D4();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
    v25 = v24(v20, 1, v22);
    v26 = v24(v21, 1, v22);
    if (v25)
    {
      if (!v26)
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_17:
        v7 = __dst;
        v28 = *(int *)(v6 + 32);
        v29 = (_QWORD *)((char *)a1 + v28);
        v30 = (_QWORD *)((char *)a2 + v28);
        v32 = *v30;
        v31 = v30[1];
        *v29 = v32;
        v29[1] = v31;
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
    else
    {
      if (!v26)
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v20, v21, v22);
        goto LABEL_17;
      }
      (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    }
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_17;
  }
  if (v9)
    goto LABEL_6;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)((char *)a1 + 13) = *(_QWORD *)((char *)a2 + 13);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  v11 = *(int *)(v6 + 28);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_224F675D4();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  *(_OWORD *)((char *)a1 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 32));
  ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v179[7])(a1, 0, 1, v6);
LABEL_18:
  v33 = a3[5];
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  v36 = v7((_QWORD *)((char *)a1 + v33), 1, v6);
  v37 = v7(v35, 1, v6);
  if (!v36)
  {
    if (v37)
    {
      sub_224DDEAA0((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
LABEL_23:
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      goto LABEL_38;
    }
    v170 = a3;
    *(_OWORD *)v34 = *(_OWORD *)v35;
    *(_QWORD *)((char *)v34 + 13) = *(_QWORD *)((char *)v35 + 13);
    v45 = v35[4];
    v34[3] = v35[3];
    v34[4] = v45;
    swift_bridgeObjectRelease();
    v46 = v35[6];
    v34[5] = v35[5];
    v34[6] = v46;
    swift_bridgeObjectRelease();
    v47 = *(int *)(v6 + 28);
    v48 = (char *)v34 + v47;
    v49 = (char *)v35 + v47;
    v50 = sub_224F675D4();
    v51 = *(_QWORD *)(v50 - 8);
    v52 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 48);
    v166 = v48;
    LODWORD(v48) = v52(v48, 1, v50);
    v53 = v52(v49, 1, v50);
    if ((_DWORD)v48)
    {
      if (!v53)
      {
        (*(void (**)(void *, char *, uint64_t))(v51 + 32))(v166, v49, v50);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v166, 0, 1, v50);
        goto LABEL_37;
      }
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v55 = *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64);
      v56 = v166;
    }
    else
    {
      if (!v53)
      {
        (*(void (**)(void *, char *, uint64_t))(v51 + 40))(v166, v49, v50);
        goto LABEL_37;
      }
      (*(void (**)(void *, uint64_t))(v51 + 8))(v166, v50);
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v55 = *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64);
      v56 = v166;
    }
    memcpy(v56, v49, v55);
LABEL_37:
    a3 = v170;
    v58 = *(int *)(v6 + 32);
    v59 = (_QWORD *)((char *)v34 + v58);
    v60 = (_QWORD *)((char *)v35 + v58);
    v62 = *v60;
    v61 = v60[1];
    *v59 = v62;
    v59[1] = v61;
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  if (v37)
    goto LABEL_23;
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *(_QWORD *)((char *)v34 + 13) = *(_QWORD *)((char *)v35 + 13);
  *(_OWORD *)(v34 + 3) = *(_OWORD *)(v35 + 3);
  *(_OWORD *)(v34 + 5) = *(_OWORD *)(v35 + 5);
  v39 = *(int *)(v6 + 28);
  v40 = (char *)v34 + v39;
  v41 = (char *)v35 + v39;
  v42 = sub_224F675D4();
  v43 = *(_QWORD *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v40, v41, v42);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  }
  *(_OWORD *)((char *)v34 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v35 + *(int *)(v6 + 32));
  ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v179[7])(v34, 0, 1, v6);
LABEL_38:
  v63 = a3[6];
  v64 = (uint64_t)a1 + v63;
  v65 = (char *)a2 + v63;
  if (*(_QWORD *)((char *)a1 + v63 + 8) == 1)
  {
LABEL_41:
    *(_OWORD *)v64 = *(_OWORD *)v65;
    *(_QWORD *)(v64 + 16) = *((_QWORD *)v65 + 2);
    goto LABEL_43;
  }
  v66 = *((_QWORD *)v65 + 1);
  if (v66 == 1)
  {
    sub_224E2C9C0(v64);
    goto LABEL_41;
  }
  *(_QWORD *)v64 = *(_QWORD *)v65;
  *(_QWORD *)(v64 + 8) = v66;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v64 + 16) = *((_QWORD *)v65 + 2);
  swift_bridgeObjectRelease();
LABEL_43:
  v67 = a3[7];
  v68 = (uint64_t)a1 + v67;
  v69 = (char *)a2 + v67;
  if (*(_QWORD *)((char *)a1 + v67 + 8) == 1)
  {
LABEL_46:
    *(_OWORD *)v68 = *(_OWORD *)v69;
    *(_QWORD *)(v68 + 16) = *((_QWORD *)v69 + 2);
    goto LABEL_48;
  }
  v70 = *((_QWORD *)v69 + 1);
  if (v70 == 1)
  {
    sub_224E2C9C0(v68);
    goto LABEL_46;
  }
  *(_QWORD *)v68 = *(_QWORD *)v69;
  *(_QWORD *)(v68 + 8) = v70;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v68 + 16) = *((_QWORD *)v69 + 2);
  swift_bridgeObjectRelease();
LABEL_48:
  v71 = a3[8];
  v72 = (uint64_t)a1 + v71;
  v73 = (char *)a2 + v71;
  if (*(_QWORD *)((char *)a1 + v71 + 8) == 1)
  {
LABEL_51:
    *(_OWORD *)v72 = *(_OWORD *)v73;
    *(_QWORD *)(v72 + 16) = *((_QWORD *)v73 + 2);
    goto LABEL_53;
  }
  v74 = *((_QWORD *)v73 + 1);
  if (v74 == 1)
  {
    sub_224E2C9C0(v72);
    goto LABEL_51;
  }
  *(_QWORD *)v72 = *(_QWORD *)v73;
  *(_QWORD *)(v72 + 8) = v74;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v72 + 16) = *((_QWORD *)v73 + 2);
  swift_bridgeObjectRelease();
LABEL_53:
  v75 = a3[9];
  v76 = (_QWORD *)((char *)a1 + v75);
  v77 = (_QWORD *)((char *)a2 + v75);
  v78 = type metadata accessor for Range();
  v79 = *(_QWORD *)(v78 - 8);
  v80 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v79 + 48);
  v81 = v80(v76, 1, v78);
  v82 = v80(v77, 1, v78);
  if (!v81)
  {
    if (v82)
    {
      sub_224DDEAA0((uint64_t)v76, (uint64_t (*)(_QWORD))type metadata accessor for Range);
LABEL_58:
      sub_224E63218(0, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
      v84 = *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64);
      v85 = v76;
      v86 = v77;
LABEL_59:
      memcpy(v85, v86, v84);
      goto LABEL_81;
    }
    v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dst;
    v90 = __dst(v76, 1, v6);
    v91 = __dst(v77, 1, v6);
    if (v90)
    {
      if (v91)
        goto LABEL_69;
      v172 = a3;
      *(_OWORD *)v76 = *(_OWORD *)v77;
      *(_QWORD *)((char *)v76 + 13) = *(_QWORD *)((char *)v77 + 13);
      *(_OWORD *)(v76 + 3) = *(_OWORD *)(v77 + 3);
      *(_OWORD *)(v76 + 5) = *(_OWORD *)(v77 + 5);
      v98 = *(int *)(v6 + 28);
      v99 = (char *)v76 + v98;
      v100 = (char *)v77 + v98;
      v101 = sub_224F675D4();
      v102 = *(_QWORD *)(v101 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
      {
        sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v99, v100, v101);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v99, 0, 1, v101);
      }
      *(_OWORD *)((char *)v76 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v77 + *(int *)(v6 + 32));
      ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v179[7])(v76, 0, 1, v6);
      a3 = v172;
      v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dst;
LABEL_93:
      v135 = *(int *)(v78 + 20);
      v136 = (uint64_t)v76 + v135;
      v137 = (_QWORD *)((char *)v77 + v135);
      v138 = v89(v136, 1, v6);
      v139 = v89((uint64_t)v137, 1, v6);
      if (v138)
      {
        if (!v139)
        {
          *(_OWORD *)v136 = *(_OWORD *)v137;
          *(_QWORD *)(v136 + 13) = *(_QWORD *)((char *)v137 + 13);
          *(_OWORD *)(v136 + 24) = *(_OWORD *)(v137 + 3);
          *(_OWORD *)(v136 + 40) = *(_OWORD *)(v137 + 5);
          v141 = *(int *)(v6 + 28);
          v142 = (void *)(v136 + v141);
          v143 = (char *)v137 + v141;
          v144 = sub_224F675D4();
          v145 = *(_QWORD *)(v144 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v143, 1, v144))
          {
            sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
            memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, char *, uint64_t))(v145 + 32))(v142, v143, v144);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v145 + 56))(v142, 0, 1, v144);
          }
          *(_OWORD *)(v136 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v137 + *(int *)(v6 + 32));
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v179[7])(v136, 0, 1, v6);
          goto LABEL_81;
        }
LABEL_98:
        sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
        v84 = *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64);
        v85 = (void *)v136;
        v86 = v137;
        goto LABEL_59;
      }
      if (v139)
      {
        sub_224DDEAA0(v136, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
        goto LABEL_98;
      }
      v175 = a3;
      *(_OWORD *)v136 = *(_OWORD *)v137;
      *(_QWORD *)(v136 + 13) = *(_QWORD *)((char *)v137 + 13);
      v147 = v137[4];
      *(_QWORD *)(v136 + 24) = v137[3];
      *(_QWORD *)(v136 + 32) = v147;
      swift_bridgeObjectRelease();
      v148 = v137[6];
      *(_QWORD *)(v136 + 40) = v137[5];
      *(_QWORD *)(v136 + 48) = v148;
      swift_bridgeObjectRelease();
      v149 = *(int *)(v6 + 28);
      v150 = (void *)(v136 + v149);
      v151 = (char *)v137 + v149;
      v152 = sub_224F675D4();
      v153 = *(_QWORD *)(v152 - 8);
      v154 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v153 + 48);
      __dstb = v150;
      LODWORD(v150) = v154(v150, 1, v152);
      v155 = v154(v151, 1, v152);
      if ((_DWORD)v150)
      {
        if (!v155)
        {
          (*(void (**)(void *, char *, uint64_t))(v153 + 32))(__dstb, v151, v152);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v153 + 56))(__dstb, 0, 1, v152);
          goto LABEL_111;
        }
        sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        v157 = *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64);
        v158 = __dstb;
      }
      else
      {
        if (!v155)
        {
          (*(void (**)(void *, char *, uint64_t))(v153 + 40))(__dstb, v151, v152);
          goto LABEL_111;
        }
        (*(void (**)(void *, uint64_t))(v153 + 8))(__dstb, v152);
        sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        v157 = *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64);
        v158 = __dstb;
      }
      memcpy(v158, v151, v157);
LABEL_111:
      a3 = v175;
      v160 = *(int *)(v6 + 32);
      v161 = (_QWORD *)(v136 + v160);
      v162 = (_QWORD *)((char *)v137 + v160);
      v164 = *v162;
      v163 = v162[1];
      *v161 = v164;
      v161[1] = v163;
      swift_bridgeObjectRelease();
      goto LABEL_81;
    }
    if (v91)
    {
      sub_224DDEAA0((uint64_t)v76, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
LABEL_69:
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
      goto LABEL_93;
    }
    v174 = a3;
    *(_OWORD *)v76 = *(_OWORD *)v77;
    *(_QWORD *)((char *)v76 + 13) = *(_QWORD *)((char *)v77 + 13);
    v118 = v77[4];
    v76[3] = v77[3];
    v76[4] = v118;
    swift_bridgeObjectRelease();
    v119 = v77[6];
    v76[5] = v77[5];
    v76[6] = v119;
    swift_bridgeObjectRelease();
    v120 = *(int *)(v6 + 28);
    v121 = (char *)v76 + v120;
    v122 = (char *)v77 + v120;
    v123 = sub_224F675D4();
    v165 = *(_QWORD *)(v123 - 8);
    v124 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v165 + 48);
    __srca = v121;
    LODWORD(v121) = v124(v121, 1, v123);
    v125 = v124(v122, 1, v123);
    if ((_DWORD)v121)
    {
      if (!v125)
      {
        (*(void (**)(void *, char *, uint64_t))(v165 + 32))(__srca, v122, v123);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v165 + 56))(__srca, 0, 1, v123);
        goto LABEL_92;
      }
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v127 = *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64);
      v128 = __srca;
    }
    else
    {
      if (!v125)
      {
        (*(void (**)(void *, char *, uint64_t))(v165 + 40))(__srca, v122, v123);
        goto LABEL_92;
      }
      (*(void (**)(void *, uint64_t))(v165 + 8))(__srca, v123);
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v127 = *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64);
      v128 = __srca;
    }
    memcpy(v128, v122, v127);
LABEL_92:
    v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dst;
    v130 = *(int *)(v6 + 32);
    v131 = (_QWORD *)((char *)v76 + v130);
    v132 = (_QWORD *)((char *)v77 + v130);
    v134 = *v132;
    v133 = v132[1];
    *v131 = v134;
    v131[1] = v133;
    swift_bridgeObjectRelease();
    a3 = v174;
    goto LABEL_93;
  }
  if (v82)
    goto LABEL_58;
  v87 = (unsigned int (*)(_OWORD *, uint64_t, uint64_t))__dst;
  if (__dst(v77, 1, v6))
  {
    sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v76 = *(_OWORD *)v77;
    *(_QWORD *)((char *)v76 + 13) = *(_QWORD *)((char *)v77 + 13);
    *(_OWORD *)(v76 + 3) = *(_OWORD *)(v77 + 3);
    *(_OWORD *)(v76 + 5) = *(_OWORD *)(v77 + 5);
    v92 = *(int *)(v6 + 28);
    __src = (char *)v76 + v92;
    v171 = a3;
    v93 = (char *)v77 + v92;
    v94 = sub_224F675D4();
    v95 = *(_QWORD *)(v94 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(__src, v93, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(__src, v93, v94);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(__src, 0, 1, v94);
    }
    *(_OWORD *)((char *)v76 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v77 + *(int *)(v6 + 32));
    ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v179[7])(v76, 0, 1, v6);
    a3 = v171;
    v87 = (unsigned int (*)(_OWORD *, uint64_t, uint64_t))__dst;
  }
  v104 = *(int *)(v78 + 20);
  v105 = (_OWORD *)((char *)v76 + v104);
  v106 = (_OWORD *)((char *)v77 + v104);
  if (v87(v106, 1, v6))
  {
    sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
  }
  else
  {
    *v105 = *v106;
    *(_QWORD *)((char *)v105 + 13) = *(_QWORD *)((char *)v106 + 13);
    *(_OWORD *)((char *)v105 + 24) = *(_OWORD *)((char *)v106 + 24);
    *(_OWORD *)((char *)v105 + 40) = *(_OWORD *)((char *)v106 + 40);
    v108 = *(int *)(v6 + 28);
    v173 = a3;
    __dsta = (char *)v105 + v108;
    v109 = (char *)v106 + v108;
    v110 = sub_224F675D4();
    v167 = *(void (***)(void *, const void *, uint64_t))(v110 - 8);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v167[6])(v109, 1, v110))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(__dsta, v109, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      v167[4](__dsta, v109, v110);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v167[7])(__dsta, 0, 1, v110);
    }
    a3 = v173;
    *(_OWORD *)((char *)v105 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v106 + *(int *)(v6 + 32));
    ((void (*)(_OWORD *, _QWORD, uint64_t, uint64_t))v179[7])(v105, 0, 1, v6);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
LABEL_81:
  v112 = a3[10];
  v113 = (_QWORD *)((char *)a1 + v112);
  v114 = (_QWORD *)((char *)a2 + v112);
  v116 = *v114;
  v115 = v114[1];
  *v113 = v116;
  v113[1] = v115;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReferenceRange()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F0EB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  sub_224E63218(0, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 36);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 40) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 1;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for ReferenceRange()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_224F0EC20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
LABEL_5:
    v11(v12, a2, a2, v10);
    return;
  }
  sub_224E63218(0, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 40) + 8) = a2;
}

void sub_224F0ECE8()
{
  unint64_t v0;
  unint64_t v1;

  sub_224E63218(319, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  if (v0 <= 0x3F)
  {
    sub_224E63218(319, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for ReferenceRange.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_224F0EDF0 + 4 * byte_224F7368C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_224F0EE24 + 4 * byte_224F73687[v4]))();
}

uint64_t sub_224F0EE24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F0EE2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224F0EE34);
  return result;
}

uint64_t sub_224F0EE40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224F0EE48);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_224F0EE4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F0EE54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReferenceRange.CodingKeys()
{
  return &type metadata for ReferenceRange.CodingKeys;
}

unint64_t sub_224F0EE74()
{
  unint64_t result;

  result = qword_2557E35C8;
  if (!qword_2557E35C8)
  {
    result = MEMORY[0x22768ED24](&unk_224F73894, &type metadata for ReferenceRange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E35C8);
  }
  return result;
}

unint64_t sub_224F0EEBC()
{
  unint64_t result;

  result = qword_2557E35D0;
  if (!qword_2557E35D0)
  {
    result = MEMORY[0x22768ED24](&unk_224F73804, &type metadata for ReferenceRange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E35D0);
  }
  return result;
}

unint64_t sub_224F0EF04()
{
  unint64_t result;

  result = qword_2557E35D8;
  if (!qword_2557E35D8)
  {
    result = MEMORY[0x22768ED24](&unk_224F7382C, &type metadata for ReferenceRange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E35D8);
  }
  return result;
}

uint64_t sub_224F0EF48(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7827308 && a2 == 0xE300000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1751607656 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x547365696C707061 && a2 == 0xE90000000000006FLL || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x676E696E61656DLL && a2 == 0xE700000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 6645601 && a2 == 0xE300000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

void sub_224F0F1E8(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    sub_224E63218(255, a3, a4);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_224F0F248(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v5;

  sub_224F0F1E8(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

id Period.asMedicalDateInterval()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  id v69;
  void *v70;
  id v71;
  void *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  id v79[2];

  v79[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = sub_224F6743C();
  v2 = MEMORY[0x24BDAC7A8](v1);
  v77 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v76 = (char *)&v73 - v5;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v74 = (char *)&v73 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v75 = (char *)&v73 - v8;
  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v73 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v73 - v16;
  v18 = type metadata accessor for FHIRDateTime();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v73 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v73 - v26;
  sub_224F0F8C4(v0, (uint64_t)v17);
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v28(v17, 1, v18) != 1)
  {
    sub_224EEED44((uint64_t)v17, (uint64_t)v27);
    v31 = type metadata accessor for Period();
    sub_224F0F8C4(v0 + *(int *)(v31 + 20), (uint64_t)v15);
    if (v28(v15, 1, v18) == 1)
    {
      sub_224F0F918((uint64_t)v15);
      v32 = v78;
      if (*((_QWORD *)v27 + 7) == 1)
      {
        if ((v27[19] & 1) != 0)
        {
          if (v27[17])
            v33 = 3;
          else
            v33 = 2;
        }
        else
        {
          v33 = 1;
        }
      }
      else
      {
        v33 = 0;
      }
      v39 = sub_224EFFB58();
      v40 = (uint64_t)v76;
      FHIRDateTime.asDateComponents()();
      v41 = (uint64_t *)&v27[*(int *)(v18 + 32)];
      v43 = *v41;
      v42 = v41[1];
      swift_bridgeObjectRetain();
      v44 = v42;
      v30 = (id)v39;
      v45 = sub_224F00474(v40, v43, v44, v33);
      if (!v32)
      {
        v46 = v45;
        v30 = objc_msgSend((id)objc_opt_self(), sel_medicalDateIntervalWithStartDate_, v45);

        sub_224DDEAA0((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        return v30;
      }
    }
    else
    {
      v36 = (uint64_t)v25;
      sub_224EEED44((uint64_t)v15, (uint64_t)v25);
      v37 = v78;
      if (*((_QWORD *)v27 + 7) == 1)
      {
        if ((v27[19] & 1) != 0)
        {
          if (v27[17])
            v38 = 3;
          else
            v38 = 2;
        }
        else
        {
          v38 = 1;
        }
      }
      else
      {
        v38 = 0;
      }
      v55 = sub_224EFFB58();
      v56 = (uint64_t)v75;
      FHIRDateTime.asDateComponents()();
      v57 = (uint64_t *)&v27[*(int *)(v18 + 32)];
      v59 = *v57;
      v58 = v57[1];
      swift_bridgeObjectRetain();
      v60 = v58;
      v30 = (id)v55;
      v61 = sub_224F00474(v56, v59, v60, v38);
      if (!v37)
      {
        v62 = v61;
        if (*((_QWORD *)v25 + 7) == 1)
        {
          if ((v25[19] & 1) != 0)
          {
            if (v25[17])
              v63 = 3;
            else
              v63 = 2;
          }
          else
          {
            v63 = 1;
          }
        }
        else
        {
          v63 = 0;
        }
        v64 = (uint64_t)v74;
        FHIRDateTime.asDateComponents()();
        v65 = (uint64_t *)(v36 + *(int *)(v18 + 32));
        v67 = *v65;
        v66 = v65[1];
        swift_bridgeObjectRetain();
        v69 = sub_224F00474(v64, v67, v66, v63);
        v70 = (void *)objc_opt_self();
        v79[0] = 0;
        v30 = objc_msgSend(v70, sel_medicalDateIntervalWithStartDate_endDate_error_, v62, v69, v79);
        v71 = v79[0];
        if (v30)
        {

          sub_224DDEAA0(v36, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
          sub_224DDEAA0((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
          return v30;
        }
        v72 = v71;
        sub_224F67544();

        swift_willThrow();
      }
      sub_224DDEAA0(v36, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    }
LABEL_41:
    sub_224DDEAA0((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    return v30;
  }
  sub_224F0F918((uint64_t)v17);
  v29 = type metadata accessor for Period();
  sub_224F0F8C4(v0 + *(int *)(v29 + 20), (uint64_t)v12);
  if (v28(v12, 1, v18) != 1)
  {
    sub_224EEED44((uint64_t)v12, (uint64_t)v22);
    v34 = v78;
    if (*((_QWORD *)v22 + 7) == 1)
    {
      if ((v22[19] & 1) != 0)
      {
        if (v22[17])
          v35 = 3;
        else
          v35 = 2;
      }
      else
      {
        v35 = 1;
      }
    }
    else
    {
      v35 = 0;
    }
    v47 = sub_224EFFB58();
    v48 = (uint64_t)v77;
    FHIRDateTime.asDateComponents()();
    v49 = (uint64_t *)&v22[*(int *)(v18 + 32)];
    v51 = *v49;
    v50 = v49[1];
    swift_bridgeObjectRetain();
    v52 = v50;
    v30 = (id)v47;
    v53 = sub_224F00474(v48, v51, v52, v35);
    if (!v34)
    {
      v54 = v53;
      v30 = objc_msgSend((id)objc_opt_self(), sel_medicalDateIntervalWithEndDate_, v53);

      sub_224DDEAA0((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      return v30;
    }
    v27 = v22;
    goto LABEL_41;
  }
  sub_224F0F918((uint64_t)v12);
  return 0;
}

uint64_t sub_224F0F8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_224F0F918(uint64_t a1)
{
  uint64_t v2;

  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for Period()
{
  uint64_t result;

  result = qword_2557E3668;
  if (!qword_2557E3668)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Period.start.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_224F0F8C4(v1, a1);
}

uint64_t Period.end.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Period() + 20);
  return sub_224F0F8C4(v3, a1);
}

uint64_t Period.hash(into:)()
{
  sub_224DF2AC8();
  type metadata accessor for Period();
  return sub_224DF2AC8();
}

uint64_t sub_224F0FA18()
{
  _BYTE *v0;

  if (*v0)
    return 6581861;
  else
    return 0x7472617473;
}

uint64_t sub_224F0FA48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224F12324(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224F0FA6C()
{
  sub_224F10494();
  return sub_224F685B8();
}

uint64_t sub_224F0FA94()
{
  sub_224F10494();
  return sub_224F685C4();
}

uint64_t Period.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  sub_224F104D8(0, &qword_2557E35E8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F10494();
  sub_224F68594();
  v9[15] = 0;
  type metadata accessor for FHIRDateTime();
  sub_224DDACD4(&qword_2557E0748, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
  sub_224F68330();
  if (!v1)
  {
    type metadata accessor for Period();
    v9[14] = 1;
    sub_224F68330();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Period.hashValue.getter()
{
  sub_224F68510();
  sub_224DF2AC8();
  type metadata accessor for Period();
  sub_224DF2AC8();
  return sub_224F6854C();
}

uint64_t Period.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char v29;
  char v30;

  v25 = a2;
  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v26 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v27 = (char *)&v21 - v7;
  sub_224F104D8(0, &qword_2557E35F8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v28 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - v10;
  v12 = type metadata accessor for Period();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F10494();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v23 = v14;
  v24 = a1;
  v22 = v12;
  v15 = v26;
  type metadata accessor for FHIRDateTime();
  v30 = 0;
  sub_224DDACD4(&qword_2557E04F0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
  v17 = (uint64_t)v27;
  v16 = v28;
  sub_224F68294();
  sub_224F10534(v17, (uint64_t)v23);
  v29 = 1;
  v18 = (uint64_t)v15;
  sub_224F68294();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v16);
  v19 = (uint64_t)v23;
  sub_224F10534(v18, (uint64_t)&v23[*(int *)(v22 + 20)]);
  sub_224F10588(v19, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return sub_224DDEAA0(v19, (uint64_t (*)(_QWORD))type metadata accessor for Period);
}

uint64_t sub_224F0FF2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Period.init(from:)(a1, a2);
}

uint64_t sub_224F0FF40(_QWORD *a1)
{
  return Period.encode(to:)(a1);
}

uint64_t sub_224F0FF54()
{
  sub_224F68510();
  sub_224DF2AC8();
  sub_224DF2AC8();
  return sub_224F6854C();
}

uint64_t sub_224F0FFA4()
{
  sub_224DF2AC8();
  return sub_224DF2AC8();
}

uint64_t sub_224F0FFE0()
{
  sub_224F68510();
  sub_224DF2AC8();
  sub_224DF2AC8();
  return sub_224F6854C();
}

BOOL _s23HealthRecordsExtraction6PeriodV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = type metadata accessor for FHIRDateTime();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v45 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F123FC();
  v8 = v7;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v50 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v43 - v11;
  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v44 = (uint64_t)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v46 = (uint64_t)&v43 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v48 = (uint64_t)&v43 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v43 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v43 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v43 - v26;
  v47 = a1;
  sub_224F0F8C4(a1, (uint64_t)&v43 - v26);
  v49 = a2;
  sub_224F0F8C4(a2, (uint64_t)v25);
  v28 = (uint64_t)&v12[*(int *)(v8 + 48)];
  sub_224F0F8C4((uint64_t)v27, (uint64_t)v12);
  sub_224F0F8C4((uint64_t)v25, v28);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v29((uint64_t)v12, 1, v4) != 1)
  {
    sub_224F0F8C4((uint64_t)v12, (uint64_t)v22);
    if (v29(v28, 1, v4) != 1)
    {
      v31 = v28;
      v32 = v45;
      sub_224EEED44(v31, v45);
      v33 = static FHIRDateTime.== infix(_:_:)(v22, v32);
      sub_224DDEAA0(v32, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      sub_224F0F918((uint64_t)v25);
      sub_224F0F918((uint64_t)v27);
      sub_224DDEAA0((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      sub_224F0F918((uint64_t)v12);
      if ((v33 & 1) == 0)
        return 0;
      goto LABEL_8;
    }
    sub_224F0F918((uint64_t)v25);
    sub_224F0F918((uint64_t)v27);
    sub_224DDEAA0((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_6:
    v30 = (uint64_t)v12;
LABEL_14:
    sub_224DDEAA0(v30, (uint64_t (*)(_QWORD))sub_224F123FC);
    return 0;
  }
  sub_224F0F918((uint64_t)v25);
  sub_224F0F918((uint64_t)v27);
  if (v29(v28, 1, v4) != 1)
    goto LABEL_6;
  sub_224F0F918((uint64_t)v12);
LABEL_8:
  v34 = type metadata accessor for Period();
  v35 = v48;
  sub_224F0F8C4(v47 + *(int *)(v34 + 20), v48);
  v36 = v46;
  sub_224F0F8C4(v49 + *(int *)(v34 + 20), v46);
  v37 = v50;
  v38 = v50 + *(int *)(v8 + 48);
  sub_224F0F8C4(v35, v50);
  sub_224F0F8C4(v36, v38);
  if (v29(v37, 1, v4) == 1)
  {
    sub_224F0F918(v36);
    sub_224F0F918(v35);
    if (v29(v38, 1, v4) == 1)
    {
      sub_224F0F918(v37);
      return 1;
    }
    goto LABEL_13;
  }
  v39 = v44;
  sub_224F0F8C4(v37, v44);
  if (v29(v38, 1, v4) == 1)
  {
    sub_224F0F918(v36);
    sub_224F0F918(v35);
    sub_224DDEAA0(v39, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_13:
    v30 = v37;
    goto LABEL_14;
  }
  v41 = v45;
  sub_224EEED44(v38, v45);
  v42 = static FHIRDateTime.== infix(_:_:)(v39, v41);
  sub_224DDEAA0(v41, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  sub_224F0F918(v36);
  sub_224F0F918(v35);
  sub_224DDEAA0(v39, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  sub_224F0F918(v37);
  return (v42 & 1) != 0;
}

unint64_t sub_224F10494()
{
  unint64_t result;

  result = qword_2557E35F0;
  if (!qword_2557E35F0)
  {
    result = MEMORY[0x22768ED24](&unk_224F73AE4, &type metadata for Period.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E35F0);
  }
  return result;
}

void sub_224F104D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224F10494();
    v7 = a3(a1, &type metadata for Period.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_224F10534(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_224F10588(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Period();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_224F105CC(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E04F8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
  a1[2] = sub_224DDACD4(&qword_2557E0750, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
  result = sub_224DDACD4(&qword_2557E3600, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
  a1[3] = result;
  return result;
}

uint64_t sub_224F10644()
{
  return sub_224DDACD4(&qword_2557E3608, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
}

uint64_t *initializeBufferWithCopyOfBuffer for Period(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  void (*v41)(_BYTE *, _QWORD, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for FHIRDateTime();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      a1[1] = a2[1];
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      v12 = a2[7];
      if (v12 == 1)
      {
        v13 = *(_OWORD *)(a2 + 5);
        *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 5) = v13;
        a1[7] = a2[7];
      }
      else
      {
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        *(_WORD *)((char *)a1 + 25) = *(_WORD *)((char *)a2 + 25);
        *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)((char *)a2 + 28);
        *((_DWORD *)a1 + 11) = *((_DWORD *)a2 + 11);
        a1[6] = a2[6];
        a1[7] = v12;
        swift_bridgeObjectRetain();
      }
      v14 = *(int *)(v7 + 28);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = sub_224F67874();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v20 = *(int *)(v7 + 32);
      v21 = (uint64_t *)((char *)a1 + v20);
      v22 = (uint64_t *)((char *)a2 + v20);
      v23 = v22[1];
      *v21 = *v22;
      v21[1] = v23;
      v24 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
      v24(a1, 0, 1, v7);
    }
    v25 = *(int *)(a3 + 20);
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    if (v9((uint64_t *)v27, 1, v7))
    {
      sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *v26 = *v27;
      *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
      *((_DWORD *)v26 + 4) = *((_DWORD *)v27 + 4);
      v29 = *((_QWORD *)v27 + 7);
      if (v29 == 1)
      {
        v30 = *(_OWORD *)(v27 + 40);
        *(_OWORD *)(v26 + 24) = *(_OWORD *)(v27 + 24);
        *(_OWORD *)(v26 + 40) = v30;
        *((_QWORD *)v26 + 7) = *((_QWORD *)v27 + 7);
      }
      else
      {
        v26[24] = v27[24];
        *(_WORD *)(v26 + 25) = *(_WORD *)(v27 + 25);
        *(_OWORD *)(v26 + 28) = *(_OWORD *)(v27 + 28);
        *((_DWORD *)v26 + 11) = *((_DWORD *)v27 + 11);
        *((_QWORD *)v26 + 6) = *((_QWORD *)v27 + 6);
        *((_QWORD *)v26 + 7) = v29;
        swift_bridgeObjectRetain();
      }
      v31 = *(int *)(v7 + 28);
      v32 = &v26[v31];
      v33 = &v27[v31];
      v34 = sub_224F67874();
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v35 + 16))(v32, v33, v34);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      v37 = *(int *)(v7 + 32);
      v38 = &v26[v37];
      v39 = &v27[v37];
      v40 = v39[1];
      *v38 = *v39;
      v38[1] = v40;
      v41 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
      v41(v26, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for Period(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for FHIRDateTime();
  v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48);
  if (!v5(a1, 1, v4))
  {
    if (*(_QWORD *)(a1 + 56) != 1)
      swift_bridgeObjectRelease();
    v6 = a1 + *(int *)(v4 + 28);
    v7 = sub_224F67874();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    swift_bridgeObjectRelease();
  }
  v9 = a1 + *(int *)(a2 + 20);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v9, 1, v4);
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(v9 + 56) != 1)
      swift_bridgeObjectRelease();
    v11 = v9 + *(int *)(v4 + 28);
    v12 = sub_224F67874();
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_BYTE *initializeWithCopy for Period(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(_BYTE *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(_BYTE *, _QWORD, uint64_t, uint64_t);

  v6 = type metadata accessor for FHIRDateTime();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    v10 = *((_QWORD *)a2 + 7);
    if (v10 == 1)
    {
      v11 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = v11;
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
    }
    else
    {
      a1[24] = a2[24];
      *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
      *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
      *((_DWORD *)a1 + 11) = *((_DWORD *)a2 + 11);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = v10;
      swift_bridgeObjectRetain();
    }
    v12 = *(int *)(v6 + 28);
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = sub_224F67874();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v18 = *(int *)(v6 + 32);
    v19 = &a1[v18];
    v20 = &a2[v18];
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    v22(a1, 0, 1, v6);
  }
  v23 = *(int *)(a3 + 20);
  v24 = &a1[v23];
  v25 = &a2[v23];
  if (v8(v25, 1, v6))
  {
    sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *v24 = *v25;
    *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
    *((_DWORD *)v24 + 4) = *((_DWORD *)v25 + 4);
    v27 = *((_QWORD *)v25 + 7);
    if (v27 == 1)
    {
      v28 = *(_OWORD *)(v25 + 40);
      *(_OWORD *)(v24 + 24) = *(_OWORD *)(v25 + 24);
      *(_OWORD *)(v24 + 40) = v28;
      *((_QWORD *)v24 + 7) = *((_QWORD *)v25 + 7);
    }
    else
    {
      v24[24] = v25[24];
      *(_WORD *)(v24 + 25) = *(_WORD *)(v25 + 25);
      *(_OWORD *)(v24 + 28) = *(_OWORD *)(v25 + 28);
      *((_DWORD *)v24 + 11) = *((_DWORD *)v25 + 11);
      *((_QWORD *)v24 + 6) = *((_QWORD *)v25 + 6);
      *((_QWORD *)v24 + 7) = v27;
      swift_bridgeObjectRetain();
    }
    v29 = *(int *)(v6 + 28);
    v30 = &v24[v29];
    v31 = &v25[v29];
    v32 = sub_224F67874();
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    v35 = *(int *)(v6 + 32);
    v36 = &v24[v35];
    v37 = &v25[v35];
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    v39(v24, 0, 1, v6);
  }
  return a1;
}

_BYTE *assignWithCopy for Period(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void (*v30)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_BYTE *, uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  size_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  void (*v72)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(_BYTE *, uint64_t, uint64_t);
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  void *v89;
  uint64_t v90;

  v6 = type metadata accessor for FHIRDateTime();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_224DDEAA0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_6:
      sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      goto LABEL_30;
    }
    *a1 = *a2;
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
    *((_WORD *)a1 + 9) = *((_WORD *)a2 + 9);
    v15 = (__int128 *)(a1 + 24);
    v16 = (__int128 *)(a2 + 24);
    v17 = *((_QWORD *)a2 + 7);
    v90 = v7;
    if (*((_QWORD *)a1 + 7) == 1)
    {
      if (v17 == 1)
      {
        v18 = *v16;
        v19 = *(_OWORD *)(a2 + 40);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        *v15 = v18;
        *(_OWORD *)(a1 + 40) = v19;
      }
      else
      {
        a1[24] = a2[24];
        a1[25] = a2[25];
        a1[26] = a2[26];
        v33 = *(_OWORD *)(a2 + 28);
        *((_DWORD *)a1 + 11) = *((_DWORD *)a2 + 11);
        *(_OWORD *)(a1 + 28) = v33;
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v17 == 1)
    {
      sub_224E2C9F4((uint64_t)(a1 + 24));
      v31 = *((_QWORD *)a2 + 7);
      v32 = *(_OWORD *)(a2 + 40);
      *v15 = *v16;
      *(_OWORD *)(a1 + 40) = v32;
      *((_QWORD *)a1 + 7) = v31;
    }
    else
    {
      a1[24] = a2[24];
      a1[25] = a2[25];
      a1[26] = a2[26];
      *((_DWORD *)a1 + 7) = *((_DWORD *)a2 + 7);
      *((_WORD *)a1 + 16) = *((_WORD *)a2 + 16);
      *((_WORD *)a1 + 17) = *((_WORD *)a2 + 17);
      *((_WORD *)a1 + 18) = *((_WORD *)a2 + 18);
      *((_WORD *)a1 + 19) = *((_WORD *)a2 + 19);
      *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
      *((_WORD *)a1 + 21) = *((_WORD *)a2 + 21);
      *((_WORD *)a1 + 22) = *((_WORD *)a2 + 22);
      *((_WORD *)a1 + 23) = *((_WORD *)a2 + 23);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v34 = *(int *)(v6 + 28);
    v35 = &a1[v34];
    v36 = &a2[v34];
    v37 = sub_224F67874();
    v38 = *(_QWORD *)(v37 - 8);
    v39 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v38 + 48);
    v89 = v35;
    LODWORD(v35) = v39(v35, 1, v37);
    v40 = v39(v36, 1, v37);
    if ((_DWORD)v35)
    {
      v7 = v90;
      if (!v40)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v38 + 16))(v89, v36, v37);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v89, 0, 1, v37);
        goto LABEL_29;
      }
      sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      v42 = *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64);
      v43 = v89;
    }
    else
    {
      v7 = v90;
      if (!v40)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v38 + 24))(v89, v36, v37);
        goto LABEL_29;
      }
      (*(void (**)(void *, uint64_t))(v38 + 8))(v89, v37);
      sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      v42 = *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64);
      v43 = v89;
    }
    memcpy(v43, v36, v42);
LABEL_29:
    v45 = *(int *)(v6 + 32);
    v46 = &a1[v45];
    v47 = &a2[v45];
    *v46 = *v47;
    v46[1] = v47[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  if (v10)
    goto LABEL_6;
  *a1 = *a2;
  v12 = *((_QWORD *)a2 + 1);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)a1 + 1) = v12;
  if (*((_QWORD *)a2 + 7) == 1)
  {
    v13 = *(_OWORD *)(a2 + 24);
    v14 = *(_OWORD *)(a2 + 40);
    *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)(a1 + 24) = v13;
    *(_OWORD *)(a1 + 40) = v14;
  }
  else
  {
    a1[24] = a2[24];
    a1[25] = a2[25];
    a1[26] = a2[26];
    v20 = *(_OWORD *)(a2 + 28);
    *((_DWORD *)a1 + 11) = *((_DWORD *)a2 + 11);
    *(_OWORD *)(a1 + 28) = v20;
    *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
    *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
    swift_bridgeObjectRetain();
  }
  v21 = *(int *)(v6 + 28);
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = sub_224F67874();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v27 = *(int *)(v6 + 32);
  v28 = &a1[v27];
  v29 = &a2[v27];
  *v28 = *v29;
  v28[1] = v29[1];
  v30 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56);
  swift_bridgeObjectRetain();
  v30(a1, 0, 1, v6);
LABEL_30:
  v48 = *(int *)(a3 + 20);
  v49 = &a1[v48];
  v50 = &a2[v48];
  v51 = v8(&a1[v48], 1, v6);
  v52 = v8(v50, 1, v6);
  if (!v51)
  {
    if (v52)
    {
      sub_224DDEAA0((uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_35:
      sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      return a1;
    }
    *v49 = *v50;
    *((_QWORD *)v49 + 1) = *((_QWORD *)v50 + 1);
    *((_WORD *)v49 + 8) = *((_WORD *)v50 + 8);
    *((_WORD *)v49 + 9) = *((_WORD *)v50 + 9);
    v57 = (__int128 *)(v49 + 24);
    v58 = (__int128 *)(v50 + 24);
    v59 = *((_QWORD *)v50 + 7);
    if (*((_QWORD *)v49 + 7) == 1)
    {
      if (v59 == 1)
      {
        v60 = *v58;
        v61 = *(_OWORD *)(v50 + 40);
        *((_QWORD *)v49 + 7) = *((_QWORD *)v50 + 7);
        *v57 = v60;
        *(_OWORD *)(v49 + 40) = v61;
      }
      else
      {
        v49[24] = v50[24];
        v49[25] = v50[25];
        v49[26] = v50[26];
        v75 = *(_OWORD *)(v50 + 28);
        *((_DWORD *)v49 + 11) = *((_DWORD *)v50 + 11);
        *(_OWORD *)(v49 + 28) = v75;
        *((_QWORD *)v49 + 6) = *((_QWORD *)v50 + 6);
        *((_QWORD *)v49 + 7) = *((_QWORD *)v50 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v59 == 1)
    {
      sub_224E2C9F4((uint64_t)(v49 + 24));
      v73 = *((_QWORD *)v50 + 7);
      v74 = *(_OWORD *)(v50 + 40);
      *v57 = *v58;
      *(_OWORD *)(v49 + 40) = v74;
      *((_QWORD *)v49 + 7) = v73;
    }
    else
    {
      v49[24] = v50[24];
      v49[25] = v50[25];
      v49[26] = v50[26];
      *((_DWORD *)v49 + 7) = *((_DWORD *)v50 + 7);
      *((_WORD *)v49 + 16) = *((_WORD *)v50 + 16);
      *((_WORD *)v49 + 17) = *((_WORD *)v50 + 17);
      *((_WORD *)v49 + 18) = *((_WORD *)v50 + 18);
      *((_WORD *)v49 + 19) = *((_WORD *)v50 + 19);
      *((_WORD *)v49 + 20) = *((_WORD *)v50 + 20);
      *((_WORD *)v49 + 21) = *((_WORD *)v50 + 21);
      *((_WORD *)v49 + 22) = *((_WORD *)v50 + 22);
      *((_WORD *)v49 + 23) = *((_WORD *)v50 + 23);
      *((_QWORD *)v49 + 6) = *((_QWORD *)v50 + 6);
      *((_QWORD *)v49 + 7) = *((_QWORD *)v50 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v76 = *(int *)(v6 + 28);
    v77 = &v49[v76];
    v78 = &v50[v76];
    v79 = sub_224F67874();
    v80 = *(_QWORD *)(v79 - 8);
    v81 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v80 + 48);
    v82 = v81(v77, 1, v79);
    v83 = v81(v78, 1, v79);
    if (v82)
    {
      if (!v83)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v80 + 16))(v77, v78, v79);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
LABEL_56:
        v85 = *(int *)(v6 + 32);
        v86 = &v49[v85];
        v87 = &v50[v85];
        *v86 = *v87;
        v86[1] = v87[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    else
    {
      if (!v83)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v80 + 24))(v77, v78, v79);
        goto LABEL_56;
      }
      (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v77, v79);
    }
    sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_56;
  }
  if (v52)
    goto LABEL_35;
  *v49 = *v50;
  v54 = *((_QWORD *)v50 + 1);
  *((_DWORD *)v49 + 4) = *((_DWORD *)v50 + 4);
  *((_QWORD *)v49 + 1) = v54;
  if (*((_QWORD *)v50 + 7) == 1)
  {
    v55 = *(_OWORD *)(v50 + 24);
    v56 = *(_OWORD *)(v50 + 40);
    *((_QWORD *)v49 + 7) = *((_QWORD *)v50 + 7);
    *(_OWORD *)(v49 + 24) = v55;
    *(_OWORD *)(v49 + 40) = v56;
  }
  else
  {
    v49[24] = v50[24];
    v49[25] = v50[25];
    v49[26] = v50[26];
    v62 = *(_OWORD *)(v50 + 28);
    *((_DWORD *)v49 + 11) = *((_DWORD *)v50 + 11);
    *(_OWORD *)(v49 + 28) = v62;
    *((_QWORD *)v49 + 6) = *((_QWORD *)v50 + 6);
    *((_QWORD *)v49 + 7) = *((_QWORD *)v50 + 7);
    swift_bridgeObjectRetain();
  }
  v63 = *(int *)(v6 + 28);
  v64 = &v49[v63];
  v65 = &v50[v63];
  v66 = sub_224F67874();
  v67 = *(_QWORD *)(v66 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
  {
    sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v67 + 16))(v64, v65, v66);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
  }
  v69 = *(int *)(v6 + 32);
  v70 = &v49[v69];
  v71 = &v50[v69];
  *v70 = *v71;
  v70[1] = v71[1];
  v72 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56);
  swift_bridgeObjectRetain();
  v72(v49, 0, 1, v6);
  return a1;
}

_BYTE *initializeWithTake for Period(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(_BYTE *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for FHIRDateTime();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
    v10 = *(int *)(v6 + 28);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = sub_224F67874();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(_OWORD *)&a1[*(int *)(v6 + 32)] = *(_OWORD *)&a2[*(int *)(v6 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v16 = *(int *)(a3 + 20);
  v17 = &a1[v16];
  v18 = &a2[v16];
  if (v8(v18, 1, v6))
  {
    sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    *v17 = *v18;
    *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
    *((_DWORD *)v17 + 4) = *((_DWORD *)v18 + 4);
    *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
    *(_OWORD *)(v17 + 40) = *(_OWORD *)(v18 + 40);
    *((_QWORD *)v17 + 7) = *((_QWORD *)v18 + 7);
    v20 = *(int *)(v6 + 28);
    v21 = &v17[v20];
    v22 = &v18[v20];
    v23 = sub_224F67874();
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    *(_OWORD *)&v17[*(int *)(v6 + 32)] = *(_OWORD *)&v18[*(int *)(v6 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  }
  return a1;
}

_BYTE *assignWithTake for Period(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_BYTE *, uint64_t, uint64_t);
  int v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(_BYTE *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  void *__src;
  void *v66;
  uint64_t v67;

  v6 = type metadata accessor for FHIRDateTime();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_224DDEAA0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_6:
      sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      goto LABEL_25;
    }
    *a1 = *a2;
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    v67 = v7;
    if (*((_QWORD *)a1 + 7) != 1)
    {
      v18 = *((_QWORD *)a2 + 7);
      if (v18 != 1)
      {
        a1[24] = a2[24];
        *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
        *((_DWORD *)a1 + 7) = *((_DWORD *)a2 + 7);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = v18;
        swift_bridgeObjectRelease();
LABEL_16:
        v20 = *(int *)(v6 + 28);
        v21 = &a1[v20];
        v22 = &a2[v20];
        v23 = sub_224F67874();
        v24 = *(_QWORD *)(v23 - 8);
        v25 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48);
        v66 = v21;
        LODWORD(v21) = v25(v21, 1, v23);
        __src = v22;
        v26 = v25(v22, 1, v23);
        if ((_DWORD)v21)
        {
          v7 = v67;
          if (!v26)
          {
            (*(void (**)(void *, void *, uint64_t))(v24 + 32))(v66, __src, v23);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v66, 0, 1, v23);
            goto LABEL_24;
          }
          sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
          v28 = *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64);
          v29 = v66;
        }
        else
        {
          v7 = v67;
          if (!v26)
          {
            (*(void (**)(void *, void *, uint64_t))(v24 + 40))(v66, __src, v23);
            goto LABEL_24;
          }
          (*(void (**)(void *, uint64_t))(v24 + 8))(v66, v23);
          sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
          v28 = *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64);
          v29 = v66;
        }
        memcpy(v29, __src, v28);
LABEL_24:
        v31 = *(int *)(v6 + 32);
        v32 = &a1[v31];
        v33 = (uint64_t *)&a2[v31];
        v35 = *v33;
        v34 = v33[1];
        *v32 = v35;
        v32[1] = v34;
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      sub_224E2C9F4((uint64_t)(a1 + 24));
    }
    v19 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v19;
    *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
    goto LABEL_16;
  }
  if (v10)
    goto LABEL_6;
  *a1 = *a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
  v12 = *(int *)(v6 + 28);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = sub_224F67874();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)&a1[*(int *)(v6 + 32)] = *(_OWORD *)&a2[*(int *)(v6 + 32)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_25:
  v36 = *(int *)(a3 + 20);
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = v8(&a1[v36], 1, v6);
  v40 = v8(v38, 1, v6);
  if (!v39)
  {
    if (v40)
    {
      sub_224DDEAA0((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_30:
      sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      return a1;
    }
    *v37 = *v38;
    *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
    *((_DWORD *)v37 + 4) = *((_DWORD *)v38 + 4);
    if (*((_QWORD *)v37 + 7) != 1)
    {
      v48 = *((_QWORD *)v38 + 7);
      if (v48 != 1)
      {
        v37[24] = v38[24];
        *(_WORD *)(v37 + 25) = *(_WORD *)(v38 + 25);
        *((_DWORD *)v37 + 7) = *((_DWORD *)v38 + 7);
        *((_OWORD *)v37 + 2) = *((_OWORD *)v38 + 2);
        *((_QWORD *)v37 + 6) = *((_QWORD *)v38 + 6);
        *((_QWORD *)v37 + 7) = v48;
        swift_bridgeObjectRelease();
LABEL_40:
        v50 = *(int *)(v6 + 28);
        v51 = &v37[v50];
        v52 = &v38[v50];
        v53 = sub_224F67874();
        v54 = *(_QWORD *)(v53 - 8);
        v55 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v54 + 48);
        v56 = v55(v51, 1, v53);
        v57 = v55(v52, 1, v53);
        if (v56)
        {
          if (!v57)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v54 + 32))(v51, v52, v53);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
LABEL_46:
            v59 = *(int *)(v6 + 32);
            v60 = &v37[v59];
            v61 = (uint64_t *)&v38[v59];
            v63 = *v61;
            v62 = v61[1];
            *v60 = v63;
            v60[1] = v62;
            swift_bridgeObjectRelease();
            return a1;
          }
        }
        else
        {
          if (!v57)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v54 + 40))(v51, v52, v53);
            goto LABEL_46;
          }
          (*(void (**)(_BYTE *, uint64_t))(v54 + 8))(v51, v53);
        }
        sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        goto LABEL_46;
      }
      sub_224E2C9F4((uint64_t)(v37 + 24));
    }
    v49 = *(_OWORD *)(v38 + 40);
    *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
    *(_OWORD *)(v37 + 40) = v49;
    *((_QWORD *)v37 + 7) = *((_QWORD *)v38 + 7);
    goto LABEL_40;
  }
  if (v40)
    goto LABEL_30;
  *v37 = *v38;
  *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
  *((_DWORD *)v37 + 4) = *((_DWORD *)v38 + 4);
  *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
  *(_OWORD *)(v37 + 40) = *(_OWORD *)(v38 + 40);
  *((_QWORD *)v37 + 7) = *((_QWORD *)v38 + 7);
  v42 = *(int *)(v6 + 28);
  v43 = &v37[v42];
  v44 = &v38[v42];
  v45 = sub_224F67874();
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 32))(v43, v44, v45);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  *(_OWORD *)&v37[*(int *)(v6 + 32)] = *(_OWORD *)&v38[*(int *)(v6 + 32)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v37, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Period()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F12060(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Period()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F120B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_224F12108()
{
  unint64_t v0;

  sub_224E63218(319, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for Period.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_224F121CC + 4 * byte_224F73915[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_224F12200 + 4 * byte_224F73910[v4]))();
}

uint64_t sub_224F12200(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F12208(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224F12210);
  return result;
}

uint64_t sub_224F1221C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224F12224);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_224F12228(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F12230(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Period.CodingKeys()
{
  return &type metadata for Period.CodingKeys;
}

unint64_t sub_224F12250()
{
  unint64_t result;

  result = qword_2557E36A0;
  if (!qword_2557E36A0)
  {
    result = MEMORY[0x22768ED24](&unk_224F73ABC, &type metadata for Period.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E36A0);
  }
  return result;
}

unint64_t sub_224F12298()
{
  unint64_t result;

  result = qword_2557E36A8;
  if (!qword_2557E36A8)
  {
    result = MEMORY[0x22768ED24](&unk_224F73A2C, &type metadata for Period.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E36A8);
  }
  return result;
}

unint64_t sub_224F122E0()
{
  unint64_t result;

  result = qword_2557E36B0;
  if (!qword_2557E36B0)
  {
    result = MEMORY[0x22768ED24](&unk_224F73A54, &type metadata for Period.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E36B0);
  }
  return result;
}

uint64_t sub_224F12324(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7472617473 && a2 == 0xE500000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6581861 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_224F123FC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E02D8)
  {
    sub_224E63218(255, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E02D8);
  }
}

uint64_t Reference.display.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Reference.reference.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Reference.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Reference() + 24);
  return sub_224F12F24(v3, a1);
}

uint64_t Reference.hash(into:)(uint64_t a1)
{
  uint64_t v1;

  if (!*(_QWORD *)(v1 + 8))
  {
    sub_224F68528();
    if (*(_QWORD *)(v1 + 24))
      goto LABEL_3;
LABEL_5:
    sub_224F68528();
    goto LABEL_6;
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v1 + 24))
    goto LABEL_5;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
LABEL_6:
  type metadata accessor for Reference();
  return sub_224DF235C(a1);
}

uint64_t sub_224F125D4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x636E657265666572;
  if (*v0 != 1)
    v1 = 0x696669746E656469;
  if (*v0)
    return v1;
  else
    return 0x79616C70736964;
}

uint64_t sub_224F12638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224F1424C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224F1265C()
{
  sub_224F12F78();
  return sub_224F685B8();
}

uint64_t sub_224F12684()
{
  sub_224F12F78();
  return sub_224F685C4();
}

uint64_t Reference.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  sub_224F12FBC(0, &qword_2557E36B8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F12F78();
  sub_224F68594();
  v9[15] = 0;
  sub_224F68300();
  if (!v1)
  {
    v9[14] = 1;
    sub_224F68300();
    type metadata accessor for Reference();
    v9[13] = 2;
    type metadata accessor for Identifier();
    sub_224DDACD4(&qword_2557E08F0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t)&protocol conformance descriptor for Identifier);
    sub_224F68330();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Reference.hashValue.getter()
{
  _BYTE v1[72];

  sub_224F68510();
  Reference.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

uint64_t Reference.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  char v25;
  char v26;

  v20 = a2;
  sub_224E63218(0, &qword_2557E02C0, (void (*)(uint64_t))type metadata accessor for Identifier);
  MEMORY[0x24BDAC7A8](v3);
  v21 = (char *)&v20 - v4;
  sub_224F12FBC(0, &qword_2557E36C8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v22 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - v7;
  v9 = type metadata accessor for Reference();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F12F78();
  v12 = (uint64_t)v23;
  sub_224F6857C();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v23 = a1;
  v13 = v6;
  v26 = 0;
  v14 = v22;
  v15 = (uint64_t)v11;
  *v11 = sub_224F68264();
  v11[1] = v16;
  v25 = 1;
  v11[2] = sub_224F68264();
  v11[3] = v17;
  type metadata accessor for Identifier();
  v24 = 2;
  sub_224DDACD4(&qword_2557E06A0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t)&protocol conformance descriptor for Identifier);
  v18 = (uint64_t)v21;
  sub_224F68294();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v14);
  sub_224F13018(v18, v15 + *(int *)(v9 + 24));
  sub_224F1306C(v15, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return sub_224DDEAA0(v15, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
}

uint64_t sub_224F12B24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Reference.init(from:)(a1, a2);
}

uint64_t sub_224F12B38(_QWORD *a1)
{
  return Reference.encode(to:)(a1);
}

uint64_t sub_224F12B4C()
{
  _BYTE v1[72];

  sub_224F68510();
  Reference.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

uint64_t sub_224F12B8C()
{
  _BYTE v1[72];

  sub_224F68510();
  Reference.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

BOOL _s23HealthRecordsExtraction9ReferenceV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BOOL8 result;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;

  v4 = type metadata accessor for Identifier();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F143B8();
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E02C0, (void (*)(uint64_t))type metadata accessor for Identifier);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v33 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v33 - v19;
  v21 = a1[1];
  v22 = a2[1];
  if (!v21)
  {
    if (v22)
      return 0;
    goto LABEL_8;
  }
  if (!v22)
    return 0;
  if (*a1 == *a2 && v21 == v22 || (v23 = sub_224F683CC(), result = 0, (v23 & 1) != 0))
  {
LABEL_8:
    v25 = a1[3];
    v26 = a2[3];
    if (v25)
    {
      if (!v26)
        return 0;
      if (a1[2] != a2[2] || v25 != v26)
      {
        v27 = sub_224F683CC();
        result = 0;
        if ((v27 & 1) == 0)
          return result;
      }
    }
    else if (v26)
    {
      return 0;
    }
    v34 = v7;
    v28 = type metadata accessor for Reference();
    sub_224F12F24((uint64_t)a1 + *(int *)(v28 + 24), (uint64_t)v20);
    sub_224F12F24((uint64_t)a2 + *(int *)(v28 + 24), (uint64_t)v18);
    v29 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_224F12F24((uint64_t)v20, (uint64_t)v11);
    sub_224F12F24((uint64_t)v18, v29);
    v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v30((uint64_t)v11, 1, v4) == 1)
    {
      sub_224F14428((uint64_t)v18);
      sub_224F14428((uint64_t)v20);
      if (v30(v29, 1, v4) == 1)
      {
        sub_224F14428((uint64_t)v11);
        return 1;
      }
      goto LABEL_20;
    }
    sub_224F12F24((uint64_t)v11, (uint64_t)v15);
    if (v30(v29, 1, v4) == 1)
    {
      sub_224F14428((uint64_t)v18);
      sub_224F14428((uint64_t)v20);
      sub_224DDEAA0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
LABEL_20:
      sub_224DDEAA0((uint64_t)v11, (uint64_t (*)(_QWORD))sub_224F143B8);
      return 0;
    }
    v31 = (uint64_t)v34;
    sub_224F14474(v29, (uint64_t)v34);
    v32 = static Identifier.== infix(_:_:)(v15, v31);
    sub_224DDEAA0(v31, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
    sub_224F14428((uint64_t)v18);
    sub_224F14428((uint64_t)v20);
    sub_224DDEAA0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
    sub_224F14428((uint64_t)v11);
    return (v32 & 1) != 0;
  }
  return result;
}

uint64_t type metadata accessor for Reference()
{
  uint64_t result;

  result = qword_2557E3738;
  if (!qword_2557E3738)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_224F12F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E63218(0, &qword_2557E02C0, (void (*)(uint64_t))type metadata accessor for Identifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_224F12F78()
{
  unint64_t result;

  result = qword_2557E36C0;
  if (!qword_2557E36C0)
  {
    result = MEMORY[0x22768ED24](&unk_224F73D34, &type metadata for Reference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E36C0);
  }
  return result;
}

void sub_224F12FBC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224F12F78();
    v7 = a3(a1, &type metadata for Reference.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_224F13018(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E63218(0, &qword_2557E02C0, (void (*)(uint64_t))type metadata accessor for Identifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_224F1306C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Reference();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_224F130B0(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E0500, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
  a1[2] = sub_224DDACD4(&qword_2557E0758, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
  result = sub_224DDACD4(&qword_2557E36D0, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
  a1[3] = result;
  return result;
}

uint64_t sub_224F13128()
{
  return sub_224DDACD4(&qword_2557E36D8, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
}

uint64_t *initializeBufferWithCopyOfBuffer for Reference(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  void (*v27)(_QWORD *, _QWORD, uint64_t, uint64_t);

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (uint64_t *)((char *)a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    v10 = type metadata accessor for Identifier();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      sub_224E63218(0, &qword_2557E02C0, (void (*)(uint64_t))type metadata accessor for Identifier);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v15 = v9[1];
      *v8 = *v9;
      v8[1] = v15;
      v16 = v9[3];
      swift_bridgeObjectRetain();
      if (v16 == 1)
      {
        *((_OWORD *)v8 + 1) = *((_OWORD *)v9 + 1);
        v8[4] = v9[4];
      }
      else
      {
        v8[2] = v9[2];
        v8[3] = v16;
        v8[4] = v9[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v17 = *(int *)(v10 + 24);
      v18 = (char *)v8 + v17;
      v19 = (char *)v9 + v17;
      v20 = sub_224F675D4();
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      v23 = *(int *)(v10 + 28);
      v24 = (_QWORD *)((char *)v8 + v23);
      v25 = (_QWORD *)((char *)v9 + v23);
      v26 = v25[1];
      *v24 = *v25;
      v24[1] = v26;
      v27 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56);
      swift_bridgeObjectRetain();
      v27(v8, 0, 1, v10);
    }
  }
  return v3;
}

uint64_t destroy for Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Identifier();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v4 + 24) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v7 = v4 + *(int *)(v5 + 24);
    v8 = sub_224F675D4();
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for Reference(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_QWORD *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void (*v25)(_QWORD *, _QWORD, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for Identifier();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    sub_224E63218(0, &qword_2557E02C0, (void (*)(uint64_t))type metadata accessor for Identifier);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = v8[1];
    *v7 = *v8;
    v7[1] = v13;
    v14 = v8[3];
    swift_bridgeObjectRetain();
    if (v14 == 1)
    {
      *((_OWORD *)v7 + 1) = *((_OWORD *)v8 + 1);
      v7[4] = v8[4];
    }
    else
    {
      v7[2] = v8[2];
      v7[3] = v14;
      v7[4] = v8[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v15 = *(int *)(v9 + 24);
    v16 = (char *)v7 + v15;
    v17 = (char *)v8 + v15;
    v18 = sub_224F675D4();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v21 = *(int *)(v9 + 28);
    v22 = (_QWORD *)((char *)v7 + v21);
    v23 = (_QWORD *)((char *)v8 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56);
    swift_bridgeObjectRetain();
    v25(v7, 0, 1, v9);
  }
  return a1;
}

_QWORD *assignWithCopy for Reference(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(__int128 *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void (*v30)(__int128 *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (__int128 *)((char *)a1 + v6);
  v8 = (__int128 *)((char *)a2 + v6);
  v9 = type metadata accessor for Identifier();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
LABEL_6:
      sub_224E63218(0, &qword_2557E02C0, (void (*)(uint64_t))type metadata accessor for Identifier);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      return a1;
    }
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v17 = v7 + 1;
    v18 = v8 + 1;
    v19 = *((_QWORD *)v8 + 3);
    if (*((_QWORD *)v7 + 3) == 1)
    {
      if (v19 == 1)
      {
        v20 = *v18;
        *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
        *v17 = v20;
      }
      else
      {
        *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
        *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
        *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v19 == 1)
    {
      sub_224E2C9C0((uint64_t)(v7 + 1));
      v31 = *((_QWORD *)v8 + 4);
      *v17 = *v18;
      *((_QWORD *)v7 + 4) = v31;
    }
    else
    {
      *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
      *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v32 = *(int *)(v9 + 24);
    v33 = (char *)v7 + v32;
    v34 = (char *)v8 + v32;
    v35 = sub_224F675D4();
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
    v38 = v37(v33, 1, v35);
    v39 = v37(v34, 1, v35);
    if (v38)
    {
      if (!v39)
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
LABEL_27:
        v41 = *(int *)(v9 + 28);
        v42 = (_QWORD *)((char *)v7 + v41);
        v43 = (_QWORD *)((char *)v8 + v41);
        *v42 = *v43;
        v42[1] = v43[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    else
    {
      if (!v39)
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
        goto LABEL_27;
      }
      (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
    }
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_27;
  }
  if (v13)
    goto LABEL_6;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
  v15 = *((_QWORD *)v8 + 3);
  swift_bridgeObjectRetain();
  if (v15 == 1)
  {
    v16 = v8[1];
    *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
    v7[1] = v16;
  }
  else
  {
    *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
    *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
    *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v21 = *(int *)(v9 + 24);
  v22 = (char *)v7 + v21;
  v23 = (char *)v8 + v21;
  v24 = sub_224F675D4();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v27 = *(int *)(v9 + 28);
  v28 = (_QWORD *)((char *)v7 + v27);
  v29 = (_QWORD *)((char *)v8 + v27);
  *v28 = *v29;
  v28[1] = v29[1];
  v30 = *(void (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  v30(v7, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for Reference(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (_OWORD *)((char *)a1 + v5);
  v7 = (_OWORD *)((char *)a2 + v5);
  v8 = type metadata accessor for Identifier();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    sub_224E63218(0, &qword_2557E02C0, (void (*)(uint64_t))type metadata accessor for Identifier);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = v7[1];
    *v6 = *v7;
    v6[1] = v11;
    *((_QWORD *)v6 + 4) = *((_QWORD *)v7 + 4);
    v12 = *(int *)(v8 + 24);
    v13 = (char *)v6 + v12;
    v14 = (char *)v7 + v12;
    v15 = sub_224F675D4();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    *(_OWORD *)((char *)v6 + *(int *)(v8 + 28)) = *(_OWORD *)((char *)v7 + *(int *)(v8 + 28));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *assignWithTake for Reference(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  v11 = type metadata accessor for Identifier();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_224DDEAA0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
LABEL_6:
      sub_224E63218(0, &qword_2557E02C0, (void (*)(uint64_t))type metadata accessor for Identifier);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      return a1;
    }
    v24 = v10[1];
    *v9 = *v10;
    v9[1] = v24;
    swift_bridgeObjectRelease();
    if (v9[3] != 1)
    {
      v25 = v10[3];
      if (v25 != 1)
      {
        v9[2] = v10[2];
        v9[3] = v25;
        swift_bridgeObjectRelease();
        v9[4] = v10[4];
        swift_bridgeObjectRelease();
LABEL_16:
        v26 = *(int *)(v11 + 24);
        v27 = (char *)v9 + v26;
        v28 = (char *)v10 + v26;
        v29 = sub_224F675D4();
        v30 = *(_QWORD *)(v29 - 8);
        v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
        v32 = v31(v27, 1, v29);
        v33 = v31(v28, 1, v29);
        if (v32)
        {
          if (!v33)
          {
            (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
LABEL_22:
            v35 = *(int *)(v11 + 28);
            v36 = (_QWORD *)((char *)v9 + v35);
            v37 = (_QWORD *)((char *)v10 + v35);
            v39 = *v37;
            v38 = v37[1];
            *v36 = v39;
            v36[1] = v38;
            swift_bridgeObjectRelease();
            return a1;
          }
        }
        else
        {
          if (!v33)
          {
            (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v27, v28, v29);
            goto LABEL_22;
          }
          (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v29);
        }
        sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        goto LABEL_22;
      }
      sub_224E2C9C0((uint64_t)(v9 + 2));
    }
    *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
    v9[4] = v10[4];
    goto LABEL_16;
  }
  if (v15)
    goto LABEL_6;
  v17 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v17;
  v9[4] = v10[4];
  v18 = *(int *)(v11 + 24);
  v19 = (char *)v9 + v18;
  v20 = (char *)v10 + v18;
  v21 = sub_224F675D4();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(_OWORD *)((char *)v9 + *(int *)(v11 + 28)) = *(_OWORD *)((char *)v10 + *(int *)(v11 + 28));
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Reference()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F13EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_224E63218(0, &qword_2557E02C0, (void (*)(uint64_t))type metadata accessor for Identifier);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for Reference()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F13FA0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    sub_224E63218(0, &qword_2557E02C0, (void (*)(uint64_t))type metadata accessor for Identifier);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_224F14024()
{
  unint64_t v0;

  sub_224E63218(319, &qword_2557E02C0, (void (*)(uint64_t))type metadata accessor for Identifier);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for Reference.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_224F140F4 + 4 * byte_224F73B45[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_224F14128 + 4 * byte_224F73B40[v4]))();
}

uint64_t sub_224F14128(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F14130(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224F14138);
  return result;
}

uint64_t sub_224F14144(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224F1414CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_224F14150(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F14158(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Reference.CodingKeys()
{
  return &type metadata for Reference.CodingKeys;
}

unint64_t sub_224F14178()
{
  unint64_t result;

  result = qword_2557E3778;
  if (!qword_2557E3778)
  {
    result = MEMORY[0x22768ED24](&unk_224F73D0C, &type metadata for Reference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3778);
  }
  return result;
}

unint64_t sub_224F141C0()
{
  unint64_t result;

  result = qword_2557E3780;
  if (!qword_2557E3780)
  {
    result = MEMORY[0x22768ED24](&unk_224F73C7C, &type metadata for Reference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3780);
  }
  return result;
}

unint64_t sub_224F14208()
{
  unint64_t result;

  result = qword_2557E3788;
  if (!qword_2557E3788)
  {
    result = MEMORY[0x22768ED24](&unk_224F73CA4, &type metadata for Reference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3788);
  }
  return result;
}

uint64_t sub_224F1424C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x79616C70736964 && a2 == 0xE700000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636E657265666572 && a2 == 0xE900000000000065 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void sub_224F143B8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E02C8)
  {
    sub_224E63218(255, &qword_2557E02C0, (void (*)(uint64_t))type metadata accessor for Identifier);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E02C8);
  }
}

uint64_t sub_224F14428(uint64_t a1)
{
  uint64_t v2;

  sub_224E63218(0, &qword_2557E02C0, (void (*)(uint64_t))type metadata accessor for Identifier);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_224F14474(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Identifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_224F144BC(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_224E53720(0, v1, 0);
    v2 = v14;
    v4 = *(_QWORD *)(type metadata accessor for Coding() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = Coding.description.getter();
      v9 = v8;
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
        sub_224E53720(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v14 + 16) = v11 + 1;
      v12 = v14 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

Swift::Bool __swiftcall CodeableConcept.hasCoding(system:code:)(Swift::String system, Swift::String code)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Bool v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;

  v36 = code;
  v40 = system;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v33 - v5;
  v7 = sub_224F675D4();
  v42 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Coding();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E1438, v14, v3);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v33 - v16;
  v18 = *(_QWORD *)(v2 + 16);
  if (!v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v17, 1, 1, v10);
LABEL_18:
    v31 = 0;
    goto LABEL_19;
  }
  v19 = *(_QWORD *)(v18 + 16);
  if (v19)
  {
    v34 = v11;
    v35 = (char *)&v33 - v16;
    v20 = v18 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v21 = *(_QWORD *)(v11 + 72);
    v33 = v18;
    swift_bridgeObjectRetain_n();
    v22 = v9;
    v23 = v21;
    v24 = v42;
    v38 = v23;
    v39 = v10;
    v37 = v7;
    do
    {
      sub_224E7920C(v20, (uint64_t)v13);
      sub_224E5AF70((uint64_t)v13, (uint64_t)v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v6, 1, v7) == 1)
      {
        sub_224DDB50C((uint64_t)v6, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v22, v6, v7);
        v25 = (uint64_t *)&v13[*(int *)(v10 + 20)];
        v26 = v24;
        v27 = v25[1];
        if (v27)
        {
          v41 = *v25;
          v44 = sub_224F6755C();
          v45 = v28;
          v43 = v40;
          sub_224E51E94();
          v29 = sub_224F6803C();
          swift_bridgeObjectRelease();
          if (v29)
          {
            v24 = v42;
            v7 = v37;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v22, v37);
            v23 = v38;
            v10 = v39;
          }
          else
          {
            v44 = v41;
            v45 = v27;
            v43 = v36;
            v30 = sub_224F6803C();
            v24 = v42;
            v7 = v37;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v22, v37);
            v23 = v38;
            v10 = v39;
            if (!v30)
            {
              swift_bridgeObjectRelease();
              v17 = v35;
              sub_224E79250((uint64_t)v13, (uint64_t)v35);
              v11 = v34;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v17, 0, 1, v10);
              goto LABEL_17;
            }
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v7);
          v24 = v26;
        }
      }
      sub_224EF0234((uint64_t)v13);
      v20 += v23;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    v11 = v34;
    v17 = v35;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v17, 1, 1, v10);
LABEL_17:
  swift_bridgeObjectRelease();
  v31 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v17, 1, v10) == 1)
    goto LABEL_18;
LABEL_19:
  sub_224DDB50C((uint64_t)v17, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
  return v31;
}

uint64_t CodeableConcept.init(text:coding:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t CodeableConcept.text.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CodeableConcept.coding.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CodeableConcept.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v1 + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v3)
    {
LABEL_3:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v3);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_224F68528();
    if (v3)
      goto LABEL_3;
  }
  return sub_224F68528();
}

uint64_t sub_224F14A9C()
{
  _BYTE *v0;

  if (*v0)
    return 0x676E69646F63;
  else
    return 1954047348;
}

uint64_t sub_224F14ACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224F160A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224F14AF0()
{
  sub_224F15BD4();
  return sub_224F685B8();
}

uint64_t sub_224F14B18()
{
  sub_224F15BD4();
  return sub_224F685C4();
}

uint64_t CodeableConcept.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  char v14;
  char v15;

  sub_224F15C18(0, &qword_2557E3790, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v13 - v6;
  v13[0] = *(_QWORD *)(v1 + 16);
  v8 = a1[3];
  v9 = a1;
  v11 = v10;
  __swift_project_boxed_opaque_existential_1(v9, v8);
  sub_224F15BD4();
  sub_224F68594();
  v15 = 0;
  sub_224F68300();
  if (!v2)
  {
    v13[1] = v13[0];
    v14 = 1;
    sub_224DDEA0C(0, &qword_2557E01E0, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DDAC3C(&qword_2557E01E8, &qword_2557E01F0, (uint64_t)&protocol conformance descriptor for Coding, MEMORY[0x24BEE12A0]);
    sub_224F68330();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v11);
}

uint64_t CodeableConcept.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  sub_224F68510();
  if (!v1)
  {
    sub_224F68528();
    if (v2)
      goto LABEL_3;
LABEL_5:
    sub_224F68528();
    return sub_224F6854C();
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_5;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t CodeableConcept.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  char v16;
  char v17;

  sub_224F15C18(0, &qword_2557E37A0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F15BD4();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v17 = 0;
  v10 = sub_224F68264();
  v12 = v11;
  sub_224DDEA0C(0, &qword_2557E01E0, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  v16 = 1;
  sub_224DDAC3C(&qword_2557E0200, &qword_2557E0208, (uint64_t)&protocol conformance descriptor for Coding, MEMORY[0x24BEE12D0]);
  swift_bridgeObjectRetain();
  sub_224F68294();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v13 = v15[1];
  *a2 = v10;
  a2[1] = v12;
  a2[2] = v13;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224F14F8C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return CodeableConcept.init(from:)(a1, a2);
}

uint64_t sub_224F14FA0(_QWORD *a1)
{
  return CodeableConcept.encode(to:)(a1);
}

uint64_t sub_224F14FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v1 + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v3)
    {
LABEL_3:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v3);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_224F68528();
    if (v3)
      goto LABEL_3;
  }
  return sub_224F68528();
}

uint64_t sub_224F15074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  sub_224F68510();
  if (!v1)
  {
    sub_224F68528();
    if (v2)
      goto LABEL_3;
LABEL_5:
    sub_224F68528();
    return sub_224F6854C();
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_5;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

Swift::String_optional __swiftcall CodeableConcept.preferredDisplayString()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  Swift::String_optional result;
  uint64_t v22;

  sub_224DDEA0C(0, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v22 - v2;
  v4 = type metadata accessor for Coding();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v22 - v9;
  v11 = (void *)v0[1];
  if (v11)
  {
    v12 = *v0;
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = v0[2];
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 16);
      if (v14)
      {
        v15 = v13 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
        v16 = *(_QWORD *)(v5 + 72);
        swift_bridgeObjectRetain();
        while (1)
        {
          sub_224E7920C(v15, (uint64_t)v8);
          if (*(_QWORD *)&v8[*(int *)(v4 + 24) + 8])
            break;
          sub_224EF0234((uint64_t)v8);
          v15 += v16;
          if (!--v14)
            goto LABEL_11;
        }
        sub_224E79250((uint64_t)v8, (uint64_t)v3);
        v17 = 0;
      }
      else
      {
        swift_bridgeObjectRetain();
LABEL_11:
        v17 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, v17, 1, v4);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
      {
        sub_224E79250((uint64_t)v3, (uint64_t)v10);
        v18 = (uint64_t *)&v10[*(int *)(v4 + 24)];
        v12 = *v18;
        v11 = (void *)v18[1];
        swift_bridgeObjectRetain();
        sub_224EF0234((uint64_t)v10);
        goto LABEL_16;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    }
    sub_224DDB50C((uint64_t)v3, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
    v12 = 0;
    v11 = 0;
  }
LABEL_16:
  v19 = v12;
  v20 = v11;
  result.value._object = v20;
  result.value._countAndFlagsBits = v19;
  return result;
}

Swift::Bool __swiftcall CodeableConcept.hasCoding(codings:)(Swift::OpaquePointer codings)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  Swift::Bool v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *rawValue;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  rawValue = (char *)codings._rawValue;
  v1 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v56 - v6;
  v8 = sub_224F675D4();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v77 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v56 - v12;
  v14 = type metadata accessor for Coding();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v56 - v19;
  sub_224DDEA0C(0, &qword_2557E1438, v21, v1);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v64 = (uint64_t)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v56 - v25;
  v27 = *(_QWORD *)(v78 + 16);
  if (!v27)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))((char *)&v56 - v25, 1, 1, v14);
    v53 = (uint64_t)v26;
LABEL_28:
    v54 = 0;
    goto LABEL_29;
  }
  v59 = (uint64_t)&v56 - v25;
  v66 = v15;
  v76 = v14;
  v28 = *(_QWORD *)(v27 + 16);
  v58 = v27;
  if (v28)
  {
    v29 = (*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
    v68 = v27 + v29;
    v78 = *(_QWORD *)(v66 + 72);
    v30 = rawValue;
    v60 = &rawValue[v29];
    swift_bridgeObjectRetain();
    v31 = 0;
    v70 = v13;
    v57 = v7;
    v73 = v9;
    v62 = v20;
    v61 = v28;
    v69 = v5;
    while (1)
    {
      v71 = v31;
      sub_224E7920C(v68 + v78 * v31, (uint64_t)v20);
      sub_224E5AF70((uint64_t)v20, (uint64_t)v7);
      v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
      if (v32(v7, 1, v8) == 1)
      {
        sub_224DDB50C((uint64_t)v7, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        goto LABEL_5;
      }
      v74 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v75 = v32;
      v74(v13, v7, v8);
      v33 = &v20[*(int *)(v76 + 20)];
      v67 = *((_QWORD *)v33 + 1);
      if (!v67)
      {
        (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
        goto LABEL_5;
      }
      v34 = *((_QWORD *)v30 + 2);
      v35 = v66;
      if (!v34)
        goto LABEL_23;
      v65 = *(_QWORD *)v33;
      swift_bridgeObjectRetain();
      v36 = (uint64_t)v60;
      v37 = v75;
      do
      {
        sub_224E7920C(v36, (uint64_t)v18);
        v38 = sub_224F6755C();
        v40 = v39;
        sub_224E5AF70((uint64_t)v18, (uint64_t)v5);
        if (v37(v5, 1, v8) == 1)
        {
          sub_224DDB50C((uint64_t)v5, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
LABEL_11:
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
        v41 = v77;
        v74(v77, v5, v8);
        v42 = (uint64_t *)&v18[*(int *)(v76 + 20)];
        v43 = v42[1];
        if (!v43)
        {
          (*(void (**)(char *, uint64_t))(v73 + 8))(v41, v8);
          v37 = v75;
          goto LABEL_11;
        }
        v72 = *v42;
        v81 = sub_224F6755C();
        v82 = v44;
        v79 = v38;
        v80 = v40;
        sub_224E51E94();
        v45 = sub_224F6803C();
        swift_bridgeObjectRelease();
        if (v45)
        {
          v46 = 0;
        }
        else
        {
          v81 = v72;
          v82 = v43;
          v79 = v65;
          v80 = v67;
          v46 = sub_224F6803C() == 0;
        }
        v37 = v75;
        v47 = *(void (**)(char *, uint64_t))(v73 + 8);
        v47(v77, v8);
        swift_bridgeObjectRelease();
        v5 = v69;
        v13 = v70;
        if (v46)
        {
          swift_bridgeObjectRelease();
          v49 = v64;
          sub_224E79250((uint64_t)v18, v64);
          v50 = v66;
          v51 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v66 + 56);
          v52 = v76;
          v51(v49, 0, 1, v76);
          sub_224DDB50C(v49, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
          v47(v13, v8);
          v53 = v59;
          sub_224E79250((uint64_t)v62, v59);
          v51(v53, 0, 1, v52);
          goto LABEL_27;
        }
LABEL_12:
        sub_224EF0234((uint64_t)v18);
        v36 += v78;
        --v34;
      }
      while (v34);
      v30 = rawValue;
      swift_bridgeObjectRelease();
      v35 = v66;
      v7 = v57;
      v9 = v73;
LABEL_23:
      v48 = v64;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 56))(v64, 1, 1);
      sub_224DDB50C(v48, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      v20 = v62;
      v28 = v61;
LABEL_5:
      v31 = v71 + 1;
      sub_224EF0234((uint64_t)v20);
      if (v31 == v28)
        goto LABEL_26;
    }
  }
  swift_bridgeObjectRetain();
LABEL_26:
  v50 = v66;
  v53 = v59;
  v52 = v76;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v59, 1, 1, v76);
LABEL_27:
  swift_bridgeObjectRelease();
  v54 = 1;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v53, 1, v52) == 1)
    goto LABEL_28;
LABEL_29:
  sub_224DDB50C(v53, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
  return v54;
}

unint64_t CodeableConcept.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 8))
  {
    sub_224F680E4();
    swift_bridgeObjectRelease();
    v4 = 0xD000000000000017;
    sub_224F67C94();
    sub_224F67C94();
    if (v1)
      goto LABEL_5;
  }
  else
  {
    sub_224F680E4();
    swift_bridgeObjectRelease();
    v4 = 0xD000000000000019;
    if (v1)
    {
LABEL_5:
      v2 = swift_bridgeObjectRetain();
      sub_224F144BC(v2);
      swift_bridgeObjectRelease();
      sub_224E68104();
      sub_224DDACD4((unint64_t *)&qword_2557E1D88, (uint64_t (*)(uint64_t))sub_224E68104, MEMORY[0x24BEE12B0]);
      sub_224F67B44();
      swift_bridgeObjectRelease();
    }
  }
  sub_224F67C94();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t _s23HealthRecordsExtraction15CodeableConceptV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  char v11;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a2[1];
  v6 = a2[2];
  if (!v3)
  {
    if (v5)
      return 0;
    goto LABEL_10;
  }
  if (!v5)
    return 0;
  v7 = *a1 == *a2 && v3 == v5;
  if (v7 || (v8 = sub_224F683CC(), result = 0, (v8 & 1) != 0))
  {
LABEL_10:
    if (v4)
    {
      if (v6)
      {
        swift_bridgeObjectRetain();
        v10 = swift_bridgeObjectRetain();
        v11 = sub_224DD9ED8(v10, v6);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v11 & 1) != 0)
          return 1;
      }
    }
    else if (!v6)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_224F15BD4()
{
  unint64_t result;

  result = qword_2557E3798;
  if (!qword_2557E3798)
  {
    result = MEMORY[0x22768ED24](&unk_224F73F8C, &type metadata for CodeableConcept.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3798);
  }
  return result;
}

void sub_224F15C18(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224F15BD4();
    v7 = a3(a1, &type metadata for CodeableConcept.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_224F15C74(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_224DE60BC();
  a1[2] = sub_224DFAEA8();
  result = sub_224F15CA8();
  a1[3] = result;
  return result;
}

unint64_t sub_224F15CA8()
{
  unint64_t result;

  result = qword_2557E37A8;
  if (!qword_2557E37A8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for CodeableConcept, &type metadata for CodeableConcept);
    atomic_store(result, (unint64_t *)&qword_2557E37A8);
  }
  return result;
}

unint64_t sub_224F15CF0()
{
  unint64_t result;

  result = qword_2557E37B0;
  if (!qword_2557E37B0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for CodeableConcept, &type metadata for CodeableConcept);
    atomic_store(result, (unint64_t *)&qword_2557E37B0);
  }
  return result;
}

uint64_t destroy for CodeableConcept()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s23HealthRecordsExtraction15CodeableConceptVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CodeableConcept(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CodeableConcept(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodeableConcept(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodeableConcept(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodeableConcept()
{
  return &type metadata for CodeableConcept;
}

uint64_t storeEnumTagSinglePayload for CodeableConcept.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_224F15F50 + 4 * byte_224F73D95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_224F15F84 + 4 * byte_224F73D90[v4]))();
}

uint64_t sub_224F15F84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F15F8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224F15F94);
  return result;
}

uint64_t sub_224F15FA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224F15FA8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_224F15FAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F15FB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CodeableConcept.CodingKeys()
{
  return &type metadata for CodeableConcept.CodingKeys;
}

unint64_t sub_224F15FD4()
{
  unint64_t result;

  result = qword_2557E37B8;
  if (!qword_2557E37B8)
  {
    result = MEMORY[0x22768ED24](&unk_224F73F64, &type metadata for CodeableConcept.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E37B8);
  }
  return result;
}

unint64_t sub_224F1601C()
{
  unint64_t result;

  result = qword_2557E37C0;
  if (!qword_2557E37C0)
  {
    result = MEMORY[0x22768ED24](&unk_224F73ED4, &type metadata for CodeableConcept.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E37C0);
  }
  return result;
}

unint64_t sub_224F16064()
{
  unint64_t result;

  result = qword_2557E37C8;
  if (!qword_2557E37C8)
  {
    result = MEMORY[0x22768ED24](&unk_224F73EFC, &type metadata for CodeableConcept.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E37C8);
  }
  return result;
}

uint64_t sub_224F160A8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E69646F63 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

id sub_224F16180(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id result;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *ObjCClassFromMetadata;
  id v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;

  sub_224E7C238();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F16544();
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestReportTypeForIdentifier_, *MEMORY[0x24BDD2B90]);
  if (result)
  {
    v52 = result;
    if (a4)
    {
      v48 = sub_224F67B5C();
      swift_bridgeObjectRelease();
    }
    else
    {
      v48 = 0;
    }
    v20 = *(_QWORD *)(a8 + 8);
    v21 = *(_QWORD *)(a8 + 16);
    v55 = a6;
    v56 = a5;
    v54 = a7;
    if (v20 == 0xD000000000000010 && v21 == 0x8000000224F81FF0)
      v22 = 1;
    else
      v22 = sub_224F683CC();
    v53 = a8;
    v23 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20));
    v24 = type metadata accessor for ExtractionContext();
    v51 = (char *)v23 + *(int *)(v24 + 28);
    v25 = sub_224F67718();
    v57 = a2;
    v58 = a1;
    v49 = *a1;
    v50 = (void *)v25;
    sub_224E7C28C(a2, (uint64_t)v18);
    v26 = sub_224F677D8();
    v27 = *(_QWORD *)(v26 - 8);
    v28 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v18, 1, v26) != 1)
    {
      v28 = (void *)sub_224F677C0();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v18, v26);
    }
    v29 = a9;
    v30 = *v23;
    v31 = objc_msgSend((id)objc_opt_self(), sel_localDevice);
    if (*(uint64_t *)((char *)v23 + *(int *)(v24 + 40)))
    {
      v32 = swift_bridgeObjectRetain();
      sub_224F073F8(v32);
      swift_bridgeObjectRelease();
      v29 = a9;
      v33 = (void *)sub_224F67AE4();
      swift_bridgeObjectRelease();
    }
    else
    {
      v33 = 0;
    }
    swift_bridgeObjectRetain();
    v34 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v35 = ((unint64_t)v23[1] >> 2) & 1;
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    v37 = sub_224F22D04();
    v46 = v29;
    v38 = v22 & 1;
    v45 = v35;
    v39 = v52;
    v40 = (void *)v48;
    v41 = v50;
    v42 = objc_retainAutoreleasedReturnValue(objc_msgSend(ObjCClassFromMetadata, sel_diagnosticTestReportWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_diagnosticTestCodingCollection_results_effectiveStartDate_statusCoding_effectiveEndDate_issueDate_, v52, v48, v38, v50, v49, v28, v30, v31, v33, v34, v45, v56, 0, v55, v37, v54,
              v46));

    v43 = v42;
    v44 = (void *)sub_224F67718();
    objc_msgSend(v43, sel_setCreationDate_, v44);

    sub_224DDEAA0(v57, (uint64_t (*)(_QWORD))sub_224E7C238);
    sub_224DDEAA0((uint64_t)v58, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    return v43;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_224F16544()
{
  unint64_t result;

  result = qword_2557E1CF8;
  if (!qword_2557E1CF8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E1CF8);
  }
  return result;
}

void sub_224F16584(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_224F165E0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_224F1663C + 4 * byte_224F73FE0[a2]))(0x6C61636973796870);
}

uint64_t sub_224F1663C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C61636973796870 && v1 == 0xEC00000065707954)
    v2 = 1;
  else
    v2 = sub_224F683CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_224F166E0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 17221;
    else
      v3 = 5262159;
    if (v2 == 1)
      v4 = 0xE200000000000000;
    else
      v4 = 0xE300000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 17221;
      else
        v6 = 5262159;
      if (v5 == 1)
        v7 = 0xE200000000000000;
      else
        v7 = 0xE300000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 4281170;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE300000000000000;
  if (v3 != 4281170)
  {
LABEL_21:
    v8 = sub_224F683CC();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_224F167C0(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xE900000000000031;
  v3 = 0x6B36353270636573;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x3635322D50;
    else
      v5 = 0x39313535326445;
    if (v4 == 1)
      v6 = 0xE500000000000000;
    else
      v6 = 0xE700000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6B36353270636573;
  v6 = 0xE900000000000031;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x3635322D50;
    else
      v3 = 0x39313535326445;
    if (v7 == 1)
      v2 = 0xE500000000000000;
    else
      v2 = 0xE700000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_224F683CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_224F168D0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_224F16918(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_224F16974 + 4 * byte_224F73FE8[a2]))(0x3635325345);
}

uint64_t sub_224F16974(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x3635325345 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = sub_224F683CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_224F16A14(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x7372655672696866;
    else
      v3 = 0x646E754272696866;
    if (v2 == 1)
      v4 = 0xEB000000006E6F69;
    else
      v4 = 0xEA0000000000656CLL;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x7372655672696866;
      else
        v6 = 0x646E754272696866;
      if (v5 == 1)
        v7 = 0xEB000000006E6F69;
      else
        v7 = 0xEA0000000000656CLL;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE200000000000000;
    v3 = 25705;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE200000000000000;
  if (v3 != 25705)
  {
LABEL_21:
    v8 = sub_224F683CC();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_224F16B2C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x53452D48444345;
  else
    v3 = 0x5045414F2D415352;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x53452D48444345;
  else
    v5 = 0x5045414F2D415352;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_224F683CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_224F16BD0(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000011;
  else
    v3 = 0xD000000000000010;
  if (v2)
    v4 = 0x8000000224F7A0D0;
  else
    v4 = 0x8000000224F7A0F0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000011;
  else
    v5 = 0xD000000000000010;
  if ((a2 & 1) != 0)
    v6 = 0x8000000224F7A0F0;
  else
    v6 = 0x8000000224F7A0D0;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_224F683CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_224F16C78(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_224F16CC8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_224F16D84 + 4 * byte_224F73FF3[a2]))(0x65545F4343445545);
}

uint64_t sub_224F16D84(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65545F4343445545 && v1 == 0xEE00666E614D7473)
    v2 = 1;
  else
    v2 = sub_224F683CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_224F16E70(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x656372756F736572;
  else
    v3 = 0x6C72556C6C7566;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x656372756F736572;
  else
    v5 = 0x6C72556C6C7566;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_224F683CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t VCJWK.asRawECPublicKey()()
{
  unsigned __int8 *v0;
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  if (*v0 && (_DWORD)v1 == 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v3 = sub_224F683CC();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
LABEL_5:
    __asm { BR              X10 }
  sub_224E65EF4();
  swift_allocError();
  *(_QWORD *)v4 = (v1 << 8) | 1;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 1;
  return swift_willThrow();
}

SecKeyRef __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VCJWK.asRSASecKey()()
{
  __SecKey *v0;
  uint64_t v1;
  uint64_t v2;
  __SecKey *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v13;
  __SecKey *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  __SecKey *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  if (!*((_QWORD *)v0 + 7))
  {
    sub_224E65EF4();
    swift_allocError();
    *(_OWORD *)v7 = xmmword_224F74010;
    *(_BYTE *)(v7 + 16) = 5;
    goto LABEL_12;
  }
  v1 = *((_QWORD *)v0 + 5);
  sub_224E51E94();
  sub_224F68030();
  v2 = sub_224F68030();
  v0 = v3;
  swift_bridgeObjectRelease();
  v25 = v2;
  swift_bridgeObjectRetain();
  v4 = sub_224F67C40();
  swift_bridgeObjectRelease();
  v5 = v4 & 3;
  if (v4 <= 0)
    v5 = -(-v4 & 3);
  if (v5 == 3 || v5 == 2)
  {
    sub_224F67C94();
LABEL_10:
    swift_bridgeObjectRetain();
    v8 = sub_224F67604();
    v10 = v9;
    swift_bridgeObjectRelease();
    if (v10 >> 60 == 15)
    {
      sub_224E58788();
      swift_allocError();
      *v11 = v25;
      v11[1] = (uint64_t)v0;
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
    v26 = v8;
    v27 = v10;
    if (!v1)
    {
      sub_224E65EF4();
      swift_allocError();
      *(_OWORD *)v17 = xmmword_224F74000;
      *(_BYTE *)(v17 + 16) = 5;
      swift_willThrow();
      sub_224DDE9B4(v26, v27);
      return v0;
    }
    sub_224F68030();
    v13 = sub_224F68030();
    v0 = v14;
    swift_bridgeObjectRelease();
    v24 = v13;
    swift_bridgeObjectRetain();
    v15 = sub_224F67C40();
    swift_bridgeObjectRelease();
    v16 = v15 & 3;
    if (v15 <= 0)
      v16 = -(-v15 & 3);
    if (v16)
    {
      if (v16 != 2 && v16 != 3)
      {
        swift_bridgeObjectRelease();
        sub_224E58788();
        swift_allocError();
        *v23 = 0;
        v23[1] = 0;
        goto LABEL_27;
      }
      sub_224F67C94();
    }
    swift_bridgeObjectRetain();
    v18 = sub_224F67604();
    v20 = v19;
    swift_bridgeObjectRelease();
    if (v20 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      sub_224F17B88((uint64_t)&v26);
      v0 = v22;
      sub_224DDE9B4(v26, v27);
      sub_224DDE9B4(v18, v20);
      return v0;
    }
    sub_224E58788();
    swift_allocError();
    *v21 = v24;
    v21[1] = (uint64_t)v0;
LABEL_27:
    swift_willThrow();
    sub_224E58810(v8, v10);
    return v0;
  }
  if (!v5)
    goto LABEL_10;
  swift_bridgeObjectRelease();
  sub_224E58788();
  swift_allocError();
  *v6 = 0;
  v6[1] = 0;
LABEL_12:
  swift_willThrow();
  return v0;
}

uint64_t sub_224F17568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  if (!*(_QWORD *)(v0 + 72))
  {
    sub_224E65EF4();
    swift_allocError();
    v8 = xmmword_224F74030;
LABEL_11:
    *(_OWORD *)v7 = v8;
    *(_BYTE *)(v7 + 16) = 5;
    return swift_willThrow();
  }
  if (!*(_QWORD *)(v0 + 88))
  {
    sub_224E65EF4();
    swift_allocError();
    v8 = xmmword_224F74020;
    goto LABEL_11;
  }
  sub_224E51E94();
  sub_224F68030();
  v1 = sub_224F68030();
  v3 = v2;
  swift_bridgeObjectRelease();
  v24 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_224F67C40();
  swift_bridgeObjectRelease();
  v5 = v4 & 3;
  if (v4 <= 0)
    v5 = -(-v4 & 3);
  if (v5 == 3 || v5 == 2)
  {
    sub_224F67C94();
  }
  else if (v5)
  {
    swift_bridgeObjectRelease();
    sub_224E58788();
    swift_allocError();
    *v6 = 0;
    v6[1] = 0;
    return swift_willThrow();
  }
  swift_bridgeObjectRetain();
  v9 = sub_224F67604();
  v11 = v10;
  swift_bridgeObjectRelease();
  if (v11 >> 60 == 15)
  {
    sub_224E58788();
    swift_allocError();
    *v12 = v24;
    v12[1] = v3;
    return swift_willThrow();
  }
  swift_bridgeObjectRelease();
  sub_224F68030();
  v14 = sub_224F68030();
  v16 = v15;
  swift_bridgeObjectRelease();
  v25 = v14;
  swift_bridgeObjectRetain();
  v17 = sub_224F67C40();
  swift_bridgeObjectRelease();
  v18 = v17 & 3;
  if (v17 <= 0)
    v18 = -(-v17 & 3);
  if (v18)
  {
    if (v18 != 2 && v18 != 3)
    {
      swift_bridgeObjectRelease();
      sub_224E58788();
      swift_allocError();
      *v23 = 0;
      v23[1] = 0;
      goto LABEL_26;
    }
    sub_224F67C94();
  }
  swift_bridgeObjectRetain();
  v19 = sub_224F67604();
  v21 = v20;
  swift_bridgeObjectRelease();
  if (v21 >> 60 != 15)
  {
    swift_bridgeObjectRelease();
    sub_224ED0F70(v9, v11);
    sub_224ED0F70(v19, v21);
    sub_224F182D0(v19, v21);
    sub_224E58810(v19, v21);
    sub_224E58810(v19, v21);
    sub_224E58810(v9, v11);
    return v9;
  }
  sub_224E58788();
  swift_allocError();
  *v22 = v25;
  v22[1] = v16;
LABEL_26:
  swift_willThrow();
  return sub_224E58810(v9, v11);
}

uint64_t sub_224F179F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  if (a3 && a1)
  {
    v11[0] = a3;
    v11[1] = a4;
    v11[2] = a1;
    v11[3] = a2 - a1;
    result = sub_224F17AC8((uint64_t)v11, &v9, &v10);
    if (!v5)
      *a5 = v10;
  }
  else
  {
    sub_224E65EF4();
    swift_allocError();
    *(_OWORD *)v8 = xmmword_224F74040;
    *(_BYTE *)(v8 + 16) = 5;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_224F17AC8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1)
  {
    result = SecKeyCreateRSAPublicKey();
    if (result)
    {
      *a3 = result;
      return result;
    }
    sub_224E65EF4();
    v7 = swift_allocError();
    v8 = 8;
  }
  else
  {
    sub_224E65EF4();
    v7 = swift_allocError();
    v8 = 3;
  }
  *(_QWORD *)v6 = v8;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 16) = 5;
  result = swift_willThrow();
  *a2 = v7;
  return result;
}

void sub_224F17B88(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_224F17BE4(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  LOWORD(v4) = a1;
  BYTE2(v4) = BYTE2(a1);
  HIBYTE(v4) = BYTE3(a1);
  v5 = BYTE4(a1);
  v6 = BYTE5(a1);
  v7 = BYTE6(a1);
  sub_224F17E20(v2);
  *v1 = v3;
  v1[1] = v4 | ((unint64_t)v5 << 32) | ((unint64_t)v6 << 40) | ((unint64_t)v7 << 48);
}

void sub_224F17E20(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_224F17E80@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;

  v9 = v5;
  LOWORD(v10) = a1;
  BYTE2(v10) = BYTE2(a1);
  HIBYTE(v10) = BYTE3(a1);
  v11 = BYTE4(a1);
  v12 = BYTE5(a1);
  v13 = BYTE6(a1);
  result = sub_224F179F0((uint64_t)&v9, (uint64_t)&v9 + BYTE6(a1), v4, v3, &v8);
  if (!v2)
    result = v8;
  v7 = v10 | ((unint64_t)v11 << 32) | ((unint64_t)v12 << 40) | ((unint64_t)v13 << 48);
  *v1 = v9;
  v1[1] = v7;
  return result;
}

void sub_224F18104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (sub_224F673B8())
  {
    if (__OFSUB__(a1, sub_224F673D0()))
    {
      __break(1u);
    }
    else if (!__OFSUB__(a2, a1))
    {
      sub_224F673C4();
      sub_224F17E20(a4);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_224F18190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_224F673B8();
  if (!result)
    goto LABEL_12;
  v11 = result;
  result = sub_224F673D0();
  v12 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v13 = __OFSUB__(a2, a1);
  v14 = a2 - a1;
  if (v13)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v15 = sub_224F673C4();
  if (v15 >= v14)
    v16 = v14;
  else
    v16 = v15;
  result = sub_224F179F0(v11 + v12, v11 + v12 + v16, a4, a5, &v17);
  if (!v5)
    return v17;
  return result;
}

uint64_t sub_224F18240(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_224F673B8();
  if (!result || (result = sub_224F673D0(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_224F673C4();
      return sub_224F67628();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_224F182D0(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  v3[3] = MEMORY[0x24BDCDDE8];
  v3[4] = MEMORY[0x24BDCDDC8];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_224F18334
     + *((int *)qword_224F184D8 + (__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x24BDCDDE8])[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_224F18344()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_224DDE970(v1, v0);
  sub_224F67628();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
}

id sub_224F184E8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v27;
  uint64_t v28;
  char *v29;
  id result;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *ObjCClassFromMetadata;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  void *v70;
  uint64_t v71;
  id v72;
  void *v73;
  uint64_t v74;
  void *v75;
  int v76;
  char *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t *v83;
  id v84;
  id v85;

  sub_224E7C238();
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v63 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5451C(0, &qword_2557E2958);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestResultTypeForIdentifier_, *MEMORY[0x24BDD2BB0]);
  if (result)
  {
    v78 = result;
    if (a4)
    {
      v65 = sub_224F67B5C();
      swift_bridgeObjectRelease();
    }
    else
    {
      v65 = 0;
    }
    v31 = *(_QWORD *)(a12 + 8);
    v32 = *(_QWORD *)(a12 + 16);
    v80 = a6;
    v81 = a5;
    v79 = a8;
    if (v31 == 0xD000000000000010 && v32 == 0x8000000224F81FF0)
      v76 = 1;
    else
      v76 = sub_224F683CC();
    v33 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20));
    v34 = type metadata accessor for ExtractionContext();
    v77 = (char *)v33 + *(int *)(v34 + 28);
    v35 = sub_224F67718();
    v74 = *a1;
    v75 = (void *)v35;
    sub_224E7C28C(a2, (uint64_t)v29);
    v36 = sub_224F677D8();
    v37 = *(_QWORD *)(v36 - 8);
    v38 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v29, 1, v36) != 1)
    {
      v38 = sub_224F677C0();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v36);
    }
    v73 = (void *)v38;
    v71 = *v33;
    v72 = objc_msgSend((id)objc_opt_self(), sel_localDevice);
    if (*(uint64_t *)((char *)v33 + *(int *)(v34 + 40)))
    {
      v39 = swift_bridgeObjectRetain();
      sub_224F073F8(v39);
      swift_bridgeObjectRelease();
      v64 = sub_224F67AE4();
      swift_bridgeObjectRelease();
    }
    else
    {
      v64 = 0;
    }
    swift_bridgeObjectRetain();
    v40 = sub_224F67B5C();
    swift_bridgeObjectRelease();
    v41 = v33[1];
    v70 = (void *)v40;
    if (a7)
    {
      sub_224E5451C(0, &qword_2557E37D8);
      v63 = sub_224F67D60();
      swift_bridgeObjectRelease();
    }
    else
    {
      v63 = 0;
    }
    sub_224F67B80();
    v85 = (id)sub_224F67B5C();
    swift_bridgeObjectRelease();
    sub_224E5451C(0, &qword_2557E37D0);
    v42 = sub_224F67D60();
    swift_bridgeObjectRelease();
    v69 = sub_224F22D04();
    if (a14)
    {
      v43 = (void *)sub_224F67D60();
      swift_bridgeObjectRelease();
    }
    else
    {
      v43 = 0;
    }
    v82 = a2;
    v83 = a1;
    v68 = (void *)v42;
    if (a16)
    {
      v44 = (void *)sub_224F67B5C();
      swift_bridgeObjectRelease();
    }
    else
    {
      v44 = 0;
    }
    if (a19)
    {
      v45 = (void *)sub_224F67D60();
      swift_bridgeObjectRelease();
    }
    else
    {
      v45 = 0;
    }
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    v67 = v45;
    v62 = v45;
    v66 = v44;
    v60 = v43;
    v61 = v44;
    v84 = v43;
    v47 = v69;
    v48 = v68;
    v49 = (void *)v63;
    v59 = (v41 >> 2) & 1;
    v50 = v70;
    v51 = (void *)v64;
    v52 = v72;
    v53 = v78;
    v54 = (void *)v65;
    v55 = v75;
    v56 = v73;
    v81 = objc_retainAutoreleasedReturnValue(objc_msgSend(ObjCClassFromMetadata, sel_diagnosticTestResultWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_diagnosticTestCodingCollection_value_referenceRanges_effectiveStartDate_category_categoriesCodingCollections_issueDate_effectiveEndDate_statusCoding_interpretationCodingCollections_comments_bodySiteCodingCollection_methodCodingCollection_performers_referenceRangeStatus_, v78, v65, v76 & 1, v75, v74, v73, v71, v72, v64, v70, v59, v81, v80, v63, v79, v85,
              v68,
              a13,
              a9,
              v69,
              v60,
              v61,
              a17,
              a18,
              v62,
              a20));

    v57 = v81;
    v58 = (void *)sub_224F67718();
    objc_msgSend(v57, sel_setCreationDate_, v58);

    sub_224DDEAA0(v82, (uint64_t (*)(_QWORD))sub_224E7C238);
    sub_224DDEAA0((uint64_t)v83, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    return v57;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_224F18A50(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_224F18A9C()
{
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

void sub_224F18B38(uint64_t a1, char a2)
{
  sub_224F68510();
  __asm { BR              X10 }
}

uint64_t sub_224F18B94()
{
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224F18C48()
{
  sub_224F68510();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224F18CC8(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_224F681D4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_224F681D4();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x22768E1D8](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_224F1CEAC(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_224F681D4();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_224F67D84();
  }
  __break(1u);
  return result;
}

uint64_t sub_224F18E80(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_224F681D4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = sub_224F681D4();
    swift_bridgeObjectRelease();
    v5 = v20 + v3;
    if (!__OFADD__(v20, v3))
      goto LABEL_5;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v4 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v5 = v4 + v3;
  if (__OFADD__(v4, v3))
    goto LABEL_24;
LABEL_5:
  v6 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v6;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v9 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v5 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v8 = 1;
  }
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = sub_224F681D4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 <= v5)
    v10 = v5;
  swift_bridgeObjectRetain();
  v11 = MEMORY[0x22768E1D8](v8, v10, 1, v6);
  swift_bridgeObjectRelease();
  *v1 = v11;
  v9 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (*(_QWORD *)(v9 + 24) >> 1) - v12;
  result = sub_224F1D0B4(v9 + 8 * v12 + 32, v13, a1);
  if (v15 < v3)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v16 = v15;
  if (v15 < 1)
    goto LABEL_19;
  v17 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v18 = __OFADD__(v17, v15);
  v19 = v17 + v15;
  if (!v18)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
LABEL_19:
    swift_bridgeObjectRelease();
    if (v16 != v13)
      return sub_224F67D84();
LABEL_26:
    sub_224F1E498();
    return sub_224F67D84();
  }
  __break(1u);
  return result;
}

uint64_t sub_224F19054(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224F190B0()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_224F190F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_224F19148())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

_QWORD *RTFDocument.__allocating_init(rtfString:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_allocObject();
  v4[5] = 0;
  v4[6] = 0;
  v4[3] = a2;
  v4[4] = 0;
  v4[2] = a1;
  swift_bridgeObjectRetain();
  v5 = sub_224F1D908(a1, a2);
  swift_bridgeObjectRelease();
  v4[4] = v5;
  sub_224F19264();
  return v4;
}

_QWORD *RTFDocument.init(rtfString:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;

  v2[4] = 0;
  v2[5] = 0;
  v2[6] = 0;
  v2[2] = a1;
  v2[3] = a2;
  swift_bridgeObjectRetain();
  v5 = sub_224F1D908(a1, a2);
  swift_bridgeObjectRelease();
  v2[4] = v5;
  swift_release();
  sub_224F19264();
  return v2;
}

uint64_t sub_224F19264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v1 = v0;
  v2 = sub_224F6734C();
  v3 = *(_QWORD *)(v2 - 8);
  result = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(v0 + 32))
    return result;
  v27 = 0;
  v28 = 0xE000000000000000;
  v7 = MEMORY[0x24BEE4AF8];
  v26 = MEMORY[0x24BEE4AF8];
  swift_retain();
  if ((v7 & 0xC000000000000000) != 0)
    goto LABEL_41;
LABEL_3:
  v8 = swift_retain();
  MEMORY[0x22768DE24](v8);
  if (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_224F67D90();
  sub_224F67D9C();
  sub_224F67D84();
  v7 = v26;
LABEL_6:
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = sub_224F681D4();
    swift_bridgeObjectRelease();
    if (!v20)
      goto LABEL_44;
    while (1)
    {
LABEL_8:
      if (v7 >> 62)
      {
        swift_bridgeObjectRetain();
        v9 = sub_224F681D4();
        swift_bridgeObjectRelease();
        v10 = v9 - 1;
        if (__OFSUB__(v9, 1))
          goto LABEL_40;
      }
      else
      {
        v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
        v10 = v9 - 1;
        if (__OFSUB__(v9, 1))
          goto LABEL_40;
      }
      if ((v10 & 0x8000000000000000) == 0)
        break;
LABEL_11:
      v7 = v26;
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain();
        v19 = sub_224F681D4();
        swift_bridgeObjectRelease();
        if (!v19)
          goto LABEL_44;
      }
      else if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_44;
      }
    }
    while (1)
    {
      v7 = v26;
      v12 = v26 >> 62;
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain();
        v16 = sub_224F681D4();
        swift_bridgeObjectRelease();
        if (!v16)
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          if (!sub_224F681D4())
            goto LABEL_3;
          goto LABEL_6;
        }
        swift_bridgeObjectRetain();
        v17 = sub_224F681D4();
        swift_bridgeObjectRelease();
        if (!v17)
          goto LABEL_37;
      }
      else if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_36;
      }
      if ((v7 & 0xC000000000000001) != 0)
      {
        v13 = MEMORY[0x22768E1CC](0, v7);
        if (!v12)
          goto LABEL_20;
      }
      else
      {
        if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_38;
        v13 = *(_QWORD *)(v7 + 32);
        swift_retain();
        if (!v12)
        {
LABEL_20:
          if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_39;
          goto LABEL_21;
        }
      }
      swift_bridgeObjectRetain();
      v18 = sub_224F681D4();
      swift_bridgeObjectRelease();
      if (!v18)
        goto LABEL_39;
LABEL_21:
      sub_224F1E0A0(0, 1);
      swift_beginAccess();
      v14 = *(_QWORD *)(v13 + 56);
      v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000) == 0)
        v15 = *(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFLL;
      if (v15)
      {
        swift_bridgeObjectRetain();
        sub_224F67C94();
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      v11 = swift_bridgeObjectRetain();
      sub_224F18CC8(v11);
      swift_release();
      if (--v9 <= 0)
        goto LABEL_11;
    }
  }
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_8;
LABEL_44:
  swift_bridgeObjectRelease();
  v25[0] = v27;
  v25[1] = v28;
  sub_224F6731C();
  sub_224E51E94();
  v21 = sub_224F68024();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_bridgeObjectRelease();
  v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0)
    v24 = v21 & 0xFFFFFFFFFFFFLL;
  if (v24)
  {
    swift_beginAccess();
    *(_QWORD *)(v1 + 40) = v21;
    *(_QWORD *)(v1 + 48) = v23;
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t RTFDocument.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RTFDocument.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_224F196D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD **v48;
  _QWORD *v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;

  v1 = sub_224F6734C();
  v70 = *(_QWORD *)(v1 - 8);
  v71 = v1;
  v2 = MEMORY[0x24BDAC7A8](v1);
  v68 = (char *)v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = v3;
  MEMORY[0x24BDAC7A8](v2);
  v72 = (char *)v66 - v4;
  v75 = 0;
  v76 = 0xE000000000000000;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v5 = sub_224F67D00();
  result = swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    v8 = v0[2];
    v7 = v0[3];
    v9 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v9 = v8 & 0xFFFFFFFFFFFFLL;
    if (v9)
    {
      v74 = 4 * v9;
      v66[0] = v0 + 6;
      v73 = v0 + 5;
      swift_bridgeObjectRetain();
      v10 = 0;
      v67 = v0;
      v66[1] = v7;
      v66[2] = v8;
      while (1)
      {
        while (1)
        {
          swift_bridgeObjectRetain();
          v11 = sub_224F67C4C();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v12 = sub_224F67D0C();
          v14 = v13;
          swift_bridgeObjectRelease();
          v15 = v12 == 92 && v14 == 0xE100000000000000;
          if (!v15 && (sub_224F683CC() & 1) == 0)
            break;
          swift_bridgeObjectRelease();
          v17 = v75;
          v16 = v76;
          v18 = HIBYTE(v76) & 0xF;
          if ((v76 & 0x2000000000000000) == 0)
            v18 = v75 & 0xFFFFFFFFFFFFLL;
          if (v18)
          {
            v19 = (_QWORD **)v73;
            swift_beginAccess();
            v20 = *v19;
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *v19 = v20;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v20 = sub_224E56678(0, v20[2] + 1, 1, v20);
              *v73 = v20;
            }
            v23 = v20[2];
            v22 = v20[3];
            if (v23 >= v22 >> 1)
            {
              v20 = sub_224E56678((_QWORD *)(v22 > 1), v23 + 1, 1, v20);
              *v73 = v20;
            }
            v20[2] = v23 + 1;
            v24 = &v20[2 * v23];
            v24[4] = v17;
            v24[5] = v16;
            swift_endAccess();
          }
          swift_bridgeObjectRelease();
          v75 = 0;
          v76 = 0xE000000000000000;
          v10 = 1;
LABEL_20:
          if (v74 == v11 >> 14)
            goto LABEL_42;
        }
        if ((v10 & 1) == 0)
          break;
        v25 = v75 & 0xFFFFFFFFFFFFLL;
        if ((v76 & 0x2000000000000000) != 0)
          v25 = HIBYTE(v76) & 0xF;
        if (v25)
          goto LABEL_34;
        if (qword_2557E0198 != -1)
          swift_once();
        v26 = v71;
        v27 = __swift_project_value_buffer(v71, (uint64_t)qword_2557FC970);
        v28 = v70;
        v29 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
        v30 = v72;
        v29(v72, v27, v26);
        v31 = v68;
        v29(v68, (uint64_t)v30, v26);
        v32 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
        v33 = swift_allocObject();
        (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v33 + v32, v31, v26);
        swift_bridgeObjectRetain();
        LOBYTE(v32) = sub_224F1D704(v12, v14, (unsigned int (*)(uint64_t))sub_224F1DF94);
        swift_release();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v72, v26);
        if ((v32 & 1) == 0)
        {
LABEL_34:
          v40 = v72;
          sub_224F6731C();
          v42 = v70;
          v41 = v71;
          v43 = v68;
          (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v68, v40, v71);
          v44 = (*(unsigned __int8 *)(v42 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
          v45 = swift_allocObject();
          (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))(v45 + v44, v43, v41);
          swift_bridgeObjectRetain();
          LOBYTE(v44) = sub_224F1D704(v12, v14, (unsigned int (*)(uint64_t))sub_224F1DF94);
          swift_release();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
          if ((v44 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            v47 = v75;
            v46 = v76;
            v48 = (_QWORD **)v73;
            swift_beginAccess();
            v49 = *v48;
            swift_bridgeObjectRetain();
            v50 = swift_isUniquelyReferenced_nonNull_native();
            *v48 = v49;
            v0 = v67;
            if ((v50 & 1) == 0)
            {
              v49 = sub_224E56678(0, v49[2] + 1, 1, v49);
              *v73 = v49;
            }
            v52 = v49[2];
            v51 = v49[3];
            if (v52 >= v51 >> 1)
            {
              v49 = sub_224E56678((_QWORD *)(v51 > 1), v52 + 1, 1, v49);
              *v73 = v49;
            }
            v49[2] = v52 + 1;
            v53 = &v49[2 * v52];
            v53[4] = v47;
            v53[5] = v46;
            swift_endAccess();
            swift_bridgeObjectRelease();
            v10 = 0;
            v75 = 0;
            v76 = 0xE000000000000000;
            goto LABEL_20;
          }
          MEMORY[0x22768DD58](v12, v14);
          swift_bridgeObjectRelease();
          v10 = 1;
LABEL_41:
          v0 = v67;
          if (v74 == v11 >> 14)
          {
LABEL_42:
            swift_bridgeObjectRelease();
            goto LABEL_43;
          }
        }
        else
        {
          swift_beginAccess();
          MEMORY[0x22768DD58](v12, v14);
          swift_endAccess();
          swift_bridgeObjectRelease();
          v10 = 0;
          v0 = v67;
          if (v74 == v11 >> 14)
            goto LABEL_42;
        }
      }
      v34 = v72;
      sub_224F67340();
      v36 = v70;
      v35 = v71;
      v37 = v68;
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v68, v34, v71);
      v38 = (*(unsigned __int8 *)(v36 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
      v39 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v36 + 32))(v39 + v38, v37, v35);
      swift_bridgeObjectRetain();
      LOBYTE(v38) = sub_224F1D704(v12, v14, (unsigned int (*)(uint64_t))sub_224F1DF94);
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v34, v35);
      if ((v38 & 1) == 0)
      {
        swift_beginAccess();
        MEMORY[0x22768DD58](v12, v14);
        swift_endAccess();
      }
      swift_bridgeObjectRelease();
      v10 = 0;
      goto LABEL_41;
    }
LABEL_43:
    v55 = v75;
    v54 = v76;
    v56 = HIBYTE(v76) & 0xF;
    if ((v76 & 0x2000000000000000) == 0)
      v56 = v75 & 0xFFFFFFFFFFFFLL;
    if (v56)
    {
      v57 = v0 + 5;
      swift_beginAccess();
      v58 = (_QWORD *)v0[5];
      swift_bridgeObjectRetain();
      v59 = swift_isUniquelyReferenced_nonNull_native();
      v0[5] = v58;
      if ((v59 & 1) == 0)
      {
        v58 = sub_224E56678(0, v58[2] + 1, 1, v58);
        *v57 = v58;
      }
      v61 = v58[2];
      v60 = v58[3];
      if (v61 >= v60 >> 1)
      {
        v58 = sub_224E56678((_QWORD *)(v60 > 1), v61 + 1, 1, v58);
        *v57 = v58;
      }
      v58[2] = v61 + 1;
      v62 = &v58[2 * v61];
      v62[4] = v55;
      v62[5] = v54;
      swift_endAccess();
    }
    swift_beginAccess();
    v63 = swift_bridgeObjectRetain();
    v64 = sub_224F1D490(v63);
    swift_bridgeObjectRelease();
    if (qword_2557E01A0 != -1)
      swift_once();
    v65 = *(_QWORD *)(sub_224F1C560(qword_2557FC988, v64) + 16);
    swift_bridgeObjectRelease();
    result = swift_release();
    if (v65)
    {
      swift_beginAccess();
      v0[6] = 0;
      v0[7] = 0xE000000000000000;
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_224F19F0C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_224F19F48()
{
  uint64_t v0;

  v0 = sub_224F6734C();
  __swift_allocate_value_buffer(v0, qword_2557FC970);
  __swift_project_value_buffer(v0, (uint64_t)qword_2557FC970);
  return sub_224F672F8();
}

uint64_t sub_224F19F9C()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_224F1D490((uint64_t)&unk_24ECFD0C0);
  result = swift_arrayDestroy();
  qword_2557FC988 = v0;
  return result;
}

uint64_t sub_224F19FE4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_224F68510();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  v8 = sub_224F6854C();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_224F683CC() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_224F683CC() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_224F1AF1C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_224F1A190(_BYTE *a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  uint64_t result;
  uint64_t *v18;
  uint64_t v20;

  v4 = *v2;
  sub_224F68510();
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000011;
  else
    v5 = 0xD000000000000010;
  if ((a2 & 1) != 0)
    v6 = 0x8000000224F7A0F0;
  else
    v6 = 0x8000000224F7A0D0;
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  v7 = sub_224F6854C();
  v8 = -1 << *(_BYTE *)(v4 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v4 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    while (1)
    {
      v11 = *(_BYTE *)(*(_QWORD *)(v4 + 48) + v9) ? 0xD000000000000011 : 0xD000000000000010;
      v12 = *(_BYTE *)(*(_QWORD *)(v4 + 48) + v9) ? 0x8000000224F7A0F0 : 0x8000000224F7A0D0;
      if (v11 == v5 && v12 == v6)
        break;
      v14 = sub_224F683CC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
        goto LABEL_23;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v4 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_21;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
    result = 0;
    v16 = *(_BYTE *)(*(_QWORD *)(*v18 + 48) + v9);
  }
  else
  {
LABEL_21:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *v18;
    *v18 = 0x8000000000000000;
    v16 = a2 & 1;
    sub_224F1B0B4(a2 & 1, v9, isUniquelyReferenced_nonNull_native);
    *v18 = v20;
    swift_bridgeObjectRelease();
    result = 1;
  }
  *a1 = v16;
  return result;
}

uint64_t sub_224F1A378(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_224F677A8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_224DDACD4(&qword_2557E3A08, v11, MEMORY[0x24BDCEA88]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = sub_224F67B14();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      sub_224DDACD4(&qword_2557E3A10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v21 = sub_224F67B50();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    sub_224F1B2A0((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_224F1A5D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v1 = v0;
  v2 = *v0;
  sub_224F1E044();
  v3 = sub_224F680A8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_37;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v31 = v0;
  v32 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v7)
    {
      v14 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_22;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    if (v16 >= v8)
      break;
    v17 = (_QWORD *)(v2 + 56);
    v18 = *(_QWORD *)(v32 + 8 * v16);
    ++v11;
    if (!v18)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v8)
        goto LABEL_31;
      v18 = *(_QWORD *)(v32 + 8 * v11);
      if (!v18)
      {
        v19 = v16 + 2;
        if (v19 >= v8)
        {
LABEL_31:
          swift_release();
          v1 = v31;
          goto LABEL_33;
        }
        v18 = *(_QWORD *)(v32 + 8 * v19);
        if (!v18)
        {
          while (1)
          {
            v11 = v19 + 1;
            if (__OFADD__(v19, 1))
              goto LABEL_39;
            if (v11 >= v8)
              goto LABEL_31;
            v18 = *(_QWORD *)(v32 + 8 * v11);
            ++v19;
            if (v18)
              goto LABEL_21;
          }
        }
        v11 = v19;
      }
    }
LABEL_21:
    v7 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v11 << 6);
LABEL_22:
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v21 = *v20;
    v22 = v20[1];
    sub_224F68510();
    sub_224F67C34();
    result = sub_224F6854C();
    v23 = -1 << *(_BYTE *)(v4 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v9 + 8 * v25);
      }
      while (v29 == -1);
      v12 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v21;
    v13[1] = v22;
    ++*(_QWORD *)(v4 + 16);
  }
  swift_release();
  v1 = v31;
  v17 = (_QWORD *)(v2 + 56);
LABEL_33:
  v30 = 1 << *(_BYTE *)(v2 + 32);
  if (v30 > 63)
    bzero(v17, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v17 = -1 << v30;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_37:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_224F1A894()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;

  v1 = *v0;
  sub_224F1E4FC();
  v2 = sub_224F680A8();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v26 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v6 = v5 & *(_QWORD *)(v1 + 56);
    v25 = (unint64_t)(v4 + 63) >> 6;
    v7 = v2 + 56;
    result = swift_retain();
    v9 = 0;
    while (1)
    {
      if (v6)
      {
        v11 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v12 = v11 | (v9 << 6);
      }
      else
      {
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v13 >= v25)
          goto LABEL_33;
        v14 = v26[v13];
        ++v9;
        if (!v14)
        {
          v9 = v13 + 1;
          if (v13 + 1 >= v25)
            goto LABEL_33;
          v14 = v26[v9];
          if (!v14)
          {
            v9 = v13 + 2;
            if (v13 + 2 >= v25)
              goto LABEL_33;
            v14 = v26[v9];
            if (!v14)
            {
              v15 = v13 + 3;
              if (v15 >= v25)
              {
LABEL_33:
                swift_release();
                v24 = 1 << *(_BYTE *)(v1 + 32);
                if (v24 > 63)
                  bzero(v26, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v26 = -1 << v24;
                *(_QWORD *)(v1 + 16) = 0;
                break;
              }
              v14 = v26[v15];
              if (!v14)
              {
                while (1)
                {
                  v9 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_39;
                  if (v9 >= v25)
                    goto LABEL_33;
                  v14 = v26[v9];
                  ++v15;
                  if (v14)
                    goto LABEL_23;
                }
              }
              v9 = v15;
            }
          }
        }
LABEL_23:
        v6 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v9 << 6);
      }
      v16 = *(_BYTE *)(*(_QWORD *)(v1 + 48) + v12);
      sub_224F68510();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      result = sub_224F6854C();
      v17 = -1 << *(_BYTE *)(v3 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6))) != 0)
      {
        v10 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v20 = 0;
        v21 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v21 && (v20 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v22 = v19 == v21;
          if (v19 == v21)
            v19 = 0;
          v20 |= v22;
          v23 = *(_QWORD *)(v7 + 8 * v19);
        }
        while (v23 == -1);
        v10 = __clz(__rbit64(~v23)) + (v19 << 6);
      }
      *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      *(_BYTE *)(*(_QWORD *)(v3 + 48) + v10) = v16;
      ++*(_QWORD *)(v3 + 16);
    }
  }
  result = swift_release();
  *v0 = v3;
  return result;
}

uint64_t sub_224F1ABB4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = sub_224F677A8();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_224F1E420();
  v6 = sub_224F680A8();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v5 + 48);
      v23 = *(_QWORD *)(v36 + 72);
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v22 + v23 * v17, v2);
      sub_224DDACD4(&qword_2557E3A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      result = sub_224F67B14();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v23, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t sub_224F1AF1C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_224F1A5D4();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_224F1B4A4();
      goto LABEL_22;
    }
    sub_224F1B9E8();
  }
  v11 = *v4;
  sub_224F68510();
  sub_224F67C34();
  result = sub_224F6854C();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_224F683CC(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_224F68498();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_224F683CC();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_224F1B0B4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  char v22;

  v5 = result & 1;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  v22 = result & 1;
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_28;
  if ((a3 & 1) != 0)
  {
    sub_224F1A894();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_224F1B63C();
      goto LABEL_28;
    }
    sub_224F1BC6C();
  }
  v8 = *v3;
  sub_224F68510();
  if (v5)
    v9 = 0xD000000000000011;
  else
    v9 = 0xD000000000000010;
  if (v5)
    v10 = 0x8000000224F7A0F0;
  else
    v10 = 0x8000000224F7A0D0;
  sub_224F67C34();
  swift_bridgeObjectRelease();
  result = sub_224F6854C();
  v11 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = ~v11;
    do
    {
      v13 = *(_BYTE *)(*(_QWORD *)(v8 + 48) + a2) ? 0xD000000000000011 : 0xD000000000000010;
      v14 = *(_BYTE *)(*(_QWORD *)(v8 + 48) + a2) ? 0x8000000224F7A0F0 : 0x8000000224F7A0D0;
      if (v13 == v9 && v14 == v10)
        goto LABEL_31;
      v16 = sub_224F683CC();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
        goto LABEL_32;
      a2 = (a2 + 1) & v12;
    }
    while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_28:
  v17 = *v21;
  *(_QWORD *)(*v21 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v17 + 48) + a2) = v22;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (!v19)
  {
    *(_QWORD *)(v17 + 16) = v20;
    return result;
  }
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease_n();
LABEL_32:
  result = sub_224F68498();
  __break(1u);
  return result;
}

uint64_t sub_224F1B2A0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = sub_224F677A8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_224F1ABB4();
  }
  else
  {
    if (v11 > v10)
    {
      sub_224F1B7C8();
      goto LABEL_12;
    }
    sub_224F1BF54();
  }
  v12 = *v3;
  sub_224DDACD4(&qword_2557E3A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v13 = sub_224F67B14();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      sub_224DDACD4(&qword_2557E3A10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v18 = sub_224F67B50();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_224F68498();
  __break(1u);
  return result;
}

void *sub_224F1B4A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_224F1E044();
  v2 = *v0;
  v3 = sub_224F6809C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_224F1B63C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_224F1E4FC();
  v2 = *v0;
  v3 = sub_224F6809C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_224F1B7C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = sub_224F677A8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F1E420();
  v6 = *v0;
  v7 = sub_224F6809C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_224F1B9E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_224F1E044();
  v3 = sub_224F680A8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_32:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain_n();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_21;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v16 >= v29)
      goto LABEL_30;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_30;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v18 = v16 + 2;
        if (v18 >= v29)
        {
LABEL_30:
          result = swift_release_n();
          v1 = v0;
          goto LABEL_32;
        }
        v17 = *(_QWORD *)(v6 + 8 * v18);
        v11 = v18;
        if (!v17)
          break;
      }
    }
LABEL_20:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_21:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_224F68510();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    result = sub_224F6854C();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_33;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_30;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_224F1BC6C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;

  v1 = *v0;
  sub_224F1E4FC();
  v2 = sub_224F680A8();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
LABEL_35:
    *v0 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v24 = v1 + 56;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 56);
  v25 = (unint64_t)(v4 + 63) >> 6;
  v7 = v2 + 56;
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v9 << 6);
      goto LABEL_24;
    }
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v25)
      goto LABEL_33;
    v14 = *(_QWORD *)(v24 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v25)
        goto LABEL_33;
      v14 = *(_QWORD *)(v24 + 8 * v9);
      if (!v14)
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v25)
          goto LABEL_33;
        v14 = *(_QWORD *)(v24 + 8 * v9);
        if (!v14)
          break;
      }
    }
LABEL_23:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_24:
    v16 = *(_BYTE *)(*(_QWORD *)(v1 + 48) + v12);
    sub_224F68510();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    result = sub_224F6854C();
    v17 = -1 << *(_BYTE *)(v3 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6))) != 0)
    {
      v10 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v20 = 0;
      v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v22 = v19 == v21;
        if (v19 == v21)
          v19 = 0;
        v20 |= v22;
        v23 = *(_QWORD *)(v7 + 8 * v19);
      }
      while (v23 == -1);
      v10 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    *(_BYTE *)(*(_QWORD *)(v3 + 48) + v10) = v16;
    ++*(_QWORD *)(v3 + 16);
  }
  v15 = v13 + 3;
  if (v15 >= v25)
  {
LABEL_33:
    result = swift_release_n();
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v24 + 8 * v15);
  if (v14)
  {
    v9 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v9 >= v25)
      goto LABEL_33;
    v14 = *(_QWORD *)(v24 + 8 * v9);
    ++v15;
    if (v14)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_224F1BF54()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = sub_224F677A8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  sub_224F1E420();
  v7 = sub_224F680A8();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    sub_224DDACD4(&qword_2557E3A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = sub_224F67B14();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_224F1C278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v7 = a1;
    v6 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v23 = sub_224F681D4();
  swift_bridgeObjectRelease();
  if (v23 < v5)
    goto LABEL_31;
LABEL_4:
  v9 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v10 = sub_224F681D4();
    swift_bridgeObjectRelease();
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v14 = sub_224F681D4();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v6 = *v4;
  if (*v4 >> 62)
    goto LABEL_34;
  v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_36;
LABEL_8:
  v6 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v6;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v13 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if (v6 >> 62)
    goto LABEL_37;
  v14 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain();
  v6 = MEMORY[0x22768E1D8](v10, v14, 1, v6);
  swift_bridgeObjectRelease();
  *v4 = v6;
  v13 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v7);
  sub_224E5451C(0, (unint64_t *)&qword_2557E1648);
  swift_arrayDestroy();
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return sub_224F67D84();
  }
  if (!(v6 >> 62))
  {
    v16 = *(_QWORD *)(v13 + 16);
    v17 = v16 - v5;
    if (!__OFSUB__(v16, v5))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v24 = sub_224F681D4();
  swift_bridgeObjectRelease();
  v17 = v24 - v5;
  if (__OFSUB__(v24, v5))
    goto LABEL_40;
LABEL_21:
  if ((v17 & 0x8000000000000000) == 0)
  {
    v18 = (char *)(v15 + 1);
    v19 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v19 || v18 >= &v19[8 * v17])
      memmove(v18, v19, 8 * v17);
    if (!(v6 >> 62))
    {
      v20 = *(_QWORD *)(v13 + 16);
      v21 = v20 + v8;
      if (!__OFADD__(v20, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v21;
        goto LABEL_28;
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v25 = sub_224F681D4();
    swift_bridgeObjectRelease();
    v21 = v25 + v8;
    if (!__OFADD__(v25, v8))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = sub_224F68210();
  __break(1u);
  return result;
}

uint64_t sub_224F1C560(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    v7 = sub_224F1C6E0((uint64_t)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, a2, v3);
    swift_release();
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    v7 = sub_224F1C6E0((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x22768EDE4](v8, -1, -1);
  }
  return v7;
}

uint64_t sub_224F1C6E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  _QWORD *v31;
  BOOL v32;
  BOOL v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  BOOL v52;
  uint64_t v53;
  _QWORD *v54;
  BOOL v55;
  unint64_t *v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;

  v4 = a4;
  v5 = a3;
  v57 = (unint64_t *)result;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v6 = 0;
    v58 = a4 + 56;
    v7 = 1 << *(_BYTE *)(a4 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(a4 + 56);
    v59 = (unint64_t)(v7 + 63) >> 6;
    v61 = 0;
    v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v62 = v6;
          v12 = v11 | (v6 << 6);
        }
        else
        {
          v13 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_81;
          }
          if (v13 >= v59)
            goto LABEL_79;
          v14 = *(_QWORD *)(v58 + 8 * v13);
          v15 = v6 + 1;
          if (!v14)
          {
            v15 = v6 + 2;
            if (v6 + 2 >= v59)
              goto LABEL_79;
            v14 = *(_QWORD *)(v58 + 8 * v15);
            if (!v14)
            {
              v15 = v6 + 3;
              if (v6 + 3 >= v59)
                goto LABEL_79;
              v14 = *(_QWORD *)(v58 + 8 * v15);
              if (!v14)
              {
                v16 = v6 + 4;
                if (v6 + 4 >= v59)
                  goto LABEL_79;
                v14 = *(_QWORD *)(v58 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    v15 = v16 + 1;
                    if (__OFADD__(v16, 1))
                      goto LABEL_83;
                    if (v15 >= v59)
                      goto LABEL_79;
                    v14 = *(_QWORD *)(v58 + 8 * v15);
                    ++v16;
                    if (v14)
                      goto LABEL_22;
                  }
                }
                v15 = v6 + 4;
              }
            }
          }
LABEL_22:
          v9 = (v14 - 1) & v14;
          v62 = v15;
          v12 = __clz(__rbit64(v14)) + (v15 << 6);
        }
        v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
        v19 = *v17;
        v18 = v17[1];
        sub_224F68510();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        v20 = sub_224F6854C();
        v21 = -1 << *(_BYTE *)(v5 + 32);
        v22 = v20 & ~v21;
        v23 = v22 >> 6;
        v24 = 1 << v22;
        if (((1 << v22) & *(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
          break;
LABEL_6:
        result = swift_bridgeObjectRelease();
        v6 = v62;
        v5 = a3;
        v4 = a4;
      }
      v25 = *(_QWORD *)(a3 + 48);
      v26 = (_QWORD *)(v25 + 16 * v22);
      v27 = *v26 == v19 && v26[1] == v18;
      if (!v27 && (sub_224F683CC() & 1) == 0)
      {
        v28 = ~v21;
        for (i = v22 + 1; ; i = v30 + 1)
        {
          v30 = i & v28;
          if (((*(_QWORD *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0)
            break;
          v31 = (_QWORD *)(v25 + 16 * v30);
          v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (sub_224F683CC() & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v23 = v30 >> 6;
            v24 = 1 << v30;
            goto LABEL_38;
          }
        }
        goto LABEL_6;
      }
      result = swift_bridgeObjectRelease();
LABEL_38:
      v6 = v62;
      v5 = a3;
      v57[v23] |= v24;
      v33 = __OFADD__(v61++, 1);
      v4 = a4;
      if (v33)
        goto LABEL_82;
    }
  }
  v34 = 0;
  v60 = a3 + 56;
  v61 = 0;
  v35 = 1 << *(_BYTE *)(a3 + 32);
  if (v35 < 64)
    v36 = ~(-1 << v35);
  else
    v36 = -1;
  v37 = v36 & *(_QWORD *)(a3 + 56);
  v63 = (unint64_t)(v35 + 63) >> 6;
  v38 = a4 + 56;
  while (1)
  {
    if (v37)
    {
      v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v40 = v39 | (v34 << 6);
      goto LABEL_63;
    }
    v41 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v41 >= v63)
      goto LABEL_79;
    v42 = *(_QWORD *)(v60 + 8 * v41);
    ++v34;
    if (!v42)
    {
      v34 = v41 + 1;
      if (v41 + 1 >= v63)
        goto LABEL_79;
      v42 = *(_QWORD *)(v60 + 8 * v34);
      if (!v42)
      {
        v34 = v41 + 2;
        if (v41 + 2 >= v63)
          goto LABEL_79;
        v42 = *(_QWORD *)(v60 + 8 * v34);
        if (!v42)
          break;
      }
    }
LABEL_62:
    v37 = (v42 - 1) & v42;
    v40 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_63:
    v44 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v40);
    v46 = *v44;
    v45 = v44[1];
    sub_224F68510();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    v47 = sub_224F6854C();
    v48 = -1 << *(_BYTE *)(v4 + 32);
    v49 = v47 & ~v48;
    if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
      goto LABEL_46;
    v50 = *(_QWORD *)(a4 + 48);
    v51 = (_QWORD *)(v50 + 16 * v49);
    v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (sub_224F683CC() & 1) != 0)
    {
LABEL_76:
      result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      v33 = __OFADD__(v61++, 1);
      v5 = a3;
      v4 = a4;
      if (v33)
      {
        __break(1u);
LABEL_79:
        swift_retain();
        return sub_224F1CC1C(v57, a2, v61, v5);
      }
    }
    else
    {
      v53 = ~v48;
      while (1)
      {
        v49 = (v49 + 1) & v53;
        if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
          break;
        v54 = (_QWORD *)(v50 + 16 * v49);
        v55 = *v54 == v46 && v54[1] == v45;
        if (v55 || (sub_224F683CC() & 1) != 0)
          goto LABEL_76;
      }
LABEL_46:
      result = swift_bridgeObjectRelease();
      v5 = a3;
      v4 = a4;
    }
  }
  v43 = v41 + 3;
  if (v43 >= v63)
    goto LABEL_79;
  v42 = *(_QWORD *)(v60 + 8 * v43);
  if (v42)
  {
    v34 = v43;
    goto LABEL_62;
  }
  while (1)
  {
    v34 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v34 >= v63)
      goto LABEL_79;
    v42 = *(_QWORD *)(v60 + 8 * v34);
    ++v43;
    if (v42)
      goto LABEL_62;
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t sub_224F1CC1C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x24BEE4B08];
LABEL_36:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_224F1E044();
  result = sub_224F680B4();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    sub_224F68510();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    result = sub_224F6854C();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_224F1CEAC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t i;
  uint64_t (*v16)();
  uint64_t *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t (*v20[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_224F681D4();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_224F681D4();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_224F1E3C8(0, &qword_2557E39F8, v11, (uint64_t (*)(uint64_t))type metadata accessor for RTFNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
        sub_224F1E368(v12, v13, v14);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v16 = sub_224F1D2D0(v20, i, a3);
          v18 = *v17;
          swift_retain();
          ((void (*)(uint64_t (**)(), _QWORD))v16)(v20, 0);
          *(_QWORD *)(a1 + 8 * i) = v18;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for RTFNode();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_224F68210();
  __break(1u);
  return result;
}

uint64_t sub_224F1D0B4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_224F681D4();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_224F681D4();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_224F1E498();
        sub_224DDACD4(&qword_2557E3A30, (uint64_t (*)(uint64_t))sub_224F1E498, MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_224F1D328(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_224E5451C(0, &qword_2557E3A28);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_224F68210();
  __break(1u);
  return result;
}

uint64_t (*sub_224F1D2D0(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_224F1D3A8(v6, a2, a3);
  return sub_224F1D324;
}

uint64_t (*sub_224F1D328(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_224F1D41C(v6, a2, a3);
  return sub_224F1D324;
}

void sub_224F1D37C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_224F1D3A8(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x22768E1CC](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return sub_224F1D414;
  }
  __break(1u);
  return result;
}

uint64_t sub_224F1D414()
{
  return swift_release();
}

void (*sub_224F1D41C(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x22768E1CC](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for HealthRecordAttachmentsIndexer.State;
  }
  __break(1u);
  return result;
}

void destroy for HealthRecordAttachmentsIndexer.State(id *a1)
{

}

uint64_t sub_224F1D490(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_224F67E8C();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_224F19FE4(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_224F1D524(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = sub_224F677A8();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v18 - v8;
  sub_224F1E3C8(0, &qword_2557E2A08, 255, v3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  sub_224DDACD4(&qword_2557E3A08, v3, MEMORY[0x24BDCEA88]);
  v19 = sub_224F67E8C();
  if (v13)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v18 = *(_QWORD *)(v4 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    while (1)
    {
      v15(v12, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v16(v12, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v12, v2);
      sub_224F1A378((uint64_t)v9, v7);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v2);
      v14 += v18;
      if (!--v13)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_7:
    v16(v12, 1, 1, v2);
  }
  return v19;
}

uint64_t sub_224F1D704(uint64_t a1, unint64_t a2, unsigned int (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;

  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 1;
  v17 = a2 & 0xFFFFFFFFFFFFFFLL;
  v15 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  swift_bridgeObjectRetain();
  for (i = 0; i < v4; i += v12)
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      v10 = sub_224F680D8();
      v12 = v11;
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v16[0] = a1;
        v16[1] = v17;
        v10 = *((unsigned __int8 *)v16 + i);
        if (*((char *)v16 + i) < 0)
          __asm { BR              X9 }
      }
      else
      {
        v9 = v15;
        if ((a1 & 0x1000000000000000) == 0)
          v9 = sub_224F6815C();
        v10 = *(unsigned __int8 *)(v9 + i);
        if (*(char *)(v9 + i) < 0)
          __asm { BR              X10 }
      }
      v12 = 1;
    }
    v13 = (v3 == 0) & a3(v10);
    if ((_DWORD)v13 != 1)
      break;
  }
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_224F1D908(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  char v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;

  v2 = MEMORY[0x24BEE4AF8];
  v30 = MEMORY[0x24BEE4AF8];
  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v29 = 4 * v3;
    swift_bridgeObjectRetain();
    v28 = 0;
    v4 = 0;
    while (1)
    {
      swift_bridgeObjectRetain();
      v5 = sub_224F67C4C();
      swift_bridgeObjectRelease();
      v7 = sub_224F67D0C();
      v8 = v6;
      v9 = v7 == 123 && v6 == 0xE100000000000000;
      v10 = v9;
      if (!v9)
      {
        v11 = sub_224F683CC();
        v12 = v7 == 125 && v8 == 0xE100000000000000;
        v13 = v12;
        if ((v11 & 1) == 0 && !v13 && (sub_224F683CC() & 1) == 0)
          goto LABEL_6;
      }
      if (v4)
      {
        sub_224F67C58();
        if (sub_224F67D0C() == 92 && v14 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
        v15 = sub_224F683CC();
        swift_bridgeObjectRelease();
        if ((v15 & 1) != 0)
          goto LABEL_6;
      }
      if (v10 || (sub_224F683CC() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for RTFNode();
        v16 = (_QWORD *)swift_allocObject();
        v17 = MEMORY[0x24BEE4AF8];
        v16[4] = MEMORY[0x24BEE4AF8];
        v16[5] = v17;
        v16[6] = 0;
        v16[7] = 0xE000000000000000;
        v16[2] = 0;
        v16[3] = 0xE000000000000000;
        if (v30 >> 62)
        {
          swift_bridgeObjectRetain();
          v23 = sub_224F681D4();
          swift_bridgeObjectRelease();
          if (!v23)
          {
LABEL_32:
            swift_release();
            swift_retain();
            v28 = v16;
          }
        }
        else if (!*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_32;
        }
        if (v30 >> 62)
        {
          swift_bridgeObjectRetain();
          v18 = sub_224F681D4();
          if (!v18)
            goto LABEL_57;
LABEL_35:
          v19 = v18 - 1;
          if (__OFSUB__(v18, 1))
          {
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            swift_bridgeObjectRetain();
            v26 = sub_224F681D4();
            swift_bridgeObjectRelease();
            goto LABEL_72;
          }
          if ((v30 & 0xC000000000000001) != 0)
          {
            v20 = MEMORY[0x22768E1CC](v19, v30);
          }
          else
          {
            if ((v19 & 0x8000000000000000) != 0)
              goto LABEL_76;
            if (v19 >= *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_77;
            v20 = *(_QWORD *)(v30 + 8 * v19 + 32);
            swift_retain();
          }
          swift_bridgeObjectRelease();
          swift_beginAccess();
          v21 = swift_retain();
          MEMORY[0x22768DE24](v21);
          if (*(_QWORD *)((*(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
            sub_224F67D90();
          sub_224F67D9C();
          sub_224F67D84();
          swift_endAccess();
          swift_beginAccess();
          sub_224F67C94();
          swift_endAccess();
          swift_release();
        }
        else
        {
          v18 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v18)
            goto LABEL_35;
LABEL_57:
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v24 = swift_retain();
        MEMORY[0x22768DE24](v24);
        if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_224F67D90();
        sub_224F67D9C();
        sub_224F67D84();
LABEL_61:
        swift_release();
        goto LABEL_7;
      }
      if (v7 == 125 && v8 == 0xE100000000000000 || (sub_224F683CC() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        if (v30 >> 62)
        {
          if ((v30 & 0x8000000000000000) != 0)
            v4 = v30;
          else
            v4 = v30 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          v25 = sub_224F681D4();
          swift_bridgeObjectRelease();
          if (!v25)
          {
LABEL_67:
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
        }
        else if (!*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_67;
        }
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v30 & 0x8000000000000000) != 0
          || (v30 & 0x4000000000000000) != 0)
        {
          sub_224ED6E94(v30);
        }
        v22 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v22)
          goto LABEL_78;
        *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22 - 1;
        sub_224F67D84();
        swift_beginAccess();
        sub_224F67C94();
        swift_endAccess();
        swift_bridgeObjectRelease();
        sub_224F196D4();
        goto LABEL_61;
      }
LABEL_6:
      MEMORY[0x22768DD58](v7, v8);
      swift_bridgeObjectRelease();
LABEL_7:
      v4 = v5 >> 14;
      if (v5 >> 14 == v29)
      {
        swift_bridgeObjectRelease();
        v2 = v30;
        v4 = (uint64_t)v28;
        goto LABEL_70;
      }
    }
  }
  v4 = 0;
LABEL_70:
  swift_bridgeObjectRelease();
  if (v2 >> 62)
    goto LABEL_79;
  v26 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_72:
  swift_bridgeObjectRelease();
  if (v26)
  {
    swift_release();
    return 0;
  }
  return v4;
}

uint64_t sub_224F1DECC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 48);
  *a2 = *(_QWORD *)(v3 + 40);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for RTFDocument()
{
  return objc_opt_self();
}

uint64_t method lookup function for RTFDocument()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RTFDocument.plainText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of RTFDocument.plainText.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of RTFDocument.plainText.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of RTFDocument.__allocating_init(rtfString:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t type metadata accessor for RTFNode()
{
  return objc_opt_self();
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_224F6734C();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_224F1E000()
{
  sub_224F6734C();
  return sub_224F67334() & 1;
}

void sub_224F1E044()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E39F0)
  {
    v0 = sub_224F680C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E39F0);
  }
}

uint64_t sub_224F1E0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!(*v3 >> 62))
    {
      if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v19 = sub_224F681D4();
  swift_bridgeObjectRelease();
  if (v19 < v2)
    goto LABEL_31;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v8 = sub_224F681D4();
    swift_bridgeObjectRelease();
    v9 = v8 + v6;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v12 = sub_224F681D4();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v5 = *v3;
  if (*v3 >> 62)
    goto LABEL_34;
  v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  v9 = v8 - v7;
  if (__OFADD__(v8, v6))
    goto LABEL_36;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if (v5 >> 62)
    goto LABEL_37;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain();
  v5 = MEMORY[0x22768E1D8](v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  type metadata accessor for RTFNode();
  swift_arrayDestroy();
  if (!v6)
    return sub_224F67D84();
  if (!(v5 >> 62))
  {
    v13 = *(_QWORD *)(v11 + 16);
    v14 = v13 - v2;
    if (!__OFSUB__(v13, v2))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v20 = sub_224F681D4();
  swift_bridgeObjectRelease();
  v14 = v20 - v2;
  if (__OFSUB__(v20, v2))
    goto LABEL_40;
LABEL_21:
  if ((v14 & 0x8000000000000000) == 0)
  {
    v15 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v15 + 8 * v14)
      memmove((void *)(v11 + 32 + 8 * v4), v15, 8 * v14);
    if (!(v5 >> 62))
    {
      v16 = *(_QWORD *)(v11 + 16);
      v17 = v16 + v6;
      if (!__OFADD__(v16, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v17;
        return sub_224F67D84();
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v21 = sub_224F681D4();
    swift_bridgeObjectRelease();
    v17 = v21 + v6;
    if (!__OFADD__(v21, v6))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = sub_224F68210();
  __break(1u);
  return result;
}

unint64_t sub_224F1E368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  uint64_t v4;

  result = qword_2557E3A00;
  if (!qword_2557E3A00)
  {
    sub_224F1E3C8(255, &qword_2557E39F8, a3, (uint64_t (*)(uint64_t))type metadata accessor for RTFNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, (unint64_t *)&qword_2557E3A00);
  }
  return result;
}

void sub_224F1E3C8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = a4(a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_224F1E420()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E3A18)
  {
    sub_224F677A8();
    sub_224DDACD4(&qword_2557E3A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    v0 = sub_224F680C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E3A18);
  }
}

void sub_224F1E498()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E3A20)
  {
    sub_224E5451C(255, &qword_2557E3A28);
    v0 = sub_224F67DB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E3A20);
  }
}

void sub_224F1E4FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E3A38)
  {
    sub_224F1E554();
    v0 = sub_224F680C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E3A38);
  }
}

unint64_t sub_224F1E554()
{
  unint64_t result;

  result = qword_2557E3A40;
  if (!qword_2557E3A40)
  {
    result = MEMORY[0x22768ED24](&unk_224F6DC6C, &type metadata for FHIRResourceType);
    atomic_store(result, (unint64_t *)&qword_2557E3A40);
  }
  return result;
}

uint64_t VCJWKSet.key(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 16);
  if (!v8)
  {
LABEL_11:
    sub_224E65EF4();
    swift_allocError();
    *(_QWORD *)v23 = a1;
    *(_QWORD *)(v23 + 8) = a2;
    *(_BYTE *)(v23 + 16) = 2;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  v9 = *(_OWORD *)(v7 + 128);
  v34 = *(_OWORD *)(v7 + 112);
  v35 = v9;
  v36 = *(_OWORD *)(v7 + 144);
  v37 = *(_QWORD *)(v7 + 160);
  v10 = *(_OWORD *)(v7 + 48);
  v11 = *(_OWORD *)(v7 + 80);
  v12 = *(_OWORD *)(v7 + 96);
  v31 = *(_OWORD *)(v7 + 64);
  v32 = v11;
  v33 = v12;
  v29 = *(_OWORD *)(v7 + 32);
  v30 = v10;
  v13 = (__int128 *)(v7 + 168);
  v14 = v8 - 1;
  v15 = *((_QWORD *)&v9 + 1);
  if (!*((_QWORD *)&v9 + 1))
    goto LABEL_8;
LABEL_3:
  v16 = (_QWORD)v35 == a1 && v15 == a2;
  if (!v16 && (sub_224F683CC() & 1) == 0)
  {
LABEL_8:
    while (v14)
    {
      v29 = *v13;
      v17 = v13[1];
      v18 = v13[2];
      v19 = v13[4];
      v32 = v13[3];
      v33 = v19;
      v30 = v17;
      v31 = v18;
      v20 = v13[5];
      v21 = v13[6];
      v22 = v13[7];
      v37 = *((_QWORD *)v13 + 16);
      v35 = v21;
      v36 = v22;
      v34 = v20;
      v13 = (__int128 *)((char *)v13 + 136);
      --v14;
      v15 = *((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
        goto LABEL_3;
    }
    goto LABEL_11;
  }
  result = sub_224E76F20((uint64_t)&v29);
  v25 = v36;
  *(_OWORD *)(a3 + 96) = v35;
  *(_OWORD *)(a3 + 112) = v25;
  *(_QWORD *)(a3 + 128) = v37;
  v26 = v32;
  *(_OWORD *)(a3 + 32) = v31;
  *(_OWORD *)(a3 + 48) = v26;
  v27 = v34;
  *(_OWORD *)(a3 + 64) = v33;
  *(_OWORD *)(a3 + 80) = v27;
  v28 = v30;
  *(_OWORD *)a3 = v29;
  *(_OWORD *)(a3 + 16) = v28;
  return result;
}

uint64_t VCJWKSet.keys.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL static VCJWKSet.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_224DD68B4(*a1, *a2);
}

uint64_t sub_224F1E718()
{
  return 1937335659;
}

uint64_t sub_224F1E728@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1937335659 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_224F683CC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_224F1E7AC()
{
  sub_224F1E920();
  return sub_224F685B8();
}

uint64_t sub_224F1E7D4()
{
  sub_224F1E920();
  return sub_224F685C4();
}

uint64_t VCJWKSet.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  sub_224F1EB54(0, &qword_2557E3A48, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v10 - v6;
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F1E920();
  sub_224F68594();
  v10[1] = v8;
  sub_224F1E964();
  sub_224F1EBB0(&qword_2557E3A60, (uint64_t (*)(void))sub_224F1E9B8, MEMORY[0x24BEE12A0]);
  sub_224F68378();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_224F1E920()
{
  unint64_t result;

  result = qword_2557E3A50;
  if (!qword_2557E3A50)
  {
    result = MEMORY[0x22768ED24](&unk_224F74234, &type metadata for VCJWKSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3A50);
  }
  return result;
}

void sub_224F1E964()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E3A58)
  {
    v0 = sub_224F67DB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E3A58);
  }
}

unint64_t sub_224F1E9B8()
{
  unint64_t result;

  result = qword_2557E3A68;
  if (!qword_2557E3A68)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for VCJWK, &type metadata for VCJWK);
    atomic_store(result, (unint64_t *)&qword_2557E3A68);
  }
  return result;
}

uint64_t VCJWKSet.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  sub_224F1EB54(0, &qword_2557E3A70, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F1E920();
  sub_224F6857C();
  if (!v2)
  {
    sub_224F1E964();
    sub_224F1EBB0(&qword_2557E3A78, (uint64_t (*)(void))sub_224F1EC14, MEMORY[0x24BEE12D0]);
    sub_224F682DC();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *a2 = v11[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_224F1EB54(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224F1E920();
    v7 = a3(a1, &type metadata for VCJWKSet.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_224F1EBB0(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_224F1E964();
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x22768ED24](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_224F1EC14()
{
  unint64_t result;

  result = qword_2557E3A80;
  if (!qword_2557E3A80)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for VCJWK, &type metadata for VCJWK);
    atomic_store(result, (unint64_t *)&qword_2557E3A80);
  }
  return result;
}

uint64_t sub_224F1EC58@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return VCJWKSet.init(from:)(a1, a2);
}

uint64_t sub_224F1EC6C(_QWORD *a1)
{
  return VCJWKSet.encode(to:)(a1);
}

BOOL sub_224F1EC80(uint64_t *a1, uint64_t *a2)
{
  return sub_224DD68B4(*a1, *a2);
}

ValueMetadata *type metadata accessor for VCJWKSet()
{
  return &type metadata for VCJWKSet;
}

uint64_t storeEnumTagSinglePayload for VCJWKSet.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_224F1ECDC + 4 * asc_224F740D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_224F1ECFC + 4 * byte_224F740D5[v4]))();
}

_BYTE *sub_224F1ECDC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_224F1ECFC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_224F1ED04(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_224F1ED0C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_224F1ED14(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_224F1ED1C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for VCJWKSet.CodingKeys()
{
  return &type metadata for VCJWKSet.CodingKeys;
}

unint64_t sub_224F1ED3C()
{
  unint64_t result;

  result = qword_2557E3A88;
  if (!qword_2557E3A88)
  {
    result = MEMORY[0x22768ED24](&unk_224F7420C, &type metadata for VCJWKSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3A88);
  }
  return result;
}

unint64_t sub_224F1ED84()
{
  unint64_t result;

  result = qword_2557E3A90;
  if (!qword_2557E3A90)
  {
    result = MEMORY[0x22768ED24](&unk_224F7417C, &type metadata for VCJWKSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3A90);
  }
  return result;
}

unint64_t sub_224F1EDCC()
{
  unint64_t result;

  result = qword_2557E3A98;
  if (!qword_2557E3A98)
  {
    result = MEMORY[0x22768ED24](&unk_224F741A4, &type metadata for VCJWKSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3A98);
  }
  return result;
}

void VCJWTError.errorDescription.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_224F1EE44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  id v23;
  uint64_t v25;

  v23 = v22;
  sub_224F680E4();
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  Error.hdhr_friendlyDescription.getter(v25);
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F1F028(v22, 0);
  return 0xD00000000000001CLL;
}

void sub_224F1EFEC()
{
  JUMPOUT(0x224F1EFD8);
}

void sub_224F1F010()
{
  JUMPOUT(0x224F1F01CLL);
}

void sub_224F1F028(id a1, char a2)
{
  if (!a2)

}

uint64_t initializeBufferWithCopyOfBuffer for VCJWTError(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_224F1F084(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id sub_224F1F084(id result, char a2)
{
  if (!a2)
    return result;
  return result;
}

void destroy for VCJWTError(uint64_t a1)
{
  sub_224F1F028(*(id *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for VCJWTError(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_224F1F084(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_224F1F028(v5, v6);
  return a1;
}

uint64_t assignWithTake for VCJWTError(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_224F1F028(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for VCJWTError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VCJWTError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_224F1F1BC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_224F1F1D4(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for VCJWTError()
{
  return &type metadata for VCJWTError;
}

id sub_224F1F200(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id result;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  unint64_t v34;
  id v35;
  void *v36;
  void *v37;
  void *ObjCClassFromMetadata;
  void *v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;

  v57 = a5;
  sub_224E7C238();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5451C(0, &qword_2557E3AA0);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_clinicalNoteRecordTypeForIdentifier_, *MEMORY[0x24BDD2AA0]);
  if (result)
  {
    v21 = result;
    v22 = *(_QWORD *)(a3 + 8);
    v23 = *(_QWORD *)(a3 + 16);
    v53 = a4;
    v54 = a6;
    v52 = a7;
    v50 = v9;
    if (v22 == 0xD000000000000010 && v23 == 0x8000000224F81FF0)
      v48 = 1;
    else
      v48 = sub_224F683CC();
    v24 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20));
    v25 = type metadata accessor for ExtractionContext();
    v49 = (char *)v24 + *(int *)(v25 + 28);
    v26 = sub_224F67718();
    v55 = a2;
    v56 = a1;
    v46 = *a1;
    v47 = (void *)v26;
    sub_224E7C28C(a2, (uint64_t)v19);
    v27 = sub_224F677D8();
    v28 = *(_QWORD *)(v27 - 8);
    v29 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v19, 1, v27) != 1)
    {
      v29 = (void *)sub_224F677C0();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v27);
    }
    v51 = a8;
    v45 = *v24;
    v30 = objc_msgSend((id)objc_opt_self(), sel_localDevice);
    if (*(uint64_t *)((char *)v24 + *(int *)(v25 + 40)))
    {
      v31 = swift_bridgeObjectRetain();
      sub_224F073F8(v31);
      swift_bridgeObjectRelease();
      v32 = (void *)sub_224F67AE4();
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = 0;
    }
    swift_bridgeObjectRetain();
    v33 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v34 = v24[1];
    v35 = sub_224F22D04();
    sub_224E5451C(0, &qword_2557E37D0);
    v36 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    if (a9)
    {
      v37 = (void *)sub_224F67D60();
      swift_bridgeObjectRelease();
    }
    else
    {
      v37 = 0;
    }
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    v43 = (v34 >> 2) & 1;
    v39 = v47;
    v40 = objc_retainAutoreleasedReturnValue(objc_msgSend(ObjCClassFromMetadata, sel_clinicalNoteRecordWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_statusCoding_documentTypeCodingCollection_noteCreationDate_categoriesCodingCollections_relevantStartDate_relevantEndDate_authors_, v21, 0, v48 & 1, v47, v46, v29, v45, v30, v32, v33, v43, v35, v53, v54, v36, v52,
              v51,
              v37));

    v41 = v40;
    v42 = (void *)sub_224F67718();
    objc_msgSend(v41, sel_setCreationDate_, v42);

    sub_224DDEAA0(v55, (uint64_t (*)(_QWORD))sub_224E7C238);
    sub_224DDEAA0((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    return v41;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_224F1F5EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  id v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _BYTE v71[152];
  _QWORD v72[19];
  _QWORD v73[20];
  uint64_t v74;

  v2 = v1;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v43 - v5;
  v47 = type metadata accessor for ModelsR4.ResourceProxy(0);
  v74 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v49 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E0330, v8, v3);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v43 - v10;
  v50 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
  MEMORY[0x24BDAC7A8](v50);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v0 + 16);
  if (v15 && (v16 = *(_QWORD *)(v15 + 16)) != 0)
  {
    v44 = v6;
    v45 = v15;
    v46 = v2;
    v17 = v15 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v48 = *(_QWORD *)(v12 + 72);
    swift_bridgeObjectRetain();
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v19 = v16 - 1;
    v20 = v47;
    while (1)
    {
      sub_224DDB408(v17, (uint64_t)v14, type metadata accessor for ModelsR4.Bundle.BundleEntry);
      sub_224F20C74((uint64_t)&v14[*(int *)(v50 + 20)], (uint64_t)v11);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v11, 1, v20) != 1)
      {
        sub_224DDB408((uint64_t)v11, v49, type metadata accessor for ModelsR4.ResourceProxy);
        v21 = (char *)&loc_224F1F828 + 4 * byte_224F74360[swift_getEnumCaseMultiPayload()];
        __asm { BR              X9 }
      }
      sub_224DDB50C((uint64_t)v11, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
      sub_224F20CD0((uint64_t)v72);
      sub_224DDEADC((uint64_t)v72, (uint64_t)v73, (uint64_t (*)(_QWORD))sub_224F20CF0);
      sub_224DDEAA0((uint64_t)v14, type metadata accessor for ModelsR4.Bundle.BundleEntry);
      sub_224DDEADC((uint64_t)v73, (uint64_t)v71, (uint64_t (*)(_QWORD))sub_224F20CF0);
      sub_224DDEADC((uint64_t)v71, (uint64_t)v72, (uint64_t (*)(_QWORD))sub_224F20CF0);
      v22 = sub_224F20D44((uint64_t)v72);
      if (v22 != 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v18 = sub_224E56A04(0, v18[2] + 1, 1, v18);
        v24 = v18[2];
        v23 = v18[3];
        if (v24 >= v23 >> 1)
          v18 = sub_224E56A04((_QWORD *)(v23 > 1), v24 + 1, 1, v18);
        sub_224DDEADC((uint64_t)v71, (uint64_t)&v61, (uint64_t (*)(_QWORD))sub_224F20CF0);
        v18[2] = v24 + 1;
        v25 = &v18[19 * v24];
        v26 = v62;
        *((_OWORD *)v25 + 2) = v61;
        *((_OWORD *)v25 + 3) = v26;
        v27 = v66;
        v29 = v63;
        v28 = v64;
        *((_OWORD *)v25 + 6) = v65;
        *((_OWORD *)v25 + 7) = v27;
        *((_OWORD *)v25 + 4) = v29;
        *((_OWORD *)v25 + 5) = v28;
        v31 = v68;
        v30 = v69;
        v32 = v67;
        v25[22] = v70;
        *((_OWORD *)v25 + 9) = v31;
        *((_OWORD *)v25 + 10) = v30;
        *((_OWORD *)v25 + 8) = v32;
        v20 = v47;
      }
      if (!v19)
        break;
      --v19;
      v17 += v48;
    }
    swift_bridgeObjectRelease();
    if (v18[2])
    {
      v36 = *((_OWORD *)v18 + 9);
      v67 = *((_OWORD *)v18 + 8);
      v68 = v36;
      v69 = *((_OWORD *)v18 + 10);
      v70 = v18[22];
      v37 = *((_OWORD *)v18 + 5);
      v63 = *((_OWORD *)v18 + 4);
      v64 = v37;
      v38 = *((_OWORD *)v18 + 7);
      v65 = *((_OWORD *)v18 + 6);
      v66 = v38;
      v39 = *((_OWORD *)v18 + 3);
      v61 = *((_OWORD *)v18 + 2);
      v62 = v39;
      sub_224DE6C78((uint64_t)&v61);
      swift_bridgeObjectRelease();
      v57 = v67;
      v58 = v68;
      v59 = v69;
      v60 = v70;
      v53 = v63;
      v54 = v64;
      v55 = v65;
      v56 = v66;
      v51 = v61;
      v52 = v62;
      v40 = sub_224F677D8();
      v41 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8];
      v42 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v44, 1, 1, v40);
      v34 = sub_224F48040(v42);
      sub_224DDB50C(v42, (unint64_t *)&qword_2557E1D00, v41);
      sub_224DE6D48((uint64_t)&v61);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_224E5451C(0, &qword_2557E3AB0);
      return static HKSignedClinicalDataSubject.unknown()();
    }
  }
  else
  {
    type metadata accessor for HDHRExtractionError(0);
    v34 = v33;
    v72[0] = 200;
    sub_224E6AE24(MEMORY[0x24BEE4AF8]);
    sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
    sub_224F6752C();
    swift_willThrow();
  }
  return v34;
}

uint64_t sub_224F1FDDC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[9] = a1;
  sub_224F20FF4(0, &qword_2557E3AC0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE70B8]);
  v2[10] = v3;
  v2[11] = *(_QWORD *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v4 = *(_QWORD *)(type metadata accessor for RecordExtractionContext() - 8);
  v2[13] = v4;
  v2[14] = *(_QWORD *)(v4 + 64);
  v2[15] = swift_task_alloc();
  sub_224F20FF4(0, &qword_2557E3AE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE70C8]);
  v2[16] = v5;
  v2[17] = *(_QWORD *)(v5 - 8);
  v2[18] = swift_task_alloc();
  v6 = swift_task_alloc();
  v7 = *(_QWORD *)(v1 + 16);
  v2[19] = v6;
  v2[20] = v7;
  return swift_task_switch();
}

uint64_t sub_224F1FEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 160);
  if (v1 && *(_QWORD *)(v1 + 16))
  {
    v2 = *(_QWORD *)(v0 + 144);
    v3 = *(_QWORD *)(v0 + 152);
    v4 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 136);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 104);
    sub_224DDB408(*(_QWORD *)(v0 + 72), v5, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v8 = swift_allocObject();
    sub_224DDEADC(v5, v8 + v7, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    *(_QWORD *)(v0 + 48) = v1;
    sub_224DDEA0C(0, &qword_2557E04A0, type metadata accessor for ModelsR4.Bundle.BundleEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224F20E84();
    sub_224F20F64();
    swift_bridgeObjectRetain();
    sub_224F68468();
    v9 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 56) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 64) = v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v2, v3, v4);
    sub_224F21240(&qword_2557E3B00, &qword_2557E3AE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE70C8], MEMORY[0x24BEE70D8]);
    sub_224F67E5C();
    *(_QWORD *)(v0 + 168) = sub_224F21240(&qword_2557E3B08, &qword_2557E3AC0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE70B8], MEMORY[0x24BEE70C0]);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v10;
    *v10 = v0;
    v10[1] = sub_224F20164;
    return sub_224F67DFC();
  }
  else
  {
    type metadata accessor for HDHRExtractionError(0);
    *(_QWORD *)(v0 + 40) = 200;
    sub_224E6AE24(MEMORY[0x24BEE4AF8]);
    sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
    sub_224F6752C();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_224F20164()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[23] = v0;
    v4 = v2[11];
    v3 = v2[12];
    v5 = v2[10];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_224F201F8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  id v16;
  uint64_t v17;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(void **)(v0 + 24);
    v3 = v1;
    MEMORY[0x22768DE24]();
    if (*(_QWORD *)((*(_QWORD *)(v0 + 56) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 56) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();
    v4 = v2;
    MEMORY[0x22768DE24]();
    if (*(_QWORD *)(*(_QWORD *)(v0 + 64) + 16) >= *(_QWORD *)(*(_QWORD *)(v0 + 64) + 24) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();

    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 192) = v5;
    *v5 = v0;
    v5[1] = sub_224F204C4;
    return sub_224F67DFC();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 128);
    v9 = *(_QWORD *)(v0 + 136);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    sub_224F21280(*(void **)(v0 + 16), *(void **)(v0 + 24));
    v10 = *(_QWORD *)(v0 + 56);
    v11 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v12 = MEMORY[0x24BEE4AF8];
    v17 = MEMORY[0x24BEE4AF8];
    v13 = *(_QWORD *)(v11 + 16);
    if (v13)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v13; ++i)
      {
        v15 = *(void **)(v11 + 8 * i + 32);
        if (v15)
        {
          v16 = v15;
          MEMORY[0x22768DE24]();
          if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_224F67D90();
          sub_224F67D9C();
          sub_224F67D84();
        }
      }
      swift_bridgeObjectRelease();
      v12 = v17;
    }
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v10, v12);
  }
}

uint64_t sub_224F20458()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 128));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F204C4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[23] = v0;
    v4 = v2[11];
    v3 = v2[12];
    v5 = v2[10];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_224F20558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v5 = (_QWORD *)swift_task_alloc();
  v3[5] = v5;
  *v5 = v3;
  v5[1] = sub_224F205B4;
  return sub_224F20664(a3);
}

uint64_t sub_224F205B4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F20610()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(void **)(v0 + 48);
  if (v1)
  {
    v2 = sub_224F20948(*(_QWORD *)(v0 + 32), v1);
    v3 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v3 = 0;
    v2 = 0;
  }
  v4 = *(_QWORD **)(v0 + 16);
  *v4 = v3;
  v4[1] = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F20664(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  sub_224DDEA0C(0, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v2[4] = swift_task_alloc();
  v3 = type metadata accessor for ModelsR4.ResourceProxy(0);
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F206FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
  sub_224F20C74(v4 + *(int *)(v5 + 20), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_224DDB50C(*(_QWORD *)(v0 + 32), &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
    if (qword_2557E0128 != -1)
      swift_once();
    v6 = sub_224F679B8();
    __swift_project_value_buffer(v6, (uint64_t)qword_2557FC958);
    v7 = sub_224F679AC();
    v8 = sub_224F67ED4();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_224DAC000, v7, v8, "ModelsR4.Bundle.BundleEntry.extractMedicalRecord: no “resource” entry, skipping", v9, 2u);
      MEMORY[0x22768EDE4](v9, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    sub_224DDEADC(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56), type metadata accessor for ModelsR4.ResourceProxy);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v11;
    *v11 = v0;
    v11[1] = sub_224F20898;
    return sub_224F54A18(*(_QWORD *)(v0 + 16));
  }
}

uint64_t sub_224F20898(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F208F4()
{
  uint64_t v0;
  uint64_t v1;

  sub_224DDEAA0(*(_QWORD *)(v0 + 56), type metadata accessor for ModelsR4.ResourceProxy);
  v1 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

id sub_224F20948(uint64_t a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  char *v35;
  uint64_t *v36;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v6 = (int *)type metadata accessor for FHIRExtractionContext();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v38 - v10;
  v12 = type metadata accessor for ModelsR4.ResourceProxy(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
  sub_224F20C74((uint64_t)v3 + *(int *)(v16 + 20), (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_224DDB50C((uint64_t)v11, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
    if (qword_2557E0128 != -1)
      swift_once();
    v17 = sub_224F679B8();
    __swift_project_value_buffer(v17, (uint64_t)qword_2557FC958);
    v18 = sub_224F679AC();
    v19 = sub_224F67ED4();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_224DAC000, v18, v19, "ModelsR4.Bundle.BundleEntry.asClinicalRecord: no “resource” entry, skipping", v20, 2u);
      MEMORY[0x22768EDE4](v20, -1, -1);
    }

    return 0;
  }
  else
  {
    sub_224DDEADC((uint64_t)v11, (uint64_t)v15, type metadata accessor for ModelsR4.ResourceProxy);
    ModelsR4.ResourceProxy.get()();
    v39 = a1;
    v23 = v42;
    v22 = v43;
    __swift_project_boxed_opaque_existential_1(v41, v42);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 24))(v23, v22);
    v26 = v25;
    v40 = a2;
    v27 = *v3;
    v28 = v3[1];
    v29 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v30 = objc_msgSend(v29, sel_primaryR4Version);
    v31 = (uint64_t *)((char *)v3 + *(int *)(v16 + 24));
    v32 = *v31;
    v33 = v31[1];
    sub_224DDB408(v39, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    v34 = (uint64_t *)&v8[v6[5]];
    *v34 = v24;
    v34[1] = v26;
    v35 = &v8[v6[6]];
    *(_QWORD *)v35 = v27;
    *((_QWORD *)v35 + 1) = v28;
    *(_QWORD *)&v8[v6[7]] = v30;
    v36 = (uint64_t *)&v8[v6[8]];
    *v36 = v32;
    v36[1] = v33;
    sub_224DDE970(v32, v33);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    v21 = sub_224F54FA0((uint64_t)v8, v40);
    sub_224DDEAA0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FHIRExtractionContext);
    sub_224DDEAA0((uint64_t)v15, type metadata accessor for ModelsR4.ResourceProxy);
  }
  return v21;
}

uint64_t sub_224F20C74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224DDEA0C(0, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double sub_224F20CD0(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void sub_224F20CF0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E3AA8)
  {
    v0 = sub_224F67FF4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E3AA8);
  }
}

uint64_t sub_224F20D44(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_224F20D5C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_224F20D90()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 120) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_224F20E14()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_224F20E48()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_224F20E84()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E3AC8)
  {
    sub_224E5451C(255, &qword_2557E1518);
    sub_224F20F00();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E3AC8);
  }
}

void sub_224F20F00()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E3AD0)
  {
    sub_224E5451C(255, &qword_2557E27E0);
    v0 = sub_224F67FF4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E3AD0);
  }
}

unint64_t sub_224F20F64()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E3AD8;
  if (!qword_2557E3AD8)
  {
    sub_224DDEA0C(255, &qword_2557E04A0, type metadata accessor for ModelsR4.Bundle.BundleEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E3AE0, type metadata accessor for ModelsR4.Bundle.BundleEntry, (uint64_t)&protocol conformance descriptor for ModelsR4.Bundle.BundleEntry);
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for <A> [A], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E3AD8);
  }
  return result;
}

void sub_224F20FF4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    sub_224DDEA0C(255, &qword_2557E04A0, type metadata accessor for ModelsR4.Bundle.BundleEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v7 = v6;
    sub_224F20E84();
    v9 = v8;
    v10 = sub_224F20F64();
    v11 = a3(a1, v7, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t sub_224F21088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for RecordExtractionContext();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 16) & ~v2;

  v4 = v0 + v3 + *(int *)(v1 + 20);
  v5 = type metadata accessor for ExtractionContext();
  v6 = v4 + *(int *)(v5 + 28);
  v7 = sub_224F67760();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = v4 + *(int *)(v5 + 32);
  v9 = sub_224F675D4();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_224F211A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RecordExtractionContext() - 8) + 80);
  v7 = v2 + ((v6 + 16) & ~v6);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_224EF7808;
  v8[3] = a2;
  v8[4] = v7;
  v8[2] = a1;
  v9 = (_QWORD *)swift_task_alloc();
  v8[5] = v9;
  *v9 = v8;
  v9[1] = sub_224F205B4;
  return sub_224F20664(v7);
}

uint64_t sub_224F21240(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_224F20FF4(255, a2, a3);
    result = MEMORY[0x22768ED24](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_224F21280(void *a1, void *a2)
{
  if (a1)
  {

  }
}

id sub_224F212AC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  id result;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_224F215FC();
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_unknownRecordTypeForIdentifier_, *MEMORY[0x24BDD3810]);
  if (result)
  {
    v6 = result;
    v7 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20));
    v8 = type metadata accessor for ExtractionContext();
    v9 = (void *)sub_224F67718();
    v17 = *v7;
    v18 = *a1;
    v10 = objc_msgSend((id)objc_opt_self(), sel_localDevice);
    v11 = *(void **)((char *)v7 + *(int *)(v8 + 40));
    v19 = (uint64_t)a1;
    if (v11)
    {
      v12 = swift_bridgeObjectRetain();
      sub_224F073F8(v12);
      swift_bridgeObjectRelease();
      v11 = (void *)sub_224F67AE4();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    v13 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v14 = v7[1];
    if (a3)
    {
      v15 = (void *)sub_224F67B5C();
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = 0;
    }
    v16 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_unknownRecordWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_displayName_, v6, 0, 0, v9, v18, 0, v17, v10, v11, v13, (v14 >> 2) & 1, v15);

    sub_224F07040(v19);
    return v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_224F214B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v17;

  v4 = type metadata accessor for RecordExtractionContext();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = objc_msgSend((id)objc_opt_self(), sel_synthesizeInMemoryConceptForCodingCollection_, a2);
  sub_224E7BB9C(a1, (uint64_t)v6);
  v8 = objc_msgSend(v7, sel_preferredName);
  if (v8)
  {
    v9 = v8;
    v10 = sub_224F67B80();
    v12 = v11;

  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v13 = sub_224F212AC(v6, v10, v12);
  type metadata accessor for ExtractionContext();
  v14 = v13;
  v15 = (void *)sub_224F67718();
  objc_msgSend(v14, sel_setCreationDate_, v15);

  sub_224F07040(a1);
  return v14;
}

unint64_t sub_224F215FC()
{
  unint64_t result;

  result = qword_2557E3B18;
  if (!qword_2557E3B18)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E3B18);
  }
  return result;
}

unint64_t Parameter.asSignedClinicalDataProcessingContext(sourceURL:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _OWORD v22[14];
  uint64_t v23;
  _OWORD v24[5];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v4 = v3;
  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v2 + 24);
  if (!v10)
    goto LABEL_7;
  v11 = *(_QWORD *)(v2 + 16);
  v12 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v12 = v11 & 0xFFFFFFFFFFFFLL;
  if (v12)
  {
    swift_bridgeObjectRetain();
    sub_224E55B58((uint64_t)v22);
    if (!v4)
    {
      v30 = v22[10];
      v31 = v22[11];
      v32 = v22[12];
      v33 = v22[13];
      v26 = v22[6];
      v27 = v22[7];
      v28 = v22[8];
      v29 = v22[9];
      v24[2] = v22[2];
      v24[3] = v22[3];
      v24[4] = v22[4];
      v25 = v22[5];
      v24[0] = v22[0];
      v24[1] = v22[1];
      v15 = sub_224E5A3D0();
      v17 = v16;
      v18 = sub_224F675D4();
      v19 = *(_QWORD *)(v18 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v9, a1, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v9, 0, 1, v18);
      v20 = v25;
      objc_allocWithZone(MEMORY[0x24BE48998]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = (unint64_t)sub_224E5A598(v15, v17, 1, (uint64_t)v9, v20, *((uint64_t *)&v20 + 1), 0, 0, 0, 0xF000000000000000, 0, a2);
      sub_224E5AE64((uint64_t)v24);
    }
  }
  else
  {
LABEL_7:
    type metadata accessor for HDHRExtractionError(0);
    v11 = v13;
    v23 = 203;
    sub_224E6AE24(MEMORY[0x24BEE4AF8]);
    sub_224E6B3FC();
    sub_224F6752C();
    swift_willThrow();
  }
  return v11;
}

uint64_t Parameter.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Parameter.valueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Parameter.valueUri.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Parameter.valueDateTime.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Parameter.part.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Parameter.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = v2[3];
  v5 = v2[5];
  v7 = v2[7];
  v6 = v2[8];
  if (v2[1])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    sub_224F68528();
    if (v4)
    {
LABEL_3:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      if (v5)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  sub_224F68528();
  if (v5)
  {
LABEL_4:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_5;
LABEL_10:
    sub_224F68528();
    if (v6)
      goto LABEL_6;
    return sub_224F68528();
  }
LABEL_9:
  sub_224F68528();
  if (!v7)
    goto LABEL_10;
LABEL_5:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v6)
  {
LABEL_6:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDB550(a1, v6);
    return swift_bridgeObjectRelease();
  }
  return sub_224F68528();
}

uint64_t sub_224F21AB8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224F21AE0 + 4 * byte_224F74370[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_224F21AE0()
{
  return 0x72745365756C6176;
}

uint64_t sub_224F21B00()
{
  return 0x69725565756C6176;
}

uint64_t sub_224F21B18()
{
  return 0x74614465756C6176;
}

uint64_t sub_224F21B3C()
{
  return 1953653104;
}

uint64_t sub_224F21B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224F22ACC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224F21B6C()
{
  sub_224F224E0();
  return sub_224F685B8();
}

uint64_t sub_224F21B94()
{
  sub_224F224E0();
  return sub_224F685C4();
}

uint64_t Parameter.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[8];
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  sub_224F22524(0, &qword_2557E3B20, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v16 - v6;
  v8 = v1[2];
  v16[5] = v1[3];
  v16[6] = v8;
  v9 = v1[4];
  v16[3] = v1[5];
  v16[4] = v9;
  v10 = v1[6];
  v16[1] = v1[7];
  v16[2] = v10;
  v16[0] = v1[8];
  v11 = a1[3];
  v12 = a1;
  v14 = v13;
  __swift_project_boxed_opaque_existential_1(v12, v11);
  sub_224F224E0();
  sub_224F68594();
  v21 = 0;
  sub_224F68300();
  if (!v2)
  {
    v20 = 1;
    sub_224F68300();
    v19 = 2;
    sub_224F68300();
    v18 = 3;
    sub_224F68300();
    v16[7] = v16[0];
    v17 = 4;
    sub_224E6B228();
    sub_224E6B354(&qword_2557E19C0, (uint64_t (*)(void))sub_224E6B27C, MEMORY[0x24BEE12A0]);
    sub_224F68330();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v14);
}

uint64_t Parameter.hashValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  _BYTE v5[72];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v1 = *((_QWORD *)v0 + 8);
  v2 = v0[1];
  v6 = *v0;
  v7 = v2;
  v3 = v0[3];
  v8 = v0[2];
  v9 = v3;
  v10 = v1;
  sub_224F68510();
  Parameter.hash(into:)((uint64_t)v5);
  return sub_224F6854C();
}

uint64_t Parameter.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  sub_224F22524(0, &qword_2557E3B30, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v24 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F224E0();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v36 = 0;
  v10 = sub_224F68264();
  v12 = v11;
  v35 = 1;
  swift_bridgeObjectRetain();
  v13 = sub_224F68264();
  v30 = v14;
  v26 = v13;
  v27 = v10;
  v34 = 2;
  swift_bridgeObjectRetain();
  v29 = 0;
  v25 = sub_224F68264();
  v33 = 3;
  v16 = v15;
  swift_bridgeObjectRetain();
  v17 = sub_224F68264();
  v28 = v16;
  v24 = v17;
  v20 = v19;
  sub_224E6B228();
  v32 = 4;
  sub_224E6B354(&qword_2557E19E0, (uint64_t (*)(void))sub_224E6B3B8, MEMORY[0x24BEE12D0]);
  swift_bridgeObjectRetain();
  sub_224F68294();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v21 = v31;
  swift_bridgeObjectRetain();
  v22 = v28;
  *a2 = v27;
  a2[1] = v12;
  v23 = v30;
  a2[2] = v26;
  a2[3] = v23;
  a2[4] = v25;
  a2[5] = v22;
  a2[6] = v24;
  a2[7] = v20;
  a2[8] = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224F221D4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Parameter.init(from:)(a1, a2);
}

uint64_t sub_224F221E8(_QWORD *a1)
{
  return Parameter.encode(to:)(a1);
}

uint64_t sub_224F221FC()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  _BYTE v5[72];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v1 = *((_QWORD *)v0 + 8);
  v2 = v0[1];
  v6 = *v0;
  v7 = v2;
  v3 = v0[3];
  v8 = v0[2];
  v9 = v3;
  v10 = v1;
  sub_224F68510();
  Parameter.hash(into:)((uint64_t)v5);
  return sub_224F6854C();
}

uint64_t sub_224F22258()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  _BYTE v5[72];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v1 = *((_QWORD *)v0 + 8);
  v2 = v0[1];
  v6 = *v0;
  v7 = v2;
  v3 = v0[3];
  v8 = v0[2];
  v9 = v3;
  v10 = v1;
  sub_224F68510();
  Parameter.hash(into:)((uint64_t)v5);
  return sub_224F6854C();
}

uint64_t _s23HealthRecordsExtraction9ParameterV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v10 = a1[7];
  v9 = a1[8];
  v11 = a2[1];
  v12 = a2[2];
  v14 = a2[3];
  v13 = a2[4];
  v15 = a2[5];
  v16 = a2[6];
  v18 = a2[7];
  v17 = a2[8];
  if (!v3)
  {
    if (v11)
      return 0;
    goto LABEL_8;
  }
  if (!v11)
    return 0;
  if (*a1 == *a2 && v3 == v11)
    goto LABEL_8;
  v45 = a2[6];
  v46 = a1[4];
  v43 = a1[7];
  v44 = a2[7];
  v19 = a1[6];
  v20 = a2[8];
  v21 = a1[8];
  v22 = a1[5];
  v23 = a2[5];
  v24 = a2[4];
  v25 = a1[2];
  v26 = sub_224F683CC();
  v4 = v25;
  v13 = v24;
  v15 = v23;
  v7 = v22;
  v9 = v21;
  v17 = v20;
  v8 = v19;
  v10 = v43;
  v18 = v44;
  v16 = v45;
  v6 = v46;
  v27 = v26;
  result = 0;
  if ((v27 & 1) != 0)
  {
LABEL_8:
    if (v5)
    {
      if (!v14)
        return 0;
      if (v4 != v12 || v5 != v14)
      {
        v29 = v9;
        v30 = v7;
        v31 = v15;
        v32 = v13;
        v33 = sub_224F683CC();
        v13 = v32;
        v15 = v31;
        v7 = v30;
        v9 = v29;
        v34 = v33;
        result = 0;
        if ((v34 & 1) == 0)
          return result;
      }
    }
    else if (v14)
    {
      return 0;
    }
    if (v7)
    {
      if (!v15)
        return 0;
      if (v6 != v13 || v7 != v15)
      {
        v35 = v9;
        v36 = sub_224F683CC();
        v9 = v35;
        v37 = v36;
        result = 0;
        if ((v37 & 1) == 0)
          return result;
      }
    }
    else if (v15)
    {
      return 0;
    }
    if (v10)
    {
      if (!v18)
        return 0;
      if (v8 != v16 || v10 != v18)
      {
        v38 = v9;
        v39 = sub_224F683CC();
        v9 = v38;
        v40 = v39;
        result = 0;
        if ((v40 & 1) == 0)
          return result;
      }
    }
    else if (v18)
    {
      return 0;
    }
    if (v9)
    {
      if (v17)
      {
        swift_bridgeObjectRetain();
        v41 = swift_bridgeObjectRetain();
        v42 = sub_224DD6674(v41, v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v42 & 1) != 0)
          return 1;
      }
    }
    else if (!v17)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_224F224E0()
{
  unint64_t result;

  result = qword_2557E3B28;
  if (!qword_2557E3B28)
  {
    result = MEMORY[0x22768ED24](&unk_224F74548, &type metadata for Parameter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3B28);
  }
  return result;
}

void sub_224F22524(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224F224E0();
    v7 = a3(a1, &type metadata for Parameter.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_224F22580(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_224E6B3B8();
  a1[2] = sub_224E6B27C();
  result = sub_224F225B4();
  a1[3] = result;
  return result;
}

unint64_t sub_224F225B4()
{
  unint64_t result;

  result = qword_2557E3B38;
  if (!qword_2557E3B38)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Parameter, &type metadata for Parameter);
    atomic_store(result, (unint64_t *)&qword_2557E3B38);
  }
  return result;
}

unint64_t sub_224F225FC()
{
  unint64_t result;

  result = qword_2557E3B40;
  if (!qword_2557E3B40)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Parameter, &type metadata for Parameter);
    atomic_store(result, (unint64_t *)&qword_2557E3B40);
  }
  return result;
}

uint64_t destroy for Parameter()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Parameter(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Parameter(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for Parameter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Parameter(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Parameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Parameter()
{
  return &type metadata for Parameter;
}

uint64_t storeEnumTagSinglePayload for Parameter.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_224F22974 + 4 * byte_224F7437A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_224F229A8 + 4 * byte_224F74375[v4]))();
}

uint64_t sub_224F229A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F229B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224F229B8);
  return result;
}

uint64_t sub_224F229C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224F229CCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_224F229D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F229D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Parameter.CodingKeys()
{
  return &type metadata for Parameter.CodingKeys;
}

unint64_t sub_224F229F8()
{
  unint64_t result;

  result = qword_2557E3B48;
  if (!qword_2557E3B48)
  {
    result = MEMORY[0x22768ED24](&unk_224F74520, &type metadata for Parameter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3B48);
  }
  return result;
}

unint64_t sub_224F22A40()
{
  unint64_t result;

  result = qword_2557E3B50;
  if (!qword_2557E3B50)
  {
    result = MEMORY[0x22768ED24](&unk_224F74490, &type metadata for Parameter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3B50);
  }
  return result;
}

unint64_t sub_224F22A88()
{
  unint64_t result;

  result = qword_2557E3B58;
  if (!qword_2557E3B58)
  {
    result = MEMORY[0x22768ED24](&unk_224F744B8, &type metadata for Parameter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3B58);
  }
  return result;
}

uint64_t sub_224F22ACC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72745365756C6176 && a2 == 0xEB00000000676E69 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69725565756C6176 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74614465756C6176 && a2 == 0xED0000656D695465 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1953653104 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

id sub_224F22D04()
{
  void **v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  _BYTE v9[16];
  _BYTE v10[16];
  uint64_t v11;
  void *v12;
  _QWORD v13[2];

  v1 = *v0;
  sub_224DDEADC((uint64_t)(v0 + 3), (uint64_t)v10, (uint64_t (*)(_QWORD))sub_224F22E64);
  sub_224DDEADC((uint64_t)(v0 + 5), (uint64_t)v9, (uint64_t (*)(_QWORD))sub_224F22E64);
  sub_224DDEADC((uint64_t)v10, (uint64_t)&v11, (uint64_t (*)(_QWORD))sub_224F22E64);
  v2 = v12;
  if (v12)
  {
    v3 = v1;
    swift_bridgeObjectRetain();
    sub_224F22EB8((uint64_t)v9);
    sub_224F22EB8((uint64_t)v10);
    v2 = (void *)sub_224F67B5C();
    sub_224F22EE0((uint64_t)v10);
  }
  else
  {
    v4 = v1;
    swift_bridgeObjectRetain();
    sub_224F22EB8((uint64_t)v9);
  }
  v5 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  sub_224DDEADC((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_224F22E64);
  if (v13[1])
  {
    v6 = (void *)sub_224F67B5C();
    sub_224F22EE0((uint64_t)v9);
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend((id)objc_opt_self(), sel_medicalCodingWithSystem_codingVersion_code_displayString_, v1, v2, v5, v6);

  return v7;
}

void sub_224F22E64()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E16D0)
  {
    v0 = sub_224F67FF4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E16D0);
  }
}

uint64_t sub_224F22EB8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_224F22EE0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_224F22F08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[56];
  _BYTE v85[56];
  char *v86;

  v5 = v4;
  v77 = a1;
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v79 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v86 = (char *)&v65 - v11;
  sub_224E63218(0, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v74 = (uint64_t)&v65 - v16;
  v76 = type metadata accessor for Coding();
  v17 = *(_QWORD *)(v76 - 8);
  v18 = MEMORY[0x24BDAC7A8](v76);
  v71 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v70 = (uint64_t)&v65 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v65 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v65 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = *(_QWORD *)(v3 + 16);
  v78 = a2;
  v75 = v29;
  if (a2)
  {
    if (!v29)
    {
      v45 = v17;
      v42 = v74;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v74, 1, 1, v76);
      goto LABEL_17;
    }
    v67 = (uint64_t)&v65 - v28;
    v72 = a3;
    v30 = *(_QWORD *)(v29 + 16);
    if (!v30)
    {
      swift_bridgeObjectRetain();
      a3 = v72;
      goto LABEL_15;
    }
    v66 = v15;
    v69 = v5;
    v31 = v29 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    v73 = v24 + 8;
    v68 = v17;
    v32 = *(_QWORD *)(v17 + 72);
    swift_bridgeObjectRetain_n();
    v33 = (uint64_t)v86;
    while (1)
    {
      sub_224E7920C(v31, (uint64_t)v27);
      sub_224E5AF70((uint64_t)v27, v33);
      v34 = sub_224F675D4();
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) == 1)
      {
        sub_224E7601C(v33, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        sub_224E7920C((uint64_t)v27, (uint64_t)v24);
      }
      else
      {
        v36 = v32;
        v37 = sub_224F6755C();
        v39 = v38;
        (*(void (**)(char *, uint64_t))(v35 + 8))(v86, v34);
        v82 = v37;
        v83 = v39;
        v80 = v77;
        v81 = v78;
        sub_224E51E94();
        v32 = v36;
        v40 = sub_224F6803C();
        v33 = (uint64_t)v86;
        swift_bridgeObjectRelease();
        sub_224E7920C((uint64_t)v27, (uint64_t)v24);
        if (!v40)
        {
          v41 = *(_QWORD *)&v73[*(int *)(v76 + 20)];
          swift_bridgeObjectRetain();
          sub_224EF0234((uint64_t)v24);
          if (v41)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v42 = v74;
            sub_224DDEADC((uint64_t)v27, v74, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
            v43 = v68;
            v44 = v76;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v68 + 56))(v42, 0, 1, v76);
            a3 = v72;
            v5 = v69;
            v15 = v66;
            goto LABEL_16;
          }
          goto LABEL_7;
        }
      }
      sub_224EF0234((uint64_t)v24);
LABEL_7:
      sub_224EF0234((uint64_t)v27);
      v31 += v32;
      if (!--v30)
      {
        swift_bridgeObjectRelease();
        a3 = v72;
        v5 = v69;
        v15 = v66;
        v17 = v68;
LABEL_15:
        v42 = v74;
        v44 = v76;
        v43 = v17;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v74, 1, 1, v76);
LABEL_16:
        swift_bridgeObjectRelease();
        v45 = v43;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v42, 1, v44) == 1)
        {
LABEL_17:
          sub_224E7601C(v42, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
          v17 = v45;
          v29 = v75;
          break;
        }
        v56 = v67;
        sub_224DDEADC(v42, v67, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
        v57 = v84;
        v58 = v84;
LABEL_32:
        sub_224ED825C(v58);
        result = sub_224EF0234(v56);
        if (!v5)
        {
          v62 = *((_QWORD *)v57 + 2);
          v63 = *(_OWORD *)(v57 + 24);
          v64 = *(_OWORD *)(v57 + 40);
          *(_OWORD *)a3 = *(_OWORD *)v57;
          *(_QWORD *)(a3 + 16) = v62;
          *(_OWORD *)(a3 + 24) = v63;
          *(_OWORD *)(a3 + 40) = v64;
        }
        return result;
      }
    }
  }
  if (v29)
  {
    v46 = (uint64_t)v15;
    v47 = *(_QWORD *)(v29 + 16);
    if (v47)
    {
      v72 = a3;
      v69 = v5;
      v48 = v29 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      v68 = v17;
      v49 = *(_QWORD *)(v17 + 72);
      swift_bridgeObjectRetain();
      v50 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
      v51 = (uint64_t)v71;
      v52 = (uint64_t)v79;
      while (1)
      {
        sub_224E7920C(v48, v51);
        sub_224E5AF70(v51, v52);
        v53 = sub_224F675D4();
        v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 48))(v52, 1, v53);
        sub_224E7601C(v52, (unint64_t *)&qword_2557E02A8, v50);
        if (v54 != 1)
          break;
        sub_224EF0234(v51);
        v48 += v49;
        if (!--v47)
        {
          v55 = 1;
          v5 = v69;
          v15 = (char *)v46;
          goto LABEL_28;
        }
      }
      v15 = (char *)v46;
      sub_224DDEADC(v51, v46, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
      v55 = 0;
      v5 = v69;
LABEL_28:
      v59 = v76;
      v17 = v68;
      a3 = v72;
    }
    else
    {
      swift_bridgeObjectRetain();
      v55 = 1;
      v15 = (char *)v46;
      v59 = v76;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, v55, 1, v59);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v59) != 1)
    {
      v56 = v70;
      sub_224DDEADC((uint64_t)v15, v70, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
      v57 = v85;
      v58 = v85;
      goto LABEL_32;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v76);
  }
  sub_224E7601C((uint64_t)v15, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
  sub_224E75FD8();
  swift_allocError();
  *(_QWORD *)v60 = 0xD00000000000001CLL;
  *(_QWORD *)(v60 + 8) = 0x8000000224F82E20;
  *(_QWORD *)(v60 + 16) = 0;
  *(_QWORD *)(v60 + 24) = 0;
  *(_BYTE *)(v60 + 32) = 1;
  return swift_willThrow();
}

uint64_t destroy for VerificationStatusCoding(id *a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for VerificationStatusCoding(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  v6 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v6;
  a1[6] = *(_QWORD *)(a2 + 48);
  v7 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VerificationStatusCoding(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for VerificationStatusCoding(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  v6 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  v7 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VerificationStatusCoding(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VerificationStatusCoding(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VerificationStatusCoding()
{
  return &type metadata for VerificationStatusCoding;
}

uint64_t static Base64URL.encode(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v0 = sub_224F6734C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_224F6764C();
  v18 = v4;
  sub_224F672F8();
  sub_224E51E94();
  v5 = sub_224F68024();
  v7 = v6;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  v17 = v5;
  v18 = v7;
  v15 = 43;
  v16 = 0xE100000000000000;
  v13 = 45;
  v14 = 0xE100000000000000;
  v8 = sub_224F68030();
  v10 = v9;
  swift_bridgeObjectRelease();
  v17 = v8;
  v18 = v10;
  v15 = 47;
  v16 = 0xE100000000000000;
  v13 = 95;
  v14 = 0xE100000000000000;
  v11 = sub_224F68030();
  swift_bridgeObjectRelease();
  return v11;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v0 = sub_224F6734C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = swift_bridgeObjectRetain();
  v5 = sub_224F548D4(v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  v21 = sub_224F6764C();
  v22 = v8;
  sub_224F672F8();
  sub_224E51E94();
  v9 = sub_224F68024();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  v21 = v9;
  v22 = v11;
  v19 = 43;
  v20 = 0xE100000000000000;
  v17 = 45;
  v18 = 0xE100000000000000;
  v12 = sub_224F68030();
  v14 = v13;
  swift_bridgeObjectRelease();
  v21 = v12;
  v22 = v14;
  v19 = 47;
  v20 = 0xE100000000000000;
  v17 = 95;
  v18 = 0xE100000000000000;
  v15 = sub_224F68030();
  swift_bridgeObjectRelease();
  sub_224DDE9B4(v5, v7);
  return v15;
}

uint64_t static Base64URL.decode(_:)()
{
  return sub_224F23C50();
}

uint64_t sub_224F23C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v11;

  sub_224E51E94();
  v0 = MEMORY[0x24BEE0D00];
  sub_224F68030();
  v1 = sub_224F68030();
  v3 = v2;
  swift_bridgeObjectRelease();
  v11 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_224F67C40();
  swift_bridgeObjectRelease();
  v5 = v4 & 3;
  if (v4 <= 0)
    v5 = -(-v4 & 3);
  if (v5)
  {
    if (v5 != 3 && v5 != 2)
    {
      swift_bridgeObjectRelease();
      sub_224E58788();
      swift_allocError();
      *v9 = 0;
      v9[1] = 0;
      goto LABEL_11;
    }
    sub_224F67C94();
  }
  swift_bridgeObjectRetain();
  v0 = sub_224F67604();
  v7 = v6;
  swift_bridgeObjectRelease();
  if (v7 >> 60 == 15)
  {
    sub_224E58788();
    swift_allocError();
    *v8 = v11;
    v8[1] = v3;
LABEL_11:
    swift_willThrow();
    return v0;
  }
  swift_bridgeObjectRelease();
  return v0;
}

ValueMetadata *type metadata accessor for Base64URL()
{
  return &type metadata for Base64URL;
}

uint64_t getEnumTagSinglePayload for Base64URLError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Base64URLError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

_QWORD *sub_224F23EFC(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Base64URLError()
{
  return &type metadata for Base64URLError;
}

uint64_t sub_224F23F2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OBJC_IVAR___HKFHIRAttachmentContentExtractor____lazy_storage___decoder;
  if (*(_QWORD *)(v0 + OBJC_IVAR___HKFHIRAttachmentContentExtractor____lazy_storage___decoder))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR___HKFHIRAttachmentContentExtractor____lazy_storage___decoder);
  }
  else
  {
    v3 = v0;
    sub_224F67298();
    swift_allocObject();
    v2 = sub_224F6728C();
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

id sub_224F23FA4(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  char v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t inited;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  unint64_t v33;
  void *v34;
  _BYTE *v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = type metadata accessor for ModelsR4.ResourceProxy(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F245A8();
  v6 = objc_msgSend(a1, sel_FHIRVersion);
  v7 = objc_msgSend((id)objc_opt_self(), sel_primaryR4Version);
  v8 = sub_224F67F28();

  if ((v8 & 1) == 0)
  {
    sub_224F67B80();
    sub_224EEB640();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_224F6D8B0;
    *(_QWORD *)(inited + 32) = sub_224F67B80();
    *(_QWORD *)(inited + 40) = v14;
    v45 = 0;
    v46 = 0xE000000000000000;
    sub_224F680E4();
    sub_224F67C94();
    v15 = objc_msgSend(a1, sel_FHIRVersion);
    v16 = objc_msgSend(v15, sel_FHIRRelease);

    sub_224F67B80();
    sub_224F67C94();
    swift_bridgeObjectRelease();
    v17 = v45;
    v18 = v46;
    *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 48) = v17;
    *(_QWORD *)(inited + 56) = v18;
    sub_224E51ED8(inited);
    v19 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v20 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v21 = (void *)sub_224F67AE4();
    swift_bridgeObjectRelease();
    objc_msgSend(v19, sel_initWithDomain_code_userInfo_, v20, 125, v21);

    goto LABEL_13;
  }
  sub_224F23F2C();
  v9 = objc_msgSend(a1, sel_data);
  v10 = sub_224F67658();
  v12 = v11;

  sub_224F245E4();
  sub_224F67280();
  if (!v1)
  {
    sub_224DDE9B4(v10, v12);
    swift_release();
    ModelsR4.ResourceProxy.get()();
    sub_224DDF538();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v22 = v46;
      if (v46)
      {
        v23 = v48;
        v41 = v45;
        v42 = v51;
        v43 = v50;
        v44 = v47;
        if (v49 && (v24 = sub_224F67604(), v25 >> 60 != 15))
        {
          v33 = v25;
          v40 = v24;
          if (v23)
          {
            v38 = objc_allocWithZone(MEMORY[0x24BE48A40]);
            swift_bridgeObjectRetain();
            v39 = (id)sub_224F67640();
            v34 = (void *)sub_224F67B5C();
            v37 = v34;
            swift_bridgeObjectRelease();
            v7 = objc_msgSend(v38, sel_initWithContent_contentType_, v39, v34);
            sub_224E58810(v40, v33);

            sub_224F246AC(v41, v22);
            sub_224F2462C((uint64_t)v5);
            return v7;
          }
          sub_224F24668();
          v7 = (id)swift_allocError();
          *v35 = 1;
          swift_willThrow();
          sub_224E58810(v40, v33);
        }
        else
        {
          sub_224F24668();
          v7 = (id)swift_allocError();
          *v26 = 0;
          swift_willThrow();
        }
        sub_224F246AC(v41, v22);
        sub_224F2462C((uint64_t)v5);
        goto LABEL_4;
      }
    }
    sub_224F2462C((uint64_t)v5);
    sub_224F67B80();
    sub_224EEB640();
    v27 = swift_initStackObject();
    *(_OWORD *)(v27 + 16) = xmmword_224F6D8B0;
    *(_QWORD *)(v27 + 32) = sub_224F67B80();
    *(_QWORD *)(v27 + 40) = v28;
    *(_QWORD *)(v27 + 72) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v27 + 48) = 0xD000000000000028;
    *(_QWORD *)(v27 + 56) = 0x8000000224F82E80;
    sub_224E51ED8(v27);
    v29 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v30 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v31 = (void *)sub_224F67AE4();
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_initWithDomain_code_userInfo_, v30, 125, v31);

LABEL_13:
    swift_willThrow();
    return v7;
  }
  sub_224DDE9B4(v10, v12);
  swift_release();
  v7 = v1;
LABEL_4:
  swift_getErrorValue();
  sub_224EEB434(v52);
  swift_willThrow();

  return v7;
}

unint64_t sub_224F245A8()
{
  unint64_t result;

  result = qword_2557E1BA8;
  if (!qword_2557E1BA8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E1BA8);
  }
  return result;
}

unint64_t sub_224F245E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E06F0;
  if (!qword_2557E06F0)
  {
    v1 = type metadata accessor for ModelsR4.ResourceProxy(255);
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.ResourceProxy, v1);
    atomic_store(result, (unint64_t *)&qword_2557E06F0);
  }
  return result;
}

uint64_t sub_224F2462C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ModelsR4.ResourceProxy(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_224F24668()
{
  unint64_t result;

  result = qword_2557E3B60;
  if (!qword_2557E3B60)
  {
    result = MEMORY[0x22768ED24](&unk_224F73030, &type metadata for BinaryDataError);
    atomic_store(result, (unint64_t *)&qword_2557E3B60);
  }
  return result;
}

uint64_t sub_224F246AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

id FHIRAttachmentContentExtractor.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id FHIRAttachmentContentExtractor.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR___HKFHIRAttachmentContentExtractor____lazy_storage___decoder] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FHIRAttachmentContentExtractor();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for FHIRAttachmentContentExtractor()
{
  return objc_opt_self();
}

id FHIRAttachmentContentExtractor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FHIRAttachmentContentExtractor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for FHIRAttachmentContentExtractor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FHIRAttachmentContentExtractor.extractAttachmentContent(from:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t Identifier.use.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Identifier.type.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[4];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_224DDB44C(v2, v3);
}

uint64_t Identifier.system.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Identifier();
  return sub_224DDB408(v1 + *(int *)(v3 + 24), a1, (uint64_t (*)(_QWORD))sub_224E5AE10);
}

uint64_t type metadata accessor for Identifier()
{
  uint64_t result;

  result = qword_2557E3C18;
  if (!qword_2557E3C18)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Identifier.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Identifier() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Identifier.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = sub_224F675D4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v1[1])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v10 = v1[3];
  if (v10 == 1)
  {
    sub_224F68528();
    goto LABEL_12;
  }
  v11 = v1[2];
  v12 = v1[4];
  sub_224F68528();
  if (!v10)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v12)
      goto LABEL_8;
LABEL_10:
    sub_224F68528();
    v13 = v11;
    v14 = v10;
    goto LABEL_11;
  }
  sub_224F68528();
  sub_224DDB44C(v11, v10);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_10;
LABEL_8:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C(a1, v12);
  swift_bridgeObjectRelease();
  v13 = v11;
  v14 = v10;
LABEL_11:
  sub_224DDB480(v13, v14);
LABEL_12:
  v15 = type metadata accessor for Identifier();
  sub_224DDB408((uint64_t)v1 + *(int *)(v15 + 24), (uint64_t)v9, (uint64_t (*)(_QWORD))sub_224E5AE10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_224F68528();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    sub_224F68528();
    sub_224DDACD4(&qword_2557E02F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_224F67B20();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  if (!*(_QWORD *)((char *)v1 + *(int *)(v15 + 28) + 8))
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224F24CAC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224F24CD4 + 4 * byte_224F74660[*v0]))(6648693, 0xE300000000000000);
}

uint64_t sub_224F24CD4()
{
  return 1701869940;
}

uint64_t sub_224F24CE4()
{
  return 0x6D6574737973;
}

uint64_t sub_224F24CF8()
{
  return 0x65756C6176;
}

uint64_t sub_224F24D0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224F264DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224F24D30()
{
  sub_224F258CC();
  return sub_224F685B8();
}

uint64_t sub_224F24D58()
{
  sub_224F258CC();
  return sub_224F685C4();
}

uint64_t Identifier.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE v12[16];
  __int128 v13;
  uint64_t v14;

  v3 = v1;
  sub_224F25910(0, &qword_2557E3B98, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v12[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F258CC();
  sub_224F68594();
  LOBYTE(v13) = 0;
  sub_224F68300();
  if (!v2)
  {
    v10 = *(_QWORD *)(v3 + 32);
    v13 = *(_OWORD *)(v3 + 16);
    v14 = v10;
    v12[15] = 1;
    sub_224DFAEA8();
    sub_224F68330();
    type metadata accessor for Identifier();
    LOBYTE(v13) = 2;
    sub_224F675D4();
    sub_224DDACD4(&qword_2557E1D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_224F68330();
    LOBYTE(v13) = 3;
    sub_224F68300();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Identifier.hashValue.getter()
{
  _BYTE v1[72];

  sub_224F68510();
  Identifier.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

uint64_t Identifier.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  uint64_t v29;
  char v30;

  v24 = a2;
  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v3);
  v25 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F25910(0, &qword_2557E3BA8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v26 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v24 - v7;
  v9 = type metadata accessor for Identifier();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F258CC();
  v12 = (uint64_t)v27;
  sub_224F6857C();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v27 = a1;
  v13 = v6;
  LOBYTE(v28) = 0;
  v14 = v26;
  v15 = (uint64_t)v11;
  *(_QWORD *)v11 = sub_224F68264();
  *((_QWORD *)v11 + 1) = v16;
  v30 = 1;
  sub_224DE60BC();
  sub_224F68294();
  v17 = v29;
  *((_OWORD *)v11 + 1) = v28;
  *((_QWORD *)v11 + 4) = v17;
  sub_224F675D4();
  LOBYTE(v28) = 2;
  sub_224DDACD4(&qword_2557E1D78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  v18 = (uint64_t)v25;
  sub_224F68294();
  sub_224E77848(v18, v15 + *(int *)(v9 + 24));
  LOBYTE(v28) = 3;
  v20 = sub_224F68264();
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v14);
  v23 = (uint64_t *)(v15 + *(int *)(v9 + 28));
  *v23 = v20;
  v23[1] = v22;
  sub_224DDB408(v15, v24, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return sub_224DDEAA0(v15, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
}

uint64_t sub_224F252D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Identifier.init(from:)(a1, a2);
}

uint64_t sub_224F252EC(_QWORD *a1)
{
  return Identifier.encode(to:)(a1);
}

uint64_t sub_224F25300()
{
  _BYTE v1[72];

  sub_224F68510();
  Identifier.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

uint64_t sub_224F25340()
{
  _BYTE v1[72];

  sub_224F68510();
  Identifier.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

Swift::OpaquePointer_optional __swiftcall Identifier.asTypeValuePair()()
{
  uint64_t v0;
  Swift::Bool v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v7;
  Swift::String_optional v8;
  Swift::OpaquePointer_optional result;

  v2 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Identifier() + 28));
  v3 = v2[1];
  if (v3)
  {
    v4 = *v2;
    if (*(_QWORD *)(v0 + 24) == 1)
    {
      swift_bridgeObjectRetain();
      countAndFlagsBits = 0;
      object = (void *)0xE000000000000000;
    }
    else
    {
      swift_bridgeObjectRetain();
      v8 = CodeableConcept.preferredDisplayString()();
      if (v8.value._object)
        countAndFlagsBits = v8.value._countAndFlagsBits;
      else
        countAndFlagsBits = 0;
      if (v8.value._object)
        object = v8.value._object;
      else
        object = (void *)0xE000000000000000;
    }
    sub_224EFCE64();
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_224F6DF20;
    *(_QWORD *)(v7 + 32) = countAndFlagsBits;
    *(_QWORD *)(v7 + 40) = object;
    *(_QWORD *)(v7 + 48) = v4;
    *(_QWORD *)(v7 + 56) = v3;
  }
  else
  {
    v7 = 0;
  }
  result.value._rawValue = (void *)v7;
  result.is_nil = v1;
  return result;
}

uint64_t _s23HealthRecordsExtraction10IdentifierV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD v56[3];
  _QWORD v57[3];

  v4 = sub_224F675D4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E79FE0();
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5AE10();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v48 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v48 - v19;
  v21 = a1[1];
  v22 = a2[1];
  if (!v21)
  {
    if (v22)
      return 0;
    goto LABEL_8;
  }
  if (!v22)
    return 0;
  if (*a1 == *a2 && v21 == v22 || (v23 = sub_224F683CC(), result = 0, (v23 & 1) != 0))
  {
LABEL_8:
    v54 = v20;
    v55 = v5;
    v50 = v7;
    v51 = v15;
    v52 = v11;
    v53 = v4;
    v25 = a1[2];
    v26 = a1[3];
    v27 = a1[4];
    v29 = a2[2];
    v28 = a2[3];
    v30 = a2[4];
    if (v26 == 1)
    {
      if (v28 == 1)
        goto LABEL_15;
    }
    else
    {
      v57[0] = a1[2];
      v57[1] = v26;
      v57[2] = v27;
      if (v28 != 1)
      {
        v56[0] = v29;
        v56[1] = v28;
        v56[2] = v30;
        sub_224DDB44C(v25, v26);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v31 = _s23HealthRecordsExtraction15CodeableConceptV2eeoiySbAC_ACtFZ_0(v57, v56);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_224DDB480(v25, v26);
        if ((v31 & 1) == 0)
          return 0;
LABEL_15:
        v32 = type metadata accessor for Identifier();
        v33 = (uint64_t)v54;
        sub_224DDB408((uint64_t)a1 + *(int *)(v32 + 24), (uint64_t)v54, (uint64_t (*)(_QWORD))sub_224E5AE10);
        v49 = v32;
        sub_224DDB408((uint64_t)a2 + *(int *)(v32 + 24), (uint64_t)v18, (uint64_t (*)(_QWORD))sub_224E5AE10);
        v34 = (uint64_t)v52;
        v35 = (uint64_t)&v52[*(int *)(v9 + 48)];
        sub_224DDB408(v33, (uint64_t)v52, (uint64_t (*)(_QWORD))sub_224E5AE10);
        sub_224DDB408((uint64_t)v18, v35, (uint64_t (*)(_QWORD))sub_224E5AE10);
        v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
        v37 = v53;
        if (v36(v34, 1, v53) == 1)
        {
          sub_224DDEAA0((uint64_t)v18, (uint64_t (*)(_QWORD))sub_224E5AE10);
          sub_224DDEAA0(v33, (uint64_t (*)(_QWORD))sub_224E5AE10);
          if (v36(v35, 1, v37) == 1)
          {
            sub_224DDEAA0(v34, (uint64_t (*)(_QWORD))sub_224E5AE10);
LABEL_22:
            v43 = *(int *)(v49 + 28);
            v44 = (_QWORD *)((char *)a1 + v43);
            v45 = *(_QWORD *)((char *)a1 + v43 + 8);
            v46 = (_QWORD *)((char *)a2 + v43);
            v47 = v46[1];
            if (v45)
            {
              if (v47 && (*v44 == *v46 && v45 == v47 || (sub_224F683CC() & 1) != 0))
                return 1;
            }
            else if (!v47)
            {
              return 1;
            }
            return 0;
          }
        }
        else
        {
          v38 = (uint64_t)v51;
          sub_224DDB408(v34, (uint64_t)v51, (uint64_t (*)(_QWORD))sub_224E5AE10);
          if (v36(v35, 1, v37) != 1)
          {
            v39 = v55;
            v40 = v50;
            (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v50, v35, v37);
            sub_224DDACD4((unint64_t *)&qword_2557E02B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
            v41 = sub_224F67B50();
            v42 = *(void (**)(char *, uint64_t))(v39 + 8);
            v42(v40, v37);
            sub_224DDEAA0((uint64_t)v18, (uint64_t (*)(_QWORD))sub_224E5AE10);
            sub_224DDEAA0((uint64_t)v54, (uint64_t (*)(_QWORD))sub_224E5AE10);
            v42((char *)v38, v37);
            sub_224DDEAA0(v34, (uint64_t (*)(_QWORD))sub_224E5AE10);
            if ((v41 & 1) == 0)
              return 0;
            goto LABEL_22;
          }
          sub_224DDEAA0((uint64_t)v18, (uint64_t (*)(_QWORD))sub_224E5AE10);
          sub_224DDEAA0((uint64_t)v54, (uint64_t (*)(_QWORD))sub_224E5AE10);
          (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v38, v37);
        }
        sub_224DDEAA0(v34, (uint64_t (*)(_QWORD))sub_224E79FE0);
        return 0;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_224DDB44C(v29, v28);
    sub_224DDB480(v25, v26);
    sub_224DDB480(v29, v28);
    return 0;
  }
  return result;
}

unint64_t sub_224F258CC()
{
  unint64_t result;

  result = qword_2557E3BA0;
  if (!qword_2557E3BA0)
  {
    result = MEMORY[0x22768ED24](&unk_224F7486C, &type metadata for Identifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3BA0);
  }
  return result;
}

void sub_224F25910(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224F258CC();
    v7 = a3(a1, &type metadata for Identifier.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_224F2596C(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E06A0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t)&protocol conformance descriptor for Identifier);
  a1[2] = sub_224DDACD4(&qword_2557E08F0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t)&protocol conformance descriptor for Identifier);
  result = sub_224DDACD4(&qword_2557E3BB0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t)&protocol conformance descriptor for Identifier);
  a1[3] = result;
  return result;
}

uint64_t sub_224F259E4()
{
  return sub_224DDACD4(&qword_2557E3BB8, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t)&protocol conformance descriptor for Identifier);
}

uint64_t initializeBufferWithCopyOfBuffer for Identifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    swift_bridgeObjectRetain();
    if (v8 == 1)
    {
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 32) = a2[4];
    }
    else
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v10 = *(int *)(a3 + 24);
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    v13 = sub_224F675D4();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      sub_224E5AE10();
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v16 = *(int *)(a3 + 28);
    v17 = (_QWORD *)(a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_224F675D4();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v7 == 1)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v8 = *(int *)(a3 + 24);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_224F675D4();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_224E5AE10();
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = *(int *)(a3 + 28);
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Identifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (__int128 *)(a1 + 2);
  v7 = (__int128 *)(a2 + 2);
  v8 = a2[3];
  if (a1[3] == 1)
  {
    if (v8 == 1)
    {
      v9 = *v7;
      a1[4] = a2[4];
      *v6 = v9;
    }
    else
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v8 == 1)
  {
    sub_224E2C9C0((uint64_t)(a1 + 2));
    v10 = a2[4];
    *v6 = *v7;
    a1[4] = v10;
  }
  else
  {
    a1[2] = a2[2];
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_224F675D4();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v12, v13, v14);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_13;
  }
  if (v18)
  {
LABEL_13:
    sub_224E5AE10();
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_14:
  v20 = *(int *)(a3 + 28);
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 24);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_224F675D4();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_224E5AE10();
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t assignWithTake for Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24) == 1)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 24);
  if (v7 == 1)
  {
    sub_224E2C9C0(a1 + 16);
LABEL_4:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
LABEL_6:
  v8 = *(int *)(a3 + 24);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = sub_224F675D4();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_11;
  }
  if (v15)
  {
LABEL_11:
    sub_224E5AE10();
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_12:
  v17 = *(int *)(a3 + 28);
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Identifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F261B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_224E5AE10();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for Identifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F26248(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    sub_224E5AE10();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_224F262BC()
{
  unint64_t v0;

  sub_224E5AE10();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for Identifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_224F26384 + 4 * byte_224F74669[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_224F263B8 + 4 * byte_224F74664[v4]))();
}

uint64_t sub_224F263B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F263C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224F263C8);
  return result;
}

uint64_t sub_224F263D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224F263DCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_224F263E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F263E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Identifier.CodingKeys()
{
  return &type metadata for Identifier.CodingKeys;
}

unint64_t sub_224F26408()
{
  unint64_t result;

  result = qword_2557E3C58;
  if (!qword_2557E3C58)
  {
    result = MEMORY[0x22768ED24](&unk_224F74844, &type metadata for Identifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3C58);
  }
  return result;
}

unint64_t sub_224F26450()
{
  unint64_t result;

  result = qword_2557E3C60;
  if (!qword_2557E3C60)
  {
    result = MEMORY[0x22768ED24](&unk_224F747B4, &type metadata for Identifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3C60);
  }
  return result;
}

unint64_t sub_224F26498()
{
  unint64_t result;

  result = qword_2557E3C68;
  if (!qword_2557E3C68)
  {
    result = MEMORY[0x22768ED24](&unk_224F747DC, &type metadata for Identifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3C68);
  }
  return result;
}

uint64_t sub_224F264DC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 6648693 && a2 == 0xE300000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D6574737973 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

__n128 VCJWK.init(kty:crv:alg:ext:e:n:x:y:keyOps:kid:use:)@<Q0>(_BYTE *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __n128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  __n128 result;
  char v18;

  result = a11;
  v18 = *a2;
  *(_BYTE *)a9 = *a1;
  *(_BYTE *)(a9 + 1) = v18;
  *(_QWORD *)(a9 + 8) = a3;
  *(_QWORD *)(a9 + 16) = a4;
  *(_BYTE *)(a9 + 24) = a5;
  *(_QWORD *)(a9 + 32) = a6;
  *(_QWORD *)(a9 + 40) = a7;
  *(_QWORD *)(a9 + 48) = a8;
  *(_OWORD *)(a9 + 56) = a10;
  *(__n128 *)(a9 + 72) = a11;
  *(_QWORD *)(a9 + 88) = a12;
  *(_QWORD *)(a9 + 96) = a14;
  *(_QWORD *)(a9 + 104) = a15;
  *(_QWORD *)(a9 + 112) = a13;
  *(_QWORD *)(a9 + 120) = a16;
  *(_QWORD *)(a9 + 128) = a17;
  return result;
}

HealthRecordsExtraction::VCJWK::KeyType_optional __swiftcall VCJWK.KeyType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (HealthRecordsExtraction::VCJWK::KeyType_optional)sub_224F2696C(v1);
}

uint64_t VCJWK.KeyType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 17221;
  if (*v0 != 1)
    v1 = 5262159;
  if (*v0)
    return v1;
  else
    return 4281170;
}

uint64_t sub_224F266F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_224F166E0(*a1, *a2);
}

uint64_t sub_224F26704()
{
  sub_224F68510();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224F26788()
{
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224F267E8()
{
  sub_224F68510();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

HealthRecordsExtraction::VCJWK::KeyType_optional sub_224F26868(Swift::String *a1)
{
  return VCJWK.KeyType.init(rawValue:)(*a1);
}

void sub_224F26874(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE300000000000000;
  v4 = 0xE200000000000000;
  v5 = 17221;
  if (v2 != 1)
  {
    v5 = 5262159;
    v4 = 0xE300000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 4281170;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_224F268B8()
{
  sub_224F2919C();
  return sub_224F67D48();
}

uint64_t sub_224F26914()
{
  sub_224F2919C();
  return sub_224F67D3C();
}

HealthRecordsExtraction::VCJWK::Curve_optional __swiftcall VCJWK.Curve.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (HealthRecordsExtraction::VCJWK::Curve_optional)sub_224F2696C(v1);
}

uint64_t sub_224F2696C@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_224F68240();
  result = swift_bridgeObjectRelease();
  v4 = 3;
  if (v2 < 3)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t VCJWK.Curve.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x3635322D50;
  if (*v0 != 1)
    v1 = 0x39313535326445;
  if (*v0)
    return v1;
  else
    return 0x6B36353270636573;
}

uint64_t sub_224F26A1C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_224F167C0(*a1, *a2);
}

uint64_t sub_224F26A28()
{
  sub_224F68510();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224F26AC8()
{
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224F26B44()
{
  sub_224F68510();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

HealthRecordsExtraction::VCJWK::Curve_optional sub_224F26BE0(Swift::String *a1)
{
  return VCJWK.Curve.init(rawValue:)(*a1);
}

void sub_224F26BEC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE900000000000031;
  v4 = 0xE500000000000000;
  v5 = 0x3635322D50;
  if (v2 != 1)
  {
    v5 = 0x39313535326445;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6B36353270636573;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_224F26C4C()
{
  sub_224F29158();
  return sub_224F67D48();
}

uint64_t sub_224F26CA8()
{
  sub_224F29158();
  return sub_224F67D3C();
}

void VCJWK.kty.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void VCJWK.crv.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

uint64_t VCJWK.alg.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCJWK.ext.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t VCJWK.e.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCJWK.n.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCJWK.x.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCJWK.y.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCJWK.kid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCJWK.keyOps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VCJWK.use.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 VCJWK.init(data:)@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v8;
  __n128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  sub_224F67298();
  swift_allocObject();
  sub_224F6728C();
  sub_224F1EC14();
  sub_224F67280();
  sub_224DDE9B4(a1, a2);
  swift_release();
  if (!v3)
  {
    *(_OWORD *)(a3 + 96) = v14;
    *(_OWORD *)(a3 + 112) = v15;
    *(_QWORD *)(a3 + 128) = v16;
    *(_OWORD *)(a3 + 32) = v10;
    *(_OWORD *)(a3 + 48) = v11;
    *(_OWORD *)(a3 + 64) = v12;
    *(_OWORD *)(a3 + 80) = v13;
    result = v9;
    *(_OWORD *)a3 = v8;
    *(__n128 *)(a3 + 16) = v9;
  }
  return result;
}

uint64_t sub_224F26F34(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224F26F60 + 4 * byte_224F748C0[a1]))(7959659, 0xE300000000000000);
}

uint64_t sub_224F26F60()
{
  return 7762531;
}

uint64_t sub_224F26F6C()
{
  return 6777953;
}

uint64_t sub_224F26F78()
{
  return 7632997;
}

uint64_t sub_224F26F84()
{
  return 101;
}

uint64_t sub_224F26F90()
{
  return 110;
}

uint64_t sub_224F26F9C()
{
  return 120;
}

uint64_t sub_224F26FA8()
{
  return 121;
}

uint64_t sub_224F26FB4()
{
  return 0x73706F5F79656BLL;
}

uint64_t sub_224F26FCC()
{
  return 6648693;
}

uint64_t sub_224F26FD8()
{
  return 6580587;
}

uint64_t sub_224F26FE4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224F27010 + 4 * byte_224F748CB[a1]))(7959659, 0xE300000000000000);
}

uint64_t sub_224F27010()
{
  return 7762531;
}

uint64_t sub_224F2701C()
{
  return 6777953;
}

uint64_t sub_224F27028()
{
  return 7632997;
}

uint64_t sub_224F27034()
{
  return 101;
}

uint64_t sub_224F27040()
{
  return 110;
}

uint64_t sub_224F2704C()
{
  return 120;
}

uint64_t sub_224F27058()
{
  return 121;
}

uint64_t sub_224F27064()
{
  return 0x73706F5F79656BLL;
}

uint64_t sub_224F2707C()
{
  return 6648693;
}

uint64_t sub_224F27088()
{
  return 6580587;
}

uint64_t sub_224F27094(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_224F26F34(*a1);
  v5 = v4;
  if (v3 == sub_224F26F34(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_224F683CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_224F2711C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_224F68510();
  sub_224F26F34(v1);
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224F2717C()
{
  unsigned __int8 *v0;

  sub_224F26F34(*v0);
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224F271BC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_224F68510();
  sub_224F26F34(v1);
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224F27218@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_224F29110();
  *a1 = result;
  return result;
}

uint64_t sub_224F27244@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_224F26F34(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_224F2726C()
{
  unsigned __int8 *v0;

  return sub_224F26FE4(*v0);
}

uint64_t sub_224F27274@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_224F29110();
  *a1 = result;
  return result;
}

uint64_t sub_224F27298()
{
  sub_224F28814();
  return sub_224F685B8();
}

uint64_t sub_224F272C0()
{
  sub_224F28814();
  return sub_224F685C4();
}

uint64_t VCJWK.hash(into:)()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v1 = *(unsigned __int8 *)(v0 + 1);
  v2 = *(_QWORD *)(v0 + 16);
  v13 = *(unsigned __int8 *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 40);
  v11 = *(_QWORD *)(v0 + 56);
  v12 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 128);
  sub_224F67C34();
  swift_bridgeObjectRelease();
  sub_224F68528();
  if (v1 != 3)
  {
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  sub_224F68528();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  if (v13 != 2)
    sub_224F68528();
  sub_224F68528();
  if (v3)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_9;
  }
  else
  {
    sub_224F68528();
    if (v11)
    {
LABEL_9:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      if (v12)
        goto LABEL_10;
      goto LABEL_21;
    }
  }
  sub_224F68528();
  if (v12)
  {
LABEL_10:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v4)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  sub_224F68528();
  if (v4)
  {
LABEL_11:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  sub_224F68528();
  if (v5)
  {
LABEL_12:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  sub_224F68528();
  if (v6)
  {
LABEL_13:
    sub_224F68528();
    sub_224F6851C();
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
    {
      swift_bridgeObjectRetain();
      v9 = v6 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
        v9 += 16;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
    }
    if (v7)
      goto LABEL_18;
    return sub_224F68528();
  }
LABEL_24:
  sub_224F68528();
  if (v7)
  {
LABEL_18:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    return swift_bridgeObjectRelease();
  }
  return sub_224F68528();
}

uint64_t VCJWK.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;

  sub_224F288E0(0, &qword_2557E3C70, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v18 - v6;
  v8 = *v1;
  LODWORD(v33) = v1[1];
  v9 = *((_QWORD *)v1 + 1);
  v31 = *((_QWORD *)v1 + 2);
  v32 = v9;
  v36 = v1[24];
  v30 = *((_QWORD *)v1 + 4);
  v10 = *((_QWORD *)v1 + 5);
  v11 = *((_QWORD *)v1 + 6);
  v27 = *((_QWORD *)v1 + 7);
  v28 = v10;
  v12 = *((_QWORD *)v1 + 8);
  v25 = *((_QWORD *)v1 + 9);
  v26 = v11;
  v13 = *((_QWORD *)v1 + 10);
  v23 = *((_QWORD *)v1 + 11);
  v24 = v12;
  v14 = *((_QWORD *)v1 + 12);
  v21 = *((_QWORD *)v1 + 13);
  v22 = v13;
  v19 = *((_QWORD *)v1 + 14);
  v20 = v14;
  v15 = *((_QWORD *)v1 + 16);
  v29 = *((_QWORD *)v1 + 15);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F28814();
  sub_224F68594();
  LOBYTE(v35) = v8;
  v37 = 0;
  sub_224F28858();
  v16 = v34;
  sub_224F68378();
  if (!v16)
  {
    v34 = v15;
    LOBYTE(v35) = v33;
    v37 = 1;
    sub_224F2889C();
    sub_224F68330();
    LOBYTE(v35) = 2;
    sub_224F68300();
    v33 = v5;
    LOBYTE(v35) = 3;
    sub_224F6830C();
    LOBYTE(v35) = 4;
    sub_224F68300();
    LOBYTE(v35) = 5;
    sub_224F68300();
    LOBYTE(v35) = 6;
    sub_224F68300();
    LOBYTE(v35) = 7;
    sub_224F68300();
    LOBYTE(v35) = 8;
    sub_224F68300();
    v35 = v19;
    v37 = 9;
    sub_224E68104();
    sub_224E681B4(&qword_2557E0890, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    sub_224F68330();
    LOBYTE(v35) = 10;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t VCJWK.hashValue.getter()
{
  sub_224F68510();
  VCJWK.hash(into:)();
  return sub_224F6854C();
}

uint64_t VCJWK.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[3];
  char v68;
  _BYTE v69[7];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  _BYTE v84[11];
  __int16 v85;
  _QWORD *v86;

  sub_224F288E0(0, &qword_2557E3C90, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v41 - v8;
  v10 = a1[3];
  v86 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_224F28814();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
  LOBYTE(v58) = 0;
  sub_224F2893C();
  sub_224F682DC();
  v11 = LOBYTE(v67[0]);
  LOBYTE(v58) = 1;
  sub_224F28980();
  sub_224F68294();
  v12 = LOBYTE(v67[0]);
  LOBYTE(v67[0]) = 2;
  v53 = sub_224F68264();
  v54 = v12;
  LOBYTE(v67[0]) = 3;
  v14 = v13;
  swift_bridgeObjectRetain();
  v15 = sub_224F68270();
  v57 = v14;
  v52 = v15;
  LOBYTE(v67[0]) = 4;
  v51 = sub_224F68264();
  LOBYTE(v67[0]) = 5;
  v17 = v16;
  swift_bridgeObjectRetain();
  v18 = sub_224F68264();
  v56 = v17;
  v50 = v18;
  LOBYTE(v67[0]) = 6;
  v20 = v19;
  swift_bridgeObjectRetain();
  v21 = sub_224F68264();
  v55 = v20;
  v49 = v21;
  LOBYTE(v67[0]) = 7;
  v23 = v22;
  swift_bridgeObjectRetain();
  v47 = sub_224F68264();
  v48 = v11;
  LOBYTE(v67[0]) = 8;
  v25 = v24;
  swift_bridgeObjectRetain();
  v46 = sub_224F68264();
  v27 = v26;
  sub_224E68104();
  v45 = v28;
  LOBYTE(v58) = 9;
  sub_224E681B4(&qword_2557E08A0, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
  v44 = v27;
  swift_bridgeObjectRetain();
  sub_224F68294();
  v83 = 10;
  v45 = v67[0];
  swift_bridgeObjectRetain();
  v29 = sub_224F68264();
  v43 = v30;
  v31 = v29;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  LOBYTE(v58) = v48;
  BYTE1(v58) = v54;
  *((_QWORD *)&v58 + 1) = v53;
  *(_QWORD *)&v59 = v57;
  BYTE8(v59) = v52;
  *(_QWORD *)&v60 = v51;
  *((_QWORD *)&v60 + 1) = v56;
  *(_QWORD *)&v61 = v50;
  *((_QWORD *)&v61 + 1) = v55;
  *(_QWORD *)&v62 = v49;
  *((_QWORD *)&v62 + 1) = v23;
  v41 = v23;
  v42 = v31;
  *(_QWORD *)&v63 = v47;
  *((_QWORD *)&v63 + 1) = v25;
  v32 = v45;
  v33 = v44;
  *(_QWORD *)&v64 = v46;
  *((_QWORD *)&v64 + 1) = v44;
  *(_QWORD *)&v65 = v45;
  *((_QWORD *)&v65 + 1) = v31;
  v66 = v43;
  sub_224E76F20((uint64_t)&v58);
  v34 = v57;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v35 = v55;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36 = v65;
  *(_OWORD *)(a2 + 96) = v64;
  *(_OWORD *)(a2 + 112) = v36;
  *(_QWORD *)(a2 + 128) = v66;
  v37 = v61;
  *(_OWORD *)(a2 + 32) = v60;
  *(_OWORD *)(a2 + 48) = v37;
  v38 = v63;
  *(_OWORD *)(a2 + 64) = v62;
  *(_OWORD *)(a2 + 80) = v38;
  v39 = v59;
  *(_OWORD *)a2 = v58;
  *(_OWORD *)(a2 + 16) = v39;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
  LOBYTE(v67[0]) = v48;
  BYTE1(v67[0]) = v54;
  *(_DWORD *)((char *)v67 + 2) = *(_DWORD *)&v84[7];
  HIWORD(v67[0]) = v85;
  v67[1] = v53;
  v67[2] = v34;
  v68 = v52;
  *(_DWORD *)v69 = *(_DWORD *)v84;
  *(_DWORD *)&v69[3] = *(_DWORD *)&v84[3];
  v70 = v51;
  v71 = v56;
  v72 = v50;
  v73 = v35;
  v74 = v49;
  v75 = v41;
  v76 = v47;
  v77 = v25;
  v78 = v46;
  v79 = v33;
  v80 = v32;
  v81 = v42;
  v82 = v43;
  return sub_224E76FB0((uint64_t)v67);
}

uint64_t sub_224F28208@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return VCJWK.init(from:)(a1, a2);
}

uint64_t sub_224F2821C(_QWORD *a1)
{
  return VCJWK.encode(to:)(a1);
}

uint64_t sub_224F28234()
{
  sub_224F68510();
  VCJWK.hash(into:)();
  return sub_224F6854C();
}

uint64_t sub_224F28274()
{
  sub_224F68510();
  VCJWK.hash(into:)();
  return sub_224F6854C();
}

BOOL _s23HealthRecordsExtraction5VCJWKV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  _BOOL8 result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = 4281170;
  if (!*(_BYTE *)a1)
  {
    v3 = 0xE300000000000000;
    v4 = 4281170;
    if (*(_BYTE *)a2)
      goto LABEL_6;
    goto LABEL_9;
  }
  if (*(_BYTE *)a1 != 1)
  {
    v3 = 0xE300000000000000;
    v4 = 5262159;
    if (*(_BYTE *)a2)
      goto LABEL_6;
LABEL_9:
    v5 = 0xE300000000000000;
    goto LABEL_11;
  }
  v3 = 0xE200000000000000;
  v4 = 17221;
  if (!*(_BYTE *)a2)
    goto LABEL_9;
LABEL_6:
  if (*(_BYTE *)a2 == 1)
  {
    v5 = 0xE200000000000000;
    v2 = 17221;
  }
  else
  {
    v5 = 0xE300000000000000;
    v2 = 5262159;
  }
LABEL_11:
  v6 = *(unsigned __int8 *)(a1 + 1);
  v7 = *(_QWORD *)(a1 + 16);
  v47 = *(_QWORD *)(a1 + 32);
  v51 = *(_QWORD *)(a1 + 40);
  v52 = *(_QWORD *)(a1 + 8);
  v43 = *(_QWORD *)(a1 + 48);
  v49 = *(_QWORD *)(a1 + 56);
  v39 = *(_QWORD *)(a1 + 64);
  v45 = *(_QWORD *)(a1 + 72);
  v35 = *(_QWORD *)(a1 + 80);
  v41 = *(_QWORD *)(a1 + 88);
  v33 = *(_QWORD *)(a1 + 96);
  v37 = *(_QWORD *)(a1 + 104);
  v29 = *(_QWORD *)(a1 + 128);
  v8 = *(unsigned __int8 *)(a2 + 1);
  v10 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v46 = *(_QWORD *)(a2 + 32);
  v50 = *(_QWORD *)(a2 + 40);
  v42 = *(_QWORD *)(a2 + 48);
  v48 = *(_QWORD *)(a2 + 56);
  v38 = *(_QWORD *)(a2 + 64);
  v44 = *(_QWORD *)(a2 + 72);
  v34 = *(_QWORD *)(a2 + 80);
  v40 = *(_QWORD *)(a2 + 88);
  v36 = *(_QWORD *)(a2 + 104);
  v11 = *(unsigned __int8 *)(a1 + 24);
  v30 = *(_QWORD **)(a1 + 112);
  v27 = *(_QWORD *)(a1 + 120);
  v28 = *(_QWORD *)(a2 + 128);
  v12 = *(unsigned __int8 *)(a2 + 24);
  v26 = *(_QWORD *)(a2 + 120);
  v31 = *(_QWORD **)(a2 + 112);
  v32 = *(_QWORD *)(a2 + 96);
  if (v4 == v2 && v3 == v5)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v13 = sub_224F683CC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v13 & 1) == 0)
      return result;
  }
  if (v6 != 3)
  {
    if (v8 == 3)
      return 0;
    v15 = 0xE900000000000031;
    v16 = 0x6B36353270636573;
    if (v6)
    {
      if (v6 == 1)
      {
        v17 = 0xE500000000000000;
        v18 = 0x3635322D50;
        if (!v8)
          goto LABEL_28;
      }
      else
      {
        v17 = 0xE700000000000000;
        v18 = 0x39313535326445;
        if (!v8)
          goto LABEL_28;
      }
    }
    else
    {
      v18 = 0x6B36353270636573;
      v17 = 0xE900000000000031;
      if (!v8)
        goto LABEL_28;
    }
    if (v8 != 1)
    {
      v15 = 0xE700000000000000;
      if (v18 != 0x39313535326445)
        goto LABEL_33;
      goto LABEL_31;
    }
    v15 = 0xE500000000000000;
    v16 = 0x3635322D50;
LABEL_28:
    if (v18 != v16)
    {
LABEL_33:
      v19 = sub_224F683CC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v19 & 1) == 0)
        return result;
      goto LABEL_34;
    }
LABEL_31:
    if (v17 == v15)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v8 != 3)
    return 0;
LABEL_34:
  if (!v7)
  {
    if (v9)
      return 0;
LABEL_41:
    if (v11 == 2)
    {
      if (v12 != 2)
        return 0;
    }
    else
    {
      result = 0;
      if (v12 == 2 || ((((v11 & 1) == 0) ^ v12) & 1) == 0)
        return result;
    }
    if (v51)
    {
      if (!v50)
        return 0;
      if (v47 != v46 || v51 != v50)
      {
        v21 = sub_224F683CC();
        result = 0;
        if ((v21 & 1) == 0)
          return result;
      }
    }
    else if (v50)
    {
      return 0;
    }
    if (v49)
    {
      if (!v48)
        return 0;
      if (v43 != v42 || v49 != v48)
      {
        v22 = sub_224F683CC();
        result = 0;
        if ((v22 & 1) == 0)
          return result;
      }
    }
    else if (v48)
    {
      return 0;
    }
    if (v45)
    {
      if (!v44)
        return 0;
      if (v39 != v38 || v45 != v44)
      {
        v23 = sub_224F683CC();
        result = 0;
        if ((v23 & 1) == 0)
          return result;
      }
    }
    else if (v44)
    {
      return 0;
    }
    if (v41)
    {
      if (!v40)
        return 0;
      if (v35 != v34 || v41 != v40)
      {
        v24 = sub_224F683CC();
        result = 0;
        if ((v24 & 1) == 0)
          return result;
      }
    }
    else if (v40)
    {
      return 0;
    }
    if (v37)
    {
      if (!v36)
        return 0;
      if (v33 != v32 || v37 != v36)
      {
        v25 = sub_224F683CC();
        result = 0;
        if ((v25 & 1) == 0)
          return result;
      }
    }
    else if (v36)
    {
      return 0;
    }
    if (v30)
    {
      if (!v31 || (sub_224DD698C(v30, v31) & 1) == 0)
        return 0;
    }
    else if (v31)
    {
      return 0;
    }
    if (v29)
      return v28 && (v27 == v26 && v29 == v28 || (sub_224F683CC() & 1) != 0);
    return !v28;
  }
  if (!v9)
    return 0;
  if (v52 == v10 && v7 == v9)
    goto LABEL_41;
  v20 = sub_224F683CC();
  result = 0;
  if ((v20 & 1) != 0)
    goto LABEL_41;
  return result;
}

unint64_t sub_224F28814()
{
  unint64_t result;

  result = qword_2557E3C78;
  if (!qword_2557E3C78)
  {
    result = MEMORY[0x22768ED24](&unk_224F74CF4, &type metadata for VCJWK.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3C78);
  }
  return result;
}

unint64_t sub_224F28858()
{
  unint64_t result;

  result = qword_2557E3C80;
  if (!qword_2557E3C80)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for VCJWK.KeyType, &type metadata for VCJWK.KeyType);
    atomic_store(result, (unint64_t *)&qword_2557E3C80);
  }
  return result;
}

unint64_t sub_224F2889C()
{
  unint64_t result;

  result = qword_2557E3C88;
  if (!qword_2557E3C88)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for VCJWK.Curve, &type metadata for VCJWK.Curve);
    atomic_store(result, (unint64_t *)&qword_2557E3C88);
  }
  return result;
}

void sub_224F288E0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224F28814();
    v7 = a3(a1, &type metadata for VCJWK.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_224F2893C()
{
  unint64_t result;

  result = qword_2557E3C98;
  if (!qword_2557E3C98)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for VCJWK.KeyType, &type metadata for VCJWK.KeyType);
    atomic_store(result, (unint64_t *)&qword_2557E3C98);
  }
  return result;
}

unint64_t sub_224F28980()
{
  unint64_t result;

  result = qword_2557E3CA0;
  if (!qword_2557E3CA0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for VCJWK.Curve, &type metadata for VCJWK.Curve);
    atomic_store(result, (unint64_t *)&qword_2557E3CA0);
  }
  return result;
}

unint64_t sub_224F289C8()
{
  unint64_t result;

  result = qword_2557E3CA8;
  if (!qword_2557E3CA8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for VCJWK.KeyType, &type metadata for VCJWK.KeyType);
    atomic_store(result, (unint64_t *)&qword_2557E3CA8);
  }
  return result;
}

unint64_t sub_224F28A10()
{
  unint64_t result;

  result = qword_2557E3CB0;
  if (!qword_2557E3CB0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for VCJWK.Curve, &type metadata for VCJWK.Curve);
    atomic_store(result, (unint64_t *)&qword_2557E3CB0);
  }
  return result;
}

unint64_t sub_224F28A58()
{
  unint64_t result;

  result = qword_2557E3CB8;
  if (!qword_2557E3CB8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for VCJWK, &type metadata for VCJWK);
    atomic_store(result, (unint64_t *)&qword_2557E3CB8);
  }
  return result;
}

uint64_t destroy for VCJWK()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VCJWK(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  v9 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v9;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VCJWK(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VCJWK(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VCJWK(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 136))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VCJWK(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 136) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for VCJWK()
{
  return &type metadata for VCJWK;
}

ValueMetadata *type metadata accessor for VCJWK.KeyType()
{
  return &type metadata for VCJWK.KeyType;
}

uint64_t _s23HealthRecordsExtraction5VCJWKV5CurveOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_224F28EEC + 4 * byte_224F748DB[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_224F28F20 + 4 * byte_224F748D6[v4]))();
}

uint64_t sub_224F28F20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F28F28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224F28F30);
  return result;
}

uint64_t sub_224F28F3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224F28F44);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_224F28F48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F28F50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VCJWK.Curve()
{
  return &type metadata for VCJWK.Curve;
}

uint64_t storeEnumTagSinglePayload for VCJWK.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_224F28FB8 + 4 * byte_224F748E5[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_224F28FEC + 4 * byte_224F748E0[v4]))();
}

uint64_t sub_224F28FEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F28FF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224F28FFCLL);
  return result;
}

uint64_t sub_224F29008(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224F29010);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_224F29014(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F2901C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VCJWK.CodingKeys()
{
  return &type metadata for VCJWK.CodingKeys;
}

unint64_t sub_224F2903C()
{
  unint64_t result;

  result = qword_2557E3CC0;
  if (!qword_2557E3CC0)
  {
    result = MEMORY[0x22768ED24](&unk_224F74CCC, &type metadata for VCJWK.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3CC0);
  }
  return result;
}

unint64_t sub_224F29084()
{
  unint64_t result;

  result = qword_2557E3CC8;
  if (!qword_2557E3CC8)
  {
    result = MEMORY[0x22768ED24](&unk_224F74C04, &type metadata for VCJWK.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3CC8);
  }
  return result;
}

unint64_t sub_224F290CC()
{
  unint64_t result;

  result = qword_2557E3CD0;
  if (!qword_2557E3CD0)
  {
    result = MEMORY[0x22768ED24](&unk_224F74C2C, &type metadata for VCJWK.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3CD0);
  }
  return result;
}

uint64_t sub_224F29110()
{
  unint64_t v0;

  v0 = sub_224F68240();
  swift_bridgeObjectRelease();
  if (v0 >= 0xB)
    return 11;
  else
    return v0;
}

unint64_t sub_224F29158()
{
  unint64_t result;

  result = qword_2557E3CD8;
  if (!qword_2557E3CD8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for VCJWK.Curve, &type metadata for VCJWK.Curve);
    atomic_store(result, (unint64_t *)&qword_2557E3CD8);
  }
  return result;
}

unint64_t sub_224F2919C()
{
  unint64_t result;

  result = qword_2557E3CE0;
  if (!qword_2557E3CE0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for VCJWK.KeyType, &type metadata for VCJWK.KeyType);
    atomic_store(result, (unint64_t *)&qword_2557E3CE0);
  }
  return result;
}

id sub_224F291E0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  int *v37;
  id v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void *v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void (*v72)(uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void *v78;
  void *v79;
  id v80;
  char *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v92 = a7;
  v82 = a8;
  v97 = a6;
  v94 = a2;
  v95 = a5;
  v88 = a4;
  v93 = a3;
  sub_224E63218(0, &qword_2557E27F0, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v20);
  v84 = (uint64_t)&v80 - v21;
  sub_224E63218(0, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  MEMORY[0x24BDAC7A8](v22);
  v96 = (uint64_t)&v80 - v23;
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v81 = (char *)&v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v80 - v27;
  sub_224E63218(0, &qword_2557E2A08, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v80 - v30;
  v32 = sub_224F677A8();
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)&v80 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F6779C();
  v90 = sub_224F67784();
  v36 = *(void (**)(char *, uint64_t))(v33 + 8);
  v36(v35, v32);
  v37 = (int *)type metadata accessor for PostExtractionContext();
  v38 = objc_msgSend(*(id *)(a1 + v37[5]), sel_UUID);
  sub_224F67790();

  v89 = sub_224F67784();
  v36(v35, v32);
  v39 = v37[6];
  v98 = a1;
  v40 = *(void **)(a1 + v39);
  if (v40)
  {
    v41 = objc_msgSend(v40, sel_UUID);
    sub_224F67790();

    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v31, v35, v32);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v31, 0, 1, v32);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
    {
      v87 = 0;
    }
    else
    {
      v87 = sub_224F67784();
      v36(v31, v32);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v31, 1, 1, v32);
    v87 = 0;
  }
  v42 = v97;
  v85 = *(_QWORD *)(v98 + v37[7]);
  if (v95)
  {
    v86 = sub_224F67B5C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v86 = 0;
  }
  sub_224E75F34(v42, (uint64_t)v28, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v43 = sub_224F675D4();
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
  v46 = 0;
  if (v45(v28, 1, v43) != 1)
  {
    v46 = sub_224F67580();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v43);
  }
  v83 = (void *)v46;
  if (a9)
  {
    v82 = sub_224F67B5C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v82 = 0;
  }
  v47 = v96;
  sub_224E75F34(a10, v96, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  v48 = sub_224F677D8();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48);
  v95 = 0;
  if (v50 != 1)
  {
    v95 = sub_224F677C0();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
  }
  v96 = a14;
  v88 = a10;
  if (a12 >> 60 == 15)
  {
    v51 = 0;
  }
  else
  {
    sub_224DDE970(a11, a12);
    v51 = sub_224F67640();
    sub_224E58810(a11, a12);
  }
  v52 = v84;
  v53 = v81;
  v84 = a13;
  sub_224E75F34(a13, v52, &qword_2557E27F0, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v54 = sub_224F67760();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v52, 1, v54) != 1)
  {
    v56 = sub_224F67718();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v52, v54);
  }
  sub_224E75F34(v96, (uint64_t)v53, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v45(v53, 1, v43) == 1)
  {
    v57 = 0;
  }
  else
  {
    v57 = sub_224F67580();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v53, v43);
  }
  if (a16 >> 60 == 15)
  {
    v58 = 0;
  }
  else
  {
    sub_224DDE970(a15, a16);
    v58 = (char *)sub_224F67640();
    sub_224E58810(a15, a16);
  }
  if (a18 >> 60 != 15)
  {
    sub_224DDE970(a17, a18);
    v59 = (void *)sub_224F67640();
    sub_224E58810(a17, a18);
    if (a19)
      goto LABEL_29;
LABEL_31:
    v60 = 0;
    goto LABEL_32;
  }
  v59 = 0;
  if (!a19)
    goto LABEL_31;
LABEL_29:
  v60 = (void *)sub_224F67AE4();
  swift_bridgeObjectRelease();
LABEL_32:
  v80 = v60;
  v61 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v79 = v60;
  v77 = v58;
  v78 = v59;
  v76 = v57;
  v91 = v59;
  v62 = (void *)v56;
  v74 = v51;
  v75 = v56;
  v81 = v58;
  v63 = (void *)v95;
  v64 = (void *)v57;
  v65 = (void *)v82;
  v66 = (void *)v51;
  v67 = v83;
  v68 = (void *)v86;
  v69 = (void *)v89;
  v70 = (void *)v90;
  v71 = (void *)v87;
  v94 = objc_msgSend(v61, sel_initWithIdentifier_medicalRecordIdentifier_clinicalRecordIdentifier_accountIdentifier_FHIRVersion_type_status_errorStatus_title_webURL_sizeInBytes_contentType_locale_expectedHash_creationDate_retryCount_nextRetryDate_lastUpdatedDate_lastError_fileURL_inlineData_inlineDataChecksum_attachmentIdentifier_metadata_, v90, v89, v87, 0, v85, v94, v93, 0, v86, v83, v92, v82, v95, v74, v75, 0, 0,
          0,
          0,
          v76,
          v77,
          v78,
          0,
          v79);

  v72 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  sub_224E7601C(v96, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  sub_224E7601C(v84, &qword_2557E27F0, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  sub_224E7601C(v88, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  sub_224E7601C(v97, (unint64_t *)&qword_2557E02A8, v72);
  sub_224F2992C(v98);
  return v94;
}

uint64_t sub_224F2992C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PostExtractionContext();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void ExtractionError.errorDescription.getter()
{
  uint64_t v1;

  v1 = sub_224F677A8();
  MEMORY[0x24BDAC7A8](v1);
  __asm { BR              X10 }
}

uint64_t sub_224F299E4()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 96) = 0;
  *(_QWORD *)(v0 - 88) = 0xE000000000000000;
  sub_224F680E4();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 - 96) = 0xD000000000000013;
  *(_QWORD *)(v0 - 88) = 0x8000000224F83030;
  sub_224F67C94();
  sub_224F67C94();
  return *(_QWORD *)(v0 - 96);
}

void sub_224F29DB0()
{
  JUMPOUT(0x224F29D90);
}

void sub_224F29E50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
    case 1:
      goto LABEL_4;
    case 2:
    case 3:
    case 4:
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
      break;
    case 5:
    case 6:

      break;
    default:
      return;
  }
}

unint64_t sub_224F29EC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E3CE8;
  if (!qword_2557E3CE8)
  {
    v1 = sub_224F677A8();
    result = MEMORY[0x22768ED24](MEMORY[0x24BDCEAB8], v1);
    atomic_store(result, (unint64_t *)&qword_2557E3CE8);
  }
  return result;
}

id sub_224F29F10(id result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
    case 1:
      goto LABEL_4;
    case 2:
    case 3:
    case 4:
      swift_bridgeObjectRetain();
LABEL_4:
      result = (id)swift_bridgeObjectRetain();
      break;
    case 5:
    case 6:
      result = result;
      break;
    default:
      return result;
  }
  return result;
}

void destroy for ExtractionError(uint64_t a1)
{
  sub_224F29E50(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for ExtractionError(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_224F29F10(*(id *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for ExtractionError(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_224F29F10(*(id *)a2, v4, v5, v6, v7);
  v8 = *(void **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_224F29E50(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ExtractionError(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_224F29E50(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtractionError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 7)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtractionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 249;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_224F2A150(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 6u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 7);
}

uint64_t sub_224F2A168(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(_QWORD *)result = a2 - 7;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 7;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ExtractionError()
{
  return &type metadata for ExtractionError;
}

__n128 Location.init(identifier:physicalType:alias:name:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6;
  __n128 result;

  v6 = a2[1].n128_u64[0];
  *(_QWORD *)a6 = a1;
  result = *a2;
  *(__n128 *)(a6 + 8) = *a2;
  *(_QWORD *)(a6 + 24) = v6;
  *(_QWORD *)(a6 + 32) = a3;
  *(_QWORD *)(a6 + 40) = a4;
  *(_QWORD *)(a6 + 48) = a5;
  return result;
}

uint64_t Location.identifier.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Location.physicalType.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_224DDB44C(v2, v3);
}

uint64_t Location.alias.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Location.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_224F2A200(char *a1)
{
  sub_224F16584(*a1);
}

void sub_224F2A20C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_224F68510();
  __asm { BR              X9 }
}

uint64_t sub_224F2A25C()
{
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

void sub_224F2A2C8()
{
  __asm { BR              X10 }
}

uint64_t sub_224F2A308()
{
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

void sub_224F2A360()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_224F68510();
  __asm { BR              X9 }
}

uint64_t sub_224F2A3AC()
{
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224F2A418@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_224F2B8D0();
  *a1 = result;
  return result;
}

uint64_t sub_224F2A444()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_224F2A478 + 4 * byte_224F74E3C[*v0]))();
}

void sub_224F2A478(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "physicalType");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_224F2A49C(_QWORD *a1@<X8>)
{
  *a1 = 0x7361696C61;
  a1[1] = 0xE500000000000000;
}

void sub_224F2A4B4(_QWORD *a1@<X8>)
{
  *a1 = 1701667182;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_224F2A4C8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224F2A4FC + 4 * byte_224F74E40[*v0]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_224F2A4FC()
{
  return 0x6C61636973796870;
}

uint64_t sub_224F2A51C()
{
  return 0x7361696C61;
}

uint64_t sub_224F2A530()
{
  return 1701667182;
}

uint64_t sub_224F2A540@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_224F2B8D0();
  *a1 = result;
  return result;
}

uint64_t sub_224F2A564()
{
  sub_224F2A95C();
  return sub_224F685B8();
}

uint64_t sub_224F2A58C()
{
  sub_224F2A95C();
  return sub_224F685C4();
}

uint64_t Location.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD v27[4];
  char v28;

  sub_224F2B1BC(0, &qword_2557E3CF0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v22 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F2A95C();
  sub_224F6857C();
  if (v2)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_224F68570();
    v26 = a2;
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    v15 = sub_224F683D8();
    v17 = v12;

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    v10 = 0;
    v20 = 0;
    v18 = 0;
    v21 = 0;
    v19 = 1;
  }
  else
  {
    sub_224F2A9A0();
    v28 = 0;
    sub_224F2B218((unint64_t *)&qword_2557E0698, &qword_2557E06A0, (uint64_t)&protocol conformance descriptor for Identifier, MEMORY[0x24BEE12D0]);
    sub_224F68294();
    v10 = v27[0];
    v28 = 1;
    sub_224DE60BC();
    sub_224F68294();
    v11 = v27[2];
    v24 = v27[1];
    v25 = v27[0];
    sub_224E68104();
    v28 = 2;
    sub_224E681B4(&qword_2557E08A0, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    sub_224F68294();
    v26 = a2;
    v22 = v27[0];
    v23 = v11;
    LOBYTE(v27[0]) = 3;
    v15 = sub_224F68264();
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v18 = v23;
    v19 = v24;
    v20 = v25;
    v21 = v22;
  }
  v13 = v26;
  *v26 = v10;
  v13[1] = v20;
  v13[2] = v19;
  v13[3] = v18;
  v13[4] = v21;
  v13[5] = v15;
  v13[6] = v17;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_224F2A95C()
{
  unint64_t result;

  result = qword_2557E3CF8;
  if (!qword_2557E3CF8)
  {
    result = MEMORY[0x22768ED24](&unk_224F7504C, &type metadata for Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3CF8);
  }
  return result;
}

void sub_224F2A9A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E0690)
  {
    type metadata accessor for Identifier();
    v0 = sub_224F67DB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E0690);
  }
}

uint64_t Location.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[6];
  if (*v1)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDC7A0(a1, v4);
    swift_bridgeObjectRelease();
    if (v5 == 1)
      goto LABEL_3;
LABEL_6:
    sub_224F68528();
    if (v5)
    {
      sub_224F68528();
      sub_224DDB44C(v3, v5);
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      if (v6)
        goto LABEL_8;
    }
    else
    {
      sub_224F68528();
      swift_bridgeObjectRetain();
      if (v6)
      {
LABEL_8:
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224DDA83C(a1, v6);
        swift_bridgeObjectRelease();
        sub_224DDB480(v3, v5);
        if (!v7)
          goto LABEL_4;
        goto LABEL_12;
      }
    }
    sub_224F68528();
    sub_224DDB480(v3, v5);
    if (!v7)
      goto LABEL_4;
    goto LABEL_12;
  }
  sub_224F68528();
  if (v5 != 1)
    goto LABEL_6;
LABEL_3:
  sub_224F68528();
  if (!v7)
  {
LABEL_4:
    sub_224F68528();
    goto LABEL_16;
  }
LABEL_12:
  sub_224F68528();
  sub_224F6851C();
  v9 = *(_QWORD *)(v7 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    v10 = v7 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      v10 += 16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
LABEL_16:
  if (!v8)
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t Location.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  sub_224F2B1BC(0, &qword_2557E3D00, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v15 - v7;
  v10 = *v1;
  v9 = v1[1];
  v18 = v1[2];
  v19 = v9;
  v11 = v1[3];
  v16 = v1[4];
  v17 = v11;
  v12 = v1[5];
  v15[1] = v1[6];
  v15[2] = v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F2A95C();
  sub_224F68594();
  v20 = v10;
  v23 = 0;
  sub_224F2A9A0();
  sub_224F2B218((unint64_t *)&qword_2557E08E8, &qword_2557E08F0, (uint64_t)&protocol conformance descriptor for Identifier, MEMORY[0x24BEE12A0]);
  sub_224F68330();
  if (!v2)
  {
    v13 = v16;
    v20 = v19;
    v21 = v18;
    v22 = v17;
    v23 = 1;
    sub_224DFAEA8();
    sub_224F68330();
    v20 = v13;
    v23 = 2;
    sub_224E68104();
    sub_224E681B4(&qword_2557E0890, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    sub_224F68330();
    LOBYTE(v20) = 3;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Location.hashValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  _BYTE v4[72];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v1 = *((_QWORD *)v0 + 6);
  v2 = v0[1];
  v5 = *v0;
  v6 = v2;
  v7 = v0[2];
  v8 = v1;
  sub_224F68510();
  Location.hash(into:)((uint64_t)v4);
  return sub_224F6854C();
}

uint64_t sub_224F2AEB4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Location.init(from:)(a1, a2);
}

uint64_t sub_224F2AEC8(_QWORD *a1)
{
  return Location.encode(to:)(a1);
}

uint64_t sub_224F2AEDC()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  _BYTE v4[72];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v1 = *((_QWORD *)v0 + 6);
  v2 = v0[1];
  v5 = *v0;
  v6 = v2;
  v7 = v0[2];
  v8 = v1;
  sub_224F68510();
  Location.hash(into:)((uint64_t)v4);
  return sub_224F6854C();
}

uint64_t sub_224F2AF38()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  _BYTE v4[72];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v1 = *((_QWORD *)v0 + 6);
  v2 = v0[1];
  v5 = *v0;
  v6 = v2;
  v7 = v0[2];
  v8 = v1;
  sub_224F68510();
  Location.hash(into:)((uint64_t)v4);
  return sub_224F6854C();
}

BOOL _s23HealthRecordsExtraction8LocationV2eeoiySbAC_ACtFZ_0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD v32[3];

  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v5 = (_QWORD *)a1[4];
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = (_QWORD *)a2[4];
  if (*a1)
  {
    if (!v6)
      return 0;
    v27 = a2[5];
    v28 = a2[6];
    v29 = a1[6];
    v30 = a1[5];
    v26 = a2[2];
    v11 = a1[2];
    v12 = a2[1];
    v13 = a2[3];
    v14 = a1[3];
    v15 = a1[1];
    v16 = (_QWORD *)a2[4];
    v17 = (_QWORD *)a1[4];
    swift_bridgeObjectRetain();
    v18 = swift_bridgeObjectRetain();
    v19 = sub_224DD6C8C(v18, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = v17;
    v10 = v16;
    v2 = v15;
    v3 = v14;
    v9 = v13;
    v7 = v12;
    v4 = v11;
    v8 = v26;
    if ((v19 & 1) == 0)
      return 0;
  }
  else
  {
    v27 = a2[5];
    v28 = a2[6];
    v29 = a1[6];
    v30 = a1[5];
    if (v6)
      return 0;
  }
  if (v4 == 1)
  {
    if (v8 == 1)
      goto LABEL_14;
LABEL_11:
    sub_224DDB44C(v7, v8);
    sub_224DDB480(v2, v4);
    sub_224DDB480(v7, v8);
    return 0;
  }
  v32[0] = v2;
  v32[1] = v4;
  v32[2] = v3;
  if (v8 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  v31[0] = v7;
  v31[1] = v8;
  v31[2] = v9;
  v21 = v5;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v22 = static CodeableConcept.== infix(_:_:)(v32, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_224DDB480(v2, v4);
  v5 = v21;
  if ((v22 & 1) == 0)
    return 0;
LABEL_14:
  if (v5)
  {
    v24 = v29;
    v23 = v30;
    v25 = v27;
    if (!v10 || (sub_224DD698C(v5, v10) & 1) == 0)
      return 0;
  }
  else
  {
    v24 = v29;
    v23 = v30;
    v25 = v27;
    if (v10)
      return 0;
  }
  if (!v24)
    return !v28;
  return v28 && (v23 == v25 && v24 == v28 || (sub_224F683CC() & 1) != 0);
}

void sub_224F2B1BC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224F2A95C();
    v7 = a3(a1, &type metadata for Location.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_224F2B218(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_224F2A9A0();
    v10 = v9;
    v11 = sub_224F2B290(a2, a3);
    result = MEMORY[0x22768ED24](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_224F2B290(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Identifier();
    result = MEMORY[0x22768ED24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_224F2B2D0(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_224DE6770();
  a1[2] = sub_224DFB4A4();
  result = sub_224F2B304();
  a1[3] = result;
  return result;
}

unint64_t sub_224F2B304()
{
  unint64_t result;

  result = qword_2557E3D08;
  if (!qword_2557E3D08)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Location, &type metadata for Location);
    atomic_store(result, (unint64_t *)&qword_2557E3D08);
  }
  return result;
}

unint64_t sub_224F2B34C()
{
  unint64_t result;

  result = qword_2557E3D10;
  if (!qword_2557E3D10)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Location, &type metadata for Location);
    atomic_store(result, (unint64_t *)&qword_2557E3D10);
  }
  return result;
}

uint64_t destroy for Location(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Location(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *(_QWORD *)a2;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    *v4 = *(_OWORD *)(a2 + 8);
    a1[3] = *(_QWORD *)(a2 + 24);
  }
  else
  {
    a1[1] = *(_QWORD *)(a2 + 8);
    a1[2] = v5;
    a1[3] = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v6 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v6;
  a1[6] = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Location(_QWORD *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (__int128 *)(a1 + 1);
  v5 = (__int128 *)(a2 + 1);
  v6 = a2[2];
  if (a1[2] == 1)
  {
    if (v6 == 1)
    {
      v7 = *v5;
      a1[3] = a2[3];
      *v4 = v7;
    }
    else
    {
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    sub_224E2C9C0((uint64_t)(a1 + 1));
    v8 = a2[3];
    *v4 = *v5;
    a1[3] = v8;
  }
  else
  {
    a1[1] = a2[1];
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for Location(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  if (a1[2] != 1)
  {
    v4 = a2[2];
    if (v4 != 1)
    {
      a1[1] = a2[1];
      a1[2] = v4;
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_224E2C9C0((uint64_t)(a1 + 1));
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
LABEL_6:
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  v5 = a2[6];
  a1[5] = a2[5];
  a1[6] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Location(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Location(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Location()
{
  return &type metadata for Location;
}

uint64_t storeEnumTagSinglePayload for Location.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_224F2B778 + 4 * byte_224F74E49[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_224F2B7AC + 4 * byte_224F74E44[v4]))();
}

uint64_t sub_224F2B7AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F2B7B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224F2B7BCLL);
  return result;
}

uint64_t sub_224F2B7C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224F2B7D0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_224F2B7D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F2B7DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Location.CodingKeys()
{
  return &type metadata for Location.CodingKeys;
}

unint64_t sub_224F2B7FC()
{
  unint64_t result;

  result = qword_2557E3D18;
  if (!qword_2557E3D18)
  {
    result = MEMORY[0x22768ED24](&unk_224F75024, &type metadata for Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3D18);
  }
  return result;
}

unint64_t sub_224F2B844()
{
  unint64_t result;

  result = qword_2557E3D20;
  if (!qword_2557E3D20)
  {
    result = MEMORY[0x22768ED24](&unk_224F74F5C, &type metadata for Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3D20);
  }
  return result;
}

unint64_t sub_224F2B88C()
{
  unint64_t result;

  result = qword_2557E3D28;
  if (!qword_2557E3D28)
  {
    result = MEMORY[0x22768ED24](&unk_224F74F84, &type metadata for Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3D28);
  }
  return result;
}

uint64_t sub_224F2B8D0()
{
  unint64_t v0;

  v0 = sub_224F68240();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

void static FHIRDateTime.distantFuture()(uint64_t a1@<X8>)
{
  sub_224F2C934((void (*)(uint64_t))MEMORY[0x24BDCE2F8], a1);
}

void FHIRDateTime.init(_:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = a1;
  v34 = type metadata accessor for FHIRDateTime();
  MEMORY[0x24BDAC7A8](v34);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v25 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v25 - v11;
  v13 = objc_allocWithZone(MEMORY[0x24BDD17A8]);
  v14 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v13, sel_initWithString_, v14);

  v16 = static FHIRDateTime.parse(from:expectAtEnd:)(&v37, (unint64_t *)v35, (uint64_t)v10, v15, 1);
  if (v1)
  {

  }
  else
  {
    v18 = v16;
    v19 = v17;
    v33 = v37;
    v31 = v39;
    v32 = v38;
    v29 = v41;
    v30 = v40;
    v27 = v35[1];
    v28 = v35[0];
    v26 = v36;
    v20 = (void (*)(uint64_t))MEMORY[0x24BDCF510];
    sub_224F0B064((uint64_t)v10, (uint64_t)v12, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    sub_224E75F34((uint64_t)v12, (uint64_t)v7, &qword_2557E0318, v20);
    *v3 = 1;
    v21 = v34;
    v22 = (uint64_t)&v3[*(int *)(v34 + 28)];
    v23 = sub_224F67874();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
    *((_QWORD *)v3 + 1) = v33;
    v3[16] = v32;
    v3[17] = v31;
    v3[18] = v30;
    v3[19] = v29;
    *(_OWORD *)(v3 + 24) = v28;
    *(_OWORD *)(v3 + 40) = v27;
    *((_QWORD *)v3 + 7) = v26;
    sub_224F2DFF0((uint64_t)v7, v22);
    v24 = &v3[*(int *)(v21 + 32)];
    *(_QWORD *)v24 = v18;
    *((_QWORD *)v24 + 1) = v19;
    sub_224EEED44((uint64_t)v3, v42);

    sub_224E7601C((uint64_t)v12, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  }
}

void FHIRDateTime.date.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;

  v2 = *(_BYTE *)(v1 + 16);
  v3 = *(_BYTE *)(v1 + 17);
  v4 = *(_BYTE *)(v1 + 18);
  v5 = *(_BYTE *)(v1 + 19);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 9) = v3;
  *(_BYTE *)(a1 + 10) = v4;
  *(_BYTE *)(a1 + 11) = v5;
}

uint64_t FHIRDateTime.date.setter(uint64_t result)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;

  v2 = *(_BYTE *)(result + 8);
  v3 = *(_BYTE *)(result + 9);
  v4 = *(_BYTE *)(result + 10);
  v5 = *(_BYTE *)(result + 11);
  *(_QWORD *)(v1 + 8) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 16) = v2;
  *(_BYTE *)(v1 + 17) = v3;
  *(_BYTE *)(v1 + 18) = v4;
  *(_BYTE *)(v1 + 19) = v5;
  return result;
}

uint64_t (*FHIRDateTime.date.modify())()
{
  return nullsub_1;
}

uint64_t FHIRDateTime.time.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[3];
  v3 = v1[4];
  v4 = v1[5];
  v5 = v1[6];
  v6 = v1[7];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  return sub_224F2E044(v2, v3, v4, v5, v6);
}

__n128 FHIRDateTime.time.setter(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;
  __int128 v5;

  v4 = (__n128)a1[1];
  v5 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  sub_224DDE9F8(v1[3], v1[4], v1[5], v1[6], v1[7]);
  *(_OWORD *)(v1 + 3) = v5;
  result = v4;
  *(__n128 *)(v1 + 5) = v4;
  v1[7] = v2;
  return result;
}

uint64_t (*FHIRDateTime.time.modify())()
{
  return nullsub_1;
}

uint64_t FHIRDateTime.timeZone.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FHIRDateTime();
  return sub_224E75F34(v1 + *(int *)(v3 + 28), a1, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
}

uint64_t sub_224F2BD08(uint64_t a1, _BYTE *a2)
{
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = (void (*)(uint64_t))MEMORY[0x24BDCF510];
  sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - v6;
  sub_224E75F34(a1, (uint64_t)&v10 - v6, &qword_2557E0318, v4);
  v8 = type metadata accessor for FHIRDateTime();
  result = sub_224F2DFF0((uint64_t)v7, (uint64_t)&a2[*(int *)(v8 + 28)]);
  *a2 = 0;
  return result;
}

uint64_t FHIRDateTime.timeZone.setter(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t result;

  v3 = type metadata accessor for FHIRDateTime();
  result = sub_224F2DFF0(a1, (uint64_t)&v1[*(int *)(v3 + 28)]);
  *v1 = 0;
  return result;
}

_BYTE **(*FHIRDateTime.timeZone.modify(_QWORD *a1))(_BYTE **result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  type metadata accessor for FHIRDateTime();
  return sub_224F2BE18;
}

_BYTE **sub_224F2BE18(_BYTE **result, char a2)
{
  if ((a2 & 1) == 0)
    **result = 0;
  return result;
}

uint64_t FHIRDateTime.originalTimeZoneString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FHIRDateTime() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FHIRDateTime.init(date:time:timezone:)@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = a4;
  v7 = type metadata accessor for FHIRDateTime();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v22 - v11;
  v13 = *a1;
  v14 = *((_BYTE *)a1 + 8);
  v15 = *((_BYTE *)a1 + 9);
  v16 = *((_BYTE *)a1 + 10);
  LOBYTE(a1) = *((_BYTE *)a1 + 11);
  v17 = *a2;
  v24 = a2[1];
  v25 = v17;
  v23 = *((_QWORD *)a2 + 4);
  sub_224E75F34(a3, (uint64_t)&v22 - v11, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  *v9 = 1;
  v18 = (uint64_t)&v9[*(int *)(v7 + 28)];
  v19 = sub_224F67874();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *((_QWORD *)v9 + 1) = v13;
  v9[16] = v14;
  v9[17] = v15;
  v9[18] = v16;
  v9[19] = (char)a1;
  *(_OWORD *)(v9 + 24) = v25;
  *(_OWORD *)(v9 + 40) = v24;
  *((_QWORD *)v9 + 7) = v23;
  sub_224F2DFF0((uint64_t)v12, v18);
  v20 = &v9[*(int *)(v7 + 32)];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  sub_224EEED44((uint64_t)v9, v26);
  return sub_224E7601C(a3, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
}

char *static FHIRDateTime.parse(from:expectAtEnd:)(uint64_t *a1, unint64_t *a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char **v44;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int16 v63;
  char v64;
  unint64_t v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  char *v97;
  uint64_t *v98;
  unint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  unsigned int v105;
  unsigned __int16 v106;
  unsigned __int16 v107;
  unsigned __int16 v108;
  unsigned __int16 v109;
  unsigned __int16 v110;
  unsigned __int16 v111;
  unsigned __int16 v112;
  unsigned __int16 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v102 = a5;
  v101 = a3;
  v98 = a1;
  v99 = a2;
  sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v116 = (uint64_t)&v78 - v11;
  sub_224E63218(0, &qword_2557E1848, (void (*)(uint64_t))MEMORY[0x24BDCB750]);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v100 = (uint64_t)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v97 = (char *)&v78 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v78 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v78 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v78 - v25;
  v27 = objc_msgSend(a4, sel_charactersToBeSkipped);
  if (v27)
  {
    v28 = v27;
    sub_224F67328();

    v29 = sub_224F6734C();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v24, 0, 1, v29);
  }
  else
  {
    v30 = sub_224F6734C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v24, 1, 1, v30);
  }
  sub_224F0B064((uint64_t)v24, (uint64_t)v26, &qword_2557E1848, (void (*)(uint64_t))MEMORY[0x24BDCB750]);
  objc_msgSend(a4, sel_setCharactersToBeSkipped_, 0);
  v31 = sub_224E60E40(a4, 0);
  if (v5)
  {
    sub_224E75F34((uint64_t)v26, (uint64_t)v21, &qword_2557E1848, (void (*)(uint64_t))MEMORY[0x24BDCB750]);
    v33 = sub_224F6734C();
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v21, 1, v33) == 1)
    {
      v35 = 0;
    }
    else
    {
      v35 = (void *)sub_224F67310();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v33);
    }
    v44 = &selRef_preprocessDataInSource_options_error_;
    goto LABEL_23;
  }
  v96 = v31;
  if (v32 > 0xCu)
    v36 = 1;
  else
    v36 = (v32 >> 8) & 1;
  if (BYTE2(v32) > 0x1Fu)
    v37 = 1;
  else
    v37 = v36 | ((v32 & 0x1000000) >> 24);
  if (v37)
    v38 = 0;
  else
    v38 = HIWORD(v32);
  if (v36)
    v39 = 0;
  else
    v39 = v32;
  v94 = v39;
  v95 = v38;
  v40 = sub_224F67874();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v116, 1, 1, v40);
  sub_224F67FB8();
  v42 = v41;
  swift_bridgeObjectRelease();
  if (v42)
  {
    v43 = sub_224F3E6DC((char *)a4, 0, &v103);
    v84 = v10;
    v85 = v36;
    v90 = v105;
    v89 = v106;
    v88 = v107;
    v87 = v108;
    v86 = v109;
    v57 = v110;
    v58 = v111;
    v59 = v112;
    v60 = v113;
    v92 = v114;
    v93 = v115;
    if (v103 >= 0x17u)
      v61 = 23;
    else
      v61 = v103;
    v80 = v61;
    if (v104 >= 0x3Bu)
      v62 = 59;
    else
      v62 = v104;
    v79 = v62;
    MEMORY[0x22768E034](v43, 60.0);
    v82 = v57;
    v81 = v58;
    v83 = v60;
    v63 = v59;
    v64 = sub_224F67F88();
    v91 = v37;
    if ((v64 & 1) != 0)
    {
      v65 = MEMORY[0x22768E034](60.0);
      v63 = v66;
      v90 = v65;
      v83 = HIWORD(v66);
      v88 = HIWORD(v65);
      v89 = HIDWORD(v65);
      v86 = v67 >> 16;
      v87 = v67;
      v82 = HIDWORD(v67);
      v81 = HIWORD(v67);
    }
    v68 = (uint64_t)v84;
    sub_224EF5BD0(a4);
    LOBYTE(v36) = v85;
    v21 = v76;
    sub_224F67844();
    v77 = v116;
    sub_224E7601C(v116, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    sub_224F0B064(v68, v77, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    v90 = ((unint64_t)v79 << 16) | (v80 << 8) | (v90 << 32) | 1;
    v46 = (unsigned __int16)v89 | ((unint64_t)v88 << 16) | ((unint64_t)(unsigned __int16)v87 << 32) | (v86 << 48);
    v47 = (unsigned __int16)v82 | ((unint64_t)v81 << 16) | ((unint64_t)v63 << 32) | (v83 << 48);
  }
  else
  {
    v92 = 0;
    v93 = 1;
    v91 = v37;
    v21 = 0;
    v90 = 0;
    v46 = 0;
    v47 = 0;
  }
  v48 = sub_224F67FC4();
  if ((v102 & 1) != 0)
  {
    v49 = v48;
    if ((objc_msgSend(a4, sel_isAtEnd) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_224DDE9F8(v90, v46, v47, v92, v93);
      v69 = objc_msgSend(a4, sel_string);
      v70 = sub_224F67B80();
      v72 = v71;

      sub_224E61A7C();
      swift_allocError();
      *(_QWORD *)v73 = v70;
      *(_QWORD *)(v73 + 8) = v72;
      *(_QWORD *)(v73 + 16) = v49;
      *(_BYTE *)(v73 + 24) = 10;
      swift_willThrow();
      sub_224E7601C(v116, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      v21 = v97;
      sub_224E75F34((uint64_t)v26, (uint64_t)v97, &qword_2557E1848, (void (*)(uint64_t))MEMORY[0x24BDCB750]);
      v74 = sub_224F6734C();
      v75 = *(_QWORD *)(v74 - 8);
      v44 = &selRef_preprocessDataInSource_options_error_;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v21, 1, v74) == 1)
      {
        v35 = 0;
      }
      else
      {
        v35 = (void *)sub_224F67310();
        (*(void (**)(char *, uint64_t))(v75 + 8))(v21, v74);
      }
LABEL_23:
      objc_msgSend(a4, v44[196], v35);

      sub_224E7601C((uint64_t)v26, &qword_2557E1848, (void (*)(uint64_t))MEMORY[0x24BDCB750]);
      return v21;
    }
  }
  v50 = v98;
  *v98 = v96;
  *((_BYTE *)v50 + 8) = v94;
  *((_BYTE *)v50 + 9) = v36;
  *((_BYTE *)v50 + 10) = v95;
  *((_BYTE *)v50 + 11) = v91;
  v51 = v99;
  *v99 = v90;
  v51[1] = v46;
  v52 = v92;
  v51[2] = v47;
  v51[3] = v52;
  v51[4] = v93;
  sub_224F0B064(v116, v101, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  v53 = v100;
  sub_224E75F34((uint64_t)v26, v100, &qword_2557E1848, (void (*)(uint64_t))MEMORY[0x24BDCB750]);
  v54 = sub_224F6734C();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54) != 1)
  {
    v56 = (void *)sub_224F67310();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
  }
  objc_msgSend(a4, sel_setCharactersToBeSkipped_, v56);

  sub_224E7601C((uint64_t)v26, &qword_2557E1848, (void (*)(uint64_t))MEMORY[0x24BDCB750]);
  return v21;
}

void static FHIRDateTime.distantPast()(uint64_t a1@<X8>)
{
  sub_224F2C934((void (*)(uint64_t))MEMORY[0x24BDCE2D8], a1);
}

void sub_224F2C934(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v4 = sub_224F6770C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_224F67760();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v13 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v10);
  sub_224F2CA44((uint64_t)v7);
  sub_224F676AC();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  FHIRDateTime.init(_:)(a2);
}

uint64_t sub_224F2CA44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD, uint64_t);
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a1;
  sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v24 - v2;
  v29 = sub_224F67874();
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v25 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_224F67700();
  v5 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_224F676E8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_224F676D0();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_224F676DC();
  MEMORY[0x24BDAC7A8](v16);
  (*(void (**)(char *, _QWORD))(v18 + 104))((char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x24BDCE368]);
  v19 = v12;
  v20 = v27;
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BDCE348], v19);
  v21 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v22 = v29;
  v21(v11, *MEMORY[0x24BDCE388], v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDCE3D0], v28);
  sub_224F67844();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v3, 1, v22);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v25, v3, v22);
    return sub_224F676F4();
  }
  return result;
}

uint64_t FHIRDateTime.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v1 = v0;
  v2 = sub_224F67874();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v24 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E0318, v5);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v19 - v7;
  sub_224F68528();
  v9 = *(_BYTE *)(v0 + 17);
  v10 = *(_BYTE *)(v0 + 19);
  sub_224F6851C();
  if ((v9 & 1) == 0)
    sub_224F68528();
  sub_224F68528();
  if ((v10 & 1) == 0)
    sub_224F68528();
  sub_224F68528();
  v11 = *(_QWORD *)(v0 + 56);
  if (v11 == 1)
  {
    sub_224F68528();
  }
  else
  {
    v22 = v3;
    v23 = v2;
    v12 = *(_QWORD *)(v0 + 24);
    v13 = *(_QWORD *)(v0 + 32);
    v14 = *(_QWORD *)(v0 + 40);
    v20 = *(_QWORD *)(v0 + 48);
    v21 = HIDWORD(v14);
    sub_224F68528();
    sub_224F68528();
    sub_224F68528();
    sub_224F68528();
    sub_224F67FA0();
    sub_224F68528();
    if (v11)
    {
      swift_bridgeObjectRetain();
      v15 = v20;
      sub_224F67C34();
      sub_224DDE9F8(v12, v13, v14, v15, v11);
    }
    v3 = v22;
    v2 = v23;
  }
  v16 = type metadata accessor for FHIRDateTime();
  sub_224E75F34(v1 + *(int *)(v16 + 28), (uint64_t)v8, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_224F68528();
  }
  else
  {
    v17 = v24;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v24, v8, v2);
    sub_224F68528();
    sub_224DDACD4(&qword_2557E0320, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF530]);
    sub_224F67B20();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v17, v2);
  }
  if (!*(_QWORD *)(v1 + *(int *)(v16 + 32) + 8))
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t FHIRDateTime.hashValue.getter()
{
  sub_224F68510();
  FHIRDateTime.hash(into:)();
  return sub_224F6854C();
}

uint64_t sub_224F2D000()
{
  sub_224F68510();
  FHIRDateTime.hash(into:)();
  return sub_224F6854C();
}

uint64_t sub_224F2D040()
{
  sub_224F68510();
  FHIRDateTime.hash(into:)();
  return sub_224F6854C();
}

void FHIRDateTime.init(stringLiteral:)(uint64_t a1@<X8>)
{
  FHIRDateTime.init(_:)(a1);
}

void sub_224F2D0C8(uint64_t a1@<X8>)
{
  FHIRDateTime.init(_:)(a1);
}

uint64_t FHIRDateTime.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v10[4];

  v5 = type metadata accessor for FHIRDateTime();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68570();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    sub_224F683D8();
    FHIRDateTime.init(_:)((uint64_t)v7);
    sub_224EEED44((uint64_t)v7, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t FHIRDateTime.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68588();
  FHIRDateTime.description.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_224F683FC();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t FHIRDateTime.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v40 - v2;
  v4 = sub_224F67874();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v0 + 56);
  if (v8 == 1)
    goto LABEL_4;
  v9 = *(_QWORD *)(v0 + 32);
  v51 = *(_QWORD *)(v0 + 24);
  v11 = *(_QWORD *)(v0 + 40);
  v10 = *(_QWORD *)(v0 + 48);
  v12 = type metadata accessor for FHIRDateTime();
  sub_224E75F34(v0 + *(int *)(v12 + 28), (uint64_t)v3, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_224E7601C((uint64_t)v3, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
LABEL_4:
    v13 = *(_BYTE *)(v0 + 16);
    v14 = *(_BYTE *)(v0 + 17);
    v15 = *(_BYTE *)(v0 + 18);
    v16 = *(_BYTE *)(v0 + 19);
    v52 = *(_QWORD *)(v0 + 8);
    LOBYTE(v53) = v13;
    HIBYTE(v53) = v14;
    LOBYTE(v54) = v15;
    HIBYTE(v54) = v16;
    return FHIRDate.description.getter();
  }
  v49 = v51 & 1;
  v50 = v10;
  v18 = HIDWORD(v51);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  if (*(_BYTE *)v0 == 1 && (v19 = (unint64_t *)(v0 + *(int *)(v12 + 32)), (v20 = v19[1]) != 0))
  {
    v48 = *v19;
    v45 = HIDWORD(v11);
    v46 = HIWORD(v11);
    v43 = HIWORD(v9);
    v44 = v11 >> 16;
    v42 = HIDWORD(v9);
    v21 = *(_QWORD *)(v0 + 8);
    v22 = *(_BYTE *)(v0 + 16);
    v23 = *(_BYTE *)(v0 + 17);
    v24 = *(_BYTE *)(v0 + 18);
    v25 = *(_BYTE *)(v0 + 19);
    v40 = v18;
    v41 = v9 >> 16;
    v52 = v21;
    v26 = v51;
    v27 = v51 >> 16;
    LOBYTE(v53) = v22;
    v28 = v51 >> 8;
    HIBYTE(v53) = v23;
    LOBYTE(v54) = v24;
    HIBYTE(v54) = v25;
    v47 = v20;
    swift_bridgeObjectRetain();
    v63 = FHIRDate.description.getter();
    v64 = v29;
    sub_224F67C94();
    LOBYTE(v52) = v49;
    BYTE1(v52) = v28;
    BYTE2(v52) = v27;
    HIDWORD(v52) = v40;
    v53 = v9;
    v54 = v41;
    v55 = v42;
    v56 = v43;
    v57 = v11;
    v58 = v44;
    v59 = v45;
    v60 = v46;
    v30 = v50;
    v61 = v50;
    v62 = v8;
    v49 = FHIRTime.description.getter();
    sub_224DDE9F8(v26, v9, v11, v30, v8);
    sub_224F67C94();
    swift_bridgeObjectRelease();
    sub_224F67C94();
  }
  else
  {
    v47 = HIDWORD(v11);
    v48 = HIWORD(v11);
    v45 = HIWORD(v9);
    v46 = v11 >> 16;
    v31 = *(_BYTE *)(v0 + 16);
    v32 = *(_BYTE *)(v0 + 17);
    v33 = *(_BYTE *)(v0 + 18);
    v34 = *(_BYTE *)(v0 + 19);
    v52 = *(_QWORD *)(v0 + 8);
    v43 = v9 >> 16;
    v44 = HIDWORD(v9);
    LOBYTE(v53) = v31;
    v35 = v51 >> 16;
    HIBYTE(v53) = v32;
    v36 = v51 >> 8;
    LOBYTE(v54) = v33;
    HIBYTE(v54) = v34;
    swift_bridgeObjectRetain();
    v63 = FHIRDate.description.getter();
    v64 = v37;
    sub_224F67C94();
    LOBYTE(v52) = v49;
    BYTE1(v52) = v36;
    BYTE2(v52) = v35;
    HIDWORD(v52) = v18;
    v53 = v9;
    v54 = v43;
    v55 = v44;
    v56 = v45;
    v57 = v11;
    v58 = v46;
    v59 = v47;
    v60 = v48;
    v38 = v50;
    v61 = v50;
    v62 = v8;
    FHIRTime.description.getter();
    sub_224DDE9F8(v51, v9, v11, v38, v8);
    sub_224F67C94();
    swift_bridgeObjectRelease();
    TimeZone.fhirDescription.getter();
    sub_224F67C94();
    swift_bridgeObjectRelease();
  }
  v17 = v63;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v17;
}

uint64_t sub_224F2D6F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FHIRDateTime.init(from:)(a1, a2);
}

uint64_t sub_224F2D70C(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68588();
  FHIRDateTime.description.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_224F683FC();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

BOOL sub_224F2D7CC()
{
  return !_s23HealthRecordsExtraction12FHIRDateTimeV1loiySbAC_ACtFZ_0();
}

BOOL sub_224F2D7F4()
{
  return !_s23HealthRecordsExtraction12FHIRDateTimeV1loiySbAC_ACtFZ_0();
}

BOOL sub_224F2D810()
{
  return _s23HealthRecordsExtraction12FHIRDateTimeV1loiySbAC_ACtFZ_0();
}

BOOL _s23HealthRecordsExtraction12FHIRDateTimeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  char *v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  void (*v39)(uint64_t);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void (*v61)(uint64_t);
  void (*v62)(uint64_t);
  char v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v4 = sub_224F67874();
  v5 = (void (*)(uint64_t))MEMORY[0x24BDCF510];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F2EBB0();
  v10 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E0318, v5);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v65 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v65 - v20;
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  v22 = *(_BYTE *)(a2 + 17);
  if ((*(_BYTE *)(a1 + 17) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 17))
      return 0;
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
      v22 = 1;
    if ((v22 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 19) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 19))
      return 0;
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + 18) == *(unsigned __int8 *)(a2 + 18))
      v23 = *(_BYTE *)(a2 + 19);
    else
      v23 = 1;
    if ((v23 & 1) != 0)
      return 0;
  }
  v24 = *(_QWORD *)(a1 + 32);
  v26 = *(_QWORD *)(a1 + 40);
  v25 = *(_QWORD *)(a1 + 48);
  v27 = *(_QWORD *)(a1 + 56);
  v29 = *(_QWORD *)(a2 + 24);
  v28 = *(_QWORD *)(a2 + 32);
  v31 = *(_QWORD *)(a2 + 40);
  v30 = *(_QWORD *)(a2 + 48);
  v32 = *(_QWORD *)(a2 + 56);
  v75 = *(_QWORD *)(a1 + 24);
  v76 = v25;
  if (v27 == 1)
  {
    v72 = v24;
    v73 = v26;
    v74 = 1;
    if (v32 == 1)
      goto LABEL_17;
    goto LABEL_22;
  }
  if (v32 == 1)
  {
    v72 = v24;
    v73 = v26;
    v74 = v27;
    v40 = v28;
    v41 = v31;
    v42 = v29;
    v43 = v30;
    swift_bridgeObjectRetain();
    v32 = 1;
    v30 = v43;
    v29 = v42;
    v31 = v41;
    v28 = v40;
LABEL_22:
    v44 = v28;
    v45 = v31;
    v46 = v30;
    v47 = v32;
    v48 = v29;
    sub_224F2E044(v29, v28, v31, v30, v32);
    sub_224DDE9F8(v75, v72, v73, v76, v74);
    v49 = v48;
    v50 = v44;
    v51 = v45;
    v52 = v46;
    v53 = v47;
LABEL_27:
    sub_224DDE9F8(v49, v50, v51, v52, v53);
    return 0;
  }
  if (__PAIR64__(*(unsigned __int8 *)(a1 + 26), *(unsigned __int8 *)(a1 + 25)) != __PAIR64__(BYTE2(v29), BYTE1(v29)))
  {
    v57 = v24;
    v58 = v27;
    v59 = v26;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    v49 = v75;
    v52 = v76;
    v50 = v57;
    v51 = v59;
    v53 = v58;
    goto LABEL_27;
  }
  v54 = *(unsigned int *)(a1 + 27) | ((unint64_t)*(unsigned __int8 *)(a1 + 31) << 32);
  v70 = HIDWORD(v26);
  v71 = HIDWORD(v31);
  *((_QWORD *)&v55 + 1) = v26;
  *(_QWORD *)&v55 = v24;
  v66 = v55 >> 32;
  v67 = (v54 >> 8) | (unint64_t)(v24 << 32);
  *((_QWORD *)&v55 + 1) = v28;
  *(_QWORD *)&v55 = v29;
  v56 = v55 >> 32;
  *((_QWORD *)&v55 + 1) = v31;
  *(_QWORD *)&v55 = v28;
  v68 = v55 >> 32;
  v69 = v56;
  v72 = v24;
  v73 = v26;
  v74 = v27;
  swift_bridgeObjectRetain_n();
  LODWORD(v71) = MEMORY[0x22768E064](v67, v66, v70, v69, v68, v71);
  swift_bridgeObjectRelease();
  sub_224DDE9F8(v75, v72, v73, v76, v74);
  if ((v71 & 1) == 0)
    return 0;
LABEL_17:
  v76 = type metadata accessor for FHIRDateTime();
  sub_224E75F34(a1 + *(int *)(v76 + 28), (uint64_t)v21, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  v33 = a2 + *(int *)(v76 + 28);
  v34 = MEMORY[0x24BDCF510];
  sub_224E75F34(v33, (uint64_t)v19, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  v35 = &v12[*(int *)(v10 + 48)];
  v36 = (void (*)(uint64_t))v34;
  v37 = (uint64_t)v35;
  sub_224E75F34((uint64_t)v21, (uint64_t)v12, &qword_2557E0318, v36);
  sub_224E75F34((uint64_t)v19, v37, &qword_2557E0318, v36);
  v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v38((uint64_t)v12, 1, v4) != 1)
  {
    sub_224E75F34((uint64_t)v12, (uint64_t)v16, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    if (v38(v37, 1, v4) == 1)
    {
      v61 = (void (*)(uint64_t))MEMORY[0x24BDCF510];
      sub_224E7601C((uint64_t)v19, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      sub_224E7601C((uint64_t)v21, &qword_2557E0318, v61);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v4);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v37, v4);
    v62 = (void (*)(uint64_t))MEMORY[0x24BDCF510];
    sub_224DDACD4(&qword_2557E3DF0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF538]);
    v63 = sub_224F67B50();
    v64 = *(void (**)(char *, uint64_t))(v6 + 8);
    v64(v8, v4);
    sub_224E7601C((uint64_t)v19, &qword_2557E0318, v62);
    sub_224E7601C((uint64_t)v21, &qword_2557E0318, v62);
    v64(v16, v4);
    sub_224E7601C((uint64_t)v12, &qword_2557E0318, v62);
    return (v63 & 1) != 0;
  }
  v39 = (void (*)(uint64_t))MEMORY[0x24BDCF510];
  sub_224E7601C((uint64_t)v19, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  sub_224E7601C((uint64_t)v21, &qword_2557E0318, v39);
  if (v38(v37, 1, v4) != 1)
  {
LABEL_31:
    sub_224F2EC20((uint64_t)v12);
    return 0;
  }
  sub_224E7601C((uint64_t)v12, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  return 1;
}

BOOL _s23HealthRecordsExtraction12FHIRDateTimeV1loiySbAC_ACtFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;

  v0 = sub_224F67760();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v10 - v5;
  FHIRDateTime.asNSDate()((uint64_t)&v10 - v5);
  FHIRDateTime.asNSDate()((uint64_t)v4);
  v7 = sub_224F67748();
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  return v7 == -1;
}

uint64_t type metadata accessor for FHIRDateTime()
{
  uint64_t result;

  result = qword_2557E3DA0;
  if (!qword_2557E3DA0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_224F2DFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_224F2E044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5 != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_224F2E058()
{
  return sub_224DDACD4(&qword_2557E3D30, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
}

uint64_t sub_224F2E084()
{
  return sub_224DDACD4(&qword_2557E3D38, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
}

uint64_t sub_224F2E0B0()
{
  return sub_224DDACD4(&qword_2557E3D40, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
}

uint64_t sub_224F2E0DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for FHIRDateTime();
  return sub_224E75F34(a1 + *(int *)(v4 + 28), a2, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
}

uint64_t initializeBufferWithCopyOfBuffer for FHIRDateTime(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    v7 = a2[7];
    if (v7 == 1)
    {
      v8 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(v4 + 40) = v8;
      *(_QWORD *)(v4 + 56) = a2[7];
    }
    else
    {
      *(_BYTE *)(v4 + 24) = *((_BYTE *)a2 + 24);
      *(_WORD *)(v4 + 25) = *(_WORD *)((char *)a2 + 25);
      *(_OWORD *)(v4 + 28) = *(_OWORD *)((char *)a2 + 28);
      *(_DWORD *)(v4 + 44) = *((_DWORD *)a2 + 11);
      *(_QWORD *)(v4 + 48) = a2[6];
      *(_QWORD *)(v4 + 56) = v7;
      swift_bridgeObjectRetain();
    }
    v10 = *(int *)(a3 + 28);
    v11 = (void *)(v4 + v10);
    v12 = (char *)a2 + v10;
    v13 = sub_224F67874();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v16 = *(int *)(a3 + 32);
    v17 = (_QWORD *)(v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for FHIRDateTime(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 56) != 1)
    swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_224F67874();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FHIRDateTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 56);
  if (v6 == 1)
  {
    v7 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  }
  else
  {
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
    *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v6;
    swift_bridgeObjectRetain();
  }
  v8 = *(int *)(a3 + 28);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_224F67874();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = *(int *)(a3 + 32);
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FHIRDateTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  v6 = a1 + 24;
  v7 = (__int128 *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56) == 1)
  {
    if (v8 == 1)
    {
      v9 = *v7;
      v10 = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)v6 = v9;
      *(_OWORD *)(a1 + 40) = v10;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
      *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
      v13 = *(_OWORD *)(a2 + 28);
      *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
      *(_OWORD *)(a1 + 28) = v13;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
    }
  }
  else if (v8 == 1)
  {
    sub_224E2C9F4(a1 + 24);
    v11 = *((_QWORD *)v7 + 4);
    v12 = v7[1];
    *(_OWORD *)v6 = *v7;
    *(_OWORD *)(v6 + 16) = v12;
    *(_QWORD *)(v6 + 32) = v11;
  }
  else
  {
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
    *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
    *(_WORD *)(a1 + 34) = *(_WORD *)(a2 + 34);
    *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
    *(_WORD *)(a1 + 38) = *(_WORD *)(a2 + 38);
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
    *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
    *(_WORD *)(a1 + 46) = *(_WORD *)(a2 + 46);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v14 = *(int *)(a3 + 28);
  v15 = (void *)(a1 + v14);
  v16 = (void *)(a2 + v14);
  v17 = sub_224F67874();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v15, v16, v17);
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_13;
  }
  if (v21)
  {
LABEL_13:
    sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_14:
  v23 = *(int *)(a3 + 32);
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for FHIRDateTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = *(int *)(a3 + 28);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 40) = v6;
  v10 = sub_224F67874();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 32)) = *(_OWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for FHIRDateTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = a1 + 24;
  v7 = a2 + 24;
  if (*(_QWORD *)(a1 + 56) == 1)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 56);
  if (v8 == 1)
  {
    sub_224E2C9F4(v6);
LABEL_4:
    v9 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v9;
    *(_QWORD *)(v6 + 32) = *(_QWORD *)(v7 + 32);
    goto LABEL_6;
  }
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  v10 = *(int *)(a3 + 28);
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = sub_224F67874();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_11;
  }
  if (v17)
  {
LABEL_11:
    sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_12:
  v19 = *(int *)(a3 + 32);
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FHIRDateTime()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F2E9D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for FHIRDateTime()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_224F2EA80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 28), a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = a2;
}

void sub_224F2EB10()
{
  unint64_t v0;

  sub_224E63218(319, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_224F2EBB0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E3DE8)
  {
    sub_224E63218(255, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E3DE8);
  }
}

uint64_t sub_224F2EC20(uint64_t a1)
{
  uint64_t v2;

  sub_224F2EBB0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_224F2EC5C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id result;
  id v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  void *v39;
  void *ObjCClassFromMetadata;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD v75[7];
  _OWORD v76[3];
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  _QWORD v82[3];

  v58 = a7;
  v74 = a6;
  sub_224F2F26C((uint64_t)a13, (uint64_t)v75);
  v56 = (id)v75[0];
  v57 = v75[2];
  v62 = (id)v75[4];
  v55 = v75[6];
  sub_224E7C238();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5451C(0, &qword_2557E2950);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_conditionRecordTypeForIdentifier_, *MEMORY[0x24BDD2AE8], v55);
  if (result)
  {
    v25 = result;
    if (a4)
    {
      v61 = sub_224F67B5C();
      swift_bridgeObjectRelease();
    }
    else
    {
      v61 = 0;
    }
    sub_224F2F26C((uint64_t)a13, (uint64_t)v82);
    v71 = a5;
    v70 = v25;
    v69 = v15;
    if (v82[0])
    {
      if (v82[1] == 0xD000000000000010 && v82[2] == 0x8000000224F81FF0)
        v60 = 1;
      else
        v60 = sub_224F683CC();
    }
    else
    {
      v60 = 0;
    }
    v26 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20));
    v27 = type metadata accessor for ExtractionContext();
    v68 = (char *)v26 + *(int *)(v27 + 28);
    v67 = sub_224F67718();
    v66 = *a1;
    sub_224E7C28C(a2, (uint64_t)v23);
    v28 = sub_224F677D8();
    v29 = *(_QWORD *)(v28 - 8);
    v30 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v23, 1, v28) != 1)
    {
      v30 = sub_224F677C0();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v23, v28);
    }
    v65 = (void *)v30;
    v31 = *v26;
    v32 = objc_msgSend((id)objc_opt_self(), sel_localDevice);
    v33 = *(uint64_t *)((char *)v26 + *(int *)(v27 + 40));
    v64 = v32;
    v63 = v31;
    if (v33)
    {
      v34 = swift_bridgeObjectRetain();
      sub_224F073F8(v34);
      swift_bridgeObjectRelease();
      v59 = sub_224F67AE4();
      swift_bridgeObjectRelease();
    }
    else
    {
      v59 = 0;
    }
    swift_bridgeObjectRetain();
    v74 = sub_224F67B5C();
    swift_bridgeObjectRelease();
    v35 = v26[1];
    sub_224E5451C(0, &qword_2557E37D0);
    v36 = sub_224F67D60();
    swift_bridgeObjectRelease();
    if (a8)
    {
      v58 = sub_224F67B5C();
      swift_bridgeObjectRelease();
    }
    else
    {
      v58 = 0;
    }
    sub_224F2F26C((uint64_t)a13, (uint64_t)v76);
    v73 = a1;
    v72 = a2;
    if (*(_QWORD *)&v76[0])
    {
      v78 = v76[0];
      v79 = v76[1];
      v80 = v76[2];
      v81 = v77;
      swift_bridgeObjectRetain();
      v37 = v56;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38 = sub_224F22D04();
      sub_224F2F304(a13);
    }
    else
    {
      v38 = 0;
    }
    if (a15)
    {
      v39 = (void *)sub_224F67D60();
      swift_bridgeObjectRelease();
    }
    else
    {
      v39 = 0;
    }
    v62 = v39;
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    v54 = v39;
    v41 = (void *)v58;
    v53 = v36;
    v52 = (v35 >> 2) & 1;
    v42 = (void *)v36;
    v43 = (void *)v74;
    v44 = (void *)v59;
    v45 = v64;
    v46 = v70;
    v47 = (void *)v61;
    v48 = (void *)v67;
    v49 = v65;
    v71 = objc_retainAutoreleasedReturnValue(objc_msgSend(ObjCClassFromMetadata, sel_conditionRecordWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_conditionCodingCollection_categoriesCodingCollections_asserter_abatement_onset_recordedDate_clinicalStatusCoding_verificationStatusCoding_severityCodingCollection_bodySitesCodingCollections_, v70, v61, v60 & 1, v67, v66, v65, v63, v64, v59, v74, v52, v71, v53, v58, a9, a10,
              a11,
              a12,
              v38,
              a14,
              v54));

    v50 = v71;
    v51 = (void *)sub_224F67718();
    objc_msgSend(v50, sel_setCreationDate_, v51);

    sub_224DDEAA0(v72, (uint64_t (*)(_QWORD))sub_224E7C238);
    sub_224DDEAA0((uint64_t)v73, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    return v50;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_224F2F26C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224F2F2B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_224F2F2B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E3DF8)
  {
    v0 = sub_224F67FF4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E3DF8);
  }
}

void **sub_224F2F304(void **a1)
{
  sub_224EDB6A0(*a1);
  return a1;
}

void sub_224F2F338(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[7];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v14 = a6;
  v13[4] = a1;
  v13[5] = a2;
  v13[3] = a7;
  v10 = sub_224F67A3C();
  MEMORY[0x24BDAC7A8](v10);
  v11 = sub_224F67A18();
  MEMORY[0x24BDAC7A8](v11);
  v13[6] = (char *)v13 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = v14;
  type metadata accessor for VCJWT();
}

uint64_t sub_224F2F404(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(v5 - 72);
  result = VCJWT.signatureMessage()();
  if (!v7)
  {
    v10 = v9;
    *(_QWORD *)(v5 - 72) = result;
    *(_QWORD *)(v5 - 168) = v3;
    *(_QWORD *)(v5 - 160) = v1;
    v11 = *(_QWORD *)(v5 - 144);
    v12 = *(_QWORD *)(v5 - 136);
    *(_QWORD *)(v5 - 120) = v2;
    *(_QWORD *)(v5 - 112) = v11;
    *(_QWORD *)(v5 - 104) = v12;
    sub_224DDE970(v11, v12);
    sub_224F67A00();
    *(_QWORD *)(v5 - 112) = *(_QWORD *)(v5 - 72);
    *(_QWORD *)(v5 - 104) = v10;
    sub_224E77688();
    sub_224F67A0C();
    v13 = sub_224F67A24();
    *(_QWORD *)(v5 - 136) = v4;
    VCJWT.assigningSignature(_:)(v13, a1, *(_QWORD *)(v5 - 152));
  }
  return result;
}

void sub_224F2F510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  sub_224DDE9B4(v2, v4);
  sub_224DDE9B4(v1, v3);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 168) + 8))(*(_QWORD *)(v5 - 136), *(_QWORD *)(v5 - 160));
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 120) + 8))(*(_QWORD *)(v5 - 128), v0);
  JUMPOUT(0x224F2F4C8);
}

uint64_t Extension.extension.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Extension.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Extension();
  return sub_224DDB4B4(v1 + *(int *)(v3 + 20), a1, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
}

uint64_t type metadata accessor for Extension()
{
  uint64_t result;

  result = qword_2557E3E80;
  if (!qword_2557E3E80)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Extension.valueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Extension() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Extension.valueDecimal.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Extension() + 28));
}

uint64_t Extension.valueCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Extension() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Extension.valueCoding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Extension();
  return sub_224DDB4B4(v1 + *(int *)(v3 + 36), a1, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
}

uint64_t Extension.valueCodeableConcept.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for Extension() + 40));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_224DDB44C(v4, v5);
}

uint64_t Extension.valueAttachment.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Extension();
  return sub_224DDB4B4(v1 + *(int *)(v3 + 44), a1, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
}

uint64_t Extension.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  v4 = type metadata accessor for Attachment();
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0310, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - v10;
  v12 = sub_224F675D4();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, v16, v7);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v29 - v18;
  v20 = *v2;
  if (*v2)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDB75C(a1, v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v21 = (int *)type metadata accessor for Extension();
  sub_224DDB4B4((uint64_t)v2 + v21[5], (uint64_t)v19, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v19, 1, v12) == 1)
  {
    sub_224F68528();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v19, v12);
    sub_224F68528();
    sub_224DDACD4(&qword_2557E02F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_224F67B20();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  if (*(uint64_t *)((char *)v2 + v21[6] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  if (*((_BYTE *)v2 + v21[7] + 8) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224F68528();
    sub_224F68540();
  }
  if (*(uint64_t *)((char *)v2 + v21[8] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  sub_224DF2764();
  v22 = (uint64_t *)((char *)v2 + v21[10]);
  v23 = v22[1];
  if (v23 == 1)
  {
    sub_224F68528();
    goto LABEL_24;
  }
  v24 = *v22;
  v25 = v22[2];
  sub_224F68528();
  if (!v23)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v25)
      goto LABEL_20;
LABEL_22:
    sub_224F68528();
    v26 = v24;
    v27 = v23;
    goto LABEL_23;
  }
  sub_224F68528();
  sub_224DDB44C(v24, v23);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v25)
    goto LABEL_22;
LABEL_20:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C(a1, v25);
  swift_bridgeObjectRelease();
  v26 = v24;
  v27 = v23;
LABEL_23:
  sub_224DDB480(v26, v27);
LABEL_24:
  sub_224DDB4B4((uint64_t)v2 + v21[11], (uint64_t)v11, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v11, 1, v30) == 1)
    return sub_224F68528();
  sub_224DDEADC((uint64_t)v11, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
  sub_224F68528();
  Attachment.hash(into:)();
  return sub_224DDEAA0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
}

uint64_t sub_224F2FBDC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224F2FC18 + 4 * byte_224F75320[a1]))(0x6F69736E65747865, 0xE90000000000006ELL);
}

uint64_t sub_224F2FC18()
{
  return 7107189;
}

uint64_t sub_224F2FC28()
{
  return 0x72745365756C6176;
}

unint64_t sub_224F2FC98()
{
  return 0xD000000000000014;
}

uint64_t sub_224F2FCB4()
{
  return 0x74744165756C6176;
}

uint64_t sub_224F2FCD8()
{
  unsigned __int8 *v0;

  return sub_224F2FBDC(*v0);
}

uint64_t sub_224F2FCE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224F35DC4(a1, a2);
  *a3 = result;
  return result;
}

void sub_224F2FD04(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_224F2FD10()
{
  sub_224F325EC();
  return sub_224F685B8();
}

uint64_t sub_224F2FD38()
{
  sub_224F325EC();
  return sub_224F685C4();
}

uint64_t Extension.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  char v16;

  v3 = v1;
  sub_224F32630(0, &qword_2557E3E00, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F325EC();
  sub_224F68594();
  *(_QWORD *)&v14 = *v3;
  v16 = 0;
  sub_224DDEA0C(0, &qword_2557E0538, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_224F3268C((unint64_t *)&qword_2557E0778, &qword_2557E0780, (uint64_t)&protocol conformance descriptor for Extension, MEMORY[0x24BEE12A0]);
  sub_224F68330();
  if (!v2)
  {
    v10 = type metadata accessor for Extension();
    LOBYTE(v14) = 1;
    sub_224F675D4();
    sub_224DDACD4(&qword_2557E1D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_224F68330();
    LOBYTE(v14) = 2;
    sub_224F68300();
    LOBYTE(v14) = 3;
    sub_224F68318();
    LOBYTE(v14) = 4;
    sub_224F68300();
    LOBYTE(v14) = 5;
    type metadata accessor for Coding();
    sub_224DDACD4(&qword_2557E01F0, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t)&protocol conformance descriptor for Coding);
    sub_224F68330();
    v11 = (char *)v3 + *(int *)(v10 + 40);
    v12 = *((_QWORD *)v11 + 2);
    v14 = *(_OWORD *)v11;
    v15 = v12;
    v16 = 6;
    sub_224DFAEA8();
    sub_224F68330();
    LOBYTE(v14) = 7;
    type metadata accessor for Attachment();
    sub_224DDACD4(&qword_2557E0798, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t)&protocol conformance descriptor for Attachment);
    sub_224F68330();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Extension.hashValue.getter()
{
  _BYTE v1[72];

  sub_224F68510();
  Extension.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

uint64_t Extension.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  char v46;

  v37 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v36 - v5;
  sub_224DDEA0C(0, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding, v3);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v36 - v8;
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], v3);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v36 - v11;
  sub_224F32630(0, &qword_2557E3E10, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v38 = v13;
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v36 - v15;
  v40 = type metadata accessor for Extension();
  MEMORY[0x24BDAC7A8](v40);
  v41 = (uint64_t *)((char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F325EC();
  v39 = v16;
  v18 = v43;
  sub_224F6857C();
  if (v18)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  v19 = (uint64_t)v12;
  v43 = v6;
  sub_224DDEA0C(0, &qword_2557E0538, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  v46 = 0;
  sub_224F3268C((unint64_t *)&qword_2557E0540, &qword_2557E0548, (uint64_t)&protocol conformance descriptor for Extension, MEMORY[0x24BEE12D0]);
  sub_224F68294();
  v20 = (uint64_t)v41;
  *v41 = v44;
  sub_224F675D4();
  LOBYTE(v44) = 1;
  sub_224DDACD4(&qword_2557E1D78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  sub_224F68294();
  v21 = (uint64_t)v42;
  v22 = (int *)v40;
  sub_224DFAC88(v19, v20 + *(int *)(v40 + 20), (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  LOBYTE(v44) = 2;
  v23 = sub_224F68264();
  v24 = (uint64_t *)(v20 + v22[6]);
  *v24 = v23;
  v24[1] = v25;
  LOBYTE(v44) = 3;
  v26 = sub_224F6827C();
  v27 = v20 + v22[7];
  *(_QWORD *)v27 = v26;
  *(_BYTE *)(v27 + 8) = v28 & 1;
  LOBYTE(v44) = 4;
  v29 = sub_224F68264();
  v30 = (uint64_t *)(v20 + v22[8]);
  *v30 = v29;
  v30[1] = v31;
  type metadata accessor for Coding();
  LOBYTE(v44) = 5;
  sub_224DDACD4(&qword_2557E0208, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t)&protocol conformance descriptor for Coding);
  v36 = 0;
  sub_224F68294();
  sub_224DFAC88((uint64_t)v9, v20 + v22[9], &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
  v46 = 6;
  sub_224DE60BC();
  sub_224F68294();
  v32 = v45;
  v33 = v20 + v22[10];
  *(_OWORD *)v33 = v44;
  *(_QWORD *)(v33 + 16) = v32;
  type metadata accessor for Attachment();
  LOBYTE(v44) = 7;
  sub_224DDACD4(&qword_2557E0570, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t)&protocol conformance descriptor for Attachment);
  v34 = (uint64_t)v43;
  sub_224F68294();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v39, v38);
  sub_224DFAC88(v34, v20 + v22[11], &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
  sub_224DDB408(v20, v37, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
  __swift_destroy_boxed_opaque_existential_1(v21);
  return sub_224DDEAA0(v20, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
}

uint64_t sub_224F307DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Extension.init(from:)(a1, a2);
}

uint64_t sub_224F307F0(_QWORD *a1)
{
  return Extension.encode(to:)(a1);
}

uint64_t sub_224F30804()
{
  _BYTE v1[72];

  sub_224F68510();
  Extension.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

uint64_t sub_224F30844()
{
  _BYTE v1[72];

  sub_224F68510();
  Extension.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

Swift::String_optional __swiftcall Extension.raceValueString()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = sub_224F3140C(0xD00000000000003DLL, 0x8000000224F830A0, 0xD00000000000003CLL, (void *)0x8000000224F830E0);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall Extension.stringValueForExtension(with:)(Swift::String with)
{
  uint64_t *v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t isUniquelyReferenced_nonNull_native;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)();
  uint64_t (*v49)(uint64_t);
  char *v50;
  uint64_t (*v51)();
  char *v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  unint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  Swift::String v64;
  Swift::String_optional v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t);
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  unsigned int (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  void (*v97)(void);
  uint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  Swift::String_optional result;
  _QWORD v107[2];
  uint64_t (*v108)(uint64_t, uint64_t, uint64_t);
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t);
  uint64_t *v122;
  uint64_t countAndFlagsBits;
  int *v124;
  void *object;
  unsigned int (*v126)(char *, uint64_t, uint64_t);
  uint64_t v127;
  unint64_t v128;

  object = with._object;
  countAndFlagsBits = with._countAndFlagsBits;
  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v120 = (uint64_t)v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v117 = (uint64_t)v107 - v6;
  v7 = type metadata accessor for Coding();
  v118 = *(_QWORD *)(v7 - 8);
  v119 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v113 = (char *)v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v109 = (char *)v107 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v114 = (char *)v107 - v12;
  v13 = type metadata accessor for Extension();
  v112 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v107 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v110 = (char *)v107 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v111 = (uint64_t)v107 - v22;
  v23 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], v2);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)v107 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)v107 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)v107 - v31;
  v124 = (int *)v13;
  v33 = *(int *)(v13 + 20);
  v122 = v1;
  sub_224DDB4B4((uint64_t)v1 + v33, (uint64_t)v107 - v31, (unint64_t *)&qword_2557E02A8, v23);
  v34 = sub_224F675D4();
  v35 = *(_QWORD *)(v34 - 8);
  v126 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  if (v126(v32, 1, v34) != 1)
  {
    v40 = sub_224F6755C();
    v42 = v41;
    v121 = *(void (**)(char *, uint64_t))(v35 + 8);
    v121(v32, v34);
    if (v40 == countAndFlagsBits && v42 == object)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v44 = sub_224F683CC();
      swift_bridgeObjectRelease();
      if ((v44 & 1) == 0)
        goto LABEL_3;
    }
    v45 = *v122;
    if (!*v122)
    {
      v36 = sub_224F3178C();
      v37 = v59;
      goto LABEL_4;
    }
    v46 = *(_QWORD *)(v45 + 16);
    if (v46)
    {
      v47 = v45 + ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80));
      object = *(void **)(v112 + 72);
      v112 = v45;
      swift_bridgeObjectRetain();
      v48 = type metadata accessor for Extension;
      v49 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
      v122 = (uint64_t *)v47;
      countAndFlagsBits = v46;
      v115 = v16;
      v116 = v19;
      while (1)
      {
        sub_224DDB408(v47, (uint64_t)v19, (uint64_t (*)(_QWORD))v48);
        sub_224DDB4B4((uint64_t)&v19[v124[5]], (uint64_t)v30, (unint64_t *)&qword_2557E02A8, v49);
        if (v126(v30, 1, v34) == 1)
        {
          sub_224DDB50C((uint64_t)v30, (unint64_t *)&qword_2557E02A8, v49);
        }
        else
        {
          v50 = v27;
          v51 = v48;
          v52 = v50;
          v53 = v49;
          v54 = sub_224F6755C();
          v56 = v55;
          v121(v30, v34);
          if (v54 == 1954047348 && v56 == 0xE400000000000000)
          {
            swift_bridgeObjectRelease();
            v27 = v52;
            v16 = v115;
            v19 = v116;
LABEL_26:
            swift_bridgeObjectRelease();
            v62 = (uint64_t)v110;
            sub_224DDEADC((uint64_t)v19, (uint64_t)v110, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
            v63 = v111;
            sub_224DDEADC(v62, v111, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
            v64._countAndFlagsBits = 1954047348;
            v64._object = (void *)0xE400000000000000;
            v65 = Extension.stringValueForExtension(with:)(v64);
            sub_224DDEAA0(v63, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
            if (v65.value._object)
              v66 = v65.value._countAndFlagsBits;
            else
              v66 = 0;
            v111 = v66;
            v61 = (char *)0xE000000000000000;
            if (v65.value._object)
              v61 = (char *)v65.value._object;
LABEL_31:
            v110 = v61;
            v67 = v120;
            v68 = v124;
            v116 = v113 + 8;
            isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
            v69 = 0;
            v60 = (_QWORD *)MEMORY[0x24BEE4AF8];
            v70 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
            v71 = v67;
            while (2)
            {
              v72 = v69 + 1;
              if (__OFADD__(v69, 1))
              {
                __break(1u);
                goto LABEL_86;
              }
              sub_224DDB408((uint64_t)v122 + v69 * (_QWORD)object, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
              sub_224DDB4B4((uint64_t)&v16[v68[5]], (uint64_t)v27, (unint64_t *)&qword_2557E02A8, v70);
              if (v126(v27, 1, v34) == 1)
              {
                sub_224DDB50C((uint64_t)v27, (unint64_t *)&qword_2557E02A8, v70);
LABEL_38:
                v73 = &v16[v68[6]];
                v74 = *((_QWORD *)v73 + 1);
                if (v74 || (v73 = &v16[v68[8]], (v74 = *((_QWORD *)v73 + 1)) != 0))
                {
LABEL_40:
                  v75 = *(_QWORD *)v73;
                  swift_bridgeObjectRetain();
                  sub_224DDEAA0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
                  goto LABEL_41;
                }
                v83 = (uint64_t)&v16[v68[9]];
                v84 = v68;
                v85 = v117;
                sub_224DDB4B4(v83, v117, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
                v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48);
                if (v86(v85, 1, v119) != 1)
                {
                  v93 = v85;
                  v94 = (uint64_t)v114;
                  goto LABEL_61;
                }
                v108 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v86;
                sub_224DDB50C(v85, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
                v73 = &v16[v84[10]];
                v74 = *((_QWORD *)v73 + 1);
                v68 = v84;
                if (v74 != 1)
                {
                  if (v74)
                    goto LABEL_40;
                  v87 = *((_QWORD *)v73 + 2);
                  if (!v87)
                  {
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v118 + 56))(v71, 1, 1, v119);
                    v70 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
                    goto LABEL_68;
                  }
                  v88 = *(_QWORD *)(v87 + 16);
                  v107[1] = *((_QWORD *)v73 + 2);
                  if (v88)
                  {
                    v89 = v118;
                    v90 = v87
                        + ((*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80));
                    swift_bridgeObjectRetain();
                    v91 = *(_QWORD *)(v89 + 72);
                    v92 = (uint64_t)v113;
                    while (1)
                    {
                      sub_224DDB408(v90, v92, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
                      if (*(_QWORD *)&v116[*(int *)(v119 + 24)])
                        break;
                      sub_224DDEAA0(v92, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
                      v90 += v91;
                      if (!--v88)
                        goto LABEL_65;
                    }
                    v96 = v119;
                    v98 = v120;
                    sub_224DDEADC(v92, v120, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
                    v97 = *(void (**)(void))(v118 + 56);
                    v71 = v98;
                  }
                  else
                  {
                    swift_bridgeObjectRetain();
LABEL_65:
                    v96 = v119;
                    v97 = *(void (**)(void))(v118 + 56);
                    v71 = v120;
                  }
                  v97();
                  v70 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
                  swift_bridgeObjectRelease();
                  v99 = v108(v71, 1, v96);
                  v68 = v124;
                  if (v99 == 1)
                  {
LABEL_68:
                    sub_224DDB50C(v71, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
                    isUniquelyReferenced_nonNull_native = sub_224DDEAA0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
                    goto LABEL_34;
                  }
                  v93 = v71;
                  v94 = (uint64_t)v109;
LABEL_61:
                  sub_224DDEADC(v93, v94, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
                  v95 = (uint64_t *)(v94 + *(int *)(v119 + 24));
                  v75 = *v95;
                  v74 = v95[1];
                  swift_bridgeObjectRetain();
                  sub_224DDEAA0(v94, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
                  isUniquelyReferenced_nonNull_native = sub_224DDEAA0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
                  if (v74)
                  {
LABEL_41:
                    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    {
                      isUniquelyReferenced_nonNull_native = (uint64_t)sub_224E56678(0, v60[2] + 1, 1, v60);
                      v60 = (_QWORD *)isUniquelyReferenced_nonNull_native;
                    }
                    v77 = v60[2];
                    v76 = v60[3];
                    if (v77 >= v76 >> 1)
                    {
                      isUniquelyReferenced_nonNull_native = (uint64_t)sub_224E56678((_QWORD *)(v76 > 1), v77 + 1, 1, v60);
                      v60 = (_QWORD *)isUniquelyReferenced_nonNull_native;
                    }
                    v60[2] = v77 + 1;
                    v78 = &v60[2 * v77];
                    v78[4] = v75;
                    v78[5] = v74;
                    v71 = v120;
                  }
                  v68 = v124;
                  v70 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
LABEL_34:
                  v69 = v72;
                  if (v72 == countAndFlagsBits)
                  {
                    swift_bridgeObjectRelease();
                    v37 = (unint64_t)v110;
                    v36 = v111;
                    goto LABEL_71;
                  }
                  continue;
                }
              }
              else
              {
                v79 = sub_224F6755C();
                v81 = v80;
                v121(v27, v34);
                if (v79 == 1954047348 && v81 == 0xE400000000000000)
                {
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v82 = sub_224F683CC();
                  swift_bridgeObjectRelease();
                  if ((v82 & 1) == 0)
                    goto LABEL_38;
                }
              }
              break;
            }
            isUniquelyReferenced_nonNull_native = sub_224DDEAA0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
            v70 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
            goto LABEL_34;
          }
          v57 = sub_224F683CC();
          swift_bridgeObjectRelease();
          v49 = v53;
          v58 = v52;
          v16 = v115;
          v19 = v116;
          v48 = v51;
          v27 = v58;
          if ((v57 & 1) != 0)
            goto LABEL_26;
        }
        sub_224DDEAA0((uint64_t)v19, (uint64_t (*)(_QWORD))v48);
        v47 += (uint64_t)object;
        if (!--v46)
        {
          swift_bridgeObjectRelease();
          v111 = 0;
          v61 = (char *)0xE000000000000000;
          goto LABEL_31;
        }
      }
    }
    v36 = 0;
    v37 = 0xE000000000000000;
    v60 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_71:
    v127 = (uint64_t)v60;
    sub_224E68104();
    sub_224DDACD4((unint64_t *)&qword_2557E1D88, (uint64_t (*)(uint64_t))sub_224E68104, MEMORY[0x24BEE12B0]);
    v100 = sub_224F67B44();
    v102 = v101;
    swift_bridgeObjectRelease();
    v103 = HIBYTE(v37) & 0xF;
    if ((v37 & 0x2000000000000000) == 0)
      v103 = v36 & 0xFFFFFFFFFFFFLL;
    if (v103)
    {
      v104 = HIBYTE(v102) & 0xF;
      if ((v102 & 0x2000000000000000) == 0)
        v104 = v100 & 0xFFFFFFFFFFFFLL;
      if (!v104)
      {
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      v127 = v36;
      v128 = v37;
      sub_224F67C94();
    }
    else
    {
      swift_bridgeObjectRelease();
      v105 = HIBYTE(v102) & 0xF;
      if ((v102 & 0x2000000000000000) == 0)
        v105 = v100 & 0xFFFFFFFFFFFFLL;
      if (!v105)
      {
        swift_bridgeObjectRelease();
        goto LABEL_3;
      }
      v127 = 40;
      v128 = 0xE100000000000000;
    }
    sub_224F67C94();
    swift_bridgeObjectRelease();
    sub_224F67C94();
    v36 = v127;
    v37 = v128;
    goto LABEL_4;
  }
  sub_224DDB50C((uint64_t)v32, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
LABEL_3:
  v36 = 0;
  v37 = 0;
LABEL_4:
  isUniquelyReferenced_nonNull_native = v36;
  v39 = (void *)v37;
LABEL_86:
  result.value._object = v39;
  result.value._countAndFlagsBits = isUniquelyReferenced_nonNull_native;
  return result;
}

Swift::String_optional __swiftcall Extension.ethnicityValueString()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = sub_224F3140C(0xD000000000000042, 0x8000000224F83120, 0xD000000000000041, (void *)0x8000000224F83170);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall Extension.birthSexValueString()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = sub_224F3140C(0xD000000000000041, 0x8000000224F831C0, 0xD000000000000040, (void *)0x8000000224F83210);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

uint64_t sub_224F3140C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result;
  Swift::String_optional v7;
  Swift::String v8;

  v7 = Extension.stringValueForExtension(with:)(*(Swift::String *)&a1);
  result = v7.value._countAndFlagsBits;
  if (!v7.value._object)
  {
    v8._countAndFlagsBits = a3;
    v8._object = a4;
    return Extension.stringValueForExtension(with:)(v8).value._countAndFlagsBits;
  }
  return result;
}

uint64_t Extension.extensions(with:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  if (!*v2)
    return MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v5 = swift_bridgeObjectRetain();
  v6 = sub_224EF9EF0(v5, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t Extension.firstExtension(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v30 = a2;
  v32 = a1;
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v26 - v6;
  v8 = type metadata accessor for Extension();
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v3;
  if (!*v3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a3, 1, 1, v8);
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a3, 1, 1, v8);
  v27 = v9;
  v28 = a3;
  v14 = v12 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v15 = *(_QWORD *)(v9 + 72);
  v26[1] = v12;
  swift_bridgeObjectRetain();
  v16 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v29 = v8;
  v31 = v11;
  while (1)
  {
    sub_224DDB408(v14, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
    sub_224DDB4B4((uint64_t)&v11[*(int *)(v8 + 20)], (uint64_t)v7, (unint64_t *)&qword_2557E02A8, v16);
    v17 = sub_224F675D4();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v7, 1, v17) == 1)
    {
      sub_224DDB50C((uint64_t)v7, (unint64_t *)&qword_2557E02A8, v16);
      v11 = v31;
      goto LABEL_5;
    }
    v19 = v15;
    v20 = sub_224F6755C();
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v17);
    if (v20 == v32 && v22 == v30)
      break;
    v23 = sub_224F683CC();
    swift_bridgeObjectRelease();
    v8 = v29;
    v15 = v19;
    v11 = v31;
    if ((v23 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
LABEL_5:
    sub_224DDEAA0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
    v14 += v15;
    --v13;
    v16 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
    if (!v13)
    {
      swift_bridgeObjectRelease();
      v9 = v27;
      a3 = v28;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a3, 1, 1, v8);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v29;
  v11 = v31;
LABEL_15:
  v25 = v28;
  sub_224DDEADC((uint64_t)v11, v28, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v25, 0, 1, v8);
}

uint64_t sub_224F3178C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t *v9;
  uint64_t countAndFlagsBits;
  int *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];

  sub_224DDEA0C(0, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v17 - v2;
  v4 = type metadata accessor for Coding();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for Extension();
  v9 = (uint64_t *)(v0 + v8[6]);
  if (v9[1])
  {
    countAndFlagsBits = *v9;
  }
  else
  {
    v11 = v8;
    v12 = (uint64_t *)(v0 + v8[8]);
    if (v12[1])
    {
      countAndFlagsBits = *v12;
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_224DDB4B4(v0 + v8[9], (uint64_t)v3, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
      {
        sub_224DDB50C((uint64_t)v3, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
        v13 = (_QWORD *)(v0 + v11[10]);
        v14 = v13[1];
        if (v14 == 1)
        {
          countAndFlagsBits = 0;
        }
        else
        {
          v15 = v13[2];
          v17[1] = *v13;
          v17[2] = v14;
          v17[3] = v15;
          countAndFlagsBits = CodeableConcept.preferredDisplayString()().value._countAndFlagsBits;
        }
      }
      else
      {
        sub_224DDEADC((uint64_t)v3, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
        countAndFlagsBits = *(_QWORD *)&v7[*(int *)(v4 + 24)];
        swift_bridgeObjectRetain();
        sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
      }
    }
  }
  swift_bridgeObjectRetain();
  return countAndFlagsBits;
}

BOOL _s23HealthRecordsExtraction9ExtensionV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v53)(uint64_t);
  uint64_t (*v54)(uint64_t);
  unint64_t *v55;
  unint64_t *v56;
  uint64_t (*v57)();
  uint64_t v58;
  _BOOL8 result;
  char *v60;
  uint64_t (*v61)(uint64_t);
  char v62;
  void (*v63)(char *, uint64_t);
  int *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  double *v77;
  char v78;
  double *v79;
  int v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int (*v91)(uint64_t, uint64_t, uint64_t);
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  int *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD v132[3];
  _QWORD v133[4];

  v4 = type metadata accessor for Attachment();
  v117 = *(_QWORD *)(v4 - 8);
  v118 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v114 = (uint64_t)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, &qword_2557E3EE8, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
  v116 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v111 - v7;
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v115 = (uint64_t)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v128 = (char *)&v111 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v119 = (uint64_t)&v111 - v15;
  v16 = type metadata accessor for Coding();
  v122 = *(_QWORD *)(v16 - 8);
  v123 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v120 = (uint64_t)&v111 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, &qword_2557E3EF0, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
  v121 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v124 = (uint64_t)&v111 - v19;
  sub_224DDEA0C(0, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding, v9);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v127 = (char *)&v111 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v129 = (uint64_t)&v111 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v126 = (char *)&v111 - v25;
  v26 = sub_224F675D4();
  v27 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v130 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v125 = (char *)&v111 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, (unint64_t *)&qword_2557E02B0, (unint64_t *)&qword_2557E02A8, v27);
  v30 = v29;
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v111 - v31;
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, v27, v9);
  v34 = MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)&v111 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x24BDAC7A8](v34);
  v39 = (char *)&v111 - v38;
  MEMORY[0x24BDAC7A8](v37);
  v41 = (char *)&v111 - v40;
  v131 = a1;
  v42 = a2;
  v43 = *a2;
  if (*a1)
  {
    if (!v43)
      return 0;
    v113 = v8;
    swift_bridgeObjectRetain();
    v44 = swift_bridgeObjectRetain();
    v45 = sub_224DD68A0(v44, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v45 & 1) == 0)
      return 0;
  }
  else
  {
    v113 = v8;
    if (v43)
      return 0;
  }
  v46 = type metadata accessor for Extension();
  v47 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
  sub_224DDB4B4((uint64_t)v131 + *(int *)(v46 + 20), (uint64_t)v41, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v112 = (int *)v46;
  v48 = *(int *)(v46 + 20);
  v49 = v42;
  sub_224DDB4B4((uint64_t)v42 + v48, (uint64_t)v39, (unint64_t *)&qword_2557E02A8, v47);
  v50 = (uint64_t)&v32[*(int *)(v30 + 48)];
  sub_224DDB4B4((uint64_t)v41, (uint64_t)v32, (unint64_t *)&qword_2557E02A8, v47);
  sub_224DDB4B4((uint64_t)v39, v50, (unint64_t *)&qword_2557E02A8, v47);
  v51 = v130;
  v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48);
  if (v52((uint64_t)v32, 1, v26) == 1)
  {
    v53 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
    sub_224DDB50C((uint64_t)v39, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    sub_224DDB50C((uint64_t)v41, (unint64_t *)&qword_2557E02A8, v53);
    if (v52(v50, 1, v26) == 1)
    {
      sub_224DDB50C((uint64_t)v32, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      goto LABEL_16;
    }
LABEL_11:
    v55 = (unint64_t *)&qword_2557E02B0;
    v56 = (unint64_t *)&qword_2557E02A8;
    v57 = MEMORY[0x24BDCDAC0];
    v58 = (uint64_t)v32;
    goto LABEL_12;
  }
  sub_224DDB4B4((uint64_t)v32, (uint64_t)v36, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v52(v50, 1, v26) == 1)
  {
    v54 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
    sub_224DDB50C((uint64_t)v39, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    sub_224DDB50C((uint64_t)v41, (unint64_t *)&qword_2557E02A8, v54);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v36, v26);
    goto LABEL_11;
  }
  v60 = v125;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v125, v50, v26);
  v61 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
  sub_224DDACD4((unint64_t *)&qword_2557E02B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
  v62 = sub_224F67B50();
  v63 = *(void (**)(char *, uint64_t))(v51 + 8);
  v63(v60, v26);
  sub_224DDB50C((uint64_t)v39, (unint64_t *)&qword_2557E02A8, v61);
  sub_224DDB50C((uint64_t)v41, (unint64_t *)&qword_2557E02A8, v61);
  v63(v36, v26);
  sub_224DDB50C((uint64_t)v32, (unint64_t *)&qword_2557E02A8, v61);
  if ((v62 & 1) == 0)
    return 0;
LABEL_16:
  v64 = v112;
  v65 = v112[6];
  v66 = (_QWORD *)((char *)v131 + v65);
  v67 = *(_QWORD *)((char *)v131 + v65 + 8);
  v68 = (_QWORD *)((char *)v49 + v65);
  v69 = v68[1];
  if (v67)
  {
    v70 = v113;
    v71 = (uint64_t)v127;
    v72 = (uint64_t)v128;
    v73 = (uint64_t)v126;
    v74 = v129;
    if (!v69)
      return 0;
    if (*v66 != *v68 || v67 != v69)
    {
      v75 = sub_224F683CC();
      result = 0;
      if ((v75 & 1) == 0)
        return result;
    }
  }
  else
  {
    v70 = v113;
    v71 = (uint64_t)v127;
    v72 = (uint64_t)v128;
    v73 = (uint64_t)v126;
    v74 = v129;
    if (v69)
      return 0;
  }
  v76 = v64[7];
  v77 = (double *)((char *)v131 + v76);
  v78 = *((_BYTE *)v131 + v76 + 8);
  v79 = (double *)((char *)v49 + v76);
  v80 = *((unsigned __int8 *)v49 + v76 + 8);
  if ((v78 & 1) != 0)
  {
    if (!v80)
      return 0;
  }
  else
  {
    if (*v77 != *v79)
      LOBYTE(v80) = 1;
    if ((v80 & 1) != 0)
      return 0;
  }
  v81 = v64[8];
  v82 = (_QWORD *)((char *)v131 + v81);
  v83 = *(_QWORD *)((char *)v131 + v81 + 8);
  v84 = (_QWORD *)((char *)v49 + v81);
  v85 = v84[1];
  if (!v83)
  {
    if (v85)
      return 0;
LABEL_36:
    v113 = v70;
    sub_224DDB4B4((uint64_t)v131 + v64[9], v73, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
    sub_224DDB4B4((uint64_t)v49 + v64[9], v74, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
    v87 = v124;
    v88 = v124 + *(int *)(v121 + 48);
    sub_224DDB4B4(v73, v124, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
    v89 = v87;
    sub_224DDB4B4(v74, v88, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
    v90 = v123;
    v91 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
    if (v91(v89, 1, v123) == 1)
    {
      sub_224DDB50C(v74, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
      v89 = v124;
      sub_224DDB50C(v73, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
      if (v91(v88, 1, v90) == 1)
      {
        sub_224DDB50C(v89, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
        goto LABEL_43;
      }
    }
    else
    {
      sub_224DDB4B4(v89, v71, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
      if (v91(v88, 1, v90) != 1)
      {
        v92 = v120;
        sub_224DDEADC(v88, v120, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
        v93 = static Coding.== infix(_:_:)(v71, v92);
        sub_224DDEAA0(v92, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
        sub_224DDB50C(v129, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
        sub_224DDB50C(v73, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
        sub_224DDEAA0(v71, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
        sub_224DDB50C(v89, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
        if ((v93 & 1) == 0)
          return 0;
LABEL_43:
        v94 = v64[10];
        v96 = *(_QWORD *)((char *)v131 + v94);
        v95 = *(_QWORD *)((char *)v131 + v94 + 8);
        v97 = *(_QWORD *)((char *)v131 + v94 + 16);
        v98 = (_QWORD *)((char *)v49 + v94);
        v100 = *v98;
        v99 = v98[1];
        v101 = v98[2];
        if (v95 == 1)
        {
          v102 = (uint64_t)v113;
          if (v99 == 1)
          {
LABEL_50:
            v104 = v119;
            sub_224DDB4B4((uint64_t)v131 + v64[11], v119, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            sub_224DDB4B4((uint64_t)v49 + v64[11], v72, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            v105 = v102 + *(int *)(v116 + 48);
            sub_224DDB4B4(v104, v102, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            sub_224DDB4B4(v72, v105, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            v106 = v118;
            v107 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
            if (v107(v102, 1, v118) == 1)
            {
              sub_224DDB50C(v72, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
              sub_224DDB50C(v104, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
              if (v107(v105, 1, v106) == 1)
              {
                sub_224DDB50C(v102, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
                return 1;
              }
              goto LABEL_55;
            }
            v108 = v115;
            sub_224DDB4B4(v102, v115, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            if (v107(v105, 1, v106) == 1)
            {
              sub_224DDB50C(v72, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
              sub_224DDB50C(v119, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
              sub_224DDEAA0(v108, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
LABEL_55:
              v55 = &qword_2557E3EE8;
              v56 = &qword_2557E0310;
              v57 = type metadata accessor for Attachment;
              v58 = v102;
              goto LABEL_12;
            }
            v109 = v114;
            sub_224DDEADC(v105, v114, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
            v110 = static Attachment.== infix(_:_:)(v108, v109);
            sub_224DDEAA0(v109, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
            sub_224DDB50C(v72, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            sub_224DDB50C(v119, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            sub_224DDEAA0(v108, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
            sub_224DDB50C(v102, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            return (v110 & 1) != 0;
          }
        }
        else
        {
          v133[0] = v96;
          v133[1] = v95;
          v133[2] = v97;
          v102 = (uint64_t)v113;
          if (v99 != 1)
          {
            v132[0] = v100;
            v132[1] = v99;
            v132[2] = v101;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            v103 = static CodeableConcept.== infix(_:_:)(v133, v132);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_224DDB480(v96, v95);
            if ((v103 & 1) == 0)
              return 0;
            goto LABEL_50;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        sub_224DDB44C(v100, v99);
        sub_224DDB480(v96, v95);
        sub_224DDB480(v100, v99);
        return 0;
      }
      sub_224DDB50C(v129, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
      sub_224DDB50C(v73, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
      sub_224DDEAA0(v71, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
    }
    v55 = &qword_2557E3EF0;
    v56 = &qword_2557E1438;
    v57 = type metadata accessor for Coding;
    v58 = v89;
LABEL_12:
    sub_224DDEA64(v58, v55, v56, (uint64_t (*)(uint64_t))v57);
    return 0;
  }
  if (!v85)
    return 0;
  if (*v82 == *v84 && v83 == v85)
    goto LABEL_36;
  v86 = sub_224F683CC();
  result = 0;
  if ((v86 & 1) != 0)
    goto LABEL_36;
  return result;
}

unint64_t sub_224F325EC()
{
  unint64_t result;

  result = qword_2557E3E08;
  if (!qword_2557E3E08)
  {
    result = MEMORY[0x22768ED24](&unk_224F7558C, &type metadata for Extension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3E08);
  }
  return result;
}

void sub_224F32630(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224F325EC();
    v7 = a3(a1, &type metadata for Extension.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_224F3268C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_224DDEA0C(255, &qword_2557E0538, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v10 = v9;
    v11 = sub_224DDACD4(a2, (uint64_t (*)(uint64_t))type metadata accessor for Extension, a3);
    result = MEMORY[0x22768ED24](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_224F32724(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E0548, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t)&protocol conformance descriptor for Extension);
  a1[2] = sub_224DDACD4(&qword_2557E0780, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t)&protocol conformance descriptor for Extension);
  result = sub_224DDACD4(&qword_2557E3E18, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t)&protocol conformance descriptor for Extension);
  a1[3] = result;
  return result;
}

uint64_t sub_224F3279C()
{
  return sub_224DDACD4(&qword_2557E3E20, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t)&protocol conformance descriptor for Extension);
}

uint64_t *initializeBufferWithCopyOfBuffer for Extension(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, void *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, int *);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, _QWORD, uint64_t, int *);
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(_BYTE *, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  void (*v94)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  void (*v99)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v101;
  uint64_t v102;
  unsigned int (*v103)(char *, uint64_t, void *);
  uint64_t v104;
  void *__dst;
  _BYTE *__dsta;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_224F675D4();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, void *))(v12 + 48);
    swift_bridgeObjectRetain();
    v103 = v13;
    __dst = (void *)v11;
    v102 = v12;
    if (v13(v10, 1, (void *)v11))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v15 = a3[6];
    v16 = a3[7];
    v17 = (uint64_t *)((char *)v7 + v15);
    v18 = (uint64_t *)((char *)a2 + v15);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = (char *)v7 + v16;
    v21 = (char *)a2 + v16;
    v20[8] = v21[8];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v22 = a3[8];
    v23 = a3[9];
    v24 = (uint64_t *)((char *)v7 + v22);
    v25 = (uint64_t *)((char *)a2 + v22);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = (char *)v7 + v23;
    v28 = (char *)a2 + v23;
    v29 = (int *)type metadata accessor for Coding();
    v30 = *((_QWORD *)v29 - 1);
    v31 = *(unsigned int (**)(char *, uint64_t, int *))(v30 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v31(v28, 1, v29))
    {
      sub_224DDEA0C(0, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      if (v103(v28, 1, __dst))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, void *))(v102 + 16))(v27, v28, __dst);
        (*(void (**)(char *, _QWORD, uint64_t, void *))(v102 + 56))(v27, 0, 1, __dst);
      }
      v34 = v29[5];
      v35 = &v27[v34];
      v36 = &v28[v34];
      v37 = *((_QWORD *)v36 + 1);
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *((_QWORD *)v35 + 1) = v37;
      v38 = v29[6];
      v39 = &v27[v38];
      v40 = &v28[v38];
      v41 = *((_QWORD *)v40 + 1);
      *(_QWORD *)v39 = *(_QWORD *)v40;
      *((_QWORD *)v39 + 1) = v41;
      v42 = v29[7];
      v43 = &v27[v42];
      v44 = &v28[v42];
      v45 = *((_QWORD *)v44 + 1);
      *(_QWORD *)v43 = *(_QWORD *)v44;
      *((_QWORD *)v43 + 1) = v45;
      v46 = *(void (**)(char *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v46(v27, 0, 1, v29);
    }
    v47 = a3[10];
    v48 = (char *)v7 + v47;
    v49 = (char *)a2 + v47;
    v50 = *((_QWORD *)v49 + 1);
    if (v50 == 1)
    {
      *(_OWORD *)v48 = *(_OWORD *)v49;
      *((_QWORD *)v48 + 2) = *((_QWORD *)v49 + 2);
    }
    else
    {
      *(_QWORD *)v48 = *(_QWORD *)v49;
      *((_QWORD *)v48 + 1) = v50;
      *((_QWORD *)v48 + 2) = *((_QWORD *)v49 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v51 = a3[11];
    v52 = (uint64_t *)((char *)v7 + v51);
    v53 = (uint64_t *)((char *)a2 + v51);
    v54 = (int *)type metadata accessor for Attachment();
    v55 = *((_QWORD *)v54 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v55 + 48))(v53, 1, v54))
    {
      sub_224DDEA0C(0, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      v101 = v55;
      v57 = v53[1];
      *v52 = *v53;
      v52[1] = v57;
      v58 = v53[3];
      v52[2] = v53[2];
      v52[3] = v58;
      v59 = v54[6];
      v60 = (char *)v52 + v59;
      v61 = (char *)v53 + v59;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v103(v61, 1, __dst))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, void *))(v102 + 16))(v60, v61, __dst);
        (*(void (**)(char *, _QWORD, uint64_t, void *))(v102 + 56))(v60, 0, 1, __dst);
      }
      v63 = v54[7];
      v64 = (char *)v52 + v63;
      v65 = (char *)v53 + v63;
      *(_DWORD *)v64 = *(_DWORD *)v65;
      v64[4] = v65[4];
      v66 = v54[8];
      v67 = (_QWORD *)((char *)v52 + v66);
      v68 = (_QWORD *)((char *)v53 + v66);
      v69 = v68[1];
      *v67 = *v68;
      v67[1] = v69;
      v70 = v54[9];
      v71 = (_QWORD *)((char *)v52 + v70);
      v72 = (_QWORD *)((char *)v53 + v70);
      v73 = v72[1];
      *v71 = *v72;
      v71[1] = v73;
      v74 = v54[10];
      __dsta = (char *)v52 + v74;
      v75 = (char *)v53 + v74;
      v76 = type metadata accessor for FHIRDateTime();
      v77 = *(_QWORD *)(v76 - 8);
      v78 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v77 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v78(v75, 1, v76))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dsta, v75, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
        v80 = v101;
      }
      else
      {
        v104 = v77;
        *__dsta = *v75;
        *((_QWORD *)__dsta + 1) = *((_QWORD *)v75 + 1);
        *((_DWORD *)__dsta + 4) = *((_DWORD *)v75 + 4);
        v81 = *((_QWORD *)v75 + 7);
        if (v81 == 1)
        {
          v82 = *(_OWORD *)(v75 + 40);
          *(_OWORD *)(__dsta + 24) = *(_OWORD *)(v75 + 24);
          *(_OWORD *)(__dsta + 40) = v82;
          *((_QWORD *)__dsta + 7) = *((_QWORD *)v75 + 7);
        }
        else
        {
          __dsta[24] = v75[24];
          *(_WORD *)(__dsta + 25) = *(_WORD *)(v75 + 25);
          *(_OWORD *)(__dsta + 28) = *(_OWORD *)(v75 + 28);
          *((_DWORD *)__dsta + 11) = *((_DWORD *)v75 + 11);
          *((_QWORD *)__dsta + 6) = *((_QWORD *)v75 + 6);
          *((_QWORD *)__dsta + 7) = v81;
          swift_bridgeObjectRetain();
        }
        v83 = v76;
        v84 = *(int *)(v76 + 28);
        v85 = &__dsta[v84];
        v86 = &v75[v84];
        v87 = sub_224F67874();
        v88 = *(_QWORD *)(v87 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v88 + 16))(v85, v86, v87);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
        }
        v80 = v101;
        v90 = *(int *)(v83 + 32);
        v91 = &__dsta[v90];
        v92 = &v75[v90];
        v93 = v92[1];
        *v91 = *v92;
        v91[1] = v93;
        v94 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v104 + 56);
        swift_bridgeObjectRetain();
        v94(__dsta, 0, 1, v83);
      }
      v95 = v54[11];
      v96 = (_QWORD *)((char *)v52 + v95);
      v97 = (_QWORD *)((char *)v53 + v95);
      v98 = v97[1];
      *v96 = *v97;
      v96[1] = v98;
      v99 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v80 + 56);
      swift_bridgeObjectRetain();
      v99(v52, 0, 1, v54);
    }
  }
  return v7;
}

uint64_t destroy for Extension(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = sub_224F675D4();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a1 + a2[9];
  v9 = type metadata accessor for Coding();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    if (!v7(v8, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + a2[10] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v10 = a1 + a2[11];
  v11 = type metadata accessor for Attachment();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v10 + *(int *)(v11 + 24);
    if (!v7(v13, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v13, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v10 + *(int *)(v11 + 40);
    v15 = type metadata accessor for FHIRDateTime();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
    {
      if (*(_QWORD *)(v14 + 56) != 1)
        swift_bridgeObjectRelease();
      v16 = v14 + *(int *)(v15 + 28);
      v17 = sub_224F67874();
      v18 = *(_QWORD *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for Extension(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, void *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, int *);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t, int *);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int (*v76)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  void (*v91)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  void (*v96)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  unsigned int (*v101)(char *, uint64_t, void *);
  void *__dst;
  _BYTE *__dsta;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_224F675D4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, void *))(v10 + 48);
  swift_bridgeObjectRetain();
  v101 = v11;
  __dst = (void *)v9;
  v99 = v10;
  if (v11(v8, 1, (void *)v9))
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = (_QWORD *)((char *)a1 + v13);
  v16 = (_QWORD *)((char *)a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = (char *)a1 + v14;
  v19 = (char *)a2 + v14;
  v18[8] = v19[8];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v20 = a3[8];
  v21 = a3[9];
  v22 = (_QWORD *)((char *)a1 + v20);
  v23 = (_QWORD *)((char *)a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (char *)a1 + v21;
  v26 = (char *)a2 + v21;
  v27 = (int *)type metadata accessor for Coding();
  v28 = *((_QWORD *)v27 - 1);
  v29 = *(unsigned int (**)(char *, uint64_t, int *))(v28 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v29(v26, 1, v27))
  {
    sub_224DDEA0C(0, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    if (v101(v26, 1, __dst))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, void *))(v99 + 16))(v25, v26, __dst);
      (*(void (**)(char *, _QWORD, uint64_t, void *))(v99 + 56))(v25, 0, 1, __dst);
    }
    v32 = v27[5];
    v33 = &v25[v32];
    v34 = &v26[v32];
    v35 = *((_QWORD *)v34 + 1);
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = v27[6];
    v37 = &v25[v36];
    v38 = &v26[v36];
    v39 = *((_QWORD *)v38 + 1);
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = v39;
    v40 = v27[7];
    v41 = &v25[v40];
    v42 = &v26[v40];
    v43 = *((_QWORD *)v42 + 1);
    *(_QWORD *)v41 = *(_QWORD *)v42;
    *((_QWORD *)v41 + 1) = v43;
    v44 = *(void (**)(char *, _QWORD, uint64_t, int *))(v28 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v44(v25, 0, 1, v27);
  }
  v45 = a3[10];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = *((_QWORD *)v47 + 1);
  if (v48 == 1)
  {
    *(_OWORD *)v46 = *(_OWORD *)v47;
    *((_QWORD *)v46 + 2) = *((_QWORD *)v47 + 2);
  }
  else
  {
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v48;
    *((_QWORD *)v46 + 2) = *((_QWORD *)v47 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v49 = a3[11];
  v50 = (_QWORD *)((char *)a1 + v49);
  v51 = (_QWORD *)((char *)a2 + v49);
  v52 = (int *)type metadata accessor for Attachment();
  v53 = *((_QWORD *)v52 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v53 + 48))(v51, 1, v52))
  {
    sub_224DDEA0C(0, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    v98 = v53;
    v55 = v51[1];
    *v50 = *v51;
    v50[1] = v55;
    v56 = v51[3];
    v50[2] = v51[2];
    v50[3] = v56;
    v57 = v52[6];
    v58 = (char *)v50 + v57;
    v59 = (char *)v51 + v57;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v101(v59, 1, __dst))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, void *))(v99 + 16))(v58, v59, __dst);
      (*(void (**)(char *, _QWORD, uint64_t, void *))(v99 + 56))(v58, 0, 1, __dst);
    }
    v61 = v52[7];
    v62 = (char *)v50 + v61;
    v63 = (char *)v51 + v61;
    *(_DWORD *)v62 = *(_DWORD *)v63;
    v62[4] = v63[4];
    v64 = v52[8];
    v65 = (_QWORD *)((char *)v50 + v64);
    v66 = (_QWORD *)((char *)v51 + v64);
    v67 = v66[1];
    *v65 = *v66;
    v65[1] = v67;
    v68 = v52[9];
    v69 = (_QWORD *)((char *)v50 + v68);
    v70 = (_QWORD *)((char *)v51 + v68);
    v71 = v70[1];
    *v69 = *v70;
    v69[1] = v71;
    v72 = v52[10];
    __dsta = (char *)v50 + v72;
    v73 = (char *)v51 + v72;
    v74 = type metadata accessor for FHIRDateTime();
    v75 = *(_QWORD *)(v74 - 8);
    v76 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v75 + 48);
    v77 = v73;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v76(v73, 1, v74))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dsta, v73, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    }
    else
    {
      *__dsta = *v73;
      *((_QWORD *)__dsta + 1) = *((_QWORD *)v73 + 1);
      *((_DWORD *)__dsta + 4) = *((_DWORD *)v73 + 4);
      v79 = *((_QWORD *)v73 + 7);
      if (v79 == 1)
      {
        v80 = *(_OWORD *)(v73 + 40);
        *(_OWORD *)(__dsta + 24) = *(_OWORD *)(v73 + 24);
        *(_OWORD *)(__dsta + 40) = v80;
        *((_QWORD *)__dsta + 7) = *((_QWORD *)v73 + 7);
      }
      else
      {
        __dsta[24] = v73[24];
        *(_WORD *)(__dsta + 25) = *(_WORD *)(v73 + 25);
        *(_OWORD *)(__dsta + 28) = *(_OWORD *)(v73 + 28);
        *((_DWORD *)__dsta + 11) = *((_DWORD *)v73 + 11);
        *((_QWORD *)__dsta + 6) = *((_QWORD *)v73 + 6);
        *((_QWORD *)__dsta + 7) = v79;
        swift_bridgeObjectRetain();
      }
      v81 = *(int *)(v74 + 28);
      v82 = &__dsta[v81];
      v100 = v77;
      v83 = &v77[v81];
      v84 = sub_224F67874();
      v85 = *(_QWORD *)(v84 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v85 + 16))(v82, v83, v84);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
      }
      v87 = *(int *)(v74 + 32);
      v88 = &__dsta[v87];
      v89 = &v100[v87];
      v90 = v89[1];
      *v88 = *v89;
      v88[1] = v90;
      v91 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v75 + 56);
      swift_bridgeObjectRetain();
      v91(__dsta, 0, 1, v74);
    }
    v92 = v52[11];
    v93 = (_QWORD *)((char *)v50 + v92);
    v94 = (_QWORD *)((char *)v51 + v92);
    v95 = v94[1];
    *v93 = *v94;
    v93[1] = v95;
    v96 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v98 + 56);
    swift_bridgeObjectRetain();
    v96(v50, 0, 1, v52);
  }
  return a1;
}

_QWORD *assignWithCopy for Extension(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, int *);
  int v31;
  int v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (*v47)(char *, _QWORD, uint64_t, int *);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  int *v68;
  uint64_t v69;
  uint64_t (*v70)(_QWORD *, uint64_t, int *);
  int v71;
  int v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int v82;
  int v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int v87;
  uint64_t v88;
  char *v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int (*v99)(_BYTE *, uint64_t, uint64_t);
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  int v111;
  uint64_t v112;
  char *v113;
  _QWORD *v114;
  uint64_t v115;
  char *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(uint64_t, uint64_t, uint64_t);
  int v124;
  int v125;
  uint64_t (*v126)(uint64_t, uint64_t);
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  void (*v141)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v142;
  char *v143;
  char *v144;
  void (*v145)(_QWORD *, _QWORD, uint64_t, int *);
  __int128 *v146;
  __int128 *v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  char *v159;
  void (*v160)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t (*v167)(void *, uint64_t, uint64_t);
  int v168;
  uint64_t v169;
  size_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  _QWORD *v178;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  void *v186;
  uint64_t (*__src)(char *, uint64_t, uint64_t);
  char *__srca;
  void *__srcb;
  char *__srcc;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_224F675D4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  __src = v11;
  v13 = v11(v8, 1, v9);
  v184 = v10;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *(_QWORD *)v20;
  v19[8] = v20[8];
  *(_QWORD *)v19 = v21;
  v22 = a3[8];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = a3[9];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = (int *)type metadata accessor for Coding();
  v29 = *((_QWORD *)v28 - 1);
  v30 = *(uint64_t (**)(char *, uint64_t, int *))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (v32)
    {
      sub_224DDEAA0((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
      v33 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_12;
    }
    v36 = __src(v26, 1, v9);
    v37 = __src(v27, 1, v9);
    if (v36)
    {
      if (!v37)
      {
        (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v26, v27, v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v184 + 56))(v26, 0, 1, v9);
LABEL_24:
        v49 = v28[5];
        v50 = &v26[v49];
        v51 = &v27[v49];
        *(_QWORD *)v50 = *(_QWORD *)v51;
        *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v52 = v28[6];
        v53 = &v26[v52];
        v54 = &v27[v52];
        *(_QWORD *)v53 = *(_QWORD *)v54;
        *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v55 = v28[7];
        v56 = &v26[v55];
        v57 = &v27[v55];
        *(_QWORD *)v56 = *(_QWORD *)v57;
        *((_QWORD *)v56 + 1) = *((_QWORD *)v57 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    else
    {
      if (!v37)
      {
        (*(void (**)(char *, char *, uint64_t))(v184 + 24))(v26, v27, v9);
        goto LABEL_24;
      }
      (*(void (**)(char *, uint64_t))(v184 + 8))(v26, v9);
    }
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_24;
  }
  if (v32)
  {
    v33 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_12:
    sub_224DDEA0C(0, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding, v33);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  if (__src(v27, 1, v9))
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v26, v27, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v184 + 56))(v26, 0, 1, v9);
  }
  v38 = v28[5];
  v39 = &v26[v38];
  v40 = &v27[v38];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *((_QWORD *)v39 + 1) = *((_QWORD *)v40 + 1);
  v41 = v28[6];
  v42 = &v26[v41];
  v43 = &v27[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
  v44 = v28[7];
  v45 = &v26[v44];
  v46 = &v27[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
  v47 = *(void (**)(char *, _QWORD, uint64_t, int *))(v29 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v47(v26, 0, 1, v28);
LABEL_25:
  v58 = a3[10];
  v59 = (uint64_t)a1 + v58;
  v60 = (char *)a2 + v58;
  v61 = *(_QWORD *)((char *)a1 + v58 + 8);
  v62 = *(_QWORD *)((char *)a2 + v58 + 8);
  if (v61 == 1)
  {
    if (v62 == 1)
    {
      v63 = *(_OWORD *)v60;
      *(_QWORD *)(v59 + 16) = *((_QWORD *)v60 + 2);
      *(_OWORD *)v59 = v63;
    }
    else
    {
      *(_QWORD *)v59 = *(_QWORD *)v60;
      *(_QWORD *)(v59 + 8) = *((_QWORD *)v60 + 1);
      *(_QWORD *)(v59 + 16) = *((_QWORD *)v60 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v62 == 1)
  {
    sub_224E2C9C0(v59);
    v64 = *((_QWORD *)v60 + 2);
    *(_OWORD *)v59 = *(_OWORD *)v60;
    *(_QWORD *)(v59 + 16) = v64;
  }
  else
  {
    *(_QWORD *)v59 = *(_QWORD *)v60;
    *(_QWORD *)(v59 + 8) = *((_QWORD *)v60 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v59 + 16) = *((_QWORD *)v60 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v65 = a3[11];
  v66 = (char *)a1 + v65;
  v67 = (_QWORD *)((char *)a2 + v65);
  v68 = (int *)type metadata accessor for Attachment();
  v69 = *((_QWORD *)v68 - 1);
  v70 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v69 + 48);
  v71 = v70(v66, 1, v68);
  v72 = v70(v67, 1, v68);
  if (!v71)
  {
    if (v72)
    {
      sub_224DDEAA0((uint64_t)v66, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
      v73 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_37;
    }
    *(_QWORD *)v66 = *v67;
    *((_QWORD *)v66 + 1) = v67[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v66 + 2) = v67[2];
    *((_QWORD *)v66 + 3) = v67[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v79 = v68[6];
    v80 = &v66[v79];
    v81 = (char *)v67 + v79;
    v82 = __src(&v66[v79], 1, v9);
    v83 = __src(v81, 1, v9);
    if (v82)
    {
      if (!v83)
      {
        (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v80, v81, v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v184 + 56))(v80, 0, 1, v9);
        goto LABEL_51;
      }
    }
    else
    {
      if (!v83)
      {
        (*(void (**)(char *, char *, uint64_t))(v184 + 24))(v80, v81, v9);
LABEL_51:
        v108 = v68[7];
        v109 = &v66[v108];
        v110 = (char *)v67 + v108;
        v111 = *(_DWORD *)v110;
        v109[4] = v110[4];
        *(_DWORD *)v109 = v111;
        v112 = v68[8];
        v113 = &v66[v112];
        v114 = (_QWORD *)((char *)v67 + v112);
        *(_QWORD *)v113 = *v114;
        *((_QWORD *)v113 + 1) = v114[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v115 = v68[9];
        v116 = &v66[v115];
        v117 = (_QWORD *)((char *)v67 + v115);
        *(_QWORD *)v116 = *v117;
        *((_QWORD *)v116 + 1) = v117[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v118 = v68[10];
        v119 = (uint64_t)&v66[v118];
        v120 = (char *)v67 + v118;
        v121 = type metadata accessor for FHIRDateTime();
        v122 = *(_QWORD *)(v121 - 8);
        v123 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
        v124 = v123(v119, 1, v121);
        v125 = v123((uint64_t)v120, 1, v121);
        if (v124)
        {
          if (!v125)
          {
            *(_BYTE *)v119 = *v120;
            v135 = *((_QWORD *)v120 + 1);
            *(_DWORD *)(v119 + 16) = *((_DWORD *)v120 + 4);
            *(_QWORD *)(v119 + 8) = v135;
            if (*((_QWORD *)v120 + 7) == 1)
            {
              v136 = *(_OWORD *)(v120 + 24);
              v137 = *(_OWORD *)(v120 + 40);
              *(_QWORD *)(v119 + 56) = *((_QWORD *)v120 + 7);
              *(_OWORD *)(v119 + 24) = v136;
              *(_OWORD *)(v119 + 40) = v137;
            }
            else
            {
              *(_BYTE *)(v119 + 24) = v120[24];
              *(_BYTE *)(v119 + 25) = v120[25];
              *(_BYTE *)(v119 + 26) = v120[26];
              v151 = *(_OWORD *)(v120 + 28);
              *(_DWORD *)(v119 + 44) = *((_DWORD *)v120 + 11);
              *(_OWORD *)(v119 + 28) = v151;
              *(_QWORD *)(v119 + 48) = *((_QWORD *)v120 + 6);
              *(_QWORD *)(v119 + 56) = *((_QWORD *)v120 + 7);
              swift_bridgeObjectRetain();
            }
            v182 = v121;
            v152 = *(int *)(v121 + 28);
            __srcb = (void *)(v119 + v152);
            v153 = &v120[v152];
            v154 = sub_224F67874();
            v155 = *(_QWORD *)(v154 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v153, 1, v154))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__srcb, v153, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v155 + 16))(__srcb, v153, v154);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v155 + 56))(__srcb, 0, 1, v154);
            }
            v157 = *(int *)(v182 + 32);
            v158 = (_QWORD *)(v119 + v157);
            v159 = &v120[v157];
            *v158 = *(_QWORD *)v159;
            v158[1] = *((_QWORD *)v159 + 1);
            v160 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v122 + 56);
            swift_bridgeObjectRetain();
            v160(v119, 0, 1, v182);
            goto LABEL_88;
          }
          v126 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
          goto LABEL_56;
        }
        if (v125)
        {
          sub_224DDEAA0(v119, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
          v126 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_56:
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v126);
          memcpy((void *)v119, v120, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
LABEL_88:
          v176 = v68[11];
          v177 = &v66[v176];
          v178 = (_QWORD *)((char *)v67 + v176);
          *(_QWORD *)v177 = *v178;
          *((_QWORD *)v177 + 1) = v178[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return a1;
        }
        *(_BYTE *)v119 = *v120;
        *(_QWORD *)(v119 + 8) = *((_QWORD *)v120 + 1);
        *(_WORD *)(v119 + 16) = *((_WORD *)v120 + 8);
        *(_WORD *)(v119 + 18) = *((_WORD *)v120 + 9);
        v146 = (__int128 *)(v119 + 24);
        v147 = (__int128 *)(v120 + 24);
        v148 = *((_QWORD *)v120 + 7);
        if (*(_QWORD *)(v119 + 56) == 1)
        {
          if (v148 == 1)
          {
            v149 = *v147;
            v150 = *(_OWORD *)(v120 + 40);
            *(_QWORD *)(v119 + 56) = *((_QWORD *)v120 + 7);
            *v146 = v149;
            *(_OWORD *)(v119 + 40) = v150;
          }
          else
          {
            *(_BYTE *)(v119 + 24) = v120[24];
            *(_BYTE *)(v119 + 25) = v120[25];
            *(_BYTE *)(v119 + 26) = v120[26];
            v163 = *(_OWORD *)(v120 + 28);
            *(_DWORD *)(v119 + 44) = *((_DWORD *)v120 + 11);
            *(_OWORD *)(v119 + 28) = v163;
            *(_QWORD *)(v119 + 48) = *((_QWORD *)v120 + 6);
            *(_QWORD *)(v119 + 56) = *((_QWORD *)v120 + 7);
            swift_bridgeObjectRetain();
          }
        }
        else if (v148 == 1)
        {
          sub_224E2C9F4(v119 + 24);
          v161 = *((_QWORD *)v120 + 7);
          v162 = *(_OWORD *)(v120 + 40);
          *v146 = *v147;
          *(_OWORD *)(v119 + 40) = v162;
          *(_QWORD *)(v119 + 56) = v161;
        }
        else
        {
          *(_BYTE *)(v119 + 24) = v120[24];
          *(_BYTE *)(v119 + 25) = v120[25];
          *(_BYTE *)(v119 + 26) = v120[26];
          *(_DWORD *)(v119 + 28) = *((_DWORD *)v120 + 7);
          *(_WORD *)(v119 + 32) = *((_WORD *)v120 + 16);
          *(_WORD *)(v119 + 34) = *((_WORD *)v120 + 17);
          *(_WORD *)(v119 + 36) = *((_WORD *)v120 + 18);
          *(_WORD *)(v119 + 38) = *((_WORD *)v120 + 19);
          *(_WORD *)(v119 + 40) = *((_WORD *)v120 + 20);
          *(_WORD *)(v119 + 42) = *((_WORD *)v120 + 21);
          *(_WORD *)(v119 + 44) = *((_WORD *)v120 + 22);
          *(_WORD *)(v119 + 46) = *((_WORD *)v120 + 23);
          *(_QWORD *)(v119 + 48) = *((_QWORD *)v120 + 6);
          *(_QWORD *)(v119 + 56) = *((_QWORD *)v120 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        v164 = *(int *)(v121 + 28);
        v165 = (void *)(v119 + v164);
        __srcc = &v120[v164];
        v166 = sub_224F67874();
        v183 = *(_QWORD *)(v166 - 8);
        v186 = v165;
        v167 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v183 + 48);
        LODWORD(v165) = v167(v165, 1, v166);
        v168 = v167(__srcc, 1, v166);
        if ((_DWORD)v165)
        {
          if (!v168)
          {
            (*(void (**)(void *, char *, uint64_t))(v183 + 16))(v186, __srcc, v166);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v183 + 56))(v186, 0, 1, v166);
            goto LABEL_87;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v170 = *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64);
          v171 = v186;
        }
        else
        {
          if (!v168)
          {
            (*(void (**)(void *, char *, uint64_t))(v183 + 24))(v186, __srcc, v166);
            goto LABEL_87;
          }
          (*(void (**)(void *, uint64_t))(v183 + 8))(v186, v166);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v170 = *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64);
          v171 = v186;
        }
        memcpy(v171, __srcc, v170);
LABEL_87:
        v173 = *(int *)(v121 + 32);
        v174 = (_QWORD *)(v119 + v173);
        v175 = &v120[v173];
        *v174 = *(_QWORD *)v175;
        v174[1] = *((_QWORD *)v175 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_88;
      }
      (*(void (**)(char *, uint64_t))(v184 + 8))(v80, v9);
    }
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
    goto LABEL_51;
  }
  if (v72)
  {
    v73 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_37:
    sub_224DDEA0C(0, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, v73);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v66 = *v67;
  *((_QWORD *)v66 + 1) = v67[1];
  *((_QWORD *)v66 + 2) = v67[2];
  *((_QWORD *)v66 + 3) = v67[3];
  v75 = v68[6];
  v76 = &v66[v75];
  v77 = (char *)v67 + v75;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v181 = v69;
  if (__src(v77, 1, v9))
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v76, v77, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v184 + 56))(v76, 0, 1, v9);
  }
  v84 = v68[7];
  v85 = &v66[v84];
  v86 = (char *)v67 + v84;
  v87 = *(_DWORD *)v86;
  v85[4] = v86[4];
  *(_DWORD *)v85 = v87;
  v88 = v68[8];
  v89 = &v66[v88];
  v90 = (_QWORD *)((char *)v67 + v88);
  *(_QWORD *)v89 = *v90;
  *((_QWORD *)v89 + 1) = v90[1];
  v91 = v68[9];
  v92 = &v66[v91];
  v93 = (_QWORD *)((char *)v67 + v91);
  *(_QWORD *)v92 = *v93;
  *((_QWORD *)v92 + 1) = v93[1];
  v94 = v68[10];
  v95 = &v66[v94];
  __srca = (char *)v67;
  v96 = (char *)v67 + v94;
  v97 = type metadata accessor for FHIRDateTime();
  v98 = *(_QWORD *)(v97 - 8);
  v99 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v98 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v99(v96, 1, v97))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    v101 = __srca;
    v102 = v69;
  }
  else
  {
    v180 = v98;
    *v95 = *v96;
    v103 = *((_QWORD *)v96 + 1);
    *((_DWORD *)v95 + 4) = *((_DWORD *)v96 + 4);
    *((_QWORD *)v95 + 1) = v103;
    v104 = v95;
    if (*((_QWORD *)v96 + 7) == 1)
    {
      v105 = *(_OWORD *)(v96 + 24);
      v106 = *(_OWORD *)(v96 + 40);
      *((_QWORD *)v95 + 7) = *((_QWORD *)v96 + 7);
      *(_OWORD *)(v95 + 24) = v105;
      *(_OWORD *)(v95 + 40) = v106;
    }
    else
    {
      v95[24] = v96[24];
      v95[25] = v96[25];
      v95[26] = v96[26];
      v128 = *(_OWORD *)(v96 + 28);
      *((_DWORD *)v95 + 11) = *((_DWORD *)v96 + 11);
      *(_OWORD *)(v95 + 28) = v128;
      *((_QWORD *)v95 + 6) = *((_QWORD *)v96 + 6);
      *((_QWORD *)v95 + 7) = *((_QWORD *)v96 + 7);
      swift_bridgeObjectRetain();
    }
    v129 = v97;
    v101 = __srca;
    v130 = *(int *)(v129 + 28);
    v185 = &v95[v130];
    v131 = &v96[v130];
    v132 = sub_224F67874();
    v133 = *(_QWORD *)(v132 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v185, v131, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, _BYTE *, uint64_t))(v133 + 16))(v185, v131, v132);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v185, 0, 1, v132);
    }
    v138 = *(int *)(v129 + 32);
    v139 = &v104[v138];
    v140 = &v96[v138];
    *v139 = *v140;
    v139[1] = v140[1];
    v102 = v181;
    v141 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v180 + 56);
    swift_bridgeObjectRetain();
    v141(v104, 0, 1, v129);
  }
  v142 = v68[11];
  v143 = &v66[v142];
  v144 = &v101[v142];
  *(_QWORD *)v143 = *(_QWORD *)v144;
  *((_QWORD *)v143 + 1) = *((_QWORD *)v144 + 1);
  v145 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v102 + 56);
  swift_bridgeObjectRetain();
  v145(v66, 0, 1, v68);
  return a1;
}

_QWORD *initializeWithTake for Extension(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  _OWORD *v27;
  _OWORD *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_224F675D4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = (int *)type metadata accessor for Coding();
  v20 = *((_QWORD *)v19 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
  {
    sub_224DDEA0C(0, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    if (v11(v18, 1, v9))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v18, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
    }
    *(_OWORD *)&v17[v19[5]] = *(_OWORD *)&v18[v19[5]];
    *(_OWORD *)&v17[v19[6]] = *(_OWORD *)&v18[v19[6]];
    *(_OWORD *)&v17[v19[7]] = *(_OWORD *)&v18[v19[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
  }
  v23 = a3[10];
  v24 = a3[11];
  v25 = (char *)a1 + v23;
  v26 = (char *)a2 + v23;
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
  v27 = (_OWORD *)((char *)a1 + v24);
  v28 = (_OWORD *)((char *)a2 + v24);
  v29 = (int *)type metadata accessor for Attachment();
  v30 = *((_QWORD *)v29 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    sub_224DDEA0C(0, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = v28[1];
    *v27 = *v28;
    v27[1] = v32;
    v33 = v29[6];
    v34 = (char *)v27 + v33;
    v35 = (char *)v28 + v33;
    if (v11((char *)v28 + v33, 1, v9))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v34, v35, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v34, 0, 1, v9);
    }
    v37 = v29[7];
    v38 = (char *)v27 + v37;
    v39 = (char *)v28 + v37;
    *(_DWORD *)v38 = *(_DWORD *)v39;
    v38[4] = v39[4];
    *(_OWORD *)((char *)v27 + v29[8]) = *(_OWORD *)((char *)v28 + v29[8]);
    *(_OWORD *)((char *)v27 + v29[9]) = *(_OWORD *)((char *)v28 + v29[9]);
    v40 = v29[10];
    v41 = (char *)v27 + v40;
    v42 = (char *)v28 + v40;
    v43 = type metadata accessor for FHIRDateTime();
    v44 = *(_QWORD *)(v43 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      v52 = v44;
      *v41 = *v42;
      *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
      *((_DWORD *)v41 + 4) = *((_DWORD *)v42 + 4);
      *(_OWORD *)(v41 + 24) = *(_OWORD *)(v42 + 24);
      *(_OWORD *)(v41 + 40) = *(_OWORD *)(v42 + 40);
      *((_QWORD *)v41 + 7) = *((_QWORD *)v42 + 7);
      v46 = *(int *)(v43 + 28);
      v53 = &v41[v46];
      v54 = v30;
      v47 = &v42[v46];
      v48 = sub_224F67874();
      v49 = *(_QWORD *)(v48 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v53, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v49 + 32))(v53, v47, v48);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v53, 0, 1, v48);
      }
      v30 = v54;
      *(_OWORD *)&v41[*(int *)(v43 + 32)] = *(_OWORD *)&v42[*(int *)(v43 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v41, 0, 1, v43);
    }
    *(_OWORD *)((char *)v27 + v29[11]) = *(_OWORD *)((char *)v28 + v29[11]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

_QWORD *assignWithTake for Extension(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, int *);
  int v33;
  int v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int *v63;
  uint64_t v64;
  uint64_t (*v65)(char *, uint64_t, int *);
  int v66;
  int v67;
  uint64_t (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int v80;
  int v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t, uint64_t, uint64_t);
  int v115;
  int v116;
  uint64_t (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t (*v128)(void *, uint64_t, uint64_t);
  int v129;
  uint64_t v130;
  size_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t (*v149)(char *, uint64_t, uint64_t);
  void *v150;
  _QWORD *__src;
  char *__srca;
  void *__srcb;
  char *__srcc;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_224F675D4();
  __src = *(_QWORD **)(v9 - 8);
  v10 = (uint64_t (*)(char *, uint64_t, uint64_t))__src[6];
  v11 = v10(v7, 1, v9);
  v149 = v10;
  v12 = v10(v8, 1, v9);
  if (v11)
  {
    if (!v12)
    {
      ((void (*)(char *, char *, uint64_t))__src[4])(v7, v8, v9);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__src[7])(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    ((void (*)(char *, uint64_t))__src[1])(v7, v9);
LABEL_6:
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))__src[5])(v7, v8, v9);
LABEL_7:
  v14 = a3[6];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  v19 = a3[7];
  v20 = a3[8];
  v21 = (char *)a1 + v19;
  v22 = (char *)a2 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = (_QWORD *)((char *)a1 + v20);
  v24 = (_QWORD *)((char *)a2 + v20);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  v27 = a3[9];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = (int *)type metadata accessor for Coding();
  v31 = *((_QWORD *)v30 - 1);
  v32 = *(uint64_t (**)(char *, uint64_t, int *))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (!v33)
  {
    if (v34)
    {
      sub_224DDEAA0((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
      v35 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_12;
    }
    v38 = v149(v28, 1, v9);
    v39 = v149(v29, 1, v9);
    if (v38)
    {
      if (!v39)
      {
        ((void (*)(char *, char *, uint64_t))__src[4])(v28, v29, v9);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__src[7])(v28, 0, 1, v9);
LABEL_24:
        v41 = v30[5];
        v42 = &v28[v41];
        v43 = &v29[v41];
        v45 = *(_QWORD *)v43;
        v44 = *((_QWORD *)v43 + 1);
        *(_QWORD *)v42 = v45;
        *((_QWORD *)v42 + 1) = v44;
        swift_bridgeObjectRelease();
        v46 = v30[6];
        v47 = &v28[v46];
        v48 = &v29[v46];
        v50 = *(_QWORD *)v48;
        v49 = *((_QWORD *)v48 + 1);
        *(_QWORD *)v47 = v50;
        *((_QWORD *)v47 + 1) = v49;
        swift_bridgeObjectRelease();
        v51 = v30[7];
        v52 = &v28[v51];
        v53 = &v29[v51];
        v55 = *(_QWORD *)v53;
        v54 = *((_QWORD *)v53 + 1);
        *(_QWORD *)v52 = v55;
        *((_QWORD *)v52 + 1) = v54;
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    else
    {
      if (!v39)
      {
        ((void (*)(char *, char *, uint64_t))__src[5])(v28, v29, v9);
        goto LABEL_24;
      }
      ((void (*)(char *, uint64_t))__src[1])(v28, v9);
    }
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_24;
  }
  if (v34)
  {
    v35 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_12:
    sub_224DDEA0C(0, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding, v35);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_25;
  }
  if (v149(v29, 1, v9))
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))__src[4])(v28, v29, v9);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))__src[7])(v28, 0, 1, v9);
  }
  *(_OWORD *)&v28[v30[5]] = *(_OWORD *)&v29[v30[5]];
  *(_OWORD *)&v28[v30[6]] = *(_OWORD *)&v29[v30[6]];
  *(_OWORD *)&v28[v30[7]] = *(_OWORD *)&v29[v30[7]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
LABEL_25:
  v56 = a3[10];
  v57 = (uint64_t)a1 + v56;
  v58 = (char *)a2 + v56;
  if (*(_QWORD *)((char *)a1 + v56 + 8) == 1)
  {
LABEL_28:
    *(_OWORD *)v57 = *(_OWORD *)v58;
    *(_QWORD *)(v57 + 16) = *((_QWORD *)v58 + 2);
    goto LABEL_30;
  }
  v59 = *((_QWORD *)v58 + 1);
  if (v59 == 1)
  {
    sub_224E2C9C0(v57);
    goto LABEL_28;
  }
  *(_QWORD *)v57 = *(_QWORD *)v58;
  *(_QWORD *)(v57 + 8) = v59;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v57 + 16) = *((_QWORD *)v58 + 2);
  swift_bridgeObjectRelease();
LABEL_30:
  v60 = a3[11];
  v61 = (char *)a1 + v60;
  v62 = (char *)a2 + v60;
  v63 = (int *)type metadata accessor for Attachment();
  v64 = *((_QWORD *)v63 - 1);
  v65 = *(uint64_t (**)(char *, uint64_t, int *))(v64 + 48);
  v66 = v65(v61, 1, v63);
  v67 = v65(v62, 1, v63);
  if (!v66)
  {
    if (v67)
    {
      sub_224DDEAA0((uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
      v68 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_35;
    }
    v75 = *((_QWORD *)v62 + 1);
    *(_QWORD *)v61 = *(_QWORD *)v62;
    *((_QWORD *)v61 + 1) = v75;
    swift_bridgeObjectRelease();
    v76 = *((_QWORD *)v62 + 3);
    *((_QWORD *)v61 + 2) = *((_QWORD *)v62 + 2);
    *((_QWORD *)v61 + 3) = v76;
    swift_bridgeObjectRelease();
    v77 = v63[6];
    v78 = &v61[v77];
    v79 = &v62[v77];
    v80 = v149(&v61[v77], 1, v9);
    v81 = v149(v79, 1, v9);
    if (v80)
    {
      if (!v81)
      {
        ((void (*)(char *, char *, uint64_t))__src[4])(v78, v79, v9);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__src[7])(v78, 0, 1, v9);
        goto LABEL_49;
      }
    }
    else
    {
      if (!v81)
      {
        ((void (*)(char *, char *, uint64_t))__src[5])(v78, v79, v9);
LABEL_49:
        v96 = v63[7];
        v97 = &v61[v96];
        v98 = &v62[v96];
        *(_DWORD *)v97 = *(_DWORD *)v98;
        v97[4] = v98[4];
        v99 = v63[8];
        v100 = &v61[v99];
        v101 = (uint64_t *)&v62[v99];
        v103 = *v101;
        v102 = v101[1];
        *(_QWORD *)v100 = v103;
        *((_QWORD *)v100 + 1) = v102;
        swift_bridgeObjectRelease();
        v104 = v63[9];
        v105 = &v61[v104];
        v106 = (uint64_t *)&v62[v104];
        v108 = *v106;
        v107 = v106[1];
        *(_QWORD *)v105 = v108;
        *((_QWORD *)v105 + 1) = v107;
        swift_bridgeObjectRelease();
        v109 = v63[10];
        v110 = (uint64_t)&v61[v109];
        v111 = &v62[v109];
        v112 = type metadata accessor for FHIRDateTime();
        v113 = *(_QWORD *)(v112 - 8);
        v114 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48);
        v115 = v114(v110, 1, v112);
        v116 = v114((uint64_t)v111, 1, v112);
        if (v115)
        {
          if (!v116)
          {
            *(_BYTE *)v110 = *v111;
            *(_QWORD *)(v110 + 8) = *((_QWORD *)v111 + 1);
            *(_DWORD *)(v110 + 16) = *((_DWORD *)v111 + 4);
            *(_OWORD *)(v110 + 24) = *(_OWORD *)(v111 + 24);
            *(_OWORD *)(v110 + 40) = *(_OWORD *)(v111 + 40);
            *(_QWORD *)(v110 + 56) = *((_QWORD *)v111 + 7);
            v119 = *(int *)(v112 + 28);
            __srcb = (void *)(v110 + v119);
            v120 = &v111[v119];
            v121 = sub_224F67874();
            v147 = *(_QWORD *)(v121 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v120, 1, v121))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__srcb, v120, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v147 + 32))(__srcb, v120, v121);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v147 + 56))(__srcb, 0, 1, v121);
            }
            *(_OWORD *)(v110 + *(int *)(v112 + 32)) = *(_OWORD *)&v111[*(int *)(v112 + 32)];
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v113 + 56))(v110, 0, 1, v112);
            goto LABEL_78;
          }
          v117 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
          goto LABEL_54;
        }
        if (v116)
        {
          sub_224DDEAA0(v110, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
          v117 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_54:
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v117);
          memcpy((void *)v110, v111, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
LABEL_78:
          v139 = v63[11];
          v140 = &v61[v139];
          v141 = (uint64_t *)&v62[v139];
          v143 = *v141;
          v142 = v141[1];
          *(_QWORD *)v140 = v143;
          *((_QWORD *)v140 + 1) = v142;
          swift_bridgeObjectRelease();
          return a1;
        }
        *(_BYTE *)v110 = *v111;
        *(_QWORD *)(v110 + 8) = *((_QWORD *)v111 + 1);
        *(_DWORD *)(v110 + 16) = *((_DWORD *)v111 + 4);
        if (*(_QWORD *)(v110 + 56) != 1)
        {
          v123 = *((_QWORD *)v111 + 7);
          if (v123 != 1)
          {
            *(_BYTE *)(v110 + 24) = v111[24];
            *(_WORD *)(v110 + 25) = *(_WORD *)(v111 + 25);
            *(_DWORD *)(v110 + 28) = *((_DWORD *)v111 + 7);
            *(_OWORD *)(v110 + 32) = *((_OWORD *)v111 + 2);
            *(_QWORD *)(v110 + 48) = *((_QWORD *)v111 + 6);
            *(_QWORD *)(v110 + 56) = v123;
            swift_bridgeObjectRelease();
LABEL_69:
            v125 = *(int *)(v112 + 28);
            v126 = (void *)(v110 + v125);
            __srcc = &v111[v125];
            v127 = sub_224F67874();
            v148 = *(_QWORD *)(v127 - 8);
            v150 = v126;
            v128 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v148 + 48);
            LODWORD(v126) = v128(v126, 1, v127);
            v129 = v128(__srcc, 1, v127);
            if ((_DWORD)v126)
            {
              if (!v129)
              {
                (*(void (**)(void *, char *, uint64_t))(v148 + 32))(v150, __srcc, v127);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v150, 0, 1, v127);
                goto LABEL_77;
              }
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              v131 = *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64);
              v132 = v150;
            }
            else
            {
              if (!v129)
              {
                (*(void (**)(void *, char *, uint64_t))(v148 + 40))(v150, __srcc, v127);
                goto LABEL_77;
              }
              (*(void (**)(void *, uint64_t))(v148 + 8))(v150, v127);
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              v131 = *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64);
              v132 = v150;
            }
            memcpy(v132, __srcc, v131);
LABEL_77:
            v134 = *(int *)(v112 + 32);
            v135 = (_QWORD *)(v110 + v134);
            v136 = &v111[v134];
            v138 = *(_QWORD *)v136;
            v137 = *((_QWORD *)v136 + 1);
            *v135 = v138;
            v135[1] = v137;
            swift_bridgeObjectRelease();
            goto LABEL_78;
          }
          sub_224E2C9F4(v110 + 24);
        }
        v124 = *(_OWORD *)(v111 + 40);
        *(_OWORD *)(v110 + 24) = *(_OWORD *)(v111 + 24);
        *(_OWORD *)(v110 + 40) = v124;
        *(_QWORD *)(v110 + 56) = *((_QWORD *)v111 + 7);
        goto LABEL_69;
      }
      ((void (*)(char *, uint64_t))__src[1])(v78, v9);
    }
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    goto LABEL_49;
  }
  if (v67)
  {
    v68 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_35:
    sub_224DDEA0C(0, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, v68);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    return a1;
  }
  v70 = *((_OWORD *)v62 + 1);
  *(_OWORD *)v61 = *(_OWORD *)v62;
  *((_OWORD *)v61 + 1) = v70;
  v71 = v63[6];
  v72 = &v61[v71];
  v73 = &v62[v71];
  if (v149(&v62[v71], 1, v9))
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))__src[4])(v72, v73, v9);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))__src[7])(v72, 0, 1, v9);
  }
  v82 = v63[7];
  v83 = &v61[v82];
  v84 = &v62[v82];
  *(_DWORD *)v83 = *(_DWORD *)v84;
  v83[4] = v84[4];
  *(_OWORD *)&v61[v63[8]] = *(_OWORD *)&v62[v63[8]];
  *(_OWORD *)&v61[v63[9]] = *(_OWORD *)&v62[v63[9]];
  v85 = v63[10];
  v86 = &v61[v85];
  v87 = &v62[v85];
  v88 = type metadata accessor for FHIRDateTime();
  v89 = *(_QWORD *)(v88 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
  }
  else
  {
    v146 = v89;
    *v86 = *v87;
    *((_QWORD *)v86 + 1) = *((_QWORD *)v87 + 1);
    *((_DWORD *)v86 + 4) = *((_DWORD *)v87 + 4);
    *(_OWORD *)(v86 + 24) = *(_OWORD *)(v87 + 24);
    *(_OWORD *)(v86 + 40) = *(_OWORD *)(v87 + 40);
    *((_QWORD *)v86 + 7) = *((_QWORD *)v87 + 7);
    v91 = *(int *)(v88 + 28);
    __srca = &v86[v91];
    v92 = &v87[v91];
    v93 = sub_224F67874();
    v145 = *(_QWORD *)(v93 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v145 + 48))(v92, 1, v93))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__srca, v92, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, _BYTE *, uint64_t))(v145 + 32))(__srca, v92, v93);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v145 + 56))(__srca, 0, 1, v93);
    }
    *(_OWORD *)&v86[*(int *)(v88 + 32)] = *(_OWORD *)&v87[*(int *)(v88 + 32)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v86, 0, 1, v88);
  }
  *(_OWORD *)&v61[v63[11]] = *(_OWORD *)&v62[v63[11]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v64 + 56))(v61, 0, 1, v63);
  return a1;
}

uint64_t getEnumTagSinglePayload for Extension()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F35854(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = a3[5];
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v10 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
      {
        v11 = v13;
        v12 = a3[9];
      }
      else
      {
        sub_224DDEA0C(0, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v11 = v14;
        v10 = *(_QWORD *)(v14 - 8);
        v12 = a3[11];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a1[v12], a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for Extension()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_224F35978(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        sub_224DDEA0C(0, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a4[11];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_224F35A80()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_224DDEA0C(319, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_224DDEA0C(319, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
    {
      sub_224DDEA0C(319, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for Extension.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Extension.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_224F35C6C + 4 * byte_224F7532D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_224F35CA0 + 4 * byte_224F75328[v4]))();
}

uint64_t sub_224F35CA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F35CA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224F35CB0);
  return result;
}

uint64_t sub_224F35CBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224F35CC4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_224F35CC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F35CD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Extension.CodingKeys()
{
  return &type metadata for Extension.CodingKeys;
}

unint64_t sub_224F35CF0()
{
  unint64_t result;

  result = qword_2557E3ED0;
  if (!qword_2557E3ED0)
  {
    result = MEMORY[0x22768ED24](&unk_224F75564, &type metadata for Extension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3ED0);
  }
  return result;
}

unint64_t sub_224F35D38()
{
  unint64_t result;

  result = qword_2557E3ED8;
  if (!qword_2557E3ED8)
  {
    result = MEMORY[0x22768ED24](&unk_224F754D4, &type metadata for Extension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3ED8);
  }
  return result;
}

unint64_t sub_224F35D80()
{
  unint64_t result;

  result = qword_2557E3EE0;
  if (!qword_2557E3EE0)
  {
    result = MEMORY[0x22768ED24](&unk_224F754FC, &type metadata for Extension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3EE0);
  }
  return result;
}

uint64_t sub_224F35DC4(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x6F69736E65747865 && a2 == 0xE90000000000006ELL || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x72745365756C6176 && a2 == 0xEB00000000676E69 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x63654465756C6176 && a2 == 0xEC0000006C616D69 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x646F4365756C6176 && a2 == 0xE900000000000065 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x646F4365756C6176 && a2 == 0xEB00000000676E69 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000224F81580 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x74744165756C6176 && a2 == 0xEF746E656D686361)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v5 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

void sub_224F36160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;

  if (__OFSUB__(0, a3))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
  v7 = 15;
  v8 = sub_224F67C64();
  if ((v9 & 1) == 0)
    v7 = v8;
  v10 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v10 = a4;
  v11 = 7;
  if (((a5 >> 60) & ((a4 & 0x800000000000000) == 0)) != 0)
    v11 = 11;
  v12 = v11 | (v10 << 16);
  v13 = sub_224F67C64();
  if ((v14 & 1) != 0)
    v15 = v12;
  else
    v15 = v13;
  if (v15 >> 14 < v7 >> 14)
    goto LABEL_14;
}

uint64_t sub_224F36218(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = sub_224F6734C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = a1;
  v35 = a2;
  sub_224F6731C();
  sub_224E51E94();
  v8 = sub_224F68024();
  v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v34 = v8;
  v35 = v10;
  v32 = 28252;
  v33 = 0xE200000000000000;
  v30 = 32;
  v31 = 0xE100000000000000;
  v11 = sub_224F68030();
  v13 = v12;
  swift_bridgeObjectRelease();
  v34 = v11;
  v35 = v13;
  v32 = 10;
  v33 = 0xE100000000000000;
  v30 = 32;
  v31 = 0xE100000000000000;
  v14 = sub_224F68030();
  v16 = v15;
  swift_bridgeObjectRelease();
  v34 = v14;
  v35 = v16;
  v32 = 32;
  v33 = 0xE100000000000000;
  v17 = sub_224F68018();
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v19 = (uint64_t *)(v17 + 40);
    v20 = MEMORY[0x24BEE4AF8];
    do
    {
      v25 = *(v19 - 1);
      v24 = *v19;
      v26 = HIBYTE(*v19) & 0xF;
      if ((*v19 & 0x2000000000000000) == 0)
        v26 = v25 & 0xFFFFFFFFFFFFLL;
      if (v26)
      {
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v34 = v20;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_224E53720(0, *(_QWORD *)(v20 + 16) + 1, 1);
          v20 = v34;
        }
        v22 = *(_QWORD *)(v20 + 16);
        v21 = *(_QWORD *)(v20 + 24);
        if (v22 >= v21 >> 1)
        {
          sub_224E53720(v21 > 1, v22 + 1, 1);
          v20 = v34;
        }
        *(_QWORD *)(v20 + 16) = v22 + 1;
        v23 = v20 + 16 * v22;
        *(_QWORD *)(v23 + 32) = v25;
        *(_QWORD *)(v23 + 40) = v24;
      }
      v19 += 2;
      --v18;
    }
    while (v18);
  }
  else
  {
    v20 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v34 = v20;
  sub_224E68104();
  sub_224E79350();
  v28 = sub_224F67B44();
  swift_release();
  return v28;
}

uint64_t sub_224F364D0(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = v3;
  v8 = sub_224F67910();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v23 - v11;
  v13 = sub_224F6791C();
  v14 = MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v23 - v15;
  if ((a1 & 1) != 0)
    __asm { BR              X9 }
  v19 = v16;
  v20 = v17;
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))((char *)&v23 - v15, *MEMORY[0x24BEE0000], v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, *MEMORY[0x24BEDFFC0], v8);
  v21 = sub_224F36CA4((uint64_t)v18, (uint64_t)v12, a2, a3);
  if (!v3)
    v4 = v21;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  return v4;
}

uint64_t CompressionAlgorithm.decompress(data:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v4 = sub_224F67910();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_224F6791C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEE0000], v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEDFFC0], v4);
  v12 = sub_224F36CA4((uint64_t)v11, (uint64_t)v7, a1, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v12;
}

uint64_t Data.decompress(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224F36BD0(a1, a2, a3, MEMORY[0x24BEDFFC0]);
}

uint64_t Data.compress(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224F36BD0(a1, a2, a3, MEMORY[0x24BEDFFC8]);
}

uint64_t sub_224F36BD0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = sub_224F67910();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *a4, v8);
  v12 = sub_224F36CA4(a1, (uint64_t)v11, a2, a3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v12;
}

uint64_t sub_224F36CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v16 = a4;
  v17 = a2;
  v18 = a1;
  v4 = sub_224F6791C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_224F67910();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_224F72C70;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v17, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v18, v4);
  sub_224F678F8();
  swift_allocObject();
  swift_retain();
  v13 = v19;
  sub_224F67904();
  if (!v13)
  {
    v18 = v12 + 16;
    v15 = v12;
    __asm { BR              X10 }
  }
  swift_release();
  return v12 + 16;
}

uint64_t sub_224F36FA8()
{
  uint64_t v0;

  sub_224DDE9B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_224F36FCC(uint64_t result, unint64_t a2)
{
  uint64_t v3;

  if (a2 >> 60 != 15)
  {
    v3 = result;
    swift_beginAccess();
    sub_224DDE970(v3, a2);
    sub_224F67670();
    swift_endAccess();
    return sub_224E58810(v3, a2);
  }
  return result;
}

uint64_t sub_224F37054(uint64_t a1, unint64_t a2)
{
  return sub_224F36FCC(a1, a2);
}

void sub_224F3706C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

BOOL sub_224F370A4@<W0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  unsigned __int8 v5;

  if (BYTE6(v1) < 2uLL)
    return 0;
  if (a1)
  {
    if (a1 == 1)
    {
      v3 = (int)v2;
      v4 = sub_224F67694();
    }
    else
    {
      v4 = sub_224F67694();
      v3 = *(_QWORD *)(v2 + 16);
    }
  }
  else
  {
    v4 = sub_224F67694();
    v3 = 0;
  }
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    JUMPOUT(0x224F37194);
  }
  v5 = sub_224F67694();
  if ((v4 & 0x8F) != 8)
    return 0;
  return (v5 & 0x20) == 0 && (unsigned __int16)(31711 * (v5 | (unsigned __int16)(v4 << 8))) < 0x843u;
}

void sub_224F371AC(uint64_t a1, uint64_t a2)
{
  adler32(0, 0, 0);
  __asm { BR              X10 }
}

uint64_t sub_224F3720C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  char v14;

  v9 = v0;
  v10 = v1;
  v11 = BYTE2(v1);
  v12 = BYTE3(v1);
  v13 = BYTE4(v1);
  v14 = BYTE5(v1);
  sub_224F3743C((uint64_t)&v9, (uint64_t)&v9 + BYTE6(v1), v0, v1);
  sub_224DDE9B4(v0, v1);
  sub_224E77084();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_224F73670;
  *(_BYTE *)(v2 + 32) = v8;
  *(_BYTE *)(v2 + 33) = v7;
  *(_BYTE *)(v2 + 34) = v6;
  *(_BYTE *)(v2 + 35) = v5;
  v3 = sub_224F548D4(v2);
  swift_bridgeObjectRelease();
  return v3;
}

void sub_224F3743C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;

  v4 = a4 >> 62;
  if (a1)
    __asm { BR              X11 }
  __asm { BR              X11 }
}

uLong sub_224F374B8(int a1, const Bytef *a2, int a3, uint64_t a4, uLong adler, int a6, int a7, int a8, char a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uLong *v16;
  uLong result;

  result = adler32(adler, a2, BYTE6(a4));
  *v16 = result;
  return result;
}

void sub_224F375C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = sub_224F673B8();
  if (v9)
  {
    v10 = sub_224F673D0();
    if (__OFSUB__(a1, v10))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v9 += a1 - v10;
  }
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }
  v13 = sub_224F673C4();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = v9 + v14;
  if (v9)
    v16 = v15;
  else
    v16 = 0;
  sub_224F3743C(v9, v16, a4, a5);
}

uint64_t Attachment.contentType.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Attachment.contentType.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Attachment.contentType.modify())()
{
  return nullsub_1;
}

uint64_t Attachment.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Attachment.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Attachment.data.modify())()
{
  return nullsub_1;
}

uint64_t Attachment.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Attachment();
  return sub_224E75F34(v1 + *(int *)(v3 + 24), a1, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
}

uint64_t Attachment.url.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Attachment();
  return sub_224F39158(a1, v1 + *(int *)(v3 + 24), (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
}

uint64_t (*Attachment.url.modify())(_QWORD)
{
  type metadata accessor for Attachment();
  return nullsub_1;
}

unint64_t Attachment.size.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for Attachment() + 28));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t Attachment.size.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for Attachment();
  v4 = v1 + *(int *)(result + 28);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*Attachment.size.modify())(_QWORD)
{
  type metadata accessor for Attachment();
  return nullsub_1;
}

uint64_t Attachment.hash.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Attachment() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Attachment.hash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for Attachment() + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Attachment.hash.modify())(_QWORD)
{
  type metadata accessor for Attachment();
  return nullsub_1;
}

uint64_t Attachment.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Attachment() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Attachment.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for Attachment() + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Attachment.title.modify())(_QWORD)
{
  type metadata accessor for Attachment();
  return nullsub_1;
}

uint64_t Attachment.creation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Attachment();
  return sub_224E75F34(v1 + *(int *)(v3 + 40), a1, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t Attachment.creation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Attachment();
  return sub_224F39158(a1, v1 + *(int *)(v3 + 40), &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t (*Attachment.creation.modify())(_QWORD)
{
  type metadata accessor for Attachment();
  return nullsub_1;
}

uint64_t Attachment.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Attachment() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Attachment.language.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for Attachment() + 44));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Attachment.language.modify())(_QWORD)
{
  type metadata accessor for Attachment();
  return nullsub_1;
}

uint64_t Attachment.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v11;

  v1 = sub_224F675D4();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, v5);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - v7;
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 24))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v9 = (int *)type metadata accessor for Attachment();
  sub_224E75F34(v0 + v9[6], (uint64_t)v8, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
  {
    sub_224F68528();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v8, v1);
    sub_224F68528();
    sub_224DDACD4(&qword_2557E02F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_224F67B20();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  if (*(_BYTE *)(v0 + v9[7] + 4) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224F68528();
    sub_224F68534();
  }
  if (*(_QWORD *)(v0 + v9[8] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  if (*(_QWORD *)(v0 + v9[9] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  sub_224DF2AC8();
  if (!*(_QWORD *)(v0 + v9[11] + 8))
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224F37E78()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224F37EB0 + 4 * byte_224F755E0[*v0]))(0x54746E65746E6F63, 0xEB00000000657079);
}

uint64_t sub_224F37EB0()
{
  return 1635017060;
}

uint64_t sub_224F37EC0()
{
  return 7107189;
}

uint64_t sub_224F37ED0()
{
  return 1702521203;
}

uint64_t sub_224F37EE0()
{
  return 1752392040;
}

uint64_t sub_224F37EF0()
{
  return 0x656C746974;
}

uint64_t sub_224F37F04()
{
  return 0x6E6F697461657263;
}

uint64_t sub_224F37F1C()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_224F37F34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224F3AC54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224F37F58()
{
  sub_224F391A4();
  return sub_224F685B8();
}

uint64_t sub_224F37F80()
{
  sub_224F391A4();
  return sub_224F685C4();
}

uint64_t Attachment.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  char v11;
  _BYTE v13[16];

  v3 = v1;
  sub_224F391E8(0, &qword_2557E3EF8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v13[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F391A4();
  sub_224F68594();
  v13[15] = 0;
  sub_224F68348();
  if (!v2)
  {
    v13[14] = 1;
    sub_224F68300();
    v10 = type metadata accessor for Attachment();
    v13[13] = 2;
    sub_224F675D4();
    sub_224DDACD4(&qword_2557E1D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_224F68330();
    v11 = *(_BYTE *)(v3 + *(int *)(v10 + 28) + 4);
    v13[12] = 3;
    v13[8] = v11;
    sub_224F6833C();
    v13[7] = 4;
    sub_224F68300();
    v13[6] = 5;
    sub_224F68300();
    v13[5] = 6;
    type metadata accessor for FHIRDateTime();
    sub_224DDACD4(&qword_2557E0748, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68330();
    v13[4] = 7;
    sub_224F68300();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Attachment.hashValue.getter()
{
  sub_224F68510();
  Attachment.hash(into:)();
  return sub_224F6854C();
}

uint64_t Attachment.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v17;
  uint64_t *v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t *v63;
  uint64_t *v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;

  v52 = a2;
  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  MEMORY[0x24BDAC7A8](v3);
  v53 = (char *)&v51 - v4;
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v5);
  v54 = (char *)&v51 - v6;
  sub_224F391E8(0, &qword_2557E3F08, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v55 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v51 - v8;
  v10 = (int *)type metadata accessor for Attachment();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)((char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13[2] = 0;
  v13[3] = 0;
  v14 = (uint64_t)v13 + *(int *)(v11 + 24);
  v15 = sub_224F675D4();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v60 = v14;
  v16(v14, 1, 1, v15);
  v17 = (char *)v13 + v10[7];
  *(_DWORD *)v17 = 0;
  v17[4] = 1;
  v18 = (uint64_t *)((char *)v13 + v10[8]);
  *v18 = 0;
  v18[1] = 0;
  v64 = v18;
  v19 = (uint64_t *)((char *)v13 + v10[9]);
  *v19 = 0;
  v19[1] = 0;
  v63 = v19;
  v20 = (char *)v13 + v10[10];
  v21 = type metadata accessor for FHIRDateTime();
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v61 = (uint64_t)v20;
  v22(v20, 1, 1, v21);
  v23 = (uint64_t *)((char *)v13 + v10[11]);
  *v23 = 0;
  v23[1] = 0;
  v58 = v23;
  v59 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F391A4();
  v57 = v9;
  v24 = v62;
  sub_224F6857C();
  if (v24)
  {
    v25 = v61;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
    v29 = v60;
    swift_bridgeObjectRelease();
    sub_224E7601C(v29, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_224E7601C(v25, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v62 = v17;
    v26 = v55;
    v72 = 0;
    v27 = sub_224F682AC();
    v28 = v61;
    *v13 = v27;
    v13[1] = v31;
    v71 = 1;
    v13[2] = sub_224F68264();
    v13[3] = v32;
    v70 = 2;
    sub_224DDACD4(&qword_2557E1D78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
    v33 = (uint64_t)v54;
    sub_224F68294();
    sub_224F39158(v33, v60, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v69 = 3;
    v34 = sub_224F682A0();
    v35 = v62;
    *v62 = v34;
    *((_BYTE *)v35 + 4) = BYTE4(v34) & 1;
    v68 = 4;
    v36 = sub_224F68264();
    v38 = v37;
    v39 = v64;
    swift_bridgeObjectRelease();
    *v39 = v36;
    v39[1] = v38;
    v67 = 5;
    v40 = sub_224F68264();
    v42 = v41;
    v43 = v63;
    swift_bridgeObjectRelease();
    *v43 = v40;
    v43[1] = v42;
    v66 = 6;
    sub_224DDACD4(&qword_2557E04F0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    v44 = (uint64_t)v53;
    sub_224F68294();
    sub_224F39158(v44, v28, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v65 = 7;
    v45 = sub_224F68264();
    v47 = v58;
    v46 = (uint64_t)v59;
    v48 = v45;
    v50 = v49;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v57, v56);
    swift_bridgeObjectRelease();
    *v47 = v48;
    v47[1] = v50;
    sub_224F39244((uint64_t)v13, v52);
    __swift_destroy_boxed_opaque_existential_1(v46);
    return sub_224DDEAA0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
  }
}

uint64_t sub_224F3882C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Attachment.init(from:)(a1, a2);
}

uint64_t sub_224F38840(_QWORD *a1)
{
  return Attachment.encode(to:)(a1);
}

uint64_t sub_224F38854()
{
  sub_224F68510();
  Attachment.hash(into:)();
  return sub_224F6854C();
}

uint64_t sub_224F38894()
{
  sub_224F68510();
  Attachment.hash(into:)();
  return sub_224F6854C();
}

uint64_t _s23HealthRecordsExtraction10AttachmentV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t *v46;
  unint64_t *v47;
  uint64_t (*v48)();
  uint64_t v49;
  char *v50;
  void (*v51)(uint64_t);
  char v52;
  void (*v53)(char *, uint64_t);
  int *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _DWORD *v58;
  char v59;
  _DWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  _QWORD *v90;
  _QWORD *v91;
  int *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;

  v99 = type metadata accessor for FHIRDateTime();
  v97 = *(_QWORD *)(v99 - 8);
  MEMORY[0x24BDAC7A8](v99);
  v94 = (uint64_t)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F0F1E8(0, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v96 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v88 - v6;
  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v95 = (uint64_t)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v100 = (uint64_t)&v88 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v98 = (uint64_t)&v88 - v13;
  v14 = sub_224F675D4();
  v15 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v101 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F0F1E8(0, (unint64_t *)&qword_2557E02B0, (unint64_t *)&qword_2557E02A8, v15);
  v19 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v88 - v20;
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, v15);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v88 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v88 - v29;
  if (*a1 == *a2 && a1[1] == a2[1] || (v31 = sub_224F683CC(), result = 0, (v31 & 1) != 0))
  {
    v33 = a1[3];
    v34 = a2[3];
    if (v33)
    {
      if (!v34)
        return 0;
      if (a1[2] != a2[2] || v33 != v34)
      {
        v35 = sub_224F683CC();
        result = 0;
        if ((v35 & 1) == 0)
          return result;
      }
    }
    else if (v34)
    {
      return 0;
    }
    v93 = v25;
    v89 = v7;
    v36 = v16;
    v37 = type metadata accessor for Attachment();
    v38 = *(int *)(v37 + 24);
    v90 = a1;
    v39 = (uint64_t)a1 + v38;
    v40 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
    sub_224E75F34(v39, (uint64_t)v30, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v91 = a2;
    v92 = (int *)v37;
    v41 = *(int *)(v37 + 24);
    v42 = v36;
    sub_224E75F34((uint64_t)a2 + v41, (uint64_t)v28, (unint64_t *)&qword_2557E02A8, v40);
    v43 = (uint64_t)&v21[*(int *)(v19 + 48)];
    sub_224E75F34((uint64_t)v30, (uint64_t)v21, (unint64_t *)&qword_2557E02A8, v40);
    sub_224E75F34((uint64_t)v28, v43, (unint64_t *)&qword_2557E02A8, v40);
    v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
    if (v44((uint64_t)v21, 1, v14) == 1)
    {
      sub_224E7601C((uint64_t)v28, (unint64_t *)&qword_2557E02A8, v40);
      sub_224E7601C((uint64_t)v30, (unint64_t *)&qword_2557E02A8, v40);
      if (v44(v43, 1, v14) == 1)
      {
        sub_224E7601C((uint64_t)v21, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
LABEL_21:
        v55 = v91;
        v54 = v92;
        v56 = v92[7];
        v57 = v90;
        v58 = (_DWORD *)((char *)v90 + v56);
        v59 = *((_BYTE *)v90 + v56 + 4);
        v60 = (_DWORD *)((char *)v91 + v56);
        v61 = *((unsigned __int8 *)v91 + v56 + 4);
        if ((v59 & 1) != 0)
        {
          v62 = (uint64_t)v89;
          if (!v61)
            return 0;
        }
        else
        {
          if (*v58 != *v60)
            LOBYTE(v61) = 1;
          v62 = (uint64_t)v89;
          if ((v61 & 1) != 0)
            return 0;
        }
        v63 = v92[8];
        v64 = (_QWORD *)((char *)v90 + v63);
        v65 = *(_QWORD *)((char *)v90 + v63 + 8);
        v66 = (_QWORD *)((char *)v91 + v63);
        v67 = v66[1];
        if (v65)
        {
          if (!v67)
            return 0;
          if (*v64 != *v66 || v65 != v67)
          {
            v68 = sub_224F683CC();
            result = 0;
            if ((v68 & 1) == 0)
              return result;
          }
        }
        else if (v67)
        {
          return 0;
        }
        v69 = v54[9];
        v70 = (_QWORD *)((char *)v57 + v69);
        v71 = *(_QWORD *)((char *)v57 + v69 + 8);
        v72 = (_QWORD *)((char *)v55 + v69);
        v73 = v72[1];
        if (v71)
        {
          if (!v73)
            return 0;
          if (*v70 != *v72 || v71 != v73)
          {
            v74 = sub_224F683CC();
            result = 0;
            if ((v74 & 1) == 0)
              return result;
          }
        }
        else if (v73)
        {
          return 0;
        }
        v75 = v98;
        sub_224E75F34((uint64_t)v57 + v54[10], v98, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v76 = v100;
        sub_224E75F34((uint64_t)v55 + v54[10], v100, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v77 = v62 + *(int *)(v96 + 48);
        sub_224E75F34(v75, v62, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
        sub_224E75F34(v76, v77, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
        v79 = v99;
        if (v78(v62, 1, v99) == 1)
        {
          sub_224E7601C(v76, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_224E7601C(v75, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v78(v77, 1, v79) == 1)
          {
            sub_224E7601C(v62, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
LABEL_48:
            v83 = v92[11];
            v84 = (_QWORD *)((char *)v57 + v83);
            v85 = *(_QWORD *)((char *)v57 + v83 + 8);
            v86 = (_QWORD *)((char *)v55 + v83);
            v87 = v86[1];
            if (v85)
            {
              if (v87 && (*v84 == *v86 && v85 == v87 || (sub_224F683CC() & 1) != 0))
                return 1;
            }
            else if (!v87)
            {
              return 1;
            }
            return 0;
          }
        }
        else
        {
          v80 = v95;
          sub_224E75F34(v62, v95, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v78(v77, 1, v79) != 1)
          {
            v81 = v94;
            sub_224EEED44(v77, v94);
            v82 = static FHIRDateTime.== infix(_:_:)(v80, v81);
            sub_224DDEAA0(v81, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            sub_224E7601C(v100, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224E7601C(v75, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224DDEAA0(v80, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            sub_224E7601C(v62, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
            if ((v82 & 1) == 0)
              return 0;
            goto LABEL_48;
          }
          sub_224E7601C(v100, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_224E7601C(v75, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_224DDEAA0(v80, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        }
        v46 = &qword_2557E02D8;
        v47 = &qword_2557E02D0;
        v48 = type metadata accessor for FHIRDateTime;
        v49 = v62;
LABEL_17:
        sub_224F0F248(v49, (unint64_t *)v46, v47, (void (*)(uint64_t))v48);
        return 0;
      }
    }
    else
    {
      v45 = (uint64_t)v93;
      sub_224E75F34((uint64_t)v21, (uint64_t)v93, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      if (v44(v43, 1, v14) != 1)
      {
        v50 = v101;
        (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v101, v43, v14);
        v51 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
        sub_224DDACD4((unint64_t *)&qword_2557E02B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
        v52 = sub_224F67B50();
        v53 = *(void (**)(char *, uint64_t))(v42 + 8);
        v53(v50, v14);
        sub_224E7601C((uint64_t)v28, (unint64_t *)&qword_2557E02A8, v51);
        sub_224E7601C((uint64_t)v30, (unint64_t *)&qword_2557E02A8, v51);
        v53((char *)v45, v14);
        sub_224E7601C((uint64_t)v21, (unint64_t *)&qword_2557E02A8, v51);
        if ((v52 & 1) == 0)
          return 0;
        goto LABEL_21;
      }
      sub_224E7601C((uint64_t)v28, (unint64_t *)&qword_2557E02A8, v40);
      sub_224E7601C((uint64_t)v30, (unint64_t *)&qword_2557E02A8, v40);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v45, v14);
    }
    v46 = &qword_2557E02B0;
    v47 = (unint64_t *)&qword_2557E02A8;
    v48 = MEMORY[0x24BDCDAC0];
    v49 = (uint64_t)v21;
    goto LABEL_17;
  }
  return result;
}

uint64_t type metadata accessor for Attachment()
{
  uint64_t result;

  result = qword_2557E3F78;
  if (!qword_2557E3F78)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_224F39158(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_224E63218(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

unint64_t sub_224F391A4()
{
  unint64_t result;

  result = qword_2557E3F00;
  if (!qword_2557E3F00)
  {
    result = MEMORY[0x22768ED24](&unk_224F75834, &type metadata for Attachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3F00);
  }
  return result;
}

void sub_224F391E8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224F391A4();
    v7 = a3(a1, &type metadata for Attachment.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_224F39244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Attachment();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_224F39288(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E0570, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t)&protocol conformance descriptor for Attachment);
  a1[2] = sub_224DDACD4(&qword_2557E0798, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t)&protocol conformance descriptor for Attachment);
  result = sub_224DDACD4(&qword_2557E3F10, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t)&protocol conformance descriptor for Attachment);
  a1[3] = result;
  return result;
}

uint64_t sub_224F39300()
{
  return sub_224DDACD4(&qword_2557E3F18, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t)&protocol conformance descriptor for Attachment);
}

uint64_t *initializeBufferWithCopyOfBuffer for Attachment(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(_BYTE *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  void (*v46)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _BYTE *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_224F675D4();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = a3[7];
    v18 = a3[8];
    v19 = (char *)v4 + v17;
    v20 = (char *)a2 + v17;
    *(_DWORD *)v19 = *(_DWORD *)v20;
    v19[4] = v20[4];
    v21 = (uint64_t *)((char *)v4 + v18);
    v22 = (uint64_t *)((char *)a2 + v18);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = a3[9];
    v25 = a3[10];
    v26 = (uint64_t *)((char *)v4 + v24);
    v27 = (uint64_t *)((char *)a2 + v24);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = (char *)v4 + v25;
    v30 = (char *)a2 + v25;
    v31 = type metadata accessor for FHIRDateTime();
    v32 = *(_QWORD *)(v31 - 8);
    v33 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33(v30, 1, v31))
    {
      sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      *v29 = *v30;
      *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
      *((_DWORD *)v29 + 4) = *((_DWORD *)v30 + 4);
      v35 = *((_QWORD *)v30 + 7);
      if (v35 == 1)
      {
        v36 = *(_OWORD *)(v30 + 40);
        *(_OWORD *)(v29 + 24) = *(_OWORD *)(v30 + 24);
        *(_OWORD *)(v29 + 40) = v36;
        *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
      }
      else
      {
        v29[24] = v30[24];
        *(_WORD *)(v29 + 25) = *(_WORD *)(v30 + 25);
        *(_OWORD *)(v29 + 28) = *(_OWORD *)(v30 + 28);
        *((_DWORD *)v29 + 11) = *((_DWORD *)v30 + 11);
        *((_QWORD *)v29 + 6) = *((_QWORD *)v30 + 6);
        *((_QWORD *)v29 + 7) = v35;
        swift_bridgeObjectRetain();
      }
      v37 = *(int *)(v31 + 28);
      __dst = &v29[v37];
      v38 = &v30[v37];
      v39 = sub_224F67874();
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
        memcpy(__dst, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v40 + 16))(__dst, v38, v39);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v39);
      }
      v42 = *(int *)(v31 + 32);
      v43 = &v29[v42];
      v44 = &v30[v42];
      v45 = v44[1];
      *v43 = *v44;
      v43[1] = v45;
      v46 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v32 + 56);
      swift_bridgeObjectRetain();
      v46(v29, 0, 1, v31);
    }
    v47 = a3[11];
    v48 = (uint64_t *)((char *)v4 + v47);
    v49 = (uint64_t *)((char *)a2 + v47);
    v50 = v49[1];
    *v48 = *v49;
    v48[1] = v50;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_224F675D4();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 40);
  v8 = type metadata accessor for FHIRDateTime();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    if (*(_QWORD *)(v7 + 56) != 1)
      swift_bridgeObjectRelease();
    v9 = v7 + *(int *)(v8 + 28);
    v10 = sub_224F67874();
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Attachment(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(_BYTE *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  void (*v44)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _BYTE *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_224F675D4();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[7];
  v16 = a3[8];
  v17 = (char *)a1 + v15;
  v18 = (char *)a2 + v15;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v17[4] = v18[4];
  v19 = (_QWORD *)((char *)a1 + v16);
  v20 = (_QWORD *)((char *)a2 + v16);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = a3[9];
  v23 = a3[10];
  v24 = (_QWORD *)((char *)a1 + v22);
  v25 = (_QWORD *)((char *)a2 + v22);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = (char *)a1 + v23;
  v28 = (char *)a2 + v23;
  v29 = type metadata accessor for FHIRDateTime();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31(v28, 1, v29))
  {
    sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    *v27 = *v28;
    *((_QWORD *)v27 + 1) = *((_QWORD *)v28 + 1);
    *((_DWORD *)v27 + 4) = *((_DWORD *)v28 + 4);
    v33 = *((_QWORD *)v28 + 7);
    if (v33 == 1)
    {
      v34 = *(_OWORD *)(v28 + 40);
      *(_OWORD *)(v27 + 24) = *(_OWORD *)(v28 + 24);
      *(_OWORD *)(v27 + 40) = v34;
      *((_QWORD *)v27 + 7) = *((_QWORD *)v28 + 7);
    }
    else
    {
      v27[24] = v28[24];
      *(_WORD *)(v27 + 25) = *(_WORD *)(v28 + 25);
      *(_OWORD *)(v27 + 28) = *(_OWORD *)(v28 + 28);
      *((_DWORD *)v27 + 11) = *((_DWORD *)v28 + 11);
      *((_QWORD *)v27 + 6) = *((_QWORD *)v28 + 6);
      *((_QWORD *)v27 + 7) = v33;
      swift_bridgeObjectRetain();
    }
    v35 = *(int *)(v29 + 28);
    __dst = &v27[v35];
    v36 = &v28[v35];
    v37 = sub_224F67874();
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v38 + 16))(__dst, v36, v37);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
    }
    v40 = *(int *)(v29 + 32);
    v41 = &v27[v40];
    v42 = &v28[v40];
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v30 + 56);
    swift_bridgeObjectRetain();
    v44(v27, 0, 1, v29);
  }
  v45 = a3[11];
  v46 = (_QWORD *)((char *)a1 + v45);
  v47 = (_QWORD *)((char *)a2 + v45);
  v48 = v47[1];
  *v46 = *v47;
  v46[1] = v48;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Attachment(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_BYTE *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 *v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  void (*v51)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t (*v59)(_BYTE *, uint64_t, uint64_t);
  int v60;
  uint64_t v61;
  size_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v72;
  _BYTE *__dst;
  void *__dsta;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_224F675D4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[7];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_DWORD *)v17;
  v16[4] = v17[4];
  *(_DWORD *)v16 = v18;
  v19 = a3[8];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = a3[9];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = a3[10];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for FHIRDateTime();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (v32)
    {
      sub_224DDEAA0((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_12:
      sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      goto LABEL_37;
    }
    *v26 = *v27;
    *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
    *((_WORD *)v26 + 8) = *((_WORD *)v27 + 8);
    *((_WORD *)v26 + 9) = *((_WORD *)v27 + 9);
    v37 = (__int128 *)(v26 + 24);
    v38 = (__int128 *)(v27 + 24);
    v39 = *((_QWORD *)v27 + 7);
    if (*((_QWORD *)v26 + 7) == 1)
    {
      if (v39 == 1)
      {
        v40 = *v38;
        v41 = *(_OWORD *)(v27 + 40);
        *((_QWORD *)v26 + 7) = *((_QWORD *)v27 + 7);
        *v37 = v40;
        *(_OWORD *)(v26 + 40) = v41;
      }
      else
      {
        v26[24] = v27[24];
        v26[25] = v27[25];
        v26[26] = v27[26];
        v54 = *(_OWORD *)(v27 + 28);
        *((_DWORD *)v26 + 11) = *((_DWORD *)v27 + 11);
        *(_OWORD *)(v26 + 28) = v54;
        *((_QWORD *)v26 + 6) = *((_QWORD *)v27 + 6);
        *((_QWORD *)v26 + 7) = *((_QWORD *)v27 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v39 == 1)
    {
      sub_224E2C9F4((uint64_t)(v26 + 24));
      v52 = *((_QWORD *)v27 + 7);
      v53 = *(_OWORD *)(v27 + 40);
      *v37 = *v38;
      *(_OWORD *)(v26 + 40) = v53;
      *((_QWORD *)v26 + 7) = v52;
    }
    else
    {
      v26[24] = v27[24];
      v26[25] = v27[25];
      v26[26] = v27[26];
      *((_DWORD *)v26 + 7) = *((_DWORD *)v27 + 7);
      *((_WORD *)v26 + 16) = *((_WORD *)v27 + 16);
      *((_WORD *)v26 + 17) = *((_WORD *)v27 + 17);
      *((_WORD *)v26 + 18) = *((_WORD *)v27 + 18);
      *((_WORD *)v26 + 19) = *((_WORD *)v27 + 19);
      *((_WORD *)v26 + 20) = *((_WORD *)v27 + 20);
      *((_WORD *)v26 + 21) = *((_WORD *)v27 + 21);
      *((_WORD *)v26 + 22) = *((_WORD *)v27 + 22);
      *((_WORD *)v26 + 23) = *((_WORD *)v27 + 23);
      *((_QWORD *)v26 + 6) = *((_QWORD *)v27 + 6);
      *((_QWORD *)v26 + 7) = *((_QWORD *)v27 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v55 = *(int *)(v28 + 28);
    v56 = &v26[v55];
    v57 = &v27[v55];
    v58 = sub_224F67874();
    v72 = *(_QWORD *)(v58 - 8);
    v59 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v72 + 48);
    __dsta = v56;
    LODWORD(v56) = v59(v56, 1, v58);
    v60 = v59(v57, 1, v58);
    if ((_DWORD)v56)
    {
      if (!v60)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v72 + 16))(__dsta, v57, v58);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v72 + 56))(__dsta, 0, 1, v58);
        goto LABEL_36;
      }
      sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      v62 = *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64);
      v63 = __dsta;
    }
    else
    {
      if (!v60)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v72 + 24))(__dsta, v57, v58);
        goto LABEL_36;
      }
      (*(void (**)(void *, uint64_t))(v72 + 8))(__dsta, v58);
      sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      v62 = *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64);
      v63 = __dsta;
    }
    memcpy(v63, v57, v62);
LABEL_36:
    v65 = *(int *)(v28 + 32);
    v66 = &v26[v65];
    v67 = &v27[v65];
    *v66 = *v67;
    v66[1] = v67[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v32)
    goto LABEL_12;
  *v26 = *v27;
  v34 = *((_QWORD *)v27 + 1);
  *((_DWORD *)v26 + 4) = *((_DWORD *)v27 + 4);
  *((_QWORD *)v26 + 1) = v34;
  if (*((_QWORD *)v27 + 7) == 1)
  {
    v35 = *(_OWORD *)(v27 + 24);
    v36 = *(_OWORD *)(v27 + 40);
    *((_QWORD *)v26 + 7) = *((_QWORD *)v27 + 7);
    *(_OWORD *)(v26 + 24) = v35;
    *(_OWORD *)(v26 + 40) = v36;
  }
  else
  {
    v26[24] = v27[24];
    v26[25] = v27[25];
    v26[26] = v27[26];
    v42 = *(_OWORD *)(v27 + 28);
    *((_DWORD *)v26 + 11) = *((_DWORD *)v27 + 11);
    *(_OWORD *)(v26 + 28) = v42;
    *((_QWORD *)v26 + 6) = *((_QWORD *)v27 + 6);
    *((_QWORD *)v26 + 7) = *((_QWORD *)v27 + 7);
    swift_bridgeObjectRetain();
  }
  v43 = *(int *)(v28 + 28);
  __dst = &v26[v43];
  v44 = &v27[v43];
  v45 = sub_224F67874();
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(__dst, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 16))(__dst, v44, v45);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v46 + 56))(__dst, 0, 1, v45);
  }
  v48 = *(int *)(v28 + 32);
  v49 = &v26[v48];
  v50 = &v27[v48];
  *v49 = *v50;
  v49[1] = v50[1];
  v51 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56);
  swift_bridgeObjectRetain();
  v51(v26, 0, 1, v28);
LABEL_37:
  v68 = a3[11];
  v69 = (_QWORD *)((char *)a1 + v68);
  v70 = (_QWORD *)((char *)a2 + v68);
  *v69 = *v70;
  v69[1] = v70[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for Attachment(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_224F675D4();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[7];
  v14 = a3[8];
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v15[4] = v16[4];
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  v17 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for FHIRDateTime();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
    *((_DWORD *)v18 + 4) = *((_DWORD *)v19 + 4);
    *(_OWORD *)(v18 + 24) = *(_OWORD *)(v19 + 24);
    *(_OWORD *)(v18 + 40) = *(_OWORD *)(v19 + 40);
    *((_QWORD *)v18 + 7) = *((_QWORD *)v19 + 7);
    v23 = *(int *)(v20 + 28);
    __dst = &v18[v23];
    v24 = &v19[v23];
    v25 = sub_224F67874();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 32))(__dst, v24, v25);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
    }
    *(_OWORD *)&v18[*(int *)(v20 + 32)] = *(_OWORD *)&v19[*(int *)(v20 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  return a1;
}

_QWORD *assignWithTake for Attachment(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_BYTE *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t (*v50)(_BYTE *, uint64_t, uint64_t);
  int v51;
  uint64_t v52;
  size_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  _BYTE *__dst;
  void *__dsta;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_224F675D4();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = a3[7];
  v18 = a3[8];
  v19 = (char *)a1 + v17;
  v20 = (char *)a2 + v17;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  v19[4] = v20[4];
  v21 = (_QWORD *)((char *)a1 + v18);
  v22 = (_QWORD *)((char *)a2 + v18);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[9];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  v30 = a3[10];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for FHIRDateTime();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (v37)
    {
      sub_224DDEAA0((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_12:
      sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      goto LABEL_32;
    }
    *v31 = *v32;
    *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
    *((_DWORD *)v31 + 4) = *((_DWORD *)v32 + 4);
    if (*((_QWORD *)v31 + 7) != 1)
    {
      v44 = *((_QWORD *)v32 + 7);
      if (v44 != 1)
      {
        v31[24] = v32[24];
        *(_WORD *)(v31 + 25) = *(_WORD *)(v32 + 25);
        *((_DWORD *)v31 + 7) = *((_DWORD *)v32 + 7);
        *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
        *((_QWORD *)v31 + 6) = *((_QWORD *)v32 + 6);
        *((_QWORD *)v31 + 7) = v44;
        swift_bridgeObjectRelease();
LABEL_23:
        v46 = *(int *)(v33 + 28);
        v47 = &v31[v46];
        v48 = &v32[v46];
        v49 = sub_224F67874();
        v67 = *(_QWORD *)(v49 - 8);
        v50 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v67 + 48);
        __dsta = v47;
        LODWORD(v47) = v50(v47, 1, v49);
        v51 = v50(v48, 1, v49);
        if ((_DWORD)v47)
        {
          if (!v51)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v67 + 32))(__dsta, v48, v49);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(__dsta, 0, 1, v49);
            goto LABEL_31;
          }
          sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
          v53 = *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64);
          v54 = __dsta;
        }
        else
        {
          if (!v51)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v67 + 40))(__dsta, v48, v49);
            goto LABEL_31;
          }
          (*(void (**)(void *, uint64_t))(v67 + 8))(__dsta, v49);
          sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
          v53 = *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64);
          v54 = __dsta;
        }
        memcpy(v54, v48, v53);
LABEL_31:
        v56 = *(int *)(v33 + 32);
        v57 = &v31[v56];
        v58 = (uint64_t *)&v32[v56];
        v60 = *v58;
        v59 = v58[1];
        *v57 = v60;
        v57[1] = v59;
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
      sub_224E2C9F4((uint64_t)(v31 + 24));
    }
    v45 = *(_OWORD *)(v32 + 40);
    *(_OWORD *)(v31 + 24) = *(_OWORD *)(v32 + 24);
    *(_OWORD *)(v31 + 40) = v45;
    *((_QWORD *)v31 + 7) = *((_QWORD *)v32 + 7);
    goto LABEL_23;
  }
  if (v37)
    goto LABEL_12;
  *v31 = *v32;
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  *((_DWORD *)v31 + 4) = *((_DWORD *)v32 + 4);
  *(_OWORD *)(v31 + 24) = *(_OWORD *)(v32 + 24);
  *(_OWORD *)(v31 + 40) = *(_OWORD *)(v32 + 40);
  *((_QWORD *)v31 + 7) = *((_QWORD *)v32 + 7);
  v39 = *(int *)(v33 + 28);
  __dst = &v31[v39];
  v40 = &v32[v39];
  v41 = sub_224F67874();
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(__dst, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v42 + 32))(__dst, v40, v41);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v41);
  }
  *(_OWORD *)&v31[*(int *)(v33 + 32)] = *(_OWORD *)&v32[*(int *)(v33 + 32)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_32:
  v61 = a3[11];
  v62 = (_QWORD *)((char *)a1 + v61);
  v63 = (_QWORD *)((char *)a2 + v61);
  v65 = *v63;
  v64 = v63[1];
  *v62 = v65;
  v62[1] = v64;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Attachment()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F3A864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Attachment()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F3A930(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_224F3A9EC()
{
  unint64_t v0;
  unint64_t v1;

  sub_224E63218(319, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v0 <= 0x3F)
  {
    sub_224E63218(319, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for Attachment.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_224F3AAFC + 4 * byte_224F755ED[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_224F3AB30 + 4 * byte_224F755E8[v4]))();
}

uint64_t sub_224F3AB30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F3AB38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224F3AB40);
  return result;
}

uint64_t sub_224F3AB4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224F3AB54);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_224F3AB58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F3AB60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Attachment.CodingKeys()
{
  return &type metadata for Attachment.CodingKeys;
}

unint64_t sub_224F3AB80()
{
  unint64_t result;

  result = qword_2557E3FC8;
  if (!qword_2557E3FC8)
  {
    result = MEMORY[0x22768ED24](&unk_224F7580C, &type metadata for Attachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3FC8);
  }
  return result;
}

unint64_t sub_224F3ABC8()
{
  unint64_t result;

  result = qword_2557E3FD0;
  if (!qword_2557E3FD0)
  {
    result = MEMORY[0x22768ED24](&unk_224F7577C, &type metadata for Attachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3FD0);
  }
  return result;
}

unint64_t sub_224F3AC10()
{
  unint64_t result;

  result = qword_2557E3FD8;
  if (!qword_2557E3FD8)
  {
    result = MEMORY[0x22768ED24](&unk_224F757A4, &type metadata for Attachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3FD8);
  }
  return result;
}

uint64_t sub_224F3AC54(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x54746E65746E6F63 && a2 == 0xEB00000000657079;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1752392040 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E6F697461657263 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t Annotation.text.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Annotation.time.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Annotation() + 20);
  return sub_224F0F8C4(v3, a1);
}

uint64_t type metadata accessor for Annotation()
{
  uint64_t result;

  result = qword_2557E4060;
  if (!qword_2557E4060)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Annotation.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  type metadata accessor for Annotation();
  return sub_224DF2AC8();
}

uint64_t sub_224F3B068()
{
  _BYTE *v0;

  if (*v0)
    return 1701669236;
  else
    return 1954047348;
}

uint64_t sub_224F3B08C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224F3CBFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224F3B0B0()
{
  sub_224F3B8EC();
  return sub_224F685B8();
}

uint64_t sub_224F3B0D8()
{
  sub_224F3B8EC();
  return sub_224F685C4();
}

uint64_t Annotation.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  sub_224F3B930(0, &qword_2557E3FE0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F3B8EC();
  sub_224F68594();
  v9[15] = 0;
  sub_224F68348();
  if (!v1)
  {
    type metadata accessor for Annotation();
    v9[14] = 1;
    type metadata accessor for FHIRDateTime();
    sub_224DDACD4(&qword_2557E0748, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68330();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Annotation.hashValue.getter()
{
  sub_224F68510();
  sub_224F67C34();
  type metadata accessor for Annotation();
  sub_224DF2AC8();
  return sub_224F6854C();
}

uint64_t Annotation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  char v21;

  v17 = a2;
  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  MEMORY[0x24BDAC7A8](v4);
  v18 = (char *)&v16 - v5;
  sub_224F3B930(0, &qword_2557E3FF0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v19 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - v8;
  v10 = type metadata accessor for Annotation();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F3B8EC();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v16 = a1;
  v13 = (uint64_t)v18;
  v21 = 0;
  *v12 = sub_224F682AC();
  v12[1] = v14;
  type metadata accessor for FHIRDateTime();
  v20 = 1;
  sub_224DDACD4(&qword_2557E04F0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
  sub_224F68294();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v19);
  sub_224F10534(v13, (uint64_t)v12 + *(int *)(v10 + 20));
  sub_224F3B98C((uint64_t)v12, v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return sub_224DDEAA0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
}

uint64_t sub_224F3B518@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Annotation.init(from:)(a1, a2);
}

uint64_t sub_224F3B52C(_QWORD *a1)
{
  return Annotation.encode(to:)(a1);
}

uint64_t sub_224F3B540()
{
  sub_224F68510();
  sub_224F67C34();
  sub_224DF2AC8();
  return sub_224F6854C();
}

uint64_t sub_224F3B594()
{
  sub_224F67C34();
  return sub_224DF2AC8();
}

uint64_t sub_224F3B5D4()
{
  sub_224F68510();
  sub_224F67C34();
  sub_224DF2AC8();
  return sub_224F6854C();
}

BOOL _s23HealthRecordsExtraction10AnnotationV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char v21;
  _BOOL8 result;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  char *v29;

  v4 = type metadata accessor for FHIRDateTime();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F123FC();
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v28 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v28 - v19;
  if (*a1 == *a2 && a1[1] == a2[1] || (v21 = sub_224F683CC(), result = 0, (v21 & 1) != 0))
  {
    v29 = v7;
    v23 = type metadata accessor for Annotation();
    sub_224F0F8C4((uint64_t)a1 + *(int *)(v23 + 20), (uint64_t)v20);
    sub_224F0F8C4((uint64_t)a2 + *(int *)(v23 + 20), (uint64_t)v18);
    v24 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_224F0F8C4((uint64_t)v20, (uint64_t)v11);
    sub_224F0F8C4((uint64_t)v18, v24);
    v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v25((uint64_t)v11, 1, v4) == 1)
    {
      sub_224F0F918((uint64_t)v18);
      sub_224F0F918((uint64_t)v20);
      if (v25(v24, 1, v4) == 1)
      {
        sub_224F0F918((uint64_t)v11);
        return 1;
      }
    }
    else
    {
      sub_224F0F8C4((uint64_t)v11, (uint64_t)v15);
      if (v25(v24, 1, v4) != 1)
      {
        v26 = (uint64_t)v29;
        sub_224EEED44(v24, (uint64_t)v29);
        v27 = _s23HealthRecordsExtraction12FHIRDateTimeV2eeoiySbAC_ACtFZ_0((uint64_t)v15, v26);
        sub_224DDEAA0(v26, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        sub_224F0F918((uint64_t)v18);
        sub_224F0F918((uint64_t)v20);
        sub_224DDEAA0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        sub_224F0F918((uint64_t)v11);
        return v27;
      }
      sub_224F0F918((uint64_t)v18);
      sub_224F0F918((uint64_t)v20);
      sub_224DDEAA0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    }
    sub_224DDEAA0((uint64_t)v11, (uint64_t (*)(_QWORD))sub_224F123FC);
    return 0;
  }
  return result;
}

unint64_t sub_224F3B8EC()
{
  unint64_t result;

  result = qword_2557E3FE8;
  if (!qword_2557E3FE8)
  {
    result = MEMORY[0x22768ED24](&unk_224F75A74, &type metadata for Annotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3FE8);
  }
  return result;
}

void sub_224F3B930(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224F3B8EC();
    v7 = a3(a1, &type metadata for Annotation.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_224F3B98C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Annotation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_224F3B9D0(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E0518, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t)&protocol conformance descriptor for Annotation);
  a1[2] = sub_224DDACD4(&qword_2557E0768, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t)&protocol conformance descriptor for Annotation);
  result = sub_224DDACD4(&qword_2557E3FF8, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t)&protocol conformance descriptor for Annotation);
  a1[3] = result;
  return result;
}

uint64_t sub_224F3BA48()
{
  return sub_224DDACD4(&qword_2557E4000, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t)&protocol conformance descriptor for Annotation);
}

uint64_t *initializeBufferWithCopyOfBuffer for Annotation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(_BYTE *, _QWORD, uint64_t, uint64_t);

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for FHIRDateTime();
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      *v7 = *v8;
      *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
      *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
      v14 = *((_QWORD *)v8 + 7);
      if (v14 == 1)
      {
        v15 = *(_OWORD *)(v8 + 40);
        *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
        *(_OWORD *)(v7 + 40) = v15;
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
      }
      else
      {
        v7[24] = v8[24];
        *(_WORD *)(v7 + 25) = *(_WORD *)(v8 + 25);
        *(_OWORD *)(v7 + 28) = *(_OWORD *)(v8 + 28);
        *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
        *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
        *((_QWORD *)v7 + 7) = v14;
        swift_bridgeObjectRetain();
      }
      v16 = *(int *)(v9 + 28);
      v17 = &v7[v16];
      v18 = &v8[v16];
      v19 = sub_224F67874();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v22 = *(int *)(v9 + 32);
      v23 = &v7[v22];
      v24 = &v8[v22];
      v25 = v24[1];
      *v23 = *v24;
      v23[1] = v25;
      v26 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56);
      swift_bridgeObjectRetain();
      v26(v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t destroy for Annotation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for FHIRDateTime();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(v4 + 56) != 1)
      swift_bridgeObjectRelease();
    v7 = v4 + *(int *)(v5 + 28);
    v8 = sub_224F67874();
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for Annotation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(_BYTE *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(_BYTE *, _QWORD, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for FHIRDateTime();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    *v6 = *v7;
    *((_QWORD *)v6 + 1) = *((_QWORD *)v7 + 1);
    *((_DWORD *)v6 + 4) = *((_DWORD *)v7 + 4);
    v12 = *((_QWORD *)v7 + 7);
    if (v12 == 1)
    {
      v13 = *(_OWORD *)(v7 + 40);
      *(_OWORD *)(v6 + 24) = *(_OWORD *)(v7 + 24);
      *(_OWORD *)(v6 + 40) = v13;
      *((_QWORD *)v6 + 7) = *((_QWORD *)v7 + 7);
    }
    else
    {
      v6[24] = v7[24];
      *(_WORD *)(v6 + 25) = *(_WORD *)(v7 + 25);
      *(_OWORD *)(v6 + 28) = *(_OWORD *)(v7 + 28);
      *((_DWORD *)v6 + 11) = *((_DWORD *)v7 + 11);
      *((_QWORD *)v6 + 6) = *((_QWORD *)v7 + 6);
      *((_QWORD *)v6 + 7) = v12;
      swift_bridgeObjectRetain();
    }
    v14 = *(int *)(v8 + 28);
    v15 = &v6[v14];
    v16 = &v7[v14];
    v17 = sub_224F67874();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v20 = *(int *)(v8 + 32);
    v21 = &v6[v20];
    v22 = &v7[v20];
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56);
    swift_bridgeObjectRetain();
    v24(v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *assignWithCopy for Annotation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void (*v33)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(_BYTE *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for FHIRDateTime();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_6:
      sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      return a1;
    }
    *v7 = *v8;
    *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
    *((_WORD *)v7 + 8) = *((_WORD *)v8 + 8);
    *((_WORD *)v7 + 9) = *((_WORD *)v8 + 9);
    v18 = (__int128 *)(v7 + 24);
    v19 = (__int128 *)(v8 + 24);
    v20 = *((_QWORD *)v8 + 7);
    if (*((_QWORD *)v7 + 7) == 1)
    {
      if (v20 == 1)
      {
        v21 = *v19;
        v22 = *(_OWORD *)(v8 + 40);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        *v18 = v21;
        *(_OWORD *)(v7 + 40) = v22;
      }
      else
      {
        v7[24] = v8[24];
        v7[25] = v8[25];
        v7[26] = v8[26];
        v36 = *(_OWORD *)(v8 + 28);
        *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(v7 + 28) = v36;
        *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v20 == 1)
    {
      sub_224E2C9F4((uint64_t)(v7 + 24));
      v34 = *((_QWORD *)v8 + 7);
      v35 = *(_OWORD *)(v8 + 40);
      *v18 = *v19;
      *(_OWORD *)(v7 + 40) = v35;
      *((_QWORD *)v7 + 7) = v34;
    }
    else
    {
      v7[24] = v8[24];
      v7[25] = v8[25];
      v7[26] = v8[26];
      *((_DWORD *)v7 + 7) = *((_DWORD *)v8 + 7);
      *((_WORD *)v7 + 16) = *((_WORD *)v8 + 16);
      *((_WORD *)v7 + 17) = *((_WORD *)v8 + 17);
      *((_WORD *)v7 + 18) = *((_WORD *)v8 + 18);
      *((_WORD *)v7 + 19) = *((_WORD *)v8 + 19);
      *((_WORD *)v7 + 20) = *((_WORD *)v8 + 20);
      *((_WORD *)v7 + 21) = *((_WORD *)v8 + 21);
      *((_WORD *)v7 + 22) = *((_WORD *)v8 + 22);
      *((_WORD *)v7 + 23) = *((_WORD *)v8 + 23);
      *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
      *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v37 = *(int *)(v9 + 28);
    v38 = &v7[v37];
    v39 = &v8[v37];
    v40 = sub_224F67874();
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v41 + 48);
    v43 = v42(v38, 1, v40);
    v44 = v42(v39, 1, v40);
    if (v43)
    {
      if (!v44)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 16))(v38, v39, v40);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
LABEL_27:
        v46 = *(int *)(v9 + 32);
        v47 = &v7[v46];
        v48 = &v8[v46];
        *v47 = *v48;
        v47[1] = v48[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    else
    {
      if (!v44)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 24))(v38, v39, v40);
        goto LABEL_27;
      }
      (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v38, v40);
    }
    sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_27;
  }
  if (v13)
    goto LABEL_6;
  *v7 = *v8;
  v15 = *((_QWORD *)v8 + 1);
  *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
  *((_QWORD *)v7 + 1) = v15;
  if (*((_QWORD *)v8 + 7) == 1)
  {
    v16 = *(_OWORD *)(v8 + 24);
    v17 = *(_OWORD *)(v8 + 40);
    *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
    *(_OWORD *)(v7 + 24) = v16;
    *(_OWORD *)(v7 + 40) = v17;
  }
  else
  {
    v7[24] = v8[24];
    v7[25] = v8[25];
    v7[26] = v8[26];
    v23 = *(_OWORD *)(v8 + 28);
    *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
    *(_OWORD *)(v7 + 28) = v23;
    *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
    *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
    swift_bridgeObjectRetain();
  }
  v24 = *(int *)(v9 + 28);
  v25 = &v7[v24];
  v26 = &v8[v24];
  v27 = sub_224F67874();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = *(int *)(v9 + 32);
  v31 = &v7[v30];
  v32 = &v8[v30];
  *v31 = *v32;
  v31[1] = v32[1];
  v33 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  v33(v7, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for Annotation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for FHIRDateTime();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *v5 = *v6;
    *((_QWORD *)v5 + 1) = *((_QWORD *)v6 + 1);
    *((_DWORD *)v5 + 4) = *((_DWORD *)v6 + 4);
    *(_OWORD *)(v5 + 24) = *(_OWORD *)(v6 + 24);
    *(_OWORD *)(v5 + 40) = *(_OWORD *)(v6 + 40);
    *((_QWORD *)v5 + 7) = *((_QWORD *)v6 + 7);
    v10 = *(int *)(v7 + 28);
    v11 = &v5[v10];
    v12 = &v6[v10];
    v13 = sub_224F67874();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(_OWORD *)&v5[*(int *)(v7 + 32)] = *(_OWORD *)&v6[*(int *)(v7 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for Annotation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_BYTE *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for FHIRDateTime();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_224DDEAA0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_6:
      sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      return a1;
    }
    *v8 = *v9;
    *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
    *((_DWORD *)v8 + 4) = *((_DWORD *)v9 + 4);
    if (*((_QWORD *)v8 + 7) != 1)
    {
      v22 = *((_QWORD *)v9 + 7);
      if (v22 != 1)
      {
        v8[24] = v9[24];
        *(_WORD *)(v8 + 25) = *(_WORD *)(v9 + 25);
        *((_DWORD *)v8 + 7) = *((_DWORD *)v9 + 7);
        *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
        *((_QWORD *)v8 + 6) = *((_QWORD *)v9 + 6);
        *((_QWORD *)v8 + 7) = v22;
        swift_bridgeObjectRelease();
LABEL_16:
        v24 = *(int *)(v10 + 28);
        v25 = &v8[v24];
        v26 = &v9[v24];
        v27 = sub_224F67874();
        v28 = *(_QWORD *)(v27 - 8);
        v29 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v28 + 48);
        v30 = v29(v25, 1, v27);
        v31 = v29(v26, 1, v27);
        if (v30)
        {
          if (!v31)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v28 + 32))(v25, v26, v27);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
LABEL_22:
            v33 = *(int *)(v10 + 32);
            v34 = &v8[v33];
            v35 = (uint64_t *)&v9[v33];
            v37 = *v35;
            v36 = v35[1];
            *v34 = v37;
            v34[1] = v36;
            swift_bridgeObjectRelease();
            return a1;
          }
        }
        else
        {
          if (!v31)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v28 + 40))(v25, v26, v27);
            goto LABEL_22;
          }
          (*(void (**)(_BYTE *, uint64_t))(v28 + 8))(v25, v27);
        }
        sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        goto LABEL_22;
      }
      sub_224E2C9F4((uint64_t)(v8 + 24));
    }
    v23 = *(_OWORD *)(v9 + 40);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
    *(_OWORD *)(v8 + 40) = v23;
    *((_QWORD *)v8 + 7) = *((_QWORD *)v9 + 7);
    goto LABEL_16;
  }
  if (v14)
    goto LABEL_6;
  *v8 = *v9;
  *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
  *((_DWORD *)v8 + 4) = *((_DWORD *)v9 + 4);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
  *((_QWORD *)v8 + 7) = *((_QWORD *)v9 + 7);
  v16 = *(int *)(v10 + 28);
  v17 = &v8[v16];
  v18 = &v9[v16];
  v19 = sub_224F67874();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  *(_OWORD *)&v8[*(int *)(v10 + 32)] = *(_OWORD *)&v9[*(int *)(v10 + 32)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Annotation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F3C8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Annotation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F3C950(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_224F3C9D4()
{
  unint64_t v0;

  sub_224E63218(319, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for Annotation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_224F3CAA4 + 4 * byte_224F75895[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_224F3CAD8 + 4 * byte_224F75890[v4]))();
}

uint64_t sub_224F3CAD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F3CAE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224F3CAE8);
  return result;
}

uint64_t sub_224F3CAF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224F3CAFCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_224F3CB00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F3CB08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Annotation.CodingKeys()
{
  return &type metadata for Annotation.CodingKeys;
}

unint64_t sub_224F3CB28()
{
  unint64_t result;

  result = qword_2557E4098;
  if (!qword_2557E4098)
  {
    result = MEMORY[0x22768ED24](&unk_224F75A4C, &type metadata for Annotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E4098);
  }
  return result;
}

unint64_t sub_224F3CB70()
{
  unint64_t result;

  result = qword_2557E40A0;
  if (!qword_2557E40A0)
  {
    result = MEMORY[0x22768ED24](&unk_224F759BC, &type metadata for Annotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E40A0);
  }
  return result;
}

unint64_t sub_224F3CBB8()
{
  unint64_t result;

  result = qword_2557E40A8;
  if (!qword_2557E40A8)
  {
    result = MEMORY[0x22768ED24](&unk_224F759E4, &type metadata for Annotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E40A8);
  }
  return result;
}

uint64_t sub_224F3CBFC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701669236 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_224F3CCCC(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t result;
  unsigned __int8 v5;
  unsigned int v6;

  if (a3 < a1)
    return 0;
  if (a3 != a1)
    return 1;
  if ((a4 & 0x100) != 0)
    v5 = 0;
  else
    v5 = a4;
  if ((a2 & 0x100) == 0)
  {
    result = 0;
    if (v5 < a2)
      return result;
  }
  if ((a4 & 0x100) == 0)
  {
    result = 1;
    if ((a2 & 0x100) != 0 || a4 != a2)
      return result;
    goto LABEL_15;
  }
  if ((a2 & 0x100) == 0)
    return 1;
LABEL_15:
  v6 = HIWORD(a4);
  if ((a4 & 0x1000000) != 0)
    LOBYTE(v6) = 0;
  if (v6 >= BYTE2(a2))
    return 1;
  else
    return HIBYTE(a2) & 1;
}

BOOL sub_224F3CD4C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  _BOOL8 result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(unsigned __int8 *)(a2 + 1);
  v3 = *(unsigned __int8 *)(a1 + 1);
  result = 0;
  if (v2 >= v3)
  {
    if (v2 != v3)
      return 1;
    v5 = *(unsigned __int8 *)(a2 + 2);
    v6 = *(unsigned __int8 *)(a1 + 2);
    if (v5 >= v6)
    {
      if (v5 != v6)
        return 1;
      sub_224F0092C();
      v8 = v7;
      v10 = v9;
      sub_224F0092C();
      if (v8 >= v11 && (v8 != v11 || v10 >= v12))
        return 1;
    }
  }
  return result;
}

uint64_t sub_224F3CDFC(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t result;
  unsigned __int8 v5;
  unsigned int v6;

  if (a1 < a3)
    return 0;
  if (a1 != a3)
    return 1;
  if ((a2 & 0x100) != 0)
    v5 = 0;
  else
    v5 = a2;
  if ((a4 & 0x100) == 0)
  {
    result = 0;
    if (v5 < a4)
      return result;
  }
  if ((a2 & 0x100) == 0)
  {
    result = 1;
    if ((a4 & 0x100) != 0 || a2 != a4)
      return result;
    goto LABEL_15;
  }
  if ((a4 & 0x100) == 0)
    return 1;
LABEL_15:
  v6 = HIWORD(a2);
  if ((a2 & 0x1000000) != 0)
    LOBYTE(v6) = 0;
  if (v6 >= BYTE2(a4))
    return 1;
  else
    return HIBYTE(a4) & 1;
}

BOOL sub_224F3CE7C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  _BOOL8 result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(unsigned __int8 *)(a1 + 1);
  v3 = *(unsigned __int8 *)(a2 + 1);
  result = 0;
  if (v2 >= v3)
  {
    if (v2 != v3)
      return 1;
    v5 = *(unsigned __int8 *)(a1 + 2);
    v6 = *(unsigned __int8 *)(a2 + 2);
    if (v5 >= v6)
    {
      if (v5 != v6)
        return 1;
      sub_224F0092C();
      v8 = v7;
      v10 = v9;
      sub_224F0092C();
      if (v8 >= v11 && (v8 != v11 || v10 >= v12))
        return 1;
    }
  }
  return result;
}

BOOL sub_224F3CF28(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  _BOOL8 result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(unsigned __int8 *)(a2 + 1);
  v3 = *(unsigned __int8 *)(a1 + 1);
  result = 1;
  if (v2 >= v3)
  {
    if (v2 != v3)
      return 0;
    v5 = *(unsigned __int8 *)(a2 + 2);
    v6 = *(unsigned __int8 *)(a1 + 2);
    if (v5 >= v6)
    {
      if (v5 != v6)
        return 0;
      sub_224F0092C();
      v8 = v7;
      v10 = v9;
      sub_224F0092C();
      if (v8 >= v11 && (v8 != v11 || v10 >= v12))
        return 0;
    }
  }
  return result;
}

BOOL sub_224F3CFD8(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 result;
  unsigned __int8 v5;
  unsigned int v6;

  if (a3 < a1)
    return 1;
  if (a3 != a1)
    return 0;
  if ((a4 & 0x100) != 0)
    v5 = 0;
  else
    v5 = a4;
  if ((a2 & 0x100) == 0 && v5 < a2)
    return 1;
  if ((a4 & 0x100) == 0)
  {
    result = 0;
    if ((a2 & 0x100) != 0 || a4 != a2)
      return result;
    goto LABEL_15;
  }
  if ((a2 & 0x100) == 0)
    return 0;
LABEL_15:
  v6 = HIWORD(a4);
  if ((a4 & 0x1000000) != 0)
    LOBYTE(v6) = 0;
  return (a2 & 0x1000000) == 0 && v6 < BYTE2(a2);
}

unint64_t static FHIRTime.parse(from:expectAtEnd:)@<X0>(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t result;
  unint64_t v6;
  unint64_t v7;
  __int16 v8;
  __int16 v9;
  unint64_t v10;
  __int16 v11;
  __int16 v12;
  char v13;
  char v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  __int16 v23;
  char v24;
  char v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned int v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  result = sub_224F3E6DC(a1, a2, &v27);
  if (!v3)
  {
    v6 = v29;
    LOWORD(v7) = v30;
    v23 = v31;
    v8 = v32;
    v9 = v33;
    v22 = v34;
    LOWORD(v10) = v35;
    v11 = v36;
    v12 = v37;
    v40 = v38;
    v26 = v39;
    if (v27 >= 0x17u)
      v13 = 23;
    else
      v13 = v27;
    if (v28 >= 0x3Bu)
      v14 = 59;
    else
      v14 = v28;
    v24 = v14;
    v25 = v13;
    MEMORY[0x22768E034](result, 60.0);
    v21 = v6;
    LOWORD(v6) = v23;
    v20 = v9;
    LOWORD(v15) = v22;
    if ((sub_224F67F88() & 1) != 0)
    {
      result = MEMORY[0x22768E034](60.0);
      v11 = v16;
      v6 = HIWORD(result);
      v18 = v17 >> 16;
      v15 = HIDWORD(v17);
      v10 = HIWORD(v17);
      v19 = HIWORD(v16);
      v7 = HIDWORD(result);
      v8 = v17;
    }
    else
    {
      result = v21;
      LOWORD(v19) = v12;
      LOWORD(v18) = v20;
    }
    *(_BYTE *)a3 = 1;
    *(_BYTE *)(a3 + 1) = v25;
    *(_BYTE *)(a3 + 2) = v24;
    *(_DWORD *)(a3 + 4) = result;
    *(_WORD *)(a3 + 8) = v7;
    *(_WORD *)(a3 + 10) = v6;
    *(_WORD *)(a3 + 12) = v8;
    *(_WORD *)(a3 + 14) = v18;
    *(_WORD *)(a3 + 16) = v15;
    *(_WORD *)(a3 + 18) = v10;
    *(_WORD *)(a3 + 20) = v11;
    *(_WORD *)(a3 + 22) = v19;
    *(_QWORD *)(a3 + 24) = v40;
    *(_QWORD *)(a3 + 32) = v26;
  }
  return result;
}

uint64_t FHIRTime.description.getter()
{
  uint64_t v0;
  char v1;
  char v2;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_BYTE *)(v0 + 1);
  v2 = *(_BYTE *)(v0 + 2);
  if (*(_BYTE *)v0 != 1 || *(_QWORD *)(v0 + 32) == 0)
  {
    if (qword_2557E01A8 != -1)
      swift_once();
    v4 = (void *)qword_2557FC990;
    v5 = (void *)sub_224F67F7C();
    v6 = objc_msgSend(v4, sel_stringForObjectValue_, v5, 0x3230253A64323025, 0xEA00000000003A64);

    if (v6)
    {
      sub_224F67B80();

    }
    sub_224F67C94();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F67C94();
  }
  sub_224DDEA0C(0, &qword_2557E1820, (uint64_t (*)(uint64_t))sub_224E617D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_224F6DF20;
  v8 = MEMORY[0x24BEE4260];
  v9 = MEMORY[0x24BEE42B0];
  *(_QWORD *)(v7 + 56) = MEMORY[0x24BEE4260];
  *(_QWORD *)(v7 + 64) = v9;
  *(_BYTE *)(v7 + 32) = v1;
  *(_QWORD *)(v7 + 96) = v8;
  *(_QWORD *)(v7 + 104) = v9;
  *(_BYTE *)(v7 + 72) = v2;
  v10 = sub_224F67BA4();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t FHIRTime.hour.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t FHIRTime.hour.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 0x17u)
    v2 = 23;
  *(_BYTE *)(v1 + 1) = v2;
  return result;
}

uint64_t (*FHIRTime.hour.modify(_QWORD *a1))(uint64_t result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_224F3D3D0;
}

uint64_t sub_224F3D3D0(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && *(unsigned __int8 *)(*(_QWORD *)result + 1) >= 0x18u)
    *(_BYTE *)(*(_QWORD *)result + 1) = 23;
  return result;
}

uint64_t FHIRTime.minute.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t FHIRTime.minute.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 0x3Bu)
    v2 = 59;
  *(_BYTE *)(v1 + 2) = v2;
  return result;
}

uint64_t (*FHIRTime.minute.modify(_QWORD *a1))(uint64_t result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_224F3D424;
}

uint64_t sub_224F3D424(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && *(unsigned __int8 *)(*(_QWORD *)result + 2) >= 0x3Cu)
    *(_BYTE *)(*(_QWORD *)result + 2) = 59;
  return result;
}

uint64_t FHIRTime.second.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 4);
}

uint64_t sub_224F3D454(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  uint64_t result;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;

  v3 = *(_WORD *)(a1 + 4);
  v4 = *(_WORD *)(a1 + 8);
  v5 = *(_WORD *)(a1 + 10);
  v6 = *(_WORD *)(a1 + 12);
  v7 = *(_WORD *)(a1 + 16);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)a1;
  *(_WORD *)(a2 + 8) = v3;
  *(_WORD *)(a2 + 10) = *(_WORD *)(a1 + 6);
  *(_WORD *)(a2 + 12) = v4;
  *(_WORD *)(a2 + 14) = v5;
  *(_WORD *)(a2 + 16) = v6;
  *(_WORD *)(a2 + 18) = *(_WORD *)(a1 + 14);
  *(_WORD *)(a2 + 20) = v7;
  *(_WORD *)(a2 + 22) = *(_WORD *)(a1 + 18);
  sub_224F67F70();
  result = sub_224F67F88();
  if ((result & 1) != 0)
  {
    result = MEMORY[0x22768E034](60.0);
    *(_QWORD *)(a2 + 4) = result;
    *(_WORD *)(a2 + 12) = v9;
    *(_WORD *)(a2 + 14) = v10;
    *(_WORD *)(a2 + 16) = v11;
    *(_WORD *)(a2 + 18) = v12;
    *(_WORD *)(a2 + 20) = v13;
    *(_WORD *)(a2 + 22) = v14;
  }
  *(_BYTE *)a2 = 0;
  return result;
}

uint64_t FHIRTime.second.setter(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t result;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;

  *(_QWORD *)(v3 + 4) = a1;
  *(_QWORD *)(v3 + 12) = a2;
  *(_DWORD *)(v3 + 20) = a3;
  sub_224F67F70();
  result = sub_224F67F88();
  if ((result & 1) != 0)
  {
    result = MEMORY[0x22768E034](60.0);
    *(_QWORD *)(v3 + 4) = result;
    *(_WORD *)(v3 + 12) = v5;
    *(_WORD *)(v3 + 14) = v6;
    *(_WORD *)(v3 + 16) = v7;
    *(_WORD *)(v3 + 18) = v8;
    *(_WORD *)(v3 + 20) = v9;
    *(_WORD *)(v3 + 22) = v10;
  }
  *(_BYTE *)v3 = 0;
  return result;
}

uint64_t (*FHIRTime.second.modify(_QWORD *a1))(uint64_t result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_224F3D630;
}

uint64_t sub_224F3D630(uint64_t result, char a2)
{
  uint64_t v2;
  __int16 v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;

  if ((a2 & 1) == 0)
  {
    v2 = *(_QWORD *)result;
    sub_224F67F70();
    result = sub_224F67F88();
    if ((result & 1) != 0)
    {
      result = MEMORY[0x22768E034](60.0);
      *(_QWORD *)(v2 + 4) = result;
      *(_WORD *)(v2 + 12) = v3;
      *(_WORD *)(v2 + 14) = v4;
      *(_WORD *)(v2 + 16) = v5;
      *(_WORD *)(v2 + 18) = v6;
      *(_WORD *)(v2 + 20) = v7;
      *(_WORD *)(v2 + 22) = v8;
    }
    *(_BYTE *)v2 = 0;
  }
  return result;
}

uint64_t FHIRTime.originalSecondsString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FHIRTime.init(hour:minute:second:)@<X0>(unsigned __int8 a1@<W0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  char v15;
  char v16;

  MEMORY[0x22768E034](60.0);
  result = sub_224F67F88();
  if ((result & 1) != 0)
  {
    result = MEMORY[0x22768E034](60.0);
    a3 = result;
    a4 = v13;
    a5 = v14;
  }
  *(_BYTE *)a6 = 1;
  v15 = a2;
  if (a2 >= 0x3Bu)
    v15 = 59;
  v16 = a1;
  if (a1 >= 0x17u)
    v16 = 23;
  *(_BYTE *)(a6 + 1) = v16;
  *(_BYTE *)(a6 + 2) = v15;
  *(_QWORD *)(a6 + 4) = a3;
  *(_QWORD *)(a6 + 12) = a4;
  *(_DWORD *)(a6 + 20) = a5;
  *(_QWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 32) = 0;
  return result;
}

void FHIRTime.init(_:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  void *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  int v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;

  v3 = objc_allocWithZone(MEMORY[0x24BDD17A8]);
  v4 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v5 = (char *)objc_msgSend(v3, sel_initWithString_, v4);

  v6 = sub_224F3E6DC(v5, 1, &v32);
  if (v1)
  {

  }
  else
  {
    LODWORD(v7) = v34;
    v8 = v35;
    v27 = v36;
    v26 = v37;
    v25 = v38;
    v9 = v39;
    v10 = v40;
    v11 = v41;
    v12 = v42;
    v30 = v44;
    v31 = v43;
    if (v32 >= 0x17u)
      v13 = 23;
    else
      v13 = v32;
    if (v33 >= 0x3Bu)
      v14 = 59;
    else
      v14 = v33;
    v28 = v14;
    v29 = v13;
    MEMORY[0x22768E034](v6, 60.0);
    v24 = v9;
    v45 = v12;
    v46 = v11;
    if ((sub_224F67F88() & 1) != 0)
    {
      v7 = MEMORY[0x22768E034](60.0);
      v16 = v15;
      v18 = v17;

      v19 = HIDWORD(v7);
      v20 = HIWORD(v7);
      v21 = v16 >> 16;
      v22 = HIDWORD(v16);
      v23 = HIWORD(v16);
      v45 = HIWORD(v18);
      v46 = v18;
    }
    else
    {

      LOWORD(v19) = v8;
      LOWORD(v20) = v27;
      LOWORD(v16) = v26;
      LOWORD(v21) = v25;
      LOWORD(v23) = v10;
      LOWORD(v22) = v24;
    }
    *(_BYTE *)a1 = 1;
    *(_BYTE *)(a1 + 1) = v29;
    *(_BYTE *)(a1 + 2) = v28;
    *(_DWORD *)(a1 + 4) = v7;
    *(_WORD *)(a1 + 8) = v19;
    *(_WORD *)(a1 + 10) = v20;
    *(_WORD *)(a1 + 12) = v16;
    *(_WORD *)(a1 + 14) = v21;
    *(_WORD *)(a1 + 16) = v22;
    *(_WORD *)(a1 + 18) = v23;
    *(_WORD *)(a1 + 20) = v46;
    *(_WORD *)(a1 + 22) = v45;
    *(_QWORD *)(a1 + 24) = v31;
    *(_QWORD *)(a1 + 32) = v30;
  }
}

__n128 static FHIRTime.parseComponents(from:expectAtEnd:)@<Q0>(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __n128 result;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[4];
  int v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;

  sub_224F3E6DC(a1, a2, v10);
  if (!v3)
  {
    v6 = v10[1];
    v7 = v11;
    result = v12;
    v8 = v13;
    v9 = v14;
    *(_BYTE *)a3 = v10[0];
    *(_BYTE *)(a3 + 1) = v6;
    *(_DWORD *)(a3 + 4) = v7;
    *(__n128 *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 24) = v8;
    *(_QWORD *)(a3 + 32) = v9;
  }
  return result;
}

uint64_t FHIRTime.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_224F68528();
  sub_224F68528();
  sub_224F68528();
  sub_224F67FA0();
  if (!v1)
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t FHIRTime.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_224F68510();
  sub_224F68528();
  sub_224F68528();
  sub_224F68528();
  sub_224F67FA0();
  sub_224F68528();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  return sub_224F6854C();
}

uint64_t sub_224F3DBF0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_224F68510();
  sub_224F68528();
  sub_224F68528();
  sub_224F68528();
  sub_224F67FA0();
  sub_224F68528();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  return sub_224F6854C();
}

void FHIRTime.init(stringLiteral:)(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  char *v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  char v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE v21[4];
  int v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v9 = objc_allocWithZone(MEMORY[0x24BDD17A8]);
  v3 = sub_224F67B5C();
  swift_bridgeObjectRelease();
  v10 = (char *)objc_msgSend(v9, sel_initWithString_, v3);

  v16 = v10;
  v2 = sub_224F3E6DC(v10, 1, v21);
  v19 = v21[1];
  v20 = v21[0];
  LODWORD(v3) = v22;
  LOWORD(v4) = v23;
  LOWORD(v5) = v24;
  LOWORD(v6) = v25;
  LOWORD(v7) = v26;
  LOWORD(v8) = v27;
  LOWORD(v9) = v28;
  LOWORD(v10) = v29;
  LOWORD(v11) = v30;
  v17 = v32;
  v18 = v31;
  MEMORY[0x22768E034](v2, 60.0);
  if ((sub_224F67F88() & 1) != 0)
  {
    v3 = MEMORY[0x22768E034](60.0);
    v6 = v12;
    LODWORD(v10) = v13;

    v4 = HIDWORD(v3);
    v5 = HIWORD(v3);
    v7 = v6 >> 16;
    v8 = HIDWORD(v6);
    v9 = (id)HIWORD(v6);
    v11 = v10 >> 16;
  }
  else
  {

  }
  *(_BYTE *)a1 = 1;
  if (v19 >= 0x3B)
    v14 = 59;
  else
    v14 = v19;
  if (v20 >= 0x17)
    v15 = 23;
  else
    v15 = v20;
  *(_BYTE *)(a1 + 1) = v15;
  *(_BYTE *)(a1 + 2) = v14;
  *(_DWORD *)(a1 + 4) = v3;
  *(_WORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 10) = v5;
  *(_WORD *)(a1 + 12) = v6;
  *(_WORD *)(a1 + 14) = v7;
  *(_WORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 18) = (_WORD)v9;
  *(_WORD *)(a1 + 20) = (_WORD)v10;
  *(_WORD *)(a1 + 22) = v11;
  *(_QWORD *)(a1 + 24) = v18;
  *(_QWORD *)(a1 + 32) = v17;
}

__n128 sub_224F3DEB0@<Q0>(uint64_t a1@<X8>)
{
  __int16 v2;
  int v3;
  __n128 result;
  __int128 v5;
  char v6;
  __int16 v7;
  int v8;
  __int128 v9;
  __n128 v10;

  FHIRTime.init(_:)((uint64_t)&v6);
  v2 = v7;
  v3 = v8;
  v5 = v9;
  result = v10;
  *(_BYTE *)a1 = v6;
  *(_WORD *)(a1 + 1) = v2;
  *(_DWORD *)(a1 + 4) = v3;
  *(_OWORD *)(a1 + 8) = v5;
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t FHIRTime.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v5;
  void *v6;
  char *v7;
  uint64_t v8;
  char v10;
  __int16 v11;
  __int16 v12;
  unint64_t v13;
  unsigned int v14;
  __int16 v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  __int16 v23;
  char v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int16 v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  int v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  unsigned __int16 v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[4];
  int v46;
  unsigned int v47;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68570();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v45, v45[3]);
    sub_224F683D8();
    v5 = objc_allocWithZone(MEMORY[0x24BDD17A8]);
    v6 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v7 = (char *)objc_msgSend(v5, sel_initWithString_, v6);

    v8 = sub_224F3E6DC(v7, 1, &v32);
    v10 = v32;
    LODWORD(v31) = v34;
    v11 = v35;
    LOWORD(v28) = v36;
    v29 = v37;
    v12 = v38;
    v25 = v39;
    LOWORD(v13) = v40;
    v14 = v41;
    v15 = v42;
    v26 = v44;
    v27 = v43;
    if (v32 >= 0x17u)
      v10 = 23;
    v24 = v10;
    if (v33 >= 0x3Bu)
      v16 = 59;
    else
      v16 = v33;
    v46 = v16;
    MEMORY[0x22768E034](v8, 60.0);
    v23 = v12;
    LOWORD(v17) = v25;
    v47 = v14;
    if ((sub_224F67F88() & 1) != 0)
    {
      v18 = MEMORY[0x22768E034](60.0);
      v20 = v19;
      v22 = v21;

      v28 = HIWORD(v18);
      v30 = v20 >> 16;
      v31 = HIDWORD(v18);
      v17 = HIDWORD(v20);
      v13 = HIWORD(v20);
      v47 = v22;
      LODWORD(v7) = HIWORD(v22);
    }
    else
    {

      LODWORD(v18) = v31;
      LOWORD(v31) = v11;
      LOWORD(v20) = v29;
      LOWORD(v30) = v23;
      LOWORD(v7) = v15;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
    *(_BYTE *)a2 = 1;
    *(_BYTE *)(a2 + 1) = v24;
    *(_BYTE *)(a2 + 2) = v46;
    *(_DWORD *)(a2 + 4) = v18;
    *(_WORD *)(a2 + 8) = v31;
    *(_WORD *)(a2 + 10) = v28;
    *(_WORD *)(a2 + 12) = v20;
    *(_WORD *)(a2 + 14) = v30;
    *(_WORD *)(a2 + 16) = v17;
    *(_WORD *)(a2 + 18) = v13;
    *(_WORD *)(a2 + 20) = v47;
    *(_WORD *)(a2 + 22) = (_WORD)v7;
    *(_QWORD *)(a2 + 24) = v27;
    *(_QWORD *)(a2 + 32) = v26;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t FHIRTime.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68588();
  FHIRTime.description.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_224F683FC();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t sub_224F3E2B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FHIRTime.init(from:)(a1, a2);
}

uint64_t sub_224F3E2CC(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68588();
  FHIRTime.description.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_224F683FC();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

id sub_224F3E3B4()
{
  id result;

  result = sub_224F3E3D0();
  qword_2557FC990 = (uint64_t)result;
  return result;
}

id sub_224F3E3D0()
{
  id v0;
  void *v1;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16F0]), sel_init);
  objc_msgSend(v0, sel_setAllowsFloats_, 1);
  v1 = (void *)sub_224F67B5C();
  objc_msgSend(v0, sel_setDecimalSeparator_, v1);

  objc_msgSend(v0, sel_setMaximumIntegerDigits_, 2);
  objc_msgSend(v0, sel_setMinimumIntegerDigits_, 2);
  objc_msgSend(v0, sel_setAlwaysShowsDecimalSeparator_, 0);
  objc_msgSend(v0, sel_setMinimumFractionDigits_, 0);
  objc_msgSend(v0, sel_setMaximumFractionDigits_, 15);
  return v0;
}

uint64_t static FHIRTime.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 1) == *(unsigned __int8 *)(a2 + 1)
    && *(unsigned __int8 *)(a1 + 2) == *(unsigned __int8 *)(a2 + 2))
  {
    JUMPOUT(0x22768E064);
  }
  return 0;
}

uint64_t sub_224F3E4EC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 1) == *(unsigned __int8 *)(a2 + 1)
    && *(unsigned __int8 *)(a1 + 2) == *(unsigned __int8 *)(a2 + 2))
  {
    JUMPOUT(0x22768E064);
  }
  return 0;
}

BOOL sub_224F3E538(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_224F3CD4C((uint64_t)v5, (uint64_t)v7);
}

BOOL sub_224F3E580(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_224F3CE7C((uint64_t)v5, (uint64_t)v7);
}

BOOL sub_224F3E5C8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_224F3CF28((uint64_t)v5, (uint64_t)v7);
}

BOOL _s23HealthRecordsExtraction8FHIRTimeV1loiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;

  v2 = *(unsigned __int8 *)(a1 + 1);
  v3 = *(unsigned __int8 *)(a2 + 1);
  result = 1;
  if (v2 >= v3)
  {
    if (v2 != v3)
      return 0;
    v4 = *(unsigned __int8 *)(a1 + 2);
    v5 = *(unsigned __int8 *)(a2 + 2);
    if (v4 >= v5)
    {
      if (v4 != v5)
        return 0;
      sub_224F0092C();
      v7 = v6;
      v9 = v8;
      sub_224F0092C();
      if (v7 >= v10 && (v7 != v10 || v9 >= v11))
        return 0;
    }
  }
  return result;
}

uint64_t sub_224F3E6DC@<X0>(char *a1@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  id v50;
  void *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __int16 v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  char *v97;
  void *v98;
  char *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  char **v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void (*v118)(char *, uint64_t);
  char *v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(char *, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  id v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t result;
  uint64_t v175;
  uint64_t (*v176)(uint64_t);
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  id v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  _BYTE *v206;
  id v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _BYTE *v218;
  uint64_t v219;
  int v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  char *v228;
  char *v229;
  uint64_t v230;
  char *v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  unint64_t v238;
  char *v239;

  v220 = a2;
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v223 = (char *)&v216 - v8;
  v9 = sub_224F6734C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v239 = (char *)&v216 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E1848, v12, v6);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v235 = (char *)&v216 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v233 = (uint64_t)&v216 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v216 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v231 = (char *)&v216 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v230 = (uint64_t)&v216 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v229 = (char *)&v216 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v228 = (char *)&v216 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v227 = (char *)&v216 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v226 = (char *)&v216 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v225 = (char *)&v216 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v224 = (char *)&v216 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v222 = (char *)&v216 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v217 = (uint64_t)&v216 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v216 = (uint64_t)&v216 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v221 = (char *)&v216 - v44;
  v45 = MEMORY[0x24BDAC7A8](v43);
  v47 = (char *)&v216 - v46;
  MEMORY[0x24BDAC7A8](v45);
  v49 = (char *)&v216 - v48;
  v50 = objc_msgSend(a1, sel_charactersToBeSkipped);
  v218 = a3;
  v219 = v3;
  if (v50)
  {
    v51 = v50;
    sub_224F67328();

    v52 = 0;
  }
  else
  {
    v52 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v47, v52, 1, v9);
  sub_224E61A20((uint64_t)v47, (uint64_t)v49);
  objc_msgSend(a1, sel_setCharactersToBeSkipped_, 0);
  v53 = v239;
  sub_224F67304();
  v54 = sub_224F67FC4();
  v55 = sub_224F67FD0();
  v57 = v9;
  v58 = a1;
  v236 = v49;
  if (!v56)
  {
    v91 = objc_msgSend(a1, sel_string);
    v92 = sub_224F67B80();
    v94 = v93;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v95 = v92;
    *(_QWORD *)(v95 + 8) = v94;
    *(_QWORD *)(v95 + 16) = v54;
    *(_BYTE *)(v95 + 24) = 4;
    swift_willThrow();
    v96 = *(void (**)(char *, uint64_t))(v10 + 8);
    v96(v53, v57);
    v97 = v235;
    sub_224E61AC0((uint64_t)v49, (uint64_t)v235);
    v64 = v58;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v97, 1, v57) == 1)
    {
      v98 = 0;
    }
    else
    {
      v98 = (void *)sub_224F67310();
      v96(v97, v57);
    }
LABEL_26:
    v111 = &selRef_preprocessDataInSource_options_error_;
LABEL_50:
    objc_msgSend(v64, v111[196], v98);

    return sub_224DDB50C((uint64_t)v236, &qword_2557E1848, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750]);
  }
  v59 = v55;
  v60 = v56;
  v232 = v10;
  v234 = v57;
  v235 = v58;
  if (sub_224F67C40() != 2)
  {
    v99 = v235;
    v100 = objc_msgSend(v235, sel_string);
    v101 = sub_224F67B80();
    v103 = v102;

    v104 = objc_msgSend(v99, sel_string);
    sub_224F67B80();

    sub_224F67C40();
    swift_bridgeObjectRelease();
    v105 = sub_224F67C70();
    swift_bridgeObjectRelease();
    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v106 = v101;
    *(_QWORD *)(v106 + 8) = v103;
    *(_QWORD *)(v106 + 16) = v105;
    *(_BYTE *)(v106 + 24) = 0;
    swift_willThrow();
    v107 = v232;
    v108 = *(void (**)(char *, uint64_t))(v232 + 8);
    v109 = v234;
    v108(v239, v234);
    v110 = v233;
    sub_224E61AC0((uint64_t)v236, v233);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v110, 1, v109) == 1)
    {
      v98 = 0;
    }
    else
    {
      v98 = (void *)sub_224F67310();
      v108((char *)v110, v109);
    }
    v64 = v235;
    goto LABEL_49;
  }
  v61 = sub_224E55664(v59, v60);
  v62 = v234;
  if ((v61 & 0x100) != 0 || (v63 = v61, v61 > 0x17u))
  {
    v64 = v235;
    v112 = objc_msgSend(v235, sel_string);
    v113 = sub_224F67B80();
    v115 = v114;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v116 = v113;
    *(_QWORD *)(v116 + 8) = v115;
    *(_QWORD *)(v116 + 16) = v54;
    *(_BYTE *)(v116 + 24) = 4;
    swift_willThrow();
    v117 = v232;
    v118 = *(void (**)(char *, uint64_t))(v232 + 8);
    v118(v239, v62);
    sub_224E61AC0((uint64_t)v236, (uint64_t)v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v20, 1, v62) == 1)
      goto LABEL_45;
    v98 = (void *)sub_224F67310();
    v119 = v20;
    v120 = v62;
LABEL_48:
    v118(v119, v120);
    goto LABEL_49;
  }
  v64 = v235;
  v65 = sub_224F67FC4();
  sub_224F67FB8();
  v67 = v66;
  swift_bridgeObjectRelease();
  v68 = v232;
  v69 = v239;
  if (!v67)
  {
    v121 = objc_msgSend(v64, sel_string);
    v122 = sub_224F67B80();
    v124 = v123;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v125 = v122;
    *(_QWORD *)(v125 + 8) = v124;
    v126 = v234;
    *(_QWORD *)(v125 + 16) = v65;
    *(_BYTE *)(v125 + 24) = 0;
    swift_willThrow();
    v118 = *(void (**)(char *, uint64_t))(v68 + 8);
    v118(v69, v126);
    v127 = (uint64_t)v236;
    v128 = (uint64_t)v231;
    goto LABEL_44;
  }
  v70 = sub_224F67FC4();
  v71 = sub_224F67FD0();
  if (!v72)
  {
    v129 = objc_msgSend(v64, sel_string);
    v130 = sub_224F67B80();
    v132 = v131;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v133 = v130;
    *(_QWORD *)(v133 + 8) = v132;
    *(_QWORD *)(v133 + 16) = v70;
    *(_BYTE *)(v133 + 24) = 5;
    swift_willThrow();
    v118 = *(void (**)(char *, uint64_t))(v68 + 8);
    v118(v69, v62);
    v134 = v230;
    sub_224E61AC0((uint64_t)v236, v230);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v134, 1, v62) == 1)
      goto LABEL_45;
    v98 = (void *)sub_224F67310();
    v119 = (char *)v134;
    v120 = v62;
    goto LABEL_48;
  }
  v73 = v71;
  v74 = v72;
  if (sub_224F67C40() != 2)
  {
    v135 = v68;
    v136 = objc_msgSend(v64, sel_string);
    v137 = sub_224F67B80();
    v139 = v138;

    v140 = objc_msgSend(v64, sel_string);
    sub_224F67B80();

    sub_224F67C40();
    swift_bridgeObjectRelease();
    v141 = sub_224F67C70();
    swift_bridgeObjectRelease();
    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v142 = v137;
    *(_QWORD *)(v142 + 8) = v139;
    *(_QWORD *)(v142 + 16) = v141;
    *(_BYTE *)(v142 + 24) = 0;
    swift_willThrow();
    v143 = *(void (**)(char *, uint64_t))(v135 + 8);
    v144 = v234;
    v143(v239, v234);
    v145 = (uint64_t)v236;
    v146 = (uint64_t)v229;
LABEL_35:
    sub_224E61AC0(v145, v146);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v146, 1, v144) == 1)
    {
      v98 = 0;
    }
    else
    {
      v98 = (void *)sub_224F67310();
      v143((char *)v146, v144);
    }
    v64 = v235;
    goto LABEL_26;
  }
  v75 = sub_224E55664(v73, v74);
  if ((v75 & 0x100) != 0 || (v76 = v75, v75 > 0x3Bu))
  {
    v147 = objc_msgSend(v64, sel_string);
    v148 = sub_224F67B80();
    v150 = v149;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v151 = v148;
    *(_QWORD *)(v151 + 8) = v150;
    *(_QWORD *)(v151 + 16) = v70;
    *(_BYTE *)(v151 + 24) = 5;
    swift_willThrow();
    v118 = *(void (**)(char *, uint64_t))(v68 + 8);
    v126 = v234;
    v118(v69, v234);
    v127 = (uint64_t)v236;
    v128 = (uint64_t)v228;
    goto LABEL_44;
  }
  v77 = sub_224F67FC4();
  sub_224F67FB8();
  v79 = v78;
  swift_bridgeObjectRelease();
  if (!v79)
  {
    v152 = objc_msgSend(v64, sel_string);
    v153 = sub_224F67B80();
    v155 = v154;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v156 = v153;
    *(_QWORD *)(v156 + 8) = v155;
    *(_QWORD *)(v156 + 16) = v77;
    *(_BYTE *)(v156 + 24) = 0;
    swift_willThrow();
    v118 = *(void (**)(char *, uint64_t))(v68 + 8);
    v126 = v234;
    v118(v69, v234);
    v127 = (uint64_t)v236;
    v128 = (uint64_t)v227;
    goto LABEL_44;
  }
  v80 = sub_224F67FC4();
  v81 = sub_224F67FD0();
  if (!v82)
  {
    v157 = objc_msgSend(v64, sel_string);
    v158 = sub_224F67B80();
    v160 = v159;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v161 = v158;
    *(_QWORD *)(v161 + 8) = v160;
    *(_QWORD *)(v161 + 16) = v80;
    *(_BYTE *)(v161 + 24) = 6;
    swift_willThrow();
    v118 = *(void (**)(char *, uint64_t))(v68 + 8);
    v126 = v234;
    v118(v69, v234);
    v127 = (uint64_t)v236;
    v128 = (uint64_t)v226;
    goto LABEL_44;
  }
  v83 = v81;
  v84 = v82;
  if (sub_224F67C40() != 2)
  {
    v135 = v68;
    v162 = objc_msgSend(v64, sel_string);
    v163 = sub_224F67B80();
    v165 = v164;

    v166 = objc_msgSend(v64, sel_string);
    sub_224F67B80();

    sub_224F67C40();
    swift_bridgeObjectRelease();
    v167 = sub_224F67C70();
    swift_bridgeObjectRelease();
    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v168 = v163;
    *(_QWORD *)(v168 + 8) = v165;
    *(_QWORD *)(v168 + 16) = v167;
    *(_BYTE *)(v168 + 24) = 0;
    swift_willThrow();
    v143 = *(void (**)(char *, uint64_t))(v135 + 8);
    v144 = v234;
    v143(v239, v234);
    v145 = (uint64_t)v236;
    v146 = (uint64_t)v225;
    goto LABEL_35;
  }
  swift_bridgeObjectRetain();
  v85 = sub_224E55418(v83, v84);
  if ((v86 & 1) != 0 || v85 > 60)
  {
    swift_bridgeObjectRelease();
    v169 = objc_msgSend(v64, sel_string);
    v170 = sub_224F67B80();
    v172 = v171;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v173 = v170;
    *(_QWORD *)(v173 + 8) = v172;
    *(_QWORD *)(v173 + 16) = v80;
    *(_BYTE *)(v173 + 24) = 6;
    swift_willThrow();
    v118 = *(void (**)(char *, uint64_t))(v68 + 8);
    v126 = v234;
    v118(v69, v234);
    v127 = (uint64_t)v236;
    v128 = (uint64_t)v224;
LABEL_44:
    sub_224E61AC0(v127, v128);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v128, 1, v126) != 1)
    {
      v98 = (void *)sub_224F67310();
      v119 = (char *)v128;
LABEL_47:
      v120 = v126;
      goto LABEL_48;
    }
LABEL_45:
    v98 = 0;
LABEL_49:
    v111 = &selRef_preprocessDataInSource_options_error_;
    goto LABEL_50;
  }
  v87 = sub_224F67FC4();
  sub_224F67FB8();
  v89 = v88;
  swift_bridgeObjectRelease();
  if (v89)
  {
    v87 = sub_224F67FC4();
    sub_224F67FD0();
    if (!v90)
    {
      swift_bridgeObjectRelease();
      v64 = v235;
      v192 = objc_msgSend(v235, sel_string);
      v193 = sub_224F67B80();
      v195 = v194;

      sub_224E61A7C();
      swift_allocError();
      *(_QWORD *)v196 = v193;
      *(_QWORD *)(v196 + 8) = v195;
      *(_QWORD *)(v196 + 16) = v87;
      *(_BYTE *)(v196 + 24) = 6;
      swift_willThrow();
      v189 = v232;
      v118 = *(void (**)(char *, uint64_t))(v232 + 8);
      v126 = v234;
      v118(v239, v234);
      v190 = (uint64_t)v236;
      v191 = (uint64_t)v221;
LABEL_56:
      sub_224E61AC0(v190, v191);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v189 + 48))(v191, 1, v126) != 1)
      {
        v98 = (void *)sub_224F67310();
        v119 = (char *)v191;
        goto LABEL_47;
      }
      goto LABEL_45;
    }
    LODWORD(v233) = v63;
    v237 = v83;
    v238 = v84;
    sub_224F67C94();
    sub_224F67C94();
    swift_bridgeObjectRelease();
    v83 = v237;
    v84 = v238;
  }
  else
  {
    LODWORD(v233) = v63;
  }
  v175 = sub_224F677D8();
  v176 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8];
  v177 = (uint64_t)v223;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v175 - 8) + 56))(v223, 1, 1, v175);
  v178 = sub_224F67FAC();
  v180 = v179;
  v182 = v181;
  v183 = sub_224DDB50C(v177, (unint64_t *)&qword_2557E1D00, v176);
  if ((v182 & 0x100000000) != 0 || (MEMORY[0x22768E034](v183, 60.0), (sub_224F67F88() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    v64 = v235;
    v184 = objc_msgSend(v235, sel_string);
    v185 = sub_224F67B80();
    v187 = v186;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v188 = v185;
    *(_QWORD *)(v188 + 8) = v187;
    *(_QWORD *)(v188 + 16) = v87;
    *(_BYTE *)(v188 + 24) = 6;
    swift_willThrow();
    v189 = v232;
    v118 = *(void (**)(char *, uint64_t))(v232 + 8);
    v126 = v234;
    v118(v239, v234);
    v190 = (uint64_t)v236;
    v191 = (uint64_t)v222;
    goto LABEL_56;
  }
  v197 = v235;
  v198 = sub_224F67FC4();
  if ((v220 & 1) != 0)
  {
    v199 = v198;
    if ((objc_msgSend(v197, sel_isAtEnd) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v207 = objc_msgSend(v197, sel_string);
      v208 = sub_224F67B80();
      v210 = v209;

      sub_224E61A7C();
      swift_allocError();
      *(_QWORD *)v211 = v208;
      *(_QWORD *)(v211 + 8) = v210;
      *(_QWORD *)(v211 + 16) = v199;
      *(_BYTE *)(v211 + 24) = 10;
      swift_willThrow();
      v212 = v232;
      v118 = *(void (**)(char *, uint64_t))(v232 + 8);
      v213 = v234;
      v118(v239, v234);
      v214 = v216;
      sub_224E61AC0((uint64_t)v236, v216);
      v64 = v197;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v212 + 48))(v214, 1, v213) != 1)
      {
        v215 = v216;
        v98 = (void *)sub_224F67310();
        v119 = (char *)v215;
        v120 = v234;
        goto LABEL_48;
      }
      goto LABEL_45;
    }
  }
  v200 = v232;
  v201 = v239;
  v202 = v234;
  v239 = *(char **)(v232 + 8);
  ((void (*)(char *, uint64_t))v239)(v201, v234);
  v203 = v217;
  sub_224E61AC0((uint64_t)v236, v217);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v200 + 48))(v203, 1, v202) == 1)
  {
    v204 = 0;
  }
  else
  {
    v205 = v203;
    v204 = (void *)sub_224F67310();
    ((void (*)(uint64_t, uint64_t))v239)(v205, v202);
  }
  v239 = (char *)(v182 >> 16);
  v234 = HIWORD(v180);
  v231 = (char *)(v180 >> 16);
  v232 = HIDWORD(v180);
  objc_msgSend(v235, sel_setCharactersToBeSkipped_, v204);

  result = sub_224DDB50C((uint64_t)v236, &qword_2557E1848, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750]);
  v206 = v218;
  *v218 = v233;
  v206[1] = v76;
  *(_QWORD *)(v206 + 4) = v178;
  *((_WORD *)v206 + 6) = v180;
  *((_WORD *)v206 + 7) = (_WORD)v231;
  *((_WORD *)v206 + 8) = v232;
  *((_WORD *)v206 + 9) = v234;
  *((_WORD *)v206 + 10) = v182;
  *((_WORD *)v206 + 11) = (_WORD)v239;
  *((_QWORD *)v206 + 3) = v83;
  *((_QWORD *)v206 + 4) = v84;
  return result;
}

unint64_t sub_224F3F8C8()
{
  unint64_t result;

  result = qword_2557E40B0;
  if (!qword_2557E40B0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for FHIRTime, &type metadata for FHIRTime);
    atomic_store(result, (unint64_t *)&qword_2557E40B0);
  }
  return result;
}

unint64_t sub_224F3F910()
{
  unint64_t result;

  result = qword_2557E40B8;
  if (!qword_2557E40B8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for FHIRTime, &type metadata for FHIRTime);
    atomic_store(result, (unint64_t *)&qword_2557E40B8);
  }
  return result;
}

unint64_t sub_224F3F958()
{
  unint64_t result;

  result = qword_2557E40C0;
  if (!qword_2557E40C0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for FHIRTime, &type metadata for FHIRTime);
    atomic_store(result, (unint64_t *)&qword_2557E40C0);
  }
  return result;
}

uint64_t sub_224F3F99C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 1);
  return result;
}

unsigned __int8 *sub_224F3F9A8(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2;

  v2 = *result;
  if (v2 >= 0x17)
    LOBYTE(v2) = 23;
  *(_BYTE *)(a2 + 1) = v2;
  return result;
}

uint64_t sub_224F3F9C0@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 2);
  return result;
}

unsigned __int8 *sub_224F3F9CC(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2;

  v2 = *result;
  if (v2 >= 0x3B)
    LOBYTE(v2) = 59;
  *(_BYTE *)(a2 + 2) = v2;
  return result;
}

__n128 sub_224F3F9E4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_DWORD *)a2 = *(_DWORD *)(a1 + 4);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 4) = result;
  return result;
}

uint64_t destroy for FHIRTime()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FHIRTime(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FHIRTime(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_WORD *)(a1 + 14) = *(_WORD *)(a2 + 14);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_WORD *)(a1 + 22) = *(_WORD *)(a2 + 22);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FHIRTime(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FHIRTime(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FHIRTime(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FHIRTime()
{
  return &type metadata for FHIRTime;
}

id sub_224F3FC08(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v10;
  void *v11;
  void *v12;
  id v13;

  if (a3)
  {
    v10 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    if (a5)
      goto LABEL_3;
LABEL_6:
    v11 = 0;
    if (a7)
      goto LABEL_4;
LABEL_7:
    v12 = 0;
    goto LABEL_8;
  }
  v10 = 0;
  if (!a5)
    goto LABEL_6;
LABEL_3:
  v11 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  if (!a7)
    goto LABEL_7;
LABEL_4:
  v12 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
LABEL_8:
  v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_medicalCodingWithSystem_codingVersion_code_displayString_, a1, v10, v11, v12);

  return v13;
}

char *Quantity.asCodedQuantity()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  id v25;
  char *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  _QWORD v39[2];
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = v0;
  v3 = sub_224F675D4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5AE10();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v39 - v11;
  v13 = type metadata accessor for Quantity();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v39 - v18;
  if ((*(_BYTE *)(v2 + 20) & 1) == 0)
  {
    v43 = v3;
    v44 = v17;
    v39[1] = v1;
    v40 = v6;
    v41 = sub_224F67F58();
    v42 = v20;
    v21 = *(_QWORD *)(v2 + 48);
    sub_224DDB408(v2, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
    if (v21)
    {
      sub_224DDEAA0((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
      sub_224DDB408(v2, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
      v22 = v4;
    }
    else
    {
      sub_224DDB408((uint64_t)&v19[*(int *)(v44 + 28)], (uint64_t)v12, (uint64_t (*)(_QWORD))sub_224E5AE10);
      sub_224DDEAA0((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
      v22 = v4;
      v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v43);
      sub_224DDEAA0((uint64_t)v12, (uint64_t (*)(_QWORD))sub_224E5AE10);
      sub_224DDB408(v2, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
      if (v23 == 1)
      {
        v24 = v44;
        v25 = *(id *)&v16[*(int *)(v44 + 32) + 8];
        sub_224DDEAA0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
        v26 = v40;
        if (!v25)
        {
          v27 = *(_QWORD *)(v2 + 32);
          if (v27)
          {
LABEL_19:
            v28 = Quantity.medicalCoding(with:)(*(_QWORD *)(v2 + 24), v27);
            goto LABEL_20;
          }
LABEL_8:
          v28 = 0;
LABEL_20:
          v36 = objc_allocWithZone(MEMORY[0x24BDD3A10]);
          v37 = (void *)sub_224F67B5C();
          swift_bridgeObjectRelease();
          v19 = (char *)objc_msgSend(v36, sel_initWithRawValue_comparatorCoding_unitCoding_, v37, v28, v25);

          return v19;
        }
LABEL_10:
        sub_224DDB408(v2 + *(int *)(v24 + 28), (uint64_t)v10, (uint64_t (*)(_QWORD))sub_224E5AE10);
        v29 = v43;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v10, 1, v43) == 1)
        {
          sub_224DDEAA0((uint64_t)v10, (uint64_t (*)(_QWORD))sub_224E5AE10);
          v30 = 0;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v26, v10, v29);
          v31 = (void *)objc_opt_self();
          sub_224F6755C();
          v32 = (void *)sub_224F67B5C();
          swift_bridgeObjectRelease();
          v30 = objc_msgSend(v31, sel_codeSystemWithIdentifier_, v32);

          (*(void (**)(char *, uint64_t))(v22 + 8))(v26, v29);
        }
        v33 = *(_QWORD *)(v2 + 48);
        if (*(_QWORD *)(v2 + *(int *)(v24 + 32) + 8))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v34 = (void *)sub_224F67B5C();
          swift_bridgeObjectRelease();
          if (v33)
          {
LABEL_15:
            v35 = (void *)sub_224F67B5C();
            swift_bridgeObjectRelease();
            goto LABEL_18;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          v34 = 0;
          if (v33)
            goto LABEL_15;
        }
        v35 = 0;
LABEL_18:
        v25 = objc_msgSend((id)objc_opt_self(), sel_medicalCodingWithSystem_codingVersion_code_displayString_, v30, 0, v34, v35);

        v27 = *(_QWORD *)(v2 + 32);
        if (v27)
          goto LABEL_19;
        goto LABEL_8;
      }
    }
    sub_224DDEAA0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
    v26 = v40;
    v24 = v44;
    goto LABEL_10;
  }
  type metadata accessor for HDHRExtractionError(0);
  v45 = 201;
  sub_224E6AE24(MEMORY[0x24BEE4AF8]);
  sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
  sub_224F6752C();
  swift_willThrow();
  return v19;
}

uint64_t type metadata accessor for Quantity()
{
  uint64_t result;

  result = qword_2557E4150;
  if (!qword_2557E4150)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Quantity.value.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Quantity.comparator.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Quantity.unit.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Quantity.system.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Quantity();
  return sub_224DDB408(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(_QWORD))sub_224E5AE10);
}

uint64_t Quantity.code.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Quantity() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Quantity.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = sub_224F675D4();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v0 + 20) == 1)
  {
    sub_224F68528();
    if (*(_QWORD *)(v0 + 32))
      goto LABEL_3;
LABEL_6:
    sub_224F68528();
    if (*(_QWORD *)(v0 + 48))
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_224F68528();
  sub_224F67FA0();
  if (!*(_QWORD *)(v0 + 32))
    goto LABEL_6;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 48))
  {
LABEL_4:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  sub_224F68528();
LABEL_8:
  v8 = type metadata accessor for Quantity();
  sub_224DDB408(v0 + *(int *)(v8 + 28), (uint64_t)v7, (uint64_t (*)(_QWORD))sub_224E5AE10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    sub_224F68528();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    sub_224F68528();
    sub_224DDACD4(&qword_2557E02F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_224F67B20();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  if (!*(_QWORD *)(v0 + *(int *)(v8 + 32) + 8))
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224F4056C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224F40598 + 4 * byte_224F75CE0[*v0]))(0x65756C6176, 0xE500000000000000);
}

uint64_t sub_224F40598()
{
  return 0x74617261706D6F63;
}

uint64_t sub_224F405B4()
{
  return 1953066613;
}

uint64_t sub_224F405C4()
{
  return 0x6D6574737973;
}

uint64_t sub_224F405D8()
{
  return 1701080931;
}

uint64_t sub_224F405E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224F41DB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224F4060C()
{
  sub_224F41298();
  return sub_224F685B8();
}

uint64_t sub_224F40634()
{
  sub_224F41298();
  return sub_224F685C4();
}

uint64_t Quantity.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  char v11;
  _BYTE v13[16];
  __int128 v14;
  int v15;
  char v16;

  v3 = v1;
  sub_224F412DC(0, &qword_2557E40D0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v13[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F41298();
  sub_224F68594();
  v10 = *((_DWORD *)v3 + 4);
  v11 = *((_BYTE *)v3 + 20);
  v14 = *v3;
  v15 = v10;
  v16 = v11;
  v13[15] = 0;
  type metadata accessor for Decimal(0);
  sub_224DDACD4(&qword_2557E1C60, (uint64_t (*)(uint64_t))type metadata accessor for Decimal, MEMORY[0x24BDD03A8]);
  sub_224F68330();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    sub_224F68300();
    LOBYTE(v14) = 2;
    sub_224F68300();
    type metadata accessor for Quantity();
    LOBYTE(v14) = 3;
    sub_224F675D4();
    sub_224DDACD4(&qword_2557E1D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_224F68330();
    LOBYTE(v14) = 4;
    sub_224F68300();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Quantity.hashValue.getter()
{
  sub_224F68510();
  Quantity.hash(into:)();
  return sub_224F6854C();
}

uint64_t Quantity.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  int v33;
  char v34;
  char v35;

  v29 = a2;
  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F412DC(0, &qword_2557E40E0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v30 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v28 - v9;
  v11 = type metadata accessor for Quantity();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v31 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_224F41298();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  v28 = v6;
  v15 = v8;
  v16 = (uint64_t)v13;
  type metadata accessor for Decimal(0);
  v35 = 0;
  sub_224DDACD4(&qword_2557E1C28, (uint64_t (*)(uint64_t))type metadata accessor for Decimal, MEMORY[0x24BDD03B0]);
  v17 = v30;
  sub_224F68294();
  v18 = v33;
  v19 = v34;
  *(_OWORD *)v16 = v32;
  *(_DWORD *)(v16 + 16) = v18;
  *(_BYTE *)(v16 + 20) = v19;
  LOBYTE(v32) = 1;
  *(_QWORD *)(v16 + 24) = sub_224F68264();
  *(_QWORD *)(v16 + 32) = v20;
  LOBYTE(v32) = 2;
  *(_QWORD *)(v16 + 40) = sub_224F68264();
  *(_QWORD *)(v16 + 48) = v21;
  sub_224F675D4();
  LOBYTE(v32) = 3;
  sub_224DDACD4(&qword_2557E1D78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  v22 = (uint64_t)v28;
  sub_224F68294();
  sub_224E77848(v22, v16 + *(int *)(v11 + 28));
  LOBYTE(v32) = 4;
  v23 = sub_224F68264();
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v17);
  v26 = (uint64_t *)(v16 + *(int *)(v11 + 32));
  *v26 = v23;
  v26[1] = v25;
  sub_224DDB408(v16, v29, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  return sub_224DDEAA0(v16, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
}

uint64_t sub_224F40C5C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Quantity.init(from:)(a1, a2);
}

uint64_t sub_224F40C70(_QWORD *a1)
{
  return Quantity.encode(to:)(a1);
}

uint64_t sub_224F40C84()
{
  sub_224F68510();
  Quantity.hash(into:)();
  return sub_224F6854C();
}

uint64_t sub_224F40CC4()
{
  sub_224F68510();
  Quantity.hash(into:)();
  return sub_224F6854C();
}

void *sub_224F40D00()
{
  void *result;

  result = (void *)sub_224E52024((uint64_t)&unk_24ECFE3B8);
  off_2557E40C8 = result;
  return result;
}

id Quantity.medicalCoding(with:)(uint64_t a1, uint64_t a2)
{
  id v4;
  _QWORD *v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v4 = objc_msgSend((id)objc_opt_self(), sel_FHIRQuantityComparatorSystem);
  if (qword_2557E01B0 != -1)
    swift_once();
  v5 = off_2557E40C8;
  if (*((_QWORD *)off_2557E40C8 + 2))
  {
    swift_bridgeObjectRetain();
    v6 = sub_224E533E8(a1, a2);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v5[7] + 16 * v6 + 8);
      swift_bridgeObjectRetain();
    }
    else
    {
      v8 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  swift_bridgeObjectRetain();
  v9 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  if (v8)
  {
    v10 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  v11 = objc_msgSend((id)objc_opt_self(), sel_medicalCodingWithSystem_codingVersion_code_displayString_, v4, 0, v9, v10);

  return v11;
}

BOOL _s23HealthRecordsExtraction8QuantityV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BOOL8 result;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  char v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = sub_224F675D4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E79FE0();
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5AE10();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v40 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v40 - v19;
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0
         || (MEMORY[0x22768E064](*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16)) & 1) == 0)
  {
    return 0;
  }
  v21 = *(_QWORD *)(a1 + 32);
  v22 = *(_QWORD *)(a2 + 32);
  if (!v21)
  {
    if (v22)
      return 0;
    goto LABEL_13;
  }
  if (!v22)
    return 0;
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24) && v21 == v22
    || (v23 = sub_224F683CC(), result = 0, (v23 & 1) != 0))
  {
LABEL_13:
    v25 = *(_QWORD *)(a1 + 48);
    v26 = *(_QWORD *)(a2 + 48);
    if (v25)
    {
      if (!v26)
        return 0;
      if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40) || v25 != v26)
      {
        v27 = sub_224F683CC();
        result = 0;
        if ((v27 & 1) == 0)
          return result;
      }
    }
    else if (v26)
    {
      return 0;
    }
    v28 = type metadata accessor for Quantity();
    v42 = v4;
    v29 = v28;
    sub_224DDB408(a1 + *(int *)(v28 + 28), (uint64_t)v20, (uint64_t (*)(_QWORD))sub_224E5AE10);
    v41 = v29;
    sub_224DDB408(a2 + *(int *)(v29 + 28), (uint64_t)v18, (uint64_t (*)(_QWORD))sub_224E5AE10);
    v30 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_224DDB408((uint64_t)v20, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_224E5AE10);
    v43 = v30;
    v31 = v42;
    sub_224DDB408((uint64_t)v18, v30, (uint64_t (*)(_QWORD))sub_224E5AE10);
    v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v32((uint64_t)v11, 1, v31) == 1)
    {
      sub_224DDEAA0((uint64_t)v18, (uint64_t (*)(_QWORD))sub_224E5AE10);
      sub_224DDEAA0((uint64_t)v20, (uint64_t (*)(_QWORD))sub_224E5AE10);
      if (v32(v43, 1, v31) == 1)
      {
        sub_224DDEAA0((uint64_t)v11, (uint64_t (*)(_QWORD))sub_224E5AE10);
LABEL_27:
        v35 = *(int *)(v41 + 32);
        v36 = (_QWORD *)(a1 + v35);
        v37 = *(_QWORD *)(a1 + v35 + 8);
        v38 = (_QWORD *)(a2 + v35);
        v39 = v38[1];
        if (v37)
          return v39 && (*v36 == *v38 && v37 == v39 || (sub_224F683CC() & 1) != 0);
        return !v39;
      }
    }
    else
    {
      sub_224DDB408((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_224E5AE10);
      if (v32(v43, 1, v31) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v43, v31);
        sub_224DDACD4((unint64_t *)&qword_2557E02B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
        v33 = sub_224F67B50();
        v34 = *(void (**)(char *, uint64_t))(v5 + 8);
        v34(v7, v31);
        sub_224DDEAA0((uint64_t)v18, (uint64_t (*)(_QWORD))sub_224E5AE10);
        sub_224DDEAA0((uint64_t)v20, (uint64_t (*)(_QWORD))sub_224E5AE10);
        v34(v15, v31);
        sub_224DDEAA0((uint64_t)v11, (uint64_t (*)(_QWORD))sub_224E5AE10);
        if ((v33 & 1) == 0)
          return 0;
        goto LABEL_27;
      }
      sub_224DDEAA0((uint64_t)v18, (uint64_t (*)(_QWORD))sub_224E5AE10);
      sub_224DDEAA0((uint64_t)v20, (uint64_t (*)(_QWORD))sub_224E5AE10);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v15, v31);
    }
    sub_224DDEAA0((uint64_t)v11, (uint64_t (*)(_QWORD))sub_224E79FE0);
    return 0;
  }
  return result;
}

unint64_t sub_224F41298()
{
  unint64_t result;

  result = qword_2557E40D8;
  if (!qword_2557E40D8)
  {
    result = MEMORY[0x22768ED24](&unk_224F75EFC, &type metadata for Quantity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E40D8);
  }
  return result;
}

void sub_224F412DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224F41298();
    v7 = a3(a1, &type metadata for Quantity.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_224F41338(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E0628, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t)&protocol conformance descriptor for Quantity);
  a1[2] = sub_224DDACD4(&qword_2557E0860, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t)&protocol conformance descriptor for Quantity);
  result = sub_224DDACD4(&qword_2557E40E8, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t)&protocol conformance descriptor for Quantity);
  a1[3] = result;
  return result;
}

uint64_t sub_224F413B0()
{
  return sub_224DDACD4(&qword_2557E40F0, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t)&protocol conformance descriptor for Quantity);
}

uint64_t *initializeBufferWithCopyOfBuffer for Quantity(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(uint64_t *)((char *)a1 + 13) = *(uint64_t *)((char *)a2 + 13);
    v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    v8 = a2[6];
    v9 = *(int *)(a3 + 28);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    a1[5] = a2[5];
    a1[6] = v8;
    v12 = sub_224F675D4();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      sub_224E5AE10();
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = *(int *)(a3 + 32);
    v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Quantity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_224F675D4();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Quantity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(int *)(a3 + 28);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v11 = sub_224F675D4();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    sub_224E5AE10();
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = *(int *)(a3 + 32);
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Quantity(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v6 = *a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)((char *)a2 + 13);
  *(_OWORD *)a1 = v6;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = (void *)(a1 + v7);
  v9 = (char *)a2 + v7;
  v10 = sub_224F675D4();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    sub_224E5AE10();
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v16 = *(int *)(a3 + 32);
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Quantity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 28);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_224F675D4();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_224E5AE10();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 32)) = *(_OWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for Quantity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 28);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = sub_224F675D4();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    sub_224E5AE10();
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = *(int *)(a3 + 32);
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Quantity()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F41A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_224E5AE10();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for Quantity()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F41B20(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 32) = a2;
  }
  else
  {
    sub_224E5AE10();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_224F41B94()
{
  unint64_t v0;

  sub_224E5AE10();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for Quantity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_224F41C60 + 4 * byte_224F75CEA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_224F41C94 + 4 * byte_224F75CE5[v4]))();
}

uint64_t sub_224F41C94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F41C9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224F41CA4);
  return result;
}

uint64_t sub_224F41CB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224F41CB8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_224F41CBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F41CC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Quantity.CodingKeys()
{
  return &type metadata for Quantity.CodingKeys;
}

unint64_t sub_224F41CE4()
{
  unint64_t result;

  result = qword_2557E4198;
  if (!qword_2557E4198)
  {
    result = MEMORY[0x22768ED24](&unk_224F75ED4, &type metadata for Quantity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E4198);
  }
  return result;
}

unint64_t sub_224F41D2C()
{
  unint64_t result;

  result = qword_2557E41A0;
  if (!qword_2557E41A0)
  {
    result = MEMORY[0x22768ED24](&unk_224F75E44, &type metadata for Quantity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E41A0);
  }
  return result;
}

unint64_t sub_224F41D74()
{
  unint64_t result;

  result = qword_2557E41A8;
  if (!qword_2557E41A8)
  {
    result = MEMORY[0x22768ED24](&unk_224F75E6C, &type metadata for Quantity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E41A8);
  }
  return result;
}

uint64_t sub_224F41DB8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74617261706D6F63 && a2 == 0xEA0000000000726FLL || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1953066613 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D6574737973 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t DecodingError.hdhr_friendlyDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  uint64_t v44;
  unint64_t v45;

  v1 = sub_224F68138();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v40 - v6;
  v8 = sub_224F68144();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (__int128 *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v9 + 16))(v11, v0, v8);
  v12 = (*(uint64_t (**)(__int128 *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == *MEMORY[0x24BEE26D0])
  {
    (*(void (**)(__int128 *, uint64_t))(v9 + 96))(v11, v8);
    sub_224F427B0(0, (unint64_t *)&qword_2557E1BF0, (void (*)(uint64_t))sub_224E6FBA4);
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, (char *)v11 + *(int *)(v13 + 48), v1);
    v14 = DecodingError.Context.hdhr_keyPathRepresentation.getter();
    v16 = v15;
    v43[0] = 0x20746F6E5B2ELL;
    v43[1] = 0xE600000000000000;
    sub_224F685D0();
LABEL_5:
    sub_224F67C94();
    swift_bridgeObjectRelease();
    sub_224F67C94();
    v44 = v14;
    v45 = v16;
    swift_bridgeObjectRetain();
    v44 = sub_224F67D24();
    v45 = v19;
    sub_224F67C7C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = v44;
    v21 = *(void (**)(char *, uint64_t))(v2 + 8);
    v22 = v5;
    goto LABEL_6;
  }
  if (v12 == *MEMORY[0x24BEE26E0])
  {
    (*(void (**)(__int128 *, uint64_t))(v9 + 96))(v11, v8);
    sub_224F427B0(0, (unint64_t *)&qword_2557E1BF0, (void (*)(uint64_t))sub_224E6FBA4);
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, (char *)v11 + *(int *)(v17 + 48), v1);
    v14 = DecodingError.Context.hdhr_keyPathRepresentation.getter();
    v16 = v18;
    v43[0] = 0;
    v43[1] = 0xE000000000000000;
    sub_224F680E4();
    swift_bridgeObjectRelease();
    strcpy((char *)v43, ".[not found; ");
    HIWORD(v43[1]) = -4864;
    sub_224F685D0();
    goto LABEL_5;
  }
  if (v12 == *MEMORY[0x24BEE26C8])
  {
    (*(void (**)(__int128 *, uint64_t))(v9 + 96))(v11, v8);
    sub_224F427B0(0, &qword_2557E41B0, (void (*)(uint64_t))sub_224F4281C);
    v25 = (char *)v11 + *(int *)(v24 + 48);
    sub_224E593B0(v11, (uint64_t)v43);
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v25, v1);
    v26 = DecodingError.Context.hdhr_keyPathRepresentation.getter();
    v28 = v27;
    v44 = 0;
    v45 = 0xE000000000000000;
    sub_224F680E4();
    swift_bridgeObjectRelease();
    v44 = 46;
    v45 = 0xE100000000000000;
    __swift_project_boxed_opaque_existential_1(v43, v43[3]);
    CodingKey.hdhr_keyPathRepresentation.getter();
    sub_224F67C94();
    swift_bridgeObjectRelease();
    sub_224F67C94();
    v41 = v26;
    v42 = v28;
    swift_bridgeObjectRetain();
    v41 = sub_224F67D24();
    v42 = v29;
    sub_224F67C7C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = v41;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    return v20;
  }
  if (v12 != *MEMORY[0x24BEE26D8])
  {
    v20 = sub_224F684C8();
    (*(void (**)(__int128 *, uint64_t))(v9 + 8))(v11, v8);
    return v20;
  }
  (*(void (**)(__int128 *, uint64_t))(v9 + 96))(v11, v8);
  (*(void (**)(char *, __int128 *, uint64_t))(v2 + 32))(v7, v11, v1);
  v30 = sub_224F6812C();
  v32 = v31;
  swift_bridgeObjectRelease();
  if ((v32 & 0x2000000000000000) != 0)
    v33 = HIBYTE(v32) & 0xF;
  else
    v33 = v30 & 0xFFFFFFFFFFFFLL;
  v34 = DecodingError.Context.hdhr_keyPathRepresentation.getter();
  v36 = v34;
  v37 = v35;
  if (v33)
  {
    v43[0] = 23342;
    v43[1] = 0xE200000000000000;
    sub_224F6812C();
    sub_224F67C94();
    swift_bridgeObjectRelease();
    sub_224F67C94();
    v44 = v36;
    v45 = v37;
    swift_bridgeObjectRetain();
    v44 = sub_224F67D24();
    v45 = v38;
    sub_224F67C7C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v43[0] = 0xD000000000000011;
    v43[1] = 0x8000000224F832C0;
    v44 = v34;
    v45 = v35;
    swift_bridgeObjectRetain();
    v44 = sub_224F67D24();
    v45 = v39;
    sub_224F67C7C();
  }
  swift_bridgeObjectRelease();
  v20 = v44;
  v21 = *(void (**)(char *, uint64_t))(v2 + 8);
  v22 = v7;
LABEL_6:
  v21(v22, v1);
  return v20;
}

uint64_t CodingKey.hdhr_keyPathRepresentation.getter()
{
  char v0;

  sub_224F685AC();
  if ((v0 & 1) != 0)
    return sub_224F685A0();
  else
    return sub_224F6839C();
}

uint64_t DecodingError.Context.hdhr_keyPathRepresentation.getter()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  uint64_t v13;

  v0 = sub_224F68120();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v13 = MEMORY[0x24BEE4AF8];
    sub_224E53720(0, v1, 0);
    v2 = v0 + 32;
    v3 = v13;
    do
    {
      sub_224DE5E88(v2, (uint64_t)v12);
      __swift_project_boxed_opaque_existential_1(v12, v12[3]);
      v4 = CodingKey.hdhr_keyPathRepresentation.getter();
      v6 = v5;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_224E53720(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v13;
      }
      v8 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v3 + 24);
      if (v8 >= v7 >> 1)
      {
        sub_224E53720(v7 > 1, v8 + 1, 1);
        v3 = v13;
      }
      *(_QWORD *)(v3 + 16) = v8 + 1;
      v9 = v3 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v4;
      *(_QWORD *)(v9 + 40) = v6;
      v2 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = MEMORY[0x24BEE4AF8];
  }
  v12[0] = v3;
  sub_224E68104();
  sub_224E79350();
  v10 = sub_224F67B44();
  swift_bridgeObjectRelease();
  return v10;
}

void sub_224F427B0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    sub_224F68138();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

unint64_t sub_224F4281C()
{
  unint64_t result;

  result = qword_2557E41B8;
  if (!qword_2557E41B8)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, &qword_2557E41B8);
  }
  return result;
}

id sub_224F42874(id result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 3)
  {
    swift_bridgeObjectRetain();
    return (id)swift_bridgeObjectRetain();
  }
  if (a5 != 2)
  {
    if (a5)
      return result;
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

void destroy for VCJWTVerificationError(uint64_t a1)
{
  sub_224F428D8(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

void sub_224F428D8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 3)
  {
    swift_bridgeObjectRelease();
LABEL_4:
    swift_bridgeObjectRelease();
    return;
  }
  if (a5 != 2)
  {
    if (a5)
      return;
    goto LABEL_4;
  }

}

uint64_t initializeWithCopy for VCJWTVerificationError(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_224F42874(*(id *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for VCJWTVerificationError(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_224F42874(*(id *)a2, v4, v5, v6, v7);
  v8 = *(void **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_224F428D8(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for VCJWTVerificationError(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_224F428D8(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for VCJWTVerificationError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VCJWTVerificationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_224F42AD0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 3u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_224F42AE8(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 4;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for VCJWTVerificationError()
{
  return &type metadata for VCJWTVerificationError;
}

void sub_224F42B14()
{
  __asm { BR              X10 }
}

uint64_t sub_224F42B58()
{
  sub_224F680E4();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  sub_224F67C94();
  return 0x687469772079656BLL;
}

void sub_224F42FE4(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_224F43030()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  char v11;

  if (v9)
  {
    swift_bridgeObjectRetain();
    sub_224F42874(v4, v3, v2, v0, v9);
    sub_224F428D8(v8, v7, v6, v5, v1);
    sub_224F428D8(v4, v3, v2, v0, v9);
    v11 = 0;
  }
  else
  {
    if (v8 == v4 && v7 == v3)
      v11 = 1;
    else
      v11 = sub_224F683CC();
    sub_224F42874(v4, v3, v2, v0, 0);
    sub_224F42874(v8, v7, v6, v5, 0);
    sub_224F428D8(v8, v7, v6, v5, 0);
    sub_224F428D8(v4, v3, v2, v0, 0);
  }
  return v11 & 1;
}

uint64_t sub_224F43450(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v2[69] = v1;
  v2[68] = a1;
  v2[70] = type metadata accessor for PostExtractionContext();
  v2[71] = swift_task_alloc();
  v2[72] = type metadata accessor for FHIRExtractionContext();
  v2[73] = swift_task_alloc();
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E41C8, (uint64_t (*)(uint64_t))type metadata accessor for RecordExtractionContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v2[74] = swift_task_alloc();
  v4 = type metadata accessor for RecordExtractionContext();
  v2[75] = v4;
  v2[76] = *(_QWORD *)(v4 - 8);
  v2[77] = swift_task_alloc();
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], v3);
  v2[78] = swift_task_alloc();
  v5 = sub_224F67760();
  v2[79] = v5;
  v2[80] = *(_QWORD *)(v5 - 8);
  v2[81] = swift_task_alloc();
  v2[82] = type metadata accessor for ExtractionContext();
  v2[83] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F435E4()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t inited;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  char v28;
  __int128 *v29;
  uint64_t (*v30)(uint64_t);
  unint64_t *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  void *v67;
  id *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  id v87;
  void *v88;
  void *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v1 = *(void **)(v0 + 544);
  v2 = objc_msgSend(v1, sel_identifier);
  v3 = objc_msgSend(v2, sel_resourceType);

  v4 = sub_224F67B80();
  v6 = v5;

  *(_QWORD *)(v0 + 672) = v4;
  *(_QWORD *)(v0 + 680) = v6;
  v7 = objc_msgSend(v1, sel_FHIRVersion);
  v8 = objc_msgSend(v7, sel_FHIRRelease);

  LOBYTE(v1) = sub_224E5C60C(v4, v6, (uint64_t)v8, v1);
  if ((v1 & 1) == 0)
  {
    v20 = *(void **)(v0 + 544);
    sub_224F67B80();
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E1478, (uint64_t (*)(uint64_t))sub_224E5373C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_224F6D8B0;
    *(_QWORD *)(inited + 32) = sub_224F67B80();
    *(_QWORD *)(inited + 40) = v22;
    sub_224F680E4();
    swift_bridgeObjectRelease();
    v100 = v4;
    sub_224F67C94();
    v23 = objc_msgSend(v20, sel_FHIRVersion);
    v24 = objc_msgSend(v23, sel_FHIRRelease);

    sub_224F67B80();
    sub_224F67C94();
    swift_bridgeObjectRelease();
    sub_224F67C94();
    *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 48) = v100;
    *(_QWORD *)(inited + 56) = v6;
    sub_224E51ED8(inited);
    v25 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v26 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v27 = (void *)sub_224F67AE4();
    swift_bridgeObjectRelease();
    objc_msgSend(v25, sel_initWithDomain_code_userInfo_, v26, 125, v27);

    swift_willThrow();
    goto LABEL_23;
  }
  v9 = *(void **)(v0 + 544);
  v10 = objc_msgSend(v9, sel_data);
  v11 = sub_224F67658();
  v13 = v12;

  *(_QWORD *)(v0 + 688) = v11;
  *(_QWORD *)(v0 + 696) = v13;
  v14 = objc_msgSend(v9, sel_FHIRVersion);
  v15 = objc_msgSend(v14, sel_FHIRRelease);

  v16 = sub_224F67B80();
  v18 = v17;
  if (v16 == sub_224F67B80() && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v28 = sub_224F683CC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
      v33 = sub_224F67B80();
      v35 = v34;
      if (v33 == sub_224F67B80() && v35 == v36)
      {
        swift_bridgeObjectRelease_n();

      }
      else
      {
        v37 = sub_224F683CC();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        if ((v37 & 1) == 0)
        {
          v99 = v11;
          v82 = *(void **)(v0 + 544);
          sub_224F67B80();
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E1478, (uint64_t (*)(uint64_t))sub_224E5373C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
          v83 = swift_initStackObject();
          *(_OWORD *)(v83 + 16) = xmmword_224F6D8B0;
          *(_QWORD *)(v83 + 32) = sub_224F67B80();
          *(_QWORD *)(v83 + 40) = v84;
          sub_224F680E4();
          swift_bridgeObjectRelease();
          v101 = v4;
          sub_224F67C94();
          v85 = objc_msgSend(v82, sel_FHIRVersion);
          v86 = objc_msgSend(v85, sel_FHIRRelease);

          sub_224F67B80();
          sub_224F67C94();
          swift_bridgeObjectRelease();
          sub_224F67C94();
          *(_QWORD *)(v83 + 72) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v83 + 48) = v101;
          *(_QWORD *)(v83 + 56) = v6;
          sub_224E51ED8(v83);
          v87 = objc_allocWithZone(MEMORY[0x24BDD1540]);
          v88 = (void *)sub_224F67B5C();
          swift_bridgeObjectRelease();
          v89 = (void *)sub_224F67AE4();
          swift_bridgeObjectRelease();
          objc_msgSend(v87, sel_initWithDomain_code_userInfo_, v88, 125, v89);

          swift_willThrow();
          sub_224DDE9B4(v99, v13);
          goto LABEL_23;
        }
      }
      v29 = (__int128 *)(v0 + 336);
      v30 = type metadata accessor for ModelsR4.ResourceProxy;
      *(_QWORD *)(v0 + 360) = type metadata accessor for ModelsR4.ResourceProxy(0);
      *(_QWORD *)(v0 + 368) = &off_24ED06560;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 336));
      v31 = (unint64_t *)&qword_2557E06F0;
      v32 = &protocol conformance descriptor for ModelsR4.ResourceProxy;
      goto LABEL_13;
    }
  }
  v29 = (__int128 *)(v0 + 496);

  v30 = type metadata accessor for ModelsDSTU2.ResourceProxy;
  *(_QWORD *)(v0 + 520) = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  *(_QWORD *)(v0 + 528) = &off_24ED06370;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 496));
  v31 = &qword_2557E2030;
  v32 = &protocol conformance descriptor for ModelsDSTU2.ResourceProxy;
LABEL_13:
  sub_224DDACD4(v31, v30, (uint64_t)v32);
  sub_224F67280();
  sub_224E593B0(v29, v0 + 376);
  *(_QWORD *)(v0 + 704) = 0;
  v38 = *(void **)(v0 + 544);
  v39 = *MEMORY[0x24BE48AB0];
  v40 = objc_msgSend(v38, sel_extractionHints);
  v41 = objc_msgSend(v38, sel_receivedDate);
  sub_224F6773C();

  v42 = objc_msgSend(v38, sel_serverBaseURL);
  v43 = *(_QWORD *)(v0 + 624);
  v90 = v13;
  v98 = v11;
  v95 = v40;
  v96 = v39;
  if (v42)
  {
    v44 = v42;
    sub_224F67598();

    v45 = sub_224F675D4();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v43, 0, 1, v45);
  }
  else
  {
    v46 = sub_224F675D4();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v43, 1, 1, v46);
  }
  v47 = *(char **)(v0 + 664);
  v48 = *(int **)(v0 + 656);
  v49 = *(_QWORD *)(v0 + 648);
  v50 = *(_QWORD *)(v0 + 640);
  v51 = *(_QWORD *)(v0 + 632);
  v93 = *(_QWORD *)(v0 + 608);
  v94 = *(_QWORD *)(v0 + 600);
  v91 = *(_QWORD *)(v0 + 624);
  v92 = *(_QWORD *)(v0 + 592);
  v52 = objc_msgSend(*(id *)(v0 + 544), sel_country);
  v53 = sub_224F67B80();
  v55 = v54;

  *(_QWORD *)v47 = v96;
  *((_QWORD *)v47 + 1) = v95;
  *((_QWORD *)v47 + 2) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(&v47[v48[7]], v49, v51);
  sub_224E77848(v91, (uint64_t)&v47[v48[8]]);
  v56 = (uint64_t *)&v47[v48[9]];
  *v56 = v53;
  v56[1] = v55;
  *(_QWORD *)&v47[v48[10]] = 0;
  v57 = v48[11];
  type metadata accessor for CodeableConceptLookupService();
  v58 = swift_allocObject();
  *(_QWORD *)(v58 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3C40]), sel_init);
  *(_QWORD *)&v47[v57] = v58;
  v59 = *(_QWORD *)(v0 + 400);
  v60 = *(_QWORD *)(v0 + 408);
  v97 = (_QWORD *)(v0 + 376);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 376), v59);
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v47, v59, v60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v92, 1, v94) == 1)
  {
    v61 = *(_QWORD *)(v0 + 664);
    v62 = *(_QWORD *)(v0 + 592);
    swift_bridgeObjectRelease();
    sub_224DDB50C(v62, &qword_2557E41C8, (uint64_t (*)(uint64_t))type metadata accessor for RecordExtractionContext);
    sub_224F67B80();
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E1478, (uint64_t (*)(uint64_t))sub_224E5373C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v63 = swift_initStackObject();
    *(_OWORD *)(v63 + 16) = xmmword_224F6D8B0;
    *(_QWORD *)(v63 + 32) = sub_224F67B80();
    *(_QWORD *)(v63 + 40) = v64;
    *(_QWORD *)(v63 + 72) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v63 + 48) = 0xD00000000000003FLL;
    *(_QWORD *)(v63 + 56) = 0x8000000224F83430;
    sub_224E51ED8(v63);
    v65 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v66 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v67 = (void *)sub_224F67AE4();
    swift_bridgeObjectRelease();
    objc_msgSend(v65, sel_initWithDomain_code_userInfo_, v66, 125, v67);

    swift_willThrow();
    sub_224DDE9B4(v98, v90);
  }
  else
  {
    v68 = *(id **)(v0 + 616);
    sub_224F45240(*(_QWORD *)(v0 + 592), (uint64_t)v68);
    v69 = objc_msgSend(*v68, sel_fhirIdentifier);
    *(_QWORD *)(v0 + 712) = v69;
    if (v69)
    {
      v70 = *(_QWORD *)(v0 + 400);
      v71 = *(_QWORD *)(v0 + 408);
      __swift_project_boxed_opaque_existential_1(v97, v70);
      v72 = *(int **)(v71 + 24);
      v73 = *v72;
      v74 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 720) = v74;
      *v74 = v0;
      v74[1] = sub_224F442E0;
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))((char *)v72 + v73))(*(_QWORD *)(v0 + 616), v70, v71);
    }
    v61 = *(_QWORD *)(v0 + 664);
    v76 = *(_QWORD *)(v0 + 616);
    swift_bridgeObjectRelease();
    sub_224F67B80();
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E1478, (uint64_t (*)(uint64_t))sub_224E5373C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v77 = swift_initStackObject();
    *(_OWORD *)(v77 + 16) = xmmword_224F6D8B0;
    *(_QWORD *)(v77 + 32) = sub_224F67B80();
    *(_QWORD *)(v77 + 40) = v78;
    *(_QWORD *)(v77 + 72) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v77 + 48) = 0xD000000000000041;
    *(_QWORD *)(v77 + 56) = 0x8000000224F83470;
    sub_224E51ED8(v77);
    v79 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v80 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v81 = (void *)sub_224F67AE4();
    swift_bridgeObjectRelease();
    objc_msgSend(v79, sel_initWithDomain_code_userInfo_, v80, 100, v81);

    swift_willThrow();
    sub_224DDE9B4(v98, v90);
    sub_224DDEAA0(v76, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  }
  sub_224DDEAA0(v61, (uint64_t (*)(_QWORD))type metadata accessor for ExtractionContext);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
LABEL_23:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F442E0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 728) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F44368()
{
  uint64_t v0;
  void *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void *, uint64_t, uint64_t);
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v45;
  id v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  id v58;
  void *v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  id v64;
  id v65;
  void *v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  int *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v1 = *(void **)(v0 + 728);
  v2 = *(void **)(v0 + 712);
  v3 = *(_QWORD *)(v0 + 696);
  v86 = *(_QWORD *)(v0 + 688);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(_QWORD *)(v0 + 616);
  if (!v1)
  {
    v41 = *(_QWORD *)(v0 + 664);
    swift_bridgeObjectRelease();
    sub_224F67B80();
    v42 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v43 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    objc_msgSend(v42, sel_initWithDomain_code_userInfo_, v43, 125, 0);

    swift_willThrow();
    sub_224DDE9B4(v86, v3);
    sub_224DDEAA0(v5, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    sub_224DDEAA0(v41, (uint64_t (*)(_QWORD))type metadata accessor for ExtractionContext);
    v40 = v0 + 376;
    goto LABEL_9;
  }
  v74 = *(_QWORD *)(v0 + 672);
  v6 = *(_QWORD *)(v0 + 584);
  v88 = v0 + 376;
  v79 = *(_QWORD *)(v0 + 696);
  v7 = *(int **)(v0 + 576);
  v8 = *(_QWORD *)(v0 + 568);
  v83 = *(int **)(v0 + 560);
  v9 = *(void **)(v0 + 544);
  sub_224E7BB9C(v5, v6);
  v10 = objc_msgSend(v2, sel_identifier);
  v11 = sub_224F67B80();
  v76 = v5;
  v13 = v12;

  v14 = objc_msgSend(v9, sel_FHIRVersion);
  v15 = (_QWORD *)(v6 + v7[5]);
  *v15 = v74;
  v15[1] = v4;
  v16 = (uint64_t *)(v6 + v7[6]);
  *v16 = v11;
  v16[1] = v13;
  *(_QWORD *)(v6 + v7[7]) = v14;
  v17 = (uint64_t *)(v6 + v7[8]);
  *v17 = v86;
  v17[1] = v79;
  v18 = *(_QWORD *)(v0 + 400);
  v19 = *(_QWORD *)(v0 + 408);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 376), v18);
  v20 = *(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v19 + 32);
  sub_224DDE970(v86, v79);
  v21 = (void *)v20(v6, v1, v18, v19);
  sub_224E7BB9C(v76, v8);
  v22 = v21;
  v23 = v1;
  v24 = objc_msgSend(v9, sel_FHIRVersion);
  *(_QWORD *)(v8 + v83[5]) = v23;
  *(_QWORD *)(v8 + v83[6]) = v21;
  *(_QWORD *)(v8 + v83[7]) = v24;
  v25 = *(_QWORD *)(v0 + 400);
  v26 = *(_QWORD *)(v0 + 408);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 376), v25);
  v27 = v8;
  v28 = (__int128 *)(v0 + 456);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 40))(v27, v25, v26);
  sub_224F45284(v29 + 24, v0 + 456);
  v87 = v29;
  if (*(_QWORD *)(v0 + 480))
  {
    v84 = v22;
    sub_224E593B0(v28, v0 + 416);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 440));
    if (qword_2557E0120 != -1)
      swift_once();
    v30 = *(_QWORD *)(v0 + 704);
    v31 = sub_224F672D4();
    if (v30)
    {
      v33 = *(_QWORD *)(v0 + 696);
      v34 = *(_QWORD *)(v0 + 688);
      v35 = *(_QWORD *)(v0 + 664);
      v36 = *(_QWORD *)(v0 + 616);
      v37 = *(_QWORD *)(v0 + 584);
      v38 = *(_QWORD *)(v0 + 568);

      swift_release();
      sub_224DDE9B4(v34, v33);
      sub_224DDEAA0(v38, (uint64_t (*)(_QWORD))type metadata accessor for PostExtractionContext);
      sub_224DDEAA0(v37, (uint64_t (*)(_QWORD))type metadata accessor for FHIRExtractionContext);
      sub_224DDEAA0(v36, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
      v39 = v35;
LABEL_7:
      sub_224DDEAA0(v39, (uint64_t (*)(_QWORD))type metadata accessor for ExtractionContext);
      __swift_destroy_boxed_opaque_existential_1(v88);
      v40 = v0 + 416;
LABEL_9:
      __swift_destroy_boxed_opaque_existential_1(v40);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v51 = v31;
    v52 = v32;
    v53 = *(void **)(v0 + 544);
    v54 = (void *)sub_224F67640();
    *(_QWORD *)(v0 + 536) = 0;
    v47 = objc_msgSend(v53, sel_copyWithAlteredData_error_, v54, v0 + 536);

    v55 = *(void **)(v0 + 536);
    if (!v47)
    {
      v68 = *(void **)(v0 + 712);
      v69 = *(_QWORD *)(v0 + 688);
      v85 = *(_QWORD *)(v0 + 664);
      v82 = *(id *)(v0 + 616);
      v78 = *(_QWORD *)(v0 + 696);
      v81 = *(_QWORD *)(v0 + 584);
      v70 = *(_QWORD *)(v0 + 568);
      v71 = v55;
      sub_224F67544();

      swift_willThrow();
      sub_224DDE9B4(v51, v52);

      swift_release();
      sub_224DDE9B4(v69, v78);
      sub_224DDEAA0(v70, (uint64_t (*)(_QWORD))type metadata accessor for PostExtractionContext);
      sub_224DDEAA0(v81, (uint64_t (*)(_QWORD))type metadata accessor for FHIRExtractionContext);
      sub_224DDEAA0((uint64_t)v82, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
      v39 = v85;
      goto LABEL_7;
    }
    v56 = v55;
    sub_224DDE9B4(v51, v52);
    __swift_destroy_boxed_opaque_existential_1(v0 + 416);
    v22 = v84;
    if (!*(_QWORD *)(v87 + 16))
      goto LABEL_14;
  }
  else
  {
    v45 = *(void **)(v0 + 544);
    sub_224DDB50C((uint64_t)v28, (unint64_t *)&qword_2557E1CD8, (uint64_t (*)(uint64_t))sub_224F452E0);
    v46 = v45;
    v47 = *(id *)(v0 + 544);
    if (!*(_QWORD *)(v29 + 16))
    {
LABEL_14:
      v57 = v23;
      v58 = v22;
      v50 = 0;
      goto LABEL_15;
    }
  }
  sub_224E5451C(0, (unint64_t *)&qword_2557E2800);
  v48 = v23;
  v49 = v22;
  swift_bridgeObjectRetain();
  v50 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
LABEL_15:
  v59 = *(void **)(v0 + 712);
  v73 = *(_QWORD *)(v0 + 688);
  v75 = *(_QWORD *)(v0 + 696);
  v60 = *(_QWORD *)(v0 + 664);
  v77 = *(_QWORD *)(v0 + 584);
  v80 = *(_QWORD *)(v0 + 616);
  v72 = *(_QWORD *)(v0 + 568);
  v61 = v22;
  v62 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE48960]), sel_initWithMedicalRecord_clinicalRecord_downloadableAttachments_, v23, v22, v50);

  sub_224EFAB14();
  v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_224F71240;
  *(_QWORD *)(v63 + 32) = v62;
  sub_224F67D84();
  v64 = objc_allocWithZone(MEMORY[0x24BE48958]);
  sub_224E5451C(0, &qword_2557E41D8);
  v65 = v62;
  v66 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v67 = objc_msgSend(v64, sel_initWithOriginalFHIRResource_units_flags_, v47, v66, 2);

  swift_release();
  sub_224DDE9B4(v73, v75);
  sub_224DDEAA0(v72, (uint64_t (*)(_QWORD))type metadata accessor for PostExtractionContext);
  sub_224DDEAA0(v77, (uint64_t (*)(_QWORD))type metadata accessor for FHIRExtractionContext);
  sub_224DDEAA0(v80, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  sub_224DDEAA0(v60, (uint64_t (*)(_QWORD))type metadata accessor for ExtractionContext);
  __swift_destroy_boxed_opaque_existential_1(v88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v67);
}

uint64_t sub_224F44C88(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  _QWORD *v7;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  a3;
  v7 = (_QWORD *)swift_task_alloc();
  v3[5] = v7;
  *v7 = v3;
  v7[1] = sub_224F02FD4;
  return sub_224F43450((uint64_t)v6);
}

id sub_224F44D04(void *a1, void *a2)
{
  void *v2;
  id v3;
  uint64_t v5;

  v3 = sub_224EED38C(a1, a2);
  if (v2)
  {
    swift_getErrorValue();
    sub_224EEB434(v5);
    swift_willThrow();

  }
  return v3;
}

id HealthRecordsExtractor.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id HealthRecordsExtractor.init()()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  uint64_t v4;
  objc_super v6;

  v1 = OBJC_IVAR___HKHealthRecordsExtractor_router;
  v2 = objc_allocWithZone((Class)type metadata accessor for HealthRecordsExtractionRouter());
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, sel_init);
  v4 = OBJC_IVAR___HKHealthRecordsExtractor_decoder;
  sub_224F67298();
  swift_allocObject();
  *(_QWORD *)&v3[v4] = sub_224F6728C();

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for HealthRecordsExtractor();
  return objc_msgSendSuper2(&v6, sel_init);
}

id HealthRecordsExtractor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HealthRecordsExtractor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_224F45044(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_224EF7B90;
  return v6();
}

uint64_t sub_224F45098(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_224EF7B90;
  return v7();
}

uint64_t sub_224F450EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_224F67E20();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_224F67E14();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_224DDB50C(a1, &qword_2557E3168, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990]);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_224F67DCC();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_224F45240(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RecordExtractionContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_224F45284(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1CD8, (uint64_t (*)(uint64_t))sub_224F452E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_224F452E0()
{
  unint64_t result;

  result = qword_2557E1CE0;
  if (!qword_2557E1CE0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E1CE0);
  }
  return result;
}

uint64_t type metadata accessor for HealthRecordsExtractor()
{
  return objc_opt_self();
}

uint64_t method lookup function for HealthRecordsExtractor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HealthRecordsExtractor.extract(resource:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((*MEMORY[0x24BEE4EA0] & *v1) + 0x60);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_224F05C8C;
  return v7(a1);
}

uint64_t dispatch thunk of HealthRecordsExtractor.comparePatientResourceData(existing:incoming:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t sub_224F45400()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_224F45434()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_224EF7808;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_2557E4218 + dword_2557E4218))(v2, v3, v4);
}

uint64_t sub_224F454A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_224F454CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_224EF7808;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2557E4238 + dword_2557E4238))(a1, v4);
}

id sub_224F4553C(id result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 2:
      return (id)swift_bridgeObjectRetain();
    case 1:
      swift_bridgeObjectRetain();
      return (id)swift_bridgeObjectRetain();
    case 0:
      return result;
  }
  return result;
}

void destroy for CryptoUtilitiesError(uint64_t a1)
{
  sub_224F455A0(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

void sub_224F455A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 2:
      goto LABEL_5;
    case 1:
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      return;
    case 0:

      break;
  }
}

uint64_t initializeWithCopy for CryptoUtilitiesError(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_224F4553C(*(id *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for CryptoUtilitiesError(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_224F4553C(*(id *)a2, v4, v5, v6, v7);
  v8 = *(void **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_224F455A0(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for CryptoUtilitiesError(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_224F455A0(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CryptoUtilitiesError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CryptoUtilitiesError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_224F45798(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 2u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_224F457B0(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CryptoUtilitiesError()
{
  return &type metadata for CryptoUtilitiesError;
}

_BYTE *sub_224F457DC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_224F45914(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_224F459D4((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_224F45A4C((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_224F45850(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_224F673B8();
  if (!result || (result = sub_224F673D0(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_224F673C4();
      sub_224F67A90();
      sub_224DDACD4(&qword_2557E4248, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B90], MEMORY[0x24BDC6B88]);
      return sub_224F679D0();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_224F45914(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_224F459D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_224F673DC();
  swift_allocObject();
  result = sub_224F673AC();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_224F67610();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_224F45A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_224F673DC();
  swift_allocObject();
  result = sub_224F673AC();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

void sub_224F45ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  v3 = sub_224F67A90();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B90];
  MEMORY[0x24BDAC7A8](v3);
  v5 = sub_224F67A84();
  MEMORY[0x24BDAC7A8](v5);
  sub_224DDACD4(&qword_2557E4248, v4, MEMORY[0x24BDC6B88]);
  sub_224F679E8();
  __asm { BR              X10 }
}

uint64_t sub_224F45BD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;

  *(_QWORD *)(v7 - 128) = v5;
  *(_WORD *)(v7 - 120) = v4;
  *(_BYTE *)(v7 - 118) = BYTE2(v4);
  *(_BYTE *)(v7 - 117) = BYTE3(v4);
  *(_BYTE *)(v7 - 116) = BYTE4(v4);
  *(_BYTE *)(v7 - 115) = BYTE5(v4);
  sub_224F679D0();
  sub_224DDE9B4(v5, v4);
  sub_224F679DC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 160) + 8))(v3, v2);
  *(_QWORD *)(v7 - 104) = v0;
  *(_QWORD *)(v7 - 96) = sub_224DDACD4(&qword_2557E4250, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B58], MEMORY[0x24BDC6B48]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 - 128));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(boxed_opaque_existential_1, v1, v0);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v7 - 128), *(_QWORD *)(v7 - 104));
  sub_224F67478();
  v9 = *(_QWORD *)(v7 - 144);
  __swift_destroy_boxed_opaque_existential_1(v7 - 128);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v0);
  return v9;
}

uint64_t sub_224F45E30()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_224EEBCD0(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DownloadableAttachmentExtractionResult()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataExtractionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_224F45EC8 + 4 * byte_224F76135[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_224F45EFC + 4 * asc_224F76130[v4]))();
}

uint64_t sub_224F45EFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F45F04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224F45F0CLL);
  return result;
}

uint64_t sub_224F45F18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224F45F20);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_224F45F24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F45F2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataExtractionError()
{
  return &type metadata for SignedClinicalDataExtractionError;
}

uint64_t sub_224F45F4C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_224F45F88 + 4 * byte_224F7613A[a1]))(0xD00000000000001BLL, 0x8000000224F83640);
}

uint64_t sub_224F45F88()
{
  uint64_t v0;

  return v0 + 5;
}

unint64_t sub_224F45FB0()
{
  return 0xD000000000000015;
}

uint64_t sub_224F45FCC()
{
  unsigned __int8 *v0;

  return sub_224F45F4C(*v0);
}

unint64_t sub_224F45FD8()
{
  unint64_t result;

  result = qword_2557E4300;
  if (!qword_2557E4300)
  {
    result = MEMORY[0x22768ED24](&unk_224F761EC, &type metadata for SignedClinicalDataExtractionError);
    atomic_store(result, (unint64_t *)&qword_2557E4300);
  }
  return result;
}

uint64_t sub_224F4601C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

id sub_224F46034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 24);
  v8 = *(_OWORD *)(v1 + 72);
  v9 = *(_QWORD *)(v1 + 88);
  v2 = sub_224EEF95C();
  *(_QWORD *)(v0 + 32) = v2;
  sub_224E5451C(0, (unint64_t *)&qword_2557E1CF8);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestReportTypeForIdentifier_, *MEMORY[0x24BDD2B90], v8, v9);
  *(_QWORD *)(v0 + 40) = result;
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(v0 + 16);
    v6 = v5 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {

      return (id)(*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
    }
    else
    {
      *(_QWORD *)(v0 + 48) = *(_QWORD *)(v6 + *(int *)(type metadata accessor for ExtractionContext() + 44));
      swift_retain();
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 56) = v7;
      *v7 = v0;
      v7[1] = sub_224E735A0;
      return (id)sub_224ED0FBC(v2, (uint64_t)v4);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_224F46164()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(), sel_FHIRDocumentReferenceClinicalNoteCategorySystem);
  v1 = objc_msgSend(v0, sel_identifier);

  v2 = sub_224F67B80();
  v4 = v3;

  qword_2557FC998 = v2;
  unk_2557FC9A0 = v4;
}

uint64_t sub_224F461E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;

  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v31 - v2;
  v4 = sub_224F675D4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for Coding();
  v8 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E1438, v11);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v31 - v13;
  v15 = *(_QWORD *)(v0 + 96);
  v36 = *(_QWORD *)(v15 + 16);
  if (!v36)
    return 0;
  v35 = v15 + 32;
  v31 = v15;
  swift_bridgeObjectRetain_n();
  v16 = 0;
  v39 = v4;
  v40 = v3;
  v32 = v8;
  v33 = v14;
  do
  {
    v17 = v35 + 24 * v16;
    v18 = *(_QWORD *)(v17 + 16);
    v19 = qword_2557E01B8;
    v38 = *(_QWORD *)(v17 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v19 == -1)
    {
      if (!v18)
        goto LABEL_3;
    }
    else
    {
      swift_once();
      if (!v18)
      {
LABEL_3:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v14, 1, 1, v44);
        goto LABEL_4;
      }
    }
    v37 = v16;
    v20 = *(_QWORD *)(v18 + 16);
    if (v20)
    {
      v41 = unk_2557FC9A0;
      v42 = qword_2557FC998;
      v21 = v8;
      v22 = v18 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      v34 = v18;
      swift_bridgeObjectRetain_n();
      v45 = *(_QWORD *)(v21 + 72);
      do
      {
        sub_224DDB408(v22, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
        v23 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
        sub_224E75F34((uint64_t)v10, (uint64_t)v3, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
        {
          sub_224E7601C((uint64_t)v3, (unint64_t *)&qword_2557E02A8, v23);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
          v24 = (uint64_t *)&v10[*(int *)(v44 + 20)];
          v25 = v24[1];
          if (v25)
          {
            v43 = *v24;
            v47 = sub_224F6755C();
            v48 = v26;
            v46[0] = v42;
            v46[1] = v41;
            sub_224E51E94();
            v27 = sub_224F6803C();
            swift_bridgeObjectRelease();
            if (v27)
            {
              v4 = v39;
              (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v39);
              v3 = v40;
            }
            else
            {
              v47 = v43;
              v48 = v25;
              strcpy((char *)v46, "clinical-note");
              HIWORD(v46[1]) = -4864;
              v28 = sub_224F6803C();
              v4 = v39;
              (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v39);
              v3 = v40;
              if (!v28)
              {
                swift_bridgeObjectRelease();
                v14 = v33;
                sub_224DDEADC((uint64_t)v10, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
                v8 = v32;
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v14, 0, 1, v44);
                v16 = v37;
                goto LABEL_21;
              }
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          }
        }
        sub_224DDEAA0((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
        v22 += v45;
        --v20;
      }
      while (v20);
      swift_bridgeObjectRelease();
      v8 = v32;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    v16 = v37;
    v14 = v33;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v33, 1, 1, v44);
LABEL_21:
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v44) != 1)
    {
      sub_224E7601C((uint64_t)v14, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = 1;
      goto LABEL_27;
    }
LABEL_4:
    ++v16;
    sub_224E7601C((uint64_t)v14, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  while (v16 != v36);
  v29 = 0;
LABEL_27:
  swift_bridgeObjectRelease_n();
  return v29;
}

uint64_t sub_224F466EC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  sub_224E63218(0, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  v2[12] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[13] = swift_task_alloc();
  v2[14] = *(_QWORD *)(type metadata accessor for Reference() - 8);
  v2[15] = swift_task_alloc();
  v2[16] = *(_QWORD *)(type metadata accessor for ModelsR4.DocumentReferenceContent(0) - 8);
  v2[17] = swift_task_alloc();
  v3 = sub_224F6770C();
  v2[18] = v3;
  v2[19] = *(_QWORD *)(v3 - 8);
  v2[20] = swift_task_alloc();
  v4 = sub_224F67760();
  v2[21] = v4;
  v2[22] = *(_QWORD *)(v4 - 8);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v5 = type metadata accessor for FHIRDateTime();
  v2[26] = v5;
  v2[27] = *(_QWORD *)(v5 - 8);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  sub_224F6743C();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  sub_224E63218(0, &qword_2557E0578, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContext);
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  sub_224E63218(0, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F469A8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t *v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v1 = v0[38];
  v2 = (_QWORD *)v0[11];
  v3 = objc_msgSend((id)objc_opt_self(), sel_FHIRDocumentReferenceClinicalNoteStatus);
  v0[45] = v3;
  v4 = v2[5];
  v5 = v2[6];
  v0[46] = v5;
  v6 = sub_224F67B80();
  v0[2] = v3;
  v0[47] = v7;
  v0[3] = v4;
  v0[4] = v5;
  v0[5] = v6;
  v0[6] = v7;
  v0[7] = 0;
  v0[8] = 0;
  v8 = v2[12];
  swift_bridgeObjectRetain();
  v0[48] = Array<A>.asCodingCollectionArray()(v8);
  v119 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
  v9 = (uint64_t)v2 + v119[15];
  sub_224E75F34(v9, v1, &qword_2557E0578, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContext);
  v10 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  if (v11(v1, 1, v10) == 1)
  {
    v12 = v0[38];
    v13 = &qword_2557E0578;
    v14 = (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContext;
LABEL_7:
    sub_224E7601C(v12, v13, v14);
    v24 = 0;
    goto LABEL_8;
  }
  v15 = v0[40];
  v16 = v0[38];
  sub_224E75F34(v16 + *(int *)(v10 + 20), v15, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
  sub_224DDEAA0(v16, type metadata accessor for ModelsR4.DocumentReferenceContext);
  v17 = type metadata accessor for Period();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v15, 1, v17) == 1)
  {
    v12 = v0[40];
    v13 = &qword_2557E04B8;
    v14 = (void (*)(uint64_t))type metadata accessor for Period;
    goto LABEL_7;
  }
  v18 = v0[44];
  v19 = v0[40];
  v20 = v0[26];
  v21 = v0[27];
  sub_224E75F34(v19, v18, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDEAA0(v19, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20);
  v23 = v0[44];
  if (v22 == 1)
  {
    v13 = &qword_2557E02D0;
    v14 = (void (*)(uint64_t))type metadata accessor for FHIRDateTime;
    v12 = v0[44];
    goto LABEL_7;
  }
  if (*(_QWORD *)(v23 + 56) == 1)
  {
    if ((*(_BYTE *)(v23 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v23 + 17))
        v68 = 3;
      else
        v68 = 2;
    }
    else
    {
      v68 = 1;
    }
  }
  else
  {
    v68 = 0;
  }
  v85 = v0[36];
  v86 = v0[26];
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v87 = (uint64_t *)(v23 + *(int *)(v86 + 32));
  v88 = *v87;
  v89 = v87[1];
  swift_bridgeObjectRetain();
  v24 = sub_224F00474(v85, v88, v89, v68);
  sub_224DDEAA0(v0[44], (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_8:
  v0[49] = v24;
  v25 = v0[37];
  sub_224E75F34(v9, v25, &qword_2557E0578, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContext);
  if (v11(v25, 1, v10) == 1)
  {
    v26 = v0[37];
    v27 = &qword_2557E0578;
    v28 = (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContext;
LABEL_14:
    sub_224E7601C(v26, v27, v28);
    v38 = 0;
    goto LABEL_15;
  }
  v29 = v0[39];
  v30 = v0[37];
  sub_224E75F34(v30 + *(int *)(v10 + 20), v29, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
  sub_224DDEAA0(v30, type metadata accessor for ModelsR4.DocumentReferenceContext);
  v31 = type metadata accessor for Period();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v29, 1, v31) == 1)
  {
    v26 = v0[39];
    v27 = &qword_2557E04B8;
    v28 = (void (*)(uint64_t))type metadata accessor for Period;
    goto LABEL_14;
  }
  v32 = v0[43];
  v33 = v0[39];
  v34 = v0[26];
  v35 = v0[27];
  sub_224E75F34(v33 + *(int *)(v31 + 20), v32, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDEAA0(v33, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v32, 1, v34);
  v37 = v0[43];
  if (v36 == 1)
  {
    v27 = &qword_2557E02D0;
    v28 = (void (*)(uint64_t))type metadata accessor for FHIRDateTime;
    v26 = v0[43];
    goto LABEL_14;
  }
  if (*(_QWORD *)(v37 + 56) == 1)
  {
    if ((*(_BYTE *)(v37 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v37 + 17))
        v72 = 3;
      else
        v72 = 2;
    }
    else
    {
      v72 = 1;
    }
  }
  else
  {
    v72 = 0;
  }
  v90 = v0[35];
  v91 = v0[26];
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v92 = (uint64_t *)(v37 + *(int *)(v91 + 32));
  v93 = *v92;
  v94 = v92[1];
  swift_bridgeObjectRetain();
  v38 = sub_224F00474(v90, v93, v94, v72);
  sub_224DDEAA0(v0[43], (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_15:
  v0[50] = v38;
  v39 = v0[32];
  v40 = v0[25];
  v41 = v0[21];
  v42 = v0[22];
  v44 = v0[19];
  v43 = v0[20];
  v45 = v0[18];
  sub_224F676B8();
  sub_224F2CA44(v43);
  sub_224F676AC();
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
  v46 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  v46(v40, v41);
  FHIRDateTime.init(_:)(v39);
  v47 = *(_QWORD *)(v0[11] + v119[14]);
  sub_224DDB408(v0[32], v0[30], (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v48 = *(_QWORD *)(v47 + 16);
  if (v48)
  {
    v121 = v0[27];
    v49 = v0[16];
    v50 = v47 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
    v51 = *(_QWORD *)(v49 + 72);
    swift_bridgeObjectRetain();
    v120 = v51;
    do
    {
      v52 = v0[42];
      v53 = v0[26];
      v54 = v0[17];
      sub_224DDB408(v50, v54, type metadata accessor for ModelsR4.DocumentReferenceContent);
      v55 = type metadata accessor for Attachment();
      sub_224E75F34(v54 + *(int *)(v55 + 40), v52, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v121 + 48))(v52, 1, v53);
      v57 = v0[42];
      if (v56 == 1)
      {
        sub_224E7601C(v57, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      }
      else
      {
        v58 = v0[24];
        sub_224DDEADC(v57, v0[29], (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        FHIRDateTime.asNSDate()(v58);
        FHIRDateTime.asNSDate()(v0[23]);
        v59 = v0[24];
        v65 = v0[23];
        v66 = v0[21];
        v67 = sub_224F67748();
        v46(v65, v66);
        v46(v59, v66);
        v60 = v0 + 29;
        v61 = v0 + 30;
        if (v67 != -1)
        {
          v60 = v0 + 30;
          v61 = v0 + 29;
        }
        v62 = *v61;
        v63 = v0[30];
        v64 = v0[28];
        sub_224DDEAA0(*v60, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        sub_224DDEADC(v62, v64, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        sub_224DDEADC(v64, v63, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v51 = v120;
      }
      sub_224DDEAA0(v0[17], type metadata accessor for ModelsR4.DocumentReferenceContent);
      v50 += v51;
      --v48;
    }
    while (v48);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  sub_224DDEADC(v0[30], v0[31], (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  swift_bridgeObjectRelease();
  if (_s23HealthRecordsExtraction12FHIRDateTimeV1loiySbAC_ACtFZ_0())
  {
    v69 = v0[31];
    if (*(_QWORD *)(v69 + 56) == 1)
    {
      if ((*(_BYTE *)(v69 + 19) & 1) != 0)
      {
        if (*(_BYTE *)(v69 + 17))
          v70 = 3;
        else
          v70 = 2;
      }
      else
      {
        v70 = 1;
      }
    }
    else
    {
      v70 = 0;
    }
    v73 = v0[34];
    v74 = v0[26];
    sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
    FHIRDateTime.asDateComponents()();
    v75 = (uint64_t *)(v69 + *(int *)(v74 + 32));
    v76 = *v75;
    v77 = v75[1];
    swift_bridgeObjectRetain();
    v71 = sub_224F00474(v73, v76, v77, v70);
  }
  else
  {
    v71 = 0;
  }
  v0[51] = v71;
  v78 = v0[41];
  v79 = v0[26];
  v80 = v0[27];
  sub_224E75F34(v0[11] + v119[11], v78, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79);
  v82 = v0[41];
  if (v81 == 1)
  {
    sub_224E7601C(v0[41], &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v83 = v71;
  }
  else
  {
    if (*(_QWORD *)(v82 + 56) == 1)
    {
      if ((*(_BYTE *)(v82 + 19) & 1) != 0)
      {
        if (*(_BYTE *)(v82 + 17))
          v84 = 3;
        else
          v84 = 2;
      }
      else
      {
        v84 = 1;
      }
    }
    else
    {
      v84 = 0;
    }
    v95 = v0[33];
    v96 = v0[26];
    sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
    FHIRDateTime.asDateComponents()();
    v97 = (uint64_t *)(v82 + *(int *)(v96 + 32));
    v98 = *v97;
    v99 = v97[1];
    swift_bridgeObjectRetain();
    v100 = sub_224F00474(v95, v98, v99, v84);
    sub_224DDEAA0(v0[41], (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    v71 = v100;
  }
  v0[52] = v71;
  v101 = v0[11];
  v102 = *(_QWORD *)(v101 + v119[13]);
  if (v102)
  {
    v103 = *(_QWORD *)(v102 + 16);
    if (v103)
    {
      v122 = v0[15];
      v104 = v0[14];
      v105 = v102 + ((*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80));
      v106 = *(_QWORD *)(v104 + 72);
      swift_bridgeObjectRetain_n();
      v107 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v109 = (uint64_t *)v0[15];
        sub_224DDB408(v105, (uint64_t)v109, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
        v110 = *v109;
        v111 = *(_QWORD *)(v122 + 8);
        swift_bridgeObjectRetain();
        sub_224DDEAA0((uint64_t)v109, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
        if (v111)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v107 = sub_224E56678(0, v107[2] + 1, 1, v107);
          v113 = v107[2];
          v112 = v107[3];
          if (v113 >= v112 >> 1)
            v107 = sub_224E56678((_QWORD *)(v112 > 1), v113 + 1, 1, v107);
          v107[2] = v113 + 1;
          v108 = &v107[2 * v113];
          v108[4] = v110;
          v108[5] = v111;
        }
        v105 += v106;
        --v103;
      }
      while (v103);
      swift_bridgeObjectRelease_n();
      v101 = v0[11];
    }
    else
    {
      v107 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v107 = 0;
  }
  v0[53] = v107;
  sub_224DDB408(v0[10], v0[13], (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  if (*(_QWORD *)(v101 + v119[16] + 8))
  {
    swift_bridgeObjectRetain();
    sub_224F677B4();
    v114 = 0;
  }
  else
  {
    v114 = 1;
  }
  v115 = v0[12];
  v116 = sub_224F677D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 56))(v115, v114, 1, v116);
  v0[54] = sub_224E5451C(0, &qword_2557E1D08);
  v117 = swift_task_alloc();
  v0[55] = v117;
  *(_QWORD *)v117 = v0;
  *(_QWORD *)(v117 + 8) = sub_224F47954;
  *(_OWORD *)(v117 + 16) = *((_OWORD *)v0 + 5);
  return swift_task_switch();
}

uint64_t sub_224F47954(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 448) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F479B0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v9;
  void *v10;

  v1 = *(void **)(v0 + 448);
  v2 = *(void **)(v0 + 416);
  v4 = *(void **)(v0 + 392);
  v3 = *(void **)(v0 + 400);
  v5 = *(void **)(v0 + 360);
  v10 = *(void **)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 248);
  v9 = *(_QWORD *)(v0 + 256);
  v7 = sub_224F1F200(*(_QWORD **)(v0 + 104), *(_QWORD *)(v0 + 96), v0 + 16, (uint64_t)v1, *(_QWORD *)(v0 + 384), (uint64_t)v2, (uint64_t)v4, (uint64_t)v3, *(_QWORD *)(v0 + 424));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_224DDEAA0(v6, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  sub_224DDEAA0(v9, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v7);
}

uint64_t sub_224F47BE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  __int128 v15;
  __int128 v16;
  unint64_t v17;

  v3 = type metadata accessor for ModelsR4.DocumentReference(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_224F461E4() & 1) != 0 && (v6 = *(_QWORD *)(v1 + *(int *)(v3 + 56)), *(_QWORD *)(v6 + 16)))
  {
    v7 = sub_224F47D98(a1, 0, *(_QWORD *)(v1 + *(int *)(v3 + 56)));
    v9 = v8;
    if ((sub_224DD7C60(v7, v6) & 1) == 0)
    {
      sub_224DDB408(v1, (uint64_t)v5, type metadata accessor for ModelsR4.DocumentReference);
      v13 = *(int *)(v3 + 56);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v5[v13] = v7;
      *((_QWORD *)&v16 + 1) = v3;
      v17 = sub_224F47FF8();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v15);
      sub_224DDB408((uint64_t)v5, (uint64_t)boxed_opaque_existential_1, type metadata accessor for ModelsR4.DocumentReference);
      type metadata accessor for DownloadableAttachmentExtractionResult();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v9;
      sub_224DDEADC((uint64_t)&v15, v11 + 24, (uint64_t (*)(_QWORD))sub_224E75E88);
      sub_224DDEAA0((uint64_t)v5, type metadata accessor for ModelsR4.DocumentReference);
      return v11;
    }
    swift_bridgeObjectRelease();
    type metadata accessor for DownloadableAttachmentExtractionResult();
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
    v10 = swift_allocObject();
    v11 = v10;
    *(_QWORD *)(v10 + 16) = v9;
  }
  else
  {
    type metadata accessor for DownloadableAttachmentExtractionResult();
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
    v10 = swift_allocObject();
    v11 = v10;
    *(_QWORD *)(v10 + 16) = 0;
  }
  sub_224DDEADC((uint64_t)&v15, v10 + 24, (uint64_t (*)(_QWORD))sub_224E75E88);
  return v11;
}

unint64_t sub_224F47D98(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD v23[2];
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;

  v25 = a1;
  v26 = a2;
  v4 = type metadata accessor for ModelsR4.DocumentReferenceContent(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)v23 - v9;
  v11 = MEMORY[0x24BEE4AF8];
  v27 = MEMORY[0x24BEE4AF8];
  v12 = *(_QWORD *)(a3 + 16);
  if (!v12)
  {
    v16 = MEMORY[0x24BEE4AF8];
    if (!(MEMORY[0x24BEE4AF8] >> 62))
      goto LABEL_13;
LABEL_17:
    swift_bridgeObjectRetain();
    v22 = sub_224F681D4();
    swift_bridgeObjectRelease();
    if (v22)
      return v16;
    goto LABEL_14;
  }
  v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v23[1] = a3;
  v24 = v13;
  v14 = a3 + v13;
  v15 = *(_QWORD *)(v8 + 72);
  swift_bridgeObjectRetain();
  v16 = MEMORY[0x24BEE4AF8];
  do
  {
    sub_224DDB408(v14, (uint64_t)v10, type metadata accessor for ModelsR4.DocumentReferenceContent);
    v17 = sub_224ECF80C(v25, v26);
    if (v17)
    {
      v18 = v17;
      MEMORY[0x22768DE24]();
      if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_224F67D90();
      sub_224F67D9C();
      sub_224F67D84();

    }
    sub_224DDB408((uint64_t)v10, (uint64_t)v7, type metadata accessor for ModelsR4.DocumentReferenceContent);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = sub_224E56EF0(0, *(_QWORD *)(v16 + 16) + 1, 1, v16);
    v20 = *(_QWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 24);
    if (v20 >= v19 >> 1)
      v16 = sub_224E56EF0(v19 > 1, v20 + 1, 1, v16);
    *(_QWORD *)(v16 + 16) = v20 + 1;
    sub_224DDEADC((uint64_t)v7, v16 + v24 + v20 * v15, type metadata accessor for ModelsR4.DocumentReferenceContent);
    sub_224DDEAA0((uint64_t)v10, type metadata accessor for ModelsR4.DocumentReferenceContent);
    v14 += v15;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  v11 = v27;
  if (v27 >> 62)
    goto LABEL_17;
LABEL_13:
  if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
LABEL_14:
    swift_bridgeObjectRelease();
  return v16;
}

unint64_t sub_224F47FF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E4308;
  if (!qword_2557E4308)
  {
    v1 = type metadata accessor for ModelsR4.DocumentReference(255);
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.DocumentReference, v1);
    atomic_store(result, &qword_2557E4308);
  }
  return result;
}

id sub_224F48040(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t (*v54)();
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t (*v58)();
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  Swift::String v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  Swift::String v96;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v99;
  Swift::String v100;
  Swift::String_optional v101;
  uint64_t v102;
  void *v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  Swift::String v119;
  uint64_t v120;
  void *v121;
  Swift::String_optional v122;
  Swift::String v123;
  Swift::String_optional v124;
  uint64_t v125;
  void *v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  Swift::String v132;
  uint64_t v133;
  void *v134;
  Swift::String_optional v135;
  Swift::String v136;
  Swift::String_optional v137;
  uint64_t v138;
  void *v139;
  unint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  char v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  Swift::String_optional v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  _QWORD *v180;
  char *v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;

  v3 = type metadata accessor for Extension();
  v162 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v179 = (char *)&v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v184 = (uint64_t)&v151 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v151 - v8;
  sub_224E63218(0, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
  MEMORY[0x24BDAC7A8](v10);
  v169 = (uint64_t)&v151 - v11;
  v183 = type metadata accessor for Coding();
  v172 = *(_QWORD *)(v183 - 8);
  v12 = MEMORY[0x24BDAC7A8](v183);
  v14 = (char *)&v151 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v158 = (uint64_t)&v151 - v15;
  v171 = type metadata accessor for Identifier();
  v16 = *(_QWORD *)(v171 - 8);
  MEMORY[0x24BDAC7A8](v171);
  v182 = (uint64_t *)((char *)&v151 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_224E63218(0, (unint64_t *)&unk_2557E4320, (void (*)(uint64_t))type metadata accessor for ModelsR4.HumanName);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v151 - v19;
  v155 = *(_QWORD *)(v1 + 32);
  v156 = *(_DWORD *)(v1 + 40);
  v161 = *(unsigned __int8 *)(v1 + 44);
  v157 = *(_QWORD *)(v1 + 48);
  v21 = *(_QWORD *)(v1 + 64);
  v164 = *(_QWORD *)(v1 + 56);
  v22 = *(_QWORD **)(v1 + 72);
  v165 = *(_QWORD *)(v1 + 80);
  v23 = *(_QWORD **)(v1 + 88);
  v153 = *(_QWORD *)(v1 + 96);
  v159 = *(_QWORD *)(v1 + 104);
  v152 = *(_QWORD *)(v1 + 112);
  v173 = *(_QWORD *)(v1 + 128);
  sub_224F49880(v21, (uint64_t)&v151 - v19);
  v24 = type metadata accessor for ModelsR4.HumanName(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v20, 1, v24) == 1)
  {
    sub_224E7601C((uint64_t)v20, (unint64_t *)&unk_2557E4320, (void (*)(uint64_t))type metadata accessor for ModelsR4.HumanName);
  }
  else
  {
    v160 = sub_224ED8868(a1);
    v26 = v25;
    sub_224DDEAA0((uint64_t)v20, type metadata accessor for ModelsR4.HumanName);
    v163 = v26;
    if (v26)
      goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  v160 = 0;
  v163 = 0xE000000000000000;
LABEL_5:
  v27 = v173;
  v28 = v182;
  v29 = v165;
  v194 = v9;
  if (v22)
  {
    v30 = v22[2];
    if (v30)
    {
      v178 = v16;
      v180 = v23;
      swift_bridgeObjectRetain_n();
      v181 = (char *)v22;
      v31 = v22 + 7;
      v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v34 = *(v31 - 2);
        if (v34)
        {
          v36 = *(v31 - 1);
          v35 = *v31;
          v37 = *(v31 - 3) == 0x6C69616D65 && v34 == 0xE500000000000000;
          if ((v37 || (sub_224F683CC() & 1) != 0) && v35)
          {
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v32 = sub_224E56678(0, v32[2] + 1, 1, v32);
            v39 = v32[2];
            v38 = v32[3];
            if (v39 >= v38 >> 1)
              v32 = sub_224E56678((_QWORD *)(v38 > 1), v39 + 1, 1, v32);
            v32[2] = v39 + 1;
            v33 = &v32[2 * v39];
            v33[4] = v36;
            v33[5] = v35;
            v9 = v194;
          }
        }
        v31 += 4;
        --v30;
      }
      while (v30);
      v170 = v32;
      v40 = v181;
      swift_bridgeObjectRelease_n();
      v41 = v40[2];
      if (v41)
      {
        swift_bridgeObjectRetain_n();
        v42 = v40 + 7;
        v43 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          v45 = *(v42 - 2);
          if (v45)
          {
            v47 = *(v42 - 1);
            v46 = *v42;
            v48 = *(v42 - 3) == 0x656E6F6870 && v45 == 0xE500000000000000;
            if ((v48 || (sub_224F683CC() & 1) != 0) && v46)
            {
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v43 = sub_224E56678(0, v43[2] + 1, 1, v43);
              v50 = v43[2];
              v49 = v43[3];
              if (v50 >= v49 >> 1)
                v43 = sub_224E56678((_QWORD *)(v49 > 1), v50 + 1, 1, v43);
              v43[2] = v50 + 1;
              v44 = &v43[2 * v50];
              v44[4] = v47;
              v44[5] = v46;
              v9 = v194;
            }
          }
          v42 += 4;
          --v41;
        }
        while (v41);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v43 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v51 = (uint64_t)v170;
      v27 = v173;
      v23 = v180;
      v28 = v182;
      v29 = v165;
      v16 = v178;
    }
    else
    {
      v51 = MEMORY[0x24BEE4AF8];
      v43 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v43 = 0;
    v51 = 0;
  }
  v170 = (_QWORD *)v51;
  v168 = v43;
  if (v29)
  {
    v178 = *(_QWORD *)(v29 + 16);
    if (v178)
    {
      v177 = v29 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
      v181 = v14 + 8;
      v176 = *(_QWORD *)(v16 + 72);
      swift_bridgeObjectRetain_n();
      v52 = 0;
      v53 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v54 = type metadata accessor for Identifier;
      v175 = xmmword_224F6DF20;
      v154 = v14;
      v55 = v171;
      while (1)
      {
        v56 = v23;
        sub_224DDB408(v177 + v176 * v52, (uint64_t)v28, (uint64_t (*)(_QWORD))v54);
        v57 = (_QWORD *)((char *)v28 + *(int *)(v55 + 28));
        v58 = v54;
        v59 = v57[1];
        if (v59)
          break;
        sub_224DDEAA0((uint64_t)v28, (uint64_t (*)(_QWORD))v58);
        v54 = v58;
LABEL_45:
        if (++v52 == v178)
        {
          swift_bridgeObjectRelease_n();
          v51 = (uint64_t)v170;
          v27 = v173;
          v43 = v168;
          goto LABEL_75;
        }
      }
      v61 = v28[2];
      v60 = v28[3];
      v180 = (_QWORD *)*v57;
      if (v60)
      {
        if (v60 != 1)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_65:
          sub_224EFCE64();
          v75 = swift_allocObject();
          *(_OWORD *)(v75 + 16) = v175;
          *(_QWORD *)(v75 + 32) = v61;
          *(_QWORD *)(v75 + 40) = v60;
          *(_QWORD *)(v75 + 48) = v180;
          *(_QWORD *)(v75 + 56) = v59;
          v54 = type metadata accessor for Identifier;
          sub_224DDEAA0((uint64_t)v182, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v53 = sub_224E56798(0, v53[2] + 1, 1, v53);
          v23 = v56;
          v77 = v53[2];
          v76 = v53[3];
          if (v77 >= v76 >> 1)
            v53 = sub_224E56798((_QWORD *)(v76 > 1), v77 + 1, 1, v53);
          v53[2] = v77 + 1;
          v53[v77 + 4] = v75;
          v28 = v182;
          goto LABEL_45;
        }
        swift_bridgeObjectRetain();
        goto LABEL_63;
      }
      v62 = v28[4];
      if (v62)
      {
        v63 = *(_QWORD *)(v62 + 16);
        v174 = v53;
        v167 = v62;
        if (v63)
        {
          v64 = v172;
          v65 = v62 + ((*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80));
          swift_bridgeObjectRetain();
          sub_224DDB44C(v61, 0);
          swift_bridgeObjectRetain();
          v66 = *(_QWORD *)(v64 + 72);
          v67 = (uint64_t)v154;
          while (1)
          {
            sub_224DDB408(v65, v67, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
            if (*(_QWORD *)&v181[*(int *)(v183 + 24)])
              break;
            sub_224DDEAA0(v67, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
            v65 += v66;
            if (!--v63)
              goto LABEL_59;
          }
          v68 = v169;
          sub_224E79250(v67, v169);
          v69 = v172;
          v70 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56);
          v71 = v68;
          v72 = 0;
        }
        else
        {
          swift_bridgeObjectRetain();
          sub_224DDB44C(v61, 0);
          swift_bridgeObjectRetain();
LABEL_59:
          v69 = v172;
          v70 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56);
          v68 = v169;
          v71 = v169;
          v72 = 1;
        }
        v73 = v183;
        v70(v71, v72, 1, v183);
        v53 = v174;
        swift_bridgeObjectRelease();
        v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v68, 1, v73);
        v55 = v171;
        if (v74 != 1)
        {
          v78 = v158;
          sub_224E79250(v68, v158);
          v79 = (uint64_t *)(v78 + *(int *)(v73 + 24));
          v80 = *v79;
          v60 = v79[1];
          swift_bridgeObjectRetain();
          v81 = v78;
          v55 = v171;
          sub_224DDEAA0(v81, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
          sub_224DDB480(v61, 0);
          if (v60)
          {
            v61 = v80;
            goto LABEL_64;
          }
LABEL_63:
          v61 = 0;
          v60 = 0xE000000000000000;
LABEL_64:
          v9 = v194;
          goto LABEL_65;
        }
      }
      else
      {
        v68 = v169;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56))(v169, 1, 1, v183);
        swift_bridgeObjectRetain();
        sub_224DDB44C(v61, 0);
      }
      sub_224E7601C(v68, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
      sub_224DDB480(v61, 0);
      goto LABEL_63;
    }
    v53 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v53 = 0;
  }
LABEL_75:
  v82 = (uint64_t)v179;
  if (v23)
  {
    v83 = v23[2];
    if (v83)
    {
      swift_bridgeObjectRetain();
      v84 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v85 = 4;
      do
      {
        v86 = *(_OWORD *)&v23[v85 + 14];
        v191 = *(_OWORD *)&v23[v85 + 12];
        v192 = v86;
        v193 = v23[v85 + 16];
        v87 = *(_OWORD *)&v23[v85 + 6];
        v187 = *(_OWORD *)&v23[v85 + 4];
        v188 = v87;
        v88 = *(_OWORD *)&v23[v85 + 10];
        v189 = *(_OWORD *)&v23[v85 + 8];
        v190 = v88;
        v89 = *(_OWORD *)&v23[v85 + 2];
        v185 = *(_OWORD *)&v23[v85];
        v186 = v89;
        v90 = Address.formattedAddressString()();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v84 = sub_224E56678(0, v84[2] + 1, 1, v84);
        v92 = v84[2];
        v91 = v84[3];
        if (v92 >= v91 >> 1)
          v84 = sub_224E56678((_QWORD *)(v91 > 1), v92 + 1, 1, v84);
        v84[2] = v92 + 1;
        *(Swift::String *)&v84[2 * v92 + 4] = v90;
        v85 += 17;
        --v83;
      }
      while (v83);
      swift_bridgeObjectRelease();
      v51 = (uint64_t)v170;
      v82 = (uint64_t)v179;
      v27 = v173;
      v43 = v168;
      v9 = v194;
    }
    else
    {
      v84 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v84 = 0;
  }
  v174 = v53;
  if (!v27)
  {
    v107 = 0;
    v108 = 0;
    v182 = 0;
    v109 = 0;
    v178 = 0;
    v181 = 0;
    if ((v161 & 1) != 0)
      goto LABEL_138;
LABEL_100:
    *(_QWORD *)&v185 = v155;
    DWORD2(v185) = v156 & 0x1FF01FF;
    v110 = v166;
    v111 = FHIRDate.asMedicalDate()();
    v166 = v110;
    if (v110)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (id)swift_bridgeObjectRelease();
    }
    v144 = v111;
    v51 = (uint64_t)v170;
    v43 = v168;
    if (v170)
      goto LABEL_139;
    goto LABEL_143;
  }
  v180 = v84;
  v93 = *(_QWORD *)(v27 + 16);
  if (v93)
  {
    v94 = v27 + ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80));
    v183 = *(_QWORD *)(v162 + 72);
    swift_bridgeObjectRetain();
    v95 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v181 = (char *)0x8000000224F830E0;
    v182 = (_QWORD *)0xD00000000000003CLL;
    do
    {
      sub_224DDB408(v94, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
      v96._countAndFlagsBits = 0xD00000000000003DLL;
      v96._object = (void *)0x8000000224F830A0;
      v99 = Extension.stringValueForExtension(with:)(v96);
      object = v99.value._object;
      countAndFlagsBits = v99.value._countAndFlagsBits;
      if (v99.value._object
        || (v100._object = v181,
            v100._countAndFlagsBits = (uint64_t)v182,
            v101 = Extension.stringValueForExtension(with:)(v100),
            object = v101.value._object,
            countAndFlagsBits = v101.value._countAndFlagsBits,
            v101.value._object))
      {
        v102 = countAndFlagsBits;
        v103 = object;
        sub_224DDEAA0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v95 = sub_224E56678(0, v95[2] + 1, 1, v95);
        v105 = v95[2];
        v104 = v95[3];
        if (v105 >= v104 >> 1)
          v95 = sub_224E56678((_QWORD *)(v104 > 1), v105 + 1, 1, v95);
        v95[2] = v105 + 1;
        v106 = &v95[2 * v105];
        v106[4] = v102;
        v106[5] = v103;
        v9 = v194;
      }
      else
      {
        sub_224DDEAA0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
      }
      v94 += v183;
      --v93;
    }
    while (v93);
    swift_bridgeObjectRelease();
    v82 = (uint64_t)v179;
  }
  else
  {
    v95 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v84 = v180;
  if (v95[2])
  {
    v113 = (char *)v95[5];
    v178 = v95[4];
    v181 = v113;
    swift_bridgeObjectRetain();
  }
  else
  {
    v178 = 0;
    v181 = 0;
  }
  swift_bridgeObjectRelease();
  v114 = *(_QWORD *)(v173 + 16);
  if (v114)
  {
    v115 = v173 + ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80));
    v194 = *(char **)(v162 + 72);
    swift_bridgeObjectRetain();
    v116 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v182 = (_QWORD *)0x8000000224F83170;
    v183 = 0x8000000224F83120;
    v117 = v114;
    v118 = v184;
    do
    {
      sub_224DDB408(v115, v118, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
      v119._countAndFlagsBits = 0xD000000000000042;
      v119._object = (void *)v183;
      v122 = Extension.stringValueForExtension(with:)(v119);
      v121 = v122.value._object;
      v120 = v122.value._countAndFlagsBits;
      if (v122.value._object
        || (v123._countAndFlagsBits = 0xD000000000000041,
            v123._object = v182,
            v124 = Extension.stringValueForExtension(with:)(v123),
            v121 = v124.value._object,
            v120 = v124.value._countAndFlagsBits,
            v124.value._object))
      {
        v125 = v120;
        v126 = v121;
        sub_224DDEAA0(v184, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v116 = sub_224E56678(0, v116[2] + 1, 1, v116);
        v128 = v116[2];
        v127 = v116[3];
        if (v128 >= v127 >> 1)
          v116 = sub_224E56678((_QWORD *)(v127 > 1), v128 + 1, 1, v116);
        v116[2] = v128 + 1;
        v129 = &v116[2 * v128];
        v129[4] = v125;
        v129[5] = v126;
        v118 = v184;
      }
      else
      {
        sub_224DDEAA0(v118, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
      }
      v115 += (uint64_t)v194;
      --v117;
    }
    while (v117);
    swift_bridgeObjectRelease();
    v82 = (uint64_t)v179;
    v84 = v180;
    if (v116[2])
      goto LABEL_118;
  }
  else
  {
    v116 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    {
LABEL_118:
      v109 = v116[5];
      v182 = (_QWORD *)v116[4];
      swift_bridgeObjectRetain();
      goto LABEL_121;
    }
  }
  v182 = 0;
  v109 = 0;
LABEL_121:
  swift_bridgeObjectRelease();
  if (v114)
  {
    v177 = v109;
    v130 = v173 + ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80));
    v194 = *(char **)(v162 + 72);
    swift_bridgeObjectRetain();
    v131 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v183 = 0x8000000224F83210;
    v184 = 0xD000000000000040;
    do
    {
      sub_224DDB408(v130, v82, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
      v132._countAndFlagsBits = 0xD000000000000041;
      v132._object = (void *)0x8000000224F831C0;
      v135 = Extension.stringValueForExtension(with:)(v132);
      v134 = v135.value._object;
      v133 = v135.value._countAndFlagsBits;
      if (v135.value._object
        || (v136._object = (void *)v183,
            v136._countAndFlagsBits = v184,
            v137 = Extension.stringValueForExtension(with:)(v136),
            v134 = v137.value._object,
            v133 = v137.value._countAndFlagsBits,
            v137.value._object))
      {
        v138 = v133;
        v139 = v134;
        sub_224DDEAA0(v82, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v131 = sub_224E56678(0, v131[2] + 1, 1, v131);
        v141 = v131[2];
        v140 = v131[3];
        if (v141 >= v140 >> 1)
          v131 = sub_224E56678((_QWORD *)(v140 > 1), v141 + 1, 1, v131);
        v131[2] = v141 + 1;
        v142 = &v131[2 * v141];
        v142[4] = v138;
        v142[5] = v139;
        v82 = (uint64_t)v179;
      }
      else
      {
        sub_224DDEAA0(v82, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
      }
      v130 += (uint64_t)v194;
      --v114;
    }
    while (v114);
    swift_bridgeObjectRelease();
    v84 = v180;
    v109 = v177;
  }
  else
  {
    v131 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v143 = v161;
  if (v131[2])
  {
    v107 = v131[4];
    v108 = v131[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v107 = 0;
    v108 = 0;
  }
  v51 = (uint64_t)v170;
  v43 = v168;
  if ((v143 & 1) == 0)
    goto LABEL_100;
LABEL_138:
  v144 = 0;
  if (v51)
  {
LABEL_139:
    v145 = v51;
    v146 = *(_QWORD *)(v51 + 16);
    swift_bridgeObjectRetain();
    if (!v146)
    {
      swift_bridgeObjectRelease();
      v145 = 0;
    }
    v43 = v168;
    goto LABEL_144;
  }
LABEL_143:
  swift_bridgeObjectRetain();
  v145 = 0;
LABEL_144:
  v147 = v159;
  if (v43 && !v43[2])
  {
    swift_bridgeObjectRelease();
    v147 = v159;
    v43 = 0;
  }
  if (v147 == 1)
  {
    v148 = 0;
    v149 = 0;
  }
  else
  {
    *(_QWORD *)&v185 = v153;
    *((_QWORD *)&v185 + 1) = v147;
    *(_QWORD *)&v186 = v152;
    v150 = CodeableConcept.preferredDisplayString()();
    v148 = v150.value._countAndFlagsBits;
    v149 = v150.value._object;
  }
  sub_224F492E0();
  return sub_224EFF7F4(v160, v163, v144, v157, v164, v145, (uint64_t)v43, (uint64_t)v174, (uint64_t)v84, v148, (uint64_t)v149, v178, (uint64_t)v181, (uint64_t)v182, v109, v107, v108);
}

unint64_t sub_224F492E0()
{
  unint64_t result;

  result = qword_2557E3AB0;
  if (!qword_2557E3AB0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_2557E3AB0);
  }
  return result;
}

uint64_t sub_224F4931C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  _UNKNOWN **v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;

  v63 = a2;
  sub_224DDEA0C(0, &qword_2557E43E0, type metadata accessor for ModelsDSTU2.HumanName, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v62 - v4;
  v6 = type metadata accessor for ModelsDSTU2.HumanName(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v73 = (uint64_t *)((char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = MEMORY[0x24BDAC7A8](v7);
  v12 = (uint64_t *)((char *)&v62 - v11);
  v74 = (_QWORD *)MEMORY[0x24BEE4B00];
  v13 = *(_QWORD *)(a1 + 16);
  v68 = v9;
  v72 = v10;
  if (!v13)
  {
    v73 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_24:
    v43 = 0;
    v44 = (uint64_t *)&unk_24ECF5AB0;
    v45 = &off_24ECF5000;
    v46 = type metadata accessor for ModelsDSTU2.HumanName;
    v47 = (uint64_t)v73;
    while (1)
    {
      if (v43 >= (unint64_t)v45[339])
      {
        __break(1u);
        goto LABEL_40;
      }
      if (!v73[2])
        goto LABEL_26;
      v49 = *(v44 - 1);
      v50 = *v44;
      swift_bridgeObjectRetain();
      v51 = sub_224E533E8(v49, v50);
      if ((v52 & 1) == 0)
        break;
      v53 = v46;
      v54 = *(_QWORD *)(*(_QWORD *)(v47 + 56) + 8 * v51);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v55 = v72;
      if (*(_QWORD *)(v54 + 16))
      {
        sub_224DDB408(v54 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80)), (uint64_t)v5, v53);
        v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56);
        v56 = v5;
        v57 = 0;
      }
      else
      {
        v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56);
        v56 = v5;
        v57 = 1;
      }
      v6 = v68;
      v48(v56, v57, 1, v68);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v5, 1, v6) != 1)
      {
        swift_release();
        swift_arrayDestroy();
        v60 = v63;
        sub_224DDEADC((uint64_t)v5, v63, type metadata accessor for ModelsDSTU2.HumanName);
        v58 = v60;
        v59 = 0;
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v48)(v58, v59, 1, v6);
      }
      v45 = &off_24ECF5000;
      v46 = v53;
LABEL_27:
      ++v43;
      sub_224DDB50C((uint64_t)v5, &qword_2557E43E0, v46);
      v44 += 2;
      if (v43 == 7)
      {
        swift_arrayDestroy();
        swift_release();
        v58 = v63;
        v59 = 1;
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v48)(v58, v59, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v6 = v68;
LABEL_26:
    v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56);
    v48(v5, 1, 1, v6);
    goto LABEL_27;
  }
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = a1 + v15;
  v17 = *(_QWORD *)(v10 + 72);
  v71 = v15;
  v65 = v14 | 7;
  v66 = v17 + v15;
  v62 = a1;
  v18 = v17;
  swift_bridgeObjectRetain();
  v19 = (_QWORD *)MEMORY[0x24BEE4B00];
  v64 = xmmword_224F6D8B0;
  v67 = v5;
  while (1)
  {
    sub_224DDB408(v16, (uint64_t)v12, type metadata accessor for ModelsDSTU2.HumanName);
    v21 = v12[1];
    v22 = v21 ? *v12 : 0x7D656E6F6E7BLL;
    v23 = v21 ? v12[1] : 0xE600000000000000;
    swift_bridgeObjectRetain();
    v25 = sub_224E533E8(v22, v23);
    v26 = v19[2];
    v27 = (v24 & 1) == 0;
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
      break;
    v29 = v24;
    if (v19[3] < v28)
    {
      sub_224E7184C(v28, 1);
      v19 = v74;
      v30 = sub_224E533E8(v22, v23);
      if ((v29 & 1) != (v31 & 1))
        goto LABEL_42;
      v25 = v30;
    }
    if ((v29 & 1) != 0)
    {
      v32 = v18;
      swift_bridgeObjectRelease();
      v33 = v19[7];
      sub_224DDEADC((uint64_t)v12, (uint64_t)v73, type metadata accessor for ModelsDSTU2.HumanName);
      v34 = *(_QWORD *)(v33 + 8 * v25);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v33 + 8 * v25) = v34;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v34 = sub_224E568A0(0, *(_QWORD *)(v34 + 16) + 1, 1, v34);
        *(_QWORD *)(v33 + 8 * v25) = v34;
      }
      v37 = *(_QWORD *)(v34 + 16);
      v36 = *(_QWORD *)(v34 + 24);
      if (v37 >= v36 >> 1)
      {
        v34 = sub_224E568A0(v36 > 1, v37 + 1, 1, v34);
        *(_QWORD *)(v33 + 8 * v25) = v34;
      }
      *(_QWORD *)(v34 + 16) = v37 + 1;
      v20 = v34 + v71 + v37 * v32;
      v18 = v32;
      sub_224DDEADC((uint64_t)v73, v20, type metadata accessor for ModelsDSTU2.HumanName);
      v5 = v67;
    }
    else
    {
      v69 = v16;
      v70 = v13;
      sub_224DDEA0C(0, &qword_2557E15D8, type metadata accessor for ModelsDSTU2.HumanName, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = v64;
      sub_224DDEADC((uint64_t)v12, v38 + v71, type metadata accessor for ModelsDSTU2.HumanName);
      v19[(v25 >> 6) + 8] |= 1 << v25;
      v39 = (uint64_t *)(v19[6] + 16 * v25);
      *v39 = v22;
      v39[1] = v23;
      *(_QWORD *)(v19[7] + 8 * v25) = v38;
      v40 = v19[2];
      v41 = __OFADD__(v40, 1);
      v42 = v40 + 1;
      if (v41)
        goto LABEL_41;
      v19[2] = v42;
      v16 = v69;
      v13 = v70;
    }
    v16 += v18;
    if (!--v13)
    {
      v73 = v19;
      swift_bridgeObjectRelease();
      v6 = v68;
      goto LABEL_24;
    }
  }
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  result = sub_224F684A4();
  __break(1u);
  return result;
}

uint64_t sub_224F49880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  _UNKNOWN **v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;

  v63 = a2;
  sub_224DDEA0C(0, (unint64_t *)&unk_2557E4320, type metadata accessor for ModelsR4.HumanName, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v62 - v4;
  v6 = type metadata accessor for ModelsR4.HumanName(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v73 = (uint64_t *)((char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = MEMORY[0x24BDAC7A8](v7);
  v12 = (uint64_t *)((char *)&v62 - v11);
  v74 = (_QWORD *)MEMORY[0x24BEE4B00];
  v13 = *(_QWORD *)(a1 + 16);
  v68 = v9;
  v72 = v10;
  if (!v13)
  {
    v73 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_24:
    v43 = 0;
    v44 = (uint64_t *)&unk_24ECF5B40;
    v45 = &off_24ECF5000;
    v46 = type metadata accessor for ModelsR4.HumanName;
    v47 = (uint64_t)v73;
    while (1)
    {
      if (v43 >= (unint64_t)v45[357])
      {
        __break(1u);
        goto LABEL_40;
      }
      if (!v73[2])
        goto LABEL_26;
      v49 = *(v44 - 1);
      v50 = *v44;
      swift_bridgeObjectRetain();
      v51 = sub_224E533E8(v49, v50);
      if ((v52 & 1) == 0)
        break;
      v53 = v46;
      v54 = *(_QWORD *)(*(_QWORD *)(v47 + 56) + 8 * v51);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v55 = v72;
      if (*(_QWORD *)(v54 + 16))
      {
        sub_224DDB408(v54 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80)), (uint64_t)v5, v53);
        v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56);
        v56 = v5;
        v57 = 0;
      }
      else
      {
        v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56);
        v56 = v5;
        v57 = 1;
      }
      v6 = v68;
      v48(v56, v57, 1, v68);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v5, 1, v6) != 1)
      {
        swift_release();
        swift_arrayDestroy();
        v60 = v63;
        sub_224DDEADC((uint64_t)v5, v63, type metadata accessor for ModelsR4.HumanName);
        v58 = v60;
        v59 = 0;
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v48)(v58, v59, 1, v6);
      }
      v45 = &off_24ECF5000;
      v46 = v53;
LABEL_27:
      ++v43;
      sub_224DDB50C((uint64_t)v5, (unint64_t *)&unk_2557E4320, v46);
      v44 += 2;
      if (v43 == 7)
      {
        swift_arrayDestroy();
        swift_release();
        v58 = v63;
        v59 = 1;
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v48)(v58, v59, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v6 = v68;
LABEL_26:
    v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56);
    v48(v5, 1, 1, v6);
    goto LABEL_27;
  }
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = a1 + v15;
  v17 = *(_QWORD *)(v10 + 72);
  v71 = v15;
  v65 = v14 | 7;
  v66 = v17 + v15;
  v62 = a1;
  v18 = v17;
  swift_bridgeObjectRetain();
  v19 = (_QWORD *)MEMORY[0x24BEE4B00];
  v64 = xmmword_224F6D8B0;
  v67 = v5;
  while (1)
  {
    sub_224DDB408(v16, (uint64_t)v12, type metadata accessor for ModelsR4.HumanName);
    v21 = v12[1];
    v22 = v21 ? *v12 : 0x7D656E6F6E7BLL;
    v23 = v21 ? v12[1] : 0xE600000000000000;
    swift_bridgeObjectRetain();
    v25 = sub_224E533E8(v22, v23);
    v26 = v19[2];
    v27 = (v24 & 1) == 0;
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
      break;
    v29 = v24;
    if (v19[3] < v28)
    {
      sub_224E71868(v28, 1);
      v19 = v74;
      v30 = sub_224E533E8(v22, v23);
      if ((v29 & 1) != (v31 & 1))
        goto LABEL_42;
      v25 = v30;
    }
    if ((v29 & 1) != 0)
    {
      v32 = v18;
      swift_bridgeObjectRelease();
      v33 = v19[7];
      sub_224DDEADC((uint64_t)v12, (uint64_t)v73, type metadata accessor for ModelsR4.HumanName);
      v34 = *(_QWORD *)(v33 + 8 * v25);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v33 + 8 * v25) = v34;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v34 = sub_224E569F0(0, *(_QWORD *)(v34 + 16) + 1, 1, v34);
        *(_QWORD *)(v33 + 8 * v25) = v34;
      }
      v37 = *(_QWORD *)(v34 + 16);
      v36 = *(_QWORD *)(v34 + 24);
      if (v37 >= v36 >> 1)
      {
        v34 = sub_224E569F0(v36 > 1, v37 + 1, 1, v34);
        *(_QWORD *)(v33 + 8 * v25) = v34;
      }
      *(_QWORD *)(v34 + 16) = v37 + 1;
      v20 = v34 + v71 + v37 * v32;
      v18 = v32;
      sub_224DDEADC((uint64_t)v73, v20, type metadata accessor for ModelsR4.HumanName);
      v5 = v67;
    }
    else
    {
      v69 = v16;
      v70 = v13;
      sub_224DDEA0C(0, &qword_2557E15E8, type metadata accessor for ModelsR4.HumanName, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = v64;
      sub_224DDEADC((uint64_t)v12, v38 + v71, type metadata accessor for ModelsR4.HumanName);
      v19[(v25 >> 6) + 8] |= 1 << v25;
      v39 = (uint64_t *)(v19[6] + 16 * v25);
      *v39 = v22;
      v39[1] = v23;
      *(_QWORD *)(v19[7] + 8 * v25) = v38;
      v40 = v19[2];
      v41 = __OFADD__(v40, 1);
      v42 = v40 + 1;
      if (v41)
        goto LABEL_41;
      v19[2] = v42;
      v16 = v69;
      v13 = v70;
    }
    v16 += v18;
    if (!--v13)
    {
      v73 = v19;
      swift_bridgeObjectRelease();
      v6 = v68;
      goto LABEL_24;
    }
  }
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  result = sub_224F684A4();
  __break(1u);
  return result;
}

id sub_224F49DE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  id v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[144];
  _OWORD v73[9];
  _QWORD v74[19];
  uint64_t v75;

  v2 = v1;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v45 - v5;
  v50 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v53 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E02E0, v9, v3);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v45 - v11;
  v52 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
  MEMORY[0x24BDAC7A8](v52);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v0 + 16);
  if (v16 && (v17 = *(_QWORD *)(v16 + 16)) != 0)
  {
    v49 = v8;
    v46 = v6;
    v47 = v16;
    v48 = v2;
    v18 = v16 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v51 = *(_QWORD *)(v13 + 72);
    swift_bridgeObjectRetain();
    v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v20 = v17 - 1;
    v21 = v50;
    while (1)
    {
      v75 = v18;
      sub_224DDB408(v18, (uint64_t)v15, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
      sub_224DDB4B4((uint64_t)&v15[*(int *)(v52 + 20)], (uint64_t)v12, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v12, 1, v21) != 1)
      {
        sub_224DDB408((uint64_t)v12, (uint64_t)v49, type metadata accessor for ModelsDSTU2.ResourceProxy);
        v23 = (char *)&loc_224F4A02C + 4 * byte_224F76290[swift_getEnumCaseMultiPayload()];
        __asm { BR              X9 }
      }
      sub_224DDB50C((uint64_t)v12, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
      sub_224F53E68(v73);
      sub_224F53E84((uint64_t)v73, (uint64_t)v74);
      v22 = v19;
      sub_224DDEAA0((uint64_t)v15, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
      sub_224F53E84((uint64_t)v74, (uint64_t)v72);
      sub_224F53E84((uint64_t)v72, (uint64_t)v73);
      v24 = sub_224F20D44((uint64_t)v73);
      if (v24 != 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v22 = sub_224E568B4(0, v19[2] + 1, 1, v19);
        v26 = v22[2];
        v25 = v22[3];
        if (v26 >= v25 >> 1)
          v22 = sub_224E568B4((_QWORD *)(v25 > 1), v26 + 1, 1, v22);
        sub_224F53E84((uint64_t)v72, (uint64_t)&v63);
        v22[2] = v26 + 1;
        v27 = &v22[18 * v26];
        v27[2] = v63;
        v28 = v67;
        v30 = v64;
        v29 = v65;
        v27[5] = v66;
        v27[6] = v28;
        v27[3] = v30;
        v27[4] = v29;
        v31 = v71;
        v33 = v68;
        v32 = v69;
        v27[9] = v70;
        v27[10] = v31;
        v27[7] = v33;
        v27[8] = v32;
        v21 = v50;
      }
      if (!v20)
        break;
      v19 = v22;
      --v20;
      v18 = v75 + v51;
    }
    swift_bridgeObjectRelease();
    if (v22[2])
    {
      v37 = *((_OWORD *)v22 + 8);
      v68 = *((_OWORD *)v22 + 7);
      v69 = v37;
      v38 = *((_OWORD *)v22 + 10);
      v70 = *((_OWORD *)v22 + 9);
      v71 = v38;
      v39 = *((_OWORD *)v22 + 3);
      v40 = *((_OWORD *)v22 + 5);
      v41 = *((_OWORD *)v22 + 6);
      v65 = *((_OWORD *)v22 + 4);
      v66 = v40;
      v67 = v41;
      v63 = *((_OWORD *)v22 + 2);
      v64 = v39;
      sub_224E8C31C((uint64_t)&v63);
      swift_bridgeObjectRelease();
      v60 = v69;
      v61 = v70;
      v62 = v71;
      v56 = v65;
      v57 = v66;
      v58 = v67;
      v59 = v68;
      v54 = v63;
      v55 = v64;
      v42 = sub_224F677D8();
      v43 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8];
      v44 = (uint64_t)v46;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v46, 1, 1, v42);
      v35 = sub_224F4AC1C(v44);
      sub_224DDB50C(v44, (unint64_t *)&qword_2557E1D00, v43);
      sub_224E8C3DC((uint64_t)&v63);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_224E5451C(0, &qword_2557E3AB0);
      return static HKSignedClinicalDataSubject.unknown()();
    }
  }
  else
  {
    type metadata accessor for HDHRExtractionError(0);
    v35 = v34;
    *(_QWORD *)&v73[0] = 200;
    sub_224E6AE24(MEMORY[0x24BEE4AF8]);
    sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
    sub_224F6752C();
    swift_willThrow();
  }
  return v35;
}

uint64_t sub_224F4A50C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[9] = a1;
  sub_224F53BDC(0, &qword_2557E4390, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE70B8]);
  v2[10] = v3;
  v2[11] = *(_QWORD *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v4 = *(_QWORD *)(type metadata accessor for RecordExtractionContext() - 8);
  v2[13] = v4;
  v2[14] = *(_QWORD *)(v4 + 64);
  v2[15] = swift_task_alloc();
  sub_224F53BDC(0, &qword_2557E43A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE70C8]);
  v2[16] = v5;
  v2[17] = *(_QWORD *)(v5 - 8);
  v2[18] = swift_task_alloc();
  v6 = swift_task_alloc();
  v7 = *(_QWORD *)(v1 + 16);
  v2[19] = v6;
  v2[20] = v7;
  return swift_task_switch();
}

uint64_t sub_224F4A5F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 160);
  if (v1 && *(_QWORD *)(v1 + 16))
  {
    v2 = *(_QWORD *)(v0 + 144);
    v3 = *(_QWORD *)(v0 + 152);
    v4 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 136);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 104);
    sub_224DDB408(*(_QWORD *)(v0 + 72), v5, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v8 = swift_allocObject();
    sub_224DDEADC(v5, v8 + v7, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    *(_QWORD *)(v0 + 48) = v1;
    sub_224DDEA0C(0, &qword_2557E1F68, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224F20E84();
    sub_224F53B4C();
    swift_bridgeObjectRetain();
    sub_224F68468();
    v9 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 56) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 64) = v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v2, v3, v4);
    sub_224F53E28(&qword_2557E43C0, &qword_2557E43A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE70C8], MEMORY[0x24BEE70D8]);
    sub_224F67E5C();
    *(_QWORD *)(v0 + 168) = sub_224F53E28(&qword_2557E43C8, &qword_2557E4390, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE70B8], MEMORY[0x24BEE70C0]);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v10;
    *v10 = v0;
    v10[1] = sub_224F4A894;
    return sub_224F67DFC();
  }
  else
  {
    type metadata accessor for HDHRExtractionError(0);
    *(_QWORD *)(v0 + 40) = 200;
    sub_224E6AE24(MEMORY[0x24BEE4AF8]);
    sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
    sub_224F6752C();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_224F4A894()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[23] = v0;
    v4 = v2[11];
    v3 = v2[12];
    v5 = v2[10];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_224F4A928()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  id v16;
  uint64_t v17;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(void **)(v0 + 24);
    v3 = v1;
    MEMORY[0x22768DE24]();
    if (*(_QWORD *)((*(_QWORD *)(v0 + 56) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 56) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();
    v4 = v2;
    MEMORY[0x22768DE24]();
    if (*(_QWORD *)(*(_QWORD *)(v0 + 64) + 16) >= *(_QWORD *)(*(_QWORD *)(v0 + 64) + 24) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();

    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 192) = v5;
    *v5 = v0;
    v5[1] = sub_224F4AB88;
    return sub_224F67DFC();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 128);
    v9 = *(_QWORD *)(v0 + 136);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    sub_224F21280(*(void **)(v0 + 16), *(void **)(v0 + 24));
    v10 = *(_QWORD *)(v0 + 56);
    v11 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v12 = MEMORY[0x24BEE4AF8];
    v17 = MEMORY[0x24BEE4AF8];
    v13 = *(_QWORD *)(v11 + 16);
    if (v13)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v13; ++i)
      {
        v15 = *(void **)(v11 + 8 * i + 32);
        if (v15)
        {
          v16 = v15;
          MEMORY[0x22768DE24]();
          if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_224F67D90();
          sub_224F67D9C();
          sub_224F67D84();
        }
      }
      swift_bridgeObjectRelease();
      v12 = v17;
    }
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v10, v12);
  }
}

uint64_t sub_224F4AB88()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[23] = v0;
    v4 = v2[11];
    v3 = v2[12];
    v5 = v2[10];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

id sub_224F4AC1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t (*v56)();
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t (*v60)();
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  Swift::String v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  Swift::String v98;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v101;
  Swift::String v102;
  Swift::String_optional v103;
  uint64_t v104;
  void *v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  Swift::String v121;
  uint64_t v122;
  void *v123;
  Swift::String_optional v124;
  Swift::String v125;
  Swift::String_optional v126;
  uint64_t v127;
  void *v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  Swift::String v134;
  uint64_t v135;
  void *v136;
  Swift::String_optional v137;
  Swift::String v138;
  Swift::String_optional v139;
  uint64_t v140;
  void *v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  char v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  Swift::String_optional v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  _QWORD *v182;
  char *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  char *v196;

  v3 = type metadata accessor for Extension();
  v164 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v181 = (char *)&v153 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v186 = (uint64_t)&v153 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v153 - v8;
  v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v170 = (uint64_t)&v153 - v12;
  v185 = type metadata accessor for Coding();
  v174 = *(_QWORD *)(v185 - 8);
  v13 = MEMORY[0x24BDAC7A8](v185);
  v15 = (char *)&v153 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v160 = (uint64_t)&v153 - v16;
  v172 = type metadata accessor for Identifier();
  v17 = *(_QWORD *)(v172 - 8);
  MEMORY[0x24BDAC7A8](v172);
  v184 = (uint64_t *)((char *)&v153 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_224DDEA0C(0, &qword_2557E43E0, type metadata accessor for ModelsDSTU2.HumanName, v10);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v153 - v20;
  v157 = *(_QWORD *)(v1 + 32);
  v158 = *(_DWORD *)(v1 + 40);
  v163 = *(unsigned __int8 *)(v1 + 44);
  v159 = *(_QWORD *)(v1 + 48);
  v22 = *(_QWORD *)(v1 + 64);
  v166 = *(_QWORD *)(v1 + 56);
  v23 = *(_QWORD **)(v1 + 72);
  v167 = *(_QWORD *)(v1 + 80);
  v24 = *(_QWORD **)(v1 + 88);
  v155 = *(_QWORD *)(v1 + 96);
  v161 = *(_QWORD *)(v1 + 104);
  v154 = *(_QWORD *)(v1 + 112);
  v175 = *(_QWORD *)(v1 + 120);
  sub_224F4931C(v22, (uint64_t)&v153 - v20);
  v25 = type metadata accessor for ModelsDSTU2.HumanName(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v21, 1, v25) == 1)
  {
    sub_224DDB50C((uint64_t)v21, &qword_2557E43E0, type metadata accessor for ModelsDSTU2.HumanName);
  }
  else
  {
    v162 = sub_224F5374C(a1);
    v27 = v26;
    sub_224DDEAA0((uint64_t)v21, type metadata accessor for ModelsDSTU2.HumanName);
    v165 = v27;
    if (v27)
      goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  v162 = 0;
  v165 = 0xE000000000000000;
LABEL_5:
  v28 = v175;
  v29 = v184;
  v30 = v167;
  v196 = v9;
  if (v23)
  {
    v31 = v23;
    v32 = v23[2];
    if (v32)
    {
      v180 = v17;
      v182 = v24;
      swift_bridgeObjectRetain_n();
      v183 = (char *)v31;
      v33 = v31 + 7;
      v34 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v36 = *(v33 - 2);
        if (v36)
        {
          v38 = *(v33 - 1);
          v37 = *v33;
          v39 = *(v33 - 3) == 0x6C69616D65 && v36 == 0xE500000000000000;
          if ((v39 || (sub_224F683CC() & 1) != 0) && v37)
          {
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v34 = sub_224E56678(0, v34[2] + 1, 1, v34);
            v41 = v34[2];
            v40 = v34[3];
            if (v41 >= v40 >> 1)
              v34 = sub_224E56678((_QWORD *)(v40 > 1), v41 + 1, 1, v34);
            v34[2] = v41 + 1;
            v35 = &v34[2 * v41];
            v35[4] = v38;
            v35[5] = v37;
            v9 = v196;
          }
        }
        v33 += 4;
        --v32;
      }
      while (v32);
      v171 = v34;
      v42 = v183;
      swift_bridgeObjectRelease_n();
      v43 = v42[2];
      if (v43)
      {
        swift_bridgeObjectRetain_n();
        v44 = v42 + 7;
        v45 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          v47 = *(v44 - 2);
          if (v47)
          {
            v49 = *(v44 - 1);
            v48 = *v44;
            v50 = *(v44 - 3) == 0x656E6F6870 && v47 == 0xE500000000000000;
            if ((v50 || (sub_224F683CC() & 1) != 0) && v48)
            {
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v45 = sub_224E56678(0, v45[2] + 1, 1, v45);
              v52 = v45[2];
              v51 = v45[3];
              if (v52 >= v51 >> 1)
                v45 = sub_224E56678((_QWORD *)(v51 > 1), v52 + 1, 1, v45);
              v45[2] = v52 + 1;
              v46 = &v45[2 * v52];
              v46[4] = v49;
              v46[5] = v48;
              v9 = v196;
            }
          }
          v44 += 4;
          --v43;
        }
        while (v43);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v45 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v53 = (uint64_t)v171;
      v28 = v175;
      v24 = v182;
      v29 = v184;
      v30 = v167;
      v17 = v180;
    }
    else
    {
      v53 = MEMORY[0x24BEE4AF8];
      v45 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v45 = 0;
    v53 = 0;
  }
  v171 = (_QWORD *)v53;
  v169 = v45;
  if (v30)
  {
    v180 = *(_QWORD *)(v30 + 16);
    if (v180)
    {
      v179 = v30 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      v183 = v15 + 8;
      v178 = *(_QWORD *)(v17 + 72);
      swift_bridgeObjectRetain_n();
      v54 = 0;
      v55 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v56 = type metadata accessor for Identifier;
      v177 = xmmword_224F6DF20;
      v156 = v15;
      v57 = v172;
      while (1)
      {
        v58 = v24;
        sub_224DDB408(v179 + v178 * v54, (uint64_t)v29, (uint64_t (*)(_QWORD))v56);
        v59 = (_QWORD *)((char *)v29 + *(int *)(v57 + 28));
        v60 = v56;
        v61 = v59[1];
        if (v61)
          break;
        sub_224DDEAA0((uint64_t)v29, (uint64_t (*)(_QWORD))v60);
        v56 = v60;
LABEL_45:
        if (++v54 == v180)
        {
          swift_bridgeObjectRelease_n();
          v53 = (uint64_t)v171;
          v28 = v175;
          v45 = v169;
          goto LABEL_75;
        }
      }
      v63 = v29[2];
      v62 = v29[3];
      v182 = (_QWORD *)*v59;
      if (v62)
      {
        if (v62 != 1)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_65:
          sub_224E54704(0, &qword_2557E1568, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
          v77 = swift_allocObject();
          *(_OWORD *)(v77 + 16) = v177;
          *(_QWORD *)(v77 + 32) = v63;
          *(_QWORD *)(v77 + 40) = v62;
          *(_QWORD *)(v77 + 48) = v182;
          *(_QWORD *)(v77 + 56) = v61;
          v56 = type metadata accessor for Identifier;
          sub_224DDEAA0((uint64_t)v184, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v55 = sub_224E56798(0, v55[2] + 1, 1, v55);
          v24 = v58;
          v79 = v55[2];
          v78 = v55[3];
          if (v79 >= v78 >> 1)
            v55 = sub_224E56798((_QWORD *)(v78 > 1), v79 + 1, 1, v55);
          v55[2] = v79 + 1;
          v55[v79 + 4] = v77;
          v29 = v184;
          goto LABEL_45;
        }
        swift_bridgeObjectRetain();
        goto LABEL_63;
      }
      v64 = v29[4];
      if (v64)
      {
        v65 = *(_QWORD *)(v64 + 16);
        v176 = v55;
        v173 = v64;
        if (v65)
        {
          v66 = v174;
          v67 = v64 + ((*(unsigned __int8 *)(v174 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80));
          swift_bridgeObjectRetain();
          sub_224DDB44C(v63, 0);
          swift_bridgeObjectRetain();
          v68 = *(_QWORD *)(v66 + 72);
          v69 = (uint64_t)v156;
          while (1)
          {
            sub_224DDB408(v67, v69, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
            if (*(_QWORD *)&v183[*(int *)(v185 + 24)])
              break;
            sub_224DDEAA0(v69, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
            v67 += v68;
            if (!--v65)
              goto LABEL_59;
          }
          v70 = v170;
          sub_224DDEADC(v69, v170, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
          v71 = v174;
          v72 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v174 + 56);
          v73 = v70;
          v74 = 0;
        }
        else
        {
          swift_bridgeObjectRetain();
          sub_224DDB44C(v63, 0);
          swift_bridgeObjectRetain();
LABEL_59:
          v71 = v174;
          v72 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v174 + 56);
          v70 = v170;
          v73 = v170;
          v74 = 1;
        }
        v75 = v185;
        v72(v73, v74, 1, v185);
        v55 = v176;
        swift_bridgeObjectRelease();
        v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v70, 1, v75);
        v57 = v172;
        if (v76 != 1)
        {
          v80 = v160;
          sub_224DDEADC(v70, v160, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
          v81 = (uint64_t *)(v80 + *(int *)(v75 + 24));
          v82 = *v81;
          v62 = v81[1];
          swift_bridgeObjectRetain();
          v83 = v80;
          v57 = v172;
          sub_224DDEAA0(v83, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
          sub_224DDB480(v63, 0);
          if (v62)
          {
            v63 = v82;
            goto LABEL_64;
          }
LABEL_63:
          v63 = 0;
          v62 = 0xE000000000000000;
LABEL_64:
          v9 = v196;
          goto LABEL_65;
        }
      }
      else
      {
        v70 = v170;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v174 + 56))(v170, 1, 1, v185);
        swift_bridgeObjectRetain();
        sub_224DDB44C(v63, 0);
      }
      sub_224DDB50C(v70, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
      sub_224DDB480(v63, 0);
      goto LABEL_63;
    }
    v55 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v55 = 0;
  }
LABEL_75:
  v84 = (uint64_t)v181;
  if (v24)
  {
    v85 = v24[2];
    if (v85)
    {
      swift_bridgeObjectRetain();
      v86 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v87 = 4;
      do
      {
        v88 = *(_OWORD *)&v24[v87 + 14];
        v193 = *(_OWORD *)&v24[v87 + 12];
        v194 = v88;
        v195 = v24[v87 + 16];
        v89 = *(_OWORD *)&v24[v87 + 6];
        v189 = *(_OWORD *)&v24[v87 + 4];
        v190 = v89;
        v90 = *(_OWORD *)&v24[v87 + 10];
        v191 = *(_OWORD *)&v24[v87 + 8];
        v192 = v90;
        v91 = *(_OWORD *)&v24[v87 + 2];
        v187 = *(_OWORD *)&v24[v87];
        v188 = v91;
        v92 = Address.formattedAddressString()();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v86 = sub_224E56678(0, v86[2] + 1, 1, v86);
        v94 = v86[2];
        v93 = v86[3];
        if (v94 >= v93 >> 1)
          v86 = sub_224E56678((_QWORD *)(v93 > 1), v94 + 1, 1, v86);
        v86[2] = v94 + 1;
        *(Swift::String *)&v86[2 * v94 + 4] = v92;
        v87 += 17;
        --v85;
      }
      while (v85);
      swift_bridgeObjectRelease();
      v53 = (uint64_t)v171;
      v84 = (uint64_t)v181;
      v28 = v175;
      v45 = v169;
      v9 = v196;
    }
    else
    {
      v86 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v86 = 0;
  }
  v176 = v55;
  if (!v28)
  {
    v109 = 0;
    v110 = 0;
    v184 = 0;
    v111 = 0;
    v180 = 0;
    v183 = 0;
    if ((v163 & 1) != 0)
      goto LABEL_138;
LABEL_100:
    *(_QWORD *)&v187 = v157;
    DWORD2(v187) = v158 & 0x1FF01FF;
    v112 = v168;
    v113 = FHIRDate.asMedicalDate()();
    v168 = v112;
    if (v112)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (id)swift_bridgeObjectRelease();
    }
    v146 = v113;
    v53 = (uint64_t)v171;
    v45 = v169;
    if (v171)
      goto LABEL_139;
    goto LABEL_143;
  }
  v182 = v86;
  v95 = *(_QWORD *)(v28 + 16);
  if (v95)
  {
    v96 = v28 + ((*(unsigned __int8 *)(v164 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80));
    v185 = *(_QWORD *)(v164 + 72);
    swift_bridgeObjectRetain();
    v97 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v183 = (char *)0x8000000224F830E0;
    v184 = (_QWORD *)0xD00000000000003CLL;
    do
    {
      sub_224DDB408(v96, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
      v98._countAndFlagsBits = 0xD00000000000003DLL;
      v98._object = (void *)0x8000000224F830A0;
      v101 = Extension.stringValueForExtension(with:)(v98);
      object = v101.value._object;
      countAndFlagsBits = v101.value._countAndFlagsBits;
      if (v101.value._object
        || (v102._object = v183,
            v102._countAndFlagsBits = (uint64_t)v184,
            v103 = Extension.stringValueForExtension(with:)(v102),
            object = v103.value._object,
            countAndFlagsBits = v103.value._countAndFlagsBits,
            v103.value._object))
      {
        v104 = countAndFlagsBits;
        v105 = object;
        sub_224DDEAA0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v97 = sub_224E56678(0, v97[2] + 1, 1, v97);
        v107 = v97[2];
        v106 = v97[3];
        if (v107 >= v106 >> 1)
          v97 = sub_224E56678((_QWORD *)(v106 > 1), v107 + 1, 1, v97);
        v97[2] = v107 + 1;
        v108 = &v97[2 * v107];
        v108[4] = v104;
        v108[5] = v105;
        v9 = v196;
      }
      else
      {
        sub_224DDEAA0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
      }
      v96 += v185;
      --v95;
    }
    while (v95);
    swift_bridgeObjectRelease();
    v84 = (uint64_t)v181;
  }
  else
  {
    v97 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v86 = v182;
  if (v97[2])
  {
    v115 = (char *)v97[5];
    v180 = v97[4];
    v183 = v115;
    swift_bridgeObjectRetain();
  }
  else
  {
    v180 = 0;
    v183 = 0;
  }
  swift_bridgeObjectRelease();
  v116 = *(_QWORD *)(v175 + 16);
  if (v116)
  {
    v117 = v175 + ((*(unsigned __int8 *)(v164 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80));
    v196 = *(char **)(v164 + 72);
    swift_bridgeObjectRetain();
    v118 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v184 = (_QWORD *)0x8000000224F83170;
    v185 = 0x8000000224F83120;
    v119 = v116;
    v120 = v186;
    do
    {
      sub_224DDB408(v117, v120, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
      v121._countAndFlagsBits = 0xD000000000000042;
      v121._object = (void *)v185;
      v124 = Extension.stringValueForExtension(with:)(v121);
      v123 = v124.value._object;
      v122 = v124.value._countAndFlagsBits;
      if (v124.value._object
        || (v125._countAndFlagsBits = 0xD000000000000041,
            v125._object = v184,
            v126 = Extension.stringValueForExtension(with:)(v125),
            v123 = v126.value._object,
            v122 = v126.value._countAndFlagsBits,
            v126.value._object))
      {
        v127 = v122;
        v128 = v123;
        sub_224DDEAA0(v186, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v118 = sub_224E56678(0, v118[2] + 1, 1, v118);
        v130 = v118[2];
        v129 = v118[3];
        if (v130 >= v129 >> 1)
          v118 = sub_224E56678((_QWORD *)(v129 > 1), v130 + 1, 1, v118);
        v118[2] = v130 + 1;
        v131 = &v118[2 * v130];
        v131[4] = v127;
        v131[5] = v128;
        v120 = v186;
      }
      else
      {
        sub_224DDEAA0(v120, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
      }
      v117 += (uint64_t)v196;
      --v119;
    }
    while (v119);
    swift_bridgeObjectRelease();
    v84 = (uint64_t)v181;
    v86 = v182;
    if (v118[2])
      goto LABEL_118;
  }
  else
  {
    v118 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    {
LABEL_118:
      v111 = v118[5];
      v184 = (_QWORD *)v118[4];
      swift_bridgeObjectRetain();
      goto LABEL_121;
    }
  }
  v184 = 0;
  v111 = 0;
LABEL_121:
  swift_bridgeObjectRelease();
  if (v116)
  {
    v179 = v111;
    v132 = v175 + ((*(unsigned __int8 *)(v164 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80));
    v196 = *(char **)(v164 + 72);
    swift_bridgeObjectRetain();
    v133 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v185 = 0x8000000224F83210;
    v186 = 0xD000000000000040;
    do
    {
      sub_224DDB408(v132, v84, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
      v134._countAndFlagsBits = 0xD000000000000041;
      v134._object = (void *)0x8000000224F831C0;
      v137 = Extension.stringValueForExtension(with:)(v134);
      v136 = v137.value._object;
      v135 = v137.value._countAndFlagsBits;
      if (v137.value._object
        || (v138._object = (void *)v185,
            v138._countAndFlagsBits = v186,
            v139 = Extension.stringValueForExtension(with:)(v138),
            v136 = v139.value._object,
            v135 = v139.value._countAndFlagsBits,
            v139.value._object))
      {
        v140 = v135;
        v141 = v136;
        sub_224DDEAA0(v84, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v133 = sub_224E56678(0, v133[2] + 1, 1, v133);
        v143 = v133[2];
        v142 = v133[3];
        if (v143 >= v142 >> 1)
          v133 = sub_224E56678((_QWORD *)(v142 > 1), v143 + 1, 1, v133);
        v133[2] = v143 + 1;
        v144 = &v133[2 * v143];
        v144[4] = v140;
        v144[5] = v141;
        v84 = (uint64_t)v181;
      }
      else
      {
        sub_224DDEAA0(v84, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
      }
      v132 += (uint64_t)v196;
      --v116;
    }
    while (v116);
    swift_bridgeObjectRelease();
    v86 = v182;
    v111 = v179;
  }
  else
  {
    v133 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v145 = v163;
  if (v133[2])
  {
    v109 = v133[4];
    v110 = v133[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v109 = 0;
    v110 = 0;
  }
  v53 = (uint64_t)v171;
  v45 = v169;
  if ((v145 & 1) == 0)
    goto LABEL_100;
LABEL_138:
  v146 = 0;
  if (v53)
  {
LABEL_139:
    v147 = v53;
    v148 = *(_QWORD *)(v53 + 16);
    swift_bridgeObjectRetain();
    if (!v148)
    {
      swift_bridgeObjectRelease();
      v147 = 0;
    }
    v45 = v169;
    goto LABEL_144;
  }
LABEL_143:
  swift_bridgeObjectRetain();
  v147 = 0;
LABEL_144:
  v149 = v161;
  if (v45 && !v45[2])
  {
    swift_bridgeObjectRelease();
    v149 = v161;
    v45 = 0;
  }
  if (v149 == 1)
  {
    v150 = 0;
    v151 = 0;
  }
  else
  {
    *(_QWORD *)&v187 = v155;
    *((_QWORD *)&v187 + 1) = v149;
    *(_QWORD *)&v188 = v154;
    v152 = CodeableConcept.preferredDisplayString()();
    v150 = v152.value._countAndFlagsBits;
    v151 = v152.value._object;
  }
  sub_224E5451C(0, &qword_2557E3AB0);
  return sub_224EFF7F4(v162, v165, v146, v159, v166, v147, (uint64_t)v45, (uint64_t)v176, (uint64_t)v86, v150, (uint64_t)v151, v180, (uint64_t)v183, (uint64_t)v184, v111, v109, v110);
}

uint64_t sub_224F4BF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v5 = (_QWORD *)swift_task_alloc();
  v3[5] = v5;
  *v5 = v3;
  v5[1] = sub_224F4BF64;
  return sub_224F4C014(a3);
}

uint64_t sub_224F4BF64(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F4BFC0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(void **)(v0 + 48);
  if (v1)
  {
    v2 = sub_224F4C934(*(_QWORD *)(v0 + 32), v1);
    v3 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v3 = 0;
    v2 = 0;
  }
  v4 = *(_QWORD **)(v0 + 16);
  *v4 = v3;
  v4[1] = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F4C014(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  sub_224DDEA0C(0, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v2[4] = swift_task_alloc();
  v3 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F4C0AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
  sub_224DDB4B4(v4 + *(int *)(v5 + 20), v3, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_224DDB50C(*(_QWORD *)(v0 + 32), &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
    if (qword_2557E0128 != -1)
      swift_once();
    v6 = sub_224F679B8();
    __swift_project_value_buffer(v6, (uint64_t)qword_2557FC958);
    v7 = sub_224F679AC();
    v8 = sub_224F67ED4();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_224DAC000, v7, v8, "ModelsDSTU2.Bundle.BundleEntry.extractMedicalRecord: no “resource” entry, skipping", v9, 2u);
      MEMORY[0x22768EDE4](v9, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    sub_224DDEADC(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56), type metadata accessor for ModelsDSTU2.ResourceProxy);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v11;
    *v11 = v0;
    v11[1] = sub_224F4C258;
    return sub_224F4C308(*(_QWORD *)(v0 + 16));
  }
}

uint64_t sub_224F4C258(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F4C2B4()
{
  uint64_t v0;
  uint64_t v1;

  sub_224DDEAA0(*(_QWORD *)(v0 + 56), type metadata accessor for ModelsDSTU2.ResourceProxy);
  v1 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_224F4C308(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;

  v2[15] = a1;
  v2[16] = v1;
  v2[17] = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v4 = (_QWORD *)swift_task_alloc();
  v2[20] = v4;
  *v4 = v2;
  v4[1] = sub_224F4C394;
  return sub_224F4D1D4(a1);
}

uint64_t sub_224F4C394(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 168) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_224F4C424()
{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(void **)(v0 + 168);
  *(_QWORD *)(v0 + 88) = v1;
  v2 = v1;
  sub_224E59364(0, (unint64_t *)&qword_2557E1580);
  if (!swift_dynamicCast())
    goto LABEL_5;
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(unsigned __int8 *)(v0 + 48);
  if (v7 != 7 || v4 | v3 | v5 | v6)
  {
    sub_224F29E50((void *)v3, v4, v5, v6, v7);
LABEL_5:

    if (qword_2557E0128 != -1)
      swift_once();
    v8 = *(void **)(v0 + 168);
    v9 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 128);
    v11 = sub_224F679B8();
    __swift_project_value_buffer(v11, (uint64_t)qword_2557FC958);
    sub_224DDB408(v10, v9, type metadata accessor for ModelsDSTU2.ResourceProxy);
    v12 = v8;
    v13 = v8;
    v14 = sub_224F679AC();
    v15 = sub_224F67ED4();
    v16 = os_log_type_enabled(v14, v15);
    v17 = *(void **)(v0 + 168);
    v18 = *(_QWORD *)(v0 + 152);
    if (v16)
    {
      v19 = *(_QWORD *)(v0 + 144);
      v20 = swift_slowAlloc();
      v35 = swift_slowAlloc();
      v36 = v35;
      *(_DWORD *)v20 = 136315394;
      sub_224DDB408(v18, v19, type metadata accessor for ModelsDSTU2.ResourceProxy);
      v21 = sub_224F67BC8();
      *(_QWORD *)(v0 + 96) = sub_224E76904(v21, v22, &v36);
      sub_224F68000();
      swift_bridgeObjectRelease();
      sub_224DDEAA0(v18, type metadata accessor for ModelsDSTU2.ResourceProxy);
      *(_WORD *)(v20 + 12) = 2080;
      *(_QWORD *)(v0 + 104) = v17;
      v23 = v17;
      v24 = v17;
      sub_224F6848C();
      v25 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v26 = sub_224F67BC8();
      v28 = v27;

      *(_QWORD *)(v0 + 112) = sub_224E76904(v26, v28, &v36);
      sub_224F68000();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_224DAC000, v14, v15, "ModelsDSTU2.ResourceProxy.extractMedicalRecord: failed to convert %s to HKMedicalRecord, returning HKUnknownRecord. Error: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v35, -1, -1);
      MEMORY[0x22768EDE4](v20, -1, -1);
    }
    else
    {
      sub_224DDEAA0(*(_QWORD *)(v0 + 152), type metadata accessor for ModelsDSTU2.ResourceProxy);

    }
    v29 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v29;
    *v29 = v0;
    v29[1] = sub_224F4C890;
    return sub_224F52310(*(_QWORD *)(v0 + 120));
  }

  if (qword_2557E0128 != -1)
    swift_once();
  v31 = sub_224F679B8();
  __swift_project_value_buffer(v31, (uint64_t)qword_2557FC958);
  v32 = sub_224F679AC();
  v33 = sub_224F67EBC();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v34 = 0;
    _os_log_impl(&dword_224DAC000, v32, v33, "ModelsDSTU2.ResourceProxy.extractMedicalRecord: found entered-in-error record, skipping", v34, 2u);
    MEMORY[0x22768EDE4](v34, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_224F4C890(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F4C8EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_224F4C934(uint64_t a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t *v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;

  v3 = v2;
  v37 = a1;
  v38 = a2;
  v4 = (int *)type metadata accessor for FHIRExtractionContext();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v36 - v8;
  v10 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
  sub_224DDB4B4((uint64_t)v3 + *(int *)(v14 + 20), (uint64_t)v9, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_224DDB50C((uint64_t)v9, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
    if (qword_2557E0128 != -1)
      swift_once();
    v15 = sub_224F679B8();
    __swift_project_value_buffer(v15, (uint64_t)qword_2557FC958);
    v16 = sub_224F679AC();
    v17 = sub_224F67ED4();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_224DAC000, v16, v17, "ModelsDSTU2.Bundle.BundleEntry.asClinicalRecord: no “resource” entry, skipping", v18, 2u);
      MEMORY[0x22768EDE4](v18, -1, -1);
    }

    return 0;
  }
  else
  {
    sub_224DDEADC((uint64_t)v9, (uint64_t)v13, type metadata accessor for ModelsDSTU2.ResourceProxy);
    ModelsDSTU2.ResourceProxy.get()();
    v20 = v40;
    v21 = v41;
    __swift_project_boxed_opaque_existential_1(v39, v40);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 24))(v20, v21);
    v24 = v23;
    v25 = *v3;
    v26 = v3[1];
    v27 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v28 = objc_msgSend(v27, sel_primaryDSTU2Version);
    v29 = (uint64_t *)((char *)v3 + *(int *)(v14 + 24));
    v30 = *v29;
    v31 = v29[1];
    sub_224DDB408(v37, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    v32 = (uint64_t *)&v6[v4[5]];
    *v32 = v22;
    v32[1] = v24;
    v33 = &v6[v4[6]];
    *(_QWORD *)v33 = v25;
    *((_QWORD *)v33 + 1) = v26;
    *(_QWORD *)&v6[v4[7]] = v28;
    v34 = (uint64_t *)&v6[v4[8]];
    *v34 = v30;
    v34[1] = v31;
    sub_224DDE970(v30, v31);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    v19 = sub_224F4CC64((uint64_t)v6, v38);
    sub_224DDEAA0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FHIRExtractionContext);
    sub_224DDEAA0((uint64_t)v13, type metadata accessor for ModelsDSTU2.ResourceProxy);
  }
  return v19;
}

uint64_t sub_224F4CC64(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_224ED9650(a2);
  v7 = sub_224F073F8(v6);
  swift_bridgeObjectRelease();
  v8 = v5;
  v9 = sub_224F5749C();
  sub_224F52CF4(a1, (uint64_t)v8, v7, v9, v10);
  v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v12;
}

uint64_t sub_224F4D1D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[8] = a1;
  v2[9] = v1;
  type metadata accessor for ModelsDSTU2.Observation(0);
  v2[10] = swift_task_alloc();
  type metadata accessor for ModelsDSTU2.Immunization(0);
  v2[11] = swift_task_alloc();
  type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
  v2[12] = swift_task_alloc();
  type metadata accessor for ModelsDSTU2.Condition(0);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v2[15] = swift_task_alloc();
  return swift_task_switch();
}

void sub_224F4D2B0()
{
  uint64_t v0;
  char *v1;

  sub_224DDB408(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 120), type metadata accessor for ModelsDSTU2.ResourceProxy);
  v1 = (char *)sub_224F4D308 + 4 * byte_224F76297[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_224F4D308()
{
  uint64_t v0;

  sub_224DDEAA0(*(_QWORD *)(v0 + 120), type metadata accessor for ModelsDSTU2.ResourceProxy);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_224F4D368()
{
  uint64_t *v0;
  _QWORD *v1;

  sub_224DDEADC(v0[15], v0[13], type metadata accessor for ModelsDSTU2.Condition);
  v1 = (_QWORD *)swift_task_alloc();
  v0[16] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_224F4D524;
  return sub_224F4DC80(v0[8]);
}

uint64_t sub_224F4D3BC()
{
  uint64_t *v0;
  _QWORD *v1;

  sub_224DDEADC(v0[15], v0[12], type metadata accessor for ModelsDSTU2.DiagnosticReport);
  v1 = (_QWORD *)swift_task_alloc();
  v0[19] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_224F4D61C;
  return sub_224F4F154(v0[8]);
}

uint64_t sub_224F4D410()
{
  uint64_t *v0;
  _QWORD *v1;

  sub_224DDEADC(v0[15], v0[10], type metadata accessor for ModelsDSTU2.Observation);
  v1 = (_QWORD *)swift_task_alloc();
  v0[25] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_224F4D80C;
  return sub_224F50C78(v0[8]);
}

uint64_t sub_224F4D464()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = (uint64_t *)v0[15];
  v2 = *v1;
  v3 = v1[1];
  v0[28] = v3;
  v4 = v1[2];
  v5 = v1[3];
  v0[29] = v5;
  v7 = v1[4];
  v6 = v1[5];
  v0[30] = v6;
  v0[2] = v2;
  v0[3] = v3;
  v0[4] = v4;
  v0[5] = v5;
  v0[6] = v7;
  v0[7] = v6;
  v8 = (_QWORD *)swift_task_alloc();
  v0[31] = v8;
  *v8 = v0;
  v8[1] = sub_224F4D904;
  return sub_224E7B1EC(v0[8]);
}

uint64_t sub_224F4D4D0()
{
  uint64_t *v0;
  _QWORD *v1;

  sub_224DDEADC(v0[15], v0[11], type metadata accessor for ModelsDSTU2.Immunization);
  v1 = (_QWORD *)swift_task_alloc();
  v0[22] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_224F4D714;
  return sub_224F4FFB0(v0[8]);
}

uint64_t sub_224F4D524(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 144) = a1;
  return swift_task_switch();
}

uint64_t sub_224F4D598()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  sub_224DDEAA0(*(_QWORD *)(v0 + 104), type metadata accessor for ModelsDSTU2.Condition);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_224F4D61C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 160) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 168) = a1;
  return swift_task_switch();
}

uint64_t sub_224F4D690()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  sub_224DDEAA0(*(_QWORD *)(v0 + 96), type metadata accessor for ModelsDSTU2.DiagnosticReport);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_224F4D714(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 184) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 192) = a1;
  return swift_task_switch();
}

uint64_t sub_224F4D788()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 192);
  sub_224DDEAA0(*(_QWORD *)(v0 + 88), type metadata accessor for ModelsDSTU2.Immunization);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_224F4D80C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 208) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 216) = a1;
  return swift_task_switch();
}

uint64_t sub_224F4D880()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 216);
  sub_224DDEAA0(*(_QWORD *)(v0 + 80), type metadata accessor for ModelsDSTU2.Observation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_224F4D904(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 256) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 264) = a1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_224F4D994()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_224F4DA08()
{
  uint64_t v0;

  sub_224DDEAA0(*(_QWORD *)(v0 + 104), type metadata accessor for ModelsDSTU2.Condition);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F4DA84()
{
  uint64_t v0;

  sub_224DDEAA0(*(_QWORD *)(v0 + 96), type metadata accessor for ModelsDSTU2.DiagnosticReport);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F4DB00()
{
  uint64_t v0;

  sub_224DDEAA0(*(_QWORD *)(v0 + 88), type metadata accessor for ModelsDSTU2.Immunization);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F4DB7C()
{
  uint64_t v0;

  sub_224DDEAA0(*(_QWORD *)(v0 + 80), type metadata accessor for ModelsDSTU2.Observation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F4DBF8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F4DC80(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2[13] = a1;
  v2[14] = v1;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v2[15] = swift_task_alloc();
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], v3);
  v2[16] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[17] = swift_task_alloc();
  sub_224F6743C();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v3);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = type metadata accessor for ModelsDSTU2.Condition(0);
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v4 = type metadata accessor for FHIRDateTime();
  v2[37] = v4;
  v2[38] = *(_QWORD *)(v4 - 8);
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F4DEE4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  id v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  void *v133;

  v1 = v0[25];
  v2 = v0[14];
  if (*(_QWORD *)(v2 + *(int *)(v1 + 64) + 8))
  {
    swift_bridgeObjectRetain();
    v3 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v4 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithString_, v3);

    goto LABEL_3;
  }
  v15 = v0[37];
  v16 = v0[38];
  v17 = v0[35];
  v18 = v0[29];
  sub_224DDB4B4(v2 + *(int *)(v1 + 56), v17, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB408(v2, v18, type metadata accessor for ModelsDSTU2.Condition);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v19(v17, 1, v15) == 1)
  {
    v20 = v0[24];
    v21 = v0[25];
    sub_224DDB4B4(v0[29] + *(int *)(v21 + 60), v20, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    v22 = type metadata accessor for Period();
    v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
    if (v23(v20, 1, v22) == 1)
    {
      v24 = v0[37];
      v25 = v0[38];
      v26 = v0[34];
      sub_224DDB50C(v0[24], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v26, 1, 1, v24);
    }
    else
    {
      v48 = v0[24];
      sub_224DDB4B4(v48, v0[34], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEAA0(v48, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    }
    v49 = v0[37];
    v50 = v0[34];
    sub_224DDEADC(v0[29], v0[28], type metadata accessor for ModelsDSTU2.Condition);
    if (v19(v50, 1, v49) == 1)
    {
      v51 = v0[28];
      v52 = v0[23];
      sub_224DDB4B4(v51 + *(int *)(v21 + 60), v52, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      sub_224DDEAA0(v51, type metadata accessor for ModelsDSTU2.Condition);
      if (v23(v52, 1, v22) == 1)
      {
        v53 = v0[37];
        v54 = v0[38];
        v55 = v0[36];
        sub_224DDB50C(v0[23], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56))(v55, 1, 1, v53);
      }
      else
      {
        v104 = v0[23];
        sub_224DDB4B4(v104 + *(int *)(v22 + 20), v0[36], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        sub_224DDEAA0(v104, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      }
      sub_224DDB50C(v0[34], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    }
    else
    {
      v56 = v0[37];
      v57 = v0[38];
      v58 = v0[36];
      v59 = v0[34];
      sub_224DDEAA0(v0[28], type metadata accessor for ModelsDSTU2.Condition);
      sub_224DDEADC(v59, v58, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v58, 0, 1, v56);
    }
    v105 = v0[36];
    v106 = v0[37];
    sub_224DDB50C(v0[35], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v19(v105, 1, v106) == 1)
    {
      sub_224DDB50C(v0[36], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      v4 = 0;
      goto LABEL_3;
    }
  }
  else
  {
    v40 = v0[37];
    v41 = v0[38];
    v43 = v0[35];
    v42 = v0[36];
    sub_224DDEAA0(v0[29], type metadata accessor for ModelsDSTU2.Condition);
    sub_224DDEADC(v43, v42, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v40);
  }
  v107 = v0[40];
  sub_224DDEADC(v0[36], v107, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v108 = *(_QWORD *)(v107 + 56);
  v109 = v0[40];
  if (v108 == 1)
  {
    if ((*(_BYTE *)(v109 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v109 + 17))
        v110 = 3;
      else
        v110 = 2;
    }
    else
    {
      v110 = 1;
    }
  }
  else
  {
    v110 = 0;
  }
  v111 = v0[37];
  v112 = v0[20];
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v113 = (uint64_t *)(v109 + *(int *)(v111 + 32));
  v114 = *v113;
  v115 = v113[1];
  swift_bridgeObjectRetain();
  v116 = sub_224F00474(v112, v114, v115, v110);
  v117 = v0[40];
  v118 = v116;
  v4 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithMedicalDate_, v116);

  sub_224DDEAA0(v117, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_3:
  v0[41] = v4;
  v5 = v0[25];
  v6 = v0[14];
  if (*(_QWORD *)(v6 + *(int *)(v5 + 76) + 8))
  {
    swift_bridgeObjectRetain();
    v7 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v8 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithString_, v7);

    goto LABEL_5;
  }
  v28 = v0[37];
  v29 = v0[38];
  v30 = v0[32];
  v31 = v0[27];
  sub_224DDB4B4(v6 + *(int *)(v5 + 68), v30, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB408(v6, v31, type metadata accessor for ModelsDSTU2.Condition);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  if (v32(v30, 1, v28) != 1)
  {
    v44 = v0[37];
    v45 = v0[38];
    v47 = v0[32];
    v46 = v0[33];
    sub_224DDEAA0(v0[27], type metadata accessor for ModelsDSTU2.Condition);
    sub_224DDEADC(v47, v46, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v46, 0, 1, v44);
LABEL_64:
    v122 = v0[39];
    sub_224DDEADC(v0[33], v122, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    v123 = *(_QWORD *)(v122 + 56);
    v124 = v0[39];
    if (v123 == 1)
    {
      if ((*(_BYTE *)(v124 + 19) & 1) != 0)
      {
        if (*(_BYTE *)(v124 + 17))
          v125 = 3;
        else
          v125 = 2;
      }
      else
      {
        v125 = 1;
      }
    }
    else
    {
      v125 = 0;
    }
    v126 = v0[37];
    v127 = v0[19];
    sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
    FHIRDateTime.asDateComponents()();
    v128 = (uint64_t *)(v124 + *(int *)(v126 + 32));
    v129 = *v128;
    v130 = v128[1];
    swift_bridgeObjectRetain();
    v131 = sub_224F00474(v127, v129, v130, v125);
    v132 = v0[39];
    v133 = v131;
    v8 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithMedicalDate_, v131);

    sub_224DDEAA0(v132, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    goto LABEL_5;
  }
  v33 = v0[25];
  v34 = v0[22];
  sub_224DDB4B4(v0[27] + *(int *)(v33 + 72), v34, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v35 = type metadata accessor for Period();
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48);
  if (v36(v34, 1, v35) == 1)
  {
    v37 = v0[37];
    v38 = v0[38];
    v39 = v0[31];
    sub_224DDB50C(v0[22], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v39, 1, 1, v37);
  }
  else
  {
    v92 = v0[22];
    sub_224DDB4B4(v92, v0[31], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224DDEAA0(v92, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  }
  v93 = v0[37];
  v94 = v0[31];
  sub_224DDEADC(v0[27], v0[26], type metadata accessor for ModelsDSTU2.Condition);
  if (v32(v94, 1, v93) == 1)
  {
    v95 = v0[26];
    v96 = v0[21];
    sub_224DDB4B4(v95 + *(int *)(v33 + 72), v96, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDEAA0(v95, type metadata accessor for ModelsDSTU2.Condition);
    if (v36(v96, 1, v35) == 1)
    {
      v97 = v0[37];
      v98 = v0[38];
      v99 = v0[33];
      sub_224DDB50C(v0[21], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v99, 1, 1, v97);
    }
    else
    {
      v119 = v0[21];
      sub_224DDB4B4(v119 + *(int *)(v35 + 20), v0[33], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEAA0(v119, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    }
    sub_224DDB50C(v0[31], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  }
  else
  {
    v100 = v0[37];
    v101 = v0[38];
    v102 = v0[33];
    v103 = v0[31];
    sub_224DDEAA0(v0[26], type metadata accessor for ModelsDSTU2.Condition);
    sub_224DDEADC(v103, v102, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v101 + 56))(v102, 0, 1, v100);
  }
  v120 = v0[37];
  v121 = v0[33];
  sub_224DDB50C(v0[32], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v32(v121, 1, v120) != 1)
    goto LABEL_64;
  sub_224DDB50C(v0[33], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v8 = 0;
LABEL_5:
  v0[42] = v8;
  v9 = v0[37];
  v10 = v0[38];
  v11 = v0[30];
  sub_224DDB4B4(v0[14] + *(int *)(v0[25] + 28), v11, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9);
  v13 = v0[30];
  if (v12 == 1)
  {
    sub_224DDB50C(v0[30], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v14 = 0;
  }
  else
  {
    if (*(_QWORD *)(v13 + 56) == 1)
    {
      if ((*(_BYTE *)(v13 + 19) & 1) != 0)
      {
        if (*(_BYTE *)(v13 + 17))
          v27 = 3;
        else
          v27 = 2;
      }
      else
      {
        v27 = 1;
      }
    }
    else
    {
      v27 = 0;
    }
    v60 = v0[37];
    v61 = v0[18];
    sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
    FHIRDateTime.asDateComponents()();
    v62 = (uint64_t *)(v13 + *(int *)(v60 + 32));
    v63 = *v62;
    v64 = v62[1];
    swift_bridgeObjectRetain();
    v14 = sub_224F00474(v61, v63, v64, v27);
    sub_224DDEAA0(v0[30], (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  }
  v0[43] = v14;
  v65 = v0[25];
  v66 = v0[14];
  v67 = (void *)objc_opt_self();
  v68 = objc_msgSend(v67, sel_FHIRConditionClinicalStatus);
  sub_224F67B80();
  v69 = *(_QWORD *)(v66 + *(int *)(v65 + 40) + 8);
  swift_bridgeObjectRetain();
  v70 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  if (v69)
  {
    v71 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v71 = 0;
  }
  v72 = v0[25];
  v73 = v0[14];
  v0[44] = objc_msgSend((id)objc_opt_self(), sel_medicalCodingWithSystem_codingVersion_code_displayString_, v68, v70, v71, 0);

  v0[45] = objc_msgSend(v67, sel_FHIRConditionVerificationStatus);
  v74 = (_QWORD *)(v73 + *(int *)(v72 + 44));
  v0[46] = *v74;
  v0[47] = v74[1];
  v0[9] = sub_224F67B80();
  v0[10] = v75;
  v76 = (uint64_t *)(v73 + *(int *)(v72 + 36));
  v77 = v76[1];
  if (v77 == 1)
  {
    swift_bridgeObjectRetain();
    v78 = 0;
  }
  else
  {
    v79 = *v76;
    sub_224E54704(0, (unint64_t *)&qword_2557E2960, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v80 = swift_allocObject();
    *(_OWORD *)(v80 + 16) = xmmword_224F71240;
    swift_bridgeObjectRetain();
    sub_224DDB44C(v79, v77);
    *(_QWORD *)(v80 + 32) = sub_224EEF95C();
    sub_224F67D84();
    v78 = v80;
    sub_224DDB480(v79, v77);
  }
  v0[48] = v78;
  v81 = (int *)v0[25];
  v82 = v0[14];
  if (*(_QWORD *)(v82 + v81[12] + 8) == 1)
  {
    v83 = 0;
  }
  else
  {
    v83 = sub_224EEF95C();
    v81 = (int *)v0[25];
    v82 = v0[14];
  }
  v0[49] = v83;
  v84 = *(_QWORD *)(v82 + v81[13]);
  if (v84)
  {
    v84 = Array<A>.asCodingCollectionArray()(v84);
    v81 = (int *)v0[25];
    v82 = v0[14];
  }
  v0[50] = v84;
  sub_224DDB408(v0[13], v0[17], (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v85 = *(_QWORD *)(v82 + v81[21] + 8);
  v86 = v0[16];
  if (v85)
  {
    swift_bridgeObjectRetain();
    sub_224F677B4();
    v87 = sub_224F677D8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v86, 0, 1, v87);
  }
  else
  {
    v88 = sub_224F677D8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v86, 1, 1, v88);
  }
  v89 = (_QWORD *)(v0[14] + *(int *)(v0[25] + 80));
  v0[51] = *v89;
  v0[52] = v89[1];
  swift_bridgeObjectRetain();
  v90 = swift_task_alloc();
  v0[53] = v90;
  *(_QWORD *)v90 = v0;
  *(_QWORD *)(v90 + 8) = sub_224F4EDD4;
  *(_OWORD *)(v90 + 16) = *(_OWORD *)(v0 + 13);
  return swift_task_switch();
}

uint64_t sub_224F4EDD4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v1;
  *(_QWORD *)(v2 + 96) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F4EE2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  id v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 120);
  sub_224DDB4B4(*(_QWORD *)(v0 + 112) + *(int *)(*(_QWORD *)(v0 + 200) + 24), v1, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v2 = type metadata accessor for Reference();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  v4 = *(uint64_t **)(v0 + 120);
  if (v3 == 1)
  {
    sub_224DDB50C(*(_QWORD *)(v0 + 120), &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    v26 = 0;
    v27 = 0;
  }
  else
  {
    v26 = v4[1];
    v27 = *v4;
    swift_bridgeObjectRetain();
    sub_224DDEAA0((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  }
  v24 = *(_QWORD *)(v0 + 416);
  v25 = *(void **)(v0 + 96);
  v5 = *(void **)(v0 + 392);
  v22 = *(_QWORD *)(v0 + 400);
  v23 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 376);
  v7 = *(_QWORD *)(v0 + 384);
  v9 = *(void **)(v0 + 360);
  v18 = *(_QWORD *)(v0 + 368);
  v10 = *(void **)(v0 + 344);
  v20 = *(_QWORD *)(v0 + 72);
  v21 = *(void **)(v0 + 352);
  v11 = *(_QWORD *)(v0 + 328);
  v12 = *(void **)(v0 + 336);
  v19 = (void *)v11;
  if (!v7)
    v7 = MEMORY[0x24BEE4AF8];
  v17 = v7;
  v13 = *(uint64_t **)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 128);
  sub_224E5451C(0, &qword_2557E2A28);
  *(_QWORD *)(v0 + 16) = v9;
  *(_QWORD *)(v0 + 24) = v18;
  *(_QWORD *)(v0 + 32) = v8;
  *(_QWORD *)(v0 + 40) = v20;
  *(_QWORD *)(v0 + 48) = v6;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  v15 = sub_224F2EC5C(v13, v14, v23, v24, v25, v17, v27, v26, (uint64_t)v12, v11, (uint64_t)v10, (uint64_t)v21, (void **)(v0 + 16), (uint64_t)v5, v22);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v15);
}

uint64_t sub_224F4F154(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2[9] = a1;
  v2[10] = v1;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v2[11] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[12] = swift_task_alloc();
  sub_224F6743C();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v3);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v4 = type metadata accessor for FHIRDateTime();
  v2[26] = v4;
  v2[27] = *(_QWORD *)(v4 - 8);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F4F32C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  sub_224DDB4B4(*(_QWORD *)(v0 + 80) + *(int *)(*(_QWORD *)(v0 + 144) + 44), v3, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v4(v3, 1, v1) == 1)
  {
    sub_224DDB50C(*(_QWORD *)(v0 + 200), &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224E75FD8();
    swift_allocError();
    *(_OWORD *)v5 = xmmword_224F6F2F0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_BYTE *)(v5 + 32) = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v6 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 80);
  sub_224DDEADC(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 224), (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v11 = v10 + *(int *)(v9 + 36);
  sub_224DDB4B4(v11, v7, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB408(v10, v8, type metadata accessor for ModelsDSTU2.DiagnosticReport);
  if (v4(v7, 1, v6) == 1)
  {
    v12 = *(_QWORD *)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 136);
    sub_224DDB4B4(v12 + *(int *)(*(_QWORD *)(v0 + 144) + 40), v13, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDEAA0(v12, type metadata accessor for ModelsDSTU2.DiagnosticReport);
    v14 = type metadata accessor for Period();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14) == 1)
    {
      v15 = *(_QWORD *)(v0 + 208);
      v16 = *(_QWORD *)(v0 + 216);
      v17 = *(_QWORD *)(v0 + 192);
      sub_224DDB50C(*(_QWORD *)(v0 + 136), &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v17, 1, 1, v15);
    }
    else
    {
      v22 = *(_QWORD *)(v0 + 136);
      sub_224DDB4B4(v22, *(_QWORD *)(v0 + 192), &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEAA0(v22, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    }
    v23 = *(_QWORD *)(v0 + 208);
    v24 = *(_QWORD *)(v0 + 192);
    sub_224DDB50C(*(_QWORD *)(v0 + 184), &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v4(v24, 1, v23) == 1)
    {
      sub_224DDB50C(*(_QWORD *)(v0 + 192), &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      v25 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 216);
    v21 = *(_QWORD *)(v0 + 184);
    v20 = *(_QWORD *)(v0 + 192);
    sub_224DDEAA0(*(_QWORD *)(v0 + 160), type metadata accessor for ModelsDSTU2.DiagnosticReport);
    sub_224DDEADC(v21, v20, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v20, 0, 1, v18);
  }
  v26 = *(_QWORD *)(v0 + 192);
  if (*(_QWORD *)(v26 + 56) == 1)
  {
    if ((*(_BYTE *)(v26 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v26 + 17))
        v27 = 3;
      else
        v27 = 2;
    }
    else
    {
      v27 = 1;
    }
  }
  else
  {
    v27 = 0;
  }
  v28 = *(_QWORD *)(v0 + 208);
  v29 = *(_QWORD *)(v0 + 120);
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v30 = (uint64_t *)(v26 + *(int *)(v28 + 32));
  v31 = *v30;
  v32 = v30[1];
  swift_bridgeObjectRetain();
  v25 = sub_224F00474(v29, v31, v32, v27);
  sub_224DDEAA0(*(_QWORD *)(v0 + 192), (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_18:
  *(_QWORD *)(v0 + 232) = v25;
  v33 = *(_QWORD *)(v0 + 208);
  v34 = *(_QWORD *)(v0 + 168);
  v35 = *(_QWORD *)(v0 + 152);
  v36 = *(_QWORD *)(v0 + 80);
  sub_224DDB4B4(v11, v34, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB408(v36, v35, type metadata accessor for ModelsDSTU2.DiagnosticReport);
  if (v4(v34, 1, v33) != 1)
  {
    v43 = *(_QWORD *)(v0 + 208);
    v44 = *(_QWORD *)(v0 + 216);
    v46 = *(_QWORD *)(v0 + 168);
    v45 = *(_QWORD *)(v0 + 176);
    sub_224DDEAA0(*(_QWORD *)(v0 + 152), type metadata accessor for ModelsDSTU2.DiagnosticReport);
    sub_224DDEADC(v46, v45, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v45, 0, 1, v43);
LABEL_25:
    v51 = *(_QWORD *)(v0 + 176);
    if (*(_QWORD *)(v51 + 56) == 1)
    {
      if ((*(_BYTE *)(v51 + 19) & 1) != 0)
      {
        if (*(_BYTE *)(v51 + 17))
          v52 = 3;
        else
          v52 = 2;
      }
      else
      {
        v52 = 1;
      }
    }
    else
    {
      v52 = 0;
    }
    v53 = *(_QWORD *)(v0 + 208);
    v54 = *(_QWORD *)(v0 + 112);
    sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
    FHIRDateTime.asDateComponents()();
    v55 = (uint64_t *)(v51 + *(int *)(v53 + 32));
    v56 = *v55;
    v57 = v55[1];
    swift_bridgeObjectRetain();
    v50 = sub_224F00474(v54, v56, v57, v52);
    sub_224DDEAA0(*(_QWORD *)(v0 + 176), (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    goto LABEL_33;
  }
  v37 = *(_QWORD *)(v0 + 152);
  v38 = *(_QWORD *)(v0 + 128);
  sub_224DDB4B4(v37 + *(int *)(*(_QWORD *)(v0 + 144) + 40), v38, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_224DDEAA0(v37, type metadata accessor for ModelsDSTU2.DiagnosticReport);
  v39 = type metadata accessor for Period();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v38, 1, v39) == 1)
  {
    v40 = *(_QWORD *)(v0 + 208);
    v41 = *(_QWORD *)(v0 + 216);
    v42 = *(_QWORD *)(v0 + 176);
    sub_224DDB50C(*(_QWORD *)(v0 + 128), &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v42, 1, 1, v40);
  }
  else
  {
    v47 = *(_QWORD *)(v0 + 128);
    sub_224DDB4B4(v47 + *(int *)(v39 + 20), *(_QWORD *)(v0 + 176), &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224DDEAA0(v47, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  }
  v48 = *(_QWORD *)(v0 + 208);
  v49 = *(_QWORD *)(v0 + 176);
  sub_224DDB50C(*(_QWORD *)(v0 + 168), &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v4(v49, 1, v48) != 1)
    goto LABEL_25;
  sub_224DDB50C(*(_QWORD *)(v0 + 176), &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v50 = 0;
LABEL_33:
  *(_QWORD *)(v0 + 240) = 0;
  *(_QWORD *)(v0 + 248) = v50;
  v59 = *(_QWORD *)(v0 + 144);
  v60 = *(_QWORD *)(v0 + 96);
  v61 = *(_QWORD *)(v0 + 72);
  v62 = *(_QWORD *)(v0 + 80);
  v63 = objc_msgSend((id)objc_opt_self(), sel_FHIRDiagnosticReportStatus);
  *(_QWORD *)(v0 + 256) = v63;
  v65 = *(_QWORD *)(v62 + 32);
  v64 = *(_QWORD *)(v62 + 40);
  *(_QWORD *)(v0 + 264) = v64;
  v66 = sub_224F67B80();
  *(_QWORD *)(v0 + 272) = v67;
  *(_QWORD *)(v0 + 16) = v63;
  *(_QWORD *)(v0 + 24) = v65;
  *(_QWORD *)(v0 + 32) = v64;
  *(_QWORD *)(v0 + 40) = v66;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 48) = v67;
  sub_224DDB408(v61, v60, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v68 = *(_QWORD *)(v0 + 88);
  if (*(_QWORD *)(v62 + *(int *)(v59 + 48) + 8))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_224F677B4();
    v69 = sub_224F677D8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v68, 0, 1, v69);
  }
  else
  {
    v70 = sub_224F677D8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v68, 1, 1, v70);
    swift_bridgeObjectRetain();
  }
  v71 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 280) = *(_QWORD *)(v71 + 72);
  *(_QWORD *)(v0 + 288) = *(_QWORD *)(v71 + 80);
  swift_bridgeObjectRetain();
  v72 = swift_task_alloc();
  *(_QWORD *)(v0 + 296) = v72;
  *(_QWORD *)v72 = v0;
  *(_QWORD *)(v72 + 8) = sub_224F4FB9C;
  *(_OWORD *)(v72 + 16) = *(_OWORD *)(v0 + 72);
  return swift_task_switch();
}

uint64_t sub_224F4FB9C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 304) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F4FBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 224);
  if (*(_QWORD *)(v1 + 56) == 1)
  {
    if ((*(_BYTE *)(v1 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v1 + 17))
        v2 = 3;
      else
        v2 = 2;
    }
    else
    {
      v2 = 1;
    }
  }
  else
  {
    v2 = 0;
  }
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 104);
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v6 = (uint64_t *)(v1 + *(int *)(v4 + 32));
  v7 = *v6;
  v8 = v6[1];
  swift_bridgeObjectRetain();
  v9 = sub_224F00474(v5, v7, v8, v2);
  v10 = *(void **)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 288);
  if (v3)
  {
    v12 = *(void **)(v0 + 248);
    v13 = *(_QWORD *)(v0 + 224);
    v14 = *(void **)(v0 + 232);
    v16 = *(_QWORD *)(v0 + 88);
    v15 = *(_QWORD *)(v0 + 96);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_224DDB50C(v16, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
    sub_224DDEAA0(v15, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    sub_224DDEAA0(v13, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = v9;
    v19 = *(_QWORD *)(v0 + 280);
    v20 = *(void **)(v0 + 248);
    v25 = *(void **)(v0 + 256);
    v21 = *(void **)(v0 + 232);
    v26 = *(_QWORD *)(v0 + 224);
    v22 = *(_QWORD **)(v0 + 96);
    v23 = *(_QWORD *)(v0 + 88);
    sub_224E5451C(0, &qword_2557E1D30);
    v24 = sub_224F16180(v22, v23, v19, v11, (uint64_t)v10, (uint64_t)v21, (uint64_t)v20, v0 + 16, (uint64_t)v18);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_224DDEAA0(v26, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(v0 + 8))(v24);
  }
}

uint64_t sub_224F4FFB0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2[12] = a1;
  v2[13] = v1;
  sub_224F6743C();
  v2[14] = swift_task_alloc();
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v2[15] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[16] = swift_task_alloc();
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v3);
  v2[17] = swift_task_alloc();
  v2[18] = *(_QWORD *)(type metadata accessor for Annotation() - 8);
  v2[19] = swift_task_alloc();
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  v2[20] = swift_task_alloc();
  v4 = type metadata accessor for FHIRDateTime();
  v2[21] = v4;
  v2[22] = *(_QWORD *)(v4 - 8);
  v2[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F50118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v1 + 160);
  v3 = *(_QWORD *)(v1 + 168);
  v5 = *(_QWORD *)(v1 + 104);
  v6 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
  *(_QWORD *)(v1 + 192) = v6;
  sub_224DDB4B4(v5 + v6[8], v4, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) == 1)
  {
    sub_224DDB50C(*(_QWORD *)(v1 + 160), &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224E75FD8();
    swift_allocError();
    *(_OWORD *)v7 = xmmword_224F76280;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_BYTE *)(v7 + 32) = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v9 = *(_QWORD *)(v1 + 104);
  sub_224DDEADC(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 184), (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v10 = objc_msgSend((id)objc_opt_self(), sel_FHIRImmunizationStatus);
  *(_QWORD *)(v1 + 200) = v10;
  v11 = *(_QWORD *)(v9 + 40);
  v12 = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v1 + 208) = v12;
  v13 = sub_224F67B80();
  *(_QWORD *)(v1 + 216) = v14;
  *(_QWORD *)(v1 + 16) = v10;
  *(_QWORD *)(v1 + 24) = v11;
  *(_QWORD *)(v1 + 32) = v12;
  *(_QWORD *)(v1 + 40) = v13;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 48) = v14;
  v15 = *(_QWORD *)(v9 + v6[10]);
  if (v15)
  {
    v16 = (_QWORD *)(v1 + 88);
    v17 = *(_QWORD *)(v15 + 16);
    if (v17)
    {
      v54 = (_QWORD *)(v1 + 88);
      v55 = v6;
      v18 = *(_QWORD *)(v1 + 144);
      v57 = *(_QWORD *)(v1 + 152);
      v58 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_224E53720(0, v17, 0);
      v19 = v15 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      v56 = *(_QWORD *)(v18 + 72);
      v20 = v58;
      do
      {
        v21 = v1;
        v22 = *(uint64_t **)(v1 + 152);
        sub_224DDB408(v19, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
        v23 = *v22;
        v24 = *(_QWORD *)(v57 + 8);
        swift_bridgeObjectRetain();
        sub_224DDEAA0((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_224E53720(0, *(_QWORD *)(v20 + 16) + 1, 1);
          v20 = v58;
        }
        v26 = *(_QWORD *)(v20 + 16);
        v25 = *(_QWORD *)(v20 + 24);
        if (v26 >= v25 >> 1)
        {
          sub_224E53720(v25 > 1, v26 + 1, 1);
          v20 = v58;
        }
        *(_QWORD *)(v20 + 16) = v26 + 1;
        v27 = v20 + 16 * v26;
        *(_QWORD *)(v27 + 32) = v23;
        *(_QWORD *)(v27 + 40) = v24;
        v19 += v56;
        --v17;
        v1 = v21;
      }
      while (v17);
      swift_bridgeObjectRelease();
      v16 = v54;
      v6 = v55;
    }
    else
    {
      swift_bridgeObjectRetain();
      v20 = MEMORY[0x24BEE4AF8];
    }
    *v16 = v20;
    sub_224E54704(0, (unint64_t *)&qword_2557E0888, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_224E79350();
    v28 = sub_224F67B44();
    v29 = v30;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v28 = 0;
    v29 = 0;
  }
  *(_QWORD *)(v1 + 224) = v28;
  *(_QWORD *)(v1 + 232) = v29;
  v31 = *(_QWORD *)(*(_QWORD *)(v1 + 104) + v6[12]);
  if (!v31)
    goto LABEL_23;
  v32 = *(_QWORD *)(v31 + 16);
  if (v32 >= 2)
  {
    v33 = v31 + 32;
    while (*(_BYTE *)(v33 + 16) == 1)
    {
      v33 += 24;
      if (!--v32)
        goto LABEL_23;
    }
    v35 = 0;
    v34 = (uint64_t *)(v33 + 8);
    goto LABEL_25;
  }
  if (!v32)
  {
LABEL_23:
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    goto LABEL_28;
  }
  v33 = v31 + 32;
  v34 = (uint64_t *)(v31 + 40);
  v35 = *(unsigned __int8 *)(v31 + 48);
LABEL_25:
  v40 = *v34;
  *(_QWORD *)(v1 + 72) = *(_QWORD *)v33;
  sub_224EEEE30();
  v38 = sub_224F6806C();
  v39 = v41;
  if (v35)
  {
    v36 = 0;
    v37 = 0;
  }
  else
  {
    *(_QWORD *)(v1 + 80) = v40;
    v36 = sub_224F6806C();
  }
LABEL_28:
  *(_QWORD *)(v1 + 256) = v38;
  *(_QWORD *)(v1 + 264) = v39;
  *(_QWORD *)(v1 + 240) = v36;
  *(_QWORD *)(v1 + 248) = v37;
  v42 = *(_QWORD *)(v1 + 136);
  sub_224DDB4B4(*(_QWORD *)(v1 + 104) + v6[17], v42, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v43 = type metadata accessor for Reference();
  v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v42, 1, v43);
  v45 = *(uint64_t **)(v1 + 136);
  if (v44 == 1)
  {
    sub_224DDB50C(*(_QWORD *)(v1 + 136), &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    v46 = 0;
    v47 = 0;
  }
  else
  {
    v46 = *v45;
    v47 = v45[1];
    swift_bridgeObjectRetain();
    sub_224DDEAA0((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  }
  *(_QWORD *)(v1 + 272) = v46;
  *(_QWORD *)(v1 + 280) = v47;
  v48 = *(_QWORD *)(v1 + 104);
  sub_224DDB408(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 128), (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v49 = *(_QWORD *)(v48 + v6[18] + 8);
  v50 = *(_QWORD *)(v1 + 120);
  if (v49)
  {
    swift_bridgeObjectRetain();
    sub_224F677B4();
    v51 = sub_224F677D8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 0, 1, v51);
  }
  else
  {
    v52 = sub_224F677D8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v50, 1, 1, v52);
  }
  v53 = swift_task_alloc();
  *(_QWORD *)(v1 + 288) = v53;
  *(_QWORD *)v53 = v1;
  *(_QWORD *)(v53 + 8) = sub_224F506C8;
  *(_OWORD *)(v53 + 16) = *(_OWORD *)(v1 + 96);
  return swift_task_switch();
}

uint64_t sub_224F506C8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 296) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F50724()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;

  v1 = *(void **)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = objc_msgSend(v1, sel_codings);

  sub_224E5451C(0, (unint64_t *)&qword_2557E1648);
  v4 = sub_224F67D6C();

  v5 = 0;
  v6 = *(_QWORD *)(v0 + 184);
  if (*(_QWORD *)(v2 + 56) == 1)
  {
    if ((*(_BYTE *)(v6 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v6 + 17))
        v5 = 3;
      else
        v5 = 2;
    }
    else
    {
      v5 = 1;
    }
  }
  v7 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 112);
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v9 = (uint64_t *)(v6 + *(int *)(v7 + 32));
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain();
  v12 = sub_224F00474(v8, v10, v11, v5);
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 104) + *(int *)(*(_QWORD *)(v0 + 192) + 36) + 12) & 1) != 0)
    v13 = 0;
  else
    v13 = FHIRDate.asMedicalDate()();
  v14 = *(_QWORD *)(v0 + 264);
  v37 = v13;
  if (v14)
  {
    v15 = *(_QWORD *)(v0 + 256);
    v16 = HIBYTE(v14) & 0xF;
    if ((v14 & 0x2000000000000000) == 0)
      v16 = v15 & 0xFFFFFFFFFFFFLL;
    if (!v16)
    {
      swift_bridgeObjectRelease();
      v15 = 0;
      v14 = 0;
    }
  }
  else
  {
    v15 = 0;
  }
  v17 = *(_QWORD *)(v0 + 248);
  v36 = v4;
  v38 = v12;
  v35 = v15;
  if (v17)
  {
    v18 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0)
      v18 = *(_QWORD *)(v0 + 240) & 0xFFFFFFFFFFFFLL;
    if (v18)
    {
      v28 = *(_QWORD *)(v0 + 240);
    }
    else
    {
      swift_bridgeObjectRelease();
      v28 = 0;
      v17 = 0;
    }
  }
  else
  {
    v28 = 0;
  }
  v29 = *(_QWORD *)(v0 + 272);
  v30 = *(_QWORD *)(v0 + 280);
  v31 = *(_QWORD *)(v0 + 224);
  v32 = *(_QWORD *)(v0 + 232);
  v19 = *(int **)(v0 + 192);
  v33 = *(void **)(v0 + 200);
  v34 = *(_QWORD *)(v0 + 184);
  v20 = *(uint64_t **)(v0 + 128);
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 104);
  sub_224E5451C(0, &qword_2557E3010);
  v23 = *(_QWORD *)(v22 + v19[16]);
  v24 = *(_BYTE *)(v22 + v19[14]);
  LOBYTE(v19) = *(_BYTE *)(v22 + v19[11]);
  v25 = swift_bridgeObjectRetain();
  v26 = sub_224E7BBE0(v20, v21, v31, v32, v36, (uint64_t)v38, v37, (_QWORD *)(v0 + 16), v35, v14, v28, v17, v23, v25, v29, v30, 0, 0, 0,
          v24,
          (char)v19,
          0,
          0,
          0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_224DDEAA0(v34, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v26);
}

uint64_t sub_224F50C78(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2[12] = a1;
  v2[13] = v1;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v2[14] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[15] = swift_task_alloc();
  v2[16] = *(_QWORD *)(type metadata accessor for ReferenceRange() - 8);
  v2[17] = swift_task_alloc();
  sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, v3);
  v2[18] = swift_task_alloc();
  v4 = type metadata accessor for Quantity();
  v2[19] = v4;
  v2[20] = *(_QWORD *)(v4 - 8);
  v2[21] = swift_task_alloc();
  sub_224F6743C();
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v3);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = type metadata accessor for ModelsDSTU2.Observation(0);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  return swift_task_switch();
}

id sub_224F50EA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id result;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v1 = v0[33];
  v2 = v0[29];
  v3 = v0[13];
  v4 = v3 + *(int *)(v0[27] + 44);
  sub_224DDB4B4(v4, v1, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB408(v3, v2, type metadata accessor for ModelsDSTU2.Observation);
  v5 = type metadata accessor for FHIRDateTime();
  v0[35] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  v0[36] = v7;
  if (v7(v1, 1, v5) == 1)
  {
    v8 = v0[29];
    v9 = v0[26];
    sub_224DDB4B4(v8 + *(int *)(v0[27] + 48), v9, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDEAA0(v8, type metadata accessor for ModelsDSTU2.Observation);
    v10 = type metadata accessor for Period();
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
    v12 = v0[34];
    v13 = v0[26];
    if (v11 == 1)
    {
      sub_224DDB50C(v0[26], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v12, 1, 1, v5);
    }
    else
    {
      sub_224DDB4B4(v0[26], v0[34], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEAA0(v13, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    }
    v16 = v0[34];
    sub_224DDB50C(v0[33], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v7(v16, 1, v5) == 1)
    {
      sub_224DDB50C(v0[34], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      v17 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v15 = v0[33];
    v14 = v0[34];
    sub_224DDEAA0(v0[29], type metadata accessor for ModelsDSTU2.Observation);
    sub_224DDEADC(v15, v14, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
  }
  v18 = v0[34];
  if (*(_QWORD *)(v18 + 56) == 1)
  {
    if ((*(_BYTE *)(v18 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v18 + 17))
        v19 = 3;
      else
        v19 = 2;
    }
    else
    {
      v19 = 1;
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = v0[24];
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v21 = (uint64_t *)(v18 + *(int *)(v5 + 32));
  v22 = *v21;
  v23 = v21[1];
  swift_bridgeObjectRetain();
  v17 = sub_224F00474(v20, v22, v23, v19);
  sub_224DDEAA0(v0[34], (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_16:
  v0[37] = v17;
  v24 = v0[31];
  v25 = v0[28];
  v26 = v0[13];
  sub_224DDB4B4(v4, v24, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB408(v26, v25, type metadata accessor for ModelsDSTU2.Observation);
  if (v7(v24, 1, v5) == 1)
  {
    v27 = v0[28];
    v28 = v0[25];
    sub_224DDB4B4(v27 + *(int *)(v0[27] + 48), v28, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDEAA0(v27, type metadata accessor for ModelsDSTU2.Observation);
    v29 = type metadata accessor for Period();
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29);
    v31 = v0[32];
    v32 = v0[25];
    if (v30 == 1)
    {
      sub_224DDB50C(v0[25], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v31, 1, 1, v5);
    }
    else
    {
      sub_224DDB4B4(v32 + *(int *)(v29 + 20), v0[32], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEAA0(v32, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    }
    v35 = v0[32];
    sub_224DDB50C(v0[31], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v7(v35, 1, v5) == 1)
    {
      sub_224DDB50C(v0[32], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      v36 = 0;
      goto LABEL_31;
    }
  }
  else
  {
    v34 = v0[31];
    v33 = v0[32];
    sub_224DDEAA0(v0[28], type metadata accessor for ModelsDSTU2.Observation);
    sub_224DDEADC(v34, v33, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v33, 0, 1, v5);
  }
  v37 = v0[32];
  if (*(_QWORD *)(v37 + 56) == 1)
  {
    if ((*(_BYTE *)(v37 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v37 + 17))
        v38 = 3;
      else
        v38 = 2;
    }
    else
    {
      v38 = 1;
    }
  }
  else
  {
    v38 = 0;
  }
  v39 = v0[23];
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v40 = (uint64_t *)(v37 + *(int *)(v5 + 32));
  v42 = *v40;
  v41 = v40[1];
  swift_bridgeObjectRetain();
  v36 = sub_224F00474(v39, v42, v41, v38);
  sub_224DDEAA0(v0[32], (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_31:
  v0[38] = 0;
  v0[39] = v36;
  v43 = (int *)v0[27];
  v44 = v0[13];
  if (*(_QWORD *)(v44 + v43[15] + 8))
  {
    swift_bridgeObjectRetain();
    v45 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v46 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithString_, v45);

    if (v46)
      goto LABEL_33;
LABEL_40:
    v47 = 0;
    goto LABEL_41;
  }
  v48 = (_QWORD *)(v44 + v43[16]);
  v49 = v48[1];
  if (v49 != 1)
  {
    v53 = v48[2];
    v0[9] = *v48;
    v0[10] = v49;
    v0[11] = v53;
    sub_224E5451C(0, &qword_2557E2958);
    result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestResultTypeForIdentifier_, *MEMORY[0x24BDD2BB0]);
    v0[40] = result;
    if (result)
    {
      v55 = (uint64_t)result;
      v56 = (_QWORD *)swift_task_alloc();
      v0[41] = v56;
      *v56 = v0;
      v56[1] = sub_224F51A00;
      return (id)sub_224EF0270(v0[12], v55);
    }
    else
    {
      __break(1u);
    }
    return result;
  }
  v50 = v0[19];
  v51 = v0[20];
  v52 = v0[18];
  sub_224DDB4B4(v44 + v43[17], v52, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v52, 1, v50) == 1)
  {
    sub_224DDB50C(v0[18], &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
    v47 = 0;
    v46 = 0;
    goto LABEL_41;
  }
  sub_224DDEADC(v0[18], v0[21], (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  v57 = Quantity.asCodedQuantity()();
  v58 = v0[21];
  v59 = v57;
  v46 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithCodedQuantity_, v57);

  sub_224DDEAA0(v58, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  if (!v46)
    goto LABEL_40;
LABEL_33:
  v47 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueCollectionSingleWithValue_, v46);
LABEL_41:
  v0[44] = v47;
  v0[45] = v46;
  v0[43] = 0;
  v60 = (_QWORD *)v0[13];
  v61 = *(_QWORD *)((char *)v60 + *(int *)(v0[27] + 72));
  if (v61)
  {
    v62 = MEMORY[0x24BEE4AF8];
    v85 = MEMORY[0x24BEE4AF8];
    v63 = *(_QWORD *)(v61 + 16);
    if (v63)
    {
      v64 = v0[16];
      v65 = v61 + ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80));
      v66 = *(_QWORD *)(v64 + 72);
      swift_bridgeObjectRetain();
      do
      {
        v67 = v0[17];
        sub_224DDB408(v65, v67, (uint64_t (*)(_QWORD))type metadata accessor for ReferenceRange);
        v68 = ReferenceRange.asReferenceRange()();
        v69 = sub_224DDEAA0(v67, (uint64_t (*)(_QWORD))type metadata accessor for ReferenceRange);
        if (v68)
        {
          MEMORY[0x22768DE24](v69);
          if (*(_QWORD *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_224F67D90();
          sub_224F67D9C();
          sub_224F67D84();
        }
        v65 += v66;
        --v63;
      }
      while (v63);
      swift_bridgeObjectRelease();
      v62 = v85;
      v60 = (_QWORD *)v0[13];
    }
  }
  else
  {
    v62 = 0;
  }
  v0[46] = v62;
  v70 = objc_msgSend((id)objc_opt_self(), sel_FHIRObservationStatus);
  v0[47] = v70;
  v72 = v60[5];
  v71 = v60[6];
  v0[48] = v71;
  v73 = sub_224F67B80();
  v0[49] = v74;
  v0[2] = v70;
  v0[3] = v72;
  v0[4] = v71;
  v0[5] = v73;
  v0[7] = 0;
  v0[8] = 0;
  v0[6] = v74;
  if (v60[8] == 1)
  {
    swift_bridgeObjectRetain();
    v75 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    sub_224E54704(0, (unint64_t *)&qword_2557E2960, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v76 = swift_allocObject();
    *(_OWORD *)(v76 + 16) = xmmword_224F71240;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v76 + 32) = sub_224EEF95C();
    sub_224F67D84();
    v75 = v76;
  }
  v0[50] = v75;
  v77 = v0[27];
  v78 = v0[13];
  sub_224DDB408(v0[12], v0[15], (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v79 = *(_QWORD *)(v78 + *(int *)(v77 + 76) + 8);
  v80 = v0[14];
  if (v79)
  {
    swift_bridgeObjectRetain();
    sub_224F677B4();
    v81 = sub_224F677D8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v80, 0, 1, v81);
  }
  else
  {
    v82 = sub_224F677D8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v80, 1, 1, v82);
  }
  v83 = v0[13];
  v0[51] = *(_QWORD *)(v83 + 104);
  v0[52] = *(_QWORD *)(v83 + 112);
  swift_bridgeObjectRetain();
  v84 = swift_task_alloc();
  v0[53] = v84;
  *(_QWORD *)v84 = v0;
  *(_QWORD *)(v84 + 8) = sub_224F51DA4;
  *(_OWORD *)(v84 + 16) = *((_OWORD *)v0 + 6);
  return (id)swift_task_switch();
}

uint64_t sub_224F51A00(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(*(_QWORD *)v1 + 320);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = a1;
  swift_task_dealloc();

  return swift_task_switch();
}

uint64_t sub_224F51A60()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v1 = v0[42];
  v2 = v0[38];
  v0[44] = objc_msgSend((id)objc_opt_self(), sel_inspectableValueCollectionSingleWithValue_, v1);
  v0[45] = v1;
  v0[43] = v2;
  v3 = (_QWORD *)v0[13];
  v4 = *(_QWORD *)((char *)v3 + *(int *)(v0[27] + 72));
  if (v4)
  {
    v5 = MEMORY[0x24BEE4AF8];
    v29 = MEMORY[0x24BEE4AF8];
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      v7 = v0[16];
      v8 = v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      v9 = *(_QWORD *)(v7 + 72);
      swift_bridgeObjectRetain();
      do
      {
        v10 = v0[17];
        sub_224DDB408(v8, v10, (uint64_t (*)(_QWORD))type metadata accessor for ReferenceRange);
        v11 = ReferenceRange.asReferenceRange()();
        v12 = sub_224DDEAA0(v10, (uint64_t (*)(_QWORD))type metadata accessor for ReferenceRange);
        if (v11)
        {
          MEMORY[0x22768DE24](v12);
          if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_224F67D90();
          sub_224F67D9C();
          sub_224F67D84();
        }
        v8 += v9;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      v5 = v29;
      v3 = (_QWORD *)v0[13];
    }
  }
  else
  {
    v5 = 0;
  }
  v0[46] = v5;
  v13 = objc_msgSend((id)objc_opt_self(), sel_FHIRObservationStatus);
  v0[47] = v13;
  v15 = v3[5];
  v14 = v3[6];
  v0[48] = v14;
  v16 = sub_224F67B80();
  v0[49] = v17;
  v0[2] = v13;
  v0[3] = v15;
  v0[4] = v14;
  v0[5] = v16;
  v0[7] = 0;
  v0[8] = 0;
  v0[6] = v17;
  if (v3[8] == 1)
  {
    swift_bridgeObjectRetain();
    v18 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    sub_224E54704(0, (unint64_t *)&qword_2557E2960, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_224F71240;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v19 + 32) = sub_224EEF95C();
    sub_224F67D84();
    v18 = v19;
  }
  v0[50] = v18;
  v20 = v0[27];
  v21 = v0[13];
  sub_224DDB408(v0[12], v0[15], (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v22 = *(_QWORD *)(v21 + *(int *)(v20 + 76) + 8);
  v23 = v0[14];
  if (v22)
  {
    swift_bridgeObjectRetain();
    sub_224F677B4();
    v24 = sub_224F677D8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 0, 1, v24);
  }
  else
  {
    v25 = sub_224F677D8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v23, 1, 1, v25);
  }
  v26 = v0[13];
  v0[51] = *(_QWORD *)(v26 + 104);
  v0[52] = *(_QWORD *)(v26 + 112);
  swift_bridgeObjectRetain();
  v27 = swift_task_alloc();
  v0[53] = v27;
  *(_QWORD *)v27 = v0;
  *(_QWORD *)(v27 + 8) = sub_224F51DA4;
  *(_OWORD *)(v27 + 16) = *((_OWORD *)v0 + 6);
  return swift_task_switch();
}

uint64_t sub_224F51DA4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 432) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F51E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 288);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = (void *)*MEMORY[0x24BDD2BA0];
  sub_224DDB4B4(*(_QWORD *)(v0 + 104) + *(int *)(*(_QWORD *)(v0 + 216) + 52), v3, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v5 = v2(v3, 1, v1);
  v6 = *(_QWORD *)(v0 + 240);
  if (v5 == 1)
  {
    v7 = v4;
    sub_224DDB50C(v6, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v32 = 0;
  }
  else
  {
    if (*(_QWORD *)(v6 + 56) == 1)
    {
      if ((*(_BYTE *)(v6 + 19) & 1) != 0)
      {
        if (*(_BYTE *)(v6 + 17))
          v8 = 3;
        else
          v8 = 2;
      }
      else
      {
        v8 = 1;
      }
    }
    else
    {
      v8 = 0;
    }
    v9 = *(_QWORD *)(v0 + 344);
    v10 = *(_QWORD *)(v0 + 280);
    v11 = *(_QWORD *)(v0 + 176);
    sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
    v12 = v4;
    FHIRDateTime.asDateComponents()();
    v13 = (uint64_t *)(v6 + *(int *)(v10 + 32));
    v14 = *v13;
    v15 = v13[1];
    swift_bridgeObjectRetain();
    v16 = sub_224F00474(v11, v14, v15, v8);
    if (v9)
    {
      v17 = *(void **)(v0 + 432);
      v18 = *(void **)(v0 + 360);
      v19 = *(void **)(v0 + 312);
      v20 = *(void **)(v0 + 296);
      v43 = *(_QWORD *)(v0 + 240);
      v42 = *(_QWORD *)(v0 + 120);
      v40 = *(void **)(v0 + 352);
      v41 = *(_QWORD *)(v0 + 112);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      sub_224DDB50C(v41, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
      sub_224DDEAA0(v42, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
      sub_224DDEAA0(v43, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v32 = v16;
    sub_224DDEAA0(*(_QWORD *)(v0 + 240), (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  }
  v31 = v4;
  v22 = *(void **)(v0 + 432);
  v23 = *(_QWORD *)(v0 + 400);
  v36 = *(_QWORD *)(v0 + 408);
  v37 = *(_QWORD *)(v0 + 416);
  v38 = *(void **)(v0 + 376);
  v34 = *(void **)(v0 + 352);
  v35 = *(_QWORD *)(v0 + 368);
  v24 = *(void **)(v0 + 312);
  v33 = *(void **)(v0 + 296);
  v39 = *(void **)(v0 + 360);
  v25 = *(_QWORD *)(v0 + 112);
  v26 = *(uint64_t **)(v0 + 120);
  v27 = *(_QWORD *)(v0 + 104);
  sub_224E5451C(0, &qword_2557E3118);
  v28 = *(_QWORD *)(v27 + 104);
  v29 = swift_bridgeObjectRetain();
  v30 = sub_224F184E8(v26, v25, v36, v37, v22, (uint64_t)v34, v35, (uint64_t)v33, (uint64_t)v24, (uint64_t)v31, v23, v0 + 16, (uint64_t)v32, 0, v28, v29, 0, 0, 0,
          0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v30);
}

uint64_t sub_224F52310(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[26] = a1;
  v2[27] = v1;
  type metadata accessor for ModelsDSTU2.Observation(0);
  v2[28] = swift_task_alloc();
  type metadata accessor for ModelsDSTU2.Immunization(0);
  v2[29] = swift_task_alloc();
  type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
  v2[30] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[31] = swift_task_alloc();
  type metadata accessor for ModelsDSTU2.Condition(0);
  v2[32] = swift_task_alloc();
  v2[33] = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v2[34] = swift_task_alloc();
  return swift_task_switch();
}

void sub_224F5240C()
{
  uint64_t v0;
  char *v1;

  sub_224DDB408(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 272), type metadata accessor for ModelsDSTU2.ResourceProxy);
  v1 = (char *)sub_224F52468 + 4 * byte_224F7629E[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_224F52468()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_224F52738()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = (uint64_t *)v0[34];
  v2 = v0[31];
  v3 = v0[26];
  v4 = *v1;
  v5 = v1[1];
  v0[47] = v5;
  v6 = v1[2];
  v7 = v1[3];
  v0[48] = v7;
  v9 = v1[4];
  v8 = v1[5];
  v0[20] = v4;
  v0[49] = v8;
  v0[21] = v5;
  v0[22] = v6;
  v0[23] = v7;
  v0[24] = v9;
  v0[25] = v8;
  v0[50] = sub_224E5451C(0, (unint64_t *)&qword_2557E1EF8);
  sub_224DDB408(v3, v2, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v10 = (_QWORD *)swift_task_alloc();
  v0[51] = v10;
  *v10 = v0;
  v10[1] = sub_224F52BE8;
  return sub_224E7B038();
}

uint64_t sub_224F527E0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 296) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F5283C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = sub_224F214B0(*(_QWORD *)(v0 + 248), (uint64_t)v1);

  sub_224DDEAA0(v2, type metadata accessor for ModelsDSTU2.Condition);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

uint64_t sub_224F528E0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 320) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F5293C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = sub_224F214B0(*(_QWORD *)(v0 + 248), (uint64_t)v1);

  sub_224DDEAA0(v2, type metadata accessor for ModelsDSTU2.DiagnosticReport);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

uint64_t sub_224F529E0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 344) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F52A3C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = sub_224F214B0(*(_QWORD *)(v0 + 248), (uint64_t)v1);

  sub_224DDEAA0(v2, type metadata accessor for ModelsDSTU2.Immunization);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

uint64_t sub_224F52AE4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 368) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F52B40()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = sub_224F214B0(*(_QWORD *)(v0 + 248), (uint64_t)v1);

  sub_224DDEAA0(v2, type metadata accessor for ModelsDSTU2.Observation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

uint64_t sub_224F52BE8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 416) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F52C44()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 416);
  v2 = sub_224F214B0(*(_QWORD *)(v0 + 248), (uint64_t)v1);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v2);
}

void sub_224F52CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  _QWORD v14[6];

  v14[5] = a5;
  v14[2] = a3;
  v14[3] = a4;
  v14[1] = a2;
  v6 = type metadata accessor for ModelsDSTU2.Observation(0);
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for ModelsDSTU2.Immunization(0);
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
  MEMORY[0x24BDAC7A8](v8);
  v9 = type metadata accessor for ModelsDSTU2.Condition(0);
  MEMORY[0x24BDAC7A8](v9);
  v10 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  MEMORY[0x24BDAC7A8](v10);
  sub_224DDB408(v5, (uint64_t)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  v13 = (char *)sub_224F52E70 + 4 * byte_224F762A5[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_224F52E70()
{
  uint64_t v0;

  sub_224DDEAA0(v0, type metadata accessor for ModelsDSTU2.ResourceProxy);
  return 0;
}

void sub_224F52F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_224DDEADC(v0, v1, type metadata accessor for ModelsDSTU2.DiagnosticReport);
  sub_224EF2674(v2, *(void **)(v3 - 104), *(_QWORD *)(v3 - 96), *(_QWORD *)(v3 - 88), *(_QWORD *)(v3 - 72));
  sub_224DDEAA0(v1, type metadata accessor for ModelsDSTU2.DiagnosticReport);
  JUMPOUT(0x224F52F58);
}

uint64_t sub_224F52FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v1 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDB408(v0, (uint64_t)v3, v4);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
    case 3u:
    case 4u:
      sub_224DDEAA0((uint64_t)v3, type metadata accessor for ModelsDSTU2.ResourceProxy);
      type metadata accessor for DownloadableAttachmentExtractionResult();
      v7 = 0u;
      v8 = 0u;
      v9 = 0;
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = 0;
      sub_224F531A8((uint64_t)&v7, v5 + 24);
      break;
    default:
      type metadata accessor for DownloadableAttachmentExtractionResult();
      v7 = 0u;
      v8 = 0u;
      v9 = 0;
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = 0;
      sub_224F531A8((uint64_t)&v7, v5 + 24);
      sub_224DDEAA0((uint64_t)v3, type metadata accessor for ModelsDSTU2.ResourceProxy);
      break;
  }
  return v5;
}

uint64_t sub_224F53104(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_224F53150;
  return sub_224F4C308(a1);
}

uint64_t sub_224F53150(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_224F531A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224F53AF8(0, (unint64_t *)&qword_2557E1CD8, (uint64_t)&qword_2557E1CE0, (uint64_t)&protocol descriptor for DomainResource, (void (*)(uint64_t, uint64_t, uint64_t))sub_224E59364);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_224F5320C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

id sub_224F53224()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  id result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = (__int128 *)(v1 + *(int *)(type metadata accessor for ModelsDSTU2.Condition(0) + 32));
  v9 = *v2;
  v10 = *((_QWORD *)v2 + 2);
  v3 = sub_224EEF95C();
  *(_QWORD *)(v0 + 32) = v3;
  sub_224E5451C(0, &qword_2557E2950);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_conditionRecordTypeForIdentifier_, *MEMORY[0x24BDD2AE8], v9, v10);
  *(_QWORD *)(v0 + 40) = result;
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(v0 + 16);
    v7 = v6 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {

      return (id)(*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
    }
    else
    {
      *(_QWORD *)(v0 + 48) = *(_QWORD *)(v7 + *(int *)(type metadata accessor for ExtractionContext() + 44));
      swift_retain();
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 56) = v8;
      *v8 = v0;
      v8[1] = sub_224F53FC4;
      return (id)sub_224ED0FBC(v3, (uint64_t)v5);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_224F53364(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

id sub_224F5337C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 24);
  v8 = *(_OWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 64);
  v2 = sub_224EEF95C();
  *(_QWORD *)(v0 + 32) = v2;
  sub_224E5451C(0, (unint64_t *)&qword_2557E1CF8);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestReportTypeForIdentifier_, *MEMORY[0x24BDD2B90], v8, v9);
  *(_QWORD *)(v0 + 40) = result;
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(v0 + 16);
    v6 = v5 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {

      return (id)(*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
    }
    else
    {
      *(_QWORD *)(v0 + 48) = *(_QWORD *)(v6 + *(int *)(type metadata accessor for ExtractionContext() + 44));
      swift_retain();
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 56) = v7;
      *v7 = v0;
      v7[1] = sub_224F53FC4;
      return (id)sub_224ED0FBC(v2, (uint64_t)v4);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_224F534AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

id sub_224F534C4()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  id result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = (__int128 *)(v1 + *(int *)(type metadata accessor for ModelsDSTU2.Immunization(0) + 52));
  v9 = *v2;
  v10 = *((_QWORD *)v2 + 2);
  v3 = sub_224EEF95C();
  *(_QWORD *)(v0 + 32) = v3;
  sub_224E5451C(0, &qword_2557E1F00);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_vaccinationRecordTypeForIdentifier_, *MEMORY[0x24BDD3848], v9, v10);
  *(_QWORD *)(v0 + 40) = result;
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(v0 + 16);
    v7 = v6 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {

      return (id)(*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
    }
    else
    {
      *(_QWORD *)(v0 + 48) = *(_QWORD *)(v7 + *(int *)(type metadata accessor for ExtractionContext() + 44));
      swift_retain();
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 56) = v8;
      *v8 = v0;
      v8[1] = sub_224F53FC4;
      return (id)sub_224ED0FBC(v3, (uint64_t)v5);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_224F53604(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

id sub_224F5361C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 24);
  v8 = *(_OWORD *)(v1 + 80);
  v9 = *(_QWORD *)(v1 + 96);
  v2 = sub_224EEF95C();
  *(_QWORD *)(v0 + 32) = v2;
  sub_224E5451C(0, &qword_2557E2958);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestResultTypeForIdentifier_, *MEMORY[0x24BDD2BB0], v8, v9);
  *(_QWORD *)(v0 + 40) = result;
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(v0 + 16);
    v6 = v5 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {

      return (id)(*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
    }
    else
    {
      *(_QWORD *)(v0 + 48) = *(_QWORD *)(v6 + *(int *)(type metadata accessor for ExtractionContext() + 44));
      swift_retain();
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 56) = v7;
      *v7 = v0;
      v7[1] = sub_224E735A0;
      return (id)sub_224ED0FBC(v2, (uint64_t)v4);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_224F5374C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v21 - v4;
  v6 = sub_224F677D8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_224F674D8();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v1[7])
  {
    v15 = v1[6];
  }
  else
  {
    v22 = v12;
    v23 = v11;
    sub_224F674CC();
    if (v1[2])
    {
      v24 = v1[2];
      sub_224E54704(0, (unint64_t *)&qword_2557E0888, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
      sub_224E79350();
      sub_224F67B44();
      sub_224F674A8();
    }
    if (v1[4])
    {
      v24 = v1[4];
      sub_224E54704(0, (unint64_t *)&qword_2557E0888, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
      sub_224E79350();
      sub_224F67B44();
      sub_224F67490();
    }
    if (v1[3])
    {
      v24 = v1[3];
      sub_224E54704(0, (unint64_t *)&qword_2557E0888, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
      sub_224E79350();
      sub_224F67B44();
      sub_224F6749C();
    }
    if (v1[5])
    {
      v24 = v1[5];
      sub_224E54704(0, (unint64_t *)&qword_2557E0888, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
      sub_224E79350();
      sub_224F67B44();
      sub_224F674B4();
    }
    v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1738]), sel_init);
    objc_msgSend(v16, sel_setStyle_, 3);
    sub_224DDB4B4(a1, (uint64_t)v5, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      sub_224DDB50C((uint64_t)v5, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
      v17 = (void *)sub_224F677C0();
      objc_msgSend(v16, sel_setLocale_, v17);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    v18 = (void *)sub_224F674C0();
    v19 = objc_msgSend(v16, sel_stringFromPersonNameComponents_, v18);

    v15 = sub_224F67B80();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v23);
  }
  swift_bridgeObjectRetain();
  return v15;
}

void sub_224F53AF8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a5(255, a3, a4);
    v6 = sub_224F67FF4();
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t sub_224F53B4C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E4398;
  if (!qword_2557E4398)
  {
    sub_224DDEA0C(255, &qword_2557E1F68, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E43A0, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Bundle.BundleEntry);
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for <A> [A], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E4398);
  }
  return result;
}

void sub_224F53BDC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    sub_224DDEA0C(255, &qword_2557E1F68, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v7 = v6;
    sub_224F20E84();
    v9 = v8;
    v10 = sub_224F53B4C();
    v11 = a3(a1, v7, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t sub_224F53C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for RecordExtractionContext();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 16) & ~v2;

  v4 = v0 + v3 + *(int *)(v1 + 20);
  v5 = type metadata accessor for ExtractionContext();
  v6 = v4 + *(int *)(v5 + 28);
  v7 = sub_224F67760();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = v4 + *(int *)(v5 + 32);
  v9 = sub_224F675D4();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_224F53D88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RecordExtractionContext() - 8) + 80);
  v7 = v2 + ((v6 + 16) & ~v6);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_224EF7808;
  v8[3] = a2;
  v8[4] = v7;
  v8[2] = a1;
  v9 = (_QWORD *)swift_task_alloc();
  v8[5] = v9;
  *v9 = v8;
  v9[1] = sub_224F4BF64;
  return sub_224F4C014(v7);
}

uint64_t sub_224F53E28(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_224F53BDC(255, a2, a3);
    result = MEMORY[0x22768ED24](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

double sub_224F53E68(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_224F53E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E54704(0, &qword_2557E43D8, (uint64_t)&type metadata for ModelsDSTU2.Patient, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_224F53EE0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_224F53F14()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 120) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_224F53F90()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VCJWK.calculateThumbprint()()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  Swift::String result;
  _QWORD v31[9];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v1 = sub_224F6734C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v31[2] = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_224F67A78();
  v31[1] = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_224F679F4();
  v7 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v31[8] = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_224F672BC();
  MEMORY[0x24BDAC7A8](v9);
  v10 = *v0;
  v31[4] = v1;
  v31[5] = v7;
  v31[3] = v2;
  v31[6] = v6;
  v31[7] = v4;
  if (!v10)
  {
    v17 = 0;
    v18 = 0;
    v19 = *((_QWORD *)v0 + 7);
    v34 = *((_QWORD *)v0 + 6);
    v35 = 0;
    v20 = *((_QWORD *)v0 + 5);
    v33 = *((_QWORD *)v0 + 4);
    v15 = 0;
    v11 = 3;
    v13 = v20;
    v14 = v19;
    goto LABEL_5;
  }
  v11 = v0[1];
  v12 = *((_QWORD *)v0 + 9);
  v35 = *((_QWORD *)v0 + 8);
  if (v10 == 1)
  {
    v33 = 0;
    v34 = 0;
    v13 = 0;
    v14 = 0;
    v16 = v0 + 80;
    v15 = *((_QWORD *)v0 + 10);
    v17 = v12;
    v18 = *((_QWORD *)v16 + 1);
LABEL_5:
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  v33 = 0;
  v34 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v18 = 0;
  v17 = v12;
LABEL_7:
  swift_bridgeObjectRetain();
  LOBYTE(v46) = v10;
  BYTE1(v46) = v11;
  *((_QWORD *)&v46 + 1) = 0;
  *(_QWORD *)&v47 = 0;
  BYTE8(v47) = 2;
  *(_QWORD *)&v48 = v33;
  *((_QWORD *)&v48 + 1) = v13;
  *(_QWORD *)&v49 = v34;
  *((_QWORD *)&v49 + 1) = v14;
  *(_QWORD *)&v50 = v35;
  *((_QWORD *)&v50 + 1) = v17;
  *(_QWORD *)&v51 = v15;
  *((_QWORD *)&v51 + 1) = v18;
  sub_224F672EC();
  v52 = 0u;
  v53 = 0u;
  v54 = 0;
  swift_allocObject();
  v21 = sub_224F672E0();
  sub_224F672A4();
  sub_224F672C8();
  v43 = v52;
  v44 = v53;
  v45 = v54;
  v39 = v48;
  v40 = v49;
  v41 = v50;
  v42 = v51;
  v37 = v46;
  v38 = v47;
  sub_224F1E9B8();
  v22 = v36;
  v23 = sub_224F672D4();
  if (!v22)
  {
    v25 = v23;
    v26 = v24;
    sub_224E76FB0((uint64_t)&v46);
    sub_224DDACD4(&qword_2557E43E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    sub_224F679E8();
    v27 = (char *)&loc_224F542B8 + *((int *)qword_224F54688 + (v26 >> 62));
    v35 = v26;
    v36 = v25;
    __asm { BR              X10 }
  }
  swift_release();
  sub_224E76FB0((uint64_t)&v46);
  v28 = v21;
  v29 = (void *)v11;
  result._object = v29;
  result._countAndFlagsBits = v28;
  return result;
}

uint64_t sub_224F54698(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_224F673B8();
  if (!result || (result = sub_224F673D0(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_224F673C4();
      sub_224F67A78();
      sub_224DDACD4(&qword_2557E43E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
      return sub_224F679D0();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_224F5475C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v2 = *(_QWORD *)(result + 16);
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      v5 = a2;
      if (a2 < 0)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!v2)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      v6 = result;
      result = swift_bridgeObjectRetain();
      v4 = 0;
      v7 = v3 + 4;
      while (1)
      {
        v8 = *(_BYTE *)(v6 + v5 + 32);
        if (!v4)
        {
          v9 = v3[3];
          if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_29;
          v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
          if (v10 <= 1)
            v11 = 1;
          else
            v11 = v10;
          sub_224F549D0(0, (unint64_t *)&qword_2557E15F0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE3598]);
          v12 = (_QWORD *)swift_allocObject();
          v13 = 2 * _swift_stdlib_malloc_size(v12) - 64;
          v12[2] = v11;
          v12[3] = v13;
          v14 = (unint64_t)(v12 + 4);
          v15 = v3[3] >> 1;
          if (v3[2])
          {
            if (v12 != v3 || v14 >= (unint64_t)v3 + v15 + 32)
              memmove(v12 + 4, v3 + 4, v15);
            v3[2] = 0;
          }
          v7 = (_BYTE *)(v14 + v15);
          v4 = (v13 >> 1) - v15;
          result = swift_release();
          v3 = v12;
        }
        v17 = __OFSUB__(v4--, 1);
        if (v17)
          break;
        ++v5;
        *v7++ = v8;
        if (v2 == v5)
        {
          result = swift_bridgeObjectRelease();
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
  v4 = 0;
LABEL_24:
  v18 = v3[3];
  if (v18 < 2)
    return (uint64_t)v3;
  v19 = v18 >> 1;
  v17 = __OFSUB__(v19, v4);
  v20 = v19 - v4;
  if (!v17)
  {
    v3[2] = v20;
    return (uint64_t)v3;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_224F548D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[5];

  sub_224F549D0(0, &qword_2557E43F8, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
  v3 = v2;
  v10[3] = v2;
  v10[4] = sub_224F54978();
  v10[0] = a1;
  v4 = __swift_project_boxed_opaque_existential_1(v10, v3);
  v5 = (_BYTE *)(*v4 + 32);
  v6 = &v5[*(_QWORD *)(*v4 + 16)];
  swift_bridgeObjectRetain();
  sub_224F457DC(v5, v6, &v9);
  v7 = v9;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v7;
}

unint64_t sub_224F54978()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E4400;
  if (!qword_2557E4400)
  {
    sub_224F549D0(255, &qword_2557E43F8, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
    result = MEMORY[0x22768ED24](MEMORY[0x24BDCFBE0], v1);
    atomic_store(result, (unint64_t *)&qword_2557E4400);
  }
  return result;
}

void sub_224F549D0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x24BEE4260]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_224F54A18(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;

  v2[15] = a1;
  v2[16] = v1;
  v2[17] = type metadata accessor for ModelsR4.ResourceProxy(0);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v4 = (_QWORD *)swift_task_alloc();
  v2[20] = v4;
  *v4 = v2;
  v4[1] = sub_224F54AA4;
  return sub_224F55510(a1);
}

uint64_t sub_224F54AA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 168) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_224F54B34()
{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(void **)(v0 + 168);
  *(_QWORD *)(v0 + 88) = v1;
  v2 = v1;
  sub_224E59364(0, (unint64_t *)&qword_2557E1580);
  if (!swift_dynamicCast())
    goto LABEL_5;
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(unsigned __int8 *)(v0 + 48);
  if (v7 != 7 || v4 | v3 | v5 | v6)
  {
    sub_224F29E50((void *)v3, v4, v5, v6, v7);
LABEL_5:

    if (qword_2557E0128 != -1)
      swift_once();
    v8 = *(void **)(v0 + 168);
    v9 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 128);
    v11 = sub_224F679B8();
    __swift_project_value_buffer(v11, (uint64_t)qword_2557FC958);
    sub_224DDB408(v10, v9, type metadata accessor for ModelsR4.ResourceProxy);
    v12 = v8;
    v13 = v8;
    v14 = sub_224F679AC();
    v15 = sub_224F67ED4();
    v16 = os_log_type_enabled(v14, v15);
    v17 = *(void **)(v0 + 168);
    v18 = *(_QWORD *)(v0 + 152);
    if (v16)
    {
      v19 = *(_QWORD *)(v0 + 144);
      v20 = swift_slowAlloc();
      v35 = swift_slowAlloc();
      v36 = v35;
      *(_DWORD *)v20 = 136315394;
      sub_224DDB408(v18, v19, type metadata accessor for ModelsR4.ResourceProxy);
      v21 = sub_224F67BC8();
      *(_QWORD *)(v0 + 96) = sub_224E76904(v21, v22, &v36);
      sub_224F68000();
      swift_bridgeObjectRelease();
      sub_224DDEAA0(v18, type metadata accessor for ModelsR4.ResourceProxy);
      *(_WORD *)(v20 + 12) = 2080;
      *(_QWORD *)(v0 + 104) = v17;
      v23 = v17;
      v24 = v17;
      sub_224F6848C();
      v25 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v26 = sub_224F67BC8();
      v28 = v27;

      *(_QWORD *)(v0 + 112) = sub_224E76904(v26, v28, &v36);
      sub_224F68000();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_224DAC000, v14, v15, "ModelsR4.ResourceProxy.extractMedicalRecord: failed to extract %s to HKMedicalRecord, returning HKUnknownRecord. Error: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v35, -1, -1);
      MEMORY[0x22768EDE4](v20, -1, -1);
    }
    else
    {
      sub_224DDEAA0(*(_QWORD *)(v0 + 152), type metadata accessor for ModelsR4.ResourceProxy);

    }
    v29 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v29;
    *v29 = v0;
    v29[1] = sub_224F4C890;
    return sub_224F56354(*(_QWORD *)(v0 + 120));
  }

  if (qword_2557E0128 != -1)
    swift_once();
  v31 = sub_224F679B8();
  __swift_project_value_buffer(v31, (uint64_t)qword_2557FC958);
  v32 = sub_224F679AC();
  v33 = sub_224F67EBC();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v34 = 0;
    _os_log_impl(&dword_224DAC000, v32, v33, "ModelsR4.ResourceProxy.extractMedicalRecord: found entered-in-error record, skipping", v34, 2u);
    MEMORY[0x22768EDE4](v34, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

id sub_224F54FA0(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v4 = type metadata accessor for ModelsR4.ResourceProxy(0);
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_224ED9650(a2);
  v7 = sub_224F073F8(v6);
  swift_bridgeObjectRelease();
  v8 = v5;
  v9 = sub_224F5749C();
  v11 = sub_224F56F48(a1, v8, v7, v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v11;
}

uint64_t sub_224F55510(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[27] = a1;
  v2[28] = v1;
  type metadata accessor for ModelsR4.Observation(0);
  v2[29] = swift_task_alloc();
  type metadata accessor for ModelsR4.Immunization(0);
  v2[30] = swift_task_alloc();
  type metadata accessor for ModelsR4.DocumentReference(0);
  v2[31] = swift_task_alloc();
  v2[32] = type metadata accessor for ModelsR4.DiagnosticReport(0);
  v2[33] = swift_task_alloc();
  type metadata accessor for ModelsR4.Condition(0);
  v2[34] = swift_task_alloc();
  v2[35] = type metadata accessor for ModelsR4.ResourceProxy(0);
  v2[36] = swift_task_alloc();
  return swift_task_switch();
}

void sub_224F55610()
{
  uint64_t v0;
  char *v1;

  sub_224DDB408(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 288), type metadata accessor for ModelsR4.ResourceProxy);
  v1 = (char *)sub_224F5566C + 4 * byte_224F76340[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_224F5566C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  __asm { BR              X1 }
}

uint64_t sub_224F55914()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = (uint64_t *)v0[36];
  v2 = *v1;
  v3 = v1[1];
  v0[52] = v3;
  v4 = v1[2];
  v5 = v1[3];
  v0[53] = v5;
  v7 = v1[4];
  v6 = v1[5];
  v0[54] = v6;
  v0[21] = v2;
  v0[22] = v3;
  v0[23] = v4;
  v0[24] = v5;
  v0[25] = v7;
  v0[26] = v6;
  v8 = (_QWORD *)swift_task_alloc();
  v0[55] = v8;
  *v8 = v0;
  v8[1] = sub_224F55F90;
  return sub_224E7B1EC(v0[27]);
}

uint64_t sub_224F559F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 304) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 312) = a1;
  return swift_task_switch();
}

uint64_t sub_224F55A68()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 312);
  sub_224DDEAA0(*(_QWORD *)(v0 + 272), type metadata accessor for ModelsR4.Condition);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_224F55AF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
    *(_QWORD *)(v4 + 336) = v1;
  else
    *(_QWORD *)(v4 + 328) = a1;
  return swift_task_switch();
}

uint64_t sub_224F55B6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 328);
  sub_224DDEAA0(*(_QWORD *)(v0 + 264), type metadata accessor for ModelsR4.DiagnosticReport);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_224F55BFC()
{
  uint64_t v0;

  sub_224DDEAA0(*(_QWORD *)(v0 + 264), type metadata accessor for ModelsR4.DiagnosticReport);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F55C84(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 352) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 360) = a1;
  return swift_task_switch();
}

uint64_t sub_224F55CF8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 360);
  sub_224DDEAA0(*(_QWORD *)(v0 + 248), type metadata accessor for ModelsR4.DocumentReference);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_224F55D88(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 376) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 384) = a1;
  return swift_task_switch();
}

uint64_t sub_224F55DFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 384);
  sub_224DDEAA0(*(_QWORD *)(v0 + 240), type metadata accessor for ModelsR4.Immunization);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_224F55E8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 400) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 408) = a1;
  return swift_task_switch();
}

uint64_t sub_224F55F00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 408);
  sub_224DDEAA0(*(_QWORD *)(v0 + 232), type metadata accessor for ModelsR4.Observation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_224F55F90(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 448) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 456) = a1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_224F56020()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 456);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_224F560A0()
{
  uint64_t v0;

  sub_224DDEAA0(*(_QWORD *)(v0 + 272), type metadata accessor for ModelsR4.Condition);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F56128()
{
  uint64_t v0;

  sub_224DDEAA0(*(_QWORD *)(v0 + 248), type metadata accessor for ModelsR4.DocumentReference);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F561B0()
{
  uint64_t v0;

  sub_224DDEAA0(*(_QWORD *)(v0 + 240), type metadata accessor for ModelsR4.Immunization);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F56238()
{
  uint64_t v0;

  sub_224DDEAA0(*(_QWORD *)(v0 + 232), type metadata accessor for ModelsR4.Observation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F562C0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F56354(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[27] = a1;
  v2[28] = v1;
  type metadata accessor for ModelsR4.Observation(0);
  v2[29] = swift_task_alloc();
  type metadata accessor for ModelsR4.Immunization(0);
  v2[30] = swift_task_alloc();
  type metadata accessor for ModelsR4.DocumentReference(0);
  v2[31] = swift_task_alloc();
  type metadata accessor for ModelsR4.DiagnosticReport(0);
  v2[32] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[33] = swift_task_alloc();
  type metadata accessor for ModelsR4.Condition(0);
  v2[34] = swift_task_alloc();
  v2[35] = type metadata accessor for ModelsR4.ResourceProxy(0);
  v2[36] = swift_task_alloc();
  return swift_task_switch();
}

void sub_224F56470()
{
  uint64_t v0;
  char *v1;

  sub_224DDB408(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 288), type metadata accessor for ModelsR4.ResourceProxy);
  v1 = (char *)sub_224F564CC + 4 * byte_224F76349[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_224F564CC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  __asm { BR              X1 }
}

uint64_t sub_224F56838()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = (uint64_t *)v0[36];
  v2 = v0[33];
  v3 = v0[27];
  v4 = *v1;
  v5 = v1[1];
  v0[52] = v5;
  v6 = v1[2];
  v7 = v1[3];
  v0[53] = v7;
  v9 = v1[4];
  v8 = v1[5];
  v0[21] = v4;
  v0[54] = v8;
  v0[22] = v5;
  v0[23] = v6;
  v0[24] = v7;
  v0[25] = v9;
  v0[26] = v8;
  v0[55] = sub_224E7BB60();
  sub_224DDB408(v3, v2, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v10 = (_QWORD *)swift_task_alloc();
  v0[56] = v10;
  *v10 = v0;
  v10[1] = sub_224F56E2C;
  return sub_224E7B038();
}

uint64_t sub_224F568D0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 312) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F5692C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = sub_224F214B0(*(_QWORD *)(v0 + 264), (uint64_t)v1);

  sub_224DDEAA0(v2, type metadata accessor for ModelsR4.Condition);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

uint64_t sub_224F569E0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 336) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F56A3C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = sub_224F214B0(*(_QWORD *)(v0 + 264), (uint64_t)v1);

  sub_224DDEAA0(v2, type metadata accessor for ModelsR4.DiagnosticReport);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

uint64_t sub_224F56AF0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 360) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F56B4C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = sub_224F214B0(*(_QWORD *)(v0 + 264), (uint64_t)v1);

  sub_224DDEAA0(v2, type metadata accessor for ModelsR4.DocumentReference);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

uint64_t sub_224F56C04(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 384) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F56C60()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = sub_224F214B0(*(_QWORD *)(v0 + 264), (uint64_t)v1);

  sub_224DDEAA0(v2, type metadata accessor for ModelsR4.Immunization);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

uint64_t sub_224F56D18(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 408) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F56D74()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = sub_224F214B0(*(_QWORD *)(v0 + 264), (uint64_t)v1);

  sub_224DDEAA0(v2, type metadata accessor for ModelsR4.Observation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

uint64_t sub_224F56E2C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 456) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F56E88()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 456);
  v2 = sub_224F214B0(*(_QWORD *)(v0 + 264), (uint64_t)v1);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v2);
}

id sub_224F56F48(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t (*v25)(_QWORD);
  uint64_t (*v26)(uint64_t);
  id v27;
  uint64_t v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = v5;
  v34 = a5;
  v32 = a3;
  v33 = a4;
  v30 = a1;
  v31 = a2;
  v7 = type metadata accessor for ModelsR4.Observation(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ModelsR4.Immunization(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ModelsR4.DocumentReference(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ModelsR4.DiagnosticReport(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ModelsR4.Condition(0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ModelsR4.ResourceProxy(0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDB408(v6, (uint64_t)v24, v25);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      v26 = type metadata accessor for ModelsR4.Condition;
      sub_224DDEADC((uint64_t)v24, (uint64_t)v21, type metadata accessor for ModelsR4.Condition);
      v27 = sub_224EF2674(v30, v31, v32, v33, v34);
      v28 = (uint64_t)v21;
      goto LABEL_8;
    case 3u:
      v26 = type metadata accessor for ModelsR4.DiagnosticReport;
      sub_224DDEADC((uint64_t)v24, (uint64_t)v18, type metadata accessor for ModelsR4.DiagnosticReport);
      v27 = sub_224EF2674(v30, v31, v32, v33, v34);
      v28 = (uint64_t)v18;
      goto LABEL_8;
    case 4u:
      sub_224DDEADC((uint64_t)v24, (uint64_t)v15, type metadata accessor for ModelsR4.DocumentReference);
      v27 = sub_224EF2674(v30, v31, v32, v33, v34);
      sub_224DDEAA0((uint64_t)v15, type metadata accessor for ModelsR4.DocumentReference);
      return v27;
    case 5u:
      v26 = type metadata accessor for ModelsR4.Immunization;
      sub_224DDEADC((uint64_t)v24, (uint64_t)v12, type metadata accessor for ModelsR4.Immunization);
      v27 = sub_224EF2674(v30, v31, v32, v33, v34);
      v28 = (uint64_t)v12;
      goto LABEL_8;
    case 6u:
      v26 = type metadata accessor for ModelsR4.Observation;
      sub_224DDEADC((uint64_t)v24, (uint64_t)v9, type metadata accessor for ModelsR4.Observation);
      v27 = sub_224EF2674(v30, v31, v32, v33, v34);
      v28 = (uint64_t)v9;
LABEL_8:
      sub_224DDEAA0(v28, v26);
      break;
    default:
      sub_224DDEAA0((uint64_t)v24, type metadata accessor for ModelsR4.ResourceProxy);
      v27 = 0;
      break;
  }
  return v27;
}

uint64_t sub_224F5728C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  _OWORD v19[2];
  uint64_t v20;

  v2 = v1;
  v4 = type metadata accessor for ModelsR4.DocumentReference(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ModelsR4.DiagnosticReport(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ModelsR4.ResourceProxy(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDB408(v2, (uint64_t)v12, v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    sub_224DDEADC((uint64_t)v12, (uint64_t)v6, type metadata accessor for ModelsR4.DocumentReference);
    v15 = sub_224F47BE8(a1);
    v16 = (uint64_t)v6;
    v17 = type metadata accessor for ModelsR4.DocumentReference;
  }
  else if (EnumCaseMultiPayload == 3)
  {
    sub_224DDEADC((uint64_t)v12, (uint64_t)v9, type metadata accessor for ModelsR4.DiagnosticReport);
    v15 = sub_224E75CDC(a1);
    v16 = (uint64_t)v9;
    v17 = type metadata accessor for ModelsR4.DiagnosticReport;
  }
  else
  {
    type metadata accessor for DownloadableAttachmentExtractionResult();
    memset(v19, 0, sizeof(v19));
    v20 = 0;
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = 0;
    sub_224DDEADC((uint64_t)v19, v15 + 24, (uint64_t (*)(_QWORD))sub_224E75E88);
    v17 = type metadata accessor for ModelsR4.ResourceProxy;
    v16 = (uint64_t)v12;
  }
  sub_224DDEAA0(v16, v17);
  return v15;
}

uint64_t sub_224F57448(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_224F53150;
  return sub_224F54A18(a1);
}

uint64_t sub_224F5749C()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v13;
  uint64_t v14;

  v1 = objc_msgSend(v0, sel_primaryConcept);
  v2 = objc_msgSend(v1, sel_localizedPreferredName);

  if (v2)
  {
    v3 = sub_224F67B80();
    v5 = v4;

    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v3 & 0xFFFFFFFFFFFFLL;
    if (v6)
      return v3;
    swift_bridgeObjectRelease();
  }
  v7 = sub_224F575B4();
  v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v9 = v7 & 0xFFFFFFFFFFFFLL;
  if (v9)
    return v7;
  swift_bridgeObjectRelease();
  v7 = sub_224F577C8();
  v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v11 = v7 & 0xFFFFFFFFFFFFLL;
  if (v11)
    return v7;
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v0, sel_fallbackDisplayString);
  v14 = sub_224F67B80();

  return v14;
}

uint64_t sub_224F575B4()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  char v11;
  id v12;
  uint64_t v13;
  id v15;

  v1 = objc_msgSend(v0, sel_medicalRecordCodings);
  sub_224E5451C(0, (unint64_t *)&qword_2557E1648);
  v2 = sub_224F67D6C();

  if (v2 >> 62)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    v3 = sub_224F681D4();
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      v15 = (id)objc_opt_self();
      v4 = 4;
      do
      {
        if ((v2 & 0xC000000000000001) != 0)
          v5 = (id)MEMORY[0x22768E1CC](v4 - 4, v2);
        else
          v5 = *(id *)(v2 + 8 * v4);
        v6 = v5;
        v7 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
        {
          __break(1u);
          goto LABEL_16;
        }
        v8 = objc_msgSend(v5, sel_codingSystem);
        v9 = objc_msgSend(v15, sel_textSystem);
        if (v8)
        {
          sub_224E5451C(0, &qword_2557E27E8);
          v10 = v8;
          v11 = sub_224F67F28();

          if ((v11 & 1) != 0)
          {
            swift_bridgeObjectRelease_n();
            v12 = objc_msgSend(v6, sel_displayString);

            if (!v12)
              return 0;
            v13 = sub_224F67B80();

            return v13;
          }
          v9 = v6;
        }
        else
        {

        }
        ++v4;
      }
      while (v7 != v3);
    }
  }
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t sub_224F577C8()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v1 = objc_msgSend(v0, sel_medicalRecordCodings);
  sub_224E5451C(0, (unint64_t *)&qword_2557E1648);
  v2 = sub_224F67D6C();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease_n();
    return 0;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  v3 = sub_224F681D4();
  if (!v3)
    goto LABEL_17;
LABEL_3:
  v4 = 4;
  while (1)
  {
    if ((v2 & 0xC000000000000001) != 0)
      v5 = (id)MEMORY[0x22768E1CC](v4 - 4, v2);
    else
      v5 = *(id *)(v2 + 8 * v4);
    v6 = v5;
    v7 = v4 - 3;
    if (__OFADD__(v4 - 4, 1))
    {
      __break(1u);
      goto LABEL_16;
    }
    v8 = objc_msgSend(v5, sel_displayString);
    if (v8)
    {
      v9 = v8;
      v10 = sub_224F67B80();
      v12 = v11;

      swift_bridgeObjectRelease();
      v13 = HIBYTE(v12) & 0xF;
      if ((v12 & 0x2000000000000000) == 0)
        v13 = v10 & 0xFFFFFFFFFFFFLL;
      if (v13)
        break;
    }

    ++v4;
    if (v7 == v3)
      goto LABEL_17;
  }
  swift_bridgeObjectRelease_n();
  v14 = objc_msgSend(v6, sel_displayString);

  if (!v14)
    return 0;
  v15 = sub_224F67B80();

  return v15;
}

uint64_t sub_224F57980(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  sub_224DDEA0C(0, &qword_2557E2A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v2[4] = swift_task_alloc();
  v3 = sub_224F677A8();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F57A28()
{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (void *)v0[2];
  v2 = objc_msgSend(v1, sel_medicalRecord);
  v0[9] = v2;
  v3 = objc_msgSend(v1, sel_attachmentIdentifiers);
  v4 = sub_224F67D6C();
  v0[10] = v4;

  v5 = (_QWORD *)swift_task_alloc();
  v0[11] = v5;
  *v5 = v0;
  v5[1] = sub_224F57AD8;
  return sub_224F59374((uint64_t)v2, v4);
}

uint64_t sub_224F57AD8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v3 = (_QWORD *)*v2;
  v3[12] = a1;
  v3[13] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4 = (void *)v3[9];
    swift_bridgeObjectRelease();

  }
  return swift_task_switch();
}

uint64_t sub_224F57B50()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(unint64_t, unint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 96);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_224F681D4();
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(v0 + 96);
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v3 = *(_QWORD *)(v0 + 96);
    if (v2)
    {
LABEL_3:
      v4 = swift_allocObject();
      *(_QWORD *)(v0 + 112) = v4;
      swift_weakInit();
      v5 = swift_task_alloc();
      *(_QWORD *)(v0 + 120) = v5;
      *(_QWORD *)(v5 + 16) = v4;
      *(_QWORD *)(v5 + 24) = v3;
      v6 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 128) = v6;
      *v6 = v0;
      v6[1] = sub_224F57EFC;
      return sub_224F68474();
    }
  }
  if (!(v3 >> 62))
  {
    v9 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_7;
LABEL_21:
    swift_bridgeObjectRelease_n();
    v27 = objc_allocWithZone(MEMORY[0x24BE489E8]);
    v28 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    v29 = objc_msgSend(v27, sel_initWithAttachmentIdentifiers_, v28);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(v0 + 8))(v29);
  }
  swift_bridgeObjectRetain();
  result = sub_224F681D4();
  v9 = result;
  if (!result)
    goto LABEL_21;
LABEL_7:
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = *(_QWORD *)(v0 + 96);
    v12 = *(_QWORD *)(v0 + 48);
    v31 = v11 & 0xC000000000000001;
    v13 = MEMORY[0x24BEE4AF8];
    v30 = v11 + 32;
    v32 = v9;
    do
    {
      if (v31)
        v14 = (id)MEMORY[0x22768E1CC](v10, *(_QWORD *)(v0 + 96));
      else
        v14 = *(id *)(v30 + 8 * v10);
      v15 = v14;
      v17 = *(_QWORD *)(v0 + 32);
      v16 = *(_QWORD *)(v0 + 40);
      v18 = objc_msgSend(v14, sel_uniqueIdentifier, v30);
      sub_224F67B80();

      sub_224F6776C();
      swift_bridgeObjectRelease();

      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v17, 1, v16) == 1)
      {
        sub_224DDB50C(*(_QWORD *)(v0 + 32), &qword_2557E2A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58]);
      }
      else
      {
        v20 = *(_QWORD *)(v0 + 56);
        v19 = *(_QWORD *)(v0 + 64);
        v21 = *(_QWORD *)(v0 + 40);
        v22 = *(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 32);
        v22(v19, *(_QWORD *)(v0 + 32), v21);
        v22(v20, v19, v21);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_224E56EDC(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
        v24 = *(_QWORD *)(v13 + 16);
        v23 = *(_QWORD *)(v13 + 24);
        if (v24 >= v23 >> 1)
          v13 = sub_224E56EDC(v23 > 1, v24 + 1, 1, v13);
        v25 = *(_QWORD *)(v0 + 56);
        v26 = *(_QWORD *)(v0 + 40);
        *(_QWORD *)(v13 + 16) = v24 + 1;
        v22(v13+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v24, v25, v26);
      }
      ++v10;
    }
    while (v32 != v10);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_224F57EFC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_224F57F70()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, unint64_t, uint64_t);
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 96);
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease_n();
    v21 = objc_allocWithZone(MEMORY[0x24BE489E8]);
    v22 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    v23 = objc_msgSend(v21, sel_initWithAttachmentIdentifiers_, v22);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(v0 + 8))(v23);
  }
  swift_bridgeObjectRetain();
  result = sub_224F681D4();
  v2 = result;
  if (!result)
    goto LABEL_17;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 48);
    v25 = v5 & 0xC000000000000001;
    v7 = MEMORY[0x24BEE4AF8];
    v24 = v5 + 32;
    v26 = v2;
    do
    {
      if (v25)
        v8 = (id)MEMORY[0x22768E1CC](v4, *(_QWORD *)(v0 + 96));
      else
        v8 = *(id *)(v24 + 8 * v4);
      v9 = v8;
      v11 = *(_QWORD *)(v0 + 32);
      v10 = *(_QWORD *)(v0 + 40);
      v12 = objc_msgSend(v8, sel_uniqueIdentifier, v24);
      sub_224F67B80();

      sub_224F6776C();
      swift_bridgeObjectRelease();

      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v11, 1, v10) == 1)
      {
        sub_224DDB50C(*(_QWORD *)(v0 + 32), &qword_2557E2A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58]);
      }
      else
      {
        v14 = *(_QWORD *)(v0 + 56);
        v13 = *(_QWORD *)(v0 + 64);
        v15 = *(_QWORD *)(v0 + 40);
        v16 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
        v16(v13, *(_QWORD *)(v0 + 32), v15);
        v16(v14, v13, v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = sub_224E56EDC(0, *(_QWORD *)(v7 + 16) + 1, 1, v7);
        v18 = *(_QWORD *)(v7 + 16);
        v17 = *(_QWORD *)(v7 + 24);
        if (v18 >= v17 >> 1)
          v7 = sub_224E56EDC(v17 > 1, v18 + 1, 1, v7);
        v19 = *(_QWORD *)(v0 + 56);
        v20 = *(_QWORD *)(v0 + 40);
        *(_QWORD *)(v7 + 16) = v18 + 1;
        v16(v7+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v18, v19, v20);
      }
      ++v4;
    }
    while (v26 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_224F58210()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F5827C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F582E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = sub_224F677A8();
  v3[6] = v4;
  v3[7] = *(_QWORD *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F58344()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[5];
  v0[2] = sub_224F5F82C();
  sub_224E54704(0, (unint64_t *)&qword_2557E0888, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_224E79350();
  v2 = sub_224F67B44();
  v4 = v3;
  swift_bridgeObjectRelease();
  v0[9] = v2;
  v0[10] = v4;
  v5 = *(_QWORD *)(v1 + 64);
  v6 = (_QWORD *)swift_task_alloc();
  v0[11] = v6;
  *v6 = v0;
  v6[1] = sub_224F58414;
  return sub_224F5AAE0(v2, v4, v5);
}

uint64_t sub_224F58414(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 104) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F58480()
{
  unint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_224F60B78(v0[12]);
  v0[14] = v1;
  v2 = (_QWORD *)swift_task_alloc();
  v0[15] = (unint64_t)v2;
  *v2 = v0;
  v2[1] = sub_224F584DC;
  return sub_224F5ADD0(v1);
}

uint64_t sub_224F584DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 128) = a1;
  *(_QWORD *)(v3 + 136) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_224F58550()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 128);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_224F681D4();
    swift_bridgeObjectRelease();
    if (v2)
    {
LABEL_3:
      v29 = MEMORY[0x24BEE4AF8];
      result = sub_224E538EC(0, v2 & ~(v2 >> 63), 0);
      if (v2 < 0)
      {
        __break(1u);
        return result;
      }
      v4 = 0;
      v27 = v1 & 0xC000000000000001;
      v28 = *(_QWORD *)(v0 + 56);
      v26 = *(_QWORD *)(v0 + 128) + 32;
      do
      {
        if (v27)
          v5 = (id)MEMORY[0x22768E1CC](v4, *(_QWORD *)(v0 + 128));
        else
          v5 = *(id *)(v26 + 8 * v4);
        v6 = v5;
        v7 = *(_QWORD *)(v0 + 64);
        v8 = *(_QWORD *)(v0 + 48);
        v9 = objc_msgSend(v5, sel_UUID, v26);
        sub_224F67790();

        v10 = sub_224F67778();
        v12 = v11;
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v7, v8);
        v13 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_224E538EC(0, *(_QWORD *)(v29 + 16) + 1, 1);
          v13 = v29;
        }
        v15 = *(_QWORD *)(v13 + 16);
        v14 = *(_QWORD *)(v13 + 24);
        if (v15 >= v14 >> 1)
        {
          sub_224E538EC(v14 > 1, v15 + 1, 1);
          v13 = v29;
        }
        ++v4;
        *(_QWORD *)(v13 + 16) = v15 + 1;
        v16 = (_QWORD *)(v13 + 24 * v15);
        v16[4] = v10;
        v16[5] = v12;
        v16[6] = v6;
      }
      while (v2 != v4);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v13 + 16))
        goto LABEL_14;
      goto LABEL_17;
    }
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
  {
LABEL_14:
    sub_224E72BFC();
    v17 = sub_224F681F8();
    goto LABEL_18;
  }
LABEL_17:
  v17 = MEMORY[0x24BEE4B00];
LABEL_18:
  v18 = *(_QWORD *)(v0 + 136);
  v29 = v17;
  v19 = (_QWORD *)swift_bridgeObjectRetain();
  sub_224F5EFA4(v19, 1, &v29);
  if (v18)
    return swift_unexpectedError();
  v20 = *(_QWORD *)(v0 + 96);
  v22 = *(_QWORD *)(v0 + 72);
  v21 = *(_QWORD *)(v0 + 80);
  v23 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRelease();
  v24 = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v25 = sub_224F60060(v20, v24, v23, v22, v21);
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v25);
}

uint64_t sub_224F58844()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F58884()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F588D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  sub_224F61788(0, &qword_2557E47F0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F61700();
  sub_224F68594();
  v9[15] = 0;
  sub_224F68384();
  if (!v1)
  {
    type metadata accessor for IndexedAnchor(0);
    v9[14] = 1;
    sub_224F67760();
    sub_224DDACD4(&qword_2557E47F8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_224F68378();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_224F58A34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  v19 = a2;
  v21 = sub_224F67760();
  v18 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v20 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F61788(0, &qword_2557E47D8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v22 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - v7;
  v9 = type metadata accessor for IndexedAnchor(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F61700();
  sub_224F6857C();
  if (v2)
  {
    v16 = (uint64_t)a1;
  }
  else
  {
    v17 = a1;
    v12 = v6;
    v14 = v20;
    v13 = v21;
    v24 = 0;
    *v11 = sub_224F682E8();
    v23 = 1;
    sub_224DDACD4(&qword_2557E47E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    sub_224F682DC();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v22);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))((char *)v11 + *(int *)(v9 + 20), v14, v13);
    sub_224F61744((uint64_t)v11, v19);
    v16 = (uint64_t)v17;
  }
  return __swift_destroy_boxed_opaque_existential_1(v16);
}

uint64_t sub_224F58C60()
{
  _BYTE *v0;

  if (*v0)
    return 0x61647055656D6974;
  else
    return 0x6F52726F68636E61;
}

uint64_t sub_224F58CAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224F61988(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224F58CD0()
{
  sub_224F61700();
  return sub_224F685B8();
}

uint64_t sub_224F58CF8()
{
  sub_224F61700();
  return sub_224F685C4();
}

uint64_t sub_224F58D20@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_224F58A34(a1, a2);
}

uint64_t sub_224F58D34(_QWORD *a1)
{
  return sub_224F588D8(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for IndexerError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = sub_224F677A8();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  return a1;
}

uint64_t destroy for IndexerError(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_224F677A8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for IndexerError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_224F677A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for IndexerError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_224F677A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for IndexerError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_224F677A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for IndexerError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_224F677A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexerError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224F58F38();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

void sub_224F58F38()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E4428)
  {
    v0 = sub_224F677A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E4428);
  }
}

uint64_t storeEnumTagSinglePayload for IndexerError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_224F58F38();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a3, v6);
}

uint64_t type metadata accessor for IndexerError(uint64_t a1)
{
  return sub_224DE6BB4(a1, (uint64_t *)&unk_2557E44A0);
}

uint64_t sub_224F58FE4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = sub_224F677A8();
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase();
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t sub_224F59040()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  sub_224DDEA0C(0, &qword_2557E46D0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE63B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v7 - v1;
  v3 = sub_224F67994();
  __swift_allocate_value_buffer(v3, qword_2557FC9A8);
  v4 = __swift_project_value_buffer(v3, (uint64_t)qword_2557FC9A8);
  sub_224F679A0();
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

uint64_t sub_224F59130()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HealthRecordSpotlightSearchResult()
{
  return objc_opt_self();
}

void sub_224F59194()
{
  id v0;
  uint64_t *v1;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3C40]), sel_init);
  type metadata accessor for HealthRecordAttachmentsIndexer();
  swift_allocObject();
  v1 = sub_224F60404(v0);

  qword_2557FC9C0 = (uint64_t)v1;
}

uint64_t sub_224F591F4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *(_QWORD *)(v0 + 48);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v2 = *(void **)(v1 + 16);
  if (v2)
  {
    objc_msgSend(*(id *)(v0 + 16), sel_stopQuery_, *(_QWORD *)(v1 + 16));

  }
  *(_QWORD *)(v1 + 16) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));

  v3 = *(void **)(v0 + 40);
  swift_release();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_224F59294()
{
  sub_224F591F4();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HealthRecordAttachmentsIndexer()
{
  return objc_opt_self();
}

void **initializeBufferWithCopyOfBuffer for HealthRecordAttachmentsIndexer.State(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void **assignWithCopy for HealthRecordAttachmentsIndexer.State(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **assignWithTake for HealthRecordAttachmentsIndexer.State(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for HealthRecordAttachmentsIndexer.State()
{
  return &type metadata for HealthRecordAttachmentsIndexer.State;
}

uint64_t sub_224F59374(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  v3[24] = *v2;
  v4 = sub_224F67994();
  v3[25] = v4;
  v3[26] = *(_QWORD *)(v4 - 8);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  sub_224DDEA0C(0, &qword_2557E2A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v3[29] = swift_task_alloc();
  v5 = sub_224F677A8();
  v3[30] = v5;
  v3[31] = *(_QWORD *)(v5 - 8);
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F59478()
{
  _QWORD *v0;
  void *v1;
  id *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t type;
  uint64_t v34;

  v0[16] = MEMORY[0x24BEE4AF8];
  if (qword_2557E0128 != -1)
    swift_once();
  v2 = (id *)(v0 + 21);
  v1 = (void *)v0[21];
  v3 = sub_224F679B8();
  __swift_project_value_buffer(v3, (uint64_t)qword_2557FC958);
  v4 = v1;
  v5 = sub_224F679AC();
  v6 = sub_224F67EBC();
  if (os_log_type_enabled(v5, v6))
  {
    type = v6;
    v7 = v0[35];
    v30 = v0[31];
    v31 = v0[30];
    v8 = (void *)v0[21];
    v9 = swift_slowAlloc();
    v32 = swift_slowAlloc();
    v34 = v32;
    *(_DWORD *)v9 = 136315906;
    v10 = sub_224F685D0();
    v0[17] = sub_224E76904(v10, v11, &v34);
    sub_224F68000();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    v12 = objc_msgSend(v8, sel_UUID);
    sub_224F67790();

    v13 = sub_224F67778();
    v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v7, v31);
    v0[18] = sub_224E76904(v13, v15, &v34);
    sub_224F68000();
    swift_bridgeObjectRelease();

    *(_WORD *)(v9 + 22) = 2080;
    v16 = objc_msgSend(v8, sel_attachmentObjectIdentifier);
    v17 = sub_224F67B80();
    v19 = v18;

    v0[19] = sub_224E76904(v17, v19, &v34);
    sub_224F68000();
    swift_bridgeObjectRelease();

    *(_WORD *)(v9 + 32) = 2080;
    v20 = objc_msgSend(v8, sel_attachmentSchemaIdentifier);
    v21 = sub_224F67B80();
    v23 = v22;

    v0[20] = sub_224E76904(v21, v23, &v34);
    sub_224F68000();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_224DAC000, v5, type, "[%s] Get attachments for : %s and %s and %s", (uint8_t *)v9, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x22768EDE4](v32, -1, -1);
    MEMORY[0x22768EDE4](v9, -1, -1);
  }
  else
  {
    v24 = *v2;

  }
  v25 = v0[21];
  v26 = *(void **)(v0[23] + 32);
  v0[36] = v26;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_224F5985C;
  v27 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v28 = v0 + 10;
  v28[1] = 0x40000000;
  v28[2] = sub_224F5DBC0;
  v28[3] = &block_descriptor_25;
  v28[4] = v27;
  objc_msgSend(v26, sel_getAttachmentsForObject_completion_, v25, v28);
  return swift_continuation_await();
}

uint64_t sub_224F5985C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 296) = v1;
  if (v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

void sub_224F598C4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, unint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  void (*v31)(void);

  v1 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 304) = v1;
  if (v1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    v29 = sub_224F681D4();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 312) = v29;
    if (v29)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease();
    v25 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(uint64_t))(v0 + 8))(v25);
    return;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  *(_QWORD *)(v0 + 312) = v2;
  if (!v2)
    goto LABEL_19;
LABEL_3:
  v3 = 0;
  *(_QWORD *)(v0 + 320) = *MEMORY[0x24BDD0CD0];
  while (1)
  {
    v4 = *(_QWORD *)(v0 + 304);
    if ((v4 & 0xC000000000000001) != 0)
    {
      v5 = (id)MEMORY[0x22768E1CC](v3);
      goto LABEL_8;
    }
    if (v3 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      break;
    v5 = *(id *)(v4 + 8 * v3 + 32);
LABEL_8:
    *(_QWORD *)(v0 + 328) = v5;
    *(_QWORD *)(v0 + 336) = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    v6 = *(_QWORD *)(v0 + 176);
    if (!v6)
    {
LABEL_21:
      *(_QWORD *)(v0 + 344) = sub_224F67F1C();
      v31 = (void (*)(void))((int)*MEMORY[0x24BDD2200] + MEMORY[0x24BDD2200]);
      v28 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 352) = v28;
      *v28 = v0;
      v28[1] = sub_224F59C10;
      v31();
      return;
    }
    v30 = v5;
    v7 = objc_msgSend(v5, sel_identifier);
    sub_224F67790();

    v8 = *(_QWORD *)(v6 + 16);
    v9 = *(_QWORD *)(v0 + 248);
    if (v8)
    {
      v10 = *(_QWORD *)(v0 + 176)
          + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      swift_bridgeObjectRetain();
      v11 = *(_QWORD *)(v9 + 72);
      v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
      while (1)
      {
        v13 = *(_QWORD *)(v0 + 240);
        v14 = *(_QWORD *)(v0 + 248);
        v15 = *(_QWORD *)(v0 + 232);
        v12(v15, v10, v13);
        v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
        v16(v15, 0, 1, v13);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) == 1)
          break;
        v17 = *(_QWORD *)(v0 + 264);
        v19 = *(_QWORD *)(v0 + 240);
        v18 = *(_QWORD *)(v0 + 248);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 32))(v17, *(_QWORD *)(v0 + 232), v19);
        sub_224DDACD4(&qword_2557E3A10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
        v20 = sub_224F67B50();
        v21 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
        v21(v17, v19);
        if ((v20 & 1) != 0)
        {
          v26 = *(_QWORD *)(v0 + 272);
          v27 = *(_QWORD *)(v0 + 240);
          swift_bridgeObjectRelease();
          v21(v26, v27);
          goto LABEL_21;
        }
        v10 += v11;
        if (!--v8)
          goto LABEL_17;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
LABEL_17:
      v16(*(_QWORD *)(v0 + 232), 1, 1, *(_QWORD *)(v0 + 240));
    }
    v22 = *(_QWORD *)(v0 + 272);
    v24 = *(_QWORD *)(v0 + 240);
    v23 = *(_QWORD *)(v0 + 248);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);

    v3 = *(_QWORD *)(v0 + 336);
    if (v3 == *(_QWORD *)(v0 + 312))
      goto LABEL_19;
  }
  __break(1u);
}

uint64_t sub_224F59C10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[45] = a1;
  v4[46] = a2;
  v4[47] = v2;
  swift_task_dealloc();
  swift_release();
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

void sub_224F59CA4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  void (*v45)(uint64_t, uint64_t);
  void *v46;
  id v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  id v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  void *v88;
  void (*v89)(void);

  v2 = *(_QWORD *)(v0 + 368);
  v1 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 224);
  v5 = objc_msgSend(*(id *)(v0 + 328), sel_contentType);
  sub_224F67934();

  v6 = sub_224F5DC74(v3, v2, v4);
  if (v1)
  {
    v9 = *(_QWORD *)(v0 + 360);
    v8 = *(_QWORD *)(v0 + 368);
    v10 = *(_QWORD *)(v0 + 224);
    v11 = *(_QWORD *)(v0 + 200);
    v12 = *(_QWORD *)(v0 + 208);

    sub_224DDE9B4(v9, v8);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v13 = (unint64_t)v6;
  v14 = v7;
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 208) + 8);
  v15(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 200));
  if (!v14)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    v30 = *(_QWORD *)(v0 + 360);
    v29 = *(_QWORD *)(v0 + 368);
    v31 = *(void **)(v0 + 328);
    v32 = *(_QWORD *)(v0 + 280);
    v33 = *(_QWORD *)(v0 + 240);
    v34 = *(_QWORD *)(v0 + 248);
    swift_bridgeObjectRelease();
    type metadata accessor for IndexerError(0);
    sub_224DDACD4(&qword_2557E46A0, type metadata accessor for IndexerError, (uint64_t)&protocol conformance descriptor for IndexerError);
    swift_allocError();
    v36 = v35;
    v37 = objc_msgSend(v31, sel_identifier);
    sub_224F67790();

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v36, v32, v33);
    swift_willThrow();

    sub_224DDE9B4(v30, v29);
    goto LABEL_14;
  }
  v16 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v16 = v13 & 0xFFFFFFFFFFFFLL;
  if (!v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v17 = *(void **)(v0 + 328);
  v18 = *(_QWORD *)(v0 + 216);
  v19 = *(_QWORD *)(v0 + 200);
  sub_224F67970();
  sub_224F67928();
  v15(v18, v19);
  v20 = objc_allocWithZone(MEMORY[0x24BDC2480]);
  v21 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v20, sel_initWithItemContentType_, v21);

  v23 = objc_msgSend(v17, sel_name);
  v24 = sub_224F67B80();
  v26 = v25;

  swift_bridgeObjectRelease();
  v27 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0)
    v27 = v24 & 0xFFFFFFFFFFFFLL;
  if (v27)
  {
    v28 = objc_msgSend(*(id *)(v0 + 328), sel_name);
    sub_224F67B80();

  }
  else
  {
    sub_224F5749C();
  }
  v85 = *(_QWORD *)(v0 + 320);
  v86 = *(id *)(v0 + 328);
  v38 = *(_QWORD *)(v0 + 280);
  v39 = *(_QWORD *)(v0 + 248);
  v87 = *(_QWORD *)(v0 + 256);
  v40 = *(_QWORD *)(v0 + 240);
  v41 = *(void **)(v0 + 168);
  v42 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_setTitle_, v42);

  v43 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_setDisplayName_, v43);

  v44 = objc_msgSend(v41, sel_UUID);
  sub_224F67790();

  sub_224F67778();
  v45 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  v45(v38, v40);
  v46 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_setRelatedUniqueIdentifier_, v46);

  v47 = objc_msgSend(v41, byte_24ED0FD48);
  sub_224F67790();

  sub_224F67778();
  v45(v38, v40);
  v48 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_setDomainIdentifier_, v48);

  v49 = (void *)sub_224F67B5C();
  objc_msgSend(v22, sel_setBundleID_, v49);

  objc_msgSend(v22, sel_setProtectionClass_, v85);
  v50 = objc_msgSend(v86, sel_identifier);
  sub_224F67790();

  sub_224F67778();
  v45(v38, v40);
  v51 = objc_msgSend(v41, byte_24ED0FD48);
  sub_224F67790();

  sub_224F67778();
  v45(v87, v40);
  v52 = objc_allocWithZone(MEMORY[0x24BDC2478]);
  v53 = v22;
  v54 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v55 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v56 = objc_msgSend(v52, sel_initWithUniqueIdentifier_domainIdentifier_attributeSet_, v54, v55, v53);

  v57 = v56;
  MEMORY[0x22768DE24]();
  if (*(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
LABEL_38:
    sub_224F67D90();
  v59 = *(_QWORD *)(v0 + 360);
  v58 = *(_QWORD *)(v0 + 368);
  v60 = *(void **)(v0 + 328);
  sub_224F67D9C();
  sub_224F67D84();

  sub_224DDE9B4(v59, v58);
  while (1)
  {
    v61 = *(_QWORD *)(v0 + 336);
    if (v61 == *(_QWORD *)(v0 + 312))
    {
      swift_bridgeObjectRelease();
      v81 = *(_QWORD *)(v0 + 128);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      (*(void (**)(uint64_t))(v0 + 8))(v81);
      return;
    }
    v62 = *(_QWORD *)(v0 + 304);
    if ((v62 & 0xC000000000000001) != 0)
    {
      v63 = (id)MEMORY[0x22768E1CC](*(_QWORD *)(v0 + 336));
      goto LABEL_23;
    }
    if (v61 >= *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10))
      break;
    v63 = *(id *)(v62 + 8 * v61 + 32);
LABEL_23:
    *(_QWORD *)(v0 + 328) = v63;
    *(_QWORD *)(v0 + 336) = v61 + 1;
    if (__OFADD__(v61, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    v64 = *(_QWORD *)(v0 + 176);
    if (!v64)
    {
LABEL_36:
      *(_QWORD *)(v0 + 344) = sub_224F67F1C();
      v89 = (void (*)(void))((int)*MEMORY[0x24BDD2200] + MEMORY[0x24BDD2200]);
      v84 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 352) = v84;
      *v84 = v0;
      v84[1] = sub_224F59C10;
      v89();
      return;
    }
    v88 = v63;
    v65 = objc_msgSend(v63, sel_identifier);
    sub_224F67790();

    v66 = *(_QWORD *)(v64 + 16);
    v67 = *(_QWORD *)(v0 + 248);
    if (v66)
    {
      v68 = *(_QWORD *)(v0 + 176)
          + ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80));
      swift_bridgeObjectRetain();
      v69 = *(_QWORD *)(v67 + 72);
      v57 = *(id *)(v67 + 16);
      while (1)
      {
        v70 = *(_QWORD *)(v0 + 240);
        v71 = *(_QWORD *)(v0 + 248);
        v72 = *(_QWORD *)(v0 + 232);
        ((void (*)(uint64_t, unint64_t, uint64_t))v57)(v72, v68, v70);
        v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56);
        v73(v72, 0, 1, v70);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v72, 1, v70) == 1)
          break;
        v74 = *(_QWORD *)(v0 + 264);
        v76 = *(_QWORD *)(v0 + 240);
        v75 = *(_QWORD *)(v0 + 248);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v75 + 32))(v74, *(_QWORD *)(v0 + 232), v76);
        sub_224DDACD4(&qword_2557E3A10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
        v77 = sub_224F67B50();
        v78 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
        v78(v74, v76);
        if ((v77 & 1) != 0)
        {
          v82 = *(_QWORD *)(v0 + 272);
          v83 = *(_QWORD *)(v0 + 240);
          swift_bridgeObjectRelease();
          v78(v82, v83);
          goto LABEL_36;
        }
        v68 += v69;
        if (!--v66)
          goto LABEL_32;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56);
LABEL_32:
      v73(*(_QWORD *)(v0 + 232), 1, 1, *(_QWORD *)(v0 + 240));
    }
    v79 = *(_QWORD *)(v0 + 272);
    v80 = *(_QWORD *)(v0 + 240);
    v53 = *(id *)(v0 + 248);
    swift_bridgeObjectRelease();
    (*((void (**)(uint64_t, uint64_t))v53 + 1))(v79, v80);

  }
  __break(1u);
}

uint64_t sub_224F5A59C()
{
  uint64_t v0;

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F5A62C()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F5A6BC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 184) = v0;
  return swift_task_switch();
}

uint64_t sub_224F5A6D4()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(void **)(v0[23] + 40);
  v0[2] = v0;
  v0[3] = sub_224F5A764;
  v2 = swift_continuation_init();
  v0[18] = MEMORY[0x24BDAC760];
  v3 = v0 + 18;
  v3[1] = 0x40000000;
  v3[2] = sub_224F5A9D8;
  v3[3] = &block_descriptor_40;
  v3[4] = v2;
  objc_msgSend(v1, sel_deleteAllSearchableItemsWithCompletionHandler_, v3);
  return swift_continuation_await();
}

uint64_t sub_224F5A764()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 192) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_224F5A7C4()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(void **)(v0[23] + 24);
  v0[25] = v1;
  v2 = sub_224F67B5C();
  v0[26] = v2;
  v0[10] = v0;
  v0[11] = sub_224F5A88C;
  v3 = swift_continuation_init();
  v0[18] = MEMORY[0x24BDAC760];
  v4 = v0 + 18;
  v4[1] = 0x40000000;
  v4[2] = sub_224F5AA58;
  v4[3] = &block_descriptor_41;
  v4[4] = v3;
  objc_msgSend(v1, sel_setData_forKey_completion_, 0, v2, v4);
  return swift_continuation_await();
}

uint64_t sub_224F5A88C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 216) = *(_QWORD *)(*(_QWORD *)v0 + 112);
  return swift_task_switch();
}

uint64_t sub_224F5A8EC()
{
  uint64_t v0;

  sub_224F67EF8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F5A95C()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F5A998()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 208);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F5A9D8(uint64_t a1, void *a2)
{
  _QWORD *v3;
  id v4;

  if (!a2)
    return swift_continuation_throwingResume();
  sub_224E59364(0, (unint64_t *)&qword_2557E1580);
  swift_allocError();
  *v3 = a2;
  v4 = a2;
  return swift_continuation_throwingResumeWithError();
}

uint64_t sub_224F5AA58(uint64_t a1, int a2, void *a3)
{
  uint64_t result;
  _QWORD *v5;
  id v6;

  if (a2)
    return swift_continuation_throwingResume();
  if (a3)
  {
    sub_224E59364(0, (unint64_t *)&qword_2557E1580);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_224F5AAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  v5 = sub_224F6734C();
  v4[18] = v5;
  v4[19] = *(_QWORD *)(v5 - 8);
  v4[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F5AB44()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(void **)(v1 + 72);
  if (v2)
  {
    v3 = v2;
    if ((objc_msgSend(v3, sel_isCancelled) & 1) == 0)
    {
      v4 = *(void **)(v1 + 72);
      if (v4)
      {
        v5 = v4;
        objc_msgSend(v5, sel_cancel);

      }
      v3 = *(id *)(v1 + 72);
      *(_QWORD *)(v1 + 72) = 0;
    }

  }
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 88) = v9;
  sub_224F6731C();
  sub_224E51E94();
  v10 = sub_224F68024();
  v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_bridgeObjectRelease();
  v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
    swift_weakInit();
    return swift_task_switch();
  }
  else
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
  }
}

uint64_t sub_224F5AC80()
{
  _QWORD *v0;
  uint64_t v1;

  v0[7] = v0 + 13;
  v0[2] = v0;
  v0[3] = sub_224F5ACFC;
  v1 = swift_continuation_init();
  sub_224F606A4(v1);
  return swift_continuation_await();
}

uint64_t sub_224F5ACFC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 168) = v2;
  if (v2)
  {
    swift_willThrow();
    return swift_task_switch();
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 104);
    swift_weakDestroy();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(v4);
  }
}

uint64_t sub_224F5AD90()
{
  uint64_t v0;

  swift_weakDestroy();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F5ADD0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = v1;
  sub_224F60EEC(0, &qword_2557E4678, MEMORY[0x24BDD2220]);
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F5AE40()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  _QWORD *v6;

  v1 = (void *)objc_opt_self();
  v2 = swift_bridgeObjectRetain();
  sub_224F1D524(v2);
  swift_bridgeObjectRelease();
  sub_224F677A8();
  sub_224DDACD4(&qword_2557E3A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v3 = (void *)sub_224F67E80();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v1, sel_predicateForObjectsWithUUIDs_, v3);
  *(_QWORD *)(v0 + 64) = v4;

  v5 = v4;
  sub_224F5F698((uint64_t)&unk_24ECFE390);

  sub_224E5451C(0, &qword_2557E1530);
  sub_224F67ACC();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = sub_224F5AFB0;
  return sub_224F67AD8();
}

uint64_t sub_224F5AFB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 80) = a1;
  *(_QWORD *)(v3 + 88) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F5B01C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t i;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 80);
  v10 = MEMORY[0x24BEE4AF8];
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease();
    v7 = *(_QWORD *)(v0 + 56);
    v8 = *(_QWORD *)(v0 + 40);
    v9 = *(_QWORD *)(v0 + 48);

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
  }
  swift_bridgeObjectRetain();
  result = sub_224F681D4();
  v2 = result;
  if (!result)
    goto LABEL_19;
LABEL_3:
  if (v2 >= 1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        MEMORY[0x22768E1CC](i, *(_QWORD *)(v0 + 80));
        objc_opt_self();
        if (swift_dynamicCastObjCClass())
        {
          MEMORY[0x22768DE24]();
          if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_224F67D90();
          sub_224F67D9C();
          sub_224F67D84();
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
    }
    else
    {
      v5 = (void **)(*(_QWORD *)(v0 + 80) + 32);
      do
      {
        v6 = *v5;
        objc_opt_self();
        if (swift_dynamicCastObjCClass())
        {
          MEMORY[0x22768DE24](v6);
          if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_224F67D90();
          sub_224F67D9C();
          sub_224F67D84();
        }
        ++v5;
        --v2;
      }
      while (v2);
    }
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_224F5B234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_224F5B28C(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;

  v56 = a3;
  v57 = a4;
  sub_224DDEA0C(0, &qword_2557E2A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v52 - v10;
  v59 = sub_224F677A8();
  v12 = *(_QWORD *)(v59 - 8);
  v13 = MEMORY[0x24BDAC7A8](v59);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v58 = (char *)&v52 - v16;
  v17 = *a1;
  v18 = objc_msgSend(v17, sel_attributeSet);
  v19 = objc_msgSend(v18, sel_title);
  if (v19)
  {
    v20 = v19;
    v55 = v12;
    v60 = a5;
    v52 = sub_224F67B80();
    v22 = v21;

    v23 = objc_msgSend(v18, sel_domainIdentifier);
    if (!v23)
    {
      swift_bridgeObjectRelease();

      v34 = 0;
      a5 = v60;
      goto LABEL_27;
    }
    v24 = v23;
    v53 = v22;
    v54 = v5;
    v25 = sub_224F67B80();
    v27 = v26;

    if (!*(_QWORD *)(a2 + 16) || (v28 = sub_224E533E8(v25, v27), (v29 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_9;
    }
    v30 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v28);
    swift_bridgeObjectRelease();
    v31 = objc_msgSend(v17, sel_uniqueIdentifier);
    sub_224F67B80();

    sub_224F6776C();
    swift_bridgeObjectRelease();
    v32 = v55;
    v33 = v59;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v11, 1, v59) == 1)
    {
      swift_bridgeObjectRelease();

      sub_224DDB50C((uint64_t)v11, &qword_2557E2A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58]);
LABEL_9:
      v34 = 0;
      a5 = v60;
      goto LABEL_27;
    }
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v58, v11, v33);
    v35 = objc_msgSend(v18, sel_displayName);
    a5 = v60;
    if (v35)
    {
      v36 = v35;
      v37 = sub_224F67B80();
      v39 = v38;

    }
    else
    {
      v37 = 0;
      v39 = 0;
    }
    v40 = sub_224F5FBB4(v37, v39);
    v42 = v41;
    v44 = v43;
    swift_bridgeObjectRelease();
    if (v42)
      v45 = v44 == 0;
    else
      v45 = 1;
    if (v45)
      v46 = MEMORY[0x24BEE4AF8];
    else
      v46 = v44;
    if (v45)
      v47 = 0;
    else
      v47 = v40;
    v56 = v47;
    v57 = v46;
    if (v45)
      v48 = 0;
    else
      v48 = v42;
    sub_224E5451C(0, (unint64_t *)&qword_2557E31B0);
    v49 = v55;
    v50 = v58;
    v51 = v59;
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v15, v58, v59);
    v34 = sub_224F5FF40(v52, v53, (uint64_t)v30, (uint64_t)v15, v56, v48);

    (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v51);
  }
  else
  {

    v34 = 0;
  }
LABEL_27:
  *a5 = v34;
}

uint64_t sub_224F5B624()
{
  unint64_t v0;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  sub_224F18E80(v0);
  return swift_endAccess();
}

uint64_t sub_224F5B674(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_224E5451C(0, &qword_2557E3A28);
  v2 = sub_224F67D6C();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224F5B6E0(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  id v6;

  if (a1)
  {
    sub_224E59364(0, (unint64_t *)&qword_2557E1580);
    swift_allocError();
    *v5 = a1;
    v6 = a1;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    swift_beginAccess();
    **(_QWORD **)(*(_QWORD *)(a2 + 64) + 40) = *(_QWORD *)(a3 + 16);
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResume();
  }
}

void sub_224F5B7A0(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t sub_224F5B7F4()
{
  uint64_t v0;
  _QWORD *v1;

  v1[2] = v0;
  v1[3] = type metadata accessor for IndexedAnchor(0);
  v1[4] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F5B850()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = sub_224F67F04();
  v3 = v2;
  if (v2 >> 60 == 15)
  {
    v4 = 0;
  }
  else
  {
    v5 = v1;
    sub_224F67298();
    swift_allocObject();
    sub_224F6728C();
    sub_224DDACD4(&qword_2557E4718, type metadata accessor for IndexedAnchor, (uint64_t)&unk_224F764EC);
    sub_224F67280();
    v6 = *(_QWORD **)(v0 + 32);
    swift_release();
    v4 = objc_msgSend((id)objc_opt_self(), sel_anchorFromValue_, *v6);
    sub_224E58810(v5, v3);
    sub_224DDEAA0((uint64_t)v6, type metadata accessor for IndexedAnchor);
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v4);
}

void sub_224F5B9E0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;

  sub_224DDEA0C(0, &qword_2557E3168, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - v7;
  if (a3)
  {
    v9 = a3;
    if (qword_2557E0128 != -1)
      swift_once();
    v10 = sub_224F679B8();
    __swift_project_value_buffer(v10, (uint64_t)qword_2557FC958);
    v11 = a3;
    v12 = a3;
    v28 = sub_224F679AC();
    v13 = sub_224F67ED4();
    if (os_log_type_enabled(v28, v13))
    {
      v14 = swift_slowAlloc();
      v15 = swift_slowAlloc();
      v30 = v15;
      *(_DWORD *)v14 = 136315394;
      v16 = sub_224F685D0();
      v29 = sub_224E76904(v16, v17, &v30);
      sub_224F68000();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      v29 = (uint64_t)a3;
      v18 = a3;
      v19 = a3;
      sub_224E59364(0, (unint64_t *)&qword_2557E1580);
      sub_224F6848C();
      v20 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v21 = sub_224F67BC8();
      v23 = v22;

      v29 = sub_224E76904(v21, v23, &v30);
      sub_224F68000();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_224DAC000, v28, v13, "[%s] Failed to update or insert searchable items: %s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v15, -1, -1);
      MEMORY[0x22768EDE4](v14, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v24 = sub_224F67E20();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 1, 1, v24);
    v25 = swift_allocObject();
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    v26 = (_QWORD *)swift_allocObject();
    v26[2] = 0;
    v26[3] = 0;
    v26[4] = v25;
    v26[5] = a1;
    v26[6] = a2;
    v27 = a2;
    swift_bridgeObjectRetain();
    sub_224F5C808((uint64_t)v8, (uint64_t)&unk_2557E4728, (uint64_t)v26);
    swift_release();
  }
}

uint64_t sub_224F5BDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  return swift_task_switch();
}

uint64_t sub_224F5BDC8()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 88) = Strong;
  if (Strong)
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v2;
    *v2 = v0;
    v2[1] = sub_224F5BEC0;
    return sub_224F5C098(*(_QWORD *)(v0 + 72));
  }
  else
  {
    swift_beginAccess();
    v4 = swift_weakLoadStrong();
    *(_QWORD *)(v0 + 112) = v4;
    if (v4)
    {
      v5 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 120) = v5;
      *v5 = v0;
      v5[1] = sub_224F5BFBC;
      return sub_224F5C484(*(_QWORD *)(v0 + 80));
    }
    else
    {
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_224F5BEC0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_224F5BF2C()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 112) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v2;
  *v2 = v0;
  v2[1] = sub_224F5BFBC;
  return sub_224F5C484(*(_QWORD *)(v0 + 80));
}

uint64_t sub_224F5BFBC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 128) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_224F5C030()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F5C064()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F5C098(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[15] = a1;
  v2[16] = v1;
  v3 = sub_224F677A8();
  v2[17] = v3;
  v2[18] = *(_QWORD *)(v3 - 8);
  v2[19] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F5C0F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;

  v23 = *(_QWORD *)(v0 + 120);
  if (!v23)
    goto LABEL_18;
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = sub_224F681D4();
    swift_bridgeObjectRelease();
    if (v18)
    {
      swift_bridgeObjectRetain();
      v1 = sub_224F681D4();
      swift_bridgeObjectRelease();
      if (!v1)
      {
LABEL_17:
        v19 = *(void **)(*(_QWORD *)(v0 + 128) + 40);
        v20 = sub_224F67D60();
        *(_QWORD *)(v0 + 160) = v20;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 16) = v0;
        *(_QWORD *)(v0 + 24) = sub_224F5C39C;
        v21 = swift_continuation_init();
        *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
        v22 = (_QWORD *)(v0 + 80);
        v22[1] = 0x40000000;
        v22[2] = sub_224F5A9D8;
        v22[3] = &block_descriptor_66;
        v22[4] = v21;
        objc_msgSend(v19, sel_deleteSearchableItemsWithDomainIdentifiers_completionHandler_, v20, v22);
        return swift_continuation_await();
      }
      goto LABEL_4;
    }
LABEL_18:
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v1 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v1)
    goto LABEL_18;
LABEL_4:
  v24 = MEMORY[0x24BEE4AF8];
  result = sub_224E53720(0, v1 & ~(v1 >> 63), 0);
  if ((v1 & 0x8000000000000000) == 0)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 120) & 0xC000000000000001;
    do
    {
      if (v5)
        v6 = (id)MEMORY[0x22768E1CC](v3, v23);
      else
        v6 = *(id *)(v23 + 8 * v3 + 32);
      v7 = v6;
      v8 = *(_QWORD *)(v0 + 152);
      v9 = *(_QWORD *)(v0 + 136);
      v10 = objc_msgSend(v6, sel_UUID);
      sub_224F67790();

      v11 = sub_224F67778();
      v13 = v12;
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v9);

      v14 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_224E53720(0, *(_QWORD *)(v24 + 16) + 1, 1);
        v14 = v24;
      }
      v16 = *(_QWORD *)(v14 + 16);
      v15 = *(_QWORD *)(v14 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_224E53720(v15 > 1, v16 + 1, 1);
        v14 = v24;
      }
      ++v3;
      *(_QWORD *)(v14 + 16) = v16 + 1;
      v17 = v14 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v11;
      *(_QWORD *)(v17 + 40) = v13;
    }
    while (v1 != v3);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_224F5C39C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 168) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_224F5C3FC()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F5C438()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 160);
  swift_willThrow();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F5C484(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[15] = a1;
  v2[16] = v1;
  v2[17] = type metadata accessor for IndexedAnchor(0);
  v2[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F5C4E0()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(void **)(v0 + 120);
  if (v1)
  {
    v2 = *(_QWORD **)(v0 + 144);
    *v2 = objc_msgSend(v1, sel__rowid);
    sub_224F67754();
    sub_224F672EC();
    swift_allocObject();
    sub_224F672E0();
    sub_224DDACD4(qword_2557E4740, type metadata accessor for IndexedAnchor, (uint64_t)&unk_224F764C4);
    *(_QWORD *)(v0 + 152) = sub_224F672D4();
    *(_QWORD *)(v0 + 160) = v3;
    v4 = *(_QWORD *)(v0 + 128);
    swift_release();
    v5 = *(void **)(v4 + 24);
    v6 = sub_224F67640();
    *(_QWORD *)(v0 + 168) = v6;
    v7 = sub_224F67B5C();
    *(_QWORD *)(v0 + 176) = v7;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_224F5C6B4;
    v8 = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
    v9 = (_QWORD *)(v0 + 80);
    v9[1] = 0x40000000;
    v9[2] = sub_224F5AA58;
    v9[3] = &block_descriptor_65;
    v9[4] = v8;
    objc_msgSend(v5, sel_setData_forKey_completion_, v6, v7, v9);
    return swift_continuation_await();
  }
  else
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_224F5C6B4()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 184) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_224F5C714()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *(void **)(v0 + 168);
  v1 = *(void **)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(void **)(v0 + 120);
  sub_224DDE9B4(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));

  sub_224DDEAA0(v3, type metadata accessor for IndexedAnchor);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F5C780()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = *(void **)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(void **)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v6 = *(void **)(v0 + 120);
  swift_willThrow();
  sub_224DDE9B4(v4, v2);

  sub_224DDEAA0(v5, type metadata accessor for IndexedAnchor);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F5C808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_224F67E20();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_224F67E14();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_224DDB50C(a1, &qword_2557E3168, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990]);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_224F67DCC();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_224F5C944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[23] = a6;
  v7[24] = a7;
  v7[21] = a4;
  v7[22] = a5;
  sub_224F60EEC(0, (unint64_t *)&qword_2557E1528, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDD2120]);
  v7[25] = v8;
  v7[26] = *(_QWORD *)(v8 - 8);
  v7[27] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F5C9B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v22 = MEMORY[0x24BEE4AF8];
  sub_224F6818C();
  v4 = objc_msgSend((id)objc_opt_self(), sel_clinicalNoteRecordType);
  sub_224E5451C(0, &qword_2557E1530);
  sub_224F67AB4();

  v5 = (void *)sub_224F67AA8();
  v6 = (void *)sub_224F67A9C();
  objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E98]), sel_initWithSampleType_predicate_, v5, v6);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_224F68174();
  sub_224F68198();
  sub_224F681A4();
  sub_224F68180();
  *(_QWORD *)(v0 + 224) = v22;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 232) = Strong;
  if (Strong)
  {
    v8 = Strong;
    *(_QWORD *)(v0 + 240) = *(_QWORD *)(Strong + 24);
    v9 = sub_224F67F10();
    if ((v10 & 1) == 0 && v9 != 1)
    {
      v11 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 248) = v11;
      *v11 = v0;
      v11[1] = sub_224F5CDC4;
      v11[23] = v8;
      return swift_task_switch();
    }
    sub_224F67EF8();
    swift_release();
  }
  swift_beginAccess();
  v13 = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 272) = v13;
  if (v13)
  {
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 280) = v14;
    *v14 = v0;
    v14[1] = sub_224F5D35C;
    return sub_224F5B7F4();
  }
  else
  {
    swift_beginAccess();
    v15 = swift_weakLoadStrong();
    v16 = *(_QWORD *)(v0 + 224);
    if (v15)
    {
      v17 = *(os_unfair_lock_s **)(v15 + 48);
      swift_retain();
      v21 = *(_OWORD *)(v0 + 176);
      swift_release();
      v18 = swift_allocObject();
      swift_beginAccess();
      swift_weakLoadStrong();
      swift_weakInit();
      swift_release();
      v19 = swift_task_alloc();
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = v16;
      *(_QWORD *)(v19 + 32) = 0;
      *(_OWORD *)(v19 + 40) = v21;
      v20 = swift_task_alloc();
      *(_QWORD *)(v20 + 16) = sub_224F61298;
      *(_QWORD *)(v20 + 24) = v19;
      os_unfair_lock_lock(v17 + 6);
      (*(void (**)(os_unfair_lock_s *))(v20 + 16))(v17 + 4);
      os_unfair_lock_unlock(v17 + 6);
      swift_release();
      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
    }
    else
    {
      swift_release();
    }
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_224F5CDC4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc();
  if (v0)
  {
    *(_QWORD *)(v2 + 264) = v0;
    swift_release();
    swift_release();
  }
  return swift_task_switch();
}

uint64_t sub_224F5CE3C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;

  v1 = *(void **)(v0 + 264);
  if (qword_2557E0128 != -1)
    swift_once();
  v2 = sub_224F679B8();
  __swift_project_value_buffer(v2, (uint64_t)qword_2557FC958);
  v3 = v1;
  v4 = v1;
  v5 = sub_224F679AC();
  v6 = sub_224F67ED4();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v18 = v8;
    *(_DWORD *)v7 = 136315394;
    v9 = sub_224F685D0();
    *(_QWORD *)(v0 + 152) = sub_224E76904(v9, v10, &v18);
    sub_224F68000();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    *(_QWORD *)(v0 + 144) = v1;
    v11 = v1;
    v12 = v1;
    sub_224E59364(0, (unint64_t *)&qword_2557E1580);
    sub_224F6848C();
    v13 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_224F68078();
    swift_unknownObjectRelease();
    v14 = sub_224F67BC8();
    v16 = v15;

    *(_QWORD *)(v0 + 160) = sub_224E76904(v14, v16, &v18);
    sub_224F68000();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_224DAC000, v5, v6, "[%s] Failed to observe for new records for indexing: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22768EDE4](v8, -1, -1);
    MEMORY[0x22768EDE4](v7, -1, -1);

  }
  else
  {

  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F5D0E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 256);
  sub_224F67EF8();
  if (v1)
  {
    *(_QWORD *)(v0 + 264) = v1;
    swift_release();
    swift_release();
    return swift_task_switch();
  }
  else
  {
    swift_release();
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    *(_QWORD *)(v0 + 272) = Strong;
    if (Strong)
    {
      v4 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 280) = v4;
      *v4 = v0;
      v4[1] = sub_224F5D35C;
      return sub_224F5B7F4();
    }
    else
    {
      swift_beginAccess();
      v5 = swift_weakLoadStrong();
      v6 = *(_QWORD *)(v0 + 224);
      if (v5)
      {
        v7 = *(os_unfair_lock_s **)(v5 + 48);
        swift_retain();
        v11 = *(_OWORD *)(v0 + 176);
        swift_release();
        v8 = swift_allocObject();
        swift_beginAccess();
        swift_weakLoadStrong();
        swift_weakInit();
        swift_release();
        v9 = swift_task_alloc();
        *(_QWORD *)(v9 + 16) = v8;
        *(_QWORD *)(v9 + 24) = v6;
        *(_QWORD *)(v9 + 32) = 0;
        *(_OWORD *)(v9 + 40) = v11;
        v10 = swift_task_alloc();
        *(_QWORD *)(v10 + 16) = sub_224F61298;
        *(_QWORD *)(v10 + 24) = v9;
        os_unfair_lock_lock(v7 + 6);
        (*(void (**)(os_unfair_lock_s *))(v10 + 16))(v7 + 4);
        os_unfair_lock_unlock(v7 + 6);
        swift_release();
        swift_release();
        swift_release();
        swift_task_dealloc();
        swift_task_dealloc();
      }
      else
      {
        swift_release();
      }
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_224F5D35C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 288) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
    swift_release();
  else
    *(_QWORD *)(v4 + 296) = a1;
  return swift_task_switch();
}

uint64_t sub_224F5D3E8()
{
  uint64_t v0;
  void *v1;
  uint64_t Strong;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  v1 = *(void **)(v0 + 296);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v3 = *(_QWORD *)(v0 + 224);
    v4 = *(os_unfair_lock_s **)(Strong + 48);
    swift_retain();
    v9 = *(_OWORD *)(v0 + 176);
    swift_release();
    v5 = swift_allocObject();
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    v6 = swift_task_alloc();
    *(_QWORD *)(v6 + 16) = v5;
    *(_QWORD *)(v6 + 24) = v3;
    *(_QWORD *)(v6 + 32) = v1;
    *(_OWORD *)(v6 + 40) = v9;
    v7 = swift_task_alloc();
    *(_QWORD *)(v7 + 16) = sub_224F61298;
    *(_QWORD *)(v7 + 24) = v6;
    os_unfair_lock_lock(v4 + 6);
    (*(void (**)(os_unfair_lock_s *))(v7 + 16))(v4 + 4);
    os_unfair_lock_unlock(v4 + 6);
    swift_release();
    swift_release();
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
  }
  else
  {
    swift_release();

  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F5D578()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;

  v1 = *(void **)(v0 + 288);
  if (qword_2557E0128 != -1)
    swift_once();
  v2 = sub_224F679B8();
  __swift_project_value_buffer(v2, (uint64_t)qword_2557FC958);
  v3 = v1;
  v4 = v1;
  v5 = sub_224F679AC();
  v6 = sub_224F67ED4();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v18 = v8;
    *(_DWORD *)v7 = 136315394;
    v9 = sub_224F685D0();
    *(_QWORD *)(v0 + 152) = sub_224E76904(v9, v10, &v18);
    sub_224F68000();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    *(_QWORD *)(v0 + 144) = v1;
    v11 = v1;
    v12 = v1;
    sub_224E59364(0, (unint64_t *)&qword_2557E1580);
    sub_224F6848C();
    v13 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_224F68078();
    swift_unknownObjectRelease();
    v14 = sub_224F67BC8();
    v16 = v15;

    *(_QWORD *)(v0 + 160) = sub_224E76904(v14, v16, &v18);
    sub_224F68000();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_224DAC000, v5, v6, "[%s] Failed to observe for new records for indexing: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22768EDE4](v8, -1, -1);
    MEMORY[0x22768EDE4](v7, -1, -1);

  }
  else
  {

  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_224F5D824(id *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v10;
  uint64_t Strong;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t aBlock;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, void *, uint64_t, uint64_t, void *, void *);
  void *v29;
  uint64_t (*v30)();
  uint64_t v31;

  v10 = *a1;
  if (*a1)
  {
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v12 = *(void **)(Strong + 16);
      v13 = v10;
      v14 = v12;
      swift_release();
      objc_msgSend(v14, sel_stopQuery_, v13);

    }
    *a1 = 0;
  }
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a5;
  *(_QWORD *)(v15 + 24) = a6;
  v16 = objc_allocWithZone(MEMORY[0x24BDD3920]);
  sub_224E5451C(0, &qword_2557E4708);
  swift_bridgeObjectRetain();
  swift_retain();
  v17 = a4;
  v18 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v30 = sub_224F612CC;
  v31 = v15;
  v19 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v27 = 1107296256;
  v28 = sub_224F5DAC0;
  v29 = &block_descriptor_48;
  v20 = _Block_copy(&aBlock);
  v21 = objc_msgSend(v16, sel_initWithQueryDescriptors_anchor_limit_resultsHandler_, v18, v17, 0, v20);

  _Block_release(v20);
  swift_release();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = a5;
  *(_QWORD *)(v22 + 24) = a6;
  v30 = sub_224F612CC;
  v31 = v22;
  aBlock = v19;
  v27 = 1107296256;
  v28 = sub_224F5DAC0;
  v29 = &block_descriptor_54;
  v23 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v21, sel_setUpdateHandler_, v23);
  _Block_release(v23);
  swift_beginAccess();
  v24 = swift_weakLoadStrong();
  if (v24)
  {
    v25 = *(id *)(v24 + 16);
    swift_release();
    objc_msgSend(v25, sel_executeQuery_, v21);

  }
  *a1 = v21;
}

uint64_t sub_224F5DAC0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v9;
  void (*v11)(id, uint64_t, uint64_t, void *, void *);
  id v12;
  id v13;
  id v14;

  v9 = a3;
  v11 = *(void (**)(id, uint64_t, uint64_t, void *, void *))(a1 + 32);
  if (a3)
  {
    sub_224E5451C(0, &qword_2557E1530);
    v9 = sub_224F67D6C();
  }
  if (a4)
  {
    sub_224E5451C(0, &qword_2557E4710);
    a4 = sub_224F67D6C();
  }
  swift_retain();
  v12 = a2;
  v13 = a5;
  v14 = a6;
  v11(v12, v9, a4, a5, a6);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224F5DBC0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    sub_224E59364(0, (unint64_t *)&qword_2557E1580);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    sub_224E5451C(0, &qword_2557E46D8);
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = sub_224F67D6C();
    return swift_continuation_throwingResume();
  }
}

id sub_224F5DC74(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, unint64_t);
  void (*v16)(char *, unint64_t);
  char v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  char v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  uint64_t v52;
  id v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  uint64_t v68;
  char v69;
  void *v70;
  void *v71;
  id v72;
  char v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *inited;
  id v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;
  unint64_t v83;
  id v84;
  id v85;
  id v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90[3];
  uint64_t v91;
  __int128 v92;
  id v93[14];

  v91 = a1;
  v93[12] = *(id *)MEMORY[0x24BDAC8D0];
  v90[1] = *v3;
  v6 = sub_224F67BBC();
  MEMORY[0x24BDAC7A8](v6);
  v7 = sub_224F67994();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE63B8];
  v9 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v90 - v13;
  v15 = *(void (**)(char *, uint64_t, unint64_t))(v9 + 16);
  v15((char *)v90 - v13, a3, v7);
  sub_224F67988();
  sub_224DDACD4(&qword_2557E46A8, v8, MEMORY[0x24BEE63E8]);
  LOBYTE(v8) = sub_224F67B50();
  v16 = *(void (**)(char *, unint64_t))(v9 + 8);
  v16(v12, v7);
  if ((v8 & 1) != 0)
  {
    v16(v14, v7);
    __asm { BR              X10 }
  }
  v90[0] = a2;
  sub_224F67940();
  v17 = sub_224F67B50();
  v16(v12, v7);
  if ((v17 & 1) != 0)
  {
    v16(v14, v7);
    v18 = objc_allocWithZone(MEMORY[0x24BDE30E8]);
    v19 = v91;
    v20 = v90[0];
    sub_224DDE970(v91, v90[0]);
    v21 = (void *)sub_224F67640();
    v22 = objc_msgSend(v18, sel_initWithData_, v21);
    sub_224DDE9B4(v19, v20);

    if (v22)
    {
      v23 = objc_msgSend(v22, sel_string);
      if (v23)
      {
        v24 = v23;
        v25 = (id)sub_224F67B80();

        return v25;
      }

      return 0;
    }
    return 0;
  }
  sub_224F6794C();
  v26 = sub_224F67B50();
  v16(v12, v7);
  if ((v26 & 1) != 0 || (sub_224F6797C(), v27 = sub_224F67B50(), v16(v12, v7), (v27 & 1) != 0))
  {
    v16(v14, v7);
    v28 = v91;
    v29 = v90[0];
    sub_224DDE970(v91, v90[0]);
    sub_224E5239C(MEMORY[0x24BEE4AF8]);
    v30 = objc_allocWithZone(MEMORY[0x24BDF9C28]);
    v31 = (void *)sub_224F67640();
    type metadata accessor for VNImageOption(0);
    sub_224DDACD4(&qword_2557E03F0, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_224F6B150);
    v14 = (char *)sub_224F67AE4();
    swift_bridgeObjectRelease();
    v32 = objc_msgSend(v30, sel_initWithData_options_, v31, v14);
    sub_224DDE9B4(v28, v29);

    v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDF9C78]), sel_init);
    objc_msgSend(v33, sel_setUsesLanguageCorrection_, 1);
    v34 = (void *)sub_224F67D60();
    objc_msgSend(v33, sel_setRecognitionLanguages_, v34);

    objc_msgSend(v33, sel_setRecognitionLevel_, 0);
    sub_224E54704(0, (unint64_t *)&qword_2557E2960, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_224F71240;
    *(_QWORD *)(v35 + 32) = v33;
    v93[0] = (id)v35;
    sub_224F67D84();
    sub_224E5451C(0, &qword_2557E46B0);
    v36 = v33;
    v37 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    v93[0] = 0;
    LODWORD(v31) = objc_msgSend(v32, sel_performRequests_error_, v37, v93);

    v25 = v93[0];
    if (!(_DWORD)v31)
    {
      v44 = v93[0];
      sub_224F67544();

      swift_willThrow();
      return v25;
    }
    v38 = v93[0];
    v39 = objc_msgSend(v36, sel_results);
    if (!v39)
    {

      return 0;
    }
    v40 = v39;
    sub_224E5451C(0, &qword_2557E46B8);
    v7 = sub_224F67D6C();

    v16 = (void (*)(char *, unint64_t))v90[2];
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      v15 = (void (*)(char *, uint64_t, unint64_t))sub_224F681D4();
      swift_bridgeObjectRelease();
      if (v15)
        goto LABEL_13;
    }
    else
    {
      v15 = *(void (**)(char *, uint64_t, unint64_t))((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v15)
      {
LABEL_13:
        if ((v7 & 0xC000000000000001) != 0)
        {
          v41 = (id)MEMORY[0x22768E1CC](0, v7);
          goto LABEL_16;
        }
        if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v41 = *(id *)(v7 + 32);
LABEL_16:
          v42 = v41;
          swift_bridgeObjectRelease();
          v43 = objc_msgSend(v42, sel_getTranscript);

          if (v43)
          {
            v25 = (id)sub_224F67B80();

            return v25;
          }

          return 0;
        }
        __break(1u);
LABEL_50:
        swift_once();
        goto LABEL_29;
      }
    }

    swift_bridgeObjectRelease();
    return 0;
  }
  sub_224F67964();
  v45 = sub_224F67B50();
  v16(v12, v7);
  if ((v45 & 1) != 0)
  {
    v16(v14, v7);
    v46 = (void *)objc_opt_self();
    v47 = (void *)sub_224F67640();
    v93[0] = 0;
    v48 = objc_msgSend(v46, sel_contentStringFromHTMLData_error_, v47, v93);

    v49 = v93[0];
    if (v48)
    {
LABEL_31:
      v25 = (id)sub_224F67B80();
      v72 = v49;

      return v25;
    }
    v50 = v93[0];
    v51 = (void *)sub_224F67544();

    swift_willThrow();
    if (qword_2557E0128 != -1)
      swift_once();
    v52 = sub_224F679B8();
    __swift_project_value_buffer(v52, (uint64_t)qword_2557FC958);
    v53 = v51;
    v54 = v51;
    v55 = sub_224F679AC();
    v56 = sub_224F67ED4();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = swift_slowAlloc();
      v58 = swift_slowAlloc();
      *(_QWORD *)&v92 = v58;
      *(_DWORD *)v57 = 136315394;
      v59 = sub_224F685D0();
      v93[0] = (id)sub_224E76904(v59, v60, (uint64_t *)&v92);
      sub_224F68000();
      swift_bridgeObjectRelease();
      *(_WORD *)(v57 + 12) = 2080;
      v93[0] = v51;
      v61 = v51;
      v62 = v51;
      sub_224E59364(0, (unint64_t *)&qword_2557E1580);
      sub_224F6848C();
      v63 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v64 = sub_224F67BC8();
      v66 = v65;

      v93[0] = (id)sub_224E76904(v64, v66, (uint64_t *)&v92);
      sub_224F68000();
      swift_bridgeObjectRelease();

      v67 = "[%s] Failed to generate index string for html data: %s";
LABEL_41:
      _os_log_impl(&dword_224DAC000, v55, v56, v67, (uint8_t *)v57, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v58, -1, -1);
      MEMORY[0x22768EDE4](v57, -1, -1);

      return 0;
    }
LABEL_42:

    return 0;
  }
  if (qword_2557E01C0 != -1)
    goto LABEL_50;
LABEL_29:
  v68 = __swift_project_value_buffer(v7, (uint64_t)qword_2557FC9A8);
  v15(v12, v68, v7);
  v69 = sub_224F67B50();
  v16(v12, v7);
  if ((v69 & 1) != 0)
  {
    v16(v14, v7);
    v70 = (void *)objc_opt_self();
    v71 = (void *)sub_224F67640();
    v93[0] = 0;
    v48 = objc_msgSend(v70, sel_contentStringFromDOCXData_error_, v71, v93);

    v49 = v93[0];
    if (v48)
      goto LABEL_31;
    v78 = v93[0];
    v51 = (void *)sub_224F67544();

    swift_willThrow();
    if (qword_2557E0128 != -1)
      swift_once();
    v79 = sub_224F679B8();
    __swift_project_value_buffer(v79, (uint64_t)qword_2557FC958);
    v80 = v51;
    v81 = v51;
    v55 = sub_224F679AC();
    v56 = sub_224F67ED4();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = swift_slowAlloc();
      v58 = swift_slowAlloc();
      *(_QWORD *)&v92 = v58;
      *(_DWORD *)v57 = 136315394;
      v82 = sub_224F685D0();
      v93[0] = (id)sub_224E76904(v82, v83, (uint64_t *)&v92);
      sub_224F68000();
      swift_bridgeObjectRelease();
      *(_WORD *)(v57 + 12) = 2080;
      v93[0] = v51;
      v84 = v51;
      v85 = v51;
      sub_224E59364(0, (unint64_t *)&qword_2557E1580);
      sub_224F6848C();
      v86 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v87 = sub_224F67BC8();
      v89 = v88;

      v93[0] = (id)sub_224E76904(v87, v89, (uint64_t *)&v92);
      sub_224F68000();
      swift_bridgeObjectRelease();

      v67 = "[%s] Failed to generate index string for docx data: %s";
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  sub_224F67958();
  v74 = sub_224F67B50();
  v16(v12, v7);
  v16(v14, v7);
  if ((v74 & 1) == 0)
    return 0;
  sub_224F67BB0();
  v25 = (id)sub_224F67B98();
  if (v75)
  {
    v76 = v75;
    type metadata accessor for RTFDocument();
    inited = (_QWORD *)swift_initStackObject();
    inited[3] = v76;
    inited[4] = 0;
    inited[6] = 0;
    inited[5] = 0;
    inited[2] = v25;
    inited[4] = sub_224F1D908((uint64_t)v25, v76);
    swift_release();
    sub_224F19264();
    swift_beginAccess();
    v25 = (id)inited[5];
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v25;
}

void sub_224F5EC88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  sub_224F60FD8();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v2);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v7 = *(id *)(Strong + 40);
    swift_release();
    sub_224E5451C(0, &qword_2557E3A28);
    v8 = (void *)sub_224F67D60();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
    v9 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v10 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v10 + v9, (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
    aBlock[4] = sub_224F610B0;
    aBlock[5] = v10;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_224F5B7A0;
    aBlock[3] = &block_descriptor_24;
    v11 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v7, sel_indexSearchableItems_completionHandler_, v8, v11);
    _Block_release(v11);

  }
}

uint64_t sub_224F5EE28(void *a1)
{
  id v1;

  if (a1
    && (v1 = a1,
        sub_224E59364(0, (unint64_t *)&qword_2557E1580),
        sub_224E5451C(0, &qword_2557E1588),
        (swift_dynamicCast() & 1) != 0))
  {
    sub_224F60FD8();
    return sub_224F67DD8();
  }
  else
  {
    sub_224F60FD8();
    return sub_224F67DE4();
  }
}

uint64_t sub_224F5EED8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v5 = sub_224F67D30();
  v6 = MEMORY[0x22768DCB0](v5);
  v8 = v7;
  swift_bridgeObjectRelease();
  v9 = *a4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a4 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = sub_224E56678(0, v9[2] + 1, 1, v9);
    *a4 = v9;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    v9 = sub_224E56678((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
    *a4 = v9;
  }
  v9[2] = v12 + 1;
  v13 = &v9[2 * v12];
  v13[4] = v6;
  v13[5] = v8;
  return 1;
}

void sub_224F5EFA4(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (!a1[2])
  {
    swift_bridgeObjectRelease();
    return;
  }
  v43 = a1[2];
  v6 = a1[4];
  v7 = a1[5];
  v8 = (void *)a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  v10 = v8;
  v12 = sub_224E533E8(v6, v7);
  v13 = v9[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_23;
  v16 = v11;
  if (v9[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_224E72C70();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v22 = (uint64_t *)(v21[6] + 16 * v12);
    *v22 = v6;
    v22[1] = v7;
    *(_QWORD *)(v21[7] + 8 * v12) = v10;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v43 - 1;
    if (v43 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v27 = (void **)(a1 + 9);
    while (1)
    {
      v28 = (uint64_t)*(v27 - 2);
      v29 = (uint64_t)*(v27 - 1);
      v30 = *v27;
      v31 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      v10 = v30;
      v32 = sub_224E533E8(v28, v29);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v24 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v24)
        break;
      v37 = v33;
      if (v31[3] < v36)
      {
        sub_224E71EDC(v36, 1);
        v32 = sub_224E533E8(v28, v29);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v28;
      v40[1] = v29;
      *(_QWORD *)(v39[7] + 8 * v32) = v10;
      v41 = v39[2];
      v24 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v24)
        goto LABEL_24;
      v39[2] = v42;
      v27 += 3;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_224E71EDC(v15, a2 & 1);
  v17 = sub_224E533E8(v6, v7);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    sub_224E59364(0, (unint64_t *)&qword_2557E1580);
    if ((swift_dynamicCast() & 1) == 0)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_224F684A4();
  __break(1u);
LABEL_26:
  sub_224F680E4();
  sub_224F67C94();
  sub_224F681B0();
  sub_224F67C94();
  sub_224F681C8();
  __break(1u);
}

uint64_t sub_224F5F344(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_224F673B8();
  v9 = result;
  if (result)
  {
    result = sub_224F673D0();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  v12 = sub_224F673C4();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v9 + v13;
  if (v9)
    v15 = v14;
  else
    v15 = 0;
  result = (uint64_t)sub_224F5F49C(v9, v15, a4);
  if (v4)
    return v16;
  return result;
}

uint64_t sub_224F5F3F0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  sub_224DDE970(a1, a2);
  sub_224F5F4E8(a1, a2);
  sub_224DDE9B4(a1, a2);
  v4 = sub_224F67C1C();
  swift_release();
  return v4;
}

uint64_t sub_224F5F464@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_224F67C1C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

_QWORD *sub_224F5F49C(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  result = a3(&v6, a1, v4);
  if (!v3)
    return (_QWORD *)v6;
  return result;
}

void sub_224F5F4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_224F67688();
  MEMORY[0x24BDAC7A8](v3);
  __asm { BR              X10 }
}

_QWORD *sub_224F5F564()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (BYTE6(v0))
  {
    sub_224E54704(0, (unint64_t *)&qword_2557E15F0, MEMORY[0x24BEE4260], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v4 = (_QWORD *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v6 - 64;
    sub_224DDE970(v2, v0);
    v7 = sub_224F675F8();
    sub_224DDE9B4(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v7 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x224F5F64CLL);
    }
  }
  return v4;
}

uint64_t sub_224F5F664@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_224F67C1C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_224F5F698(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[2];
  uint64_t v16;

  sub_224F60EEC(0, (unint64_t *)&qword_2557E1528, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDD2120]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v15 - v6;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v15[1] = v1;
    v16 = MEMORY[0x24BEE4AF8];
    sub_224E538C0(0, v8, 0);
    v9 = v16;
    v10 = (void *)objc_opt_self();
    do
    {
      v11 = objc_msgSend(v10, sel_clinicalNoteRecordType);
      sub_224E5451C(0, &qword_2557E1530);
      sub_224F67AB4();

      v16 = v9;
      v13 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v9 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_224E538C0(v12 > 1, v13 + 1, 1);
        v9 = v16;
      }
      *(_QWORD *)(v9 + 16) = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v13, v7, v4);
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_224F5F82C()
{
  id v0;
  void *v1;
  uint64_t v3;

  v3 = MEMORY[0x24BEE4AF8];
  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDFD70]), sel_initWithUnit_, 0);
  v1 = (void *)sub_224F67B5C();
  objc_msgSend(v0, sel_setString_, v1);

  sub_224F67EA4();
  return v3;
}

uint64_t sub_224F5F910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  _QWORD v27[2];
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v30 = (char *)v27 - v8;
  result = MEMORY[0x24BEE4AF8];
  v36 = MEMORY[0x24BEE4AF8];
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v27[1] = v3;
    v11 = sub_224F677D8();
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
    v29 = v11;
    swift_bridgeObjectRetain();
    v27[0] = a1;
    v12 = (uint64_t *)(a1 + 40);
    v13 = (uint64_t)v30;
    do
    {
      v15 = *(v12 - 1);
      v16 = *v12;
      v34 = a2;
      v35 = a3;
      v31 = v10;
      v32 = v15;
      v33 = v16;
      v28(v13, 1, 1, v29);
      sub_224E51E94();
      swift_bridgeObjectRetain();
      v17 = sub_224F68048();
      v19 = v18;
      v20 = a2;
      v22 = v21;
      sub_224DDB50C(v13, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
      if ((v22 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        a2 = v20;
        v14 = v31;
      }
      else
      {
        v34 = v17;
        v35 = v19;
        a2 = v20;
        v32 = v20;
        v33 = a3;
        sub_224F60E90();
        sub_224DDACD4(&qword_2557E4670, (uint64_t (*)(uint64_t))sub_224F60E90, MEMORY[0x24BEE1BC0]);
        swift_bridgeObjectRetain();
        v23 = sub_224F67F4C();
        v25 = objc_msgSend((id)objc_opt_self(), sel_valueWithRange_, v23, v24, v27[0]);
        v26 = swift_bridgeObjectRelease();
        v14 = v31;
        if (v25)
        {
          MEMORY[0x22768DE24](v26);
          if (*(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_224F67D90();
          sub_224F67D9C();
          sub_224F67D84();
        }
      }
      v12 += 2;
      v10 = v14 - 1;
    }
    while (v10);
    swift_bridgeObjectRelease();
    return v36;
  }
  return result;
}

uint64_t sub_224F5FBB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  _QWORD v40[4];
  uint64_t v41;
  unint64_t v42;

  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v40 - v5;
  if (!a2)
    return 0;
  v7 = sub_224F36218(a1, a2);
  v9 = v8;
  v10 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  if (!v10)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return 0;
  }
  v11 = v7;
  v12 = (_QWORD *)sub_224F5F82C();
  v13 = (uint64_t)v12;
  if (!v12[2])
    goto LABEL_19;
  v14 = v12[4];
  v15 = v12[5];
  v41 = v11;
  v42 = v9;
  v40[2] = v14;
  v40[3] = v15;
  v16 = sub_224F677D8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
  sub_224E51E94();
  swift_bridgeObjectRetain();
  v17 = sub_224F68048();
  v19 = v18;
  v21 = v20;
  sub_224DDB50C((uint64_t)v6, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v22 = sub_224F67C40();
  v23 = 70 - v22;
  if (__OFSUB__(70, v22))
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v23 < 0)
    v23 = 71 - v22;
  v24 = v23 >> 1;
  sub_224F36160(v17, v19, v23 >> 1, v11, v9);
  v25 = sub_224F67CE8();
  v26 = sub_224F67CE8();
  v19 = v26 + v24;
  if (__OFADD__(v26, v24))
    goto LABEL_24;
  if (v24 >= v25)
    v27 = 0xE000000000000000;
  else
    v27 = 0xA300000000000000;
  if (v24 >= v25)
    v28 = 0;
  else
    v28 = 10911970;
  v40[0] = v28;
  sub_224F67C40();
  v29 = sub_224F67D30();
  v31 = v30;
  v33 = v32;
  v35 = v34;
  swift_bridgeObjectRelease();
  MEMORY[0x22768DCB0](v29, v31, v33, v35);
  swift_bridgeObjectRelease();
  v41 = v40[0];
  v42 = v27;
  swift_bridgeObjectRetain();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = v41;
  v36 = v42;
  swift_bridgeObjectRetain();
  v37 = sub_224F5F910(v13, v19, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v37 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    v39 = sub_224F681D4();
    swift_bridgeObjectRelease();
    if (v39)
      return v19;
    goto LABEL_19;
  }
  if (!*(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_19;
  return v19;
}

id sub_224F5FF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;

  v9 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v10 = (void *)sub_224F67784();
  if (a6)
  {
    v11 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  v12 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_224E5451C(0, &qword_2557E4660);
  v13 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, sel_initWithTitle_medicalRecord_attachmentUUID_previewString_previewStringMatchRanges_, v9, a3, v10, v11, v13);

  v15 = sub_224F677A8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a4, v15);
  return v14;
}

uint64_t sub_224F60060(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  v18 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_17;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; v7 = sub_224F681D4())
  {
    for (i = 4; ; ++i)
    {
      v9 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22768E1CC](i - 4, a1) : *(id *)(a1 + 8 * i);
      v10 = v9;
      v11 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v17 = v9;
      sub_224F5B28C(&v17, a2, a4, a5, &v16);
      if (v5)
      {
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }

      if (v16)
      {
        MEMORY[0x22768DE24]();
        if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_224F67D90();
        sub_224F67D9C();
        sub_224F67D84();
      }
      if (v11 == v7)
      {
        swift_bridgeObjectRelease();
        return v18;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_224F60200()
{
  id v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  unsigned __int8 v10;
  id v11;
  unsigned int v12;
  id v13;
  id v14;
  void *v15;
  id v17[2];

  v17[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = (id)HKSharedResourcesDirectory();
  if (!v0)
    __break(1u);
  v1 = v0;
  v2 = (void *)sub_224F67B5C();
  v3 = objc_msgSend(v1, sel_stringByAppendingPathComponent_, v2);

  v4 = v3;
  v5 = v3;
  if (!v3)
  {
    sub_224F67B80();
    v5 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    sub_224F67B80();
    v4 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
  }
  v6 = sub_224F67B80();
  v7 = (void *)objc_opt_self();
  v8 = v3;
  v9 = objc_msgSend(v7, sel_defaultManager);
  v10 = objc_msgSend(v9, sel_fileExistsAtPath_, v5);

  if ((v10 & 1) != 0)
  {

  }
  else
  {
    v11 = objc_msgSend(v7, sel_defaultManager);
    v17[0] = 0;
    v12 = objc_msgSend(v11, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v4, 1, 0, v17);

    if (v12)
    {
      v13 = v17[0];

    }
    else
    {
      v14 = v17[0];
      v15 = (void *)sub_224F67544();

      swift_willThrow();
    }
  }
  return v6;
}

uint64_t *sub_224F60404(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;

  v3 = *v1;
  sub_224DDEA0C(0, &qword_2557E3168, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v25 - v5;
  v1[7] = 0;
  v1[8] = (uint64_t)&unk_24ECFD070;
  v1[9] = 0;
  v1[2] = (uint64_t)a1;
  v7 = (void *)*MEMORY[0x24BDD0CD0];
  v8 = a1;
  v9 = v7;
  sub_224F60200();
  v10 = objc_allocWithZone(MEMORY[0x24BDC2440]);
  v11 = (void *)sub_224F67B5C();
  v12 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v10, sel_initWithName_protectionClass_path_, v11, v9, v12);

  v1[5] = (uint64_t)v13;
  v14 = objc_allocWithZone(MEMORY[0x24BDD3C98]);
  v15 = v8;
  v16 = (void *)sub_224F67B5C();
  v17 = objc_msgSend(v14, sel_initWithCategory_domainName_healthStore_, 3, v16, v15);

  v1[3] = (uint64_t)v17;
  v1[4] = (uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3930]), sel_initWithHealthStore_, v15);
  sub_224F61150();
  v18 = swift_allocObject();
  *(_DWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  v1[6] = v18;
  v19 = swift_allocObject();
  swift_weakInit();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = v3;
  v21 = sub_224F67E20();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v6, 1, 1, v21);
  v22 = swift_allocObject();
  swift_weakInit();
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = 0;
  v23[3] = 0;
  v23[4] = v22;
  v23[5] = sub_224F611D0;
  v23[6] = v20;
  v23[7] = v3;
  sub_224EF7270((uint64_t)v6, (uint64_t)&unk_2557E46F0, (uint64_t)v23);
  swift_release();
  return v1;
}

void sub_224F606A4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  unint64_t v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t Strong;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t aBlock;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC2468]), sel_init);
  v3 = MEMORY[0x24BEE0D00];
  v4 = (void *)sub_224F67D60();
  objc_msgSend(v2, sel_setFetchAttributes_, v4);

  v5 = (void *)sub_224F67D60();
  objc_msgSend(v2, sel_setBundleIDs_, v5);

  swift_beginAccess();
  if (!swift_weakLoadStrong())
    goto LABEL_5;
  v6 = sub_224E51E94();
  sub_224F68030();
  v37 = 34;
  v38 = 0xE100000000000000;
  v35 = 8796;
  v36 = 0xE200000000000000;
  v27 = v6;
  v28 = v6;
  v26 = v6;
  sub_224F68030();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  swift_release();
  sub_224F60200();
  v7 = objc_allocWithZone(MEMORY[0x24BDC2438]);
  v8 = v2;
  v9 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v10 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v7, sel_initWithPath_queryString_context_, v9, v10, v8, v3, v26, v27, v28, 574433834, 0xE400000000000000);

  if (v11)
  {
    sub_224DDEA0C(0, &qword_2557E4680, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_224F6D8B0;
    v13 = (void *)*MEMORY[0x24BDD0CD0];
    *(_QWORD *)(v12 + 32) = *MEMORY[0x24BDD0CD0];
    type metadata accessor for FileProtectionType(0);
    v14 = v13;
    v15 = v11;
    v16 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    objc_msgSend(v15, sel_setProtectionClasses_, v16);

    objc_msgSend(v15, sel_setPrivateIndex_, 1);
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = MEMORY[0x24BEE4AF8];
    v33 = sub_224F60F78;
    v34 = v17;
    v18 = MEMORY[0x24BDAC760];
    aBlock = MEMORY[0x24BDAC760];
    v30 = 1107296256;
    v31 = sub_224F5B674;
    v32 = &block_descriptor_0;
    v19 = _Block_copy(&aBlock);
    v20 = v15;
    swift_retain();
    swift_release();
    objc_msgSend(v20, sel_setFoundItemsHandler_, v19);
    _Block_release(v19);

    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = a1;
    *(_QWORD *)(v21 + 24) = v17;
    v33 = sub_224F60F98;
    v34 = v21;
    aBlock = v18;
    v30 = 1107296256;
    v31 = sub_224F5B7A0;
    v32 = &block_descriptor_12;
    v22 = _Block_copy(&aBlock);
    v23 = v20;
    swift_retain();
    swift_release();
    objc_msgSend(v23, sel_setCompletionHandler_, v22);
    _Block_release(v22);

    objc_msgSend(v23, sel_start);
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v25 = Strong;

      v2 = *(id *)(v25 + 72);
      *(_QWORD *)(v25 + 72) = v11;
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();

      v2 = v8;
    }
  }
  else
  {
LABEL_5:
    **(_QWORD **)(*(_QWORD *)(a1 + 64) + 40) = MEMORY[0x24BEE4AF8];
    swift_continuation_throwingResume();
  }

}

uint64_t sub_224F60B78(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;

  sub_224DDEA0C(0, &qword_2557E2A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v23 - v3;
  v5 = sub_224F677A8();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v26 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v23 = (char *)&v23 - v9;
  if (!(a1 >> 62))
  {
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v10)
      goto LABEL_3;
LABEL_21:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  result = sub_224F681D4();
  v10 = result;
  if (!result)
    goto LABEL_21;
LABEL_3:
  if (v10 >= 1)
  {
    v12 = 0;
    v24 = a1 & 0xC000000000000001;
    v25 = v10;
    v13 = MEMORY[0x24BEE4AF8];
    v14 = a1;
    do
    {
      if (v24)
        v15 = (id)MEMORY[0x22768E1CC](v12, a1);
      else
        v15 = *(id *)(a1 + 8 * v12 + 32);
      v16 = v15;
      v17 = objc_msgSend(v15, sel_attributeSet, v23);
      v18 = objc_msgSend(v17, sel_domainIdentifier);

      if (v18)
      {
        sub_224F67B80();

        sub_224F6776C();
        swift_bridgeObjectRelease();
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);

      }
      a1 = v14;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      {
        sub_224DDB50C((uint64_t)v4, &qword_2557E2A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58]);
      }
      else
      {
        v19 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
        v20 = v23;
        v19(v23, v4, v5);
        v19(v26, v20, v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_224E56EDC(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
        v22 = *(_QWORD *)(v13 + 16);
        v21 = *(_QWORD *)(v13 + 24);
        if (v22 >= v21 >> 1)
          v13 = sub_224E56EDC(v21 > 1, v22 + 1, 1, v13);
        *(_QWORD *)(v13 + 16) = v22 + 1;
        v19((char *)(v13+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v22), v26, v5);
      }
      ++v12;
    }
    while (v25 != v12);
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void sub_224F60E90()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E4668)
  {
    v0 = sub_224F67E98();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E4668);
  }
}

void sub_224F60EEC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224E5451C(255, &qword_2557E1530);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_224F60F54()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_224F60F78()
{
  return sub_224F5B624();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_224F60F98(void *a1)
{
  uint64_t v1;

  return sub_224F5B6E0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_224F60FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_224F5EED8(a1, a2, a3, *(_QWORD ***)(v3 + 16));
}

uint64_t sub_224F60FAC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void sub_224F60FD0(uint64_t a1)
{
  sub_224F5EC88(a1);
}

void sub_224F60FD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E4698)
  {
    sub_224E59364(255, (unint64_t *)&qword_2557E1580);
    v0 = sub_224F67DF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E4698);
  }
}

uint64_t sub_224F61050()
{
  uint64_t v0;
  uint64_t v1;

  sub_224F60FD8();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_224F610B0(void *a1)
{
  sub_224F60FD8();
  return sub_224F5EE28(a1);
}

void sub_224F610EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E46C8)
  {
    sub_224E59364(255, &qword_2557E46C0);
    v0 = sub_224F67FF4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E46C8);
  }
}

void sub_224F61150()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E46E0)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_224F68150();
    if (!v1)
      atomic_store(v0, &qword_2557E46E0);
  }
}

uint64_t sub_224F611AC()
{
  swift_release();
  return swift_deallocObject();
}

void sub_224F611D0(uint64_t a1, void *a2, void *a3)
{
  sub_224F5B9E0(a1, a2, a3);
}

uint64_t sub_224F611D8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_224F6120C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_224EF7808;
  return sub_224F5C944(a1, v4, v5, v6, v7, v9, v8);
}

void sub_224F61298(id *a1)
{
  uint64_t v1;

  sub_224F5D824(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_224F612A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_224F612D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a3, a4, a5);
}

uint64_t type metadata accessor for IndexedAnchor(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E47A0);
}

uint64_t sub_224F61310()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_224F6134C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_224EF7808;
  *(_QWORD *)(v3 + 80) = v2;
  *(_OWORD *)(v3 + 64) = v5;
  return swift_task_switch();
}

uint64_t *sub_224F613BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_224F67760();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_224F61444(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_224F67760();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *sub_224F6147C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_224F67760();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *sub_224F614D8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_224F67760();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *sub_224F61534(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_224F67760();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_224F61590(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_224F67760();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_224F615EC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F615F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = sub_224F67760();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_224F61638()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224F61644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = sub_224F67760();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_224F61688()
{
  uint64_t result;
  unint64_t v1;

  result = sub_224F67760();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_224F61700()
{
  unint64_t result;

  result = qword_2557E47E0;
  if (!qword_2557E47E0)
  {
    result = MEMORY[0x22768ED24](&unk_224F765D8, &type metadata for IndexedAnchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E47E0);
  }
  return result;
}

uint64_t sub_224F61744(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IndexedAnchor(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_224F61788(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224F61700();
    v7 = a3(a1, &type metadata for IndexedAnchor.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for IndexedAnchor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_224F61830 + 4 * byte_224F76385[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_224F61864 + 4 * byte_224F76380[v4]))();
}

uint64_t sub_224F61864(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F6186C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224F61874);
  return result;
}

uint64_t sub_224F61880(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224F61888);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_224F6188C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224F61894(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IndexedAnchor.CodingKeys()
{
  return &type metadata for IndexedAnchor.CodingKeys;
}

unint64_t sub_224F618B4()
{
  unint64_t result;

  result = qword_2557E4800;
  if (!qword_2557E4800)
  {
    result = MEMORY[0x22768ED24](&unk_224F765B0, &type metadata for IndexedAnchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E4800);
  }
  return result;
}

unint64_t sub_224F618FC()
{
  unint64_t result;

  result = qword_2557E4808;
  if (!qword_2557E4808)
  {
    result = MEMORY[0x22768ED24](&unk_224F76520, &type metadata for IndexedAnchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E4808);
  }
  return result;
}

unint64_t sub_224F61944()
{
  unint64_t result;

  result = qword_2557E4810;
  if (!qword_2557E4810)
  {
    result = MEMORY[0x22768ED24](&unk_224F76548, &type metadata for IndexedAnchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E4810);
  }
  return result;
}

uint64_t sub_224F61988(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F52726F68636E61 && a2 == 0xEB00000000444977;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61647055656D6974 && a2 == 0xEB00000000646574)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t CompressionAlgorithm.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_224F68240();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t CompressionAlgorithm.rawValue.getter()
{
  return 4605252;
}

unint64_t sub_224F61B3C()
{
  unint64_t result;

  result = qword_2557E4818;
  if (!qword_2557E4818)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for CompressionAlgorithm, &type metadata for CompressionAlgorithm);
    atomic_store(result, (unint64_t *)&qword_2557E4818);
  }
  return result;
}

uint64_t sub_224F61B80()
{
  sub_224F68510();
  sub_224F67C34();
  return sub_224F6854C();
}

uint64_t sub_224F61BC8()
{
  return sub_224F67C34();
}

uint64_t sub_224F61BD8()
{
  sub_224F68510();
  sub_224F67C34();
  return sub_224F6854C();
}

uint64_t sub_224F61C1C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_224F68240();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_224F61C6C(_QWORD *a1@<X8>)
{
  *a1 = 4605252;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_224F61C80()
{
  sub_224F61DC4();
  return sub_224F67D48();
}

uint64_t sub_224F61CDC()
{
  sub_224F61DC4();
  return sub_224F67D3C();
}

uint64_t storeEnumTagSinglePayload for CompressionAlgorithm(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_224F61D68 + 4 * byte_224F76630[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_224F61D88 + 4 * byte_224F76635[v4]))();
}

_BYTE *sub_224F61D68(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_224F61D88(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_224F61D90(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_224F61D98(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_224F61DA0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_224F61DA8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CompressionAlgorithm()
{
  return &type metadata for CompressionAlgorithm;
}

unint64_t sub_224F61DC4()
{
  unint64_t result;

  result = qword_2557E4820;
  if (!qword_2557E4820)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for CompressionAlgorithm, &type metadata for CompressionAlgorithm);
    atomic_store(result, (unint64_t *)&qword_2557E4820);
  }
  return result;
}

uint64_t sub_224F61E08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;

  v1 = v0[21];
  v2 = v0[22];
  v3 = v0[23];
  sub_224E54704(0, &qword_2557E1568, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_224F6D8B0;
  *(_QWORD *)(v4 + 32) = 0xD000000000000021;
  *(_QWORD *)(v4 + 40) = 0x8000000224F83A00;
  if (v2)
  {
    v5 = 0xD000000000000024;
    v6 = "https://smarthealth.cards#laboratory";
LABEL_7:
    v7 = (unint64_t)(v6 - 32) | 0x8000000000000000;
    v4 = (uint64_t)sub_224E56678((_QWORD *)1, 2, 1, (_QWORD *)v4);
    *(_QWORD *)(v4 + 16) = 2;
    *(_QWORD *)(v4 + 48) = v5;
    *(_QWORD *)(v4 + 56) = v7;
    return v4;
  }
  if (v3)
  {
    v5 = 0xD000000000000026;
    v6 = "https://smarthealth.cards#immunization";
    goto LABEL_7;
  }
  if (v1)
  {
    v5 = 0xD000000000000022;
    v6 = "https://smarthealth.cards#recovery";
    goto LABEL_7;
  }
  return v4;
}

id sub_224F61EEC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v50 = a2;
  v51 = a3;
  v46 = a1;
  v5 = sub_224F67874();
  MEMORY[0x24BDAC7A8](v5);
  v55 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_224F67760();
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v52 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_224F677A8();
  MEMORY[0x24BDAC7A8](v9);
  v49 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v11);
  v48 = (uint64_t)&v44 - v12;
  v13 = v3[1];
  v85 = *v3;
  v86 = v13;
  v87 = v3[2];
  v14 = *((_QWORD *)v3 + 7);
  v88 = *((_QWORD *)v3 + 6);
  v15 = *((_QWORD *)v3 + 8);
  v16 = *(__int128 *)((char *)v3 + 184);
  v81 = *(__int128 *)((char *)v3 + 168);
  v82 = v16;
  v83 = *(__int128 *)((char *)v3 + 200);
  v84 = *((_QWORD *)v3 + 27);
  v17 = *(__int128 *)((char *)v3 + 120);
  v77 = *(__int128 *)((char *)v3 + 104);
  v78 = v17;
  v18 = *(__int128 *)((char *)v3 + 152);
  v79 = *(__int128 *)((char *)v3 + 136);
  v80 = v18;
  v19 = *(__int128 *)((char *)v3 + 88);
  v75 = *(__int128 *)((char *)v3 + 72);
  v76 = v19;
  v20 = type metadata accessor for ExtractionContext();
  v21 = v20;
  if (*(_QWORD *)(a1 + *(int *)(v20 + 40)))
    v22 = *(_QWORD *)(a1 + *(int *)(v20 + 40));
  else
    v22 = MEMORY[0x24BEE4B00];
  v23 = sub_224F67B80();
  v25 = v24;
  *((_QWORD *)&v57 + 1) = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v56 = v14;
  *((_QWORD *)&v56 + 1) = v15;
  sub_224E543B4(&v56, &v73);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v72 = v22;
  v27 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v73, v74);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (uint64_t *)((char *)&v44 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  sub_224F032E4(*v29, v29[1], v23, v25, isUniquelyReferenced_nonNull_native, &v72);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
  v47 = v72;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = v46;
  v32 = v48;
  sub_224E75F34(v46 + *(int *)(v21 + 32), v48, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v34 = v50;
  v33 = v51;
  sub_224DDE970(v50, v51);
  v45 = sub_224F65804(v14, v15);
  v36 = v35;
  v56 = v85;
  v57 = v86;
  v58 = v87;
  v68 = v81;
  v69 = v82;
  v70 = v83;
  v64 = v77;
  v65 = v78;
  v66 = v79;
  v67 = v80;
  v62 = v75;
  v59 = v88;
  v60 = v14;
  v61 = v15;
  v71 = v84;
  v63 = v76;
  v37 = sub_224F61E08();
  v38 = (uint64_t)v49;
  sub_224F6779C();
  v39 = (uint64_t)v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v31 + *(int *)(v21 + 28), v54);
  v40 = (uint64_t)v55;
  sub_224F67868();
  v41 = objc_allocWithZone(MEMORY[0x24BE48990]);
  v42 = sub_224F658B0(v34, v33, 2, v32, v45, v36, v37, v38, v47, v39, v40, 0);
  sub_224DDE9B4(v34, v33);
  return v42;
}

uint64_t sub_224F622E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *(_QWORD *)(v3 + 432) = a1;
  *(_QWORD *)(v3 + 440) = a2;
  sub_224E63218(0, &qword_2557E27F0, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  *(_QWORD *)(v3 + 448) = swift_task_alloc();
  sub_224E63218(0, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  *(_QWORD *)(v3 + 456) = swift_task_alloc();
  v4 = sub_224F67760();
  *(_QWORD *)(v3 + 464) = v4;
  *(_QWORD *)(v3 + 472) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 480) = swift_task_alloc();
  *(_QWORD *)(v3 + 488) = swift_task_alloc();
  *(_QWORD *)(v3 + 496) = swift_task_alloc();
  *(_QWORD *)(v3 + 504) = swift_task_alloc();
  *(_QWORD *)(v3 + 512) = swift_task_alloc();
  *(_QWORD *)(v3 + 520) = type metadata accessor for RecordExtractionContext();
  *(_QWORD *)(v3 + 528) = swift_task_alloc();
  *(_QWORD *)(v3 + 536) = swift_task_alloc();
  v5 = sub_224F677A8();
  *(_QWORD *)(v3 + 544) = v5;
  *(_QWORD *)(v3 + 552) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 560) = swift_task_alloc();
  v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v3 + 376) = *(_OWORD *)v2;
  *(_OWORD *)(v3 + 392) = v6;
  *(_OWORD *)(v3 + 408) = *(_OWORD *)(v2 + 32);
  v7 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v3 + 424) = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v3 + 568) = v7;
  *(_QWORD *)(v3 + 576) = *(_QWORD *)(v2 + 64);
  *(_OWORD *)(v3 + 584) = *(_OWORD *)(v2 + 72);
  v8 = *(_OWORD *)(v2 + 88);
  v9 = *(_OWORD *)(v2 + 104);
  v10 = *(_OWORD *)(v2 + 136);
  v11 = *(_OWORD *)(v2 + 152);
  *(_OWORD *)(v3 + 272) = *(_OWORD *)(v2 + 120);
  *(_OWORD *)(v3 + 288) = v10;
  *(_OWORD *)(v3 + 240) = v8;
  *(_OWORD *)(v3 + 256) = v9;
  v12 = *(_OWORD *)(v2 + 168);
  v13 = *(_OWORD *)(v2 + 184);
  v14 = *(_OWORD *)(v2 + 200);
  *(_QWORD *)(v3 + 368) = *(_QWORD *)(v2 + 216);
  *(_OWORD *)(v3 + 336) = v13;
  *(_OWORD *)(v3 + 352) = v14;
  *(_OWORD *)(v3 + 304) = v11;
  *(_OWORD *)(v3 + 320) = v12;
  return swift_task_switch();
}

uint64_t sub_224F624A8()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  id v19;
  _QWORD *v20;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = objc_msgSend(*(id *)(v0 + 432), sel_credentialTypes);
  v2 = sub_224F67D6C();

  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease();
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 592);
    v5 = *(_QWORD *)(v0 + 584);
    v26 = *(_QWORD *)(v0 + 576);
    v6 = *(_QWORD *)(v0 + 560);
    v7 = *(_QWORD *)(v0 + 552);
    v8 = *(_QWORD *)(v0 + 544);
    v9 = *(_QWORD **)(v0 + 536);
    v23 = *(_QWORD *)(v0 + 520);
    v24 = *(_QWORD *)(v0 + 440);
    v25 = *(_QWORD *)(v0 + 568);
    v10 = objc_msgSend(*(id *)(v0 + 432), sel_syncIdentifier);
    sub_224F67790();

    v11 = objc_allocWithZone(MEMORY[0x24BDD3D00]);
    v12 = (void *)sub_224F67784();
    v13 = objc_msgSend(v11, sel_initWithSignedClinicalDataRecordIdentifier_, v12);
    *(_QWORD *)(v0 + 600) = v13;

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    sub_224DDB408(v24, (uint64_t)v9 + *(int *)(v23 + 20), (uint64_t (*)(_QWORD))type metadata accessor for ExtractionContext);
    *v9 = v13;
    v14 = *(_OWORD *)(v0 + 392);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 376);
    *(_OWORD *)(v0 + 32) = v14;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 408);
    *(_QWORD *)(v0 + 64) = *(_QWORD *)(v0 + 424);
    *(_QWORD *)(v0 + 72) = v25;
    *(_QWORD *)(v0 + 80) = v26;
    *(_QWORD *)(v0 + 88) = v5;
    *(_QWORD *)(v0 + 96) = v4;
    *(_QWORD *)(v0 + 232) = *(_QWORD *)(v0 + 368);
    v15 = *(_OWORD *)(v0 + 336);
    *(_OWORD *)(v0 + 216) = *(_OWORD *)(v0 + 352);
    *(_OWORD *)(v0 + 200) = v15;
    v16 = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v0 + 168) = v16;
    v17 = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v0 + 152) = *(_OWORD *)(v0 + 288);
    *(_OWORD *)(v0 + 136) = v17;
    v18 = *(_OWORD *)(v0 + 240);
    *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v0 + 104) = v18;
    v19 = v13;
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 608) = v20;
    *v20 = v0;
    v20[1] = sub_224F62754;
    return sub_224F63544(*(_QWORD *)(v0 + 536));
  }
  else
  {
    sub_224ECF1EC();
    swift_allocError();
    *v22 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_224F62754(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[77] = a1;
  v4[78] = a2;
  v4[79] = v2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F627C8()
{
  uint64_t v0;
  unint64_t v1;
  int64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  char v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char **v42;
  id v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  id v89;
  id v90;
  void *v91;
  void *v92;
  id v93;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  int64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  id *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v1 = *(_QWORD *)(v0 + 616);
  if (v1 >> 62)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      v95 = sub_224F681D4();
      swift_bridgeObjectRelease();
      v114 = v95;
      if (!v95)
        goto LABEL_70;
      swift_bridgeObjectRetain();
      v2 = sub_224F681D4();
      swift_bridgeObjectRelease();
      if (v2)
        break;
      v4 = v1 & 0xC000000000000001;
      v123 = MEMORY[0x24BEE4AF8];
      v108 = MEMORY[0x24BEE4AF8];
LABEL_50:
      v40 = *(_QWORD *)(v0 + 616);
      v113 = *(_QWORD *)(v0 + 472);
      sub_224F676A0();
      v111 = v40 + 32;
      swift_bridgeObjectRetain();
      v41 = 0;
      v42 = &selRef_preprocessDataInSource_options_error_;
      v1 = 0x1F260B000uLL;
      v117 = v4;
      if (v4)
      {
LABEL_51:
        v43 = (id)MEMORY[0x22768E1CC](v41, *(_QWORD *)(v0 + 616));
        goto LABEL_53;
      }
      while (1)
      {
        v43 = *(id *)(v111 + 8 * v41);
LABEL_53:
        v44 = v43;
        v45 = v41 + 1;
        if (__OFADD__(v41, 1))
          break;
        v125 = v41;
        v46 = v1;
        v47 = *(_QWORD *)(v0 + 488);
        v48 = *(_QWORD *)(v0 + 464);
        v49 = objc_msgSend(v43, v42[190]);
        v50 = objc_msgSend(v49, (SEL)(v46 + 3144));

        sub_224F6773C();
        LOBYTE(v50) = sub_224F67724();
        v51 = *(void (**)(uint64_t, uint64_t))(v113 + 8);
        v51(v47, v48);
        v53 = *(_QWORD *)(v0 + 496);
        v52 = *(_QWORD *)(v0 + 504);
        v54 = *(_QWORD *)(v0 + 464);
        v121 = v51;
        if ((v50 & 1) != 0)
        {
          v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 32);
          v55(v53, v52, v54);
        }
        else
        {
          v51(v52, v54);
          v56 = objc_msgSend(v44, sel_sortDate);
          v57 = objc_msgSend(v56, (SEL)(v46 + 3144));

          sub_224F6773C();
          v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 32);
        }
        v55(v52, v53, v54);

        if (v45 == v114)
        {
          v58 = *(_QWORD *)(v119 + 632);
          v60 = *(_QWORD *)(v119 + 504);
          v59 = *(_QWORD *)(v119 + 512);
          v61 = *(_QWORD *)(v119 + 464);
          swift_bridgeObjectRelease();
          v55(v59, v60, v61);
          v62 = sub_224F64B58();
          v63 = *(void **)(v119 + 600);
          if (v58)
          {
            v64 = *(_QWORD *)(v119 + 536);
            v65 = *(_QWORD *)(v119 + 512);
            v66 = *(_QWORD *)(v119 + 464);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            v121(v65, v66);
            sub_224F07040(v64);
            v0 = v119;
            goto LABEL_71;
          }
          v101 = *(_QWORD *)(v119 + 576);
          v103 = (void *)v62;
          v67 = *(_QWORD *)(v119 + 568);
          v68 = *(_QWORD *)(v119 + 536);
          v104 = v68;
          v69 = *(_QWORD *)(v119 + 528);
          v70 = *(_QWORD *)(v119 + 512);
          v106 = v70;
          v71 = *(_QWORD *)(v119 + 488);
          v115 = (id *)v69;
          v72 = *(_QWORD *)(v119 + 472);
          v118 = *(_QWORD *)(v119 + 480);
          v107 = *(void **)(v119 + 600);
          v73 = *(_QWORD *)(v119 + 456);
          v74 = *(_QWORD *)(v119 + 464);
          v126 = *(_QWORD *)(v119 + 448);
          v75 = *(void **)(v119 + 432);
          sub_224E5451C(0, &qword_2557E27F8);
          sub_224DDB408(v68, v69, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
          v76 = sub_224F677D8();
          v77 = v73;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v73, 1, 1, v76);
          v78 = objc_msgSend(v75, sel_credentialTypes);
          v100 = sub_224F67D6C();

          v102 = sub_224F65804(v67, v101);
          v99 = v79;
          sub_224F67730();
          v105 = v74;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16))(v118, v70, v74);
          sub_224F67730();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56))(v126, 0, 1, v74);
          v80 = objc_msgSend(v75, sel_signatureStatus);
          v81 = v103;
          v82 = sub_224F06AA8(v115, v77, 0, 0, v100, v102, v99, v71, v118, v126, (uint64_t)v80, (uint64_t)v81, v108, 0, 0xF000000000000000, (uint64_t)objc_msgSend(v75, sel_sourceType));

          sub_224E5451C(0, &qword_2557E27D8);
          sub_224DDB408(v104, (uint64_t)v115, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
          v83 = v82;
          v84 = objc_msgSend(v75, sel_rawContent);
          v85 = (void *)sub_224F67658();
          v87 = v86;

          v88 = (void *)sub_224F07D48(v115, v83, v123, v85, v87);
          sub_224DDE9B4((uint64_t)v85, (unint64_t)v87);

          v89 = objc_allocWithZone(MEMORY[0x24BE48A68]);
          sub_224E5451C(0, &qword_2557E1518);
          v90 = v75;
          v91 = (void *)sub_224F67D60();
          swift_bridgeObjectRelease();
          sub_224E5451C(0, &qword_2557E27E0);
          v92 = (void *)sub_224F67D60();
          swift_bridgeObjectRelease();
          v93 = objc_msgSend(v89, sel_initWithOriginalRecord_mainRecord_verifiableClinicalRecord_medicalRecords_clinicalRecords_, v90, v83, v88, v91, v92);

          v121(v106, v105);
          sub_224F07040(v104);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          return (*(uint64_t (**)(id))(v119 + 8))(v93);
        }
        v41 = v125 + 1;
        v0 = v119;
        v42 = &selRef_preprocessDataInSource_options_error_;
        v1 = 0x1F260B000;
        if (v117)
          goto LABEL_51;
      }
LABEL_65:
      __break(1u);
    }
    v127 = MEMORY[0x24BEE4AF8];
    sub_224F6818C();
    if (v2 < 0)
    {
      __break(1u);
      goto LABEL_70;
    }
LABEL_4:
    v3 = 0;
    v4 = v1 & 0xC000000000000001;
    v5 = *(_QWORD *)(v0 + 616) + 32;
    do
    {
      if (v4)
        v6 = (id)MEMORY[0x22768E1CC](v3, *(_QWORD *)(v0 + 616));
      else
        v6 = *(id *)(v5 + 8 * v3);
      v7 = v6;
      ++v3;
      v1 = (unint64_t)objc_msgSend(v6, sel_asSignedClinicalDataItem);

      sub_224F68174();
      sub_224F68198();
      sub_224F681A4();
      sub_224F68180();
    }
    while (v2 != v3);
    v108 = v127;
    v128 = MEMORY[0x24BEE4AF8];
    sub_224E53720(0, v2, 0);
    v8 = 0;
    v9 = v128;
    v116 = v4;
    v109 = v5;
    v110 = v2;
    while (1)
    {
      if (v8 == v2)
      {
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      v120 = v8;
      v122 = v9;
      if (v4)
        v10 = (id)MEMORY[0x22768E1CC]();
      else
        v10 = *(id *)(v5 + 8 * v8);
      v11 = v10;
      v1 = (unint64_t)objc_msgSend(v10, sel_primaryConcept);
      v12 = objc_msgSend((id)v1, sel_localizedPreferredName);

      if (v12)
      {
        v13 = sub_224F67B80();
        v15 = v14;

        v16 = HIBYTE(v15) & 0xF;
        if ((v15 & 0x2000000000000000) == 0)
          v16 = v13 & 0xFFFFFFFFFFFFLL;
        if (v16)
          goto LABEL_46;
        swift_bridgeObjectRelease();
      }
      v17 = objc_msgSend(v11, sel_medicalRecordCodings);
      sub_224E5451C(0, (unint64_t *)&qword_2557E1648);
      v18 = sub_224F67D6C();

      if (v18 >> 62)
      {
        swift_bridgeObjectRetain();
        v124 = sub_224F681D4();
        if (v124)
        {
LABEL_21:
          v112 = v11;
          v20 = (void *)objc_opt_self();
          v21 = 0;
          v0 = v124;
          while (1)
          {
            v22 = (v18 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x22768E1CC](v21, v18)
                : *(id *)(v18 + 8 * v21 + 32);
            v23 = v22;
            v24 = v21 + 1;
            if (__OFADD__(v21, 1))
              break;
            v25 = objc_msgSend(v22, sel_codingSystem);
            v1 = (unint64_t)objc_msgSend(v20, sel_textSystem);
            if (v25)
            {
              sub_224E5451C(0, &qword_2557E27E8);
              v26 = v25;
              v27 = sub_224F67F28();

              if ((v27 & 1) != 0)
              {
                swift_bridgeObjectRelease_n();
                v28 = objc_msgSend(v23, sel_displayString);

                if (v28)
                {
                  v13 = sub_224F67B80();
                  v15 = v29;

                  goto LABEL_35;
                }
LABEL_32:
                v13 = 0;
                v15 = 0xE000000000000000;
LABEL_35:
                v4 = v116;
                v0 = v119;
                v5 = v109;
                v2 = v110;
                v11 = v112;
                goto LABEL_38;
              }
              v1 = (unint64_t)v23;
              v0 = v124;
            }
            else
            {

            }
            ++v21;
            if (v24 == v0)
            {
              swift_bridgeObjectRelease_n();
              goto LABEL_32;
            }
          }
          __break(1u);
          goto LABEL_64;
        }
      }
      else
      {
        v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        v124 = v19;
        if (v19)
          goto LABEL_21;
      }
      swift_bridgeObjectRelease_n();
      v13 = 0;
      v15 = 0xE000000000000000;
LABEL_38:
      v30 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000) == 0)
        v30 = v13 & 0xFFFFFFFFFFFFLL;
      if (!v30)
      {
        swift_bridgeObjectRelease();
        v31 = sub_224F577C8();
        v15 = v32;
        v33 = HIBYTE(v32) & 0xF;
        if ((v32 & 0x2000000000000000) == 0)
          v33 = v31 & 0xFFFFFFFFFFFFLL;
        if (v33)
        {
          v13 = v31;
        }
        else
        {
          swift_bridgeObjectRelease();
          v34 = objc_msgSend(v11, sel_fallbackDisplayString);
          v13 = sub_224F67B80();
          v15 = v35;

        }
      }
LABEL_46:

      v36 = v120;
      v9 = v122;
      v38 = *(_QWORD *)(v122 + 16);
      v37 = *(_QWORD *)(v122 + 24);
      v1 = v38 + 1;
      if (v38 >= v37 >> 1)
      {
        sub_224E53720(v37 > 1, v38 + 1, 1);
        v36 = v120;
        v9 = v122;
      }
      v8 = v36 + 1;
      *(_QWORD *)(v9 + 16) = v1;
      v39 = v9 + 16 * v38;
      *(_QWORD *)(v39 + 32) = v13;
      *(_QWORD *)(v39 + 40) = v15;
      if (v8 == v2)
      {
        v123 = v9;
        goto LABEL_50;
      }
    }
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    v127 = MEMORY[0x24BEE4AF8];
    sub_224F6818C();
    v114 = v2;
    goto LABEL_4;
  }
LABEL_70:
  v96 = *(void **)(v0 + 600);
  v97 = *(_QWORD *)(v0 + 536);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_224ECF1EC();
  swift_allocError();
  *v98 = 1;
  swift_willThrow();

  sub_224F07040(v97);
LABEL_71:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F63474()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 536);

  sub_224F07040(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F63544(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v2 + 136) = a1;
  sub_224F65AB8();
  *(_QWORD *)(v2 + 144) = v3;
  *(_QWORD *)(v2 + 152) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 160) = swift_task_alloc();
  sub_224F65BB4();
  *(_QWORD *)(v2 + 168) = v4;
  *(_QWORD *)(v2 + 176) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 184) = swift_task_alloc();
  *(_QWORD *)(v2 + 192) = swift_task_alloc();
  sub_224F65C6C();
  *(_QWORD *)(v2 + 200) = v5;
  *(_QWORD *)(v2 + 208) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 216) = swift_task_alloc();
  sub_224F65DD4();
  *(_QWORD *)(v2 + 224) = v6;
  *(_QWORD *)(v2 + 232) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v2 + 240) = swift_task_alloc();
  *(_QWORD *)(v2 + 248) = swift_task_alloc();
  sub_224F65E8C();
  *(_QWORD *)(v2 + 256) = v7;
  *(_QWORD *)(v2 + 264) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v2 + 272) = swift_task_alloc();
  v8 = *(_QWORD *)(type metadata accessor for RecordExtractionContext() - 8);
  *(_QWORD *)(v2 + 280) = v8;
  *(_QWORD *)(v2 + 288) = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v2 + 296) = swift_task_alloc();
  sub_224F65F88();
  *(_QWORD *)(v2 + 304) = v9;
  *(_QWORD *)(v2 + 312) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v2 + 320) = swift_task_alloc();
  *(_QWORD *)(v2 + 328) = swift_task_alloc();
  *(_OWORD *)(v2 + 336) = *(_OWORD *)(v1 + 168);
  *(_QWORD *)(v2 + 352) = *(_QWORD *)(v1 + 184);
  return swift_task_switch();
}

uint64_t sub_224F636D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 344);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 328);
    v3 = *(_QWORD *)(v0 + 304);
    v34 = *(_QWORD *)(v0 + 312);
    v37 = *(_QWORD *)(v0 + 320);
    v4 = *(_QWORD *)(v0 + 296);
    v5 = *(_QWORD *)(v0 + 280);
    sub_224DDB408(*(_QWORD *)(v0 + 136), v4, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v7 = swift_allocObject();
    sub_224F45240(v4, v7 + v6);
    *(_QWORD *)(v0 + 104) = v1;
    sub_224E54704(0, &qword_2557E2B30, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_224F20E84();
    sub_224F65D24(&qword_2557E4888, &qword_2557E2B30, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory, (uint64_t (*)(void))sub_224F65F44);
    swift_bridgeObjectRetain();
    sub_224F68468();
    v8 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 112) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 120) = v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v37, v2, v3);
    sub_224DDACD4(&qword_2557E48F0, (uint64_t (*)(uint64_t))sub_224F65F88, MEMORY[0x24BEE70D8]);
    sub_224F67E5C();
    *(_QWORD *)(v0 + 360) = sub_224DDACD4(&qword_2557E48F8, (uint64_t (*)(uint64_t))sub_224F65E8C, MEMORY[0x24BEE70C0]);
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 368) = v9;
    *v9 = v0;
    v9[1] = sub_224F63D64;
    return sub_224F67DFC();
  }
  v10 = *(_QWORD *)(v0 + 352);
  if (v10)
  {
    v11 = *(_QWORD *)(v0 + 296);
    v12 = *(_QWORD *)(v0 + 280);
    v13 = *(_QWORD *)(v0 + 248);
    v14 = *(_QWORD *)(v0 + 224);
    v35 = *(_QWORD *)(v0 + 232);
    v38 = *(_QWORD *)(v0 + 240);
    sub_224DDB408(*(_QWORD *)(v0 + 136), v11, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v16 = swift_allocObject();
    sub_224F45240(v11, v16 + v15);
    *(_QWORD *)(v0 + 72) = v10;
    sub_224E54704(0, &qword_2557E2B48, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_224F20E84();
    sub_224F65D24(&qword_2557E4868, &qword_2557E2B48, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination, (uint64_t (*)(void))sub_224F65D90);
    swift_bridgeObjectRetain();
    sub_224F68468();
    v17 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 80) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 128) = v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v38, v13, v14);
    sub_224DDACD4(&qword_2557E48D0, (uint64_t (*)(uint64_t))sub_224F65DD4, MEMORY[0x24BEE70D8]);
    sub_224F67E5C();
    *(_QWORD *)(v0 + 392) = sub_224DDACD4(&qword_2557E48D8, (uint64_t (*)(uint64_t))sub_224F65C6C, MEMORY[0x24BEE70C0]);
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 400) = v18;
    *v18 = v0;
    v18[1] = sub_224F64208;
    return sub_224F67DFC();
  }
  v19 = *(_QWORD *)(v0 + 336);
  if (v19)
  {
    v20 = *(_QWORD *)(v0 + 296);
    v21 = *(_QWORD *)(v0 + 280);
    v22 = *(_QWORD *)(v0 + 192);
    v23 = *(_QWORD *)(v0 + 168);
    v36 = *(_QWORD *)(v0 + 176);
    v39 = *(_QWORD *)(v0 + 184);
    sub_224DDB408(*(_QWORD *)(v0 + 136), v20, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    v24 = (*(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    v25 = swift_allocObject();
    sub_224F45240(v20, v25 + v24);
    *(_QWORD *)(v0 + 88) = v19;
    sub_224E54704(0, &qword_2557E2B18, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_224F20E84();
    sub_224F65D24(&qword_2557E4848, &qword_2557E2B18, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery, (uint64_t (*)(void))sub_224F65B70);
    swift_bridgeObjectRetain();
    sub_224F68468();
    v26 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 96) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 64) = v26;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v39, v22, v23);
    sub_224DDACD4(&qword_2557E48B0, (uint64_t (*)(uint64_t))sub_224F65BB4, MEMORY[0x24BEE70D8]);
    sub_224F67E5C();
    *(_QWORD *)(v0 + 424) = sub_224DDACD4(&qword_2557E48B8, (uint64_t (*)(uint64_t))sub_224F65AB8, MEMORY[0x24BEE70C0]);
    v27 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 432) = v27;
    *v27 = v0;
    v27[1] = sub_224F646B0;
    return sub_224F67DFC();
  }
  if (qword_2557E0128 != -1)
    swift_once();
  v29 = sub_224F679B8();
  __swift_project_value_buffer(v29, (uint64_t)qword_2557FC958);
  v30 = sub_224F679AC();
  v31 = sub_224F67ED4();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v32 = 0;
    _os_log_impl(&dword_224DAC000, v30, v31, "SignedClinicalDataEUDCC.extractMedicalAndClinicalRecords: no certificates found in EU-DCC hcert", v32, 2u);
    MEMORY[0x22768EDE4](v32, -1, -1);
  }

  sub_224ECF1EC();
  swift_allocError();
  *v33 = 3;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F63D64()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[47] = v0;
    v4 = v2[33];
    v3 = v2[34];
    v5 = v2[32];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_224F63DF8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(void **)(v0 + 24);
    v3 = v1;
    MEMORY[0x22768DE24]();
    if (*(_QWORD *)((*(_QWORD *)(v0 + 112) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 112) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();
    v4 = v2;
    MEMORY[0x22768DE24]();
    if (*(_QWORD *)(*(_QWORD *)(v0 + 120) + 16) >= *(_QWORD *)(*(_QWORD *)(v0 + 120) + 24) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();

    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 384) = v5;
    *v5 = v0;
    v5[1] = sub_224F64174;
    return sub_224F67DFC();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 328);
    v9 = *(_QWORD *)(v0 + 304);
    v8 = *(_QWORD *)(v0 + 312);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 8))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 256));
    sub_224F21280(*(void **)(v0 + 16), *(void **)(v0 + 24));
    v10 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v11 = MEMORY[0x24BEE4AF8];
    v17 = MEMORY[0x24BEE4AF8];
    v12 = *(_QWORD *)(v10 + 16);
    if (v12)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v12; ++i)
      {
        v14 = *(void **)(v10 + 8 * i + 32);
        if (v14)
        {
          v15 = v14;
          MEMORY[0x22768DE24]();
          if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_224F67D90();
          sub_224F67D9C();
          sub_224F67D84();
        }
      }
      swift_bridgeObjectRelease();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v16, v11);
  }
}

uint64_t sub_224F640A8()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 304));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F64174()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[47] = v0;
    v4 = v2[33];
    v3 = v2[34];
    v5 = v2[32];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_224F64208()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[51] = v0;
    v4 = v2[26];
    v3 = v2[27];
    v5 = v2[25];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_224F6429C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void **)(v0 + 32);
  if (v1)
  {
    v2 = *(void **)(v0 + 40);
    v3 = v1;
    MEMORY[0x22768DE24]();
    if (*(_QWORD *)((*(_QWORD *)(v0 + 80) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 80) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();
    v4 = v2;
    MEMORY[0x22768DE24]();
    if (*(_QWORD *)(*(_QWORD *)(v0 + 128) + 16) >= *(_QWORD *)(*(_QWORD *)(v0 + 128) + 24) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();

    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 416) = v5;
    *v5 = v0;
    v5[1] = sub_224F6461C;
    return sub_224F67DFC();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 248);
    v9 = *(_QWORD *)(v0 + 224);
    v8 = *(_QWORD *)(v0 + 232);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
    sub_224F21280(*(void **)(v0 + 32), *(void **)(v0 + 40));
    v16 = *(_QWORD *)(v0 + 80);
    v10 = *(_QWORD *)(v0 + 128);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v11 = MEMORY[0x24BEE4AF8];
    v17 = MEMORY[0x24BEE4AF8];
    v12 = *(_QWORD *)(v10 + 16);
    if (v12)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v12; ++i)
      {
        v14 = *(void **)(v10 + 8 * i + 32);
        if (v14)
        {
          v15 = v14;
          MEMORY[0x22768DE24]();
          if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_224F67D90();
          sub_224F67D9C();
          sub_224F67D84();
        }
      }
      swift_bridgeObjectRelease();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v16, v11);
  }
}

uint64_t sub_224F64550()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 224));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F6461C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[51] = v0;
    v4 = v2[26];
    v3 = v2[27];
    v5 = v2[25];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_224F646B0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[55] = v0;
    v4 = v2[19];
    v3 = v2[20];
    v5 = v2[18];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_224F64744()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void **)(v0 + 48);
  if (v1)
  {
    v2 = *(void **)(v0 + 56);
    v3 = v1;
    MEMORY[0x22768DE24]();
    if (*(_QWORD *)((*(_QWORD *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 96) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();
    v4 = v2;
    MEMORY[0x22768DE24]();
    if (*(_QWORD *)(*(_QWORD *)(v0 + 64) + 16) >= *(_QWORD *)(*(_QWORD *)(v0 + 64) + 24) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();

    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 448) = v5;
    *v5 = v0;
    v5[1] = sub_224F64AC4;
    return sub_224F67DFC();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 192);
    v9 = *(_QWORD *)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 176);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    sub_224F21280(*(void **)(v0 + 48), *(void **)(v0 + 56));
    v16 = *(_QWORD *)(v0 + 96);
    v10 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v11 = MEMORY[0x24BEE4AF8];
    v17 = MEMORY[0x24BEE4AF8];
    v12 = *(_QWORD *)(v10 + 16);
    if (v12)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v12; ++i)
      {
        v14 = *(void **)(v10 + 8 * i + 32);
        if (v14)
        {
          v15 = v14;
          MEMORY[0x22768DE24]();
          if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_224F67D90();
          sub_224F67D9C();
          sub_224F67D84();
        }
      }
      swift_bridgeObjectRelease();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v16, v11);
  }
}

uint64_t sub_224F649F8()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F64AC4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[55] = v0;
    v4 = v2[19];
    v3 = v2[20];
    v5 = v2[18];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_224F64B58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v15;
  void *v16;
  id v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  sub_224E63218(0, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v18 - v2;
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_BYTE *)(v0 + 96);
  v6 = *(_BYTE *)(v0 + 97);
  v7 = *(_BYTE *)(v0 + 98);
  v20 = *(unsigned __int8 *)(v0 + 99);
  v9 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 160);
  v21 = *(_QWORD *)(v0 + 104);
  v19 = *(_OWORD *)(v0 + 112);
  v22 = v19;
  v23 = v9;
  v24 = v8;
  v18 = *(_OWORD *)(v0 + 144);
  v25 = v18;
  v26 = v10;
  v11 = sub_224F677D8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v3, 1, 1, v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_224F64D5C((uint64_t)v3);
  sub_224ED8B58((uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v4;
  LOBYTE(v22) = v5;
  BYTE1(v22) = v6;
  BYTE2(v22) = v7;
  BYTE3(v22) = v20;
  v12 = v27;
  v13 = FHIRDate.asMedicalDate()();
  if (v12)
    return swift_bridgeObjectRelease();
  v15 = v13;
  v16 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v17 = objc_msgSend((id)objc_opt_self(), sel_subjectWithFullName_birthDate_gender_emailAddresses_phoneNumbers_, v16, v15, 0, 0, 0);

  return (uint64_t)v17;
}

uint64_t sub_224F64D5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  char *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v26 = a1;
  sub_224E63218(0, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v23 - v3;
  v5 = sub_224F677D8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v25 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_224F674D8();
  v27 = *(_QWORD *)(v8 - 8);
  v28 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v1[1];
  v12 = v1[2];
  v23 = v1[3];
  v24 = v12;
  v14 = v1[5];
  v13 = v1[6];
  v15 = v1[7];
  sub_224F674CC();
  if (!v14 && v15)
  {
    v33 = v13;
    v34 = v15;
    v31 = 60;
    v32 = 0xE100000000000000;
    v29 = 32;
    v30 = 0xE100000000000000;
    sub_224E51E94();
    sub_224F68030();
  }
  swift_bridgeObjectRetain();
  sub_224F67490();
  if (!v11)
  {
    v33 = v24;
    v34 = v23;
    v31 = 60;
    v32 = 0xE100000000000000;
    v29 = 32;
    v30 = 0xE100000000000000;
    sub_224E51E94();
    sub_224F68030();
  }
  swift_bridgeObjectRetain();
  sub_224F6749C();
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1738]), sel_init);
  objc_msgSend(v16, sel_setStyle_, 0);
  sub_224E75F34(v26, (uint64_t)v4, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_224ED8B58((uint64_t)v4);
  }
  else
  {
    v17 = v25;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v25, v4, v5);
    v18 = (void *)sub_224F677C0();
    objc_msgSend(v16, sel_setLocale_, v18);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
  }
  v19 = (void *)sub_224F674C0();
  v20 = objc_msgSend(v16, sel_stringFromPersonNameComponents_, v19);

  v21 = sub_224F67B80();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
  return v21;
}

uint64_t sub_224F650A4(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;

  *(_QWORD *)(v3 + 344) = a2;
  *(_QWORD *)(v3 + 352) = a3;
  *(_QWORD *)(v3 + 336) = a1;
  v5 = a2[7];
  *(_OWORD *)(v3 + 112) = a2[6];
  *(_OWORD *)(v3 + 128) = v5;
  v6 = a2[9];
  *(_OWORD *)(v3 + 144) = a2[8];
  *(_OWORD *)(v3 + 160) = v6;
  v7 = a2[3];
  *(_OWORD *)(v3 + 48) = a2[2];
  *(_OWORD *)(v3 + 64) = v7;
  v8 = a2[5];
  *(_OWORD *)(v3 + 80) = a2[4];
  *(_OWORD *)(v3 + 96) = v8;
  v9 = a2[1];
  *(_OWORD *)(v3 + 16) = *a2;
  *(_OWORD *)(v3 + 32) = v9;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 360) = v10;
  *v10 = v3;
  v10[1] = sub_224F65124;
  return sub_224EF29DC(a3);
}

uint64_t sub_224F65124(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;

  v4 = *v2;
  *(_QWORD *)(v4 + 368) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  v6 = *(_OWORD **)(v4 + 344);
  *(_QWORD *)(v4 + 376) = a1;
  v7 = v6[1];
  *(_OWORD *)(v4 + 176) = *v6;
  *(_OWORD *)(v4 + 192) = v7;
  v8 = v6[6];
  v9 = v6[7];
  v10 = v6[9];
  *(_OWORD *)(v4 + 304) = v6[8];
  *(_OWORD *)(v4 + 320) = v10;
  *(_OWORD *)(v4 + 272) = v8;
  *(_OWORD *)(v4 + 288) = v9;
  v11 = v6[2];
  v12 = v6[3];
  v13 = v6[5];
  *(_OWORD *)(v4 + 240) = v6[4];
  *(_OWORD *)(v4 + 256) = v13;
  *(_OWORD *)(v4 + 208) = v11;
  *(_OWORD *)(v4 + 224) = v12;
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 384) = v14;
  *v14 = v4;
  v14[1] = sub_224F651FC;
  return sub_224EF3310(*(_QWORD *)(v4 + 352), a1);
}

uint64_t sub_224F651FC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 392) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F65258()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD **)(v0 + 336);
  *v2 = *(_QWORD *)(v0 + 376);
  v2[1] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F65274()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F65280(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;

  *(_QWORD *)(v3 + 312) = a2;
  *(_QWORD *)(v3 + 320) = a3;
  *(_QWORD *)(v3 + 304) = a1;
  v5 = a2[7];
  *(_OWORD *)(v3 + 112) = a2[6];
  *(_OWORD *)(v3 + 128) = v5;
  *(_OWORD *)(v3 + 144) = a2[8];
  v6 = a2[3];
  *(_OWORD *)(v3 + 48) = a2[2];
  *(_OWORD *)(v3 + 64) = v6;
  v7 = a2[5];
  *(_OWORD *)(v3 + 80) = a2[4];
  *(_OWORD *)(v3 + 96) = v7;
  v8 = a2[1];
  *(_OWORD *)(v3 + 16) = *a2;
  *(_OWORD *)(v3 + 32) = v8;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 328) = v9;
  *v9 = v3;
  v9[1] = sub_224F65300;
  return sub_224EFDAC0(a3);
}

uint64_t sub_224F65300(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;

  v4 = *v2;
  *(_QWORD *)(v4 + 336) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  v6 = *(_OWORD **)(v4 + 312);
  *(_QWORD *)(v4 + 344) = a1;
  *(_OWORD *)(v4 + 160) = *v6;
  v7 = v6[5];
  v8 = v6[6];
  v9 = v6[8];
  *(_OWORD *)(v4 + 272) = v6[7];
  *(_OWORD *)(v4 + 288) = v9;
  *(_OWORD *)(v4 + 240) = v7;
  *(_OWORD *)(v4 + 256) = v8;
  v10 = v6[1];
  v11 = v6[2];
  v12 = v6[4];
  *(_OWORD *)(v4 + 208) = v6[3];
  *(_OWORD *)(v4 + 224) = v12;
  *(_OWORD *)(v4 + 176) = v10;
  *(_OWORD *)(v4 + 192) = v11;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 352) = v13;
  *v13 = v4;
  v13[1] = sub_224F653D8;
  return sub_224EFE070(*(_QWORD *)(v4 + 320), a1);
}

uint64_t sub_224F653D8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 360) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F65434()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD **)(v0 + 304);
  *v2 = *(_QWORD *)(v0 + 344);
  v2[1] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F65450()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F6545C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3[30] = a1;
  v3[31] = a3;
  v5 = *a2;
  v6 = a2[1];
  v3[32] = *a2;
  v3[33] = v6;
  v7 = a2[2];
  v8 = a2[3];
  v3[34] = v7;
  v3[35] = v8;
  v9 = a2[4];
  v10 = a2[5];
  v3[36] = v9;
  v3[37] = v10;
  v11 = a2[6];
  v12 = a2[7];
  v3[38] = v11;
  v3[39] = v12;
  v13 = a2[8];
  v14 = a2[9];
  v3[40] = v13;
  v3[41] = v14;
  v15 = a2[10];
  v16 = a2[11];
  v3[42] = v15;
  v3[43] = v16;
  v18 = a2[12];
  v17 = a2[13];
  v3[44] = v18;
  v3[45] = v17;
  v3[2] = v5;
  v3[3] = v6;
  v3[4] = v7;
  v3[5] = v8;
  v3[6] = v9;
  v3[7] = v10;
  v3[8] = v11;
  v3[9] = v12;
  v3[10] = v13;
  v3[11] = v14;
  v3[12] = v15;
  v3[13] = v16;
  v3[14] = v18;
  v3[15] = v17;
  v19 = (_QWORD *)swift_task_alloc();
  v3[46] = v19;
  *v19 = v3;
  v19[1] = sub_224F65508;
  return sub_224EF05C4(a3);
}

uint64_t sub_224F65508(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;

  v4 = *v2;
  *(_QWORD *)(v4 + 376) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(v4 + 256);
  v7 = *(_QWORD *)(v4 + 352);
  v6 = *(_QWORD *)(v4 + 360);
  v9 = *(_OWORD *)(v4 + 320);
  v8 = *(_OWORD *)(v4 + 336);
  v11 = *(_OWORD *)(v4 + 288);
  v10 = *(_OWORD *)(v4 + 304);
  v12 = *(_OWORD *)(v4 + 272);
  *(_QWORD *)(v4 + 384) = a1;
  *(_OWORD *)(v4 + 144) = v12;
  *(_OWORD *)(v4 + 160) = v11;
  *(_OWORD *)(v4 + 176) = v10;
  *(_OWORD *)(v4 + 192) = v9;
  *(_OWORD *)(v4 + 208) = v8;
  *(_QWORD *)(v4 + 224) = v7;
  *(_QWORD *)(v4 + 232) = v6;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 392) = v13;
  *v13 = v4;
  v13[1] = sub_224F655DC;
  return sub_224EF0E9C(*(_QWORD *)(v4 + 248), a1);
}

uint64_t sub_224F655DC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 400) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F65638()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD **)(v0 + 240);
  *v2 = *(_QWORD *)(v0 + 384);
  v2[1] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F65654()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_224F65660(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v21 - v10;
  v13 = *(_QWORD *)(v4 + 56);
  v12 = *(_QWORD *)(v4 + 64);
  sub_224E75F34(a3, (uint64_t)&v21 - v10, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  sub_224DDE970(a1, a2);
  v14 = sub_224F65804(v13, v12);
  v16 = v15;
  v17 = sub_224F6764C();
  v19 = v18;
  objc_allocWithZone(MEMORY[0x24BE48998]);
  swift_bridgeObjectRetain();
  return sub_224E5A598(a1, a2, 2, (uint64_t)v11, v14, v16, v17, v19, 0, 0xF000000000000000, 0, a4);
}

uint64_t sub_224F657A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_224ECF198;
  return sub_224F622E4(a1, a2);
}

uint64_t sub_224F65804(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    swift_bridgeObjectRetain();
  else
    sub_224F67B80();
  v4 = sub_224F67B80();
  swift_bridgeObjectRetain();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

id sub_224F658B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v27;
  void *v29;
  id v30;

  v27 = (void *)sub_224F67640();
  v14 = sub_224F675D4();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(a4, 1, v14) != 1)
  {
    v16 = (void *)sub_224F67580();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a4, v14);
  }
  v17 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v18 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v19 = (void *)sub_224F67784();
  if (a9)
  {
    sub_224E54308();
    v20 = (void *)sub_224F67AE4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = 0;
  }
  v21 = (void *)sub_224F67718();
  v22 = (void *)sub_224F67850();
  v30 = objc_msgSend(v29, sel_initWithRawContent_sourceType_sourceURL_issuerIdentifier_credentialTypes_syncIdentifier_metadata_receivedDate_receivedDateTimeZone_signatureStatus_, v27, a3, v16, v17, v18, v19, v20, v21, v22, a12);

  v23 = sub_224F67874();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(a11, v23);
  v24 = sub_224F67760();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a10, v24);
  v25 = sub_224F677A8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(a8, v25);
  return v30;
}

void sub_224F65AB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E4840)
  {
    sub_224E54704(255, &qword_2557E2B18, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_224F20E84();
    sub_224F65D24(&qword_2557E4848, &qword_2557E2B18, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery, (uint64_t (*)(void))sub_224F65B70);
    v0 = sub_224F68450();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E4840);
  }
}

unint64_t sub_224F65B70()
{
  unint64_t result;

  result = qword_2557E4850;
  if (!qword_2557E4850)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry.Recovery, &type metadata for SignedClinicalDataEUDCCEntry.Recovery);
    atomic_store(result, (unint64_t *)&qword_2557E4850);
  }
  return result;
}

void sub_224F65BB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E4858)
  {
    sub_224E54704(255, &qword_2557E2B18, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_224F20E84();
    sub_224F65D24(&qword_2557E4848, &qword_2557E2B18, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery, (uint64_t (*)(void))sub_224F65B70);
    v0 = sub_224F6845C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E4858);
  }
}

void sub_224F65C6C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E4860)
  {
    sub_224E54704(255, &qword_2557E2B48, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_224F20E84();
    sub_224F65D24(&qword_2557E4868, &qword_2557E2B48, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination, (uint64_t (*)(void))sub_224F65D90);
    v0 = sub_224F68450();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E4860);
  }
}

uint64_t sub_224F65D24(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_224E54704(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v8 = v7;
    v9 = a4();
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for <A> [A], v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_224F65D90()
{
  unint64_t result;

  result = qword_2557E4870;
  if (!qword_2557E4870)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry.Vaccination, &type metadata for SignedClinicalDataEUDCCEntry.Vaccination);
    atomic_store(result, (unint64_t *)&qword_2557E4870);
  }
  return result;
}

void sub_224F65DD4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E4878)
  {
    sub_224E54704(255, &qword_2557E2B48, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_224F20E84();
    sub_224F65D24(&qword_2557E4868, &qword_2557E2B48, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination, (uint64_t (*)(void))sub_224F65D90);
    v0 = sub_224F6845C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E4878);
  }
}

void sub_224F65E8C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E4880)
  {
    sub_224E54704(255, &qword_2557E2B30, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_224F20E84();
    sub_224F65D24(&qword_2557E4888, &qword_2557E2B30, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory, (uint64_t (*)(void))sub_224F65F44);
    v0 = sub_224F68450();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E4880);
  }
}

unint64_t sub_224F65F44()
{
  unint64_t result;

  result = qword_2557E4890;
  if (!qword_2557E4890)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry.Laboratory, &type metadata for SignedClinicalDataEUDCCEntry.Laboratory);
    atomic_store(result, (unint64_t *)&qword_2557E4890);
  }
  return result;
}

void sub_224F65F88()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E4898)
  {
    sub_224E54704(255, &qword_2557E2B30, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_224F20E84();
    sub_224F65D24(&qword_2557E4888, &qword_2557E2B30, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory, (uint64_t (*)(void))sub_224F65F44);
    v0 = sub_224F6845C();
    if (!v1)
      atomic_store(v0, &qword_2557E4898);
  }
}

uint64_t sub_224F66044(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RecordExtractionContext() - 8) + 80);
  v7 = v2 + ((v6 + 16) & ~v6);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_224EF7B90;
  return sub_224F6545C(a1, a2, v7);
}

uint64_t sub_224F660C8(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RecordExtractionContext() - 8) + 80);
  v7 = v2 + ((v6 + 16) & ~v6);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_224EF7B90;
  return sub_224F65280(a1, a2, v7);
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for RecordExtractionContext();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 16) & ~v2;

  v4 = v0 + v3 + *(int *)(v1 + 20);
  v5 = type metadata accessor for ExtractionContext();
  v6 = v4 + *(int *)(v5 + 28);
  v7 = sub_224F67760();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = v4 + *(int *)(v5 + 32);
  v9 = sub_224F675D4();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_224F66264(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RecordExtractionContext() - 8) + 80);
  v7 = v2 + ((v6 + 16) & ~v6);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_224EF7808;
  return sub_224F650A4(a1, a2, v7);
}

void _RegularExpressionFromPattern_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = 138412546;
  v3 = 0;
  v4 = 2112;
  v5 = a1;
  _os_log_error_impl(&dword_224DAC000, a2, OS_LOG_TYPE_ERROR, "Error instantiating FHIR dateTime regex %@, error: %@", (uint8_t *)&v2, 0x16u);
}

void UIFoundationLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *UIFoundationLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HDHealthRecordsExtractionUtilities.m"), 24, CFSTR("%s"), *a1);

  __break(1u);
}

uint64_t sub_224F67280()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t sub_224F6728C()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t sub_224F67298()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t sub_224F672A4()
{
  return MEMORY[0x24BDCB288]();
}

uint64_t sub_224F672B0()
{
  return MEMORY[0x24BDCB2A0]();
}

uint64_t sub_224F672BC()
{
  return MEMORY[0x24BDCB2A8]();
}

uint64_t sub_224F672C8()
{
  return MEMORY[0x24BDCB2E0]();
}

uint64_t sub_224F672D4()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t sub_224F672E0()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t sub_224F672EC()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t sub_224F672F8()
{
  return MEMORY[0x24BDCB630]();
}

uint64_t sub_224F67304()
{
  return MEMORY[0x24BDCB648]();
}

uint64_t sub_224F67310()
{
  return MEMORY[0x24BDCB6A0]();
}

uint64_t sub_224F6731C()
{
  return MEMORY[0x24BDCB6C0]();
}

uint64_t sub_224F67328()
{
  return MEMORY[0x24BDCB6D0]();
}

uint64_t sub_224F67334()
{
  return MEMORY[0x24BDCB710]();
}

uint64_t sub_224F67340()
{
  return MEMORY[0x24BDCB728]();
}

uint64_t sub_224F6734C()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t sub_224F67358()
{
  return MEMORY[0x24BDCBAB0]();
}

uint64_t sub_224F67364()
{
  return MEMORY[0x24BDCBAC0]();
}

uint64_t sub_224F67370()
{
  return MEMORY[0x24BDCBAE0]();
}

uint64_t sub_224F6737C()
{
  return MEMORY[0x24BDCBAE8]();
}

uint64_t sub_224F67388()
{
  return MEMORY[0x24BDCBB28]();
}

uint64_t sub_224F67394()
{
  return MEMORY[0x24BDCBB78]();
}

uint64_t sub_224F673A0()
{
  return MEMORY[0x24BDCBBA0]();
}

uint64_t sub_224F673AC()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t sub_224F673B8()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_224F673C4()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_224F673D0()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_224F673DC()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t sub_224F673E8()
{
  return MEMORY[0x24BDCBCA0]();
}

uint64_t sub_224F673F4()
{
  return MEMORY[0x24BDCBCE0]();
}

uint64_t sub_224F67400()
{
  return MEMORY[0x24BDCBD00]();
}

uint64_t sub_224F6740C()
{
  return MEMORY[0x24BDCBD10]();
}

uint64_t sub_224F67418()
{
  return MEMORY[0x24BDCBD48]();
}

uint64_t sub_224F67424()
{
  return MEMORY[0x24BDCBD68]();
}

uint64_t sub_224F67430()
{
  return MEMORY[0x24BDCBDA8]();
}

uint64_t sub_224F6743C()
{
  return MEMORY[0x24BDCBDE0]();
}

uint64_t sub_224F67448()
{
  return MEMORY[0x24BDCBE48]();
}

uint64_t sub_224F67454()
{
  return MEMORY[0x24BDCBE60]();
}

uint64_t sub_224F67460()
{
  return MEMORY[0x24BDCBE68]();
}

uint64_t sub_224F6746C()
{
  return MEMORY[0x24BDCBE80]();
}

uint64_t sub_224F67478()
{
  return MEMORY[0x24BDCC1E0]();
}

uint64_t sub_224F67484()
{
  return MEMORY[0x24BDCC930]();
}

uint64_t sub_224F67490()
{
  return MEMORY[0x24BDCCB28]();
}

uint64_t sub_224F6749C()
{
  return MEMORY[0x24BDCCB38]();
}

uint64_t sub_224F674A8()
{
  return MEMORY[0x24BDCCB68]();
}

uint64_t sub_224F674B4()
{
  return MEMORY[0x24BDCCB78]();
}

uint64_t sub_224F674C0()
{
  return MEMORY[0x24BDCCBB0]();
}

uint64_t sub_224F674CC()
{
  return MEMORY[0x24BDCCC00]();
}

uint64_t sub_224F674D8()
{
  return MEMORY[0x24BDCCC10]();
}

uint64_t sub_224F674E4()
{
  return MEMORY[0x24BDCD280]();
}

uint64_t sub_224F674F0()
{
  return MEMORY[0x24BDCD288]();
}

uint64_t sub_224F674FC()
{
  return MEMORY[0x24BDCD290]();
}

uint64_t sub_224F67508()
{
  return MEMORY[0x24BDCD298]();
}

uint64_t sub_224F67514()
{
  return MEMORY[0x24BDCD2A8]();
}

uint64_t sub_224F67520()
{
  return MEMORY[0x24BDCD2B8]();
}

uint64_t sub_224F6752C()
{
  return MEMORY[0x24BDCD2C0]();
}

uint64_t sub_224F67538()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t sub_224F67544()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_224F67550()
{
  return MEMORY[0x24BDCD7B8]();
}

uint64_t sub_224F6755C()
{
  return MEMORY[0x24BDCD820]();
}

uint64_t sub_224F67568()
{
  return MEMORY[0x24BDCD830]();
}

uint64_t sub_224F67574()
{
  return MEMORY[0x24BDCD870]();
}

uint64_t sub_224F67580()
{
  return MEMORY[0x24BDCD8D0]();
}

uint64_t sub_224F6758C()
{
  return MEMORY[0x24BDCD8E8]();
}

uint64_t sub_224F67598()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t sub_224F675A4()
{
  return MEMORY[0x24BDCDA48]();
}

uint64_t sub_224F675B0()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t sub_224F675BC()
{
  return MEMORY[0x24BDCDA88]();
}

uint64_t sub_224F675C8()
{
  return MEMORY[0x24BDCDAA8]();
}

uint64_t sub_224F675D4()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_224F675E0()
{
  return MEMORY[0x24BDCDB60]();
}

uint64_t sub_224F675EC()
{
  return MEMORY[0x24BE10120]();
}

uint64_t sub_224F675F8()
{
  return MEMORY[0x24BDCDBF8]();
}

uint64_t sub_224F67604()
{
  return MEMORY[0x24BDCDC08]();
}

uint64_t sub_224F67610()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t sub_224F6761C()
{
  return MEMORY[0x24BDCDC28]();
}

uint64_t sub_224F67628()
{
  return MEMORY[0x24BDCDC40]();
}

uint64_t sub_224F67634()
{
  return MEMORY[0x24BDCDC58]();
}

uint64_t sub_224F67640()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_224F6764C()
{
  return MEMORY[0x24BDCDCA8]();
}

uint64_t sub_224F67658()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_224F67664()
{
  return MEMORY[0x24BDCDCF8]();
}

uint64_t sub_224F67670()
{
  return MEMORY[0x24BDCDD40]();
}

uint64_t sub_224F6767C()
{
  return MEMORY[0x24BDCDD68]();
}

uint64_t sub_224F67688()
{
  return MEMORY[0x24BDCDD78]();
}

uint64_t sub_224F67694()
{
  return MEMORY[0x24BDCDE70]();
}

uint64_t sub_224F676A0()
{
  return MEMORY[0x24BDCE2D8]();
}

uint64_t sub_224F676AC()
{
  return MEMORY[0x24BDCE2F0]();
}

uint64_t sub_224F676B8()
{
  return MEMORY[0x24BDCE2F8]();
}

uint64_t sub_224F676C4()
{
  return MEMORY[0x24BDCE320]();
}

uint64_t sub_224F676D0()
{
  return MEMORY[0x24BDCE350]();
}

uint64_t sub_224F676DC()
{
  return MEMORY[0x24BDCE378]();
}

uint64_t sub_224F676E8()
{
  return MEMORY[0x24BDCE3A0]();
}

uint64_t sub_224F676F4()
{
  return MEMORY[0x24BDCE3B8]();
}

uint64_t sub_224F67700()
{
  return MEMORY[0x24BDCE3E8]();
}

uint64_t sub_224F6770C()
{
  return MEMORY[0x24BDCE448]();
}

uint64_t sub_224F67718()
{
  return MEMORY[0x24BDCE5D8]();
}

uint64_t sub_224F67724()
{
  return MEMORY[0x24BDCE5E8]();
}

uint64_t sub_224F67730()
{
  return MEMORY[0x24BDCE778]();
}

uint64_t sub_224F6773C()
{
  return MEMORY[0x24BDCE878]();
}

uint64_t sub_224F67748()
{
  return MEMORY[0x24BDCE898]();
}

uint64_t sub_224F67754()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t sub_224F67760()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_224F6776C()
{
  return MEMORY[0x24BDCE998]();
}

uint64_t sub_224F67778()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t sub_224F67784()
{
  return MEMORY[0x24BDCE9D0]();
}

uint64_t sub_224F67790()
{
  return MEMORY[0x24BDCE9F8]();
}

uint64_t sub_224F6779C()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_224F677A8()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_224F677B4()
{
  return MEMORY[0x24BDCEB18]();
}

uint64_t sub_224F677C0()
{
  return MEMORY[0x24BDCEC90]();
}

uint64_t sub_224F677CC()
{
  return MEMORY[0x24BDCECE0]();
}

uint64_t sub_224F677D8()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_224F677E4()
{
  return MEMORY[0x24BDCEF80]();
}

uint64_t sub_224F677F0()
{
  return MEMORY[0x24BDCEFA0]();
}

uint64_t sub_224F677FC()
{
  return MEMORY[0x24BDCF050]();
}

uint64_t sub_224F67808()
{
  return MEMORY[0x24BDCF128]();
}

uint64_t sub_224F67814()
{
  return MEMORY[0x24BDCF290]();
}

uint64_t sub_224F67820()
{
  return MEMORY[0x24BDCF2D8]();
}

uint64_t sub_224F6782C()
{
  return MEMORY[0x24BDCF4B0]();
}

uint64_t sub_224F67838()
{
  return MEMORY[0x24BDCF4B8]();
}

uint64_t sub_224F67844()
{
  return MEMORY[0x24BDCF4C8]();
}

uint64_t sub_224F67850()
{
  return MEMORY[0x24BDCF4D8]();
}

uint64_t sub_224F6785C()
{
  return MEMORY[0x24BDCF4F0]();
}

uint64_t sub_224F67868()
{
  return MEMORY[0x24BDCF500]();
}

uint64_t sub_224F67874()
{
  return MEMORY[0x24BDCF510]();
}

uint64_t sub_224F67880()
{
  return MEMORY[0x24BE10128]();
}

uint64_t sub_224F6788C()
{
  return MEMORY[0x24BE10130]();
}

uint64_t sub_224F67898()
{
  return MEMORY[0x24BE10138]();
}

uint64_t sub_224F678A4()
{
  return MEMORY[0x24BE10140]();
}

uint64_t sub_224F678B0()
{
  return MEMORY[0x24BE10148]();
}

uint64_t sub_224F678BC()
{
  return MEMORY[0x24BE10150]();
}

uint64_t sub_224F678C8()
{
  return MEMORY[0x24BE10160]();
}

uint64_t sub_224F678D4()
{
  return MEMORY[0x24BE10170]();
}

uint64_t sub_224F678E0()
{
  return MEMORY[0x24BE10178]();
}

uint64_t sub_224F678EC()
{
  return MEMORY[0x24BEDFFA8]();
}

uint64_t sub_224F678F8()
{
  return MEMORY[0x24BEDFFB0]();
}

uint64_t sub_224F67904()
{
  return MEMORY[0x24BEDFFB8]();
}

uint64_t sub_224F67910()
{
  return MEMORY[0x24BEDFFD8]();
}

uint64_t sub_224F6791C()
{
  return MEMORY[0x24BEE0028]();
}

uint64_t sub_224F67928()
{
  return MEMORY[0x24BEE6190]();
}

uint64_t sub_224F67934()
{
  return MEMORY[0x24BEE6260]();
}

uint64_t sub_224F67940()
{
  return MEMORY[0x24BEE6270]();
}

uint64_t sub_224F6794C()
{
  return MEMORY[0x24BEE6278]();
}

uint64_t sub_224F67958()
{
  return MEMORY[0x24BEE6280]();
}

uint64_t sub_224F67964()
{
  return MEMORY[0x24BEE62C8]();
}

uint64_t sub_224F67970()
{
  return MEMORY[0x24BEE62D0]();
}

uint64_t sub_224F6797C()
{
  return MEMORY[0x24BEE62D8]();
}

uint64_t sub_224F67988()
{
  return MEMORY[0x24BEE63B0]();
}

uint64_t sub_224F67994()
{
  return MEMORY[0x24BEE63B8]();
}

uint64_t sub_224F679A0()
{
  return MEMORY[0x24BEE6410]();
}

uint64_t sub_224F679AC()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_224F679B8()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_224F679C4()
{
  return MEMORY[0x24BEE78E8]();
}

uint64_t sub_224F679D0()
{
  return MEMORY[0x24BDC62A8]();
}

uint64_t sub_224F679DC()
{
  return MEMORY[0x24BDC62B0]();
}

uint64_t sub_224F679E8()
{
  return MEMORY[0x24BDC62C8]();
}

uint64_t sub_224F679F4()
{
  return MEMORY[0x24BDC62F0]();
}

uint64_t sub_224F67A00()
{
  return MEMORY[0x24BDC6990]();
}

uint64_t sub_224F67A0C()
{
  return MEMORY[0x24BDC69C0]();
}

uint64_t sub_224F67A18()
{
  return MEMORY[0x24BDC69D0]();
}

uint64_t sub_224F67A24()
{
  return MEMORY[0x24BDC69F0]();
}

uint64_t sub_224F67A30()
{
  return MEMORY[0x24BDC69F8]();
}

uint64_t sub_224F67A3C()
{
  return MEMORY[0x24BDC6A00]();
}

uint64_t sub_224F67A48()
{
  return MEMORY[0x24BDC6A10]();
}

uint64_t sub_224F67A54()
{
  return MEMORY[0x24BDC6A20]();
}

uint64_t sub_224F67A60()
{
  return MEMORY[0x24BDC6A60]();
}

uint64_t sub_224F67A6C()
{
  return MEMORY[0x24BDC6AC0]();
}

uint64_t sub_224F67A78()
{
  return MEMORY[0x24BDC6AF8]();
}

uint64_t sub_224F67A84()
{
  return MEMORY[0x24BDC6B58]();
}

uint64_t sub_224F67A90()
{
  return MEMORY[0x24BDC6B90]();
}

uint64_t sub_224F67A9C()
{
  return MEMORY[0x24BDD20E0]();
}

uint64_t sub_224F67AA8()
{
  return MEMORY[0x24BDD20E8]();
}

uint64_t sub_224F67AB4()
{
  return MEMORY[0x24BDD2110]();
}

uint64_t sub_224F67AC0()
{
  return MEMORY[0x24BDD2120]();
}

uint64_t sub_224F67ACC()
{
  return MEMORY[0x24BDD2208]();
}

uint64_t sub_224F67AD8()
{
  return MEMORY[0x24BDD2210]();
}

uint64_t sub_224F67AE4()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_224F67AF0()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_224F67AFC()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t sub_224F67B08()
{
  return MEMORY[0x24BEE0500]();
}

uint64_t sub_224F67B14()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_224F67B20()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_224F67B2C()
{
  return MEMORY[0x24BEE06E8]();
}

uint64_t sub_224F67B38()
{
  return MEMORY[0x24BEE75F0]();
}

uint64_t sub_224F67B44()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_224F67B50()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_224F67B5C()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_224F67B68()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t sub_224F67B74()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t sub_224F67B80()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_224F67B8C()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t sub_224F67B98()
{
  return MEMORY[0x24BDCFA48]();
}

uint64_t sub_224F67BA4()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t sub_224F67BB0()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t sub_224F67BBC()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t sub_224F67BC8()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_224F67BD4()
{
  return MEMORY[0x24BEE0A10]();
}

uint64_t sub_224F67BE0()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t sub_224F67BEC()
{
  return MEMORY[0x24BEE0A58]();
}

uint64_t sub_224F67BF8()
{
  return MEMORY[0x24BEE0A80]();
}

uint64_t sub_224F67C04()
{
  return MEMORY[0x24BEE0A88]();
}

uint64_t sub_224F67C10()
{
  return MEMORY[0x24BEE0AA0]();
}

uint64_t sub_224F67C1C()
{
  return MEMORY[0x24BEE0AD0]();
}

uint64_t sub_224F67C28()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t sub_224F67C34()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_224F67C40()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t sub_224F67C4C()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t sub_224F67C58()
{
  return MEMORY[0x24BEE0B78]();
}

uint64_t sub_224F67C64()
{
  return MEMORY[0x24BEE0B80]();
}

uint64_t sub_224F67C70()
{
  return MEMORY[0x24BEE0B88]();
}

uint64_t sub_224F67C7C()
{
  return MEMORY[0x24BEE0BB0]();
}

uint64_t sub_224F67C88()
{
  return MEMORY[0x24BEE0BB8]();
}

uint64_t sub_224F67C94()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_224F67CA0()
{
  return MEMORY[0x24BEE0C00]();
}

uint64_t sub_224F67CAC()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_224F67CB8()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_224F67CC4()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_224F67CD0()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t sub_224F67CDC()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_224F67CE8()
{
  return MEMORY[0x24BEE0C60]();
}

uint64_t sub_224F67CF4()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_224F67D00()
{
  return MEMORY[0x24BEE0CC8]();
}

uint64_t sub_224F67D0C()
{
  return MEMORY[0x24BEE0D98]();
}

uint64_t sub_224F67D18()
{
  return MEMORY[0x24BEE0DC8]();
}

uint64_t sub_224F67D24()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_224F67D30()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t sub_224F67D3C()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_224F67D48()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_224F67D54()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_224F67D60()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_224F67D6C()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_224F67D78()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_224F67D84()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_224F67D90()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_224F67D9C()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_224F67DA8()
{
  return MEMORY[0x24BEE11C8]();
}

uint64_t sub_224F67DB4()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_224F67DC0()
{
  return MEMORY[0x24BEE1308]();
}

uint64_t sub_224F67DCC()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_224F67DD8()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t sub_224F67DE4()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_224F67DF0()
{
  return MEMORY[0x24BEE6830]();
}

uint64_t sub_224F67DFC()
{
  return MEMORY[0x24BEE68C8]();
}

uint64_t sub_224F67E08()
{
  return MEMORY[0x24BEE6908]();
}

uint64_t sub_224F67E14()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t sub_224F67E20()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t sub_224F67E2C()
{
  return MEMORY[0x24BEE6B10]();
}

uint64_t sub_224F67E38()
{
  return MEMORY[0x24BEE6B98]();
}

uint64_t sub_224F67E44()
{
  return MEMORY[0x24BEE6BB8]();
}

uint64_t sub_224F67E50()
{
  return MEMORY[0x24BEE6BC8]();
}

uint64_t sub_224F67E5C()
{
  return MEMORY[0x24BEE6C08]();
}

uint64_t sub_224F67E68()
{
  return MEMORY[0x24BDCFC40]();
}

uint64_t sub_224F67E74()
{
  return MEMORY[0x24BEE1370]();
}

uint64_t sub_224F67E80()
{
  return MEMORY[0x24BDCFCC0]();
}

uint64_t sub_224F67E8C()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_224F67E98()
{
  return MEMORY[0x24BEE1B68]();
}

uint64_t sub_224F67EA4()
{
  return MEMORY[0x24BEE5B28]();
}

uint64_t sub_224F67EB0()
{
  return MEMORY[0x24BDCFE70]();
}

uint64_t sub_224F67EBC()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t sub_224F67EC8()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t sub_224F67ED4()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_224F67EE0()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t sub_224F67EEC()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t sub_224F67EF8()
{
  return MEMORY[0x24BDD2588]();
}

uint64_t sub_224F67F04()
{
  return MEMORY[0x24BDD2598]();
}

uint64_t sub_224F67F10()
{
  return MEMORY[0x24BDD25B8]();
}

uint64_t sub_224F67F1C()
{
  return MEMORY[0x24BDD25E0]();
}

uint64_t sub_224F67F28()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t sub_224F67F34()
{
  return MEMORY[0x24BEE5BC8]();
}

uint64_t sub_224F67F40()
{
  return MEMORY[0x24BEE5BD0]();
}

uint64_t sub_224F67F4C()
{
  return MEMORY[0x24BDD0278]();
}

uint64_t sub_224F67F58()
{
  return MEMORY[0x24BDD02C0]();
}

uint64_t sub_224F67F64()
{
  return MEMORY[0x24BDD02D8]();
}

uint64_t sub_224F67F70()
{
  return MEMORY[0x24BDD02E0]();
}

uint64_t sub_224F67F7C()
{
  return MEMORY[0x24BDD02E8]();
}

uint64_t sub_224F67F88()
{
  return MEMORY[0x24BDD02F8]();
}

uint64_t sub_224F67F94()
{
  return MEMORY[0x24BDD0318]();
}

uint64_t sub_224F67FA0()
{
  return MEMORY[0x24BDD0330]();
}

uint64_t sub_224F67FAC()
{
  return MEMORY[0x24BDD0360]();
}

uint64_t sub_224F67FB8()
{
  return MEMORY[0x24BDD0410]();
}

uint64_t sub_224F67FC4()
{
  return MEMORY[0x24BDD0420]();
}

uint64_t sub_224F67FD0()
{
  return MEMORY[0x24BDD0438]();
}

uint64_t sub_224F67FDC()
{
  return MEMORY[0x24BDD0440]();
}

uint64_t sub_224F67FE8()
{
  return MEMORY[0x24BDD0448]();
}

uint64_t sub_224F67FF4()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_224F68000()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_224F6800C()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_224F68018()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t sub_224F68024()
{
  return MEMORY[0x24BDD0548]();
}

uint64_t sub_224F68030()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t sub_224F6803C()
{
  return MEMORY[0x24BDD0580]();
}

uint64_t sub_224F68048()
{
  return MEMORY[0x24BDD0600]();
}

uint64_t sub_224F68054()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t sub_224F68060()
{
  return MEMORY[0x24BEE5E68]();
}

uint64_t sub_224F6806C()
{
  return MEMORY[0x24BEE2090]();
}

uint64_t sub_224F68078()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t sub_224F68084()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t sub_224F68090()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_224F6809C()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_224F680A8()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_224F680B4()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_224F680C0()
{
  return MEMORY[0x24BEE24D8]();
}

uint64_t sub_224F680CC()
{
  return MEMORY[0x24BEE2500]();
}

uint64_t sub_224F680D8()
{
  return MEMORY[0x24BEE2508]();
}

uint64_t sub_224F680E4()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_224F680F0()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_224F680FC()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_224F68108()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t sub_224F68114()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_224F68120()
{
  return MEMORY[0x24BEE26F0]();
}

uint64_t sub_224F6812C()
{
  return MEMORY[0x24BEE26F8]();
}

uint64_t sub_224F68138()
{
  return MEMORY[0x24BEE2700]();
}

uint64_t sub_224F68144()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_224F68150()
{
  return MEMORY[0x24BEE2798]();
}

uint64_t sub_224F6815C()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_224F68168()
{
  return MEMORY[0x24BEE28D0]();
}

uint64_t sub_224F68174()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_224F68180()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_224F6818C()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t sub_224F68198()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_224F681A4()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_224F681B0()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_224F681BC()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_224F681C8()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_224F681D4()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_224F681E0()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_224F681EC()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_224F681F8()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_224F68204()
{
  return MEMORY[0x24BEE30A0]();
}

uint64_t sub_224F68210()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_224F6821C()
{
  return MEMORY[0x24BEE30E0]();
}

uint64_t sub_224F68228()
{
  return MEMORY[0x24BEE30E8]();
}

uint64_t sub_224F68234()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t sub_224F68240()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_224F6824C()
{
  return MEMORY[0x24BEE6FA8]();
}

uint64_t sub_224F68258()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_224F68264()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_224F68270()
{
  return MEMORY[0x24BEE32E0]();
}

uint64_t sub_224F6827C()
{
  return MEMORY[0x24BEE32E8]();
}

uint64_t sub_224F68288()
{
  return MEMORY[0x24BEE32F8]();
}

uint64_t sub_224F68294()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_224F682A0()
{
  return MEMORY[0x24BEE3340]();
}

uint64_t sub_224F682AC()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_224F682B8()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t sub_224F682C4()
{
  return MEMORY[0x24BEE3360]();
}

uint64_t sub_224F682D0()
{
  return MEMORY[0x24BEE3370]();
}

uint64_t sub_224F682DC()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_224F682E8()
{
  return MEMORY[0x24BEE33A0]();
}

uint64_t sub_224F682F4()
{
  return MEMORY[0x24BEE33E0]();
}

uint64_t sub_224F68300()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_224F6830C()
{
  return MEMORY[0x24BEE3430]();
}

uint64_t sub_224F68318()
{
  return MEMORY[0x24BEE3438]();
}

uint64_t sub_224F68324()
{
  return MEMORY[0x24BEE3448]();
}

uint64_t sub_224F68330()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_224F6833C()
{
  return MEMORY[0x24BEE3488]();
}

uint64_t sub_224F68348()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_224F68354()
{
  return MEMORY[0x24BEE34A8]();
}

uint64_t sub_224F68360()
{
  return MEMORY[0x24BEE34B0]();
}

uint64_t sub_224F6836C()
{
  return MEMORY[0x24BEE34C0]();
}

uint64_t sub_224F68378()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_224F68384()
{
  return MEMORY[0x24BEE34F0]();
}

uint64_t sub_224F68390()
{
  return MEMORY[0x24BEE3520]();
}

uint64_t sub_224F6839C()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_224F683A8()
{
  return MEMORY[0x24BEE3598]();
}

uint64_t sub_224F683B4()
{
  return MEMORY[0x24BEE7040]();
}

uint64_t sub_224F683C0()
{
  return MEMORY[0x24BEE3880]();
}

uint64_t sub_224F683CC()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_224F683D8()
{
  return MEMORY[0x24BEE3A58]();
}

uint64_t sub_224F683E4()
{
  return MEMORY[0x24BEE3A88]();
}

uint64_t sub_224F683F0()
{
  return MEMORY[0x24BEE3AC8]();
}

uint64_t sub_224F683FC()
{
  return MEMORY[0x24BEE3AF0]();
}

uint64_t sub_224F68408()
{
  return MEMORY[0x24BEE3AF8]();
}

uint64_t sub_224F68414()
{
  return MEMORY[0x24BEE3B00]();
}

uint64_t sub_224F68420()
{
  return MEMORY[0x24BEE3B20]();
}

uint64_t sub_224F6842C()
{
  return MEMORY[0x24BEE3B40]();
}

uint64_t sub_224F68438()
{
  return MEMORY[0x24BEE3B60]();
}

uint64_t sub_224F68444()
{
  return MEMORY[0x24BEE3B68]();
}

uint64_t sub_224F68450()
{
  return MEMORY[0x24BEE70B8]();
}

uint64_t sub_224F6845C()
{
  return MEMORY[0x24BEE70C8]();
}

uint64_t sub_224F68468()
{
  return MEMORY[0x24BEE70D0]();
}

uint64_t sub_224F68474()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t sub_224F68480()
{
  return MEMORY[0x24BEE3D98]();
}

uint64_t sub_224F6848C()
{
  return MEMORY[0x24BEE3DE0]();
}

uint64_t sub_224F68498()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_224F684A4()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_224F684B0()
{
  return MEMORY[0x24BDD06E0]();
}

uint64_t sub_224F684BC()
{
  return MEMORY[0x24BDD06F0]();
}

uint64_t sub_224F684C8()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t sub_224F684D4()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_224F684E0()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_224F684EC()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_224F684F8()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_224F68504()
{
  return MEMORY[0x24BEE42C0]();
}

uint64_t sub_224F68510()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_224F6851C()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_224F68528()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_224F68534()
{
  return MEMORY[0x24BEE4310]();
}

uint64_t sub_224F68540()
{
  return MEMORY[0x24BEE4318]();
}

uint64_t sub_224F6854C()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_224F68558()
{
  return MEMORY[0x24BDD07D0]();
}

uint64_t sub_224F68564()
{
  return MEMORY[0x24BEE45E8]();
}

uint64_t sub_224F68570()
{
  return MEMORY[0x24BEE45F8]();
}

uint64_t sub_224F6857C()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_224F68588()
{
  return MEMORY[0x24BEE4628]();
}

uint64_t sub_224F68594()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_224F685A0()
{
  return MEMORY[0x24BEE49E8]();
}

uint64_t sub_224F685AC()
{
  return MEMORY[0x24BEE49F8]();
}

uint64_t sub_224F685B8()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_224F685C4()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_224F685D0()
{
  return MEMORY[0x24BEE4A98]();
}

uint64_t HKClinicalTypeForDiagnosticTestResultCategory()
{
  return MEMORY[0x24BDD2AA8]();
}

uint64_t HKDiagnosticTestResultCategoryFromNSString()
{
  return MEMORY[0x24BDD2B98]();
}

uint64_t HKFHIRReleaseFromNSString()
{
  return MEMORY[0x24BDD2BF8]();
}

uint64_t HKSafeObject()
{
  return MEMORY[0x24BDD3708]();
}

uint64_t HKSensitiveLogItem()
{
  return MEMORY[0x24BDD3730]();
}

uint64_t HKSharedResourcesDirectory()
{
  return MEMORY[0x24BDD3738]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x24BDD1240](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x24BDD1268](aSelector);
}

uint64_t SecKeyCreateRSAPublicKey()
{
  return MEMORY[0x24BDE8B28]();
}

Boolean SecKeyIsAlgorithmSupported(SecKeyRef key, SecKeyOperationType operation, SecKeyAlgorithm algorithm)
{
  return MEMORY[0x24BDE8B88](key, operation, algorithm);
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return MEMORY[0x24BDE8BA8](key, algorithm, signedData, signature, error);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _HKInitializeLogging()
{
  return MEMORY[0x24BDD4338]();
}

uint64_t _HKLogDroppedError()
{
  return MEMORY[0x24BDD4340]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x24BEAE670]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

uLong adler32(uLong adler, const Bytef *buf, uInt len)
{
  return MEMORY[0x24BEDF198](adler, buf, *(_QWORD *)&len);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x24BDADDD0](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x24BDADDD8](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADDF0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x24BDAE068]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

htmlDocPtr htmlParseDoc(const xmlChar *cur, const char *encoding)
{
  return (htmlDocPtr)MEMORY[0x24BEDE5A0](cur, encoding);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x24BEDCFB0](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x24BEDCFC0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x24BEDCFD8](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_end_catch(void)
{
  MEMORY[0x24BEDD050]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x24BEDD078](exception);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getExistentialMetatypeMetadata()
{
  return MEMORY[0x24BEE4D20]();
}

uint64_t swift_getExistentialTypeMetadata()
{
  return MEMORY[0x24BEE4D28]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x24BEE4D98]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSingleCase()
{
  return MEMORY[0x24BEE4E38]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

xmlNodePtr xmlDocGetRootElement(const xmlDoc *doc)
{
  return (xmlNodePtr)MEMORY[0x24BEDE740](doc);
}

void xmlFreeDoc(xmlDocPtr cur)
{
  MEMORY[0x24BEDE760](cur);
}

void xmlFreeNode(xmlNodePtr cur)
{
  MEMORY[0x24BEDE780](cur);
}

xmlChar *__cdecl xmlNodeGetContent(const xmlNode *cur)
{
  return (xmlChar *)MEMORY[0x24BEDEA50](cur);
}

xmlDocPtr xmlParseDoc(const xmlChar *cur)
{
  return (xmlDocPtr)MEMORY[0x24BEDEAB8](cur);
}

void xmlUnlinkNode(xmlNodePtr cur)
{
  MEMORY[0x24BEDEE20](cur);
}

xmlXPathObjectPtr xmlXPathEvalExpression(const xmlChar *str, xmlXPathContextPtr ctxt)
{
  return (xmlXPathObjectPtr)MEMORY[0x24BEDEED0](str, ctxt);
}

void xmlXPathFreeContext(xmlXPathContextPtr ctxt)
{
  MEMORY[0x24BEDEEE8](ctxt);
}

void xmlXPathFreeObject(xmlXPathObjectPtr obj)
{
  MEMORY[0x24BEDEEF8](obj);
}

xmlXPathContextPtr xmlXPathNewContext(xmlDocPtr doc)
{
  return (xmlXPathContextPtr)MEMORY[0x24BEDEF58](doc);
}

