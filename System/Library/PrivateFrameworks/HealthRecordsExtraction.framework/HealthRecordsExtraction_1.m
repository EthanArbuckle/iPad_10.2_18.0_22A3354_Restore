void sub_224E70FB4(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v5 = sub_224F68144();
  v14 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F683E4();
  if (v2)
  {
    v15 = v2;
    v8 = v2;
    sub_224E57260();
    if (swift_dynamicCast())
    {
      v9 = v14;
      if ((*(unsigned int (**)(char *, uint64_t))(v14 + 88))(v7, v5) == *MEMORY[0x24BEE26D0])
      {

        (*(void (**)(char *, uint64_t))(v9 + 96))(v7, v5);
        sub_224E6FB38();
        v11 = &v7[*(int *)(v10 + 48)];
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
        v12 = sub_224F68138();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);

        return;
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v5);
    }

  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 0, 1, a1);
  }
}

void JSON.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68588();
  __asm { BR              X9 }
}

uint64_t sub_224E711D8()
{
  uint64_t v1[15];

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v1, v1[3]);
  sub_224F68408();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t sub_224E7152C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return JSON.init(from:)(a1, a2);
}

void sub_224E71540(_QWORD *a1)
{
  JSON.encode(to:)(a1);
}

uint64_t sub_224E71554(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  sub_224E542A4();
  v6 = sub_224F681EC();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_224E543B4(v24, v35);
      }
      else
      {
        sub_224E537C4((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_224F68510();
      sub_224F67C34();
      result = sub_224F6854C();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_224E543B4(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_224E7184C(uint64_t a1, char a2)
{
  return sub_224E71884(a1, a2, &qword_2557E1C68, &qword_2557E1C70, type metadata accessor for ModelsDSTU2.HumanName);
}

uint64_t sub_224E71868(uint64_t a1, char a2)
{
  return sub_224E71884(a1, a2, &qword_2557E1C78, &qword_2557E0660, type metadata accessor for ModelsR4.HumanName);
}

uint64_t sub_224E71884(uint64_t a1, char a2, unint64_t *a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  v6 = v5;
  v8 = *v5;
  sub_224E72B8C(0, a3, a4, a5);
  v39 = a2;
  v9 = sub_224F681EC();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_40;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v38 = v8 + 64;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v8 + 64);
  v37 = (unint64_t)(v11 + 63) >> 6;
  v14 = v9 + 64;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v22 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v23 = v22 | (v16 << 6);
      goto LABEL_31;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v24 >= v37)
      break;
    v25 = (_QWORD *)(v8 + 64);
    v26 = *(_QWORD *)(v38 + 8 * v24);
    ++v16;
    if (!v26)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v37)
        goto LABEL_33;
      v26 = *(_QWORD *)(v38 + 8 * v16);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v37)
        {
LABEL_33:
          swift_release();
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v26 = *(_QWORD *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v16 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_42;
            if (v16 >= v37)
              goto LABEL_33;
            v26 = *(_QWORD *)(v38 + 8 * v16);
            ++v27;
            if (v26)
              goto LABEL_30;
          }
        }
        v16 = v27;
      }
    }
LABEL_30:
    v13 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_31:
    v32 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    v34 = *v32;
    v33 = v32[1];
    v35 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v23);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_224F68510();
    sub_224F67C34();
    result = sub_224F6854C();
    v17 = -1 << *(_BYTE *)(v10 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v14 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v20);
    *v21 = v34;
    v21[1] = v33;
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v20) = v35;
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v25 = (_QWORD *)(v8 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v36 = 1 << *(_BYTE *)(v8 + 32);
  if (v36 >= 64)
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v36;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v6 = v10;
  return result;
}

uint64_t sub_224E71BA0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t i;
  char v40;

  v3 = v2;
  v5 = *v2;
  sub_224E546B0(0, &qword_2557E1C88, (uint64_t)&type metadata for JSON, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v40 = a2;
  v6 = sub_224F681EC();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v37)
                  goto LABEL_33;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v30 = *v29;
      v31 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 24 * v21;
      v34 = *(void **)v32;
      v33 = *(_QWORD *)(v32 + 8);
      v35 = *(_BYTE *)(v32 + 16);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_224DFAD38(v34, v33, v35);
      }
      sub_224F68510();
      sub_224F67C34();
      result = sub_224F6854C();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v30;
      v18[1] = v31;
      v19 = *(_QWORD *)(v7 + 56) + 24 * v17;
      *(_QWORD *)v19 = v34;
      *(_QWORD *)(v19 + 8) = v33;
      *(_BYTE *)(v19 + 16) = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_224E71EDC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  sub_224E72BFC();
  v38 = a2;
  v6 = sub_224F681EC();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    sub_224F68510();
    sub_224F67C34();
    result = sub_224F6854C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_224E721E4(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  uint64_t v29;

  sub_224E72E1C(0, &qword_2557E1C90, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  result = sub_224F681E0();
  v3 = (_QWORD *)result;
  v4 = 0;
  v29 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v25 = v6;
  v26 = (unint64_t)(v8 + 63) >> 6;
  v11 = result + 64;
  v27 = MEMORY[0x24BEE4AD8] + 8;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v4 << 6); ; i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v29 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    v20 = swift_bridgeObjectRetain();
    JSON.value.getter(v28, v20);
    *(_QWORD *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v21 = (_QWORD *)(v3[6] + 16 * i);
    *v21 = v18;
    v21[1] = v19;
    result = sub_224E724F4((uint64_t)v28, v3[7] + 32 * i, (uint64_t)&qword_2557E1488, v27, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_224E54704);
    v22 = v3[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v24;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v14 >= v26)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v25 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v26)
        return (uint64_t)v3;
      v15 = *(_QWORD *)(v25 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v26)
          return (uint64_t)v3;
        v15 = *(_QWORD *)(v25 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_18:
    v10 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v26)
    return (uint64_t)v3;
  v15 = *(_QWORD *)(v25 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v26)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v25 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_224E7242C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E1C08)
  {
    sub_224E54704(255, &qword_2557E1488, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v0 = sub_224F67DB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E1C08);
  }
}

uint64_t sub_224E7249C(uint64_t a1)
{
  uint64_t v2;

  sub_224E54704(0, &qword_2557E1488, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_224E724F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;

  v7 = a5(0, a3, a4, MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

void sub_224E7254C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E1C20)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E1C20);
  }
}

void *sub_224E725B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_224E542A4();
  v2 = *v0;
  v3 = sub_224F681E0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_224E537C4(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_224E543B4(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_224E72798()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  sub_224E546B0(0, &qword_2557E1C88, (uint64_t)&type metadata for JSON, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = *v0;
  v3 = sub_224F681E0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(void **)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v25 = *(_BYTE *)(v21 + 16);
    *v24 = v19;
    v24[1] = v18;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v26 = v22;
    *(_QWORD *)(v26 + 8) = v23;
    *(_BYTE *)(v26 + 16) = v25;
    swift_bridgeObjectRetain();
    result = sub_224DFAD38(v22, v23, v25);
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_224E72984(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  result = *a1;
  if (!result)
  {
    sub_224E546B0(255, &qword_2557E1C40, (uint64_t)&type metadata for JSON, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
    v10 = v9;
    v11[0] = a3;
    v11[1] = a2();
    result = MEMORY[0x22768ED24](a4, v10, v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_224E72A0C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_224E54704(255, &qword_2557E1C30, (uint64_t)&type metadata for JSON, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x22768ED24](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

void destroy for JSON(uint64_t a1)
{
  sub_224DFADCC(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s23HealthRecordsExtraction4JSONOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_224DFAD38(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for JSON(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_224DFAD38(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_224DFADCC(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for JSON(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_224DFADCC(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for JSON()
{
  return &type metadata for JSON;
}

void sub_224E72B8C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_224DDEA0C(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v5 = sub_224F68204();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_224E72BFC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E1C80)
  {
    sub_224E5451C(255, &qword_2557E1518);
    v0 = sub_224F68204();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E1C80);
  }
}

id sub_224E72C70()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_224E72BFC();
  v2 = *v0;
  v3 = sub_224F681E0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_224E72E1C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD, uint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_224E54704(255, &qword_2557E1488, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v7 = a3(a1, MEMORY[0x24BEE0D00], v6, MEMORY[0x24BEE0D10]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_224E72EA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E1CB0;
  if (!qword_2557E1CB0)
  {
    sub_224DDEA0C(255, &qword_2557E1CA8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB2A8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_2557E1CB0);
  }
  return result;
}

uint64_t sub_224E72F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v32 - v2;
  v4 = sub_224F675D4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for Coding();
  v39 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E1438, v10);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v32 - v12;
  result = *(_QWORD *)(v0 + 56);
  if (result)
  {
    v35 = *(_QWORD *)(result + 16);
    if (!v35)
      return 0;
    v34 = result + 32;
    v32 = result;
    swift_bridgeObjectRetain_n();
    v15 = 0;
    v16 = v13;
    v33 = v13;
    v41 = v4;
    v42 = v3;
    while (1)
    {
      v18 = v34 + 24 * v15;
      v19 = *(_QWORD *)(v18 + 8);
      v20 = *(_QWORD *)(v18 + 16);
      v44 = qword_2557E1CD0;
      v46 = qword_2557E1CC0;
      if (v20)
      {
        v37 = v19;
        v38 = v15;
        v21 = *(_QWORD *)(v20 + 16);
        v36 = v20;
        if (v21)
        {
          v43 = qword_2557E1CB8;
          v40 = qword_2557E1CC8;
          v22 = v39;
          v23 = v20 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v48 = *(_QWORD *)(v22 + 72);
          v24 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
          while (1)
          {
            sub_224DDB408(v23, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
            sub_224E75F34((uint64_t)v9, (uint64_t)v3, (unint64_t *)&qword_2557E02A8, v24);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
            {
              sub_224E7601C((uint64_t)v3, (unint64_t *)&qword_2557E02A8, v24);
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
              v25 = (uint64_t *)&v9[*(int *)(v47 + 20)];
              v26 = v25[1];
              if (v26)
              {
                v45 = *v25;
                v51 = sub_224F6755C();
                v52 = v27;
                v49 = v43;
                v50 = v46;
                sub_224E51E94();
                v28 = sub_224F6803C();
                swift_bridgeObjectRelease();
                if (v28)
                {
                  v4 = v41;
                  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v41);
                  v3 = v42;
                }
                else
                {
                  v51 = v45;
                  v52 = v26;
                  v49 = v40;
                  v50 = v44;
                  v29 = sub_224F6803C();
                  v4 = v41;
                  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v41);
                  v3 = v42;
                  if (!v29)
                  {
                    v17 = (uint64_t)v33;
                    sub_224DDEADC((uint64_t)v9, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
                    v30 = v39;
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v17, 0, 1, v47);
                    goto LABEL_20;
                  }
                }
              }
              else
              {
                (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
              }
            }
            sub_224DDEAA0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
            v23 += v48;
            --v21;
            v24 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
            if (!v21)
              goto LABEL_19;
          }
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_19:
        v30 = v39;
        v17 = (uint64_t)v33;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v33, 1, 1, v47);
LABEL_20:
        swift_bridgeObjectRelease();
        v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v17, 1, v47);
        v15 = v38;
        if (v31 != 1)
        {
          sub_224E7601C(v17, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      else
      {
        v17 = (uint64_t)v16;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v16, 1, 1, v47);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      ++v15;
      v16 = (char *)v17;
      sub_224E7601C(v17, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v15 == v35)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_224E73458(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

id sub_224E73470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 24);
  v8 = *(_OWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 80);
  v2 = sub_224EEF95C();
  *(_QWORD *)(v0 + 32) = v2;
  sub_224E5451C(0, (unint64_t *)&qword_2557E1CF8);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestReportTypeForIdentifier_, *MEMORY[0x24BDD2B90], v8, v9);
  *(_QWORD *)(v0 + 40) = result;
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(v0 + 16);
    v6 = v5 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {

      return (id)(*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
    }
    else
    {
      *(_QWORD *)(v0 + 48) = *(_QWORD *)(v6 + *(int *)(type metadata accessor for ExtractionContext() + 44));
      swift_retain();
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 56) = v7;
      *v7 = v0;
      v7[1] = sub_224E735A0;
      return (id)sub_224ED0FBC(v2, (uint64_t)v4);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_224E735A0(uint64_t a1)
{
  uint64_t *v1;
  void *v3;
  void *v4;
  uint64_t v6;

  v4 = *(void **)(*v1 + 32);
  v3 = *(void **)(*v1 + 40);
  v6 = *v1;
  swift_task_dealloc();
  swift_release();

  return (*(uint64_t (**)(uint64_t))(v6 + 8))(a1);
}

void (*sub_224E7360C(uint64_t a1))(char *, uint64_t)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  char *v85;
  uint64_t v86;
  int v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  int *v148;
  uint64_t v149;
  int v150;
  int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  uint64_t v178;
  uint64_t v179;
  int *v180;
  id v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int *v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  _QWORD *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  void (*v211)(uint64_t, uint64_t);
  _QWORD *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  uint64_t *v224;
  uint64_t v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  int *v231;
  void *v232;
  int *v233;
  __int128 v234;
  uint64_t v235;
  _QWORD v236[10];

  v2 = v1;
  v197 = a1;
  sub_224E63218(0, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  MEMORY[0x24BDAC7A8](v3);
  v204 = (char *)&v190 - v4;
  v5 = type metadata accessor for RecordExtractionContext();
  MEMORY[0x24BDAC7A8](v5);
  v203 = (id *)((char *)&v190 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for Reference();
  v193 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v224 = (uint64_t *)((char *)&v190 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v218 = type metadata accessor for Attachment();
  v195 = *(_QWORD *)(v218 - 8);
  MEMORY[0x24BDAC7A8](v218);
  v222 = (char *)&v190 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = (_QWORD *)sub_224F6770C();
  v211 = (void (*)(uint64_t, uint64_t))*(v212 - 1);
  MEMORY[0x24BDAC7A8](v212);
  v210 = (uint64_t)&v190 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = sub_224F67760();
  v209 = *(_QWORD *)(v215 - 8);
  v11 = MEMORY[0x24BDAC7A8](v215);
  v205 = (uint64_t)&v190 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v227 = (uint64_t)&v190 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v208 = (char *)&v190 - v15;
  v16 = type metadata accessor for FHIRDateTime();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v200 = (uint64_t)&v190 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v201 = (uint64_t)&v190 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v220 = (uint64_t)&v190 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v230 = (uint64_t)&v190 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v229 = (char *)&v190 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v219 = (char *)&v190 - v28;
  v29 = sub_224F6743C();
  v30 = MEMORY[0x24BDAC7A8](v29);
  v196 = (char *)&v190 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x24BDAC7A8](v30);
  v194 = (char *)&v190 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v213 = (char *)&v190 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v223 = (char *)&v190 - v36;
  sub_224E63218(0, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
  v38 = MEMORY[0x24BDAC7A8](v37);
  v207 = (uint64_t)&v190 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v190 - v40;
  v42 = type metadata accessor for ModelsR4.DiagnosticReport(0);
  v43 = MEMORY[0x24BDAC7A8](v42);
  *(_QWORD *)&v226 = (char *)&v190 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v43);
  v46 = (char *)&v190 - v45;
  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v48 = MEMORY[0x24BDAC7A8](v47);
  v202 = (char *)&v190 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = MEMORY[0x24BDAC7A8](v48);
  v198 = (uint64_t)&v190 - v51;
  v52 = MEMORY[0x24BDAC7A8](v50);
  v199 = (uint64_t)&v190 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v221 = (char *)&v190 - v55;
  v56 = MEMORY[0x24BDAC7A8](v54);
  v206 = (uint64_t)&v190 - v57;
  v58 = MEMORY[0x24BDAC7A8](v56);
  v228 = (uint64_t)&v190 - v59;
  v60 = MEMORY[0x24BDAC7A8](v58);
  v231 = (int *)((char *)&v190 - v61);
  v62 = MEMORY[0x24BDAC7A8](v60);
  v64 = (char *)&v190 - v63;
  MEMORY[0x24BDAC7A8](v62);
  v66 = (char *)&v190 - v65;
  v216 = v2 + *(int *)(v42 + 44);
  sub_224E75F34(v216, (uint64_t)v64, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v225 = v2;
  sub_224DDB408(v2, (uint64_t)v46, type metadata accessor for ModelsR4.DiagnosticReport);
  v233 = *(int **)(v17 + 48);
  v67 = ((uint64_t (*)(char *, uint64_t, uint64_t))v233)(v64, 1, v16);
  v217 = v42;
  v214 = v17;
  if (v67 == 1)
  {
    sub_224E75F34((uint64_t)&v46[*(int *)(v42 + 48)], (uint64_t)v41, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
    sub_224DDEAA0((uint64_t)v46, type metadata accessor for ModelsR4.DiagnosticReport);
    v68 = type metadata accessor for Period();
    v69 = v42;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 48))(v41, 1, v68) == 1)
    {
      sub_224E7601C((uint64_t)v41, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v66, 1, 1, v16);
    }
    else
    {
      sub_224E75F34((uint64_t)v41, (uint64_t)v66, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEAA0((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    }
    v71 = (uint64_t)v231;
    v70 = v232;
    v72 = v228;
    sub_224E7601C((uint64_t)v64, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v73 = ((uint64_t (*)(char *, uint64_t, uint64_t))v233)(v66, 1, v16);
    v74 = v226;
    if (v73 == 1)
    {
      sub_224E7601C((uint64_t)v66, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      v223 = 0;
      v75 = v225;
      goto LABEL_18;
    }
  }
  else
  {
    sub_224DDEAA0((uint64_t)v46, type metadata accessor for ModelsR4.DiagnosticReport);
    sub_224DDEADC((uint64_t)v64, (uint64_t)v66, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v66, 0, 1, v16);
    v71 = (uint64_t)v231;
    v70 = v232;
  }
  if (*((_QWORD *)v66 + 7) == 1)
  {
    if ((v66[19] & 1) != 0)
    {
      v76 = v70;
      if (v66[17])
        v77 = 3;
      else
        v77 = 2;
    }
    else
    {
      v76 = v70;
      v77 = 1;
    }
  }
  else
  {
    v76 = v70;
    v77 = 0;
  }
  v78 = sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  v79 = (uint64_t)v223;
  FHIRDateTime.asDateComponents()();
  v80 = (uint64_t *)&v66[*(int *)(v16 + 32)];
  v82 = *v80;
  v81 = v80[1];
  swift_bridgeObjectRetain();
  v83 = v81;
  v84 = (void (*)(char *, uint64_t))v78;
  v85 = (char *)sub_224F00474(v79, v82, v83, v77);
  v70 = v76;
  if (v76)
  {
    v86 = (uint64_t)v66;
    goto LABEL_34;
  }
  v223 = v85;
  sub_224DDEAA0((uint64_t)v66, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v75 = v225;
  v72 = v228;
  v74 = v226;
  v69 = v217;
LABEL_18:
  sub_224E75F34(v216, v72, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB408(v75, v74, type metadata accessor for ModelsR4.DiagnosticReport);
  v87 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v233)(v72, 1, v16);
  v88 = v219;
  v231 = (int *)v16;
  if (v87 == 1)
  {
    v89 = v74 + *(int *)(v69 + 48);
    v90 = v74;
    v91 = v207;
    sub_224E75F34(v89, v207, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
    sub_224DDEAA0(v90, type metadata accessor for ModelsR4.DiagnosticReport);
    v92 = type metadata accessor for Period();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 48))(v91, 1, v92) == 1)
    {
      sub_224E7601C(v91, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v214 + 56))(v71, 1, 1, v16);
    }
    else
    {
      sub_224E75F34(v91 + *(int *)(v92 + 20), v71, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEAA0(v91, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    }
    v93 = (uint64_t)v229;
    sub_224E7601C(v228, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v233)(v71, 1, v16) == 1)
    {
      sub_224E7601C(v71, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      v190 = 0;
      goto LABEL_37;
    }
  }
  else
  {
    sub_224DDEAA0(v74, type metadata accessor for ModelsR4.DiagnosticReport);
    sub_224DDEADC(v72, v71, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v214 + 56))(v71, 0, 1, v16);
    v93 = (uint64_t)v229;
  }
  if (*(_QWORD *)(v71 + 56) == 1)
  {
    if ((*(_BYTE *)(v71 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v71 + 17))
        v94 = 3;
      else
        v94 = 2;
    }
    else
    {
      v94 = 1;
    }
  }
  else
  {
    v94 = 0;
  }
  v95 = sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  v96 = (uint64_t)v213;
  FHIRDateTime.asDateComponents()();
  v97 = (uint64_t *)(v71 + v231[8]);
  v99 = *v97;
  v98 = v97[1];
  swift_bridgeObjectRetain();
  v100 = v98;
  v84 = (void (*)(char *, uint64_t))v95;
  v101 = sub_224F00474(v96, v99, v100, v94);
  if (v70)
  {

    v86 = v71;
    goto LABEL_34;
  }
  v190 = v101;
  sub_224DDEAA0(v71, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v75 = v225;
LABEL_37:
  v103 = (char *)objc_msgSend((id)objc_opt_self(), sel_FHIRDiagnosticReportStatus);
  v104 = *(_QWORD *)(v75 + 40);
  v105 = *(_QWORD *)(v75 + 48);
  v106 = sub_224F67B80();
  v213 = v103;
  v236[0] = v103;
  v236[1] = v104;
  v236[2] = v105;
  v236[3] = v106;
  v236[5] = 0;
  v236[6] = 0;
  v192 = v107;
  v236[4] = v107;
  v108 = *(_QWORD *)(v75 + 56);
  v207 = v105;
  v109 = (uint64_t)v88;
  swift_bridgeObjectRetain();
  if (v108)
    v191 = Array<A>.asCodingCollectionArray()(v108);
  else
    v191 = 0;
  v110 = *(_QWORD *)(v75 + 80);
  v234 = *(_OWORD *)(v75 + 64);
  v235 = v110;
  v111 = (void *)sub_224EEF95C();
  v112 = v208;
  sub_224F676B8();
  v113 = v210;
  sub_224F2CA44(v210);
  sub_224F676AC();
  (*((void (**)(uint64_t, _QWORD *))v211 + 1))(v113, v212);
  v114 = v112;
  v84 = *(void (**)(char *, uint64_t))(v209 + 8);
  v84(v114, v215);
  v115 = v109;
  FHIRDateTime.init(_:)(v109);
  if (v70)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return v84;
  }
  v212 = v111;
  v116 = *(_QWORD *)(v75 + *(int *)(v217 + 60));
  if (v116)
  {
    sub_224DDB408(v109, v93, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    v117 = *(_QWORD *)(v116 + 16);
    v232 = 0;
    v210 = v116;
    if (v117)
    {
      v211 = (void (*)(uint64_t, uint64_t))v84;
      v118 = v116 + ((*(unsigned __int8 *)(v195 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80));
      v228 = *(_QWORD *)(v195 + 72);
      swift_bridgeObjectRetain();
      v226 = xmmword_224F6D8B0;
      v216 = 0x8000000224F81D20;
      v119 = v218;
      v120 = (uint64_t)v222;
      v121 = (uint64_t)v221;
      while (1)
      {
        sub_224DDB408(v118, v120, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
        sub_224E75F34(v120 + *(int *)(v119 + 40), v121, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
        if (((unsigned int (*)(uint64_t, uint64_t, int *))v233)(v121, 1, v231) != 1)
          break;
        sub_224E7601C(v121, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
LABEL_46:
        sub_224DDEAA0(v120, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
        v118 += v228;
        if (!--v117)
          goto LABEL_57;
      }
      v122 = v230;
      sub_224DDEADC(v121, v230, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v123 = v232;
      FHIRDateTime.asNSDate()(v227);
      if (v123)
      {
        v232 = 0;
        sub_224E75F80();
        v125 = swift_allocObject();
        *(_OWORD *)(v125 + 16) = v226;
        *(_QWORD *)&v234 = 0;
        *((_QWORD *)&v234 + 1) = 0xE000000000000000;
        sub_224F680E4();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v234 = 0xD000000000000014;
        *((_QWORD *)&v234 + 1) = v216;
        FHIRDateTime.description.getter();
        sub_224F67C94();
        swift_bridgeObjectRelease();
        sub_224F67C94();
        v122 = v230;
        FHIRDateTime.description.getter();
        sub_224F67C94();
        swift_bridgeObjectRelease();
        sub_224F67C94();
        v236[9] = v123;
        v126 = v123;
        sub_224E59364(0, (unint64_t *)&qword_2557E1580);
        sub_224F67BC8();
        sub_224F67C94();
        v93 = (uint64_t)v229;
        swift_bridgeObjectRelease();
        v127 = v234;
        *(_QWORD *)(v125 + 56) = MEMORY[0x24BEE0D00];
        *(_OWORD *)(v125 + 32) = v127;
        sub_224F68504();

        swift_bridgeObjectRelease();
        v119 = v218;
      }
      else
      {
        v124 = v205;
        FHIRDateTime.asNSDate()(v205);
        v232 = 0;
        v132 = v227;
        v133 = sub_224F67748();
        v134 = v124;
        v135 = v215;
        v136 = v211;
        v211(v134, v215);
        v93 = (uint64_t)v229;
        v136(v132, v135);
        v128 = v122;
        v129 = v93;
        if (v133 == -1)
          goto LABEL_52;
      }
      v128 = v93;
      v129 = v122;
LABEL_52:
      sub_224DDEAA0(v128, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v130 = v129;
      v131 = v220;
      sub_224DDEADC(v130, v220, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      sub_224DDEADC(v131, v93, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v120 = (uint64_t)v222;
      v121 = (uint64_t)v221;
      goto LABEL_46;
    }
    swift_bridgeObjectRetain();
LABEL_57:
    v137 = v206;
    sub_224DDEADC(v93, v206, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    swift_bridgeObjectRelease();
    v138 = (uint64_t)v231;
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v214 + 56))(v137, 0, 1, v231);
    v70 = v232;
    v139 = (uint64_t)v204;
    v115 = (uint64_t)v219;
    v75 = v225;
  }
  else
  {
    v137 = v206;
    v138 = (uint64_t)v231;
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v214 + 56))(v206, 1, 1, v231);
    v139 = (uint64_t)v204;
  }
  v140 = v199;
  sub_224E75F34(v137, v199, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v141 = v200;
  sub_224DDB408(v115, v200, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v142 = ((unsigned int (*)(uint64_t, uint64_t, uint64_t))v233)(v140, 1, v138) == 1;
  v143 = v212;
  if (v142)
  {
    v144 = v201;
    sub_224DDEADC(v141, v201, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    sub_224E7601C(v140, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  }
  else
  {
    sub_224DDEAA0(v141, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    v144 = v201;
    sub_224DDEADC(v140, v201, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  }
  v145 = (uint64_t)v202;
  v146 = _s23HealthRecordsExtraction12FHIRDateTimeV1loiySbAC_ACtFZ_0();
  sub_224DDEAA0(v144, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  if (!v146)
    goto LABEL_64;
  v147 = v198;
  sub_224E75F34(v206, v198, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (((unsigned int (*)(uint64_t, uint64_t, int *))v233)(v147, 1, v231) == 1)
  {
    sub_224E7601C(v147, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
LABEL_64:
    v148 = 0;
    v149 = v217;
    goto LABEL_65;
  }
  if (*(_QWORD *)(v147 + 56) == 1)
  {
    if ((*(_BYTE *)(v147 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v147 + 17))
        v153 = 3;
      else
        v153 = 2;
    }
    else
    {
      v153 = 1;
    }
  }
  else
  {
    v153 = 0;
  }
  v182 = sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  v183 = (uint64_t)v194;
  v184 = v198;
  FHIRDateTime.asDateComponents()();
  v185 = (uint64_t *)(v184 + v231[8]);
  v187 = *v185;
  v186 = v185[1];
  swift_bridgeObjectRetain();
  v188 = v186;
  v84 = (void (*)(char *, uint64_t))v182;
  v189 = (int *)sub_224F00474(v183, v187, v188, v153);
  if (v70)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_224E7601C(v206, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224DDEAA0(v115, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    v86 = v184;
    goto LABEL_34;
  }
  v148 = v189;
  sub_224DDEAA0(v184, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v75 = v225;
  v149 = v217;
  v145 = (uint64_t)v202;
LABEL_65:
  sub_224E75F34(v75 + *(int *)(v149 + 52), v145, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v150 = ((uint64_t (*)(uint64_t, uint64_t, int *))v233)(v145, 1, v231);
  v233 = v148;
  if (v150 != 1)
  {
    if (*(_QWORD *)(v145 + 56) == 1)
    {
      if ((*(_BYTE *)(v145 + 19) & 1) != 0)
      {
        if (*(_BYTE *)(v145 + 17))
          v152 = 3;
        else
          v152 = 2;
      }
      else
      {
        v152 = 1;
      }
    }
    else
    {
      v152 = 0;
    }
    v154 = sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
    v155 = (uint64_t)v196;
    v156 = v145;
    FHIRDateTime.asDateComponents()();
    v157 = (uint64_t *)(v145 + v231[8]);
    v159 = *v157;
    v158 = v157[1];
    swift_bridgeObjectRetain();
    v160 = v158;
    v84 = (void (*)(char *, uint64_t))v154;
    v161 = (int *)sub_224F00474(v155, v159, v160, v152);
    if (!v70)
    {
      v231 = v161;
      sub_224DDEAA0(v156, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v149 = v217;
      v143 = v212;
      goto LABEL_83;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_224E7601C(v206, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224DDEAA0(v115, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    v86 = v156;
LABEL_34:
    sub_224DDEAA0(v86, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    return v84;
  }
  sub_224E7601C(v145, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v151 = v148;
  v231 = v148;
LABEL_83:
  v162 = *(_QWORD *)(v75 + *(int *)(v149 + 56));
  if (v162)
  {
    v163 = *(_QWORD *)(v162 + 16);
    if (v163)
    {
      v232 = v70;
      v164 = v162 + ((*(unsigned __int8 *)(v193 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v193 + 80));
      v165 = *(_QWORD *)(v193 + 72);
      v230 = v162;
      swift_bridgeObjectRetain_n();
      v166 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v168 = v224;
        sub_224DDB408(v164, (uint64_t)v224, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
        v169 = *v168;
        v170 = v168[1];
        swift_bridgeObjectRetain();
        sub_224DDEAA0((uint64_t)v168, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
        if (v170)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v166 = sub_224E56678(0, v166[2] + 1, 1, v166);
          v172 = v166[2];
          v171 = v166[3];
          if (v172 >= v171 >> 1)
            v166 = sub_224E56678((_QWORD *)(v171 > 1), v172 + 1, 1, v166);
          v166[2] = v172 + 1;
          v167 = &v166[2 * v172];
          v167[4] = v169;
          v167[5] = v170;
        }
        v164 += v165;
        --v163;
      }
      while (v163);
      swift_bridgeObjectRelease_n();
      v139 = (uint64_t)v204;
      v115 = (uint64_t)v219;
      v75 = v225;
    }
    else
    {
      v166 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v173 = v197;
    v143 = v212;
  }
  else
  {
    v166 = 0;
    v173 = v197;
  }
  v174 = MEMORY[0x24BEE4AF8];
  sub_224DDB408(v173, (uint64_t)v203, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  if (*(_QWORD *)(v75 + *(int *)(v217 + 64) + 8))
  {
    swift_bridgeObjectRetain();
    sub_224F677B4();
    v175 = sub_224F677D8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v175 - 8) + 56))(v139, 0, 1, v175);
  }
  else
  {
    v176 = sub_224F677D8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v176 - 8) + 56))(v139, 1, 1, v176);
  }
  v177 = v223;
  if (v191)
    v178 = v191;
  else
    v178 = v174;
  sub_224E5451C(0, &qword_2557E1D08);
  v179 = v178;
  v180 = v231;
  v181 = v190;
  v84 = (void (*)(char *, uint64_t))sub_224F1F200(v203, v139, (uint64_t)v236, (uint64_t)v143, v179, (uint64_t)v231, (uint64_t)v177, (uint64_t)v190, (uint64_t)v166);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_224E7601C(v206, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDEAA0(v115, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  return v84;
}

uint64_t sub_224E74E94(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[9] = a1;
  v2[10] = v1;
  sub_224E63218(0, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  v2[11] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[12] = swift_task_alloc();
  sub_224F6743C();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  sub_224E63218(0, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = type metadata accessor for ModelsR4.DiagnosticReport(0);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v3 = type metadata accessor for FHIRDateTime();
  v2[26] = v3;
  v2[27] = *(_QWORD *)(v3 - 8);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224E75058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  sub_224E75F34(*(_QWORD *)(v0 + 80) + *(int *)(*(_QWORD *)(v0 + 144) + 52), v3, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v4(v3, 1, v1) == 1)
  {
    sub_224E7601C(*(_QWORD *)(v0 + 200), &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224E75FD8();
    swift_allocError();
    *(_OWORD *)v5 = xmmword_224F6F2F0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_BYTE *)(v5 + 32) = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v6 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 80);
  sub_224DDEADC(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 224), (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v11 = v10 + *(int *)(v9 + 44);
  sub_224E75F34(v11, v7, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB408(v10, v8, type metadata accessor for ModelsR4.DiagnosticReport);
  if (v4(v7, 1, v6) == 1)
  {
    v12 = *(_QWORD *)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 136);
    sub_224E75F34(v12 + *(int *)(*(_QWORD *)(v0 + 144) + 48), v13, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
    sub_224DDEAA0(v12, type metadata accessor for ModelsR4.DiagnosticReport);
    v14 = type metadata accessor for Period();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14) == 1)
    {
      v15 = *(_QWORD *)(v0 + 208);
      v16 = *(_QWORD *)(v0 + 216);
      v17 = *(_QWORD *)(v0 + 192);
      sub_224E7601C(*(_QWORD *)(v0 + 136), &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v17, 1, 1, v15);
    }
    else
    {
      v22 = *(_QWORD *)(v0 + 136);
      sub_224E75F34(v22, *(_QWORD *)(v0 + 192), &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEAA0(v22, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    }
    v23 = *(_QWORD *)(v0 + 208);
    v24 = *(_QWORD *)(v0 + 192);
    sub_224E7601C(*(_QWORD *)(v0 + 184), &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v4(v24, 1, v23) == 1)
    {
      sub_224E7601C(*(_QWORD *)(v0 + 192), &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      v25 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 216);
    v21 = *(_QWORD *)(v0 + 184);
    v20 = *(_QWORD *)(v0 + 192);
    sub_224DDEAA0(*(_QWORD *)(v0 + 160), type metadata accessor for ModelsR4.DiagnosticReport);
    sub_224DDEADC(v21, v20, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v20, 0, 1, v18);
  }
  v26 = *(_QWORD *)(v0 + 192);
  if (*(_QWORD *)(v26 + 56) == 1)
  {
    if ((*(_BYTE *)(v26 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v26 + 17))
        v27 = 3;
      else
        v27 = 2;
    }
    else
    {
      v27 = 1;
    }
  }
  else
  {
    v27 = 0;
  }
  v28 = *(_QWORD *)(v0 + 208);
  v29 = *(_QWORD *)(v0 + 120);
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v30 = (uint64_t *)(v26 + *(int *)(v28 + 32));
  v31 = *v30;
  v32 = v30[1];
  swift_bridgeObjectRetain();
  v25 = sub_224F00474(v29, v31, v32, v27);
  sub_224DDEAA0(*(_QWORD *)(v0 + 192), (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_18:
  *(_QWORD *)(v0 + 232) = v25;
  v33 = *(_QWORD *)(v0 + 208);
  v34 = *(_QWORD *)(v0 + 168);
  v35 = *(_QWORD *)(v0 + 152);
  v36 = *(_QWORD *)(v0 + 80);
  sub_224E75F34(v11, v34, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB408(v36, v35, type metadata accessor for ModelsR4.DiagnosticReport);
  if (v4(v34, 1, v33) != 1)
  {
    v43 = *(_QWORD *)(v0 + 208);
    v44 = *(_QWORD *)(v0 + 216);
    v46 = *(_QWORD *)(v0 + 168);
    v45 = *(_QWORD *)(v0 + 176);
    sub_224DDEAA0(*(_QWORD *)(v0 + 152), type metadata accessor for ModelsR4.DiagnosticReport);
    sub_224DDEADC(v46, v45, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v45, 0, 1, v43);
LABEL_25:
    v51 = *(_QWORD *)(v0 + 176);
    if (*(_QWORD *)(v51 + 56) == 1)
    {
      if ((*(_BYTE *)(v51 + 19) & 1) != 0)
      {
        if (*(_BYTE *)(v51 + 17))
          v52 = 3;
        else
          v52 = 2;
      }
      else
      {
        v52 = 1;
      }
    }
    else
    {
      v52 = 0;
    }
    v53 = *(_QWORD *)(v0 + 208);
    v54 = *(_QWORD *)(v0 + 112);
    sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
    FHIRDateTime.asDateComponents()();
    v55 = (uint64_t *)(v51 + *(int *)(v53 + 32));
    v56 = *v55;
    v57 = v55[1];
    swift_bridgeObjectRetain();
    v50 = sub_224F00474(v54, v56, v57, v52);
    sub_224DDEAA0(*(_QWORD *)(v0 + 176), (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    goto LABEL_33;
  }
  v37 = *(_QWORD *)(v0 + 152);
  v38 = *(_QWORD *)(v0 + 128);
  sub_224E75F34(v37 + *(int *)(*(_QWORD *)(v0 + 144) + 48), v38, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
  sub_224DDEAA0(v37, type metadata accessor for ModelsR4.DiagnosticReport);
  v39 = type metadata accessor for Period();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v38, 1, v39) == 1)
  {
    v40 = *(_QWORD *)(v0 + 208);
    v41 = *(_QWORD *)(v0 + 216);
    v42 = *(_QWORD *)(v0 + 176);
    sub_224E7601C(*(_QWORD *)(v0 + 128), &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v42, 1, 1, v40);
  }
  else
  {
    v47 = *(_QWORD *)(v0 + 128);
    sub_224E75F34(v47 + *(int *)(v39 + 20), *(_QWORD *)(v0 + 176), &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224DDEAA0(v47, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  }
  v48 = *(_QWORD *)(v0 + 208);
  v49 = *(_QWORD *)(v0 + 176);
  sub_224E7601C(*(_QWORD *)(v0 + 168), &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v4(v49, 1, v48) != 1)
    goto LABEL_25;
  sub_224E7601C(*(_QWORD *)(v0 + 176), &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v50 = 0;
LABEL_33:
  *(_QWORD *)(v0 + 240) = 0;
  *(_QWORD *)(v0 + 248) = v50;
  v59 = *(_QWORD *)(v0 + 144);
  v60 = *(_QWORD *)(v0 + 96);
  v61 = *(_QWORD *)(v0 + 72);
  v62 = *(_QWORD *)(v0 + 80);
  v63 = objc_msgSend((id)objc_opt_self(), sel_FHIRDiagnosticReportStatus);
  *(_QWORD *)(v0 + 256) = v63;
  v65 = *(_QWORD *)(v62 + 40);
  v64 = *(_QWORD *)(v62 + 48);
  *(_QWORD *)(v0 + 264) = v64;
  v66 = sub_224F67B80();
  *(_QWORD *)(v0 + 272) = v67;
  *(_QWORD *)(v0 + 16) = v63;
  *(_QWORD *)(v0 + 24) = v65;
  *(_QWORD *)(v0 + 32) = v64;
  *(_QWORD *)(v0 + 40) = v66;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 48) = v67;
  sub_224DDB408(v61, v60, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v68 = *(_QWORD *)(v0 + 88);
  if (*(_QWORD *)(v62 + *(int *)(v59 + 64) + 8))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_224F677B4();
    v69 = sub_224F677D8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v68, 0, 1, v69);
  }
  else
  {
    v70 = sub_224F677D8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v68, 1, 1, v70);
    swift_bridgeObjectRetain();
  }
  v71 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 280) = *(_QWORD *)(v71 + 88);
  *(_QWORD *)(v0 + 288) = *(_QWORD *)(v71 + 96);
  swift_bridgeObjectRetain();
  v72 = swift_task_alloc();
  *(_QWORD *)(v0 + 296) = v72;
  *(_QWORD *)v72 = v0;
  *(_QWORD *)(v72 + 8) = sub_224E758C8;
  *(_OWORD *)(v72 + 16) = *(_OWORD *)(v0 + 72);
  return swift_task_switch();
}

uint64_t sub_224E758C8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 304) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224E75924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 224);
  if (*(_QWORD *)(v1 + 56) == 1)
  {
    if ((*(_BYTE *)(v1 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v1 + 17))
        v2 = 3;
      else
        v2 = 2;
    }
    else
    {
      v2 = 1;
    }
  }
  else
  {
    v2 = 0;
  }
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 104);
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v6 = (uint64_t *)(v1 + *(int *)(v4 + 32));
  v7 = *v6;
  v8 = v6[1];
  swift_bridgeObjectRetain();
  v9 = sub_224F00474(v5, v7, v8, v2);
  v10 = *(void **)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 288);
  if (v3)
  {
    v12 = *(void **)(v0 + 248);
    v13 = *(_QWORD *)(v0 + 224);
    v14 = *(void **)(v0 + 232);
    v16 = *(_QWORD *)(v0 + 88);
    v15 = *(_QWORD *)(v0 + 96);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_224E7601C(v16, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
    sub_224DDEAA0(v15, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    sub_224DDEAA0(v13, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = v9;
    v19 = *(_QWORD *)(v0 + 280);
    v20 = *(void **)(v0 + 248);
    v25 = *(void **)(v0 + 256);
    v21 = *(void **)(v0 + 232);
    v26 = *(_QWORD *)(v0 + 224);
    v22 = *(_QWORD **)(v0 + 96);
    v23 = *(_QWORD *)(v0 + 88);
    sub_224E5451C(0, &qword_2557E1D30);
    v24 = sub_224F16180(v22, v23, v19, v11, (uint64_t)v10, (uint64_t)v21, (uint64_t)v20, v0 + 16, (uint64_t)v18);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_224DDEAA0(v26, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(v0 + 8))(v24);
  }
}

uint64_t sub_224E75CDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  __int128 v15;
  __int128 v16;
  unint64_t v17;

  v3 = type metadata accessor for ModelsR4.DiagnosticReport(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_224E72F00() & 1) == 0 && (v6 = *(_QWORD *)(v1 + *(int *)(v3 + 60))) != 0 && *(_QWORD *)(v6 + 16))
  {
    v7 = sub_224ECF5B0(a1, 0, v6);
    v9 = v8;
    if ((sub_224DD84D4(v7, v6) & 1) == 0)
    {
      sub_224DDB408(v1, (uint64_t)v5, type metadata accessor for ModelsR4.DiagnosticReport);
      v13 = *(int *)(v3 + 60);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v5[v13] = v7;
      *((_QWORD *)&v16 + 1) = v3;
      v17 = sub_224E75EEC();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v15);
      sub_224DDB408((uint64_t)v5, (uint64_t)boxed_opaque_existential_1, type metadata accessor for ModelsR4.DiagnosticReport);
      type metadata accessor for DownloadableAttachmentExtractionResult();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v9;
      sub_224DDEADC((uint64_t)&v15, v11 + 24, (uint64_t (*)(_QWORD))sub_224E75E88);
      sub_224DDEAA0((uint64_t)v5, type metadata accessor for ModelsR4.DiagnosticReport);
      return v11;
    }
    swift_bridgeObjectRelease();
    type metadata accessor for DownloadableAttachmentExtractionResult();
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
    v10 = swift_allocObject();
    v11 = v10;
    *(_QWORD *)(v10 + 16) = v9;
  }
  else
  {
    type metadata accessor for DownloadableAttachmentExtractionResult();
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
    v10 = swift_allocObject();
    v11 = v10;
    *(_QWORD *)(v10 + 16) = 0;
  }
  sub_224DDEADC((uint64_t)&v15, v10 + 24, (uint64_t (*)(_QWORD))sub_224E75E88);
  return v11;
}

void sub_224E75E88()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E1CD8)
  {
    sub_224E59364(255, (unint64_t *)&qword_2557E1CE0);
    v0 = sub_224F67FF4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E1CD8);
  }
}

unint64_t sub_224E75EEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E1CE8;
  if (!qword_2557E1CE8)
  {
    v1 = type metadata accessor for ModelsR4.DiagnosticReport(255);
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.DiagnosticReport, v1);
    atomic_store(result, &qword_2557E1CE8);
  }
  return result;
}

uint64_t sub_224E75F34(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_224E63218(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_224E75F80()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E1D18)
  {
    v0 = sub_224F683A8();
    if (!v1)
      atomic_store(v0, &qword_2557E1D18);
  }
}

unint64_t sub_224E75FD8()
{
  unint64_t result;

  result = qword_2557E1D28;
  if (!qword_2557E1D28)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ExtractionError, &type metadata for ExtractionError);
    atomic_store(result, (unint64_t *)&qword_2557E1D28);
  }
  return result;
}

uint64_t sub_224E7601C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_224E63218(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t VCJWT.sign(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  char v11;
  _BYTE *v12;
  uint64_t v14;

  v8 = a3[4];
  v9 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 32);
  v10 = a3[2];
  v9((uint64_t *)((char *)&v14 + 1), v10, v8);
  if (BYTE1(v14) == 1)
    sub_224F2F338(a1, a2, v10, a3[3], v8, a3[5], a4);
  v9(&v14, v10, v8);
  v11 = v14;
  sub_224E76150();
  swift_allocError();
  *v12 = v11;
  return swift_willThrow();
}

unint64_t sub_224E76150()
{
  unint64_t result;

  result = qword_2557E1D38;
  if (!qword_2557E1D38)
  {
    result = MEMORY[0x22768ED24](&unk_224F6E9E4, &type metadata for VCJWTSigningError);
    atomic_store(result, (unint64_t *)&qword_2557E1D38);
  }
  return result;
}

uint64_t VCJWT.algorithm.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t VCJWT.signingKeyID.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t VCJWT.signatureStatus(using:)(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v27;
  unsigned __int8 v28;
  id v29;

  v3 = objc_msgSend(a1, sel_JWKSData);
  if (v3)
  {
    v4 = v3;
    v5 = sub_224F67658();
    v7 = v6;

    sub_224F67298();
    swift_allocObject();
    sub_224F6728C();
    sub_224E76EDC();
    sub_224F67280();
    swift_release();
    sub_224DDE9B4(v5, v7);
    v15 = sub_224E6D0C8((uint64_t *)&v27, a2, (uint64_t)&protocol witness table for VCJWT<A, B>);
    swift_bridgeObjectRelease();
    return v15;
  }
  sub_224E65EF4();
  v8 = (void *)swift_allocError();
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 16) = 5;
  swift_willThrow();
  v29 = v8;
  v10 = v8;
  sub_224E57260();
  if ((swift_dynamicCast() & 1) != 0)
  {
    if (v28 == 5 && v27 == 0)
    {

      if (qword_2557E0128 != -1)
        swift_once();
      v11 = sub_224F679B8();
      __swift_project_value_buffer(v11, (uint64_t)qword_2557FC958);
      v12 = sub_224F679AC();
      v13 = sub_224F67EEC();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_224DAC000, v12, v13, "SignedClinicalDataJWT: not attempting to verify signature because there is no JWKS data", v14, 2u);
        MEMORY[0x22768EDE4](v14, -1, -1);
      }

      return 0;
    }
    sub_224E65F68(v27, *((uint64_t *)&v27 + 1), v28);
  }

  if (qword_2557E0128 != -1)
    swift_once();
  v16 = sub_224F679B8();
  __swift_project_value_buffer(v16, (uint64_t)qword_2557FC958);
  v17 = v8;
  v18 = v8;
  v19 = sub_224F679AC();
  v20 = sub_224F67ED4();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    *(_QWORD *)&v27 = v22;
    *(_DWORD *)v21 = 136315138;
    v29 = v8;
    v23 = v8;
    v24 = sub_224F67BC8();
    v29 = (id)sub_224E76904(v24, v25, (uint64_t *)&v27);
    sub_224F68000();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_224DAC000, v19, v20, "SignedClinicalDataJWT: signature invalid because: %s", v21, 0xCu);
    v15 = 1;
    swift_arrayDestroy();
    MEMORY[0x22768EDE4](v22, -1, -1);
    MEMORY[0x22768EDE4](v21, -1, -1);

  }
  else
  {

    return 1;
  }
  return v15;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VCJWT.verifySignature(using:)(HealthRecordsExtraction::VCJWKSet using)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void (*v27)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32[8];
  uint64_t v33;
  uint64_t v34[5];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];
  uint64_t v43;

  v3 = v2;
  v4 = v1;
  v5 = *(_QWORD *)using.keys._rawValue;
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 16);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(v7, v6);
  v10 = v9;
  v11 = *(_QWORD *)(v5 + 16);
  if (!v11)
  {
LABEL_11:
    sub_224E65EF4();
    swift_allocError();
    *(_QWORD *)v26 = v8;
    *(_QWORD *)(v26 + 8) = v10;
    *(_BYTE *)(v26 + 16) = 2;
LABEL_12:
    swift_willThrow();
    return;
  }
  v12 = *(_OWORD *)(v5 + 128);
  v40 = *(_OWORD *)(v5 + 112);
  v41 = v12;
  v42[0] = *(_OWORD *)(v5 + 144);
  *(_QWORD *)&v42[1] = *(_QWORD *)(v5 + 160);
  v13 = *(_OWORD *)(v5 + 48);
  v14 = *(_OWORD *)(v5 + 80);
  v15 = *(_OWORD *)(v5 + 96);
  v37 = *(_OWORD *)(v5 + 64);
  v38 = v14;
  v39 = v15;
  v35 = *(_OWORD *)(v5 + 32);
  v36 = v13;
  v16 = v5 + 168;
  v17 = v11 - 1;
  v18 = *((_QWORD *)&v12 + 1);
  if (!*((_QWORD *)&v12 + 1))
    goto LABEL_8;
LABEL_3:
  v19 = (_QWORD)v41 == v8 && v18 == v10;
  if (!v19 && (sub_224F683CC() & 1) == 0)
  {
LABEL_8:
    while (v17)
    {
      v35 = *(_OWORD *)v16;
      v20 = *(_OWORD *)(v16 + 16);
      v21 = *(_OWORD *)(v16 + 32);
      v22 = *(_OWORD *)(v16 + 64);
      v38 = *(_OWORD *)(v16 + 48);
      v39 = v22;
      v36 = v20;
      v37 = v21;
      v23 = *(_OWORD *)(v16 + 80);
      v24 = *(_OWORD *)(v16 + 96);
      v25 = *(_OWORD *)(v16 + 112);
      *(_QWORD *)&v42[1] = *(_QWORD *)(v16 + 128);
      v41 = v24;
      v42[0] = v25;
      v40 = v23;
      v16 += 136;
      --v17;
      v18 = *((_QWORD *)&v24 + 1);
      if (*((_QWORD *)&v24 + 1))
        goto LABEL_3;
    }
    goto LABEL_11;
  }
  sub_224E76F20((uint64_t)&v35);
  if (*(_QWORD *)&v42[1]
    && *(_OWORD *)((char *)v42 + 8) != __PAIR128__(0xE300000000000000, 6777203)
    && (sub_224F683CC() & 1) == 0)
  {
    sub_224E76FB0((uint64_t)&v35);
    sub_224E65EF4();
    swift_allocError();
    *(_QWORD *)v31 = v8;
    *(_QWORD *)(v31 + 8) = v10;
    *(_BYTE *)(v31 + 16) = 0;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  v27 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v6 + 32);
  v27((__int128 *)&v43, v7, v6);
  if (v43 != 1)
  {
    sub_224E76FB0((uint64_t)&v35);
    v27(v32, v7, v6);
    v29 = LOBYTE(v32[0]);
    sub_224E77040();
    swift_allocError();
    *(_QWORD *)v30 = v29;
    *(_QWORD *)(v30 + 8) = 0;
    *(_QWORD *)(v30 + 16) = 0;
    *(_QWORD *)(v30 + 24) = 0;
    *(_BYTE *)(v30 + 32) = 1;
    goto LABEL_12;
  }
  v34[3] = v4;
  v34[4] = (uint64_t)&protocol witness table for VCJWT<A, B>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(boxed_opaque_existential_1, v3, v4);
  v32[6] = v41;
  v32[7] = v42[0];
  v33 = *(_QWORD *)&v42[1];
  v32[2] = v37;
  v32[3] = v38;
  v32[4] = v39;
  v32[5] = v40;
  v32[0] = v35;
  v32[1] = v36;
  sub_224E77214(v34, v32, 1);
  sub_224E76FB0((uint64_t)&v35);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
}

void sub_224E768F0(HealthRecordsExtraction::VCJWKSet a1)
{
  VCJWT.verifySignature(using:)(a1);
}

uint64_t sub_224E76904(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_224E769D4(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_224E537C4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_224E537C4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_224E769D4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_224F6800C();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_224E76B8C(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_224F6815C();
  if (!v8)
  {
    sub_224F681BC();
    __break(1u);
LABEL_17:
    result = sub_224F68210();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_224E76B8C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_224E76C20(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_224E76D94(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_224E76D94(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_224E76C20(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_224E57118(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_224F680F0();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_224F681BC();
      __break(1u);
LABEL_10:
      v2 = sub_224F67CAC();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_224F68210();
    __break(1u);
LABEL_14:
    result = sub_224F681BC();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t sub_224E76D94(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_224E77084();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_224F68210();
  __break(1u);
  return result;
}

unint64_t sub_224E76EDC()
{
  unint64_t result;

  result = qword_2557E1D40;
  if (!qword_2557E1D40)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for VCJWKSet, &type metadata for VCJWKSet);
    atomic_store(result, (unint64_t *)&qword_2557E1D40);
  }
  return result;
}

uint64_t sub_224E76F20(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_224E76FB0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_224E77040()
{
  unint64_t result;

  result = qword_2557E1D48;
  if (!qword_2557E1D48)
  {
    result = MEMORY[0x22768ED24](&unk_224F75FE8, &type metadata for VCJWTVerificationError);
    atomic_store(result, (unint64_t *)&qword_2557E1D48);
  }
  return result;
}

void sub_224E77084()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E15F0)
  {
    v0 = sub_224F683A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E15F0);
  }
}

uint64_t sub_224E770D8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v9 = sub_224F67A3C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1;
  v16 = a2;
  sub_224DDE970(a1, a2);
  sub_224E77688();
  result = sub_224F67A30();
  if (!v4)
  {
    v15 = a3;
    v16 = a4;
    if ((sub_224F67A48() & 1) == 0)
    {
      sub_224E77040();
      swift_allocError();
      *(_QWORD *)v14 = 2;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      *(_BYTE *)(v14 + 32) = 4;
      swift_willThrow();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return result;
}

uint64_t sub_224E77214(_QWORD *a1, __int128 *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  Swift::String v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;

  LODWORD(v66) = a3;
  v6 = sub_224F67A60();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  if (!v3)
  {
    v53 = v7;
    v54 = v9;
    v52 = v6;
    v14 = v66;
    v55 = v13;
    v56 = result;
    v15 = a1[3];
    v16 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v15);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
    v19 = v18;
    v51 = v17;
    v20 = a2;
    v21 = a2[7];
    v63 = a2[6];
    v64 = v21;
    v65 = *((_QWORD *)a2 + 16);
    v22 = a2[3];
    v59 = a2[2];
    v60 = v22;
    v23 = a2[5];
    v61 = a2[4];
    v62 = v23;
    v24 = a2[1];
    v57 = *a2;
    v58 = v24;
    v25 = VCJWK.asRawECPublicKey()();
    v26 = v56;
    *(_QWORD *)&v57 = v25;
    *((_QWORD *)&v57 + 1) = v27;
    v28 = v25;
    v29 = v27;
    sub_224DDE970(v25, v27);
    v30 = v54;
    sub_224F67A54();
    v49 = v28;
    v50 = v29;
    v31 = v55;
    sub_224E770D8(v26, v55, v51, v19);
    v32 = v31;
    v33 = v26;
    v34 = v53;
    if ((v14 & 1) != 0)
    {
      v66 = v19;
      v35 = a1[3];
      v36 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v35);
      v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 16))(v35, v36);
      v39 = v38;
      v40 = v20[7];
      v63 = v20[6];
      v64 = v40;
      v65 = *((_QWORD *)v20 + 16);
      v41 = v20[3];
      v59 = v20[2];
      v60 = v41;
      v42 = v20[5];
      v61 = v20[4];
      v62 = v42;
      v43 = v20[1];
      v57 = *v20;
      v58 = v43;
      v44 = VCJWK.calculateThumbprint()();
      if (v45)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v30, v52);
        sub_224DDE9B4(v49, v50);
        sub_224DDE9B4(v51, v66);
        sub_224DDE9B4(v56, v55);
        return swift_bridgeObjectRelease();
      }
      else
      {
        v46 = v66;
        v47 = v52;
        if (v44._countAndFlagsBits == v37 && v44._object == v39 || (sub_224F683CC() & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v34 + 8))(v30, v47);
          sub_224DDE9B4(v49, v50);
          sub_224DDE9B4(v51, v46);
          sub_224DDE9B4(v56, v55);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        else
        {
          sub_224E77040();
          swift_allocError();
          *(Swift::String *)v48 = v44;
          *(_QWORD *)(v48 + 16) = v37;
          *(_QWORD *)(v48 + 24) = v39;
          *(_BYTE *)(v48 + 32) = 3;
          swift_willThrow();
          sub_224DDE9B4(v51, v46);
          sub_224DDE9B4(v56, v55);
          sub_224DDE9B4(v49, v50);
          return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v30, v47);
        }
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v53 + 8))(v30, v52);
      sub_224DDE9B4(v49, v50);
      sub_224DDE9B4(v51, v19);
      return sub_224DDE9B4(v33, v32);
    }
  }
  return result;
}

unint64_t sub_224E77688()
{
  unint64_t result;

  result = qword_2557E1D50;
  if (!qword_2557E1D50)
  {
    result = MEMORY[0x22768ED24](MEMORY[0x24BDCDDC0], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2557E1D50);
  }
  return result;
}

uint64_t Coding.system.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_224E5AF70(v1, a1);
}

uint64_t Coding.code.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Coding() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for Coding()
{
  uint64_t result;

  result = qword_2557E1DF8;
  if (!qword_2557E1DF8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Coding.display.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Coding() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Coding.version.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Coding() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

int *Coding.init(system:code:display:version:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int *result;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  sub_224E77848(a1, a8);
  result = (int *)type metadata accessor for Coding();
  v16 = (_QWORD *)(a8 + result[5]);
  *v16 = a2;
  v16[1] = a3;
  v17 = (_QWORD *)(a8 + result[6]);
  *v17 = a4;
  v17[1] = a5;
  v18 = (_QWORD *)(a8 + result[7]);
  *v18 = a6;
  v18[1] = a7;
  return result;
}

uint64_t sub_224E77848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Coding.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v12;

  v1 = v0;
  v2 = sub_224F675D4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, v6);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v12 - v8;
  sub_224E5AF70(v1, (uint64_t)&v12 - v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    sub_224F68528();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
    sub_224F68528();
    sub_224DDACD4(&qword_2557E02F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_224F67B20();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v10 = (int *)type metadata accessor for Coding();
  if (*(_QWORD *)(v1 + v10[5] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  if (*(_QWORD *)(v1 + v10[6] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  if (!*(_QWORD *)(v1 + v10[7] + 8))
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224E77AE0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224E77B0C + 4 * byte_224F6F340[*v0]))(0x6D6574737973, 0xE600000000000000);
}

uint64_t sub_224E77B0C()
{
  return 1701080931;
}

uint64_t sub_224E77B1C()
{
  return 0x79616C70736964;
}

uint64_t sub_224E77B34()
{
  return 0x6E6F6973726576;
}

uint64_t sub_224E77B4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E79E40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224E77B70()
{
  sub_224E7916C();
  return sub_224F685B8();
}

uint64_t sub_224E77B98()
{
  sub_224E7916C();
  return sub_224F685C4();
}

uint64_t Coding.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  sub_224E791B0(0, &qword_2557E1D58, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E7916C();
  sub_224F68594();
  v9[15] = 0;
  sub_224F675D4();
  sub_224DDACD4(&qword_2557E1D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
  sub_224F68330();
  if (!v1)
  {
    type metadata accessor for Coding();
    v9[14] = 1;
    sub_224F68300();
    v9[13] = 2;
    sub_224F68300();
    v9[12] = 3;
    sub_224F68300();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Coding.hashValue.getter()
{
  sub_224F68510();
  Coding.hash(into:)();
  return sub_224F6854C();
}

uint64_t Coding.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v27 = a2;
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v4);
  v28 = (char *)&v26 - v5;
  sub_224E791B0(0, &qword_2557E1D70, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v29 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - v8;
  v10 = (int *)type metadata accessor for Coding();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E7916C();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v26 = a1;
  v13 = v7;
  sub_224F675D4();
  v33 = 0;
  sub_224DDACD4(&qword_2557E1D78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  v14 = (uint64_t)v28;
  sub_224F68294();
  sub_224E77848(v14, (uint64_t)v12);
  v32 = 1;
  v15 = sub_224F68264();
  v16 = (uint64_t *)&v12[v10[5]];
  *v16 = v15;
  v16[1] = v17;
  v31 = 2;
  v18 = sub_224F68264();
  v19 = (uint64_t *)&v12[v10[6]];
  *v19 = v18;
  v19[1] = v20;
  v30 = 3;
  v21 = sub_224F68264();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v29);
  v24 = (uint64_t *)&v12[v10[7]];
  *v24 = v21;
  v24[1] = v23;
  sub_224E7920C((uint64_t)v12, v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return sub_224DDEAA0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
}

uint64_t sub_224E78104@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Coding.init(from:)(a1, a2);
}

uint64_t sub_224E78118(_QWORD *a1)
{
  return Coding.encode(to:)(a1);
}

uint64_t sub_224E7812C()
{
  sub_224F68510();
  Coding.hash(into:)();
  return sub_224F6854C();
}

uint64_t sub_224E7816C()
{
  sub_224F68510();
  Coding.hash(into:)();
  return sub_224F6854C();
}

BOOL Coding.isConcept(system:code:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v22 - v7;
  v9 = sub_224F675D4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_224F6755C();
  v15 = v14;
  sub_224E5AF70(v3, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_224E7601C((uint64_t)v8, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v16 = 0;
  }
  else
  {
    v23 = a3;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v17 = (uint64_t *)(v3 + *(int *)(type metadata accessor for Coding() + 20));
    v18 = v17[1];
    if (v18)
    {
      v22 = *v17;
      v26 = sub_224F6755C();
      v27 = v19;
      v24 = v13;
      v25 = v15;
      sub_224E51E94();
      v20 = sub_224F6803C();
      swift_bridgeObjectRelease();
      if (v20)
      {
        v16 = 0;
      }
      else
      {
        v26 = v22;
        v27 = v18;
        v24 = a2;
        v25 = v23;
        v16 = sub_224F6803C() == 0;
      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v16 = 0;
    }
  }
  swift_bridgeObjectRelease();
  return v16;
}

Swift::Bool __swiftcall Coding.isConcept(system:code:)(Swift::String system, Swift::String code)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _BOOL8 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  object = code._object;
  countAndFlagsBits = code._countAndFlagsBits;
  v5 = system._object;
  v6 = system._countAndFlagsBits;
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v20 - v8;
  v10 = sub_224F675D4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5AF70(v2, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_224E7601C((uint64_t)v9, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    LOBYTE(v14) = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    v15 = (uint64_t *)(v2 + *(int *)(type metadata accessor for Coding() + 20));
    v16 = v15[1];
    if (v16)
    {
      v21 = *v15;
      v24 = sub_224F6755C();
      v25 = v17;
      v22 = v6;
      v23 = v5;
      sub_224E51E94();
      v18 = sub_224F6803C();
      swift_bridgeObjectRelease();
      if (v18)
      {
        LOBYTE(v14) = 0;
      }
      else
      {
        v24 = v21;
        v25 = v16;
        v22 = countAndFlagsBits;
        v23 = object;
        v14 = sub_224F6803C() == 0;
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      LOBYTE(v14) = 0;
    }
  }
  return v14;
}

Swift::Bool __swiftcall Coding.isConcept(codings:)(Swift::OpaquePointer codings)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  Swift::Bool v37;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *rawValue;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  rawValue = codings._rawValue;
  v2 = type metadata accessor for Coding();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E1438, v6);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v39 - v8;
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v39 - v14;
  v16 = sub_224F675D4();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v49 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v39 - v20;
  sub_224E5AF70(v1, (uint64_t)v15);
  v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v52(v15, 1, v16) == 1)
  {
    sub_224E7601C((uint64_t)v15, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    return 0;
  }
  v47 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v47(v21, v15, v16);
  v22 = (uint64_t *)(v1 + *(int *)(v2 + 20));
  v42 = v22[1];
  if (!v42)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
    return 0;
  }
  v48 = v17;
  v45 = v16;
  v23 = rawValue[2];
  if (!v23)
    goto LABEL_19;
  v51 = v21;
  v39 = v9;
  v40 = v3;
  v41 = *v22;
  v24 = (uint64_t)rawValue + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v50 = *(_QWORD *)(v3 + 72);
  swift_bridgeObjectRetain();
  v25 = v45;
  v46 = v2;
  do
  {
    sub_224E7920C(v24, (uint64_t)v5);
    v26 = sub_224F6755C();
    v28 = v27;
    sub_224E5AF70((uint64_t)v5, (uint64_t)v13);
    if (v52(v13, 1, v25) == 1)
    {
      sub_224E7601C((uint64_t)v13, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
LABEL_7:
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    v29 = v49;
    v47(v49, v13, v25);
    v30 = (uint64_t *)&v5[*(int *)(v2 + 20)];
    v31 = v30[1];
    if (!v31)
    {
      (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v25);
      v2 = v46;
      goto LABEL_7;
    }
    v44 = *v30;
    v55 = sub_224F6755C();
    v56 = v32;
    v53 = v26;
    v54 = v28;
    sub_224E51E94();
    v33 = sub_224F6803C();
    swift_bridgeObjectRelease();
    if (v33)
    {
      v34 = 0;
    }
    else
    {
      v55 = v44;
      v56 = v31;
      v53 = v41;
      v54 = v42;
      v34 = sub_224F6803C() == 0;
    }
    v25 = v45;
    v2 = v46;
    v35 = *(void (**)(char *, uint64_t))(v48 + 8);
    v35(v49, v45);
    swift_bridgeObjectRelease();
    if (v34)
    {
      swift_bridgeObjectRelease();
      v36 = (uint64_t)v39;
      sub_224E79250((uint64_t)v5, (uint64_t)v39);
      v37 = 1;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v2);
      sub_224E7601C(v36, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
      v35(v51, v25);
      return v37;
    }
LABEL_8:
    sub_224DDEAA0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
    v24 += v50;
    --v23;
  }
  while (v23);
  swift_bridgeObjectRelease();
  v9 = v39;
  v3 = v40;
  v21 = v51;
LABEL_19:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, 1, 1, v2);
  sub_224E7601C((uint64_t)v9, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v21, v45);
  return 0;
}

uint64_t Coding.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  unint64_t v30;
  _BYTE v31[16];
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD v36[9];

  v1 = v0;
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v28 - v3;
  v32 = xmmword_224F6DF10;
  sub_224E5AF70(v1, (uint64_t)v28 - v3);
  v5 = sub_224F675D4();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_224E7601C((uint64_t)v4, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v7 = 0xE400000000000000;
    v8 = 1701080931;
  }
  else
  {
    v8 = sub_224F6755C();
    v7 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  v33 = v8;
  v34 = v7;
  v10 = (int *)type metadata accessor for Coding();
  v11 = (uint64_t *)(v1 + v10[5]);
  v13 = *v11;
  v12 = v11[1];
  v35 = v13;
  v36[0] = v12;
  v36[1] = 0x79616C70736964;
  v36[2] = 0xE700000000000000;
  v14 = (_QWORD *)(v1 + v10[6]);
  v15 = v14[1];
  v36[3] = *v14;
  v36[4] = v15;
  v36[5] = 0x6E6F6973726576;
  v36[6] = 0xE700000000000000;
  v16 = (_QWORD *)(v1 + v10[7]);
  v17 = v16[1];
  v36[7] = *v16;
  v36[8] = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = 0;
  v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v21 = &v31[v18 * 8];
    if (v36[v18])
    {
      v22 = *((_QWORD *)v21 + 5);
      v29 = *((_QWORD *)v21 + 4);
      v30 = v22;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_224F67C94();
      sub_224F67C94();
      sub_224F67C94();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = v29;
      v24 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = sub_224E56678(0, v19[2] + 1, 1, v19);
      v26 = v19[2];
      v25 = v19[3];
      if (v26 >= v25 >> 1)
        v19 = sub_224E56678((_QWORD *)(v25 > 1), v26 + 1, 1, v19);
      v19[2] = v26 + 1;
      v20 = &v19[2 * v26];
      v20[4] = v23;
      v20[5] = v24;
    }
    v18 += 4;
  }
  while (v18 != 12);
  sub_224E79294();
  swift_arrayDestroy();
  v29 = 0x28676E69646F43;
  v30 = 0xE700000000000000;
  v28[1] = v19;
  sub_224E79308(0, (unint64_t *)&qword_2557E0888, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
  sub_224E79350();
  sub_224F67B44();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  return v29;
}

uint64_t _s23HealthRecordsExtraction6CodingV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  void (*v24)(uint64_t);
  void (*v25)(uint64_t);
  uint64_t result;
  void (*v27)(uint64_t);
  char v28;
  void (*v29)(char *, uint64_t);
  int *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = sub_224F675D4();
  v5 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E79FE0();
  v10 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, v5);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v49 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v49 - v20;
  sub_224E5AF70(a1, (uint64_t)&v49 - v20);
  v50 = a2;
  sub_224E5AF70(a2, (uint64_t)v19);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_224E5AF70((uint64_t)v21, (uint64_t)v12);
  sub_224E5AF70((uint64_t)v19, v22);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v23((uint64_t)v12, 1, v4) == 1)
  {
    v24 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
    sub_224E7601C((uint64_t)v19, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    sub_224E7601C((uint64_t)v21, (unint64_t *)&qword_2557E02A8, v24);
    if (v23(v22, 1, v4) == 1)
    {
      sub_224E7601C((uint64_t)v12, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      goto LABEL_10;
    }
LABEL_6:
    sub_224DDEAA0((uint64_t)v12, (uint64_t (*)(_QWORD))sub_224E79FE0);
    return 0;
  }
  sub_224E5AF70((uint64_t)v12, (uint64_t)v16);
  if (v23(v22, 1, v4) == 1)
  {
    v25 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
    sub_224E7601C((uint64_t)v19, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    sub_224E7601C((uint64_t)v21, (unint64_t *)&qword_2557E02A8, v25);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v4);
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v22, v4);
  v27 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  sub_224DDACD4((unint64_t *)&qword_2557E02B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
  v28 = sub_224F67B50();
  v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  v29(v8, v4);
  sub_224E7601C((uint64_t)v19, (unint64_t *)&qword_2557E02A8, v27);
  sub_224E7601C((uint64_t)v21, (unint64_t *)&qword_2557E02A8, v27);
  v29(v16, v4);
  sub_224E7601C((uint64_t)v12, (unint64_t *)&qword_2557E02A8, v27);
  if ((v28 & 1) == 0)
    return 0;
LABEL_10:
  v30 = (int *)type metadata accessor for Coding();
  v31 = v30[5];
  v32 = (_QWORD *)(a1 + v31);
  v33 = *(_QWORD *)(a1 + v31 + 8);
  v34 = v50;
  v35 = (_QWORD *)(v50 + v31);
  v36 = v35[1];
  if (v33)
  {
    if (!v36)
      return 0;
    if (*v32 != *v35 || v33 != v36)
    {
      v37 = sub_224F683CC();
      result = 0;
      if ((v37 & 1) == 0)
        return result;
    }
  }
  else if (v36)
  {
    return 0;
  }
  v38 = v30[6];
  v39 = (_QWORD *)(a1 + v38);
  v40 = *(_QWORD *)(a1 + v38 + 8);
  v41 = (_QWORD *)(v34 + v38);
  v42 = v41[1];
  if (!v40)
  {
    if (!v42)
      goto LABEL_24;
    return 0;
  }
  if (!v42)
    return 0;
  if (*v39 == *v41 && v40 == v42 || (v43 = sub_224F683CC(), result = 0, (v43 & 1) != 0))
  {
LABEL_24:
    v44 = v30[7];
    v45 = (_QWORD *)(a1 + v44);
    v46 = *(_QWORD *)(a1 + v44 + 8);
    v47 = (_QWORD *)(v34 + v44);
    v48 = v47[1];
    if (v46)
    {
      if (v48 && (*v45 == *v47 && v46 == v48 || (sub_224F683CC() & 1) != 0))
        return 1;
    }
    else if (!v48)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_224E7916C()
{
  unint64_t result;

  result = qword_2557E1D60;
  if (!qword_2557E1D60)
  {
    result = MEMORY[0x22768ED24](&unk_224F6F55C, &type metadata for Coding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1D60);
  }
  return result;
}

void sub_224E791B0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224E7916C();
    v7 = a3(a1, &type metadata for Coding.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_224E7920C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Coding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_224E79250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Coding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_224E79294()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E1D80)
  {
    sub_224E79308(255, (unint64_t *)&qword_2557E16D0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E1D80);
  }
}

void sub_224E79308(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x24BEE0D00]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_224E79350()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E1D88;
  if (!qword_2557E1D88)
  {
    sub_224E79308(255, (unint64_t *)&qword_2557E0888, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_2557E1D88);
  }
  return result;
}

uint64_t sub_224E793A8(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E0208, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t)&protocol conformance descriptor for Coding);
  a1[2] = sub_224DDACD4(&qword_2557E01F0, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t)&protocol conformance descriptor for Coding);
  result = sub_224DDACD4(&qword_2557E1D90, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t)&protocol conformance descriptor for Coding);
  a1[3] = result;
  return result;
}

uint64_t sub_224E79420()
{
  return sub_224DDACD4(&qword_2557E1D98, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t)&protocol conformance descriptor for Coding);
}

uint64_t *initializeBufferWithCopyOfBuffer for Coding(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_224F675D4();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = (uint64_t *)((char *)a1 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (uint64_t *)((char *)a1 + v12);
    v17 = (uint64_t *)((char *)a2 + v12);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = a3[7];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Coding(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_224F675D4();
  v3 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for Coding(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = sub_224F675D4();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  v14 = &a1[v10];
  v15 = &a2[v10];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  v17 = a3[7];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for Coding(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v6 = sub_224F675D4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for Coding(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_224F675D4();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for Coding(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_224F675D4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v17 = a3[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v21 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = v21;
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v26 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = v26;
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Coding()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E79AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for Coding()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_224E79B8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
}

void sub_224E79C18()
{
  unint64_t v0;

  sub_224E63218(319, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for Coding.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_224E79CE8 + 4 * byte_224F6F349[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_224E79D1C + 4 * byte_224F6F344[v4]))();
}

uint64_t sub_224E79D1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E79D24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E79D2CLL);
  return result;
}

uint64_t sub_224E79D38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E79D40);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_224E79D44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E79D4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Coding.CodingKeys()
{
  return &type metadata for Coding.CodingKeys;
}

unint64_t sub_224E79D6C()
{
  unint64_t result;

  result = qword_2557E1E38;
  if (!qword_2557E1E38)
  {
    result = MEMORY[0x22768ED24](&unk_224F6F534, &type metadata for Coding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1E38);
  }
  return result;
}

unint64_t sub_224E79DB4()
{
  unint64_t result;

  result = qword_2557E1E40;
  if (!qword_2557E1E40)
  {
    result = MEMORY[0x22768ED24](&unk_224F6F4A4, &type metadata for Coding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1E40);
  }
  return result;
}

unint64_t sub_224E79DFC()
{
  unint64_t result;

  result = qword_2557E1E48;
  if (!qword_2557E1E48)
  {
    result = MEMORY[0x22768ED24](&unk_224F6F4CC, &type metadata for Coding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1E48);
  }
  return result;
}

uint64_t sub_224E79E40(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D6574737973 && a2 == 0xE600000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79616C70736964 && a2 == 0xE700000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void sub_224E79FE0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E02B0)
  {
    sub_224E63218(255, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E02B0);
  }
}

uint64_t ExtractionRulesKeyPathComponent.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ExtractionRulesKeyPathComponent.parenthesisContent.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_parenthesisContent);
  swift_bridgeObjectRetain();
  return v1;
}

id ExtractionRulesKeyPathComponent.__allocating_init(name:parenthesisContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  char *v10;
  char *v11;
  objc_super v13;

  v9 = (char *)objc_allocWithZone(v4);
  v10 = &v9[OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_name];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  v11 = &v9[OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_parenthesisContent];
  *(_QWORD *)v11 = a3;
  *((_QWORD *)v11 + 1) = a4;
  v13.receiver = v9;
  v13.super_class = v4;
  return objc_msgSendSuper2(&v13, sel_init);
}

id ExtractionRulesKeyPathComponent.init(name:parenthesisContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = &v4[OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_name];
  *(_QWORD *)v5 = a1;
  *((_QWORD *)v5 + 1) = a2;
  v6 = &v4[OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_parenthesisContent];
  *(_QWORD *)v6 = a3;
  *((_QWORD *)v6 + 1) = a4;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for ExtractionRulesKeyPathComponent();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for ExtractionRulesKeyPathComponent()
{
  return objc_opt_self();
}

id ExtractionRulesKeyPathComponent.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ExtractionRulesKeyPathComponent.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ExtractionRulesKeyPathComponent.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExtractionRulesKeyPathComponent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for ExtractionRulesKeyPathComponent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ExtractionRulesKeyPathComponent.__allocating_init(name:parenthesisContent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t Error.hdhr_friendlyDescription.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  int v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[4];

  sub_224E63218(0, &qword_2557E1E88, (void (*)(uint64_t))MEMORY[0x24BEE2710]);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v24 - v5;
  v7 = *(_QWORD *)(a1 - 8);
  v8 = MEMORY[0x24BDAC7A8](v4);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v24 - v11;
  v13 = sub_224F68144();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v17(v12, v1, a1);
  v18 = swift_dynamicCast();
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v18)
  {
    v19(v6, 0, 1, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v6, v13);
    v20 = DecodingError.hdhr_friendlyDescription.getter();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  else
  {
    v19(v6, 1, 1, v13);
    sub_224E7601C((uint64_t)v6, &qword_2557E1E88, (void (*)(uint64_t))MEMORY[0x24BEE2710]);
    v17(v10, v1, a1);
    sub_224E7A5F8();
    if (swift_dynamicCast())
    {
      sub_224E593B0(&v24, (uint64_t)v27);
      __swift_project_boxed_opaque_existential_1(v27, v27[3]);
      v20 = sub_224F67448();
      v22 = v21;
      sub_224DE5E88((uint64_t)v27, (uint64_t)&v24);
      if (!v22)
      {
        __swift_project_boxed_opaque_existential_1(&v24, *((uint64_t *)&v25 + 1));
        v20 = sub_224F684C8();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    }
    else
    {
      v26 = 0;
      v24 = 0u;
      v25 = 0u;
      sub_224E7601C((uint64_t)&v24, &qword_2557E1E90, (void (*)(uint64_t))sub_224E7A5F8);
      return sub_224F684C8();
    }
  }
  return v20;
}

unint64_t sub_224E7A5F8()
{
  unint64_t result;

  result = qword_2557E1640;
  if (!qword_2557E1640)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E1640);
  }
  return result;
}

uint64_t sub_224E7A64C()
{
  uint64_t v0;
  id v1;

  v0 = sub_224F679B8();
  __swift_allocate_value_buffer(v0, qword_2557FC958);
  __swift_project_value_buffer(v0, (uint64_t)qword_2557FC958);
  _HKInitializeLogging();
  v1 = (id)*MEMORY[0x24BDD2FF8];
  return sub_224F679C4();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t UnknownResource.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;

  sub_224E7B47C(0, &qword_2557E1E98, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v22 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E7A918();
  sub_224F6857C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v26 = 0;
    v10 = sub_224F682AC();
    v13 = v12;
    v23 = v10;
    v25 = 1;
    swift_bridgeObjectRetain();
    v14 = sub_224F68264();
    v16 = v15;
    v22 = v14;
    v24 = 2;
    swift_bridgeObjectRetain();
    v17 = sub_224F68264();
    v19 = v18;
    v20 = *(void (**)(char *, uint64_t))(v7 + 8);
    v21 = v17;
    v20(v9, v6);
    swift_bridgeObjectRetain();
    *a2 = v23;
    a2[1] = v13;
    a2[2] = v22;
    a2[3] = v16;
    a2[4] = v21;
    a2[5] = v19;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_224E7A918()
{
  unint64_t result;

  result = qword_2557E1EA0;
  if (!qword_2557E1EA0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6F81C, &type metadata for UnknownResource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1EA0);
  }
  return result;
}

uint64_t UnknownResource.resourceType.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UnknownResource.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UnknownResource.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*UnknownResource.id.modify())()
{
  return nullsub_1;
}

uint64_t UnknownResource.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UnknownResource.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v2)
    {
LABEL_3:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224F67C34();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_224F68528();
    if (v2)
      goto LABEL_3;
  }
  return sub_224F68528();
}

uint64_t sub_224E7AB18()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 25705;
  if (*v0 != 1)
    v1 = 0x65676175676E616CLL;
  if (*v0)
    return v1;
  else
    return 0x656372756F736572;
}

uint64_t sub_224E7AB70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E7BA0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224E7AB94()
{
  sub_224E7A918();
  return sub_224F685B8();
}

uint64_t sub_224E7ABBC()
{
  sub_224E7A918();
  return sub_224F685C4();
}

uint64_t UnknownResource.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  char v13;
  char v14;
  char v15;

  sub_224E7B47C(0, &qword_2557E1EA8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v12 - v6;
  v8 = v1[2];
  v12[3] = v1[3];
  v12[4] = v8;
  v9 = v1[4];
  v12[1] = v1[5];
  v12[2] = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E7A918();
  sub_224F68594();
  v15 = 0;
  v10 = v12[5];
  sub_224F68348();
  if (!v10)
  {
    v14 = 1;
    sub_224F68300();
    v13 = 2;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t UnknownResource.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  sub_224F68510();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_224F68528();
    if (v2)
      goto LABEL_3;
LABEL_5:
    sub_224F68528();
    return sub_224F6854C();
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_5;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224E7AE48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_224E7AE74@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return UnknownResource.init(from:)(a1, a2);
}

uint64_t sub_224E7AE88(_QWORD *a1)
{
  return UnknownResource.encode(to:)(a1);
}

uint64_t sub_224E7AEA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  sub_224F68510();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_224F68528();
    if (v2)
      goto LABEL_3;
LABEL_5:
    sub_224F68528();
    return sub_224F6854C();
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_5;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t UnknownResource.description.getter()
{
  sub_224F680E4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  return 0x100000000000001CLL;
}

uint64_t sub_224E7B038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_OWORD *)(v1 + 16) = *(_OWORD *)v0;
  v2 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v1 + 40) = v2;
  return swift_task_switch();
}

uint64_t sub_224E7B060()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  v1 = objc_msgSend((id)objc_opt_self(), sel_textSystem);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_224F680E4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend((id)objc_opt_self(), sel_medicalCodingWithSystem_codingVersion_code_displayString_, v1, 0, 0, v2, 0x100000000000001CLL, 0x8000000224F81FD0);

  v4 = objc_msgSend((id)objc_opt_self(), sel_collectionWithCoding_, v3);
  return (*(uint64_t (**)(id))(v0 + 8))(v4);
}

uint64_t sub_224E7B1EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = a1;
  type metadata accessor for RecordExtractionContext();
  *(_QWORD *)(v2 + 24) = swift_task_alloc();
  *(_OWORD *)(v2 + 32) = *(_OWORD *)v1;
  v3 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v2 + 56) = v3;
  return swift_task_switch();
}

uint64_t sub_224E7B258()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(uint64_t **)(v0 + 24);
  sub_224E7BB60();
  sub_224E7BB9C(v2, (uint64_t)v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_224F680E4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = sub_224F212AC(v1, 0x100000000000001CLL, 0x8000000224F81FD0);
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

uint64_t _s23HealthRecordsExtraction15UnknownResourceV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  char v12;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v7 = a2[2];
  v6 = a2[3];
  v9 = a2[4];
  v8 = a2[5];
  if (*a1 == *a2 && a1[1] == a2[1] || (v10 = sub_224F683CC(), result = 0, (v10 & 1) != 0))
  {
    if (v4)
    {
      if (!v6)
        return 0;
      if (v2 != v7 || v4 != v6)
      {
        v12 = sub_224F683CC();
        result = 0;
        if ((v12 & 1) == 0)
          return result;
      }
    }
    else if (v6)
    {
      return 0;
    }
    if (v5)
    {
      if (v8 && (v3 == v9 && v5 == v8 || (sub_224F683CC() & 1) != 0))
        return 1;
    }
    else if (!v8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void sub_224E7B47C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224E7A918();
    v7 = a3(a1, &type metadata for UnknownResource.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_224E7B4D8(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_224E7B50C();
  a1[2] = sub_224E7B550();
  result = sub_224E7B594();
  a1[3] = result;
  return result;
}

unint64_t sub_224E7B50C()
{
  unint64_t result;

  result = qword_2557E1EB0;
  if (!qword_2557E1EB0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for UnknownResource, &type metadata for UnknownResource);
    atomic_store(result, (unint64_t *)&qword_2557E1EB0);
  }
  return result;
}

unint64_t sub_224E7B550()
{
  unint64_t result;

  result = qword_2557E1EB8;
  if (!qword_2557E1EB8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for UnknownResource, &type metadata for UnknownResource);
    atomic_store(result, (unint64_t *)&qword_2557E1EB8);
  }
  return result;
}

unint64_t sub_224E7B594()
{
  unint64_t result;

  result = qword_2557E1EC0;
  if (!qword_2557E1EC0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for UnknownResource, &type metadata for UnknownResource);
    atomic_store(result, (unint64_t *)&qword_2557E1EC0);
  }
  return result;
}

unint64_t sub_224E7B5D8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_224E7B50C();
  result = sub_224E7B550();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_224E7B608()
{
  unint64_t result;

  result = qword_2557E1EC8;
  if (!qword_2557E1EC8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for UnknownResource, &type metadata for UnknownResource);
    atomic_store(result, (unint64_t *)&qword_2557E1EC8);
  }
  return result;
}

uint64_t destroy for UnknownResource()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for UnknownResource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for UnknownResource(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for UnknownResource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnknownResource(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnknownResource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnknownResource()
{
  return &type metadata for UnknownResource;
}

uint64_t storeEnumTagSinglePayload for UnknownResource.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_224E7B8B4 + 4 * byte_224F6F5F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_224E7B8E8 + 4 * byte_224F6F5F0[v4]))();
}

uint64_t sub_224E7B8E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E7B8F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E7B8F8);
  return result;
}

uint64_t sub_224E7B904(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E7B90CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_224E7B910(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E7B918(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnknownResource.CodingKeys()
{
  return &type metadata for UnknownResource.CodingKeys;
}

unint64_t sub_224E7B938()
{
  unint64_t result;

  result = qword_2557E1ED0;
  if (!qword_2557E1ED0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6F7F4, &type metadata for UnknownResource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1ED0);
  }
  return result;
}

unint64_t sub_224E7B980()
{
  unint64_t result;

  result = qword_2557E1ED8;
  if (!qword_2557E1ED8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6F764, &type metadata for UnknownResource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1ED8);
  }
  return result;
}

unint64_t sub_224E7B9C8()
{
  unint64_t result;

  result = qword_2557E1EE0;
  if (!qword_2557E1EE0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6F78C, &type metadata for UnknownResource.CodingKeys);
    atomic_store(result, &qword_2557E1EE0);
  }
  return result;
}

uint64_t sub_224E7BA0C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_224E7BB60()
{
  unint64_t result;

  result = qword_2557E1EF8;
  if (!qword_2557E1EF8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E1EF8);
  }
  return result;
}

uint64_t sub_224E7BB9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RecordExtractionContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_224E7BBE0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, _QWORD *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v30;
  uint64_t v31;
  char *v32;
  id result;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *ObjCClassFromMetadata;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  id v68;
  void *v69;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  id v89;
  void *v90;
  uint64_t v91;
  void *v92;
  int v93;
  char *v94;
  id v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t *v99;
  id v100;
  id v101;
  id v102;
  id v103;

  sub_224E7C238();
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v79 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5451C(0, &qword_2557E1F00);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_vaccinationRecordTypeForIdentifier_, *MEMORY[0x24BDD3848]);
  if (!result)
  {
    __break(1u);
    return result;
  }
  v95 = result;
  if (a4)
  {
    v81 = sub_224F67B5C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v81 = 0;
  }
  v34 = a8[1];
  v35 = a8[2];
  v96 = a6;
  v97 = a7;
  v85 = a8;
  if (v34 == 0xD000000000000010 && v35 == 0x8000000224F81FF0)
    v93 = 1;
  else
    v93 = sub_224F683CC();
  v36 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20));
  v37 = type metadata accessor for ExtractionContext();
  v94 = (char *)v36 + *(int *)(v37 + 28);
  v38 = sub_224F67718();
  v91 = *a1;
  v92 = (void *)v38;
  v98 = a2;
  sub_224E7C28C(a2, (uint64_t)v32);
  v39 = sub_224F677D8();
  v40 = *(_QWORD *)(v39 - 8);
  v41 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v32, 1, v39) != 1)
  {
    v41 = sub_224F677C0();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v39);
  }
  v90 = (void *)v41;
  v42 = *v36;
  v43 = objc_msgSend((id)objc_opt_self(), sel_localDevice);
  v44 = *(uint64_t *)((char *)v36 + *(int *)(v37 + 40));
  v89 = v43;
  if (v44)
  {
    v45 = swift_bridgeObjectRetain();
    sub_224F073F8(v45);
    swift_bridgeObjectRelease();
    v80 = sub_224F67AE4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v80 = 0;
  }
  swift_bridgeObjectRetain();
  v46 = sub_224F67B5C();
  swift_bridgeObjectRelease();
  v47 = v36[1];
  sub_224E5451C(0, (unint64_t *)&qword_2557E1648);
  v88 = sub_224F67D60();
  swift_bridgeObjectRelease();
  v86 = v42;
  v87 = (void *)v46;
  if (a10)
  {
    v79 = sub_224F67B5C();
    swift_bridgeObjectRelease();
    v48 = a14;
    if (a12)
    {
LABEL_16:
      v100 = (id)sub_224F67B5C();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  else
  {
    v79 = 0;
    v48 = a14;
    if (a12)
      goto LABEL_16;
  }
  v100 = 0;
LABEL_19:
  v99 = a1;
  if (v48)
  {
    v103 = (id)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v49 = a17;
    if (a16)
      goto LABEL_21;
LABEL_24:
    v102 = 0;
    v50 = a19;
    if (v49)
      goto LABEL_22;
    goto LABEL_25;
  }
  v103 = 0;
  v49 = a17;
  if (!a16)
    goto LABEL_24;
LABEL_21:
  v102 = (id)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v50 = a19;
  if (v49)
  {
LABEL_22:
    v101 = (id)sub_224F67D60();
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
LABEL_25:
  v101 = 0;
LABEL_26:
  if (v50)
  {
    v51 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v51 = 0;
  }
  v52 = sub_224F22D04();
  if (!a22)
  {
    v53 = 0;
    v54 = a24;
    if (a23)
      goto LABEL_31;
LABEL_33:
    v55 = 0;
    goto LABEL_34;
  }
  v53 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v54 = a24;
  if (!a23)
    goto LABEL_33;
LABEL_31:
  sub_224E7C2D0();
  v55 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
LABEL_34:
  if (v54)
  {
    sub_224E7C2D0();
    v56 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
  }
  else
  {
    v56 = 0;
  }
  v83 = v56;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v78 = v56;
  v85 = v55;
  v76 = v53;
  v77 = v55;
  LOBYTE(v75) = a21 & 1;
  v84 = v52;
  v74 = v52;
  LOBYTE(v73) = a20 & 1;
  v82 = v51;
  v72 = v51;
  v58 = (void *)v79;
  v71 = v97;
  v59 = (void *)v88;
  v70 = (v47 >> 2) & 1;
  v97 = v53;
  v60 = v87;
  v61 = (void *)v80;
  v62 = v89;
  v63 = v95;
  v64 = (void *)v81;
  v65 = v92;
  v66 = v90;
  v67 = objc_retainAutoreleasedReturnValue(objc_msgSend(ObjCClassFromMetadata, sel_vaccinationRecordWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_vaccinationCodings_expirationDate_doseNumber_doseQuantity_lotNumber_performer_bodySiteCodings_reaction_notGiven_administrationDate_statusCoding_patientReported_routeCodings_reasonsCodings_reasonsNotGivenCodings_, v95, v81, v93 & 1, v92, v91, v90, v86, v89, v80, v87, v70, v88, v71, v79, v100, v103,
            v102,
            v101,
            v72,
            v73,
            v96,
            v74,
            v75,
            v76,
            v77,
            v78));

  v68 = v67;
  v69 = (void *)sub_224F67718();
  objc_msgSend(v68, sel_setCreationDate_, v69);

  sub_224DDEAA0(v98, (uint64_t (*)(_QWORD))sub_224E7C238);
  sub_224DDEAA0((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  return v68;
}

void sub_224E7C238()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E1D00)
  {
    sub_224F677D8();
    v0 = sub_224F67FF4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E1D00);
  }
}

uint64_t sub_224E7C28C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E7C238();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_224E7C2D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E1F08)
  {
    sub_224E5451C(255, (unint64_t *)&qword_2557E1648);
    v0 = sub_224F67DB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E1F08);
  }
}

uint64_t ModelsDSTU2.Bundle.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v3)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDE624(a1, v3);
    swift_bridgeObjectRelease();
    if (v4)
    {
LABEL_3:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224F67C34();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_224F68528();
    if (v4)
      goto LABEL_3;
  }
  return sub_224F68528();
}

void ModelsDSTU2.ResourceProxy.get()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  MEMORY[0x24BDAC7A8](v1);
  sub_224DDB408(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_224E7C4B4 + 4 * byte_224F6F870[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_224E7C4B4()
{
  uint64_t *v0;
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;

  v3 = *v1;
  *(_OWORD *)(v2 - 64) = v1[1];
  *(_OWORD *)(v2 - 48) = v3;
  v4 = *((_QWORD *)v1 + 4);
  v0[3] = (uint64_t)&type metadata for ModelsDSTU2.Bundle;
  v0[4] = sub_224E8BE5C();
  result = swift_allocObject();
  *v0 = result;
  v6 = *(_OWORD *)(v2 - 64);
  *(_OWORD *)(result + 16) = *(_OWORD *)(v2 - 48);
  *(_OWORD *)(result + 32) = v6;
  *(_QWORD *)(result + 48) = v4;
  return result;
}

void ModelsDSTU2.ResourceProxy.get<A>(if:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  MEMORY[0x24BDAC7A8](v1);
  sub_224DDB408(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_224E7C718 + 4 * byte_224F6F877[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_224E7C718()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  int v8;

  v4 = *v2;
  *(_OWORD *)(v3 - 128) = v2[1];
  *(_OWORD *)(v3 - 112) = v4;
  v5 = *((_QWORD *)v2 + 4);
  *(_QWORD *)(v3 - 64) = &type metadata for ModelsDSTU2.Bundle;
  *(_QWORD *)(v3 - 56) = sub_224E8BE5C();
  v6 = swift_allocObject();
  *(_QWORD *)(v3 - 88) = v6;
  v7 = *(_OWORD *)(v3 - 128);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(v3 - 112);
  *(_OWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 48) = v5;
  sub_224DDF538();
  v8 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 56))(v1, v8 ^ 1u, 1, v0);
}

uint64_t sub_224E7C924@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_224F68240();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_224E7C974@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_224F68240();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_224E7C9C8()
{
  sub_224E8BED4();
  return sub_224F685B8();
}

uint64_t sub_224E7C9F0()
{
  sub_224E8BED4();
  return sub_224F685C4();
}

uint64_t ModelsDSTU2.ResourceProxy.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  BOOL v52;
  char v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _OWORD *v61;
  _OWORD *v62;
  char *v63;
  char *v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD v81[3];
  _QWORD *v82;

  v67 = a2;
  sub_224DFB77C(0, &qword_2557E1F40, (uint64_t (*)(void))sub_224E8BED4, (uint64_t)&type metadata for ModelsDSTU2.ResourceProxy.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v70 = v3;
  v69 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v60 - v4;
  v66 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v6 = MEMORY[0x24BDAC7A8](v66);
  v68 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v64 = (char *)&v60 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v65 = (_OWORD *)((char *)&v60 - v11);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v60 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v60 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v60 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v60 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v60 - v24;
  v26 = a1[3];
  v82 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v26);
  sub_224E8BED4();
  v27 = v71;
  sub_224F6857C();
  if (!v27)
  {
    v71 = v23;
    v63 = v20;
    v62 = v17;
    v61 = v14;
    v28 = (uint64_t)v68;
    v29 = v69;
    v30 = (uint64_t)v25;
    v31 = v70;
    v32 = sub_224F682AC();
    v34 = v5;
    v37 = v32;
    v38 = v33;
    if (v32 == 0x656C646E7542 && v33 == 0xE600000000000000)
    {
      v40 = v5;
      goto LABEL_12;
    }
    if ((sub_224F683CC() & 1) != 0)
    {
      v40 = v5;
LABEL_12:
      swift_bridgeObjectRelease();
      v35 = (uint64_t)v82;
      sub_224DE5E88((uint64_t)v82, (uint64_t)v81);
      ModelsDSTU2.Bundle.init(from:)(v81, (uint64_t *)&v72);
      v41 = (uint64_t)v71;
      v42 = v30;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v40, v31);
      v43 = *((_QWORD *)&v72 + 1);
      v44 = v74;
      *(_QWORD *)v41 = v72;
      *(_QWORD *)(v41 + 8) = v43;
      *(_OWORD *)(v41 + 16) = v73;
      *(_QWORD *)(v41 + 32) = v44;
      swift_storeEnumTagMultiPayload();
      sub_224DDEADC(v41, v30, type metadata accessor for ModelsDSTU2.ResourceProxy);
LABEL_13:
      v45 = v67;
LABEL_30:
      sub_224DDEADC(v42, v45, type metadata accessor for ModelsDSTU2.ResourceProxy);
      return __swift_destroy_boxed_opaque_existential_1(v35);
    }
    if (v37 == 0x6F697469646E6F43 && v38 == 0xE90000000000006ELL)
    {
      swift_bridgeObjectRelease();
      v45 = v67;
      goto LABEL_21;
    }
    v47 = sub_224F683CC();
    v45 = v67;
    if ((v47 & 1) != 0)
    {
      swift_bridgeObjectRelease();
LABEL_21:
      v35 = (uint64_t)v82;
      sub_224DE5E88((uint64_t)v82, (uint64_t)&v72);
      v48 = (uint64_t)v63;
      ModelsDSTU2.Condition.init(from:)(&v72, (uint64_t)v63);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v34, v31);
      swift_storeEnumTagMultiPayload();
      v49 = v48;
      v42 = v30;
      v50 = v30;
LABEL_29:
      sub_224DDEADC(v49, v50, type metadata accessor for ModelsDSTU2.ResourceProxy);
      goto LABEL_30;
    }
    v71 = v34;
    if (v37 == 0xD000000000000010 && v38 == 0x8000000224F6F9A0)
    {
      swift_bridgeObjectRelease();
      v42 = v30;
    }
    else
    {
      v42 = v30;
      if ((sub_224F683CC() & 1) == 0)
      {
        v52 = v37 == 0x617A696E756D6D49 && v38 == 0xEC0000006E6F6974;
        if (v52 || (sub_224F683CC() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v35 = (uint64_t)v82;
          sub_224DE5E88((uint64_t)v82, (uint64_t)&v72);
          v51 = v61;
          ModelsDSTU2.Immunization.init(from:)(&v72, (uint64_t)v61);
          (*(void (**)(char *, uint64_t))(v29 + 8))(v71, v31);
        }
        else if (v37 == 0x746176726573624FLL && v38 == 0xEB000000006E6F69 || (sub_224F683CC() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v35 = (uint64_t)v82;
          sub_224DE5E88((uint64_t)v82, (uint64_t)&v72);
          v51 = v65;
          ModelsDSTU2.Observation.init(from:)(&v72, (uint64_t)v65);
          (*(void (**)(char *, uint64_t))(v29 + 8))(v71, v31);
        }
        else
        {
          if (v37 == 0x746E6569746150 && v38 == 0xE700000000000000)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v53 = sub_224F683CC();
            swift_bridgeObjectRelease();
            if ((v53 & 1) == 0)
            {
              sub_224DE5E88((uint64_t)v82, (uint64_t)v81);
              UnknownResource.init(from:)(v81, (uint64_t *)&v72);
              (*(void (**)(char *, uint64_t))(v29 + 8))(v71, v31);
              v58 = *((_QWORD *)&v72 + 1);
              *(_QWORD *)v28 = v72;
              *(_QWORD *)(v28 + 8) = v58;
              v59 = v74;
              *(_OWORD *)(v28 + 16) = v73;
              *(_OWORD *)(v28 + 32) = v59;
              swift_storeEnumTagMultiPayload();
              v42 = v30;
              sub_224DDEADC(v28, v30, type metadata accessor for ModelsDSTU2.ResourceProxy);
              v35 = (uint64_t)v82;
              goto LABEL_13;
            }
          }
          v35 = (uint64_t)v82;
          sub_224DE5E88((uint64_t)v82, (uint64_t)v81);
          ModelsDSTU2.Patient.init(from:)(v81, &v72);
          (*(void (**)(char *, uint64_t))(v29 + 8))(v71, v31);
          v54 = v79;
          v51 = v64;
          *((_OWORD *)v64 + 6) = v78;
          v51[7] = v54;
          v51[8] = v80;
          v55 = v75;
          v51[2] = v74;
          v51[3] = v55;
          v56 = v77;
          v51[4] = v76;
          v51[5] = v56;
          v57 = v73;
          *v51 = v72;
          v51[1] = v57;
        }
        goto LABEL_28;
      }
      swift_bridgeObjectRelease();
    }
    v35 = (uint64_t)v82;
    sub_224DE5E88((uint64_t)v82, (uint64_t)&v72);
    v51 = v62;
    ModelsDSTU2.DiagnosticReport.init(from:)(&v72, (uint64_t)v62);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v71, v31);
LABEL_28:
    swift_storeEnumTagMultiPayload();
    v49 = (uint64_t)v51;
    v50 = v42;
    goto LABEL_29;
  }
  v35 = (uint64_t)v82;
  return __swift_destroy_boxed_opaque_existential_1(v35);
}

uint64_t ModelsDSTU2.Bundle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ValueMetadata *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  ValueMetadata *v22;

  v19 = a2;
  sub_224DFB77C(0, &qword_2557E1F50, (uint64_t (*)(void))sub_224E8BF18, (uint64_t)&type metadata for ModelsDSTU2.Bundle.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v20 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - v6;
  v22 = &type metadata for ModelsDSTU2.Bundle;
  sub_224E8BF5C();
  sub_224F67BC8();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8BF18();
  sub_224F6857C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    LOBYTE(v22) = 0;
    v8 = v20;
    v10 = sub_224F682AC();
    v12 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_224DDEA0C(0, &qword_2557E1F68, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v21 = 1;
    sub_224E8BFA8();
    sub_224F68294();
    v18 = v10;
    v13 = v22;
    LOBYTE(v22) = 2;
    swift_bridgeObjectRetain();
    v14 = sub_224F68264();
    v16 = v15;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v8);
    swift_bridgeObjectRetain();
    v17 = v19;
    *v19 = v18;
    v17[1] = v12;
    v17[2] = (uint64_t)v13;
    v17[3] = v14;
    v17[4] = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t ModelsDSTU2.Condition.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t *v37;
  int *v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  uint64_t *v93;
  int *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  char v98;

  v85 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v86 = (uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v88 = (uint64_t)&v82 - v7;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v87 = (uint64_t)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v89 = (uint64_t)&v82 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v82 - v13;
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v3);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v82 - v16;
  sub_224DFB77C(0, &qword_2557E1F80, (uint64_t (*)(void))sub_224E8C038, (uint64_t)&type metadata for ModelsDSTU2.Condition.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v90 = v18;
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v82 - v20;
  v22 = type metadata accessor for ModelsDSTU2.Condition(0);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (uint64_t *)((char *)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v94 = (int *)v23;
  *(_QWORD *)&v96 = v23;
  sub_224DE6244(0, &qword_2557E1F90, v26);
  *v25 = sub_224F67BC8();
  v25[1] = v27;
  v92 = a1;
  v93 = v25;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8C038();
  v91 = v21;
  v28 = v95;
  sub_224F6857C();
  if (v28)
  {
    v95 = v28;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    LODWORD(v83) = 0;
    LODWORD(v84) = 0;
    LODWORD(v85) = 0;
    LODWORD(v86) = 0;
    LODWORD(v87) = 0;
    LODWORD(v88) = 0;
    LODWORD(v89) = 0;
    LODWORD(v90) = 0;
    LODWORD(v91) = 0;
  }
  else
  {
    v29 = (uint64_t)v14;
    v84 = v19;
    LOBYTE(v96) = 0;
    v40 = sub_224F682AC();
    v42 = v41;
    swift_bridgeObjectRelease();
    v43 = v93;
    *v93 = v40;
    v43[1] = v42;
    v98 = 1;
    sub_224DDAD48();
    sub_224F68294();
    v44 = v94;
    v43[2] = v96;
    type metadata accessor for Reference();
    LOBYTE(v96) = 2;
    sub_224DDACD4(&qword_2557E0500, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
    sub_224F68294();
    sub_224DFAC88((uint64_t)v17, (uint64_t)v43 + v44[6], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    v45 = type metadata accessor for FHIRDateTime();
    LOBYTE(v96) = 3;
    v46 = sub_224DDACD4(&qword_2557E04F0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68294();
    v82 = v45;
    v83 = v46;
    sub_224DFAC88(v29, (uint64_t)v43 + v44[7], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v98 = 4;
    sub_224DE60BC();
    sub_224F682DC();
    v47 = v97;
    v48 = (char *)v43 + v44[8];
    *(_OWORD *)v48 = v96;
    *((_QWORD *)v48 + 2) = v47;
    v98 = 5;
    sub_224F68294();
    v49 = v97;
    v50 = (char *)v43 + v44[9];
    *(_OWORD *)v50 = v96;
    *((_QWORD *)v50 + 2) = v49;
    LOBYTE(v96) = 6;
    v51 = sub_224F68264();
    v52 = (uint64_t *)((char *)v43 + v44[10]);
    *v52 = v51;
    v52[1] = v53;
    LOBYTE(v96) = 7;
    v54 = sub_224F682AC();
    v55 = (uint64_t *)((char *)v43 + v44[11]);
    *v55 = v54;
    v55[1] = v56;
    v98 = 8;
    sub_224F68294();
    v95 = 0;
    v57 = v97;
    v58 = (char *)v43 + v44[12];
    *(_OWORD *)v58 = v96;
    *((_QWORD *)v58 + 2) = v57;
    sub_224DFB644(0, &qword_2557E04E0);
    v98 = 9;
    sub_224DE6100();
    v59 = v95;
    sub_224F68294();
    v95 = v59;
    if (v59)
    {
      (*(void (**)(char *, uint64_t))(v84 + 8))(v91, v90);
      LODWORD(v84) = 0;
      LODWORD(v85) = 0;
      LODWORD(v86) = 0;
      LODWORD(v87) = 0;
      LODWORD(v88) = 0;
      LODWORD(v89) = 0;
      LODWORD(v90) = 0;
      LODWORD(v91) = 0;
      v30 = 1;
      v31 = 1;
      v32 = 1;
      v33 = 1;
      v34 = 1;
      v35 = 1;
      v36 = 1;
      LODWORD(v83) = 1;
    }
    else
    {
      *(uint64_t *)((char *)v93 + v94[13]) = v96;
      LOBYTE(v96) = 10;
      sub_224F68294();
      v95 = 0;
      sub_224DFAC88(v89, (uint64_t)v93 + v94[14], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      type metadata accessor for Period();
      LOBYTE(v96) = 11;
      sub_224DDACD4(&qword_2557E04F8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
      v60 = v95;
      sub_224F68294();
      v95 = v60;
      if (v60)
      {
        (*(void (**)(char *, uint64_t))(v84 + 8))(v91, v90);
        LODWORD(v86) = 0;
        LODWORD(v87) = 0;
        LODWORD(v88) = 0;
        LODWORD(v89) = 0;
        LODWORD(v90) = 0;
        LODWORD(v91) = 0;
        v30 = 1;
        v31 = 1;
        v32 = 1;
        v33 = 1;
        v34 = 1;
        v35 = 1;
        v36 = 1;
        LODWORD(v83) = 1;
        LODWORD(v84) = 1;
        LODWORD(v85) = 1;
      }
      else
      {
        sub_224DFAC88(v88, (uint64_t)v93 + v94[15], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        LOBYTE(v96) = 12;
        v61 = v95;
        v62 = sub_224F68264();
        v95 = v61;
        if (v61)
        {
          (*(void (**)(char *, uint64_t))(v84 + 8))(v91, v90);
          LODWORD(v87) = 0;
          LODWORD(v88) = 0;
          LODWORD(v89) = 0;
          LODWORD(v90) = 0;
          LODWORD(v91) = 0;
          v30 = 1;
          v31 = 1;
          v32 = 1;
          v33 = 1;
          v34 = 1;
          v35 = 1;
          v36 = 1;
          LODWORD(v83) = 1;
          LODWORD(v84) = 1;
          LODWORD(v85) = 1;
          LODWORD(v86) = 1;
        }
        else
        {
          v64 = (uint64_t *)((char *)v93 + v94[16]);
          *v64 = v62;
          v64[1] = v63;
          LOBYTE(v96) = 13;
          v65 = v95;
          sub_224F68294();
          v95 = v65;
          if (v65)
          {
            (*(void (**)(char *, uint64_t))(v84 + 8))(v91, v90);
            LODWORD(v88) = 0;
            LODWORD(v89) = 0;
            LODWORD(v90) = 0;
            LODWORD(v91) = 0;
            v30 = 1;
            v31 = 1;
            v32 = 1;
            v33 = 1;
            v34 = 1;
            v35 = 1;
            v36 = 1;
            LODWORD(v83) = 1;
            LODWORD(v84) = 1;
            LODWORD(v85) = 1;
            LODWORD(v86) = 1;
            LODWORD(v87) = 1;
          }
          else
          {
            sub_224DFAC88(v87, (uint64_t)v93 + v94[17], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            LOBYTE(v96) = 14;
            v66 = v95;
            sub_224F68294();
            v95 = v66;
            if (v66)
            {
              (*(void (**)(char *, uint64_t))(v84 + 8))(v91, v90);
              LODWORD(v89) = 0;
              LODWORD(v90) = 0;
              LODWORD(v91) = 0;
              v30 = 1;
              v31 = 1;
              v32 = 1;
              v33 = 1;
              v34 = 1;
              v35 = 1;
              v36 = 1;
              LODWORD(v83) = 1;
              LODWORD(v84) = 1;
              LODWORD(v85) = 1;
              LODWORD(v86) = 1;
              LODWORD(v87) = 1;
              LODWORD(v88) = 1;
            }
            else
            {
              sub_224DFAC88(v86, (uint64_t)v93 + v94[18], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
              LOBYTE(v96) = 15;
              v67 = v95;
              v68 = sub_224F68264();
              v95 = v67;
              if (v67)
              {
                (*(void (**)(char *, uint64_t))(v84 + 8))(v91, v90);
                LODWORD(v90) = 0;
                LODWORD(v91) = 0;
                v30 = 1;
                v31 = 1;
                v32 = 1;
                v33 = 1;
                v34 = 1;
                v35 = 1;
                v36 = 1;
                LODWORD(v83) = 1;
                LODWORD(v84) = 1;
                LODWORD(v85) = 1;
                LODWORD(v86) = 1;
                LODWORD(v87) = 1;
                LODWORD(v88) = 1;
                LODWORD(v89) = 1;
              }
              else
              {
                v70 = (uint64_t *)((char *)v93 + v94[19]);
                *v70 = v68;
                v70[1] = v69;
                LOBYTE(v96) = 16;
                v71 = v95;
                v72 = sub_224F68264();
                v95 = v71;
                if (v71)
                {
                  (*(void (**)(char *, uint64_t))(v84 + 8))(v91, v90);
                  LODWORD(v91) = 0;
                  v30 = 1;
                  v31 = 1;
                  v32 = 1;
                  v33 = 1;
                  v34 = 1;
                  v35 = 1;
                  v36 = 1;
                  LODWORD(v83) = 1;
                  LODWORD(v84) = 1;
                  LODWORD(v85) = 1;
                  LODWORD(v86) = 1;
                  LODWORD(v87) = 1;
                  LODWORD(v88) = 1;
                  LODWORD(v89) = 1;
                  LODWORD(v90) = 1;
                }
                else
                {
                  v74 = (uint64_t *)((char *)v93 + v94[20]);
                  *v74 = v72;
                  v74[1] = v73;
                  LOBYTE(v96) = 17;
                  v75 = v95;
                  v76 = sub_224F68264();
                  v95 = v75;
                  if (!v75)
                  {
                    v78 = v76;
                    v79 = v77;
                    (*(void (**)(char *, uint64_t))(v84 + 8))(v91, v90);
                    v80 = (uint64_t)v93;
                    v81 = (uint64_t *)((char *)v93 + v94[21]);
                    *v81 = v78;
                    v81[1] = v79;
                    sub_224DDB408(v80, v85, type metadata accessor for ModelsDSTU2.Condition);
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
                    return sub_224DDEAA0(v80, type metadata accessor for ModelsDSTU2.Condition);
                  }
                  (*(void (**)(char *, uint64_t))(v84 + 8))(v91, v90);
                  v30 = 1;
                  v31 = 1;
                  v32 = 1;
                  v33 = 1;
                  v34 = 1;
                  v35 = 1;
                  v36 = 1;
                  LODWORD(v83) = 1;
                  LODWORD(v84) = 1;
                  LODWORD(v85) = 1;
                  LODWORD(v86) = 1;
                  LODWORD(v87) = 1;
                  LODWORD(v88) = 1;
                  LODWORD(v89) = 1;
                  LODWORD(v90) = 1;
                  LODWORD(v91) = 1;
                }
              }
            }
          }
        }
      }
    }
  }
  v37 = v93;
  v38 = v94;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
  result = swift_bridgeObjectRelease();
  if (v30)
  {
    result = sub_224DE60AC(v37[2]);
    if (!v31)
    {
LABEL_6:
      if (!v32)
        goto LABEL_7;
      goto LABEL_23;
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  result = sub_224DDB50C((uint64_t)v37 + v38[6], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (!v32)
  {
LABEL_7:
    if (!v33)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  result = sub_224DDB50C((uint64_t)v37 + v38[7], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v33)
  {
LABEL_8:
    if (!v34)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v34)
  {
LABEL_9:
    if (!v35)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  result = sub_224DDB480(*(uint64_t *)((char *)v37 + v38[9]), *(uint64_t *)((char *)v37 + v38[9] + 8));
  if (!v35)
  {
LABEL_10:
    if (!v36)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  result = swift_bridgeObjectRelease();
  if (!v36)
  {
LABEL_11:
    if (!(_DWORD)v83)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  result = swift_bridgeObjectRelease();
  if (!(_DWORD)v83)
  {
LABEL_12:
    if (!(_DWORD)v84)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  result = sub_224DDB480(*(uint64_t *)((char *)v37 + v38[12]), *(uint64_t *)((char *)v37 + v38[12] + 8));
  if (!(_DWORD)v84)
  {
LABEL_13:
    if (!(_DWORD)v85)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  result = swift_bridgeObjectRelease();
  if (!(_DWORD)v85)
  {
LABEL_14:
    if (!(_DWORD)v86)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  result = sub_224DDB50C((uint64_t)v37 + v38[14], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!(_DWORD)v86)
  {
LABEL_15:
    if (!(_DWORD)v87)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  result = sub_224DDB50C((uint64_t)v37 + v38[15], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (!(_DWORD)v87)
  {
LABEL_16:
    if (!(_DWORD)v88)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  result = swift_bridgeObjectRelease();
  if (!(_DWORD)v88)
  {
LABEL_17:
    if (!(_DWORD)v89)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  result = sub_224DDB50C((uint64_t)v37 + v38[17], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!(_DWORD)v89)
  {
LABEL_18:
    if (!(_DWORD)v90)
      goto LABEL_19;
LABEL_35:
    result = swift_bridgeObjectRelease();
    if (!(_DWORD)v91)
      return result;
    return swift_bridgeObjectRelease();
  }
LABEL_34:
  result = sub_224DDB50C((uint64_t)v37 + v38[18], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((_DWORD)v90)
    goto LABEL_35;
LABEL_19:
  if (!(_DWORD)v91)
    return result;
  return swift_bridgeObjectRelease();
}

uint64_t ModelsDSTU2.DiagnosticReport.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  int *v55;
  __int128 v56;
  uint64_t v57;
  char v58;

  v47 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v49 = (char *)&v46 - v5;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v48 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v46 - v9;
  sub_224DFB77C(0, &qword_2557E1F98, (uint64_t (*)(void))sub_224E8C07C, (uint64_t)&type metadata for ModelsDSTU2.DiagnosticReport.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v50 = v11;
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v46 - v13;
  v15 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t *)((char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v55 = (int *)v16;
  *(_QWORD *)&v56 = v16;
  sub_224DE6244(0, &qword_2557E1FA8, v19);
  *v18 = sub_224F67BC8();
  v18[1] = v20;
  v18[2] = 0;
  v18[3] = 0;
  v52 = v18;
  v53 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8C07C();
  v51 = v14;
  v21 = v54;
  sub_224F6857C();
  if (v21)
  {
    v54 = v21;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v22 = (uint64_t)v10;
    LOBYTE(v56) = 0;
    v23 = v50;
    v25 = sub_224F682AC();
    v27 = v26;
    swift_bridgeObjectRelease();
    v28 = (uint64_t)v52;
    *v52 = v25;
    *(_QWORD *)(v28 + 8) = v27;
    LOBYTE(v56) = 1;
    v29 = sub_224F68264();
    v30 = (uint64_t)v53;
    *(_QWORD *)(v28 + 16) = v29;
    *(_QWORD *)(v28 + 24) = v31;
    LOBYTE(v56) = 2;
    v32 = v12;
    *(_QWORD *)(v28 + 32) = sub_224F682AC();
    *(_QWORD *)(v28 + 40) = v33;
    v58 = 3;
    sub_224DE60BC();
    sub_224F682DC();
    v34 = v57;
    *(_OWORD *)(v28 + 48) = v56;
    *(_QWORD *)(v28 + 64) = v34;
    LOBYTE(v56) = 4;
    *(_QWORD *)(v28 + 72) = sub_224F68264();
    *(_QWORD *)(v28 + 80) = v35;
    type metadata accessor for FHIRDateTime();
    LOBYTE(v56) = 5;
    v36 = sub_224DDACD4(&qword_2557E04F0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68294();
    v54 = v36;
    sub_224DFAC88(v22, v28 + v55[9], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    type metadata accessor for Period();
    LOBYTE(v56) = 6;
    sub_224DDACD4(&qword_2557E04F8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
    v37 = (uint64_t)v49;
    sub_224F68294();
    v38 = v55;
    sub_224DFAC88(v37, v28 + v55[10], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    LOBYTE(v56) = 7;
    v39 = (uint64_t)v48;
    sub_224F68294();
    sub_224DFAC88(v39, v28 + v38[11], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    LOBYTE(v56) = 8;
    v40 = v51;
    v41 = sub_224F68264();
    v54 = 0;
    v42 = v41;
    v44 = v43;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v40, v23);
    v45 = (uint64_t *)(v28 + v55[12]);
    *v45 = v42;
    v45[1] = v44;
    sub_224DDB408(v28, v47, type metadata accessor for ModelsDSTU2.DiagnosticReport);
    __swift_destroy_boxed_opaque_existential_1(v30);
    return sub_224DDEAA0(v28, type metadata accessor for ModelsDSTU2.DiagnosticReport);
  }
}

uint64_t ModelsDSTU2.Immunization.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t *v33;
  uint64_t result;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  int *v71;
  __int128 v72;
  uint64_t v73;
  char v74;

  v64 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v65 = (uint64_t)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v62 - v7;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v62 - v10;
  sub_224DFB77C(0, &qword_2557E1FB0, (uint64_t (*)(void))sub_224E8C0C0, (uint64_t)&type metadata for ModelsDSTU2.Immunization.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v67 = v12;
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v62 - v14;
  v16 = type metadata accessor for ModelsDSTU2.Immunization(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (uint64_t *)((char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v71 = (int *)v17;
  *(_QWORD *)&v72 = v17;
  sub_224DE6244(0, &qword_2557E1FC0, v20);
  *v19 = sub_224F67BC8();
  v19[1] = v21;
  v19[2] = 0;
  v19[3] = 0;
  v68 = a1;
  v69 = v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8C0C0();
  v66 = v15;
  v22 = v70;
  sub_224F6857C();
  if (v22)
  {
    v70 = v22;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    LODWORD(v67) = 0;
  }
  else
  {
    v23 = (uint64_t)v11;
    v63 = v8;
    v24 = v13;
    LOBYTE(v72) = 0;
    v36 = sub_224F682AC();
    v38 = v37;
    swift_bridgeObjectRelease();
    v39 = v69;
    *v69 = v36;
    v39[1] = v38;
    LOBYTE(v72) = 1;
    v39[2] = sub_224F68264();
    v39[3] = v40;
    v74 = 2;
    sub_224DDAD48();
    sub_224F68294();
    v39[4] = v72;
    LOBYTE(v72) = 3;
    v39[5] = sub_224F682AC();
    v39[6] = v41;
    type metadata accessor for FHIRDateTime();
    LOBYTE(v72) = 4;
    sub_224DDACD4(&qword_2557E04F0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68294();
    v42 = v71;
    sub_224DFAC88(v23, (uint64_t)v39 + v71[8], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v74 = 5;
    sub_224DE65D4();
    sub_224F68294();
    v43 = DWORD2(v72);
    v44 = BYTE12(v72);
    v45 = (char *)v39 + v42[9];
    *(_QWORD *)v45 = v72;
    *((_DWORD *)v45 + 2) = v43;
    v45[12] = v44;
    sub_224DDEA0C(0, &qword_2557E0508, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v74 = 6;
    sub_224DE6170();
    sub_224F68294();
    *(uint64_t *)((char *)v39 + v42[10]) = v72;
    LOBYTE(v72) = 7;
    *((_BYTE *)v39 + v42[11]) = sub_224F682B8() & 1;
    sub_224DFB644(0, &qword_2557E1FC8);
    v74 = 8;
    sub_224E8C104();
    sub_224F68294();
    v70 = 0;
    *(uint64_t *)((char *)v39 + v71[12]) = v72;
    v74 = 9;
    sub_224DE60BC();
    v46 = v70;
    sub_224F682DC();
    v70 = v46;
    if (v46)
    {
      (*(void (**)(char *, uint64_t))(v24 + 8))(v66, v67);
      v30 = 0;
      v31 = 0;
      v32 = 0;
      LODWORD(v67) = 0;
      v25 = 1;
      v26 = 1;
      v27 = 1;
      v28 = 1;
      v29 = 1;
    }
    else
    {
      v47 = v73;
      v48 = (char *)v69 + v71[13];
      *(_OWORD *)v48 = v72;
      *((_QWORD *)v48 + 2) = v47;
      LOBYTE(v72) = 10;
      v49 = sub_224F682B8();
      v70 = 0;
      *((_BYTE *)v69 + v71[14]) = v49 & 1;
      type metadata accessor for Reference();
      LOBYTE(v72) = 11;
      sub_224DDACD4(&qword_2557E0500, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
      v50 = v70;
      sub_224F68294();
      v70 = v50;
      if (v50)
      {
        (*(void (**)(char *, uint64_t))(v24 + 8))(v66, v67);
        v31 = 0;
        v32 = 0;
        LODWORD(v67) = 0;
        v25 = 1;
        v26 = 1;
        v27 = 1;
        v28 = 1;
        v29 = 1;
        v30 = 1;
      }
      else
      {
        sub_224DFAC88((uint64_t)v63, (uint64_t)v69 + v71[15], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
        LOBYTE(v72) = 12;
        v51 = v70;
        v52 = sub_224F68264();
        v70 = v51;
        if (v51)
        {
          (*(void (**)(char *, uint64_t))(v24 + 8))(v66, v67);
          v32 = 0;
          LODWORD(v67) = 0;
          v25 = 1;
          v26 = 1;
          v27 = 1;
          v28 = 1;
          v29 = 1;
          v30 = 1;
          v31 = 1;
        }
        else
        {
          v54 = (uint64_t *)((char *)v69 + v71[16]);
          *v54 = v52;
          v54[1] = v53;
          LOBYTE(v72) = 13;
          sub_224F68294();
          v70 = 0;
          sub_224DFAC88(v65, (uint64_t)v69 + v71[17], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
          LOBYTE(v72) = 14;
          v55 = v70;
          v56 = sub_224F68264();
          v70 = v55;
          if (!v55)
          {
            v58 = v56;
            v59 = v57;
            (*(void (**)(char *, uint64_t))(v24 + 8))(v66, v67);
            v60 = (uint64_t)v69;
            v61 = (uint64_t *)((char *)v69 + v71[18]);
            *v61 = v58;
            v61[1] = v59;
            sub_224DDB408(v60, v64, type metadata accessor for ModelsDSTU2.Immunization);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
            return sub_224DDEAA0(v60, type metadata accessor for ModelsDSTU2.Immunization);
          }
          (*(void (**)(char *, uint64_t))(v24 + 8))(v66, v67);
          v25 = 1;
          v26 = 1;
          v27 = 1;
          v28 = 1;
          v29 = 1;
          v30 = 1;
          v31 = 1;
          v32 = 1;
          LODWORD(v67) = 1;
        }
      }
    }
  }
  v33 = v69;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v25)
  {
    result = sub_224DE60AC(v33[4]);
    if (!v26)
    {
LABEL_6:
      v35 = v71;
      if (!v27)
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  result = swift_bridgeObjectRelease();
  v35 = v71;
  if (!v27)
  {
LABEL_7:
    if (!v28)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = sub_224DDB50C((uint64_t)v33 + v35[8], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v28)
  {
LABEL_8:
    if (!v29)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = swift_bridgeObjectRelease();
  if (!v29)
  {
LABEL_9:
    if (!v30)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = swift_bridgeObjectRelease();
  if (!v30)
  {
LABEL_10:
    if (!v31)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v31)
  {
LABEL_11:
    if (!v32)
      goto LABEL_12;
LABEL_21:
    result = swift_bridgeObjectRelease();
    if (!(_DWORD)v67)
      return result;
    return sub_224DDB50C((uint64_t)v33 + v35[17], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  }
LABEL_20:
  result = sub_224DDB50C((uint64_t)v33 + v35[15], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (v32)
    goto LABEL_21;
LABEL_12:
  if (!(_DWORD)v67)
    return result;
  return sub_224DDB50C((uint64_t)v33 + v35[17], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
}

uint64_t ModelsDSTU2.Observation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t *v35;
  uint64_t result;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  _QWORD v64[2];
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  int *v74;
  __int128 v75;
  uint64_t v76;
  char v77;

  v66 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v67 = (uint64_t)v64 - v5;
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v3);
  MEMORY[0x24BDAC7A8](v6);
  v68 = (uint64_t)v64 - v7;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v64 - v12;
  sub_224DFB77C(0, &qword_2557E1FE0, (uint64_t (*)(void))sub_224E8C1B8, (uint64_t)&type metadata for ModelsDSTU2.Observation.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v70 = v14;
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v64 - v16;
  v18 = type metadata accessor for ModelsDSTU2.Observation(0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (_QWORD *)((char *)v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v74 = (int *)v19;
  *(_QWORD *)&v75 = v19;
  sub_224DE6244(0, &qword_2557E1FF0, v22);
  *v21 = sub_224F67BC8();
  v21[1] = v23;
  v21[2] = 0;
  v21[3] = 0;
  v71 = a1;
  v72 = v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8C1B8();
  v69 = v17;
  v24 = v73;
  sub_224F6857C();
  if (v24)
  {
    v73 = v24;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    LODWORD(v66) = 0;
    LODWORD(v67) = 0;
    LODWORD(v68) = 0;
    LODWORD(v69) = 0;
    LODWORD(v70) = 0;
  }
  else
  {
    v25 = (uint64_t)v13;
    v65 = v11;
    v26 = v15;
    LOBYTE(v75) = 0;
    v38 = sub_224F682AC();
    v40 = v39;
    swift_bridgeObjectRelease();
    v41 = v72;
    *v72 = v38;
    v41[1] = v40;
    LOBYTE(v75) = 1;
    v41[2] = sub_224F68264();
    v41[3] = v42;
    v77 = 2;
    sub_224DDAD48();
    sub_224F68294();
    v41[4] = v75;
    LOBYTE(v75) = 3;
    v41[5] = sub_224F682AC();
    v41[6] = v43;
    v77 = 4;
    v44 = sub_224DE60BC();
    sub_224F68294();
    v45 = v76;
    *(_OWORD *)(v41 + 7) = v75;
    v41[9] = v45;
    v77 = 5;
    sub_224F682DC();
    v46 = v76;
    *((_OWORD *)v41 + 5) = v75;
    v41[12] = v46;
    LOBYTE(v75) = 6;
    v47 = sub_224F68264();
    v64[1] = v44;
    v41[13] = v47;
    v41[14] = v48;
    type metadata accessor for FHIRDateTime();
    LOBYTE(v75) = 7;
    sub_224DDACD4(&qword_2557E04F0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68294();
    sub_224DFAC88(v25, (uint64_t)v41 + v74[11], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    type metadata accessor for Period();
    LOBYTE(v75) = 8;
    sub_224DDACD4(&qword_2557E04F8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
    sub_224F68294();
    v73 = 0;
    sub_224DFAC88(v68, (uint64_t)v41 + v74[12], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    LOBYTE(v75) = 9;
    v49 = v73;
    sub_224F68294();
    v73 = v49;
    if (v49)
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v69, v70);
      v34 = 0;
      LODWORD(v66) = 0;
      LODWORD(v67) = 0;
      LODWORD(v68) = 0;
      LODWORD(v69) = 0;
      LODWORD(v70) = 0;
      v27 = 1;
      v28 = 1;
      v29 = 1;
      v30 = 1;
      v31 = 1;
      v32 = 1;
      v33 = 1;
    }
    else
    {
      sub_224DFAC88((uint64_t)v65, (uint64_t)v72 + v74[13], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEA0C(0, &qword_2557E0550, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
      v77 = 10;
      sub_224DE630C();
      v50 = v73;
      sub_224F68294();
      v73 = v50;
      if (v50)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v69, v70);
        LODWORD(v66) = 0;
        LODWORD(v67) = 0;
        LODWORD(v68) = 0;
        LODWORD(v69) = 0;
        LODWORD(v70) = 0;
        v27 = 1;
        v28 = 1;
        v29 = 1;
        v30 = 1;
        v31 = 1;
        v32 = 1;
        v33 = 1;
        v34 = 1;
      }
      else
      {
        *(uint64_t *)((char *)v72 + v74[14]) = v75;
        LOBYTE(v75) = 11;
        v51 = sub_224F68264();
        v73 = 0;
        v52 = (uint64_t *)((char *)v72 + v74[15]);
        *v52 = v51;
        v52[1] = v53;
        v77 = 12;
        sub_224F68294();
        v73 = 0;
        v54 = v76;
        v55 = (char *)v72 + v74[16];
        *(_OWORD *)v55 = v75;
        *((_QWORD *)v55 + 2) = v54;
        type metadata accessor for Quantity();
        LOBYTE(v75) = 13;
        sub_224DDACD4(&qword_2557E0628, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t)&protocol conformance descriptor for Quantity);
        v56 = v73;
        sub_224F68294();
        v73 = v56;
        if (v56)
        {
          (*(void (**)(char *, uint64_t))(v26 + 8))(v69, v70);
          LODWORD(v69) = 0;
          LODWORD(v70) = 0;
          v27 = 1;
          v28 = 1;
          v29 = 1;
          v30 = 1;
          v31 = 1;
          v32 = 1;
          v33 = 1;
          v34 = 1;
          LODWORD(v66) = 1;
          LODWORD(v67) = 1;
          LODWORD(v68) = 1;
        }
        else
        {
          sub_224DFAC88(v67, (uint64_t)v72 + v74[17], &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
          sub_224DDEA0C(0, &qword_2557E0630, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
          v77 = 14;
          sub_224DE67F8();
          v57 = v73;
          sub_224F68294();
          v73 = v57;
          if (!v57)
          {
            *(uint64_t *)((char *)v72 + v74[18]) = v75;
            LOBYTE(v75) = 15;
            v58 = sub_224F68264();
            v73 = 0;
            v59 = v58;
            v61 = v60;
            (*(void (**)(char *, uint64_t))(v26 + 8))(v69, v70);
            v62 = (uint64_t)v72;
            v63 = (uint64_t *)((char *)v72 + v74[19]);
            *v63 = v59;
            v63[1] = v61;
            sub_224DDB408(v62, v66, type metadata accessor for ModelsDSTU2.Observation);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
            return sub_224DDEAA0(v62, type metadata accessor for ModelsDSTU2.Observation);
          }
          (*(void (**)(char *, uint64_t))(v26 + 8))(v69, v70);
          LODWORD(v70) = 0;
          v27 = 1;
          v28 = 1;
          v29 = 1;
          v30 = 1;
          v31 = 1;
          v32 = 1;
          v33 = 1;
          v34 = 1;
          LODWORD(v66) = 1;
          LODWORD(v67) = 1;
          LODWORD(v68) = 1;
          LODWORD(v69) = 1;
        }
      }
    }
  }
  v35 = v72;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v27)
  {
    result = sub_224DE60AC(v35[4]);
    if (!v28)
    {
LABEL_6:
      if (!v29)
        goto LABEL_7;
      goto LABEL_20;
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  result = swift_bridgeObjectRelease();
  if (!v29)
  {
LABEL_7:
    if (!v30)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = sub_224DDB480(v35[7], v35[8]);
  if (!v30)
  {
LABEL_8:
    if (!v31)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v31)
  {
LABEL_9:
    v37 = v74;
    if (!v32)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = swift_bridgeObjectRelease();
  v37 = v74;
  if (!v32)
  {
LABEL_10:
    if (!v33)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = sub_224DDB50C((uint64_t)v35 + v37[11], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v33)
  {
LABEL_11:
    if (!v34)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = sub_224DDB50C((uint64_t)v35 + v37[12], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (!v34)
  {
LABEL_12:
    if (!(_DWORD)v66)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = sub_224DDB50C((uint64_t)v35 + v37[13], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!(_DWORD)v66)
  {
LABEL_13:
    if (!(_DWORD)v67)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  result = swift_bridgeObjectRelease();
  if (!(_DWORD)v67)
  {
LABEL_14:
    if (!(_DWORD)v68)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  result = swift_bridgeObjectRelease();
  if (!(_DWORD)v68)
  {
LABEL_15:
    if (!(_DWORD)v69)
      goto LABEL_16;
LABEL_29:
    result = sub_224DDB50C((uint64_t)v35 + v37[17], &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
    if (!(_DWORD)v70)
      return result;
    return swift_bridgeObjectRelease();
  }
LABEL_28:
  result = sub_224DDB480(*(uint64_t *)((char *)v35 + v37[16]), *(uint64_t *)((char *)v35 + v37[16] + 8));
  if ((_DWORD)v69)
    goto LABEL_29;
LABEL_16:
  if (!(_DWORD)v70)
    return result;
  return swift_bridgeObjectRelease();
}

uint64_t ModelsDSTU2.Patient.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  ValueMetadata *v30;
  ValueMetadata *v31;
  ValueMetadata *v32;
  ValueMetadata *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  ValueMetadata *v49;
  ValueMetadata *v50;
  ValueMetadata *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  ValueMetadata *v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  ValueMetadata *v67;
  ValueMetadata *v68;
  uint64_t v69;
  ValueMetadata *v70;
  uint64_t v71;
  ValueMetadata *v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  ValueMetadata *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  ValueMetadata *v90;
  int v91;
  char v92;
  __int16 v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  ValueMetadata *v97;
  ValueMetadata *v98;
  ValueMetadata *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  ValueMetadata *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  __int16 v107;
  char v108;
  char v109;
  uint64_t v110;

  sub_224DFB77C(0, &qword_2557E1FF8, (uint64_t (*)(void))sub_224E8C1FC, (uint64_t)&type metadata for ModelsDSTU2.Patient.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v73 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v57 - v7;
  v86 = &type metadata for ModelsDSTU2.Patient;
  sub_224E8C240();
  sub_224F67BC8();
  v110 = v9;
  v10 = a1[3];
  v75 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_224E8C1FC();
  v74 = v8;
  sub_224F6857C();
  if (v2)
  {
    v76 = v2;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
  }
  else
  {
    v11 = v6;
    LOBYTE(v86) = 0;
    v20 = sub_224F682AC();
    v22 = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    LOBYTE(v86) = 1;
    v23 = sub_224F68264();
    v25 = v24;
    v110 = v23;
    LOBYTE(v77) = 2;
    sub_224DE65D4();
    swift_bridgeObjectRetain();
    sub_224F68294();
    *(_QWORD *)&v64 = v20;
    *((_QWORD *)&v64 + 1) = v22;
    v63 = v86;
    LODWORD(v20) = v87;
    v26 = BYTE4(v87);
    v109 = BYTE4(v87);
    LOBYTE(v86) = 3;
    v27 = sub_224F68264();
    v29 = v28;
    v60 = v26;
    v61 = v27;
    v62 = v20;
    sub_224DDEA0C(0, &qword_2557E1C70, type metadata accessor for ModelsDSTU2.HumanName, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    LOBYTE(v77) = 4;
    sub_224E8C28C();
    swift_bridgeObjectRetain();
    sub_224F682DC();
    v69 = v29;
    v30 = v86;
    sub_224DFB644(0, &qword_2557E0678);
    LOBYTE(v77) = 5;
    sub_224DE69A8();
    swift_bridgeObjectRetain();
    sub_224F68294();
    v68 = v30;
    v31 = v86;
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E0690, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    LOBYTE(v77) = 6;
    sub_224DE6A5C();
    swift_bridgeObjectRetain();
    sub_224F68294();
    v72 = v31;
    v32 = v86;
    sub_224DFB644(0, &qword_2557E06A8);
    LOBYTE(v77) = 7;
    sub_224DE6AEC();
    swift_bridgeObjectRetain();
    sub_224F68294();
    v67 = v32;
    v33 = v86;
    LOBYTE(v77) = 8;
    sub_224DE60BC();
    swift_bridgeObjectRetain();
    sub_224F68294();
    v76 = 0;
    v71 = (uint64_t)v33;
    v59 = v25;
    v35 = (uint64_t)v86;
    v34 = v87;
    v36 = v88;
    sub_224DDEA0C(0, &qword_2557E0538, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    LOBYTE(v77) = 9;
    *(_QWORD *)&v66 = v35;
    *((_QWORD *)&v66 + 1) = v34;
    v65 = v36;
    sub_224DDB44C(v35, v34);
    sub_224DE627C();
    v37 = v76;
    sub_224F68294();
    v76 = v37;
    if (v37)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v74, v73);
      sub_224DDB480(v66, *((uint64_t *)&v66 + 1));
      v38 = *((_QWORD *)&v64 + 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = 1;
      v110 = v38;
      v18 = 0;
      v13 = 1;
      v14 = 1;
      v15 = 1;
      v16 = 1;
      v17 = 1;
    }
    else
    {
      v106 = 10;
      v70 = v86;
      swift_bridgeObjectRetain();
      v39 = v76;
      v40 = sub_224F68264();
      v76 = v39;
      if (!v39)
      {
        v43 = v40;
        v44 = v41;
        (*(void (**)(char *, uint64_t))(v11 + 8))(v74, v73);
        v77 = v64;
        *(_QWORD *)&v78 = v110;
        *((_QWORD *)&v78 + 1) = v59;
        *(_QWORD *)&v79 = v63;
        DWORD2(v79) = v62;
        BYTE12(v79) = v60;
        *(_QWORD *)&v80 = v61;
        *((_QWORD *)&v80 + 1) = v69;
        *(_QWORD *)&v81 = v68;
        *((_QWORD *)&v81 + 1) = v72;
        v45 = *((_QWORD *)&v66 + 1);
        *(_QWORD *)&v82 = v67;
        *((_QWORD *)&v82 + 1) = v71;
        v46 = v66;
        v83 = v66;
        *(_QWORD *)&v84 = v65;
        *((_QWORD *)&v84 + 1) = v70;
        v58 = v43;
        *(_QWORD *)&v85 = v43;
        *((_QWORD *)&v85 + 1) = v44;
        sub_224E8C31C((uint64_t)&v77);
        swift_bridgeObjectRelease();
        sub_224DDB480(v46, v45);
        v47 = *((_QWORD *)&v64 + 1);
        swift_bridgeObjectRelease();
        v48 = v59;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v49 = v68;
        swift_bridgeObjectRelease();
        v50 = v72;
        swift_bridgeObjectRelease();
        v51 = v67;
        swift_bridgeObjectRelease();
        v52 = v71;
        swift_bridgeObjectRelease();
        v53 = v84;
        a2[6] = v83;
        a2[7] = v53;
        a2[8] = v85;
        v54 = v80;
        a2[2] = v79;
        a2[3] = v54;
        v55 = v82;
        a2[4] = v81;
        a2[5] = v55;
        v56 = v78;
        *a2 = v77;
        a2[1] = v56;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
        v86 = (ValueMetadata *)v64;
        v87 = v47;
        v88 = v110;
        v89 = v48;
        v90 = v63;
        v91 = v62;
        v92 = v109;
        v93 = v107;
        v94 = v108;
        v95 = v61;
        v96 = v69;
        v97 = v49;
        v98 = v50;
        v99 = v51;
        v100 = v52;
        v101 = v66;
        v102 = v65;
        v103 = v70;
        v104 = v58;
        v105 = v44;
        return sub_224E8C3DC((uint64_t)&v86);
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v74, v73);
      swift_bridgeObjectRelease();
      sub_224DDB480(v66, *((uint64_t *)&v66 + 1));
      v42 = *((_QWORD *)&v64 + 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = 1;
      v110 = v42;
      v13 = 1;
      v14 = 1;
      v15 = 1;
      v16 = 1;
      v17 = 1;
      v18 = 1;
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12)
    swift_bridgeObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRelease();
    if (!v14)
    {
LABEL_8:
      if (!v15)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if (!v14)
  {
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  if (!v15)
  {
LABEL_9:
    result = v71;
    if (!v16)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  result = v71;
  if (!v16)
  {
LABEL_10:
    if (!v17)
      goto LABEL_11;
LABEL_17:
    result = sub_224DDB480(v66, *((uint64_t *)&v66 + 1));
    if (!v18)
      return result;
    return swift_bridgeObjectRelease();
  }
LABEL_16:
  result = swift_bridgeObjectRelease();
  if (v17)
    goto LABEL_17;
LABEL_11:
  if (!v18)
    return result;
  return swift_bridgeObjectRelease();
}

uint64_t ModelsDSTU2.ResourceProxy.encode(to:)()
{
  _QWORD v1[4];

  ModelsDSTU2.ResourceProxy.get()();
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_224F67B08();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

void ModelsDSTU2.ResourceProxy.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for ModelsDSTU2.Observation(0);
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for ModelsDSTU2.Immunization(0);
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for ModelsDSTU2.Condition(0);
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  MEMORY[0x24BDAC7A8](v5);
  sub_224DDB408(v0, (uint64_t)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v8 = (char *)sub_224E81188 + 4 * byte_224F6F87E[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_224E81188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 32);
  sub_224F6851C();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v2)
  {
    sub_224F68528();
    if (v3)
      goto LABEL_3;
LABEL_5:
    sub_224F68528();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  ((void (*)(uint64_t, uint64_t))sub_224DDE624)(v0, v2);
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_5;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

uint64_t ModelsDSTU2.ResourceProxy.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsDSTU2.ResourceProxy.hash(into:));
}

uint64_t sub_224E8146C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.ResourceProxy.init(from:)(a1, a2);
}

uint64_t sub_224E81480()
{
  _QWORD v1[4];

  ModelsDSTU2.ResourceProxy.get()();
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_224F67B08();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t sub_224E814F8(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsDSTU2.ResourceProxy.hash(into:));
}

uint64_t sub_224E81508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsDSTU2.ResourceProxy.hash(into:));
}

uint64_t ModelsDSTU2.Bundle.resourceType.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Bundle.resourceType.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ModelsDSTU2.Bundle.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t sub_224E81588@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_224F68240();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_224E815E4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_224F68240();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_224E81644()
{
  sub_224E8EAB4();
  return sub_224F685B8();
}

uint64_t sub_224E8166C()
{
  sub_224E8EAB4();
  return sub_224F685C4();
}

uint64_t ModelsDSTU2.Bundle.BundleEntry.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unsigned __int8 v41;
  char v42;

  v36 = a2;
  sub_224DDEA0C(0, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v37 = (char *)&v34 - v4;
  sub_224DFB77C(0, &qword_2557E2020, (uint64_t (*)(void))sub_224E8EAB4, (uint64_t)&type metadata for ModelsDSTU2.Bundle.BundleEntry.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *((_QWORD *)v5 - 1);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v34 - v8;
  v10 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8EAB4();
  v13 = v38;
  sub_224F6857C();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v14 = (uint64_t)v37;
  v38 = v7;
  LOBYTE(v39) = 0;
  v16 = v12;
  *v12 = sub_224F68264();
  v12[1] = v17;
  type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  LOBYTE(v39) = 1;
  sub_224DDACD4(&qword_2557E2030, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.ResourceProxy);
  sub_224F68294();
  v18 = v10;
  sub_224DFAC88(v14, (uint64_t)v16 + *(int *)(v10 + 20), &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
  v42 = 1;
  sub_224DFACE0();
  sub_224F68294();
  v19 = (uint64_t)v16;
  v35 = v9;
  v37 = v6;
  v21 = v39;
  v20 = v40;
  v22 = v41;
  v23 = (uint64_t)a1;
  if (qword_2557E0120 != -1)
  {
    v33 = v40;
    swift_once();
    v20 = v33;
  }
  if (v22 == 255)
    v24 = 0;
  else
    v24 = v21;
  if (v22 == 255)
    v25 = 0;
  else
    v25 = v20;
  if (v22 == 255)
    v26 = 5;
  else
    v26 = v22;
  v39 = v24;
  v40 = v25;
  v41 = v26;
  v27 = v20;
  sub_224DFAD24(v21, v20, v22);
  sub_224DFAD74();
  v28 = sub_224F672D4();
  v29 = v38;
  v34 = v28;
  v31 = v30;
  sub_224DFADB8(v21, v27, v22);
  sub_224DFADB8(v21, v27, v22);
  (*(void (**)(char *, char *))(v29 + 8))(v35, v37);
  v32 = (uint64_t *)(v19 + *(int *)(v18 + 24));
  *v32 = v34;
  v32[1] = v31;
  sub_224DDB408(v19, v36, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
  __swift_destroy_boxed_opaque_existential_1(v23);
  return sub_224DDEAA0(v19, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
}

uint64_t ModelsDSTU2.Bundle.BundleEntry.fullURL.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Bundle.BundleEntry.resource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 20), a1, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
}

uint64_t ModelsDSTU2.Bundle.BundleEntry.rawResourceData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0) + 24);
  v2 = *(_QWORD *)v1;
  sub_224DDE970(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t ModelsDSTU2.Bundle.BundleEntry.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v1 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E02E0, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - v7;
  if (*(_QWORD *)(v0 + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v9 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
  sub_224DDB4B4(v0 + *(int *)(v9 + 20), (uint64_t)v8, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC((uint64_t)v8, (uint64_t)v4, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_224F68528();
    ModelsDSTU2.ResourceProxy.hash(into:)();
    sub_224DDEAA0((uint64_t)v4, type metadata accessor for ModelsDSTU2.ResourceProxy);
  }
  v10 = (uint64_t *)(v0 + *(int *)(v9 + 24));
  v11 = *v10;
  v12 = v10[1];
  sub_224DDE970(*v10, v12);
  sub_224F67664();
  return sub_224DDE9B4(v11, v12);
}

uint64_t ModelsDSTU2.Bundle.BundleEntry.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;

  sub_224DFB77C(0, &qword_2557E2038, (uint64_t (*)(void))sub_224E8EAB4, (uint64_t)&type metadata for ModelsDSTU2.Bundle.BundleEntry.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8EAB4();
  sub_224F68594();
  v11 = 0;
  sub_224F68300();
  if (!v1)
  {
    type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
    v10 = 1;
    type metadata accessor for ModelsDSTU2.ResourceProxy(0);
    sub_224DDACD4(&qword_2557E2040, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.ResourceProxy);
    sub_224F68330();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ModelsDSTU2.Bundle.BundleEntry.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v1 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E02E0, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - v7;
  sub_224F68510();
  if (*(_QWORD *)(v0 + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v9 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
  sub_224DDB4B4(v0 + *(int *)(v9 + 20), (uint64_t)v8, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC((uint64_t)v8, (uint64_t)v4, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_224F68528();
    ModelsDSTU2.ResourceProxy.hash(into:)();
    sub_224DDEAA0((uint64_t)v4, type metadata accessor for ModelsDSTU2.ResourceProxy);
  }
  sub_224F67664();
  return sub_224F6854C();
}

uint64_t sub_224E82084@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.Bundle.BundleEntry.init(from:)(a1, a2);
}

uint64_t sub_224E82098(_QWORD *a1)
{
  return ModelsDSTU2.Bundle.BundleEntry.encode(to:)(a1);
}

uint64_t sub_224E820B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v4 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E02E0, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - v10;
  if (*(_QWORD *)(v2 + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  sub_224DDB4B4(v2 + *(int *)(a2 + 20), (uint64_t)v11, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC((uint64_t)v11, (uint64_t)v7, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_224F68528();
    ModelsDSTU2.ResourceProxy.hash(into:)();
    sub_224DDEAA0((uint64_t)v7, type metadata accessor for ModelsDSTU2.ResourceProxy);
  }
  return sub_224F67664();
}

uint64_t sub_224E8225C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v4 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E02E0, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - v10;
  sub_224F68510();
  if (*(_QWORD *)(v2 + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  sub_224DDB4B4(v2 + *(int *)(a2 + 20), (uint64_t)v11, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC((uint64_t)v11, (uint64_t)v7, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_224F68528();
    ModelsDSTU2.ResourceProxy.hash(into:)();
    sub_224DDEAA0((uint64_t)v7, type metadata accessor for ModelsDSTU2.ResourceProxy);
  }
  sub_224F67664();
  return sub_224F6854C();
}

uint64_t ModelsDSTU2.Bundle.entry.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Bundle.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_224E82450()
{
  sub_224E8BF18();
  return sub_224F685B8();
}

uint64_t sub_224E82478()
{
  sub_224E8BF18();
  return sub_224F685C4();
}

uint64_t ModelsDSTU2.Bundle.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  sub_224DFB77C(0, &qword_2557E2048, (uint64_t (*)(void))sub_224E8BF18, (uint64_t)&type metadata for ModelsDSTU2.Bundle.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v11 - v6;
  v8 = v1[2];
  v11[2] = v1[3];
  v12 = v8;
  v11[1] = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8BF18();
  sub_224F68594();
  v17 = 0;
  v9 = v13;
  sub_224F68348();
  if (!v9)
  {
    v14 = v12;
    v16 = 1;
    sub_224DDEA0C(0, &qword_2557E1F68, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224E8EAF8();
    sub_224F68330();
    v15 = 2;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ModelsDSTU2.Bundle.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  sub_224F68510();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_224F68528();
    if (v2)
      goto LABEL_3;
LABEL_5:
    sub_224F68528();
    return sub_224F6854C();
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDE624((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_5;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224E8273C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ModelsDSTU2.Bundle.init(from:)(a1, a2);
}

uint64_t sub_224E82750(_QWORD *a1)
{
  return ModelsDSTU2.Bundle.encode(to:)(a1);
}

uint64_t sub_224E8276C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  sub_224F68510();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_224F68528();
    if (v2)
      goto LABEL_3;
LABEL_5:
    sub_224F68528();
    return sub_224F6854C();
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDE624((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_5;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t (*ModelsDSTU2.Condition.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t ModelsDSTU2.Condition.meta.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = v2;
  return sub_224DFAE98(v2);
}

uint64_t ModelsDSTU2.Condition.asserter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsDSTU2.Condition(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 24), a1, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
}

uint64_t ModelsDSTU2.Condition.dateRecorded.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsDSTU2.Condition(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 28), a1, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsDSTU2.Condition.code.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for ModelsDSTU2.Condition(0) + 32));
  v4 = v3[1];
  v5 = v3[2];
  *a1 = *v3;
  a1[1] = v4;
  a1[2] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Condition.category.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ModelsDSTU2.Condition(0) + 36));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_224DDB44C(v4, v5);
}

uint64_t ModelsDSTU2.Condition.clinicalStatus.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Condition(0) + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Condition.verificationStatus.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Condition(0) + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Condition.severity.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ModelsDSTU2.Condition(0) + 48));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_224DDB44C(v4, v5);
}

uint64_t ModelsDSTU2.Condition.bodySite.getter()
{
  type metadata accessor for ModelsDSTU2.Condition(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Condition.onsetDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsDSTU2.Condition(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 56), a1, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsDSTU2.Condition.onsetPeriod.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224E84888(type metadata accessor for ModelsDSTU2.Condition, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, a1);
}

uint64_t ModelsDSTU2.Condition.onsetString.getter()
{
  return sub_224DEAAAC(type metadata accessor for ModelsDSTU2.Condition);
}

uint64_t ModelsDSTU2.Condition.abatementDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224E84900(type metadata accessor for ModelsDSTU2.Condition, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, a1);
}

uint64_t ModelsDSTU2.Condition.abatementPeriod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsDSTU2.Condition(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 72), a1, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
}

uint64_t ModelsDSTU2.Condition.abatementString.getter()
{
  return sub_224E860F8(type metadata accessor for ModelsDSTU2.Condition);
}

uint64_t ModelsDSTU2.Condition.notes.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Condition(0) + 80));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Condition.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Condition(0) + 84));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Condition.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = v1;
  v47 = type metadata accessor for Period();
  v45 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E04B8, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v46 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v44 - v11;
  v13 = type metadata accessor for Reference();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E0308, v17, v6);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v44 - v19;
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(v2 + 16);
  if (v21 == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224F68528();
    sub_224F68528();
    if (v21)
    {
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v21);
      v22 = v21;
    }
    else
    {
      sub_224DE60AC(0);
      v22 = 0;
    }
    sub_224DE60AC(v22);
  }
  v23 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
  sub_224DDB4B4(v2 + v23[6], (uint64_t)v20, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v20, 1, v13) == 1)
  {
    sub_224F68528();
    goto LABEL_15;
  }
  sub_224DDEADC((uint64_t)v20, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224F68528();
  if (!*((_QWORD *)v16 + 1))
  {
    sub_224F68528();
    if (*((_QWORD *)v16 + 3))
      goto LABEL_11;
LABEL_13:
    sub_224F68528();
    goto LABEL_14;
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)v16 + 3))
    goto LABEL_13;
LABEL_11:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
LABEL_14:
  sub_224DF235C(a1);
  sub_224DDEAA0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
LABEL_15:
  sub_224DF2AC8();
  v24 = v2 + v23[8];
  v25 = *(_QWORD *)(v24 + 16);
  if (*(_QWORD *)(v24 + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v25)
    {
LABEL_17:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v25);
      swift_bridgeObjectRelease_n();
      goto LABEL_20;
    }
  }
  else
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v25)
      goto LABEL_17;
  }
  sub_224F68528();
  swift_bridgeObjectRelease();
LABEL_20:
  swift_bridgeObjectRelease();
  v26 = (uint64_t *)(v2 + v23[9]);
  v27 = v26[1];
  if (v27 == 1)
  {
    sub_224F68528();
    goto LABEL_28;
  }
  v28 = *v26;
  v29 = v26[2];
  sub_224F68528();
  if (!v27)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v29)
      goto LABEL_24;
LABEL_26:
    sub_224F68528();
    v30 = v28;
    v31 = v27;
    goto LABEL_27;
  }
  sub_224F68528();
  sub_224DDB44C(v28, v27);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v29)
    goto LABEL_26;
LABEL_24:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C(a1, v29);
  swift_bridgeObjectRelease();
  v30 = v28;
  v31 = v27;
LABEL_27:
  sub_224DDB480(v30, v31);
LABEL_28:
  if (*(_QWORD *)(v2 + v23[10] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  v32 = (uint64_t *)(v2 + v23[12]);
  v33 = v32[1];
  if (v33 == 1)
  {
    sub_224F68528();
    goto LABEL_39;
  }
  v34 = *v32;
  v35 = v32[2];
  sub_224F68528();
  if (!v33)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v35)
      goto LABEL_35;
LABEL_37:
    sub_224F68528();
    v36 = v34;
    v37 = v33;
    goto LABEL_38;
  }
  sub_224F68528();
  sub_224DDB44C(v34, v33);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v35)
    goto LABEL_37;
LABEL_35:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C(a1, v35);
  swift_bridgeObjectRelease();
  v36 = v34;
  v37 = v33;
LABEL_38:
  sub_224DDB480(v36, v37);
LABEL_39:
  v38 = *(_QWORD *)(v2 + v23[13]);
  sub_224F68528();
  if (v38)
  {
    swift_bridgeObjectRetain();
    sub_224DDC1C0(a1, v38);
    swift_bridgeObjectRelease();
  }
  v39 = v47;
  sub_224DF2AC8();
  sub_224DDB4B4(v2 + v23[15], (uint64_t)v12, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
  if (v40(v12, 1, v39) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC((uint64_t)v12, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    sub_224F68528();
    sub_224DF2AC8();
    sub_224DF2AC8();
    sub_224DDEAA0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  }
  if (*(_QWORD *)(v2 + v23[16] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v41 = v47;
  sub_224DF2AC8();
  v42 = v46;
  sub_224DDB4B4(v2 + v23[18], v46, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (v40((char *)v42, 1, v41) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC(v42, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    sub_224F68528();
    sub_224DF2AC8();
    sub_224DF2AC8();
    sub_224DDEAA0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  }
  if (*(_QWORD *)(v2 + v23[19] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  if (*(_QWORD *)(v2 + v23[20] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  if (!*(_QWORD *)(v2 + v23[21] + 8))
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224E834BC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224E834F8 + 4 * byte_224F6F885[a1]))(0x656372756F736572, 0xEC00000065707954);
}

uint64_t sub_224E834F8()
{
  return 1635018093;
}

uint64_t sub_224E83508()
{
  return 0x7265747265737361;
}

uint64_t sub_224E83520()
{
  return 0x6F63655265746164;
}

uint64_t sub_224E83540()
{
  return 1701080931;
}

uint64_t sub_224E83550()
{
  return 0x79726F6765746163;
}

uint64_t sub_224E83568()
{
  return 0x6C6163696E696C63;
}

unint64_t sub_224E8358C()
{
  return 0xD000000000000012;
}

uint64_t sub_224E835AC()
{
  return 0x7974697265766573;
}

uint64_t sub_224E835C4()
{
  return 0x6574695379646F62;
}

uint64_t sub_224E835DC()
{
  return 0x7461447465736E6FLL;
}

uint64_t sub_224E83600()
{
  return 0x7265507465736E6FLL;
}

uint64_t sub_224E83620()
{
  return 0x7274537465736E6FLL;
}

unint64_t sub_224E83640()
{
  return 0xD000000000000011;
}

uint64_t sub_224E8365C()
{
  return 0x6E656D6574616261;
}

uint64_t sub_224E83694()
{
  return 0x7365746F6ELL;
}

uint64_t sub_224E836A8()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_224E836C0()
{
  unsigned __int8 *v0;

  return sub_224E834BC(*v0);
}

uint64_t sub_224E836C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224ECA9A4(a1, a2);
  *a3 = result;
  return result;
}

void sub_224E836EC(_BYTE *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_224E836F8()
{
  sub_224E8C038();
  return sub_224F685B8();
}

uint64_t sub_224E83720()
{
  sub_224E8C038();
  return sub_224F685C4();
}

uint64_t ModelsDSTU2.Condition.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  __int128 v21;
  uint64_t v22;
  char v23;

  v3 = v1;
  sub_224DFB77C(0, &qword_2557E2060, (uint64_t (*)(void))sub_224E8C038, (uint64_t)&type metadata for ModelsDSTU2.Condition.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v20 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8C038();
  sub_224F68594();
  LOBYTE(v21) = 0;
  sub_224F68348();
  if (!v2)
  {
    *(_QWORD *)&v21 = *(_QWORD *)(v3 + 16);
    v23 = 1;
    sub_224DDAD8C();
    sub_224F68330();
    v10 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
    LOBYTE(v21) = 2;
    type metadata accessor for Reference();
    sub_224DDACD4(&qword_2557E0758, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
    sub_224F68330();
    LOBYTE(v21) = 3;
    v11 = type metadata accessor for FHIRDateTime();
    sub_224DDACD4(&qword_2557E0748, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68330();
    v20[1] = v11;
    v12 = (__int128 *)(v3 + v10[8]);
    v13 = *((_QWORD *)v12 + 2);
    v21 = *v12;
    v22 = v13;
    v23 = 4;
    sub_224DFAEA8();
    sub_224F68378();
    v14 = (__int128 *)(v3 + v10[9]);
    v15 = *((_QWORD *)v14 + 2);
    v21 = *v14;
    v22 = v15;
    v23 = 5;
    sub_224F68330();
    LOBYTE(v21) = 6;
    sub_224F68300();
    LOBYTE(v21) = 7;
    sub_224F68348();
    v16 = (__int128 *)(v3 + v10[12]);
    v17 = *((_QWORD *)v16 + 2);
    v21 = *v16;
    v22 = v17;
    v23 = 8;
    sub_224F68330();
    *(_QWORD *)&v21 = *(_QWORD *)(v3 + v10[13]);
    v23 = 9;
    sub_224DFB644(0, &qword_2557E04E0);
    sub_224DFAEEC();
    sub_224F68330();
    LOBYTE(v21) = 10;
    sub_224F68330();
    LOBYTE(v21) = 11;
    v18 = type metadata accessor for Period();
    sub_224DDACD4(&qword_2557E0750, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
    v20[0] = v18;
    sub_224F68330();
    LOBYTE(v21) = 12;
    sub_224F68300();
    LOBYTE(v21) = 13;
    sub_224F68330();
    LOBYTE(v21) = 14;
    sub_224F68330();
    LOBYTE(v21) = 15;
    sub_224F68300();
    LOBYTE(v21) = 16;
    sub_224F68300();
    LOBYTE(v21) = 17;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsDSTU2.Condition.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsDSTU2.Condition.hash(into:));
}

uint64_t sub_224E83CE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 84));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_224E83D14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.Condition.init(from:)(a1, a2);
}

uint64_t sub_224E83D28(_QWORD *a1)
{
  return ModelsDSTU2.Condition.encode(to:)(a1);
}

uint64_t sub_224E83D3C(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsDSTU2.Condition.hash(into:));
}

uint64_t sub_224E83D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsDSTU2.Condition.hash(into:));
}

uint64_t (*ModelsDSTU2.DiagnosticReport.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t (*ModelsDSTU2.DiagnosticReport.id.modify())()
{
  return nullsub_1;
}

uint64_t ModelsDSTU2.DiagnosticReport.status.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.DiagnosticReport.code.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[7];
  v3 = v1[8];
  *a1 = v1[6];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.DiagnosticReport.conclusion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.DiagnosticReport.effectiveDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 36), a1, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsDSTU2.DiagnosticReport.effectivePeriod.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224E87138(type metadata accessor for ModelsDSTU2.DiagnosticReport, a1);
}

uint64_t ModelsDSTU2.DiagnosticReport.issued.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DEA934(type metadata accessor for ModelsDSTU2.DiagnosticReport, a1);
}

uint64_t ModelsDSTU2.DiagnosticReport.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.DiagnosticReport(0) + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.DiagnosticReport.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = type metadata accessor for Period();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E04B8, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - v9;
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v1[3])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  v11 = v1[8];
  if (v1[7])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v11)
    {
LABEL_6:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v11);
      swift_bridgeObjectRelease_n();
      goto LABEL_9;
    }
  }
  else
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_6;
  }
  sub_224F68528();
  swift_bridgeObjectRelease();
LABEL_9:
  swift_bridgeObjectRelease();
  if (v1[10])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v12 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
  sub_224DF2AC8();
  sub_224DDB4B4((uint64_t)v1 + *(int *)(v12 + 40), (uint64_t)v10, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    sub_224F68528();
    sub_224DF2AC8();
    sub_224DF2AC8();
    sub_224DDEAA0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  }
  sub_224DF2AC8();
  if (!*(_QWORD *)((char *)v1 + *(int *)(v12 + 48) + 8))
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224E84200(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224E8423C + 4 * byte_224F6F897[a1]))(0x656372756F736572, 0xEC00000065707954);
}

uint64_t sub_224E8423C()
{
  return 25705;
}

uint64_t sub_224E84248()
{
  return 0x737574617473;
}

uint64_t sub_224E8425C()
{
  return 1701080931;
}

uint64_t sub_224E8426C()
{
  return 0x6973756C636E6F63;
}

unint64_t sub_224E84288()
{
  return 0xD000000000000011;
}

uint64_t sub_224E842A4()
{
  return 0x7669746365666665;
}

uint64_t sub_224E842C8()
{
  return 0x646575737369;
}

uint64_t sub_224E842DC()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_224E842F4()
{
  unsigned __int8 *v0;

  return sub_224E84200(*v0);
}

uint64_t sub_224E842FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224ECB180(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224E84320()
{
  sub_224E8C07C();
  return sub_224F685B8();
}

uint64_t sub_224E84348()
{
  sub_224E8C07C();
  return sub_224F685C4();
}

uint64_t ModelsDSTU2.DiagnosticReport.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  __int128 v14;
  uint64_t v15;
  char v16;

  v3 = v1;
  sub_224DFB77C(0, &qword_2557E2068, (uint64_t (*)(void))sub_224E8C07C, (uint64_t)&type metadata for ModelsDSTU2.DiagnosticReport.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8C07C();
  sub_224F68594();
  LOBYTE(v14) = 0;
  sub_224F68348();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    sub_224F68300();
    LOBYTE(v14) = 2;
    sub_224F68348();
    v10 = *(_QWORD *)(v3 + 64);
    v14 = *(_OWORD *)(v3 + 48);
    v15 = v10;
    v16 = 3;
    sub_224DFAEA8();
    sub_224F68378();
    LOBYTE(v14) = 4;
    sub_224F68300();
    v11 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
    LOBYTE(v14) = 5;
    type metadata accessor for FHIRDateTime();
    sub_224DDACD4(&qword_2557E0748, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68330();
    v13[1] = v3 + *(int *)(v11 + 40);
    LOBYTE(v14) = 6;
    type metadata accessor for Period();
    sub_224DDACD4(&qword_2557E0750, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
    sub_224F68330();
    LOBYTE(v14) = 7;
    sub_224F68330();
    LOBYTE(v14) = 8;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsDSTU2.DiagnosticReport.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsDSTU2.DiagnosticReport.hash(into:));
}

uint64_t sub_224E84680@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.DiagnosticReport.init(from:)(a1, a2);
}

uint64_t sub_224E84694(_QWORD *a1)
{
  return ModelsDSTU2.DiagnosticReport.encode(to:)(a1);
}

uint64_t sub_224E846A8(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsDSTU2.DiagnosticReport.hash(into:));
}

uint64_t sub_224E846B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsDSTU2.DiagnosticReport.hash(into:));
}

uint64_t sub_224E846C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 48));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t (*ModelsDSTU2.Immunization.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t (*ModelsDSTU2.Immunization.id.modify())()
{
  return nullsub_1;
}

uint64_t ModelsDSTU2.Immunization.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsDSTU2.Immunization(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 32), a1, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsDSTU2.Immunization.expirationDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  result = type metadata accessor for ModelsDSTU2.Immunization(0);
  v4 = (uint64_t *)(v1 + *(int *)(result + 36));
  v5 = *v4;
  v6 = *((_DWORD *)v4 + 2);
  LOBYTE(v4) = *((_BYTE *)v4 + 12);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 12) = (_BYTE)v4;
  return result;
}

uint64_t ModelsDSTU2.Immunization.note.getter()
{
  type metadata accessor for ModelsDSTU2.Immunization(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Immunization.reported.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Immunization(0) + 44));
}

uint64_t ModelsDSTU2.Immunization.vaccinationProtocol.getter()
{
  type metadata accessor for ModelsDSTU2.Immunization(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Immunization.vaccineCode.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for ModelsDSTU2.Immunization(0) + 52));
  v4 = v3[1];
  v5 = v3[2];
  *a1 = *v3;
  a1[1] = v4;
  a1[2] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Immunization.wasNotGiven.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Immunization(0) + 56));
}

uint64_t ModelsDSTU2.Immunization.manufacture.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224E84888(type metadata accessor for ModelsDSTU2.Immunization, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, a1);
}

uint64_t sub_224E84888@<X0>(uint64_t (*a1)(_QWORD)@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;

  v8 = a1(0);
  return sub_224DDB4B4(v4 + *(int *)(v8 + 60), a4, a2, a3);
}

uint64_t ModelsDSTU2.Immunization.lotNumber.getter()
{
  return sub_224DEAAAC(type metadata accessor for ModelsDSTU2.Immunization);
}

uint64_t ModelsDSTU2.Immunization.performer.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224E84900(type metadata accessor for ModelsDSTU2.Immunization, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, a1);
}

uint64_t sub_224E84900@<X0>(uint64_t (*a1)(_QWORD)@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;

  v8 = a1(0);
  return sub_224DDB4B4(v4 + *(int *)(v8 + 68), a4, a2, a3);
}

uint64_t ModelsDSTU2.Immunization.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Immunization(0) + 72));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Immunization.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v3 = type metadata accessor for Reference();
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v30 - v7;
  sub_224DDEA0C(0, &qword_2557E0308, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v30 - v14;
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v1 + 24))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v16 = *(_QWORD *)(v1 + 32);
  if (v16 == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224F68528();
    sub_224F68528();
    if (v16)
    {
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v16);
      v17 = v16;
    }
    else
    {
      sub_224DE60AC(0);
      v17 = 0;
    }
    sub_224DE60AC(v17);
  }
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  v18 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
  sub_224DF2AC8();
  v19 = v1 + v18[9];
  if ((*(_BYTE *)(v19 + 12) & 1) == 0)
  {
    v20 = *(_DWORD *)(v19 + 8);
    sub_224F68528();
    sub_224F6851C();
    if ((v20 & 0x100) == 0)
      sub_224F68528();
    sub_224F68528();
    if ((v20 & 0x1000000) == 0)
      sub_224F68528();
  }
  sub_224F68528();
  v21 = *(_QWORD *)(v1 + v18[10]);
  sub_224F68528();
  if (v21)
  {
    swift_bridgeObjectRetain();
    sub_224DDBCDC(a1, v21);
    swift_bridgeObjectRelease();
  }
  sub_224F68528();
  v22 = *(_QWORD *)(v1 + v18[12]);
  v31 = v6;
  sub_224F68528();
  if (v22)
    sub_224DDE880(a1, v22);
  v23 = v1 + v18[13];
  v24 = *(_QWORD *)(v23 + 16);
  if (*(_QWORD *)(v23 + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v24)
    {
LABEL_21:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v24);
      swift_bridgeObjectRelease_n();
      goto LABEL_24;
    }
  }
  else
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v24)
      goto LABEL_21;
  }
  sub_224F68528();
  swift_bridgeObjectRelease();
LABEL_24:
  v25 = v32;
  swift_bridgeObjectRelease();
  sub_224F68528();
  sub_224DDB4B4(v1 + v18[15], (uint64_t)v15, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v26(v15, 1, v33) == 1)
  {
    sub_224F68528();
    goto LABEL_32;
  }
  sub_224DDEADC((uint64_t)v15, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224F68528();
  if (!*((_QWORD *)v8 + 1))
  {
    sub_224F68528();
    if (*((_QWORD *)v8 + 3))
      goto LABEL_28;
LABEL_30:
    sub_224F68528();
    goto LABEL_31;
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)v8 + 3))
    goto LABEL_30;
LABEL_28:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
LABEL_31:
  sub_224DF235C(a1);
  sub_224DDEAA0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
LABEL_32:
  if (*(_QWORD *)(v1 + v18[16] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  sub_224DDB4B4(v1 + v18[17], (uint64_t)v13, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (v26(v13, 1, v33) == 1)
  {
    sub_224F68528();
    goto LABEL_43;
  }
  v27 = (uint64_t)v13;
  v28 = (uint64_t)v31;
  sub_224DDEADC(v27, (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224F68528();
  if (!*(_QWORD *)(v28 + 8))
  {
    sub_224F68528();
    if (*(_QWORD *)(v28 + 24))
      goto LABEL_39;
LABEL_41:
    sub_224F68528();
    goto LABEL_42;
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v28 + 24))
    goto LABEL_41;
LABEL_39:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
LABEL_42:
  sub_224DF235C(a1);
  sub_224DDEAA0(v28, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
LABEL_43:
  if (!*(_QWORD *)(v1 + v18[18] + 8))
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224E85064(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224E850A0 + 4 * byte_224F6F8A0[a1]))(0x656372756F736572, 0xEC00000065707954);
}

uint64_t sub_224E850A0()
{
  return 25705;
}

uint64_t sub_224E850AC()
{
  return 1635018093;
}

uint64_t sub_224E850BC()
{
  return 0x737574617473;
}

uint64_t sub_224E850D0()
{
  return 1702125924;
}

uint64_t sub_224E850E0()
{
  return 0x6974617269707865;
}

uint64_t sub_224E85104()
{
  return 1702129518;
}

uint64_t sub_224E8511C()
{
  return 0x646574726F706572;
}

unint64_t sub_224E85134()
{
  return 0xD000000000000013;
}

uint64_t sub_224E85150()
{
  return 0x43656E6963636176;
}

uint64_t sub_224E85170()
{
  return 0x6947746F4E736177;
}

uint64_t sub_224E85190()
{
  return 0x74636166756E616DLL;
}

uint64_t sub_224E851B4()
{
  return 0x65626D754E746F6CLL;
}

uint64_t sub_224E851E4()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_224E851FC()
{
  unsigned __int8 *v0;

  return sub_224E85064(*v0);
}

uint64_t sub_224E85204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224ECB534(a1, a2);
  *a3 = result;
  return result;
}

void sub_224E85228(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_224E85234()
{
  sub_224E8C0C0();
  return sub_224F685B8();
}

uint64_t sub_224E8525C()
{
  sub_224E8C0C0();
  return sub_224F685C4();
}

uint64_t ModelsDSTU2.Immunization.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  char v19;

  v3 = v1;
  sub_224DFB77C(0, &qword_2557E2070, (uint64_t (*)(void))sub_224E8C0C0, (uint64_t)&type metadata for ModelsDSTU2.Immunization.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8C0C0();
  sub_224F68594();
  LOBYTE(v17) = 0;
  sub_224F68348();
  if (!v2)
  {
    LOBYTE(v17) = 1;
    sub_224F68300();
    *(_QWORD *)&v17 = *(_QWORD *)(v3 + 32);
    v19 = 2;
    sub_224DDAD8C();
    sub_224F68330();
    LOBYTE(v17) = 3;
    sub_224F68348();
    v10 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
    LOBYTE(v17) = 4;
    type metadata accessor for FHIRDateTime();
    sub_224DDACD4(&qword_2557E0748, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68330();
    v11 = (uint64_t *)(v3 + v10[9]);
    v12 = *v11;
    v13 = *((_DWORD *)v11 + 2);
    LOBYTE(v11) = *((_BYTE *)v11 + 12);
    *(_QWORD *)&v17 = v12;
    DWORD2(v17) = v13;
    BYTE12(v17) = (_BYTE)v11;
    v19 = 5;
    sub_224DFB31C();
    sub_224F68330();
    *(_QWORD *)&v17 = *(_QWORD *)(v3 + v10[10]);
    v19 = 6;
    sub_224DDEA0C(0, &qword_2557E0508, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DFAF5C();
    sub_224F68330();
    LOBYTE(v17) = 7;
    sub_224F68354();
    *(_QWORD *)&v17 = *(_QWORD *)(v3 + v10[12]);
    v19 = 8;
    sub_224DFB644(0, &qword_2557E1FC8);
    sub_224E8EB88();
    sub_224F68330();
    v14 = (__int128 *)(v3 + v10[13]);
    v15 = *((_QWORD *)v14 + 2);
    v17 = *v14;
    v18 = v15;
    v19 = 9;
    sub_224DFAEA8();
    sub_224F68378();
    LOBYTE(v17) = 10;
    sub_224F68354();
    LOBYTE(v17) = 11;
    type metadata accessor for Reference();
    sub_224DDACD4(&qword_2557E0758, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
    sub_224F68330();
    LOBYTE(v17) = 12;
    sub_224F68300();
    LOBYTE(v17) = 13;
    sub_224F68330();
    LOBYTE(v17) = 14;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsDSTU2.Immunization.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsDSTU2.Immunization.hash(into:));
}

uint64_t sub_224E85750@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.Immunization.init(from:)(a1, a2);
}

uint64_t sub_224E85764(_QWORD *a1)
{
  return ModelsDSTU2.Immunization.encode(to:)(a1);
}

uint64_t sub_224E85778(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsDSTU2.Immunization.hash(into:));
}

uint64_t sub_224E85788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsDSTU2.Immunization.hash(into:));
}

uint64_t sub_224E85794(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 72));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelsDSTU2.ImmunizationVaccinationProtocol.doseSequence.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ModelsDSTU2.ImmunizationVaccinationProtocol.seriesDoses.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ModelsDSTU2.ImmunizationVaccinationProtocol.hash(into:)()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_224F6851C();
  if (v1 == 1)
    return sub_224F68528();
  sub_224F68528();
  return sub_224F6851C();
}

uint64_t static ModelsDSTU2.ImmunizationVaccinationProtocol.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(_BYTE *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  return 1;
}

uint64_t sub_224E8587C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F44736569726573;
  else
    return 0x7571655365736F64;
}

uint64_t sub_224E858C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224ECBB54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224E858EC()
{
  sub_224E8EC3C();
  return sub_224F685B8();
}

uint64_t sub_224E85914()
{
  sub_224E8EC3C();
  return sub_224F685C4();
}

uint64_t ModelsDSTU2.ImmunizationVaccinationProtocol.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;
  char v12;
  char v13;

  sub_224DFB77C(0, &qword_2557E2088, (uint64_t (*)(void))sub_224E8EC3C, (uint64_t)&type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v10 - v6;
  v10[0] = *(_QWORD *)(v1 + 8);
  v11 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8EC3C();
  sub_224F68594();
  v13 = 0;
  v8 = v10[1];
  sub_224F6836C();
  if (!v8)
  {
    v12 = 1;
    sub_224F68324();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ModelsDSTU2.ImmunizationVaccinationProtocol.hashValue.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_224F68510();
  sub_224F6851C();
  sub_224F68528();
  if (v1 != 1)
    sub_224F6851C();
  return sub_224F6854C();
}

uint64_t ModelsDSTU2.ImmunizationVaccinationProtocol.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v16 = a2;
  sub_224DFB77C(0, &qword_2557E2098, (uint64_t (*)(void))sub_224E8EC3C, (uint64_t)&type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8EC3C();
  sub_224F6857C();
  if (!v2)
  {
    v9 = v16;
    v18 = 0;
    v10 = sub_224F682D0();
    v17 = 1;
    v12 = sub_224F68288();
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)v9 = v10;
    *(_QWORD *)(v9 + 8) = v12;
    *(_BYTE *)(v9 + 16) = v14 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_224E85C74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.ImmunizationVaccinationProtocol.init(from:)(a1, a2);
}

uint64_t sub_224E85C88(_QWORD *a1)
{
  return ModelsDSTU2.ImmunizationVaccinationProtocol.encode(to:)(a1);
}

uint64_t sub_224E85C9C()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_224F68510();
  sub_224F6851C();
  sub_224F68528();
  if (v1 != 1)
    sub_224F6851C();
  return sub_224F6854C();
}

uint64_t sub_224E85D18()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_224F6851C();
  if (v1 == 1)
    return sub_224F68528();
  sub_224F68528();
  return sub_224F6851C();
}

uint64_t sub_224E85D70()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_224F68510();
  sub_224F6851C();
  sub_224F68528();
  if (v1 != 1)
    sub_224F6851C();
  return sub_224F6854C();
}

uint64_t sub_224E85DE8(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    v2 = *(_BYTE *)(a2 + 16);
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    {
      if (*(_BYTE *)(a2 + 16))
        return 1;
    }
    else
    {
      if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
        v2 = 1;
      if ((v2 & 1) == 0)
        return 1;
    }
  }
  return 0;
}

uint64_t ModelsDSTU2.Observation.resourceType.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Observation.resourceType.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ModelsDSTU2.Observation.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t ModelsDSTU2.Observation.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t (*ModelsDSTU2.Observation.id.modify())()
{
  return nullsub_1;
}

uint64_t ModelsDSTU2.Observation.meta.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 32);
  *a1 = v2;
  return sub_224DFAE98(v2);
}

uint64_t ModelsDSTU2.Observation.status.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Observation.category.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[7];
  v3 = v1[8];
  v4 = v1[9];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_224DDB44C(v2, v3);
}

uint64_t ModelsDSTU2.Observation.code.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[11];
  v3 = v1[12];
  *a1 = v1[10];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Observation.comments.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Observation.effectiveDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DEA934(type metadata accessor for ModelsDSTU2.Observation, a1);
}

uint64_t ModelsDSTU2.Observation.effectivePeriod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsDSTU2.Observation(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 48), a1, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
}

uint64_t ModelsDSTU2.Observation.issued.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsDSTU2.Observation(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 52), a1, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsDSTU2.Observation.performer.getter()
{
  type metadata accessor for ModelsDSTU2.Observation(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Observation.valueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Observation(0) + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Observation.valueCodeableConcept.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ModelsDSTU2.Observation(0) + 64));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_224DDB44C(v4, v5);
}

uint64_t ModelsDSTU2.Observation.valueQuantity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224E84900(type metadata accessor for ModelsDSTU2.Observation, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, a1);
}

uint64_t ModelsDSTU2.Observation.referenceRange.getter()
{
  type metadata accessor for ModelsDSTU2.Observation(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Observation.language.getter()
{
  return sub_224E860F8(type metadata accessor for ModelsDSTU2.Observation);
}

uint64_t sub_224E860F8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 76));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelsDSTU2.Observation.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for Quantity();
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v38 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0300, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v39 = (uint64_t)&v38 - v9;
  v10 = type metadata accessor for Period();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E04B8, v14, v6);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v38 - v16;
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v2[3])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v18 = v2[4];
  if (v18 == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224F68528();
    sub_224F68528();
    if (v18)
    {
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v18);
      v19 = v18;
    }
    else
    {
      sub_224DE60AC(0);
      v19 = 0;
    }
    sub_224DE60AC(v19);
  }
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  v20 = v2[8];
  if (v20 == 1)
  {
    sub_224F68528();
    v21 = v2[12];
    if (v2[11])
      goto LABEL_12;
LABEL_20:
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v21)
      goto LABEL_13;
    goto LABEL_21;
  }
  v22 = v2[7];
  v23 = v2[9];
  sub_224F68528();
  if (v20)
  {
    sub_224F68528();
    sub_224DDB44C(v22, v20);
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v23)
    {
LABEL_16:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v23);
      swift_bridgeObjectRelease();
      v24 = v22;
      v25 = v20;
      goto LABEL_19;
    }
  }
  else
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v23)
      goto LABEL_16;
  }
  sub_224F68528();
  v24 = v22;
  v25 = v20;
LABEL_19:
  sub_224DDB480(v24, v25);
  v21 = v2[12];
  if (!v2[11])
    goto LABEL_20;
LABEL_12:
  sub_224F68528();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v21)
  {
LABEL_13:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDA83C(a1, v21);
    swift_bridgeObjectRelease_n();
    goto LABEL_22;
  }
LABEL_21:
  sub_224F68528();
  swift_bridgeObjectRelease();
LABEL_22:
  swift_bridgeObjectRelease();
  if (v2[14])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v26 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
  sub_224DF2AC8();
  sub_224DDB4B4((uint64_t)v2 + v26[12], (uint64_t)v17, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v17, 1, v10) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC((uint64_t)v17, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    sub_224F68528();
    sub_224DF2AC8();
    sub_224DF2AC8();
    sub_224DDEAA0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  }
  sub_224DF2AC8();
  v27 = *(_QWORD *)((char *)v2 + v26[14]);
  sub_224F68528();
  if (v27)
  {
    swift_bridgeObjectRetain();
    sub_224DDCC54(a1, v27);
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)((char *)v2 + v26[15] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v28 = (_QWORD *)((char *)v2 + v26[16]);
  v29 = v28[1];
  if (v29 == 1)
  {
    sub_224F68528();
    goto LABEL_41;
  }
  v30 = *v28;
  v31 = v28[2];
  sub_224F68528();
  if (!v29)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v31)
      goto LABEL_37;
LABEL_39:
    sub_224F68528();
    v32 = v30;
    v33 = v29;
    goto LABEL_40;
  }
  sub_224F68528();
  sub_224DDB44C(v30, v29);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v31)
    goto LABEL_39;
LABEL_37:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C(a1, v31);
  swift_bridgeObjectRelease();
  v32 = v30;
  v33 = v29;
LABEL_40:
  sub_224DDB480(v32, v33);
LABEL_41:
  v34 = v39;
  sub_224DDB4B4((uint64_t)v2 + v26[17], v39, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v34, 1, v41) == 1)
  {
    sub_224F68528();
  }
  else
  {
    v35 = v38;
    sub_224DDEADC(v34, v38, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
    sub_224F68528();
    Quantity.hash(into:)();
    sub_224DDEAA0(v35, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  }
  v36 = *(_QWORD *)((char *)v2 + v26[18]);
  sub_224F68528();
  if (v36)
  {
    swift_bridgeObjectRetain();
    sub_224DDDB8C(a1, v36);
    swift_bridgeObjectRelease();
  }
  if (!*(_QWORD *)((char *)v2 + v26[19] + 8))
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224E868C4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224E86900 + 4 * byte_224F6F8AF[a1]))(0x656372756F736572, 0xEC00000065707954);
}

uint64_t sub_224E86900()
{
  return 25705;
}

uint64_t sub_224E8690C()
{
  return 1635018093;
}

uint64_t sub_224E8691C()
{
  return 0x737574617473;
}

uint64_t sub_224E86930()
{
  return 0x79726F6765746163;
}

uint64_t sub_224E86948()
{
  return 1701080931;
}

uint64_t sub_224E86958()
{
  return 0x73746E656D6D6F63;
}

unint64_t sub_224E86970()
{
  return 0xD000000000000011;
}

uint64_t sub_224E8698C()
{
  return 0x7669746365666665;
}

uint64_t sub_224E869B0()
{
  return 0x646575737369;
}

uint64_t sub_224E869C4()
{
  return 0x656D726F66726570;
}

uint64_t sub_224E869E0()
{
  return 0x72745365756C6176;
}

unint64_t sub_224E86A00()
{
  return 0xD000000000000014;
}

uint64_t sub_224E86A20()
{
  return 0x61755165756C6176;
}

uint64_t sub_224E86A44()
{
  return 0x636E657265666572;
}

uint64_t sub_224E86A68()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_224E86A80()
{
  unsigned __int8 *v0;

  return sub_224E868C4(*v0);
}

uint64_t sub_224E86A88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224ECBC74(a1, a2);
  *a3 = result;
  return result;
}

void sub_224E86AAC(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_224E86AB8()
{
  sub_224E8C1B8();
  return sub_224F685B8();
}

uint64_t sub_224E86AE0()
{
  sub_224E8C1B8();
  return sub_224F685C4();
}

uint64_t ModelsDSTU2.Observation.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v15;
  int *v16;
  __int128 v17;
  uint64_t v18;
  char v19;

  v3 = v1;
  sub_224DFB77C(0, &qword_2557E20A0, (uint64_t (*)(void))sub_224E8C1B8, (uint64_t)&type metadata for ModelsDSTU2.Observation.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8C1B8();
  sub_224F68594();
  LOBYTE(v17) = 0;
  sub_224F68348();
  if (!v2)
  {
    LOBYTE(v17) = 1;
    sub_224F68300();
    *(_QWORD *)&v17 = *(_QWORD *)(v3 + 32);
    v19 = 2;
    sub_224DDAD8C();
    sub_224F68330();
    LOBYTE(v17) = 3;
    sub_224F68348();
    v10 = *(_QWORD *)(v3 + 72);
    v17 = *(_OWORD *)(v3 + 56);
    v18 = v10;
    v19 = 4;
    sub_224DFAEA8();
    sub_224F68330();
    v11 = *(_QWORD *)(v3 + 96);
    v17 = *(_OWORD *)(v3 + 80);
    v18 = v11;
    v19 = 5;
    sub_224F68378();
    LOBYTE(v17) = 6;
    sub_224F68300();
    v16 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
    LOBYTE(v17) = 7;
    type metadata accessor for FHIRDateTime();
    sub_224DDACD4(&qword_2557E0748, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68330();
    v15 = v3 + v16[12];
    LOBYTE(v17) = 8;
    type metadata accessor for Period();
    sub_224DDACD4(&qword_2557E0750, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
    sub_224F68330();
    LOBYTE(v17) = 9;
    sub_224F68330();
    *(_QWORD *)&v17 = *(_QWORD *)(v3 + v16[14]);
    v19 = 10;
    sub_224DDEA0C(0, &qword_2557E0550, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DFB07C();
    sub_224F68330();
    LOBYTE(v17) = 11;
    sub_224F68300();
    v12 = (__int128 *)(v3 + v16[16]);
    v13 = *((_QWORD *)v12 + 2);
    v17 = *v12;
    v18 = v13;
    v19 = 12;
    sub_224F68330();
    LOBYTE(v17) = 13;
    type metadata accessor for Quantity();
    sub_224DDACD4(&qword_2557E0860, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t)&protocol conformance descriptor for Quantity);
    sub_224F68330();
    *(_QWORD *)&v17 = *(_QWORD *)(v3 + v16[18]);
    v19 = 14;
    sub_224DDEA0C(0, &qword_2557E0630, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DFB570();
    sub_224F68330();
    LOBYTE(v17) = 15;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsDSTU2.Observation.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsDSTU2.Observation.hash(into:));
}

uint64_t sub_224E87064@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.Observation.init(from:)(a1, a2);
}

uint64_t sub_224E87078(_QWORD *a1)
{
  return ModelsDSTU2.Observation.encode(to:)(a1);
}

uint64_t sub_224E8708C(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsDSTU2.Observation.hash(into:));
}

uint64_t sub_224E8709C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsDSTU2.Observation.hash(into:));
}

uint64_t sub_224E870A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 76));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelsDSTU2.HumanName.prefix.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.HumanName.family.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.HumanName.given.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.HumanName.suffix.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.HumanName.text.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.HumanName.period.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224E87138(type metadata accessor for ModelsDSTU2.HumanName, a1);
}

uint64_t sub_224E87138@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return sub_224DDB4B4(v2 + *(int *)(v4 + 40), a2, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
}

uint64_t ModelsDSTU2.HumanName.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v1 = type metadata accessor for Period();
  v23 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E04B8, v4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v22 - v6;
  if (v0[1])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    v8 = v0[2];
    if (v8)
      goto LABEL_3;
LABEL_25:
    sub_224F68528();
    v11 = v0[3];
    if (v11)
      goto LABEL_8;
LABEL_26:
    sub_224F68528();
    v14 = v0[4];
    if (v14)
      goto LABEL_13;
LABEL_27:
    sub_224F68528();
    v17 = v0[5];
    if (v17)
      goto LABEL_18;
    goto LABEL_28;
  }
  sub_224F68528();
  v8 = v0[2];
  if (!v8)
    goto LABEL_25;
LABEL_3:
  sub_224F68528();
  sub_224F6851C();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    v10 = v8 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      v10 += 16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  v11 = v0[3];
  if (!v11)
    goto LABEL_26;
LABEL_8:
  sub_224F68528();
  sub_224F6851C();
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    v13 = v11 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      v13 += 16;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
  }
  v14 = v0[4];
  if (!v14)
    goto LABEL_27;
LABEL_13:
  sub_224F68528();
  sub_224F6851C();
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    swift_bridgeObjectRetain();
    v16 = v14 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      v16 += 16;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
  v17 = v0[5];
  if (v17)
  {
LABEL_18:
    sub_224F68528();
    sub_224F6851C();
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      swift_bridgeObjectRetain();
      v19 = v17 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
        v19 += 16;
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease();
    }
    if (v0[7])
      goto LABEL_23;
    goto LABEL_29;
  }
LABEL_28:
  sub_224F68528();
  if (v0[7])
  {
LABEL_23:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
LABEL_29:
  sub_224F68528();
LABEL_30:
  v20 = type metadata accessor for ModelsDSTU2.HumanName(0);
  sub_224DDB4B4((uint64_t)v0 + *(int *)(v20 + 40), (uint64_t)v7, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v7, 1, v1) == 1)
    return sub_224F68528();
  sub_224DDEADC((uint64_t)v7, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  sub_224F68528();
  sub_224DF2AC8();
  sub_224DF2AC8();
  return sub_224DDEAA0((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for Period);
}

uint64_t sub_224E87578()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224E875A0 + 4 * byte_224F6F8BF[*v0]))(6648693, 0xE300000000000000);
}

uint64_t sub_224E875A0()
{
  return 0x786966657270;
}

uint64_t sub_224E875B4()
{
  return 0x796C696D6166;
}

uint64_t sub_224E875C8()
{
  return 0x6E65766967;
}

uint64_t sub_224E875DC()
{
  return 0x786966667573;
}

uint64_t sub_224E875F0()
{
  return 1954047348;
}

uint64_t sub_224E87600()
{
  return 0x646F69726570;
}

uint64_t sub_224E87614()
{
  sub_224E8EC80();
  return sub_224F685B8();
}

uint64_t sub_224E8763C()
{
  sub_224E8EC80();
  return sub_224F685C4();
}

uint64_t ModelsDSTU2.HumanName.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v3 = v1;
  sub_224DFB77C(0, &qword_2557E20A8, (uint64_t (*)(void))sub_224E8EC80, (uint64_t)&type metadata for ModelsDSTU2.HumanName.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8EC80();
  sub_224F68594();
  LOBYTE(v13) = 0;
  sub_224F68300();
  if (!v2)
  {
    v13 = v3[2];
    v12 = 1;
    sub_224DFB644(0, (unint64_t *)&qword_2557E0888);
    sub_224DFB688(&qword_2557E0890, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    sub_224F68330();
    v13 = v3[3];
    v12 = 2;
    sub_224F68330();
    v13 = v3[4];
    v12 = 3;
    sub_224F68330();
    v13 = v3[5];
    v12 = 4;
    sub_224F68330();
    LOBYTE(v13) = 5;
    sub_224F68300();
    type metadata accessor for ModelsDSTU2.HumanName(0);
    LOBYTE(v13) = 6;
    type metadata accessor for Period();
    sub_224DDACD4(&qword_2557E0750, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
    sub_224F68330();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsDSTU2.HumanName.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsDSTU2.HumanName.hash(into:));
}

uint64_t ModelsDSTU2.HumanName.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v17 = a2;
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v18 = (char *)&v17 - v4;
  sub_224DFB77C(0, &qword_2557E20B8, (uint64_t (*)(void))sub_224E8EC80, (uint64_t)&type metadata for ModelsDSTU2.HumanName.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v19 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = type metadata accessor for ModelsDSTU2.HumanName(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = a1[3];
  v20 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_224E8EC80();
  v11 = v21;
  sub_224F6857C();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  v21 = v7;
  v12 = (uint64_t)v18;
  v13 = v19;
  LOBYTE(v23) = 0;
  *v9 = sub_224F68264();
  v9[1] = v14;
  sub_224DFB644(0, (unint64_t *)&qword_2557E0888);
  v22 = 1;
  sub_224DFB688(&qword_2557E08A0, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
  sub_224F68294();
  v9[2] = v23;
  v22 = 2;
  sub_224F68294();
  v9[3] = v23;
  v22 = 3;
  sub_224F68294();
  v9[4] = v23;
  v22 = 4;
  sub_224F68294();
  v9[5] = v23;
  LOBYTE(v23) = 5;
  v9[6] = sub_224F68264();
  v9[7] = v15;
  type metadata accessor for Period();
  LOBYTE(v23) = 6;
  sub_224DDACD4(&qword_2557E04F8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
  sub_224F68294();
  (*(void (**)(_QWORD, uint64_t))(v6 + 8))(0, v13);
  sub_224DFAC88(v12, (uint64_t)v9 + *(int *)(v21 + 40), &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_224DDB408((uint64_t)v9, v17, type metadata accessor for ModelsDSTU2.HumanName);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return sub_224DDEAA0((uint64_t)v9, type metadata accessor for ModelsDSTU2.HumanName);
}

uint64_t sub_224E87DF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.HumanName.init(from:)(a1, a2);
}

uint64_t sub_224E87E04(_QWORD *a1)
{
  return ModelsDSTU2.HumanName.encode(to:)(a1);
}

uint64_t sub_224E87E18(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsDSTU2.HumanName.hash(into:));
}

uint64_t sub_224E87E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsDSTU2.HumanName.hash(into:));
}

uint64_t ModelsDSTU2.Patient.resourceType.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Patient.resourceType.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ModelsDSTU2.Patient.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t ModelsDSTU2.Patient.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Patient.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ModelsDSTU2.Patient.id.modify())()
{
  return nullsub_1;
}

void ModelsDSTU2.Patient.birthDate.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;

  v2 = *(_DWORD *)(v1 + 40);
  v3 = *(_BYTE *)(v1 + 44);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_DWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 12) = v3;
}

uint64_t ModelsDSTU2.Patient.gender.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Patient.name.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Patient.telecom.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Patient.identifier.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Patient.address.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Patient.maritalStatus.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[12];
  v3 = v1[13];
  v4 = v1[14];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_224DDB44C(v2, v3);
}

uint64_t ModelsDSTU2.Patient.extension.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Patient.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Patient.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v3 = type metadata accessor for ModelsDSTU2.HumanName(0);
  v39 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + 24);
  v37 = *(_QWORD *)(v1 + 16);
  v35[1] = *(_QWORD *)(v1 + 32);
  v7 = *(_DWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 44);
  v38 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 64);
  v41 = *(_QWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 72);
  v42 = *(_QWORD *)(v1 + 80);
  v43 = *(_QWORD *)(v1 + 88);
  v36 = *(_QWORD *)(v1 + 96);
  v11 = *(_QWORD *)(v1 + 104);
  v44 = *(_QWORD *)(v1 + 112);
  v45 = v11;
  v46 = *(_QWORD *)(v1 + 120);
  v40 = *(_QWORD *)(v1 + 128);
  v47 = *(_QWORD *)(v1 + 136);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v6)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
    {
LABEL_3:
      v12 = v43;
      goto LABEL_9;
    }
  }
  else
  {
    sub_224F68528();
    if ((v8 & 1) != 0)
      goto LABEL_3;
  }
  sub_224F68528();
  sub_224F6851C();
  if ((v7 & 0x100) == 0)
    sub_224F68528();
  v12 = v43;
  sub_224F68528();
  if ((v7 & 0x1000000) == 0)
    sub_224F68528();
LABEL_9:
  v13 = v41;
  sub_224F68528();
  sub_224F68528();
  if (v13)
  {
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  sub_224F6851C();
  v14 = *(_QWORD *)(v9 + 16);
  if (v14)
  {
    v15 = v9 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
    v16 = *(_QWORD *)(v39 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_224DDB408(v15, (uint64_t)v5, type metadata accessor for ModelsDSTU2.HumanName);
      ModelsDSTU2.HumanName.hash(into:)();
      sub_224DDEAA0((uint64_t)v5, type metadata accessor for ModelsDSTU2.HumanName);
      v15 += v16;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
  sub_224F68528();
  if (v10)
  {
    swift_bridgeObjectRetain();
    sub_224DDCB50(a1, v10);
    swift_bridgeObjectRelease();
  }
  v18 = v46;
  v17 = v47;
  v20 = v44;
  v19 = v45;
  v21 = v42;
  if (v42)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDC7A0(a1, v21);
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_19;
LABEL_29:
    sub_224F68528();
    if (v19 == 1)
      goto LABEL_25;
    goto LABEL_30;
  }
  sub_224F68528();
  if (!v12)
    goto LABEL_29;
LABEL_19:
  sub_224F68528();
  v22 = *(_QWORD *)(v12 + 16);
  sub_224F6851C();
  if (v22)
  {
    swift_bridgeObjectRetain();
    v23 = *(_OWORD *)(v12 + 144);
    v54 = *(_OWORD *)(v12 + 128);
    v55 = v23;
    v56 = *(_QWORD *)(v12 + 160);
    v24 = *(_OWORD *)(v12 + 80);
    v50 = *(_OWORD *)(v12 + 64);
    v51 = v24;
    v25 = *(_OWORD *)(v12 + 112);
    v52 = *(_OWORD *)(v12 + 96);
    v53 = v25;
    v26 = *(_OWORD *)(v12 + 48);
    v48 = *(_OWORD *)(v12 + 32);
    v49 = v26;
    Address.hash(into:)();
    v27 = v22 - 1;
    if (v27)
    {
      v28 = (__int128 *)(v12 + 168);
      do
      {
        v29 = v28[7];
        v54 = v28[6];
        v55 = v29;
        v56 = *((_QWORD *)v28 + 16);
        v30 = v28[3];
        v50 = v28[2];
        v51 = v30;
        v31 = v28[5];
        v52 = v28[4];
        v53 = v31;
        v32 = v28[1];
        v48 = *v28;
        v49 = v32;
        Address.hash(into:)();
        v28 = (__int128 *)((char *)v28 + 136);
        --v27;
      }
      while (v27);
    }
    swift_bridgeObjectRelease();
  }
  if (v19 == 1)
  {
LABEL_25:
    sub_224F68528();
    if (!v18)
      goto LABEL_26;
LABEL_36:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDB75C(a1, v18);
    swift_bridgeObjectRelease();
    if (!v17)
      return sub_224F68528();
    goto LABEL_37;
  }
LABEL_30:
  sub_224F68528();
  if (v19)
  {
    sub_224F68528();
    v34 = v36;
    sub_224DDB44C(v36, v19);
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v20)
      goto LABEL_32;
  }
  else
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    v34 = v36;
    if (v20)
    {
LABEL_32:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v20);
      swift_bridgeObjectRelease();
      sub_224DDB480(v34, v19);
      if (v18)
        goto LABEL_36;
      goto LABEL_26;
    }
  }
  sub_224F68528();
  sub_224DDB480(v34, v19);
  if (v18)
    goto LABEL_36;
LABEL_26:
  sub_224F68528();
  if (!v17)
    return sub_224F68528();
LABEL_37:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224E88534(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224E88570 + 4 * byte_224F6F8C6[a1]))(0x656372756F736572, 0xEC00000065707954);
}

uint64_t sub_224E88570()
{
  return 25705;
}

uint64_t sub_224E8857C()
{
  return 0x7461446874726962;
}

uint64_t sub_224E88598()
{
  return 0x7265646E6567;
}

uint64_t sub_224E885AC()
{
  return 1701667182;
}

uint64_t sub_224E885BC()
{
  return 0x6D6F63656C6574;
}

uint64_t sub_224E885D4()
{
  return 0x696669746E656469;
}

uint64_t sub_224E885F0()
{
  return 0x73736572646461;
}

uint64_t sub_224E88608()
{
  return 0x6F69736E65747865;
}

uint64_t sub_224E88628()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_224E88640()
{
  return 0x536C61746972616DLL;
}

uint64_t sub_224E88664()
{
  unsigned __int8 *v0;

  return sub_224E88534(*v0);
}

uint64_t sub_224E8866C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224ECC330(a1, a2);
  *a3 = result;
  return result;
}

void sub_224E88690(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_224E8869C()
{
  sub_224E8C1FC();
  return sub_224F685B8();
}

uint64_t sub_224E886C4()
{
  sub_224E8C1FC();
  return sub_224F685C4();
}

uint64_t ModelsDSTU2.Patient.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;

  sub_224DFB77C(0, &qword_2557E20C0, (uint64_t (*)(void))sub_224E8C1FC, (uint64_t)&type metadata for ModelsDSTU2.Patient.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v19 - v6;
  v8 = *(_QWORD *)(v1 + 16);
  v32 = *(_QWORD *)(v1 + 24);
  v33 = v8;
  v31 = *(_QWORD *)(v1 + 32);
  v38 = *(_DWORD *)(v1 + 40);
  v30 = *(unsigned __int8 *)(v1 + 44);
  v9 = *(_QWORD *)(v1 + 56);
  v28 = *(_QWORD *)(v1 + 48);
  v29 = v9;
  v10 = *(_QWORD *)(v1 + 64);
  v26 = *(_QWORD *)(v1 + 72);
  v27 = v10;
  v11 = *(_QWORD *)(v1 + 80);
  v24 = *(_QWORD *)(v1 + 88);
  v25 = v11;
  v12 = *(_QWORD *)(v1 + 104);
  v21 = *(_QWORD *)(v1 + 96);
  v22 = v12;
  v23 = *(_QWORD *)(v1 + 112);
  v13 = *(_QWORD *)(v1 + 120);
  v19[2] = *(_QWORD *)(v1 + 128);
  v20 = v13;
  v19[1] = *(_QWORD *)(v1 + 136);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E8C1FC();
  sub_224F68594();
  LOBYTE(v35) = 0;
  v14 = v34;
  sub_224F68348();
  if (v14)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v15 = v30;
  v16 = v38;
  v17 = v31;
  LOBYTE(v35) = 1;
  sub_224F68300();
  v35 = v17;
  LODWORD(v36) = v16;
  BYTE4(v36) = v15;
  v39 = 2;
  sub_224DFB31C();
  sub_224F68330();
  v34 = v5;
  LOBYTE(v35) = 3;
  sub_224F68300();
  v35 = v27;
  v39 = 4;
  sub_224DDEA0C(0, &qword_2557E1C70, type metadata accessor for ModelsDSTU2.HumanName, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_224E8ECC4();
  sub_224F68378();
  v35 = v26;
  v39 = 5;
  sub_224DFB644(0, &qword_2557E0678);
  sub_224DFB868();
  sub_224F68330();
  v35 = v25;
  v39 = 6;
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E0690, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_224DFB91C();
  sub_224F68330();
  v35 = v24;
  v39 = 7;
  sub_224DFB644(0, &qword_2557E06A8);
  sub_224DFB9AC();
  sub_224F68330();
  v35 = v21;
  v36 = v22;
  v37 = v23;
  v39 = 8;
  sub_224DFAEA8();
  sub_224F68330();
  v35 = v20;
  v39 = 9;
  sub_224DDEA0C(0, &qword_2557E0538, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_224DFAFEC();
  sub_224F68330();
  LOBYTE(v35) = 10;
  sub_224F68300();
  return (*(uint64_t (**)(char *, _QWORD))(v5 + 8))(v7, 0);
}

uint64_t ModelsDSTU2.Patient.hashValue.getter()
{
  _BYTE v1[72];

  sub_224F68510();
  ModelsDSTU2.Patient.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

uint64_t sub_224E88BC4@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return ModelsDSTU2.Patient.init(from:)(a1, a2);
}

uint64_t sub_224E88BD8(_QWORD *a1)
{
  return ModelsDSTU2.Patient.encode(to:)(a1);
}

uint64_t sub_224E88BEC()
{
  _BYTE v1[72];

  sub_224F68510();
  ModelsDSTU2.Patient.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

uint64_t sub_224E88C2C()
{
  _BYTE v1[72];

  sub_224F68510();
  ModelsDSTU2.Patient.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

uint64_t sub_224E88C64()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

BOOL _s23HealthRecordsExtraction11ModelsDSTU2V9HumanNameV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BOOL8 result;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  char v38;
  uint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for Period();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, &qword_2557E1440, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v39 - v10;
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v39 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v39 - v19;
  v21 = a1[1];
  v22 = a2[1];
  if (!v21)
  {
    if (v22)
      return 0;
    goto LABEL_8;
  }
  if (!v22)
    return 0;
  if (*a1 == *a2 && v21 == v22 || (v23 = sub_224F683CC(), result = 0, (v23 & 1) != 0))
  {
LABEL_8:
    v25 = (_QWORD *)a1[2];
    v26 = (_QWORD *)a2[2];
    if (v25)
    {
      if (!v26 || (sub_224DD698C(v25, v26) & 1) == 0)
        return 0;
    }
    else if (v26)
    {
      return 0;
    }
    v27 = (_QWORD *)a1[3];
    v28 = (_QWORD *)a2[3];
    if (v27)
    {
      if (!v28 || (sub_224DD698C(v27, v28) & 1) == 0)
        return 0;
    }
    else if (v28)
    {
      return 0;
    }
    v29 = (_QWORD *)a1[4];
    v30 = (_QWORD *)a2[4];
    if (v29)
    {
      if (!v30 || (sub_224DD698C(v29, v30) & 1) == 0)
        return 0;
    }
    else if (v30)
    {
      return 0;
    }
    v31 = (_QWORD *)a1[5];
    v32 = (_QWORD *)a2[5];
    if (v31)
    {
      if (!v32 || (sub_224DD698C(v31, v32) & 1) == 0)
        return 0;
    }
    else if (v32)
    {
      return 0;
    }
    v33 = a1[7];
    v34 = a2[7];
    if (v33)
    {
      if (!v34)
        return 0;
      if (a1[6] != a2[6] || v33 != v34)
      {
        v35 = sub_224F683CC();
        result = 0;
        if ((v35 & 1) == 0)
          return result;
      }
    }
    else if (v34)
    {
      return 0;
    }
    v40 = type metadata accessor for ModelsDSTU2.HumanName(0);
    sub_224DDB4B4((uint64_t)a1 + *(int *)(v40 + 40), (uint64_t)v20, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDB4B4((uint64_t)a2 + *(int *)(v40 + 40), (uint64_t)v18, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    v36 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_224DDB4B4((uint64_t)v20, (uint64_t)v11, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDB4B4((uint64_t)v18, v36, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v37((uint64_t)v11, 1, v4) == 1)
    {
      sub_224DDB50C((uint64_t)v18, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      sub_224DDB50C((uint64_t)v20, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      if (v37(v36, 1, v4) == 1)
      {
        sub_224DDB50C((uint64_t)v11, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        return 1;
      }
      goto LABEL_40;
    }
    sub_224DDB4B4((uint64_t)v11, (uint64_t)v15, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    if (v37(v36, 1, v4) == 1)
    {
      sub_224DDB50C((uint64_t)v18, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      sub_224DDB50C((uint64_t)v20, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      sub_224DDEAA0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Period);
LABEL_40:
      sub_224DDEA64((uint64_t)v11, &qword_2557E1440, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      return 0;
    }
    sub_224DDEADC(v36, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    v38 = static Period.== infix(_:_:)(v15, v7);
    sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    sub_224DDB50C((uint64_t)v18, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDB50C((uint64_t)v20, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDEAA0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    sub_224DDB50C((uint64_t)v11, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    return (v38 & 1) != 0;
  }
  return result;
}

BOOL _s23HealthRecordsExtraction11ModelsDSTU2V7PatientV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  _BOOL8 result;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 44);
  v44 = *(_QWORD *)(a1 + 48);
  v46 = *(_QWORD *)(a1 + 56);
  v42 = *(_QWORD *)(a1 + 64);
  v40 = *(_QWORD *)(a1 + 72);
  v38 = *(_QWORD *)(a1 + 80);
  v35 = *(_QWORD *)(a1 + 96);
  v36 = *(_QWORD *)(a1 + 88);
  v33 = *(_QWORD *)(a1 + 104);
  v31 = *(_QWORD *)(a1 + 112);
  v28 = *(_QWORD *)(a1 + 120);
  v24 = *(_QWORD *)(a1 + 128);
  v26 = *(_QWORD *)(a1 + 136);
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_DWORD *)(a2 + 40);
  v11 = *(_BYTE *)(a2 + 44);
  v43 = *(_QWORD *)(a2 + 48);
  v45 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(a2 + 64);
  v39 = *(_QWORD *)(a2 + 72);
  v37 = *(_QWORD *)(a2 + 80);
  v34 = *(_QWORD *)(a2 + 88);
  v32 = *(_QWORD *)(a2 + 104);
  v29 = *(_QWORD *)(a2 + 96);
  v30 = *(_QWORD *)(a2 + 112);
  v27 = *(_QWORD *)(a2 + 120);
  v23 = *(_QWORD *)(a2 + 128);
  v25 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v12 = sub_224F683CC(), result = 0, (v12 & 1) != 0))
  {
    if (v3)
    {
      if (!v7)
        return 0;
      if (v2 != v8 || v3 != v7)
      {
        v14 = sub_224F683CC();
        result = 0;
        if ((v14 & 1) == 0)
          return result;
      }
    }
    else if (v7)
    {
      return 0;
    }
    if ((v6 & 1) != 0)
    {
      if ((v11 & 1) == 0)
        return 0;
    }
    else
    {
      v50 = v4;
      LODWORD(v51) = v5;
      BYTE4(v51) = 0;
      if ((v11 & 1) != 0)
        return 0;
      v47 = v9;
      LOWORD(v48) = v10 & 0x1FF;
      BYTE2(v48) = BYTE2(v10);
      BYTE3(v48) = HIBYTE(v10) & 1;
      if ((_s23HealthRecordsExtraction8FHIRDateV2eeoiySbAC_ACtFZ_0((uint64_t)&v50, (uint64_t)&v47) & 1) == 0)
        return 0;
    }
    if (v46)
    {
      if (!v45)
        return 0;
      if (v44 != v43 || v46 != v45)
      {
        v15 = sub_224F683CC();
        result = 0;
        if ((v15 & 1) == 0)
          return result;
      }
    }
    else if (v45)
    {
      return 0;
    }
    if ((sub_224DD96BC(v42, v41) & 1) == 0)
      return 0;
    if (v40)
    {
      if (!v39 || (sub_224DD6BA0(v40, v39) & 1) == 0)
        return 0;
    }
    else if (v39)
    {
      return 0;
    }
    if (v38)
    {
      if (!v37)
        return 0;
      swift_bridgeObjectRetain();
      v16 = swift_bridgeObjectRetain();
      v17 = sub_224DD6C8C(v16, v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
        return 0;
    }
    else if (v37)
    {
      return 0;
    }
    if (v36)
    {
      v18 = v35;
      if (!v34 || !sub_224DD6CA0(v36, v34))
        return 0;
    }
    else
    {
      v18 = v35;
      if (v34)
        return 0;
    }
    if (v33 == 1)
    {
      v19 = v32;
      if (v32 == 1)
      {
LABEL_48:
        if (v28)
        {
          if (!v27)
            return 0;
          swift_bridgeObjectRetain();
          v21 = swift_bridgeObjectRetain();
          v22 = sub_224DD68A0(v21, v27);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v22 & 1) == 0)
            return 0;
        }
        else if (v27)
        {
          return 0;
        }
        if (v26)
          return v25 && (v24 == v23 && v26 == v25 || (sub_224F683CC() & 1) != 0);
        return !v25;
      }
    }
    else
    {
      v50 = v18;
      v51 = v33;
      v52 = v31;
      if (v32 != 1)
      {
        v47 = v29;
        v48 = v32;
        v49 = v30;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v20 = static CodeableConcept.== infix(_:_:)(&v50, &v47);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_224DDB480(v18, v33);
        if ((v20 & 1) == 0)
          return 0;
        goto LABEL_48;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = 1;
    }
    sub_224DDB44C(v29, v19);
    sub_224DDB480(v18, v33);
    sub_224DDB480(v29, v19);
    return 0;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction11ModelsDSTU2V6BundleV0F5EntryV2eeoiySbAG_AGtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v32;
  char v33;
  char v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  char *v40;

  v4 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, &qword_2557E02E8, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - v10;
  sub_224DDEA0C(0, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v35 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v35 - v19;
  v21 = a1[1];
  v22 = a2[1];
  if (!v21)
  {
    if (v22)
      goto LABEL_14;
    goto LABEL_8;
  }
  if (!v22)
    goto LABEL_14;
  if (*a1 == *a2 && v21 == v22 || (v23 = sub_224F683CC(), v24 = 0, (v23 & 1) != 0))
  {
LABEL_8:
    v40 = v15;
    v36 = v7;
    v25 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
    v26 = *(int *)(v25 + 20);
    v38 = a1;
    sub_224DDB4B4((uint64_t)a1 + v26, (uint64_t)v20, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
    v37 = v25;
    v27 = *(int *)(v25 + 20);
    v39 = a2;
    sub_224DDB4B4((uint64_t)a2 + v27, (uint64_t)v18, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
    v28 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_224DDB4B4((uint64_t)v20, (uint64_t)v11, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_224DDB4B4((uint64_t)v18, v28, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
    v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v29((uint64_t)v11, 1, v4) == 1)
    {
      sub_224DDB50C((uint64_t)v18, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
      sub_224DDB50C((uint64_t)v20, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
      if (v29(v28, 1, v4) == 1)
      {
        sub_224DDB50C((uint64_t)v11, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
LABEL_17:
        sub_224EECC78(*(_QWORD *)((char *)v38 + *(int *)(v37 + 24)), *(_QWORD *)((char *)v38 + *(int *)(v37 + 24) + 8));
        return v24 & 1;
      }
      goto LABEL_13;
    }
    v30 = (uint64_t)v40;
    sub_224DDB4B4((uint64_t)v11, (uint64_t)v40, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
    if (v29(v28, 1, v4) == 1)
    {
      sub_224DDB50C((uint64_t)v18, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
      sub_224DDB50C((uint64_t)v20, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
      sub_224DDEAA0(v30, type metadata accessor for ModelsDSTU2.ResourceProxy);
LABEL_13:
      sub_224DDEA64((uint64_t)v11, &qword_2557E02E8, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
      goto LABEL_14;
    }
    v32 = v36;
    sub_224DDEADC(v28, (uint64_t)v36, type metadata accessor for ModelsDSTU2.ResourceProxy);
    _s23HealthRecordsExtraction11ModelsDSTU2V13ResourceProxyO2eeoiySbAE_AEtFZ_0(v30, v32);
    v34 = v33;
    sub_224DDEAA0((uint64_t)v32, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_224DDB50C((uint64_t)v18, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_224DDB50C((uint64_t)v20, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_224DDEAA0(v30, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_224DDB50C((uint64_t)v11, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
    if ((v34 & 1) != 0)
      goto LABEL_17;
LABEL_14:
    v24 = 0;
  }
  return v24 & 1;
}

uint64_t _s23HealthRecordsExtraction11ModelsDSTU2V16DiagnosticReportV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  unint64_t *v54;
  unint64_t *v55;
  uint64_t (*v56)();
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;

  v96 = type metadata accessor for Period();
  v4 = *(_QWORD *)(v96 - 8);
  MEMORY[0x24BDAC7A8](v96);
  v89 = (uint64_t)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, &qword_2557E1440, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v7 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v97 = (uint64_t)&v84 - v8;
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v93 = (uint64_t)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v84 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v95 = (uint64_t)&v84 - v16;
  v99 = type metadata accessor for FHIRDateTime();
  v17 = *(_QWORD *)(v99 - 8);
  MEMORY[0x24BDAC7A8](v99);
  v94 = (uint64_t)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v98 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v92 = (uint64_t)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v84 - v22;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v9);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v88 = (uint64_t)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v90 = (uint64_t)&v84 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v91 = (uint64_t)&v84 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v84 - v32;
  v34 = MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)&v84 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v84 - v37;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v39 = sub_224F683CC(), result = 0, (v39 & 1) != 0))
  {
    v41 = *(_QWORD *)(a1 + 24);
    v42 = *(_QWORD *)(a2 + 24);
    if (v41)
    {
      if (!v42)
        return 0;
      if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16) || v41 != v42)
      {
        v43 = sub_224F683CC();
        result = 0;
        if ((v43 & 1) == 0)
          return result;
      }
    }
    else if (v42)
    {
      return 0;
    }
    if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32) || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
    {
      v44 = sub_224F683CC();
      result = 0;
      if ((v44 & 1) == 0)
        return result;
    }
    v45 = *(_QWORD *)(a1 + 64);
    v102 = *(_OWORD *)(a1 + 48);
    v103 = v45;
    v46 = *(_QWORD *)(a2 + 64);
    v100 = *(_OWORD *)(a2 + 48);
    v101 = v46;
    if ((static CodeableConcept.== infix(_:_:)(&v102, &v100) & 1) == 0)
      return 0;
    v47 = *(_QWORD *)(a1 + 80);
    v48 = *(_QWORD *)(a2 + 80);
    if (v47)
    {
      if (!v48)
        return 0;
      if (*(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72) || v47 != v48)
      {
        v49 = sub_224F683CC();
        result = 0;
        if ((v49 & 1) == 0)
          return result;
      }
    }
    else if (v48)
    {
      return 0;
    }
    v85 = v4;
    v50 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
    sub_224DDB4B4(a1 + *(int *)(v50 + 36), (uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v86 = (int *)v50;
    sub_224DDB4B4(a2 + *(int *)(v50 + 36), (uint64_t)v36, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v51 = (uint64_t)&v23[*(int *)(v98 + 48)];
    sub_224DDB4B4((uint64_t)v38, (uint64_t)v23, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v87 = v51;
    sub_224DDB4B4((uint64_t)v36, v51, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
    v53 = v99;
    if (v52((uint64_t)v23, 1, v99) == 1)
    {
      sub_224DDB50C((uint64_t)v36, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDB50C((uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      if (v52(v87, 1, v53) == 1)
      {
        sub_224DDB50C((uint64_t)v23, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        goto LABEL_29;
      }
    }
    else
    {
      sub_224DDB4B4((uint64_t)v23, (uint64_t)v33, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      if (v52(v87, 1, v53) != 1)
      {
        v58 = v94;
        sub_224DDEADC(v87, v94, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        LODWORD(v87) = static FHIRDateTime.== infix(_:_:)(v33, v58);
        sub_224DDEAA0(v58, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        sub_224DDB50C((uint64_t)v36, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        sub_224DDB50C((uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        sub_224DDEAA0((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        sub_224DDB50C((uint64_t)v23, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        if ((v87 & 1) == 0)
          return 0;
LABEL_29:
        v87 = (uint64_t)v52;
        v59 = v86;
        v60 = v95;
        sub_224DDB4B4(a1 + v86[10], v95, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        sub_224DDB4B4(a2 + v59[10], (uint64_t)v15, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        v61 = *(int *)(v7 + 48);
        v62 = v97;
        v63 = v97 + v61;
        sub_224DDB4B4(v60, v97, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        sub_224DDB4B4((uint64_t)v15, v63, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
        v65 = v96;
        if (v64(v62, 1, v96) == 1)
        {
          sub_224DDB50C((uint64_t)v15, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          sub_224DDB50C(v60, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          if (v64(v63, 1, v65) == 1)
          {
            sub_224DDB50C(v62, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
LABEL_36:
            v69 = v86;
            v70 = v91;
            sub_224DDB4B4(a1 + v86[11], v91, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v71 = v90;
            sub_224DDB4B4(a2 + v69[11], v90, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v72 = v92;
            v73 = v92 + *(int *)(v98 + 48);
            sub_224DDB4B4(v70, v92, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224DDB4B4(v71, v73, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v74 = v99;
            v75 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v87;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v87)(v72, 1, v99) == 1)
            {
              sub_224DDB50C(v71, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDB50C(v70, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v75(v73, 1, v74) == 1)
              {
                sub_224DDB50C(v72, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
LABEL_46:
                v79 = v86[12];
                v80 = (_QWORD *)(a1 + v79);
                v81 = *(_QWORD *)(a1 + v79 + 8);
                v82 = (_QWORD *)(a2 + v79);
                v83 = v82[1];
                if (v81)
                {
                  if (v83 && (*v80 == *v82 && v81 == v83 || (sub_224F683CC() & 1) != 0))
                    return 1;
                }
                else if (!v83)
                {
                  return 1;
                }
                return 0;
              }
            }
            else
            {
              v76 = v88;
              sub_224DDB4B4(v72, v88, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v75(v73, 1, v74) != 1)
              {
                v77 = v94;
                sub_224DDEADC(v73, v94, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                v78 = static FHIRDateTime.== infix(_:_:)(v76, v77);
                sub_224DDEAA0(v77, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                sub_224DDB50C(v71, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_224DDB50C(v70, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_224DDEAA0(v76, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                sub_224DDB50C(v72, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                if ((v78 & 1) == 0)
                  return 0;
                goto LABEL_46;
              }
              sub_224DDB50C(v71, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDB50C(v70, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDEAA0(v76, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            }
            v54 = (unint64_t *)&qword_2557E02D8;
            v55 = &qword_2557E02D0;
            v56 = type metadata accessor for FHIRDateTime;
            v57 = v72;
LABEL_42:
            sub_224DDEA64(v57, v54, v55, (uint64_t (*)(uint64_t))v56);
            return 0;
          }
        }
        else
        {
          v66 = v93;
          sub_224DDB4B4(v62, v93, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          if (v64(v63, 1, v65) != 1)
          {
            v67 = v89;
            sub_224DDEADC(v63, v89, (uint64_t (*)(_QWORD))type metadata accessor for Period);
            v68 = static Period.== infix(_:_:)(v66, v67);
            sub_224DDEAA0(v67, (uint64_t (*)(_QWORD))type metadata accessor for Period);
            sub_224DDB50C((uint64_t)v15, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
            sub_224DDB50C(v60, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
            sub_224DDEAA0(v66, (uint64_t (*)(_QWORD))type metadata accessor for Period);
            sub_224DDB50C(v62, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
            if ((v68 & 1) == 0)
              return 0;
            goto LABEL_36;
          }
          sub_224DDB50C((uint64_t)v15, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          sub_224DDB50C(v60, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          sub_224DDEAA0(v66, (uint64_t (*)(_QWORD))type metadata accessor for Period);
        }
        v54 = &qword_2557E1440;
        v55 = &qword_2557E04B8;
        v56 = type metadata accessor for Period;
        v57 = v62;
        goto LABEL_42;
      }
      sub_224DDB50C((uint64_t)v36, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDB50C((uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEAA0((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    }
    v54 = (unint64_t *)&qword_2557E02D8;
    v55 = &qword_2557E02D0;
    v56 = type metadata accessor for FHIRDateTime;
    v57 = (uint64_t)v23;
    goto LABEL_42;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction11ModelsDSTU2V9ConditionV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  int v76;
  _QWORD *v77;
  BOOL v78;
  int *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t *v90;
  uint64_t (*v91)();
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int (*v135)(uint64_t, uint64_t, uint64_t);
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int (*v143)(uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  int *v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t *v162;
  uint64_t (*v163)();
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  int *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  int *v183;
  char v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  int *v192;
  char v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  int *v200;
  _QWORD *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int (*v232)(uint64_t, uint64_t, uint64_t);
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;

  v215 = type metadata accessor for Period();
  v212 = *(_QWORD *)(v215 - 8);
  MEMORY[0x24BDAC7A8](v215);
  v208 = (uint64_t)&v199 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, &qword_2557E1440, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v214 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v199 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v217 = (uint64_t)&v199 - v9;
  v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v204 = (uint64_t)&v199 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v205 = (uint64_t)&v199 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v206 = (uint64_t)&v199 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v213 = (uint64_t)&v199 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v218 = (uint64_t)&v199 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v219 = (uint64_t)&v199 - v22;
  v230 = type metadata accessor for FHIRDateTime();
  v226 = *(_QWORD *)(v230 - 8);
  MEMORY[0x24BDAC7A8](v230);
  v223 = (uint64_t)&v199 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v228 = v24;
  v25 = MEMORY[0x24BDAC7A8](v24);
  v211 = (uint64_t)&v199 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v221 = (char *)&v199 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v227 = (uint64_t)&v199 - v29;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v10);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v207 = (uint64_t)&v199 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v31);
  v209 = (uint64_t)&v199 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v210 = (uint64_t)&v199 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v216 = (uint64_t)&v199 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v220 = (uint64_t)&v199 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v222 = (char *)&v199 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v224 = (uint64_t)&v199 - v44;
  v45 = MEMORY[0x24BDAC7A8](v43);
  v231 = (uint64_t)&v199 - v46;
  MEMORY[0x24BDAC7A8](v45);
  v232 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v199 - v47);
  v48 = type metadata accessor for Reference();
  v49 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v225 = (uint64_t *)((char *)&v199 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_224DDE904(0, &qword_2557E0328, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v52 = v51;
  MEMORY[0x24BDAC7A8](v51);
  v54 = (char *)&v199 - v53;
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v10);
  v56 = MEMORY[0x24BDAC7A8](v55);
  v58 = (char *)&v199 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = MEMORY[0x24BDAC7A8](v56);
  v61 = (char *)&v199 - v60;
  MEMORY[0x24BDAC7A8](v59);
  v63 = (char *)&v199 - v62;
  if (*a1 != *a2 || a1[1] != a2[1])
  {
    v64 = sub_224F683CC();
    result = 0;
    if ((v64 & 1) == 0)
      return result;
  }
  v203 = v8;
  v229 = a1;
  v66 = a1[2];
  v67 = a2[2];
  if (v66 == 1)
  {
    if (v67 == 1)
      goto LABEL_6;
LABEL_11:
    sub_224DFAE98(v67);
    sub_224DE60AC(v66);
    sub_224DE60AC(v67);
    return 0;
  }
  if (v67 == 1)
  {
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  if (v66)
  {
    if (!v67)
    {
      sub_224DFAE98(v66);
      swift_bridgeObjectRelease();
      return 0;
    }
    sub_224DFAE98(v66);
    sub_224DFAE98(v66);
    sub_224DFAE98(v67);
    v74 = swift_bridgeObjectRetain();
    LODWORD(v202) = sub_224DD9ED8(v74, v67);
    swift_bridgeObjectRelease();
    sub_224DE60AC(v67);
    swift_bridgeObjectRelease();
    sub_224DE60AC(v66);
    if ((v202 & 1) == 0)
      return 0;
  }
  else if (v67)
  {
    return 0;
  }
LABEL_6:
  v202 = (uint64_t)v58;
  v68 = type metadata accessor for ModelsDSTU2.Condition(0);
  sub_224DDB4B4((uint64_t)v229 + *(int *)(v68 + 24), (uint64_t)v63, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v200 = (int *)v68;
  v69 = *(int *)(v68 + 24);
  v201 = a2;
  sub_224DDB4B4((uint64_t)a2 + v69, (uint64_t)v61, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v70 = (uint64_t)&v54[*(int *)(v52 + 48)];
  sub_224DDB4B4((uint64_t)v63, (uint64_t)v54, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_224DDB4B4((uint64_t)v61, v70, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  if (v71((uint64_t)v54, 1, v48) == 1)
  {
    sub_224DDB50C((uint64_t)v61, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_224DDB50C((uint64_t)v63, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    v72 = v71(v70, 1, v48);
    v73 = (uint64_t)v232;
    if (v72 == 1)
    {
      sub_224DDB50C((uint64_t)v54, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
      goto LABEL_22;
    }
LABEL_18:
    sub_224DDEA64((uint64_t)v54, &qword_2557E0328, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    return 0;
  }
  v75 = (_QWORD *)v202;
  sub_224DDB4B4((uint64_t)v54, v202, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v76 = v71(v70, 1, v48);
  v73 = (uint64_t)v232;
  if (v76 == 1)
  {
    sub_224DDB50C((uint64_t)v61, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_224DDB50C((uint64_t)v63, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_224DDEAA0((uint64_t)v75, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
    goto LABEL_18;
  }
  v77 = v225;
  sub_224DDEADC(v70, (uint64_t)v225, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  v78 = static Reference.== infix(_:_:)(v75, v77);
  sub_224DDEAA0((uint64_t)v77, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224DDB50C((uint64_t)v61, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_224DDB50C((uint64_t)v63, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_224DDEAA0((uint64_t)v75, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224DDB50C((uint64_t)v54, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (!v78)
    return 0;
LABEL_22:
  v79 = v200;
  v80 = v229;
  sub_224DDB4B4((uint64_t)v229 + v200[7], v73, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v81 = v201;
  v82 = v231;
  sub_224DDB4B4((uint64_t)v201 + v79[7], v231, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v83 = v227;
  v84 = v227 + *(int *)(v228 + 48);
  sub_224DDB4B4(v73, v227, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB4B4(v82, v84, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v226 + 48);
  v86 = v230;
  if (v85(v83, 1, v230) == 1)
  {
    v232 = v85;
    sub_224DDB50C(v82, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224DDB50C(v73, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v232(v84, 1, v86) != 1)
      goto LABEL_28;
    sub_224DDB50C(v83, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  }
  else
  {
    v87 = v224;
    sub_224DDB4B4(v83, v224, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v85(v84, 1, v86) == 1)
    {
      v88 = v231;
LABEL_27:
      sub_224DDB50C(v88, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDB50C(v73, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEAA0(v87, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      goto LABEL_28;
    }
    v232 = v85;
    v92 = v87;
    v93 = v223;
    sub_224DDEADC(v84, v223, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    v94 = static FHIRDateTime.== infix(_:_:)(v92, v93);
    sub_224DDEAA0(v93, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    sub_224DDB50C(v231, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224DDB50C(v73, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224DDEAA0(v92, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    sub_224DDB50C(v83, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if ((v94 & 1) == 0)
      return 0;
  }
  v95 = v79[8];
  v96 = *(_QWORD *)((char *)v80 + v95 + 16);
  v235 = *(_OWORD *)((char *)v80 + v95);
  v236 = v96;
  v97 = (__int128 *)((char *)v81 + v95);
  v98 = *((_QWORD *)v97 + 2);
  v233 = *v97;
  v234 = v98;
  if ((static CodeableConcept.== infix(_:_:)(&v235, &v233) & 1) == 0)
    return 0;
  v99 = v79[9];
  v101 = *(_QWORD *)((char *)v80 + v99);
  v100 = *(_QWORD *)((char *)v80 + v99 + 8);
  v102 = *(_QWORD *)((char *)v80 + v99 + 16);
  v103 = (_QWORD *)((char *)v81 + v99);
  v105 = *v103;
  v104 = v103[1];
  v106 = v103[2];
  if (v100 == 1)
  {
    if (v104 != 1)
      goto LABEL_38;
  }
  else
  {
    *(_QWORD *)&v235 = v101;
    *((_QWORD *)&v235 + 1) = v100;
    v236 = v102;
    if (v104 == 1)
      goto LABEL_37;
    *(_QWORD *)&v233 = v105;
    *((_QWORD *)&v233 + 1) = v104;
    v234 = v106;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v107 = static CodeableConcept.== infix(_:_:)(&v235, &v233);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_224DDB480(v101, v100);
    if ((v107 & 1) == 0)
      return 0;
  }
  v108 = v79[10];
  v109 = (_QWORD *)((char *)v80 + v108);
  v110 = *(_QWORD *)((char *)v80 + v108 + 8);
  v111 = v201;
  v112 = (_QWORD *)((char *)v201 + v108);
  v113 = v112[1];
  if (v110)
  {
    if (!v113)
      return 0;
    if (*v109 != *v112 || v110 != v113)
    {
      v114 = sub_224F683CC();
      result = 0;
      if ((v114 & 1) == 0)
        return result;
    }
  }
  else if (v113)
  {
    return 0;
  }
  v115 = v79[11];
  v116 = *(_QWORD *)((char *)v80 + v115);
  v117 = *(_QWORD *)((char *)v80 + v115 + 8);
  v118 = (_QWORD *)((char *)v111 + v115);
  if (v116 != *v118 || v117 != v118[1])
  {
    v119 = sub_224F683CC();
    result = 0;
    if ((v119 & 1) == 0)
      return result;
  }
  v120 = v79[12];
  v101 = *(_QWORD *)((char *)v80 + v120);
  v100 = *(_QWORD *)((char *)v80 + v120 + 8);
  v121 = *(_QWORD *)((char *)v80 + v120 + 16);
  v122 = (_QWORD *)((char *)v111 + v120);
  v105 = *v122;
  v104 = v122[1];
  v123 = v122[2];
  if (v100 == 1)
  {
    v73 = (uint64_t)v222;
    if (v104 == 1)
      goto LABEL_57;
LABEL_38:
    sub_224DDB44C(v105, v104);
    sub_224DDB480(v101, v100);
    sub_224DDB480(v105, v104);
    return 0;
  }
  *(_QWORD *)&v235 = v101;
  *((_QWORD *)&v235 + 1) = v100;
  v236 = v121;
  v73 = (uint64_t)v222;
  if (v104 == 1)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_38;
  }
  *(_QWORD *)&v233 = v105;
  *((_QWORD *)&v233 + 1) = v104;
  v234 = v123;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v124 = static CodeableConcept.== infix(_:_:)(&v235, &v233);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_224DDB480(v101, v100);
  if ((v124 & 1) == 0)
    return 0;
LABEL_57:
  v125 = v79[13];
  v126 = v201;
  v127 = *(_QWORD *)((char *)v201 + v125);
  if (*(_QWORD *)((char *)v80 + v125))
  {
    v128 = v230;
    v83 = (uint64_t)v221;
    if (!v127)
      return 0;
    swift_bridgeObjectRetain();
    v129 = swift_bridgeObjectRetain();
    v130 = sub_224DD761C(v129, v127);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v130 & 1) == 0)
      return 0;
  }
  else
  {
    v128 = v230;
    v83 = (uint64_t)v221;
    if (v127)
      return 0;
  }
  sub_224DDB4B4((uint64_t)v80 + v79[14], v73, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v131 = v126;
  v132 = (uint64_t)v126 + v79[14];
  v133 = v220;
  sub_224DDB4B4(v132, v220, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v134 = v83 + *(int *)(v228 + 48);
  sub_224DDB4B4(v73, v83, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB4B4(v133, v134, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v135 = v232;
  v136 = v232(v83, 1, v128);
  v232 = v135;
  if (v136 == 1)
  {
    sub_224DDB50C(v133, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224DDB50C(v73, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v232(v134, 1, v128) == 1)
    {
      sub_224DDB50C(v83, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      goto LABEL_68;
    }
LABEL_28:
    v89 = (unint64_t *)&qword_2557E02D8;
    v90 = &qword_2557E02D0;
    v91 = type metadata accessor for FHIRDateTime;
LABEL_29:
    sub_224DDEA64(v83, v89, v90, (uint64_t (*)(uint64_t))v91);
    return 0;
  }
  v87 = v216;
  sub_224DDB4B4(v83, v216, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v135(v134, 1, v128) == 1)
  {
    v88 = v220;
    goto LABEL_27;
  }
  v137 = v87;
  v138 = v223;
  sub_224DDEADC(v134, v223, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v139 = static FHIRDateTime.== infix(_:_:)(v137, v138);
  sub_224DDEAA0(v138, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  sub_224DDB50C(v220, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB50C(v73, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDEAA0(v137, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  sub_224DDB50C(v83, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if ((v139 & 1) == 0)
    return 0;
LABEL_68:
  v140 = v219;
  sub_224DDB4B4((uint64_t)v80 + v79[15], v219, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v141 = v218;
  sub_224DDB4B4((uint64_t)v131 + v79[15], v218, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v83 = v217;
  v142 = v217 + *(int *)(v214 + 48);
  sub_224DDB4B4(v140, v217, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_224DDB4B4(v141, v142, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v143 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v212 + 48);
  v144 = v215;
  if (v143(v83, 1, v215) == 1)
  {
    sub_224DDB50C(v218, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDB50C(v219, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    if (v143(v142, 1, v144) == 1)
    {
      sub_224DDB50C(v83, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      goto LABEL_75;
    }
    goto LABEL_73;
  }
  sub_224DDB4B4(v83, v213, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (v143(v142, 1, v144) == 1)
  {
    sub_224DDB50C(v218, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDB50C(v219, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDEAA0(v213, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    v83 = v217;
LABEL_73:
    v89 = &qword_2557E1440;
    v90 = &qword_2557E04B8;
    v91 = type metadata accessor for Period;
    goto LABEL_29;
  }
  v145 = v208;
  sub_224DDEADC(v142, v208, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  v146 = v213;
  v147 = static Period.== infix(_:_:)(v213, v145);
  sub_224DDEAA0(v145, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  sub_224DDB50C(v218, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_224DDB50C(v219, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_224DDEAA0(v146, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  sub_224DDB50C(v217, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((v147 & 1) == 0)
    return 0;
LABEL_75:
  v148 = v200[16];
  v149 = (_QWORD *)((char *)v229 + v148);
  v150 = *(_QWORD *)((char *)v229 + v148 + 8);
  v151 = (_QWORD *)((char *)v201 + v148);
  v152 = v151[1];
  if (v150)
  {
    if (!v152)
      return 0;
    v153 = v201;
    v154 = v229;
    v155 = v200;
    if (*v149 != *v151 || v150 != v152)
    {
      v156 = sub_224F683CC();
      result = 0;
      if ((v156 & 1) == 0)
        return result;
    }
  }
  else
  {
    v153 = v201;
    v154 = v229;
    v155 = v200;
    if (v152)
      return 0;
  }
  v157 = v210;
  sub_224DDB4B4((uint64_t)v154 + v155[17], v210, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v158 = v209;
  sub_224DDB4B4((uint64_t)v153 + v155[17], v209, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v159 = v211;
  v160 = v211 + *(int *)(v228 + 48);
  sub_224DDB4B4(v157, v211, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB4B4(v158, v160, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v232(v159, 1, v230) == 1)
  {
    sub_224DDB50C(v209, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224DDB50C(v210, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v232(v160, 1, v230) == 1)
    {
      sub_224DDB50C(v211, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      goto LABEL_89;
    }
LABEL_87:
    v161 = (unint64_t *)&qword_2557E02D8;
    v162 = &qword_2557E02D0;
    v163 = type metadata accessor for FHIRDateTime;
    v164 = &v237;
LABEL_95:
    sub_224DDEA64(*(v164 - 32), v161, v162, (uint64_t (*)(uint64_t))v163);
    return 0;
  }
  sub_224DDB4B4(v211, v207, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v232(v160, 1, v230) == 1)
  {
    sub_224DDB50C(v209, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224DDB50C(v210, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224DDEAA0(v207, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    goto LABEL_87;
  }
  v165 = v223;
  sub_224DDEADC(v160, v223, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v166 = v207;
  v167 = static FHIRDateTime.== infix(_:_:)(v207, v165);
  sub_224DDEAA0(v165, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  sub_224DDB50C(v209, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB50C(v210, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDEAA0(v166, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  sub_224DDB50C(v211, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if ((v167 & 1) == 0)
    return 0;
LABEL_89:
  v168 = v200;
  v169 = v206;
  sub_224DDB4B4((uint64_t)v229 + v200[18], v206, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v170 = v205;
  sub_224DDB4B4((uint64_t)v201 + v168[18], v205, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v171 = (uint64_t)v203;
  v172 = (uint64_t)&v203[*(int *)(v214 + 48)];
  sub_224DDB4B4(v169, (uint64_t)v203, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_224DDB4B4(v170, v172, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (v143(v171, 1, v215) == 1)
  {
    sub_224DDB50C(v205, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDB50C(v206, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    if (v143(v172, 1, v215) == 1)
    {
      sub_224DDB50C((uint64_t)v203, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      goto LABEL_97;
    }
    goto LABEL_94;
  }
  sub_224DDB4B4((uint64_t)v203, v204, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (v143(v172, 1, v215) == 1)
  {
    sub_224DDB50C(v205, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDB50C(v206, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDEAA0(v204, (uint64_t (*)(_QWORD))type metadata accessor for Period);
LABEL_94:
    v161 = &qword_2557E1440;
    v162 = &qword_2557E04B8;
    v163 = type metadata accessor for Period;
    v164 = &v234;
    goto LABEL_95;
  }
  v173 = v208;
  sub_224DDEADC(v172, v208, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  v174 = v204;
  v175 = static Period.== infix(_:_:)(v204, v173);
  sub_224DDEAA0(v173, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  sub_224DDB50C(v205, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_224DDB50C(v206, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_224DDEAA0(v174, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  sub_224DDB50C((uint64_t)v203, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((v175 & 1) == 0)
    return 0;
LABEL_97:
  v176 = v200[19];
  v177 = (_QWORD *)((char *)v229 + v176);
  v178 = *(_QWORD *)((char *)v229 + v176 + 8);
  v179 = (_QWORD *)((char *)v201 + v176);
  v180 = v179[1];
  if (v178)
  {
    if (!v180)
      return 0;
    v181 = v201;
    v182 = v229;
    v183 = v200;
    if (*v177 != *v179 || v178 != v180)
    {
      v184 = sub_224F683CC();
      result = 0;
      if ((v184 & 1) == 0)
        return result;
    }
  }
  else
  {
    v181 = v201;
    v182 = v229;
    v183 = v200;
    if (v180)
      return 0;
  }
  v185 = v183[20];
  v186 = (_QWORD *)((char *)v182 + v185);
  v187 = *(_QWORD *)((char *)v182 + v185 + 8);
  v188 = (_QWORD *)((char *)v181 + v185);
  v189 = v188[1];
  if (!v187)
  {
    v190 = v201;
    v191 = v229;
    v192 = v200;
    if (!v189)
      goto LABEL_111;
    return 0;
  }
  if (!v189)
    return 0;
  v190 = v201;
  v191 = v229;
  v192 = v200;
  if (*v186 == *v188 && v187 == v189 || (v193 = sub_224F683CC(), result = 0, (v193 & 1) != 0))
  {
LABEL_111:
    v194 = v192[21];
    v195 = (_QWORD *)((char *)v191 + v194);
    v196 = *(_QWORD *)((char *)v191 + v194 + 8);
    v197 = (_QWORD *)((char *)v190 + v194);
    v198 = v197[1];
    if (v196)
    {
      if (v198 && (*v195 == *v197 && v196 == v198 || (sub_224F683CC() & 1) != 0))
        return 1;
    }
    else if (!v198)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL _s23HealthRecordsExtraction11ModelsDSTU2V6BundleV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  _BOOL8 result;
  uint64_t v11;
  char v12;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v6 = a2[2];
  v5 = a2[3];
  v7 = a2[4];
  v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (v9 = sub_224F683CC(), result = 0, (v9 & 1) != 0))
  {
    if (v2)
    {
      if (!v6)
        return 0;
      swift_bridgeObjectRetain();
      v11 = swift_bridgeObjectRetain();
      v12 = sub_224DD96D0(v11, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
        return 0;
    }
    else if (v6)
    {
      return 0;
    }
    if (v4)
      return v7 && (v3 == v5 && v4 == v7 || (sub_224F683CC() & 1) != 0);
    return !v7;
  }
  return result;
}

uint64_t type metadata accessor for ModelsDSTU2.ResourceProxy(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E2238);
}

uint64_t sub_224E8BD18()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_224E8BD4C()
{
  unint64_t result;

  result = qword_2557E1F10;
  if (!qword_2557E1F10)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsDSTU2.Patient, &type metadata for ModelsDSTU2.Patient);
    atomic_store(result, (unint64_t *)&qword_2557E1F10);
  }
  return result;
}

uint64_t sub_224E8BD90()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 120) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t type metadata accessor for ModelsDSTU2.Observation(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E25A8);
}

uint64_t type metadata accessor for ModelsDSTU2.Immunization(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E24E0);
}

uint64_t type metadata accessor for ModelsDSTU2.DiagnosticReport(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E2430);
}

uint64_t type metadata accessor for ModelsDSTU2.Condition(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E2360);
}

unint64_t sub_224E8BE5C()
{
  unint64_t result;

  result = qword_2557E1F38;
  if (!qword_2557E1F38)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsDSTU2.Bundle, &type metadata for ModelsDSTU2.Bundle);
    atomic_store(result, (unint64_t *)&qword_2557E1F38);
  }
  return result;
}

uint64_t sub_224E8BEA0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_224E8BED4()
{
  unint64_t result;

  result = qword_2557E1F48;
  if (!qword_2557E1F48)
  {
    result = MEMORY[0x22768ED24](&unk_224F711AC, &type metadata for ModelsDSTU2.ResourceProxy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1F48);
  }
  return result;
}

unint64_t sub_224E8BF18()
{
  unint64_t result;

  result = qword_2557E1F58;
  if (!qword_2557E1F58)
  {
    result = MEMORY[0x22768ED24](&unk_224F7115C, &type metadata for ModelsDSTU2.Bundle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1F58);
  }
  return result;
}

unint64_t sub_224E8BF5C()
{
  unint64_t result;

  result = qword_2557E1F60;
  if (!qword_2557E1F60)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E1F60);
  }
  return result;
}

uint64_t type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E22C8);
}

unint64_t sub_224E8BFA8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E1F70;
  if (!qword_2557E1F70)
  {
    sub_224DDEA0C(255, &qword_2557E1F68, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E1F78, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Bundle.BundleEntry);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E1F70);
  }
  return result;
}

unint64_t sub_224E8C038()
{
  unint64_t result;

  result = qword_2557E1F88;
  if (!qword_2557E1F88)
  {
    result = MEMORY[0x22768ED24](&unk_224F7110C, &type metadata for ModelsDSTU2.Condition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1F88);
  }
  return result;
}

unint64_t sub_224E8C07C()
{
  unint64_t result;

  result = qword_2557E1FA0;
  if (!qword_2557E1FA0)
  {
    result = MEMORY[0x22768ED24](&unk_224F710BC, &type metadata for ModelsDSTU2.DiagnosticReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1FA0);
  }
  return result;
}

unint64_t sub_224E8C0C0()
{
  unint64_t result;

  result = qword_2557E1FB8;
  if (!qword_2557E1FB8)
  {
    result = MEMORY[0x22768ED24](&unk_224F7106C, &type metadata for ModelsDSTU2.Immunization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1FB8);
  }
  return result;
}

unint64_t sub_224E8C104()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E1FD0;
  if (!qword_2557E1FD0)
  {
    sub_224DFB644(255, &qword_2557E1FC8);
    v2 = v1;
    v3 = sub_224E8C174();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E1FD0);
  }
  return result;
}

unint64_t sub_224E8C174()
{
  unint64_t result;

  result = qword_2557E1FD8;
  if (!qword_2557E1FD8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsDSTU2.ImmunizationVaccinationProtocol, &type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol);
    atomic_store(result, (unint64_t *)&qword_2557E1FD8);
  }
  return result;
}

unint64_t sub_224E8C1B8()
{
  unint64_t result;

  result = qword_2557E1FE8;
  if (!qword_2557E1FE8)
  {
    result = MEMORY[0x22768ED24](&unk_224F7101C, &type metadata for ModelsDSTU2.Observation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1FE8);
  }
  return result;
}

unint64_t sub_224E8C1FC()
{
  unint64_t result;

  result = qword_2557E2000;
  if (!qword_2557E2000)
  {
    result = MEMORY[0x22768ED24](&unk_224F70FCC, &type metadata for ModelsDSTU2.Patient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2000);
  }
  return result;
}

unint64_t sub_224E8C240()
{
  unint64_t result;

  result = qword_2557E2008;
  if (!qword_2557E2008)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E2008);
  }
  return result;
}

uint64_t type metadata accessor for ModelsDSTU2.HumanName(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E2670);
}

unint64_t sub_224E8C28C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E2010;
  if (!qword_2557E2010)
  {
    sub_224DDEA0C(255, &qword_2557E1C70, type metadata accessor for ModelsDSTU2.HumanName, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E2018, type metadata accessor for ModelsDSTU2.HumanName, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.HumanName);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E2010);
  }
  return result;
}

uint64_t sub_224E8C31C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_224DDB44C(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_224E8C3DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_224DDB480(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void _s23HealthRecordsExtraction11ModelsDSTU2V13ResourceProxyO2eeoiySbAE_AEtFZ_0(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD v25[7];
  uint64_t v26;
  char *v27;

  v26 = a1;
  v27 = a2;
  v2 = type metadata accessor for ModelsDSTU2.Observation(0);
  MEMORY[0x24BDAC7A8](v2);
  v25[4] = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ModelsDSTU2.Immunization(0);
  MEMORY[0x24BDAC7A8](v4);
  v25[3] = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
  MEMORY[0x24BDAC7A8](v6);
  v25[2] = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ModelsDSTU2.Condition(0);
  MEMORY[0x24BDAC7A8](v8);
  v25[1] = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v25[6] = (char *)v25 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v25[5] = (char *)v25 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v18 = MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v18);
  sub_224ECC7CC();
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v25 + *(int *)(v20 + 48) - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDB408(v26, (uint64_t)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ModelsDSTU2.ResourceProxy);
  v23 = (uint64_t)v27;
  v27 = v22;
  sub_224DDB408(v23, (uint64_t)v22, type metadata accessor for ModelsDSTU2.ResourceProxy);
  v24 = (char *)sub_224E8C720 + 4 * byte_224F6F8D1[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_224E8C720()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  sub_224DDB408(v2, (uint64_t)v1, type metadata accessor for ModelsDSTU2.ResourceProxy);
  v5 = v1[1];
  v4 = v1[2];
  v6 = v1[4];
  v7 = *(uint64_t **)(v0 + 64);
  if (swift_getEnumCaseMultiPayload())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_224DDEAA0(v2, (uint64_t (*)(_QWORD))sub_224ECC7CC);
    return 0;
  }
  else
  {
    v9 = v1[3];
    v10 = *v1;
    v11 = *v7;
    v12 = v7[1];
    v13 = v7[4];
    *(_QWORD *)(v3 - 240) = v10;
    *(_QWORD *)(v3 - 232) = v5;
    *(_QWORD *)(v3 - 224) = v4;
    *(_QWORD *)(v3 - 216) = v9;
    *(_QWORD *)(v3 - 208) = v6;
    *(_QWORD *)(v0 + 368) = v11;
    *(_QWORD *)(v0 + 376) = v12;
    v14 = *((_OWORD *)v7 + 1);
    *(_OWORD *)(v0 + 64) = v14;
    *(_OWORD *)(v0 + 384) = v14;
    *(_QWORD *)(v0 + 400) = v13;
    v8 = _s23HealthRecordsExtraction11ModelsDSTU2V6BundleV2eeoiySbAE_AEtFZ_0((_QWORD *)(v3 - 240), (_QWORD *)(v0 + 368));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_224DDEAA0(v2, type metadata accessor for ModelsDSTU2.ResourceProxy);
  }
  return v8;
}

uint64_t _s23HealthRecordsExtraction11ModelsDSTU2V12ImmunizationV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char v50;
  uint64_t v51;
  _QWORD *v52;
  int *v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  char v57;
  int *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char *v62;
  char v63;
  char *v64;
  char v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  BOOL v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  char v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  BOOL v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;

  v123 = type metadata accessor for Reference();
  v121 = *(_QWORD *)(v123 - 8);
  MEMORY[0x24BDAC7A8](v123);
  v116 = (uint64_t *)((char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_224DDE904(0, &qword_2557E0328, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v122 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v119 = (uint64_t)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v126 = (uint64_t)&v111 - v8;
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v115 = (uint64_t *)((char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x24BDAC7A8](v11);
  v117 = (uint64_t)&v111 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v118 = (uint64_t)&v111 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v120 = (uint64_t *)((char *)&v111 - v18);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v124 = (uint64_t)&v111 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v125 = (uint64_t)&v111 - v21;
  v22 = type metadata accessor for FHIRDateTime();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v111 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v27 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v111 - v28;
  v30 = a1;
  v31 = a2;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v9);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)&v111 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x24BDAC7A8](v33);
  v38 = (char *)&v111 - v37;
  MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)&v111 - v39;
  if (*v30 == *v31 && v30[1] == v31[1] || (v41 = sub_224F683CC(), result = 0, (v41 & 1) != 0))
  {
    v43 = v30[3];
    v44 = v31[3];
    if (v43)
    {
      if (!v44)
        return 0;
      if (v30[2] != v31[2] || v43 != v44)
      {
        v45 = sub_224F683CC();
        result = 0;
        if ((v45 & 1) == 0)
          return result;
      }
    }
    else if (v44)
    {
      return 0;
    }
    v113 = v30;
    v114 = v31;
    v46 = v30[4];
    v47 = v31[4];
    if (v46 == 1)
    {
      if (v47 == 1)
        goto LABEL_13;
    }
    else
    {
      if (v47 != 1)
      {
        if (v46)
        {
          if (!v47)
          {
            sub_224DFAE98(v46);
            swift_bridgeObjectRelease();
            return 0;
          }
          sub_224DFAE98(v46);
          sub_224DFAE98(v46);
          sub_224DFAE98(v47);
          v56 = swift_bridgeObjectRetain();
          LODWORD(v112) = sub_224DD9ED8(v56, v47);
          swift_bridgeObjectRelease();
          sub_224DE60AC(v47);
          swift_bridgeObjectRelease();
          sub_224DE60AC(v46);
          if ((v112 & 1) == 0)
            return 0;
        }
        else if (v47)
        {
          return 0;
        }
LABEL_13:
        v49 = v113;
        v48 = v114;
        if (v113[5] != v114[5] || v113[6] != v114[6])
        {
          v50 = sub_224F683CC();
          result = 0;
          if ((v50 & 1) == 0)
            return result;
        }
        v51 = type metadata accessor for ModelsDSTU2.Immunization(0);
        v52 = v49;
        v53 = (int *)v51;
        sub_224DDB4B4((uint64_t)v52 + *(int *)(v51 + 32), (uint64_t)v40, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v112 = v53;
        sub_224DDB4B4((uint64_t)v48 + v53[8], (uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v54 = (uint64_t)&v29[*(int *)(v27 + 48)];
        sub_224DDB4B4((uint64_t)v40, (uint64_t)v29, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        sub_224DDB4B4((uint64_t)v38, v54, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
        if (v55((uint64_t)v29, 1, v22) == 1)
        {
          sub_224DDB50C((uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_224DDB50C((uint64_t)v40, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v55(v54, 1, v22) == 1)
          {
            sub_224DDB50C((uint64_t)v29, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
LABEL_32:
            v58 = v112;
            v59 = v112[9];
            v61 = v113;
            v60 = v114;
            v62 = (char *)v113 + v59;
            v63 = *((_BYTE *)v113 + v59 + 12);
            v64 = (char *)v114 + v59;
            v65 = v64[12];
            if ((v63 & 1) != 0)
            {
              if ((v64[12] & 1) == 0)
                return 0;
            }
            else
            {
              v66 = *(_QWORD *)v64;
              v67 = *((_DWORD *)v64 + 2);
              v68 = *((_DWORD *)v62 + 2);
              *(_QWORD *)&v129 = *(_QWORD *)v62;
              DWORD2(v129) = v68;
              BYTE12(v129) = 0;
              if ((v65 & 1) != 0)
                return 0;
              *(_QWORD *)&v127 = v66;
              WORD4(v127) = v67 & 0x1FF;
              BYTE10(v127) = BYTE2(v67);
              BYTE11(v127) = HIBYTE(v67) & 1;
              if ((_s23HealthRecordsExtraction8FHIRDateV2eeoiySbAC_ACtFZ_0((uint64_t)&v129, (uint64_t)&v127) & 1) == 0)
                return 0;
            }
            v69 = v58[10];
            v70 = *(_QWORD *)((char *)v60 + v69);
            if (*(_QWORD *)((char *)v61 + v69))
            {
              if (!v70)
                return 0;
              swift_bridgeObjectRetain();
              v71 = swift_bridgeObjectRetain();
              v72 = sub_224DD84E8(v71, v70);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v72 & 1) == 0)
                return 0;
LABEL_43:
              v73 = v114;
              if (*((unsigned __int8 *)v61 + v58[11]) != *((unsigned __int8 *)v114 + v58[11]))
                return 0;
              v74 = v58[12];
              v75 = *(_QWORD *)((char *)v61 + v74);
              v76 = *(_QWORD *)((char *)v114 + v74);
              if (v75)
              {
                if (!v76 || (sub_224DD9E5C(v75, v76) & 1) == 0)
                  return 0;
              }
              else if (v76)
              {
                return 0;
              }
              v77 = v58[13];
              v78 = *(_QWORD *)((char *)v61 + v77 + 16);
              v129 = *(_OWORD *)((char *)v61 + v77);
              v130 = v78;
              v79 = (__int128 *)((char *)v73 + v77);
              v80 = *((_QWORD *)v79 + 2);
              v127 = *v79;
              v128 = v80;
              if ((static CodeableConcept.== infix(_:_:)(&v129, &v127) & 1) == 0
                || *((unsigned __int8 *)v61 + v58[14]) != *((unsigned __int8 *)v73 + v58[14]))
              {
                return 0;
              }
              v81 = v125;
              sub_224DDB4B4((uint64_t)v61 + v58[15], v125, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
              v82 = v124;
              sub_224DDB4B4((uint64_t)v73 + v58[15], v124, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
              v83 = v126;
              v84 = v126 + *(int *)(v122 + 48);
              sub_224DDB4B4(v81, v126, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
              sub_224DDB4B4(v82, v84, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
              v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48);
              v86 = v123;
              if (v85(v83, 1, v123) == 1)
              {
                sub_224DDB50C(v124, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                sub_224DDB50C(v125, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                if (v85(v84, 1, v86) == 1)
                {
                  sub_224DDB50C(v126, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  goto LABEL_60;
                }
              }
              else
              {
                v87 = v120;
                sub_224DDB4B4(v126, (uint64_t)v120, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                if (v85(v84, 1, v86) != 1)
                {
                  v88 = v116;
                  sub_224DDEADC(v84, (uint64_t)v116, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                  v89 = _s23HealthRecordsExtraction9ReferenceV2eeoiySbAC_ACtFZ_0(v87, v88);
                  sub_224DDEAA0((uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                  sub_224DDB50C(v124, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  sub_224DDB50C(v125, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  sub_224DDEAA0((uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                  sub_224DDB50C(v126, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  if (!v89)
                    return 0;
LABEL_60:
                  v90 = v112[16];
                  v91 = (_QWORD *)((char *)v113 + v90);
                  v92 = *(_QWORD *)((char *)v113 + v90 + 8);
                  v93 = (_QWORD *)((char *)v114 + v90);
                  v94 = v93[1];
                  if (v92)
                  {
                    if (!v94)
                      return 0;
                    v96 = v113;
                    v95 = v114;
                    if (*v91 != *v93 || v92 != v94)
                    {
                      v97 = sub_224F683CC();
                      result = 0;
                      if ((v97 & 1) == 0)
                        return result;
                    }
                  }
                  else
                  {
                    v96 = v113;
                    v95 = v114;
                    if (v94)
                      return 0;
                  }
                  v98 = v112;
                  v99 = v118;
                  sub_224DDB4B4((uint64_t)v96 + v112[17], v118, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  v100 = v117;
                  sub_224DDB4B4((uint64_t)v95 + v98[17], v117, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  v101 = v119;
                  v102 = v119 + *(int *)(v122 + 48);
                  sub_224DDB4B4(v99, v119, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  sub_224DDB4B4(v100, v102, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  if (v85(v101, 1, v123) == 1)
                  {
                    sub_224DDB50C(v117, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    sub_224DDB50C(v118, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    if (v85(v102, 1, v123) == 1)
                    {
                      sub_224DDB50C(v119, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                      goto LABEL_74;
                    }
                  }
                  else
                  {
                    sub_224DDB4B4(v119, (uint64_t)v115, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    if (v85(v102, 1, v123) != 1)
                    {
                      v103 = v116;
                      sub_224DDEADC(v102, (uint64_t)v116, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                      v104 = v115;
                      v105 = _s23HealthRecordsExtraction9ReferenceV2eeoiySbAC_ACtFZ_0(v115, v103);
                      sub_224DDEAA0((uint64_t)v103, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                      sub_224DDB50C(v117, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                      sub_224DDB50C(v118, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                      sub_224DDEAA0((uint64_t)v104, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                      sub_224DDB50C(v119, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                      if (!v105)
                        return 0;
LABEL_74:
                      v106 = v112[18];
                      v107 = (_QWORD *)((char *)v113 + v106);
                      v108 = *(_QWORD *)((char *)v113 + v106 + 8);
                      v109 = (_QWORD *)((char *)v114 + v106);
                      v110 = v109[1];
                      if (v108)
                      {
                        if (!v110 || (*v107 != *v109 || v108 != v110) && (sub_224F683CC() & 1) == 0)
                          return 0;
                      }
                      else if (v110)
                      {
                        return 0;
                      }
                      return 1;
                    }
                    sub_224DDB50C(v117, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    sub_224DDB50C(v118, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    sub_224DDEAA0((uint64_t)v115, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                  }
                  sub_224DDEA64(v119, &qword_2557E0328, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  return 0;
                }
                sub_224DDB50C(v124, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                sub_224DDB50C(v125, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                sub_224DDEAA0((uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
              }
              sub_224DDEA64(v126, &qword_2557E0328, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
              return 0;
            }
            if (!v70)
              goto LABEL_43;
            return 0;
          }
        }
        else
        {
          sub_224DDB4B4((uint64_t)v29, (uint64_t)v35, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v55(v54, 1, v22) != 1)
          {
            sub_224DDEADC(v54, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            v57 = static FHIRDateTime.== infix(_:_:)(v35, v25);
            sub_224DDEAA0((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            sub_224DDB50C((uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224DDB50C((uint64_t)v40, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224DDEAA0((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            sub_224DDB50C((uint64_t)v29, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            if ((v57 & 1) == 0)
              return 0;
            goto LABEL_32;
          }
          sub_224DDB50C((uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_224DDB50C((uint64_t)v40, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_224DDEAA0((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        }
        sub_224DDEA64((uint64_t)v29, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        return 0;
      }
      swift_bridgeObjectRetain();
    }
    sub_224DFAE98(v47);
    sub_224DE60AC(v46);
    sub_224DE60AC(v47);
    return 0;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction11ModelsDSTU2V11ObservationV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  char v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int *v72;
  uint64_t v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  int *v79;
  _BYTE *v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int (*v85)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v86)(uint64_t, uint64_t, uint64_t);
  _BYTE *v87;
  unsigned int v88;
  _BYTE *v89;
  BOOL v90;
  int *v91;
  uint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  int *v120;
  _BYTE *v121;
  _BYTE *v122;
  _BYTE *v123;
  uint64_t v124;
  unsigned int (*v125)(uint64_t, uint64_t, uint64_t);
  _BYTE *v126;
  _BYTE *v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _BYTE v138[12];
  int v139;
  int *v140;
  uint64_t v141;
  _BYTE *v142;
  _BYTE *v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  _BYTE *v148;
  _BYTE *v149;
  uint64_t v150;
  _BYTE *v151;
  _BYTE *v152;
  _BYTE *v153;
  _BYTE *v154;
  _BYTE *v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  _BYTE *v159;
  _BYTE *v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;

  v150 = type metadata accessor for Quantity();
  v146 = *(_QWORD *)(v150 - 8);
  MEMORY[0x24BDAC7A8](v150);
  v144 = &v138[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_224DDE904(0, (unint64_t *)&qword_2557E1448, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
  v145 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v151 = &v138[-v6];
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v147 = &v138[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = MEMORY[0x24BDAC7A8](v9);
  v148 = &v138[-v12];
  MEMORY[0x24BDAC7A8](v11);
  v149 = &v138[-v13];
  v14 = type metadata accessor for Period();
  v157 = *(_QWORD *)(v14 - 8);
  v158 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v152 = &v138[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_224DDE904(0, &qword_2557E1440, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v17 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v159 = &v138[-v18];
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v7);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v155 = &v138[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = MEMORY[0x24BDAC7A8](v20);
  v160 = &v138[-v23];
  MEMORY[0x24BDAC7A8](v22);
  v161 = &v138[-v24];
  v163 = type metadata accessor for FHIRDateTime();
  v25 = *(_QWORD *)(v163 - 8);
  MEMORY[0x24BDAC7A8](v163);
  v156 = &v138[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_224DDE904(0, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v162 = v27;
  v28 = MEMORY[0x24BDAC7A8](v27);
  v154 = &v138[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v28);
  v31 = &v138[-v30];
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v7);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v35 = &v138[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v36 = MEMORY[0x24BDAC7A8](v33);
  v153 = &v138[-v37];
  v38 = MEMORY[0x24BDAC7A8](v36);
  v40 = &v138[-v39];
  v41 = MEMORY[0x24BDAC7A8](v38);
  v43 = &v138[-v42];
  v44 = MEMORY[0x24BDAC7A8](v41);
  v46 = &v138[-v45];
  MEMORY[0x24BDAC7A8](v44);
  v48 = &v138[-v47];
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v49 = sub_224F683CC(), result = 0, (v49 & 1) != 0))
  {
    v51 = *(_QWORD *)(a1 + 24);
    v52 = *(_QWORD *)(a2 + 24);
    if (v51)
    {
      if (!v52)
        return 0;
      if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16) || v51 != v52)
      {
        v53 = sub_224F683CC();
        result = 0;
        if ((v53 & 1) == 0)
          return result;
      }
    }
    else if (v52)
    {
      return 0;
    }
    v143 = v40;
    v142 = v35;
    v54 = *(_QWORD *)(a1 + 32);
    v55 = *(_QWORD *)(a2 + 32);
    if (v54 == 1)
    {
      if (v55 == 1)
        goto LABEL_13;
    }
    else
    {
      if (v55 != 1)
      {
        if (v54)
        {
          v63 = *(_QWORD *)(a1 + 32);
          if (!v55)
          {
            sub_224DFAE98(v63);
            swift_bridgeObjectRelease();
            return 0;
          }
          sub_224DFAE98(v63);
          sub_224DFAE98(v54);
          sub_224DFAE98(v55);
          v64 = swift_bridgeObjectRetain();
          LODWORD(v141) = sub_224DD9ED8(v64, v55);
          swift_bridgeObjectRelease();
          sub_224DE60AC(v55);
          swift_bridgeObjectRelease();
          sub_224DE60AC(v54);
          if ((v141 & 1) == 0)
            return 0;
        }
        else if (v55)
        {
          return 0;
        }
LABEL_13:
        if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40) || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
        {
          v56 = sub_224F683CC();
          result = 0;
          if ((v56 & 1) == 0)
            return result;
        }
        v57 = *(int **)(a1 + 56);
        v58 = *(_QWORD *)(a1 + 64);
        v59 = *(_QWORD *)(a1 + 72);
        v60 = *(_QWORD *)(a2 + 56);
        v61 = *(_QWORD *)(a2 + 64);
        v62 = *(_QWORD *)(a2 + 72);
        v141 = v59;
        v140 = v57;
        if (v58 == 1)
        {
          if (v61 == 1)
            goto LABEL_32;
        }
        else
        {
          *(_QWORD *)&v166 = v57;
          *((_QWORD *)&v166 + 1) = v58;
          v167 = v59;
          if (v61 != 1)
          {
            *(_QWORD *)&v164 = v60;
            *((_QWORD *)&v164 + 1) = v61;
            v165 = v62;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            v139 = static CodeableConcept.== infix(_:_:)(&v166, &v164);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_224DDB480((uint64_t)v140, v58);
            if ((v139 & 1) == 0)
              return 0;
LABEL_32:
            v67 = *(_QWORD *)(a1 + 96);
            v166 = *(_OWORD *)(a1 + 80);
            v167 = v67;
            v68 = *(_QWORD *)(a2 + 96);
            v164 = *(_OWORD *)(a2 + 80);
            v165 = v68;
            if ((static CodeableConcept.== infix(_:_:)(&v166, &v164) & 1) == 0)
              return 0;
            v69 = *(_QWORD *)(a1 + 112);
            v70 = *(_QWORD *)(a2 + 112);
            if (v69)
            {
              if (!v70)
                return 0;
              if (*(_QWORD *)(a1 + 104) != *(_QWORD *)(a2 + 104) || v69 != v70)
              {
                v71 = sub_224F683CC();
                result = 0;
                if ((v71 & 1) == 0)
                  return result;
              }
            }
            else if (v70)
            {
              return 0;
            }
            v72 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
            sub_224DDB4B4(a1 + v72[11], (uint64_t)v48, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v140 = v72;
            sub_224DDB4B4(a2 + v72[11], (uint64_t)v46, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v73 = (uint64_t)&v31[*(int *)(v162 + 48)];
            sub_224DDB4B4((uint64_t)v48, (uint64_t)v31, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v141 = v73;
            sub_224DDB4B4((uint64_t)v46, v73, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
            v75 = v163;
            if (v74((uint64_t)v31, 1, v163) == 1)
            {
              sub_224DDB50C((uint64_t)v46, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDB50C((uint64_t)v48, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v74(v141, 1, v163) == 1)
              {
                sub_224DDB50C((uint64_t)v31, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                goto LABEL_50;
              }
            }
            else
            {
              sub_224DDB4B4((uint64_t)v31, (uint64_t)v43, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              v76 = v141;
              if (v74(v141, 1, v75) != 1)
              {
                v77 = v76;
                v78 = v156;
                sub_224DDEADC(v77, (uint64_t)v156, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                LODWORD(v141) = static FHIRDateTime.== infix(_:_:)(v43, v78);
                sub_224DDEAA0((uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                sub_224DDB50C((uint64_t)v46, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_224DDB50C((uint64_t)v48, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_224DDEAA0((uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                sub_224DDB50C((uint64_t)v31, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                if ((v141 & 1) == 0)
                  return 0;
LABEL_50:
                v141 = (uint64_t)v74;
                v79 = v140;
                v80 = v161;
                sub_224DDB4B4(a1 + v140[12], (uint64_t)v161, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                v81 = v160;
                sub_224DDB4B4(a2 + v79[12], (uint64_t)v160, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                v82 = v159;
                v83 = (uint64_t)&v159[*(int *)(v17 + 48)];
                sub_224DDB4B4((uint64_t)v80, (uint64_t)v159, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                sub_224DDB4B4((uint64_t)v81, v83, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                v84 = v158;
                v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v157 + 48);
                if (v85((uint64_t)v82, 1, v158) == 1)
                {
                  sub_224DDB50C((uint64_t)v81, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_224DDB50C((uint64_t)v80, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  if (v85(v83, 1, v84) == 1)
                  {
                    sub_224DDB50C((uint64_t)v82, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    v86 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v141;
                    goto LABEL_57;
                  }
                }
                else
                {
                  v87 = v155;
                  sub_224DDB4B4((uint64_t)v82, (uint64_t)v155, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  v88 = v85(v83, 1, v84);
                  v86 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v141;
                  if (v88 != 1)
                  {
                    v89 = v152;
                    sub_224DDEADC(v83, (uint64_t)v152, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                    v90 = _s23HealthRecordsExtraction6PeriodV2eeoiySbAC_ACtFZ_0((uint64_t)v87, (uint64_t)v89);
                    sub_224DDEAA0((uint64_t)v89, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                    sub_224DDB50C((uint64_t)v160, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    sub_224DDB50C((uint64_t)v161, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    sub_224DDEAA0((uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                    sub_224DDB50C((uint64_t)v82, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    if (!v90)
                      return 0;
LABEL_57:
                    v91 = v140;
                    v92 = (uint64_t)v143;
                    sub_224DDB4B4(a1 + v140[13], (uint64_t)v143, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    v93 = v153;
                    sub_224DDB4B4(a2 + v91[13], (uint64_t)v153, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    v94 = v154;
                    v95 = (uint64_t)&v154[*(int *)(v162 + 48)];
                    sub_224DDB4B4(v92, (uint64_t)v154, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    sub_224DDB4B4((uint64_t)v93, v95, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    v96 = v163;
                    if (v86((uint64_t)v94, 1, v163) == 1)
                    {
                      sub_224DDB50C((uint64_t)v93, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_224DDB50C(v92, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      if (v86(v95, 1, v96) == 1)
                      {
                        sub_224DDB50C((uint64_t)v94, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        goto LABEL_64;
                      }
                    }
                    else
                    {
                      v97 = (uint64_t)v142;
                      sub_224DDB4B4((uint64_t)v94, (uint64_t)v142, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      if (v86(v95, 1, v96) != 1)
                      {
                        v98 = v97;
                        v99 = v156;
                        sub_224DDEADC(v95, (uint64_t)v156, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                        v100 = static FHIRDateTime.== infix(_:_:)(v98, v99);
                        sub_224DDEAA0((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                        sub_224DDB50C((uint64_t)v93, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        sub_224DDB50C((uint64_t)v143, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        sub_224DDEAA0(v98, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                        sub_224DDB50C((uint64_t)v94, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        if ((v100 & 1) == 0)
                          return 0;
LABEL_64:
                        v101 = v91[14];
                        v102 = *(_QWORD *)(a2 + v101);
                        if (*(_QWORD *)(a1 + v101))
                        {
                          if (!v102)
                            return 0;
                          swift_bridgeObjectRetain();
                          v103 = swift_bridgeObjectRetain();
                          v104 = sub_224DD7200(v103, v102);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if ((v104 & 1) == 0)
                            return 0;
                        }
                        else if (v102)
                        {
                          return 0;
                        }
                        v105 = v91[15];
                        v106 = (_QWORD *)(a1 + v105);
                        v107 = *(_QWORD *)(a1 + v105 + 8);
                        v108 = (_QWORD *)(a2 + v105);
                        v109 = v108[1];
                        if (v107)
                        {
                          if (!v109)
                            return 0;
                          if (*v106 != *v108 || v107 != v109)
                          {
                            v110 = sub_224F683CC();
                            result = 0;
                            if ((v110 & 1) == 0)
                              return result;
                          }
                        }
                        else if (v109)
                        {
                          return 0;
                        }
                        v111 = v140[16];
                        v113 = *(_QWORD *)(a1 + v111);
                        v112 = *(_QWORD *)(a1 + v111 + 8);
                        v114 = *(_QWORD *)(a1 + v111 + 16);
                        v115 = (uint64_t *)(a2 + v111);
                        v117 = *v115;
                        v116 = v115[1];
                        v118 = v115[2];
                        if (v112 == 1)
                        {
                          if (v116 == 1)
                            goto LABEL_83;
                        }
                        else
                        {
                          *(_QWORD *)&v166 = v113;
                          *((_QWORD *)&v166 + 1) = v112;
                          v167 = v114;
                          if (v116 != 1)
                          {
                            *(_QWORD *)&v164 = v117;
                            *((_QWORD *)&v164 + 1) = v116;
                            v165 = v118;
                            swift_bridgeObjectRetain_n();
                            swift_bridgeObjectRetain_n();
                            v119 = static CodeableConcept.== infix(_:_:)(&v166, &v164);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            sub_224DDB480(v113, v112);
                            if ((v119 & 1) == 0)
                              return 0;
LABEL_83:
                            v120 = v140;
                            v121 = v149;
                            sub_224DDB4B4(a1 + v140[17], (uint64_t)v149, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            v122 = v148;
                            sub_224DDB4B4(a2 + v120[17], (uint64_t)v148, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            v123 = v151;
                            v124 = (uint64_t)&v151[*(int *)(v145 + 48)];
                            sub_224DDB4B4((uint64_t)v121, (uint64_t)v151, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            sub_224DDB4B4((uint64_t)v122, v124, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            v125 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48);
                            if (v125((uint64_t)v123, 1, v150) == 1)
                            {
                              sub_224DDB50C((uint64_t)v148, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              sub_224DDB50C((uint64_t)v149, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              if (v125(v124, 1, v150) == 1)
                              {
                                sub_224DDB50C((uint64_t)v151, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
LABEL_90:
                                v129 = v140[18];
                                v130 = *(_QWORD *)(a2 + v129);
                                if (*(_QWORD *)(a1 + v129))
                                {
                                  if (!v130)
                                    return 0;
                                  swift_bridgeObjectRetain();
                                  v131 = swift_bridgeObjectRetain();
                                  v132 = sub_224DD9044(v131, v130);
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  if ((v132 & 1) == 0)
                                    return 0;
                                }
                                else if (v130)
                                {
                                  return 0;
                                }
                                v133 = v140[19];
                                v134 = (_QWORD *)(a1 + v133);
                                v135 = *(_QWORD *)(a1 + v133 + 8);
                                v136 = (_QWORD *)(a2 + v133);
                                v137 = v136[1];
                                if (v135)
                                {
                                  if (v137 && (*v134 == *v136 && v135 == v137 || (sub_224F683CC() & 1) != 0))
                                    return 1;
                                }
                                else if (!v137)
                                {
                                  return 1;
                                }
                                return 0;
                              }
                            }
                            else
                            {
                              sub_224DDB4B4((uint64_t)v151, (uint64_t)v147, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              if (v125(v124, 1, v150) != 1)
                              {
                                v126 = v144;
                                sub_224DDEADC(v124, (uint64_t)v144, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
                                v127 = v147;
                                v128 = _s23HealthRecordsExtraction8QuantityV2eeoiySbAC_ACtFZ_0((uint64_t)v147, (uint64_t)v126);
                                sub_224DDEAA0((uint64_t)v126, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
                                sub_224DDB50C((uint64_t)v148, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                                sub_224DDB50C((uint64_t)v149, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                                sub_224DDEAA0((uint64_t)v127, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
                                sub_224DDB50C((uint64_t)v151, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                                if (!v128)
                                  return 0;
                                goto LABEL_90;
                              }
                              sub_224DDB50C((uint64_t)v148, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              sub_224DDB50C((uint64_t)v149, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              sub_224DDEAA0((uint64_t)v147, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
                            }
                            sub_224DDEA64((uint64_t)v151, (unint64_t *)&qword_2557E1448, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            return 0;
                          }
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                        }
                        sub_224DDB44C(v117, v116);
                        sub_224DDB480(v113, v112);
                        sub_224DDB480(v117, v116);
                        return 0;
                      }
                      sub_224DDB50C((uint64_t)v93, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_224DDB50C((uint64_t)v143, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_224DDEAA0(v97, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                    }
                    sub_224DDEA64((uint64_t)v94, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    return 0;
                  }
                  sub_224DDB50C((uint64_t)v160, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_224DDB50C((uint64_t)v161, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_224DDEAA0((uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                }
                sub_224DDEA64((uint64_t)v82, &qword_2557E1440, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                return 0;
              }
              sub_224DDB50C((uint64_t)v46, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDB50C((uint64_t)v48, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDEAA0((uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            }
            sub_224DDEA64((uint64_t)v31, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            return 0;
          }
          v65 = v60;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v60 = v65;
        }
        v66 = v60;
        sub_224DDB44C(v60, v61);
        sub_224DDB480((uint64_t)v140, v58);
        sub_224DDB480(v66, v61);
        return 0;
      }
      swift_bridgeObjectRetain();
    }
    sub_224DFAE98(v55);
    sub_224DE60AC(v54);
    sub_224DE60AC(v55);
    return 0;
  }
  return result;
}

unint64_t sub_224E8EAB4()
{
  unint64_t result;

  result = qword_2557E2028;
  if (!qword_2557E2028)
  {
    result = MEMORY[0x22768ED24](&unk_224F70F7C, &type metadata for ModelsDSTU2.Bundle.BundleEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2028);
  }
  return result;
}

unint64_t sub_224E8EAF8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E2050;
  if (!qword_2557E2050)
  {
    sub_224DDEA0C(255, &qword_2557E1F68, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E2058, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Bundle.BundleEntry);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E2050);
  }
  return result;
}

unint64_t sub_224E8EB88()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E2078;
  if (!qword_2557E2078)
  {
    sub_224DFB644(255, &qword_2557E1FC8);
    v2 = v1;
    v3 = sub_224E8EBF8();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E2078);
  }
  return result;
}

unint64_t sub_224E8EBF8()
{
  unint64_t result;

  result = qword_2557E2080;
  if (!qword_2557E2080)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsDSTU2.ImmunizationVaccinationProtocol, &type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol);
    atomic_store(result, (unint64_t *)&qword_2557E2080);
  }
  return result;
}

unint64_t sub_224E8EC3C()
{
  unint64_t result;

  result = qword_2557E2090;
  if (!qword_2557E2090)
  {
    result = MEMORY[0x22768ED24](&unk_224F70F2C, &type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2090);
  }
  return result;
}

unint64_t sub_224E8EC80()
{
  unint64_t result;

  result = qword_2557E20B0;
  if (!qword_2557E20B0)
  {
    result = MEMORY[0x22768ED24](&unk_224F70EDC, &type metadata for ModelsDSTU2.HumanName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E20B0);
  }
  return result;
}

unint64_t sub_224E8ECC4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E20C8;
  if (!qword_2557E20C8)
  {
    sub_224DDEA0C(255, &qword_2557E1C70, type metadata accessor for ModelsDSTU2.HumanName, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E20D0, type metadata accessor for ModelsDSTU2.HumanName, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.HumanName);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E20C8);
  }
  return result;
}

uint64_t sub_224E8ED54(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E2030, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.ResourceProxy);
  a1[2] = sub_224DDACD4(&qword_2557E2040, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.ResourceProxy);
  result = sub_224DDACD4(&qword_2557E20D8, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.ResourceProxy);
  a1[3] = result;
  return result;
}

uint64_t sub_224E8EDCC()
{
  return sub_224DDACD4(&qword_2557E20E0, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.ResourceProxy);
}

uint64_t sub_224E8EDF8(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E1F78, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Bundle.BundleEntry);
  a1[2] = sub_224DDACD4(&qword_2557E2058, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Bundle.BundleEntry);
  result = sub_224DDACD4(&qword_2557E20E8, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Bundle.BundleEntry);
  a1[3] = result;
  return result;
}

uint64_t sub_224E8EE70()
{
  return sub_224DDACD4(&qword_2557E20F0, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Bundle.BundleEntry);
}

uint64_t sub_224E8EE9C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_224DFC8E4(a1, a2, a3, (uint64_t (*)(void))sub_224E6EEC4, (uint64_t (*)(void))sub_224E6EF64, (uint64_t (*)(void))sub_224E8EEB8);
}

unint64_t sub_224E8EEB8()
{
  unint64_t result;

  result = qword_2557E20F8;
  if (!qword_2557E20F8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsDSTU2.Bundle, &type metadata for ModelsDSTU2.Bundle);
    atomic_store(result, (unint64_t *)&qword_2557E20F8);
  }
  return result;
}

uint64_t sub_224E8EEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DFCA74(a1, a2, a3, (uint64_t (*)(void))sub_224E6EEC4, (uint64_t (*)(void))sub_224E6EF64);
}

unint64_t sub_224E8EF14()
{
  unint64_t result;

  result = qword_2557E2100;
  if (!qword_2557E2100)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsDSTU2.Bundle, &type metadata for ModelsDSTU2.Bundle);
    atomic_store(result, (unint64_t *)&qword_2557E2100);
  }
  return result;
}

uint64_t sub_224E8EF58(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E2108, type metadata accessor for ModelsDSTU2.Condition, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Condition);
  a1[2] = sub_224DDACD4(&qword_2557E2110, type metadata accessor for ModelsDSTU2.Condition, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Condition);
  result = sub_224DDACD4(&qword_2557E2118, type metadata accessor for ModelsDSTU2.Condition, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Condition);
  a1[3] = result;
  return result;
}

uint64_t sub_224E8EFD0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_224DDACD4(&qword_2557E2108, type metadata accessor for ModelsDSTU2.Condition, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Condition);
  result = sub_224DDACD4(&qword_2557E2110, type metadata accessor for ModelsDSTU2.Condition, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Condition);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_224E8F02C()
{
  return sub_224DDACD4(&qword_2557E2120, type metadata accessor for ModelsDSTU2.Condition, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Condition);
}

uint64_t sub_224E8F058(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E2128, type metadata accessor for ModelsDSTU2.DiagnosticReport, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.DiagnosticReport);
  a1[2] = sub_224DDACD4(&qword_2557E2130, type metadata accessor for ModelsDSTU2.DiagnosticReport, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.DiagnosticReport);
  result = sub_224DDACD4(&qword_2557E2138, type metadata accessor for ModelsDSTU2.DiagnosticReport, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.DiagnosticReport);
  a1[3] = result;
  return result;
}

uint64_t sub_224E8F0D0(uint64_t a1)
{
  uint64_t result;

  result = sub_224DDACD4(&qword_2557E1F28, type metadata accessor for ModelsDSTU2.DiagnosticReport, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.DiagnosticReport);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_224E8F10C()
{
  return sub_224DDACD4(&qword_2557E2140, type metadata accessor for ModelsDSTU2.DiagnosticReport, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.DiagnosticReport);
}

uint64_t sub_224E8F138(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_224DDACD4(&qword_2557E2128, type metadata accessor for ModelsDSTU2.DiagnosticReport, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.DiagnosticReport);
  result = sub_224DDACD4(&qword_2557E2130, type metadata accessor for ModelsDSTU2.DiagnosticReport, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.DiagnosticReport);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_224E8F194(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E2148, type metadata accessor for ModelsDSTU2.Immunization, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Immunization);
  a1[2] = sub_224DDACD4(&qword_2557E2150, type metadata accessor for ModelsDSTU2.Immunization, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Immunization);
  result = sub_224DDACD4(&qword_2557E2158, type metadata accessor for ModelsDSTU2.Immunization, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Immunization);
  a1[3] = result;
  return result;
}

uint64_t sub_224E8F20C(uint64_t a1)
{
  uint64_t result;

  result = sub_224DDACD4(&qword_2557E1F20, type metadata accessor for ModelsDSTU2.Immunization, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Immunization);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_224E8F248()
{
  return sub_224DDACD4(&qword_2557E2160, type metadata accessor for ModelsDSTU2.Immunization, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Immunization);
}

uint64_t sub_224E8F274(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_224DDACD4(&qword_2557E2148, type metadata accessor for ModelsDSTU2.Immunization, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Immunization);
  result = sub_224DDACD4(&qword_2557E2150, type metadata accessor for ModelsDSTU2.Immunization, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Immunization);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_224E8F2D0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_224DFC8E4(a1, a2, a3, (uint64_t (*)(void))sub_224E8C174, (uint64_t (*)(void))sub_224E8EBF8, (uint64_t (*)(void))sub_224E8F2EC);
}

unint64_t sub_224E8F2EC()
{
  unint64_t result;

  result = qword_2557E2168;
  if (!qword_2557E2168)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsDSTU2.ImmunizationVaccinationProtocol, &type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol);
    atomic_store(result, (unint64_t *)&qword_2557E2168);
  }
  return result;
}

unint64_t sub_224E8F334()
{
  unint64_t result;

  result = qword_2557E2170;
  if (!qword_2557E2170)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsDSTU2.ImmunizationVaccinationProtocol, &type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol);
    atomic_store(result, (unint64_t *)&qword_2557E2170);
  }
  return result;
}

uint64_t sub_224E8F378(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E2178, type metadata accessor for ModelsDSTU2.Observation, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Observation);
  a1[2] = sub_224DDACD4(&qword_2557E2180, type metadata accessor for ModelsDSTU2.Observation, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Observation);
  result = sub_224DDACD4(&qword_2557E2188, type metadata accessor for ModelsDSTU2.Observation, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Observation);
  a1[3] = result;
  return result;
}

uint64_t sub_224E8F3F0(uint64_t a1)
{
  uint64_t result;

  result = sub_224DDACD4(&qword_2557E1F18, type metadata accessor for ModelsDSTU2.Observation, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Observation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_224E8F42C()
{
  return sub_224DDACD4(&qword_2557E2190, type metadata accessor for ModelsDSTU2.Observation, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Observation);
}

uint64_t sub_224E8F458(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_224DDACD4(&qword_2557E2178, type metadata accessor for ModelsDSTU2.Observation, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Observation);
  result = sub_224DDACD4(&qword_2557E2180, type metadata accessor for ModelsDSTU2.Observation, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.Observation);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_224E8F4B4(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E2018, type metadata accessor for ModelsDSTU2.HumanName, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.HumanName);
  a1[2] = sub_224DDACD4(&qword_2557E20D0, type metadata accessor for ModelsDSTU2.HumanName, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.HumanName);
  result = sub_224DDACD4(&qword_2557E2198, type metadata accessor for ModelsDSTU2.HumanName, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.HumanName);
  a1[3] = result;
  return result;
}

uint64_t sub_224E8F52C()
{
  return sub_224DDACD4(&qword_2557E21A0, type metadata accessor for ModelsDSTU2.HumanName, (uint64_t)&protocol conformance descriptor for ModelsDSTU2.HumanName);
}

uint64_t sub_224E8F558(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_224DFC8E4(a1, a2, a3, (uint64_t (*)(void))sub_224E8F574, (uint64_t (*)(void))sub_224E8F5B8, (uint64_t (*)(void))sub_224E8F5FC);
}

unint64_t sub_224E8F574()
{
  unint64_t result;

  result = qword_2557E21A8;
  if (!qword_2557E21A8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsDSTU2.Patient, &type metadata for ModelsDSTU2.Patient);
    atomic_store(result, (unint64_t *)&qword_2557E21A8);
  }
  return result;
}

unint64_t sub_224E8F5B8()
{
  unint64_t result;

  result = qword_2557E21B0;
  if (!qword_2557E21B0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsDSTU2.Patient, &type metadata for ModelsDSTU2.Patient);
    atomic_store(result, (unint64_t *)&qword_2557E21B0);
  }
  return result;
}

unint64_t sub_224E8F5FC()
{
  unint64_t result;

  result = qword_2557E21B8;
  if (!qword_2557E21B8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsDSTU2.Patient, &type metadata for ModelsDSTU2.Patient);
    atomic_store(result, (unint64_t *)&qword_2557E21B8);
  }
  return result;
}

unint64_t sub_224E8F640(uint64_t a1)
{
  unint64_t result;

  result = sub_224E8BD4C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_224E8F668()
{
  unint64_t result;

  result = qword_2557E21C0;
  if (!qword_2557E21C0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsDSTU2.Patient, &type metadata for ModelsDSTU2.Patient);
    atomic_store(result, (unint64_t *)&qword_2557E21C0);
  }
  return result;
}

uint64_t sub_224E8F6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DFCA74(a1, a2, a3, (uint64_t (*)(void))sub_224E8F574, (uint64_t (*)(void))sub_224E8F5B8);
}

ValueMetadata *type metadata accessor for ModelsDSTU2()
{
  return &type metadata for ModelsDSTU2;
}

uint64_t initializeBufferWithCopyOfBuffer for ModelsDSTU2.ResourceProxy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_224E8F730 + 4 * byte_224F6F8E0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for ModelsDSTU2.ResourceProxy(_QWORD *a1)
{
  uint64_t result;
  int *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  char *v44;
  uint64_t v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  char *v84;
  uint64_t v85;
  unsigned int (*v86)(char *, uint64_t, uint64_t);
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 6:
      goto LABEL_2;
    case 1:
      swift_bridgeObjectRelease();
      if (a1[2] != 1)
        swift_bridgeObjectRelease();
      v3 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
      v4 = (char *)a1 + v3[6];
      v5 = type metadata accessor for Reference();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v6 = &v4[*(int *)(v5 + 24)];
        v7 = type metadata accessor for Identifier();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
        {
          swift_bridgeObjectRelease();
          if (*((_QWORD *)v6 + 3) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v8 = &v6[*(int *)(v7 + 24)];
          v9 = sub_224F675D4();
          v10 = *(_QWORD *)(v9 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
            (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
          swift_bridgeObjectRelease();
        }
      }
      v11 = (char *)a1 + v3[7];
      v12 = type metadata accessor for FHIRDateTime();
      v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48);
      if (!v13(v11, 1, v12))
      {
        if (*((_QWORD *)v11 + 7) != 1)
          swift_bridgeObjectRelease();
        v14 = &v11[*(int *)(v12 + 28)];
        v15 = sub_224F67874();
        v16 = *(_QWORD *)(v15 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
          (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)((char *)a1 + v3[9] + 8) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)((char *)a1 + v3[12] + 8) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v17 = (char *)a1 + v3[14];
      if (!v13(v17, 1, v12))
      {
        if (*((_QWORD *)v17 + 7) != 1)
          swift_bridgeObjectRelease();
        v18 = &v17[*(int *)(v12 + 28)];
        v19 = sub_224F67874();
        v20 = *(_QWORD *)(v19 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
          (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
        swift_bridgeObjectRelease();
      }
      v21 = (char *)a1 + v3[15];
      v22 = type metadata accessor for Period();
      v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
      if (!v23(v21, 1, v22))
      {
        if (!v13(v21, 1, v12))
        {
          if (*((_QWORD *)v21 + 7) != 1)
            swift_bridgeObjectRelease();
          v24 = &v21[*(int *)(v12 + 28)];
          v25 = sub_224F67874();
          v26 = *(_QWORD *)(v25 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
            (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v25);
          swift_bridgeObjectRelease();
        }
        v27 = &v21[*(int *)(v22 + 20)];
        if (!v13(v27, 1, v12))
        {
          if (*((_QWORD *)v27 + 7) != 1)
            swift_bridgeObjectRelease();
          v28 = &v27[*(int *)(v12 + 28)];
          v29 = sub_224F67874();
          v30 = *(_QWORD *)(v29 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
            (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v29);
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      v31 = (char *)a1 + v3[17];
      if (!v13(v31, 1, v12))
      {
        if (*((_QWORD *)v31 + 7) != 1)
          swift_bridgeObjectRelease();
        v32 = &v31[*(int *)(v12 + 28)];
        v33 = sub_224F67874();
        v34 = *(_QWORD *)(v33 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
          (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v33);
        swift_bridgeObjectRelease();
      }
      v35 = (char *)a1 + v3[18];
      if (!v23(v35, 1, v22))
      {
        if (!v13(v35, 1, v12))
        {
          if (*((_QWORD *)v35 + 7) != 1)
            swift_bridgeObjectRelease();
          v36 = &v35[*(int *)(v12 + 28)];
          v37 = sub_224F67874();
          v38 = *(_QWORD *)(v37 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
            (*(void (**)(char *, uint64_t))(v38 + 8))(v36, v37);
          swift_bridgeObjectRelease();
        }
        v39 = &v35[*(int *)(v22 + 20)];
        if (!v13(v39, 1, v12))
        {
          if (*((_QWORD *)v39 + 7) != 1)
            swift_bridgeObjectRelease();
          v40 = &v39[*(int *)(v12 + 28)];
          v41 = sub_224F67874();
          v42 = *(_QWORD *)(v41 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
            (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
          swift_bridgeObjectRelease();
        }
      }
LABEL_2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_146;
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v43 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
      v44 = (char *)a1 + v43[9];
      v45 = type metadata accessor for FHIRDateTime();
      v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48);
      if (!v46(v44, 1, v45))
      {
        if (*((_QWORD *)v44 + 7) != 1)
          swift_bridgeObjectRelease();
        v47 = &v44[*(int *)(v45 + 28)];
        v48 = sub_224F67874();
        v49 = *(_QWORD *)(v48 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
          (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v48);
        swift_bridgeObjectRelease();
      }
      v50 = (char *)a1 + v43[10];
      v51 = type metadata accessor for Period();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 48))(v50, 1, v51))
      {
        if (!v46(v50, 1, v45))
        {
          if (*((_QWORD *)v50 + 7) != 1)
            swift_bridgeObjectRelease();
          v52 = &v50[*(int *)(v45 + 28)];
          v53 = sub_224F67874();
          v54 = *(_QWORD *)(v53 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
            (*(void (**)(char *, uint64_t))(v54 + 8))(v52, v53);
          swift_bridgeObjectRelease();
        }
        v55 = &v50[*(int *)(v51 + 20)];
        if (!v46(v55, 1, v45))
        {
          if (*((_QWORD *)v55 + 7) != 1)
            swift_bridgeObjectRelease();
          v56 = &v55[*(int *)(v45 + 28)];
          v57 = sub_224F67874();
          v58 = *(_QWORD *)(v57 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
            (*(void (**)(char *, uint64_t))(v58 + 8))(v56, v57);
          swift_bridgeObjectRelease();
        }
      }
      v59 = (char *)a1 + v43[11];
      if (!v46(v59, 1, v45))
      {
        if (*((_QWORD *)v59 + 7) != 1)
          swift_bridgeObjectRelease();
        v60 = &v59[*(int *)(v45 + 28)];
        v61 = sub_224F67874();
        v62 = *(_QWORD *)(v61 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
          (*(void (**)(char *, uint64_t))(v62 + 8))(v60, v61);
        swift_bridgeObjectRelease();
      }
      goto LABEL_146;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[4] != 1)
        swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v63 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
      v64 = (char *)a1 + v63[8];
      v65 = type metadata accessor for FHIRDateTime();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 48))(v64, 1, v65))
      {
        if (*((_QWORD *)v64 + 7) != 1)
          swift_bridgeObjectRelease();
        v66 = &v64[*(int *)(v65 + 28)];
        v67 = sub_224F67874();
        v68 = *(_QWORD *)(v67 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
          (*(void (**)(char *, uint64_t))(v68 + 8))(v66, v67);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v69 = (char *)a1 + v63[15];
      v70 = type metadata accessor for Reference();
      v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48);
      if (!v71(v69, 1, v70))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v72 = &v69[*(int *)(v70 + 24)];
        v73 = type metadata accessor for Identifier();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 48))(v72, 1, v73))
        {
          swift_bridgeObjectRelease();
          if (*((_QWORD *)v72 + 3) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v74 = &v72[*(int *)(v73 + 24)];
          v75 = sub_224F675D4();
          v76 = *(_QWORD *)(v75 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
            (*(void (**)(char *, uint64_t))(v76 + 8))(v74, v75);
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      v77 = (char *)a1 + v63[17];
      if (!v71(v77, 1, v70))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v78 = &v77[*(int *)(v70 + 24)];
        v79 = type metadata accessor for Identifier();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 48))(v78, 1, v79))
        {
          swift_bridgeObjectRelease();
          if (*((_QWORD *)v78 + 3) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v80 = &v78[*(int *)(v79 + 24)];
          v81 = sub_224F675D4();
          v82 = *(_QWORD *)(v81 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
            (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v81);
          swift_bridgeObjectRelease();
        }
      }
      goto LABEL_146;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[4] != 1)
        swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[8] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v83 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
      v84 = (char *)a1 + v83[11];
      v85 = type metadata accessor for FHIRDateTime();
      v86 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 48);
      if (!v86(v84, 1, v85))
      {
        if (*((_QWORD *)v84 + 7) != 1)
          swift_bridgeObjectRelease();
        v87 = &v84[*(int *)(v85 + 28)];
        v88 = sub_224F67874();
        v89 = *(_QWORD *)(v88 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
          (*(void (**)(char *, uint64_t))(v89 + 8))(v87, v88);
        swift_bridgeObjectRelease();
      }
      v90 = (char *)a1 + v83[12];
      v91 = type metadata accessor for Period();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 48))(v90, 1, v91))
      {
        if (!v86(v90, 1, v85))
        {
          if (*((_QWORD *)v90 + 7) != 1)
            swift_bridgeObjectRelease();
          v92 = &v90[*(int *)(v85 + 28)];
          v93 = sub_224F67874();
          v94 = *(_QWORD *)(v93 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
            (*(void (**)(char *, uint64_t))(v94 + 8))(v92, v93);
          swift_bridgeObjectRelease();
        }
        v95 = &v90[*(int *)(v91 + 20)];
        if (!v86(v95, 1, v85))
        {
          if (*((_QWORD *)v95 + 7) != 1)
            swift_bridgeObjectRelease();
          v96 = &v95[*(int *)(v85 + 28)];
          v97 = sub_224F67874();
          v98 = *(_QWORD *)(v97 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
            (*(void (**)(char *, uint64_t))(v98 + 8))(v96, v97);
          swift_bridgeObjectRelease();
        }
      }
      v99 = (char *)a1 + v83[13];
      if (!v86(v99, 1, v85))
      {
        if (*((_QWORD *)v99 + 7) != 1)
          swift_bridgeObjectRelease();
        v100 = &v99[*(int *)(v85 + 28)];
        v101 = sub_224F67874();
        v102 = *(_QWORD *)(v101 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
          (*(void (**)(char *, uint64_t))(v102 + 8))(v100, v101);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)((char *)a1 + v83[16] + 8) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v103 = (char *)a1 + v83[17];
      v104 = type metadata accessor for Quantity();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 48))(v103, 1, v104))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v105 = &v103[*(int *)(v104 + 28)];
        v106 = sub_224F675D4();
        v107 = *(_QWORD *)(v106 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106))
          (*(void (**)(char *, uint64_t))(v107 + 8))(v105, v106);
        swift_bridgeObjectRelease();
      }
      goto LABEL_145;
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[13] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_145:
      swift_bridgeObjectRelease();
LABEL_146:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for ModelsDSTU2.ResourceProxy()
{
  char *v0;

  v0 = (char *)sub_224E931D4 + 4 * byte_224F6F8F6[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_224E931D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *__dst, void *a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v34 = v32[3];
  v31[2] = v32[2];
  v31[3] = v34;
  v31[4] = v32[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return v31;
}

uint64_t assignWithCopy for ModelsDSTU2.ResourceProxy(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_224DDEAA0(result, type metadata accessor for ModelsDSTU2.ResourceProxy);
    v2 = (char *)&loc_224E95D3C + 4 * word_224F6F8FE[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

char *initializeWithTake for ModelsDSTU2.ResourceProxy(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  __int128 v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned int (*v38)(_QWORD, _QWORD, _QWORD);
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unsigned int (**v45)(_OWORD *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unsigned int (**v75)(_BYTE *, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned int (*v89)(_QWORD, _QWORD, _QWORD);
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unsigned int (**v96)(_OWORD *, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unsigned int (**v102)(_BYTE *, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unsigned int (*v122)(_QWORD, _QWORD, _QWORD);
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unsigned int (*v153)(_QWORD, _QWORD, _QWORD);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  __int128 v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unsigned int (**v178)(_OWORD *, uint64_t, uint64_t);
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v266;
  void (**v267)(void *, const void *, uint64_t);
  void (**v268)(void *, const void *, uint64_t);
  void (**v269)(void *, const void *, uint64_t);
  uint64_t v270;
  uint64_t v271;
  unsigned int (*v272)(_QWORD, _QWORD, _QWORD);
  uint64_t v273;
  unsigned int (*v274)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v275)(_QWORD, _QWORD, _QWORD);
  void (**v276)(void *, void *, _QWORD);
  char *v277;
  char *v278;
  char *v279;
  char *v280;
  char *v281;
  void *v282;
  void *v283;
  void *v284;
  void *__src;
  void (**__srca)(char *, _QWORD, uint64_t, uint64_t);
  void (**__srcb)(char *, _QWORD, uint64_t, uint64_t);
  void (**__srcc)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD *__srcd;
  void (**__srce)(char *, _QWORD, uint64_t, uint64_t);
  void *v291;
  void *v292;
  void (**v293)(char *, _QWORD, uint64_t, uint64_t);
  void *v294;
  _QWORD *v295;
  void *v296;
  void *v297;
  void *v298;
  _QWORD *v299;
  void *v300;
  char *v301;
  _QWORD *__dst;
  char *__dsta;
  _QWORD *__dstb;
  char *__dstc;
  void *__dstd;
  char *__dste;
  char *__dstf;
  _QWORD *__dstg;
  _QWORD *__dsth;
  char *__dsti;
  _QWORD *__dstj;
  void (**__dstk)(char *, _QWORD, uint64_t, uint64_t);
  void (**__dstl)(char *, _QWORD, uint64_t, uint64_t);
  char *__dstm;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      v6 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
      v7 = v6[6];
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = type metadata accessor for Reference();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        v40 = *((_OWORD *)v9 + 1);
        *(_OWORD *)v8 = *(_OWORD *)v9;
        *((_OWORD *)v8 + 1) = v40;
        v41 = *(int *)(v10 + 24);
        v42 = &v8[v41];
        v43 = &v9[v41];
        v44 = type metadata accessor for Identifier();
        v45 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v44 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v45)[6](v43, 1, v44))
        {
          sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        }
        else
        {
          v64 = *((_OWORD *)v43 + 1);
          *(_OWORD *)v42 = *(_OWORD *)v43;
          *((_OWORD *)v42 + 1) = v64;
          *((_QWORD *)v42 + 4) = *((_QWORD *)v43 + 4);
          v65 = *(int *)(v44 + 24);
          v293 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v45;
          __dstc = &v42[v65];
          v66 = &v43[v65];
          v67 = sub_224F675D4();
          v276 = *(void (***)(void *, void *, _QWORD))(v67 - 8);
          __src = v66;
          v68 = v66;
          v69 = v67;
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v276[6])(v68, 1, v67))
          {
            sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__dstc, __src, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
          }
          else
          {
            v276[4](__dstc, __src, v69);
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v276[7])(__dstc, 0, 1, v69);
          }
          *(_OWORD *)&v42[*(int *)(v44 + 28)] = *(_OWORD *)&v43[*(int *)(v44 + 28)];
          v293[7](v42, 0, 1, v44);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      v118 = v6[7];
      v119 = &a1[v118];
      v120 = &a2[v118];
      v121 = type metadata accessor for FHIRDateTime();
      __dstg = *(_QWORD **)(v121 - 8);
      v122 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstg[6];
      v297 = v122;
      if (v122(v120, 1, v121))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
      }
      else
      {
        *v119 = *v120;
        *((_QWORD *)v119 + 1) = *((_QWORD *)v120 + 1);
        *((_DWORD *)v119 + 4) = *((_DWORD *)v120 + 4);
        *(_OWORD *)(v119 + 24) = *(_OWORD *)(v120 + 24);
        *(_OWORD *)(v119 + 40) = *(_OWORD *)(v120 + 40);
        *((_QWORD *)v119 + 7) = *((_QWORD *)v120 + 7);
        v124 = *(int *)(v121 + 28);
        v125 = &v119[v124];
        v126 = &v120[v124];
        v127 = sub_224F67874();
        v128 = *(_QWORD *)(v127 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v125, v126, v127);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
        }
        *(_OWORD *)&v119[*(int *)(v121 + 32)] = *(_OWORD *)&v120[*(int *)(v121 + 32)];
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstg[7])(v119, 0, 1, v121);
        v122 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v297;
      }
      v130 = v6[8];
      v131 = &a1[v130];
      v132 = &a2[v130];
      *(_OWORD *)v131 = *(_OWORD *)v132;
      *((_QWORD *)v131 + 2) = *((_QWORD *)v132 + 2);
      v133 = v6[9];
      v134 = &a1[v133];
      v135 = &a2[v133];
      *((_QWORD *)v134 + 2) = *((_QWORD *)v135 + 2);
      *(_OWORD *)v134 = *(_OWORD *)v135;
      *(_OWORD *)&a1[v6[10]] = *(_OWORD *)&a2[v6[10]];
      *(_OWORD *)&a1[v6[11]] = *(_OWORD *)&a2[v6[11]];
      v136 = v6[12];
      v137 = &a1[v136];
      v138 = &a2[v136];
      *(_OWORD *)v137 = *(_OWORD *)v138;
      *((_QWORD *)v137 + 2) = *((_QWORD *)v138 + 2);
      *(_QWORD *)&a1[v6[13]] = *(_QWORD *)&a2[v6[13]];
      v139 = v6[14];
      v140 = &a1[v139];
      v141 = &a2[v139];
      if (v122(&a2[v139], 1, v121))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
      }
      else
      {
        *v140 = *v141;
        *((_QWORD *)v140 + 1) = *((_QWORD *)v141 + 1);
        *((_DWORD *)v140 + 4) = *((_DWORD *)v141 + 4);
        *(_OWORD *)(v140 + 24) = *(_OWORD *)(v141 + 24);
        *(_OWORD *)(v140 + 40) = *(_OWORD *)(v141 + 40);
        *((_QWORD *)v140 + 7) = *((_QWORD *)v141 + 7);
        v143 = *(int *)(v121 + 28);
        v144 = &v140[v143];
        v145 = &v141[v143];
        v146 = sub_224F67874();
        v147 = *(_QWORD *)(v146 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v147 + 32))(v144, v145, v146);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v147 + 56))(v144, 0, 1, v146);
        }
        *(_OWORD *)&v140[*(int *)(v121 + 32)] = *(_OWORD *)&v141[*(int *)(v121 + 32)];
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstg[7])(v140, 0, 1, v121);
        v122 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v297;
      }
      v149 = v6[15];
      v150 = &a1[v149];
      v151 = &a2[v149];
      v152 = type metadata accessor for Period();
      __srcd = *(_QWORD **)(v152 - 8);
      v153 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__srcd[6];
      if (v153(v151, 1, v152))
      {
        sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
      }
      else
      {
        if (v122(v151, 1, v121))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
        }
        else
        {
          *v150 = *v151;
          *((_QWORD *)v150 + 1) = *((_QWORD *)v151 + 1);
          *((_DWORD *)v150 + 4) = *((_DWORD *)v151 + 4);
          *(_OWORD *)(v150 + 24) = *(_OWORD *)(v151 + 24);
          *(_OWORD *)(v150 + 40) = *(_OWORD *)(v151 + 40);
          *((_QWORD *)v150 + 7) = *((_QWORD *)v151 + 7);
          v156 = *(int *)(v121 + 28);
          v272 = v153;
          v278 = &v150[v156];
          v157 = &v151[v156];
          v158 = sub_224F67874();
          v159 = *(_QWORD *)(v158 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v157, 1, v158))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v278, v157, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v159 + 32))(v278, v157, v158);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v278, 0, 1, v158);
          }
          *(_OWORD *)&v150[*(int *)(v121 + 32)] = *(_OWORD *)&v151[*(int *)(v121 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstg[7])(v150, 0, 1, v121);
          v122 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v297;
          v153 = v272;
        }
        v193 = *(int *)(v152 + 20);
        v194 = &v150[v193];
        v195 = &v151[v193];
        if (v122(v195, 1, v121))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
        }
        else
        {
          *v194 = *v195;
          *((_QWORD *)v194 + 1) = *((_QWORD *)v195 + 1);
          *((_DWORD *)v194 + 4) = *((_DWORD *)v195 + 4);
          *(_OWORD *)(v194 + 24) = *(_OWORD *)(v195 + 24);
          *(_OWORD *)(v194 + 40) = *(_OWORD *)(v195 + 40);
          *((_QWORD *)v194 + 7) = *((_QWORD *)v195 + 7);
          v197 = *(int *)(v121 + 28);
          v274 = v153;
          v281 = &v194[v197];
          v198 = &v195[v197];
          v199 = sub_224F67874();
          v266 = *(_QWORD *)(v199 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v266 + 48))(v198, 1, v199))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v281, v198, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v266 + 32))(v281, v198, v199);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v266 + 56))(v281, 0, 1, v199);
          }
          v153 = v274;
          *(_OWORD *)&v194[*(int *)(v121 + 32)] = *(_OWORD *)&v195[*(int *)(v121 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstg[7])(v194, 0, 1, v121);
          v122 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v297;
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srcd[7])(v150, 0, 1, v152);
      }
      *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
      v235 = v6[17];
      v236 = &a1[v235];
      v237 = &a2[v235];
      if (v122(&a2[v235], 1, v121))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
      }
      else
      {
        v275 = v153;
        v282 = (void *)v152;
        *v236 = *v237;
        *((_QWORD *)v236 + 1) = *((_QWORD *)v237 + 1);
        *((_DWORD *)v236 + 4) = *((_DWORD *)v237 + 4);
        *(_OWORD *)(v236 + 24) = *(_OWORD *)(v237 + 24);
        *(_OWORD *)(v236 + 40) = *(_OWORD *)(v237 + 40);
        *((_QWORD *)v236 + 7) = *((_QWORD *)v237 + 7);
        v239 = *(int *)(v121 + 28);
        v240 = &v236[v239];
        v241 = &v237[v239];
        v242 = sub_224F67874();
        v243 = *(_QWORD *)(v242 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v243 + 48))(v241, 1, v242))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v243 + 32))(v240, v241, v242);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v243 + 56))(v240, 0, 1, v242);
        }
        v152 = (uint64_t)v282;
        *(_OWORD *)&v236[*(int *)(v121 + 32)] = *(_OWORD *)&v237[*(int *)(v121 + 32)];
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstg[7])(v236, 0, 1, v121);
        v122 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v297;
        v153 = v275;
      }
      v245 = v6[18];
      v246 = &a1[v245];
      v247 = &a2[v245];
      if (v153(&a2[v245], 1, v152))
      {
        sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v246, v247, *(_QWORD *)(*(_QWORD *)(v248 - 8) + 64));
      }
      else
      {
        if (v122(v247, 1, v121))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v246, v247, *(_QWORD *)(*(_QWORD *)(v249 - 8) + 64));
        }
        else
        {
          v283 = (void *)v152;
          *v246 = *v247;
          *((_QWORD *)v246 + 1) = *((_QWORD *)v247 + 1);
          *((_DWORD *)v246 + 4) = *((_DWORD *)v247 + 4);
          *(_OWORD *)(v246 + 24) = *(_OWORD *)(v247 + 24);
          *(_OWORD *)(v246 + 40) = *(_OWORD *)(v247 + 40);
          *((_QWORD *)v246 + 7) = *((_QWORD *)v247 + 7);
          v250 = *(int *)(v121 + 28);
          v251 = &v246[v250];
          v252 = &v247[v250];
          v253 = sub_224F67874();
          v254 = *(_QWORD *)(v253 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v254 + 48))(v252, 1, v253))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v251, v252, *(_QWORD *)(*(_QWORD *)(v255 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v254 + 32))(v251, v252, v253);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v254 + 56))(v251, 0, 1, v253);
          }
          v152 = (uint64_t)v283;
          *(_OWORD *)&v246[*(int *)(v121 + 32)] = *(_OWORD *)&v247[*(int *)(v121 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstg[7])(v246, 0, 1, v121);
          v122 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v297;
        }
        v256 = *(int *)(v152 + 20);
        v257 = &v246[v256];
        v258 = &v247[v256];
        if (v122(v258, 1, v121))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v257, v258, *(_QWORD *)(*(_QWORD *)(v259 - 8) + 64));
        }
        else
        {
          v284 = (void *)v152;
          *v257 = *v258;
          *((_QWORD *)v257 + 1) = *((_QWORD *)v258 + 1);
          *((_DWORD *)v257 + 4) = *((_DWORD *)v258 + 4);
          *(_OWORD *)(v257 + 24) = *(_OWORD *)(v258 + 24);
          *(_OWORD *)(v257 + 40) = *(_OWORD *)(v258 + 40);
          *((_QWORD *)v257 + 7) = *((_QWORD *)v258 + 7);
          v260 = *(int *)(v121 + 28);
          v301 = &v257[v260];
          v261 = &v258[v260];
          v262 = sub_224F67874();
          v263 = *(_QWORD *)(v262 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v263 + 48))(v261, 1, v262))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v301, v261, *(_QWORD *)(*(_QWORD *)(v264 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v263 + 32))(v301, v261, v262);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v263 + 56))(v301, 0, 1, v262);
          }
          *(_OWORD *)&v257[*(int *)(v121 + 32)] = *(_OWORD *)&v258[*(int *)(v121 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstg[7])(v257, 0, 1, v121);
          v152 = (uint64_t)v284;
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srcd[7])(v246, 0, 1, v152);
      }
      *(_OWORD *)&a1[v6[19]] = *(_OWORD *)&a2[v6[19]];
      *(_OWORD *)&a1[v6[20]] = *(_OWORD *)&a2[v6[20]];
      *(_OWORD *)&a1[v6[21]] = *(_OWORD *)&a2[v6[21]];
      goto LABEL_148;
    case 2u:
      v13 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v13;
      v14 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v14;
      *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      v15 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
      v16 = v15[9];
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = type metadata accessor for FHIRDateTime();
      v20 = *(_QWORD **)(v19 - 8);
      v21 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v20[6];
      if (v21(v18, 1, v19))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v291 = v21;
        __dst = v20;
        *v17 = *v18;
        *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
        *((_DWORD *)v17 + 4) = *((_DWORD *)v18 + 4);
        *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
        *(_OWORD *)(v17 + 40) = *(_OWORD *)(v18 + 40);
        *((_QWORD *)v17 + 7) = *((_QWORD *)v18 + 7);
        v47 = *(int *)(v19 + 28);
        v48 = &v17[v47];
        v49 = &v18[v47];
        v50 = sub_224F67874();
        v51 = *(_QWORD *)(v50 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v49, v50);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
        }
        *(_OWORD *)&v17[*(int *)(v19 + 32)] = *(_OWORD *)&v18[*(int *)(v19 + 32)];
        v20 = __dst;
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dst[7])(v17, 0, 1, v19);
        v21 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v291;
      }
      v71 = v15[10];
      v72 = &a1[v71];
      v73 = &a2[v71];
      v74 = type metadata accessor for Period();
      v75 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v74 - 8);
      if (v75[6](v73, 1, v74))
      {
        sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        __srca = (void (**)(char *, _QWORD, uint64_t, uint64_t))v75;
        if (v21(v73, 1, v19))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
        }
        else
        {
          *v72 = *v73;
          *((_QWORD *)v72 + 1) = *((_QWORD *)v73 + 1);
          *((_DWORD *)v72 + 4) = *((_DWORD *)v73 + 4);
          *(_OWORD *)(v72 + 24) = *(_OWORD *)(v73 + 24);
          *(_OWORD *)(v72 + 40) = *(_OWORD *)(v73 + 40);
          *((_QWORD *)v72 + 7) = *((_QWORD *)v73 + 7);
          v105 = *(int *)(v19 + 28);
          v294 = v21;
          __dste = &v72[v105];
          v106 = &v73[v105];
          v107 = sub_224F67874();
          v270 = *(_QWORD *)(v107 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v270 + 48))(v106, 1, v107))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__dste, v106, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v270 + 32))(__dste, v106, v107);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v270 + 56))(__dste, 0, 1, v107);
          }
          *(_OWORD *)&v72[*(int *)(v19 + 32)] = *(_OWORD *)&v73[*(int *)(v19 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v20[7])(v72, 0, 1, v19);
          v21 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v294;
        }
        v161 = *(int *)(v74 + 20);
        v162 = &v72[v161];
        v163 = &v73[v161];
        if (v21(v163, 1, v19))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
        }
        else
        {
          v298 = v21;
          __dsth = v20;
          *v162 = *v163;
          *((_QWORD *)v162 + 1) = *((_QWORD *)v163 + 1);
          *((_DWORD *)v162 + 4) = *((_DWORD *)v163 + 4);
          *(_OWORD *)(v162 + 24) = *(_OWORD *)(v163 + 24);
          *(_OWORD *)(v162 + 40) = *(_OWORD *)(v163 + 40);
          *((_QWORD *)v162 + 7) = *((_QWORD *)v163 + 7);
          v165 = *(int *)(v19 + 28);
          v279 = &v162[v165];
          v166 = &v163[v165];
          v167 = sub_224F67874();
          v268 = *(void (***)(void *, const void *, uint64_t))(v167 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v268[6])(v166, 1, v167))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v279, v166, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
          }
          else
          {
            v268[4](v279, v166, v167);
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v268[7])(v279, 0, 1, v167);
          }
          *(_OWORD *)&v162[*(int *)(v19 + 32)] = *(_OWORD *)&v163[*(int *)(v19 + 32)];
          v20 = __dsth;
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dsth[7])(v162, 0, 1, v19);
          v21 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v298;
        }
        __srca[7](v72, 0, 1, v74);
      }
      v201 = v15[11];
      v202 = &a1[v201];
      v203 = &a2[v201];
      if (v21(&a2[v201], 1, v19))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
      }
      else
      {
        __dstk = (void (**)(char *, _QWORD, uint64_t, uint64_t))v20;
        *v202 = *v203;
        *((_QWORD *)v202 + 1) = *((_QWORD *)v203 + 1);
        *((_DWORD *)v202 + 4) = *((_DWORD *)v203 + 4);
        *(_OWORD *)(v202 + 24) = *(_OWORD *)(v203 + 24);
        *(_OWORD *)(v202 + 40) = *(_OWORD *)(v203 + 40);
        *((_QWORD *)v202 + 7) = *((_QWORD *)v203 + 7);
        v205 = *(int *)(v19 + 28);
        v206 = &v202[v205];
        v207 = &v203[v205];
        v208 = sub_224F67874();
        v209 = *(_QWORD *)(v208 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v207, 1, v208))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v206, v207, *(_QWORD *)(*(_QWORD *)(v210 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v209 + 32))(v206, v207, v208);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v209 + 56))(v206, 0, 1, v208);
        }
        *(_OWORD *)&v202[*(int *)(v19 + 32)] = *(_OWORD *)&v203[*(int *)(v19 + 32)];
        __dstk[7](v202, 0, 1, v19);
      }
      *(_OWORD *)&a1[v15[12]] = *(_OWORD *)&a2[v15[12]];
      goto LABEL_148;
    case 3u:
      v23 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v23;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      v24 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
      v25 = v24[8];
      v26 = &a1[v25];
      v27 = &a2[v25];
      v28 = type metadata accessor for FHIRDateTime();
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        *v26 = *v27;
        *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
        *((_DWORD *)v26 + 4) = *((_DWORD *)v27 + 4);
        *(_OWORD *)(v26 + 24) = *(_OWORD *)(v27 + 24);
        *(_OWORD *)(v26 + 40) = *(_OWORD *)(v27 + 40);
        *((_QWORD *)v26 + 7) = *((_QWORD *)v27 + 7);
        v53 = *(int *)(v28 + 28);
        __dsta = &v26[v53];
        v54 = &v27[v53];
        v55 = sub_224F67874();
        v56 = *(_QWORD *)(v55 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(__dsta, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v56 + 32))(__dsta, v54, v55);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(__dsta, 0, 1, v55);
        }
        *(_OWORD *)&v26[*(int *)(v28 + 32)] = *(_OWORD *)&v27[*(int *)(v28 + 32)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      v78 = v24[9];
      v79 = &a1[v78];
      v80 = &a2[v78];
      *(_QWORD *)v79 = *(_QWORD *)v80;
      *(_QWORD *)(v79 + 5) = *(_QWORD *)(v80 + 5);
      *(_QWORD *)&a1[v24[10]] = *(_QWORD *)&a2[v24[10]];
      a1[v24[11]] = a2[v24[11]];
      *(_QWORD *)&a1[v24[12]] = *(_QWORD *)&a2[v24[12]];
      v81 = v24[13];
      v82 = &a1[v81];
      v83 = &a2[v81];
      *(_OWORD *)v82 = *(_OWORD *)v83;
      *((_QWORD *)v82 + 2) = *((_QWORD *)v83 + 2);
      a1[v24[14]] = a2[v24[14]];
      v84 = v24[15];
      v85 = &a1[v84];
      v86 = &a2[v84];
      v87 = type metadata accessor for Reference();
      v88 = *(_QWORD **)(v87 - 8);
      v89 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v88[6];
      if (v89(v86, 1, v87))
      {
        sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
      }
      else
      {
        __dstd = v89;
        v91 = *((_OWORD *)v86 + 1);
        *(_OWORD *)v85 = *(_OWORD *)v86;
        *((_OWORD *)v85 + 1) = v91;
        v92 = *(int *)(v87 + 24);
        v93 = &v85[v92];
        v94 = &v86[v92];
        v95 = type metadata accessor for Identifier();
        v96 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v95 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v96)[6](v94, 1, v95))
        {
          sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
        }
        else
        {
          __srcc = (void (**)(char *, _QWORD, uint64_t, uint64_t))v96;
          v295 = v88;
          v109 = *((_OWORD *)v94 + 1);
          *(_OWORD *)v93 = *(_OWORD *)v94;
          *((_OWORD *)v93 + 1) = v109;
          *((_QWORD *)v93 + 4) = *((_QWORD *)v94 + 4);
          v110 = *(int *)(v95 + 24);
          v277 = &v93[v110];
          v111 = &v94[v110];
          v112 = sub_224F675D4();
          v267 = *(void (***)(void *, const void *, uint64_t))(v112 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v267[6])(v111, 1, v112))
          {
            sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v277, v111, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
          }
          else
          {
            v267[4](v277, v111, v112);
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v267[7])(v277, 0, 1, v112);
          }
          *(_OWORD *)&v93[*(int *)(v95 + 28)] = *(_OWORD *)&v94[*(int *)(v95 + 28)];
          v88 = v295;
          __srcc[7](v93, 0, 1, v95);
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v88[7])(v85, 0, 1, v87);
        v89 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstd;
      }
      *(_OWORD *)&a1[v24[16]] = *(_OWORD *)&a2[v24[16]];
      v169 = v24[17];
      v170 = &a1[v169];
      v171 = &a2[v169];
      if (v89(&a2[v169], 1, v87))
      {
        sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
      }
      else
      {
        v173 = *((_OWORD *)v171 + 1);
        *(_OWORD *)v170 = *(_OWORD *)v171;
        *((_OWORD *)v170 + 1) = v173;
        v174 = *(int *)(v87 + 24);
        v175 = &v170[v174];
        v176 = &v171[v174];
        v177 = type metadata accessor for Identifier();
        v178 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v177 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v178)[6](v176, 1, v177))
        {
          sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
        }
        else
        {
          __srce = (void (**)(char *, _QWORD, uint64_t, uint64_t))v178;
          v299 = v88;
          v180 = *((_OWORD *)v176 + 1);
          *(_OWORD *)v175 = *(_OWORD *)v176;
          *((_OWORD *)v175 + 1) = v180;
          *((_QWORD *)v175 + 4) = *((_QWORD *)v176 + 4);
          v181 = *(int *)(v177 + 24);
          __dsti = &v175[v181];
          v182 = &v176[v181];
          v183 = sub_224F675D4();
          v273 = *(_QWORD *)(v183 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v273 + 48))(v182, 1, v183))
          {
            sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__dsti, v182, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v273 + 32))(__dsti, v182, v183);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v273 + 56))(__dsti, 0, 1, v183);
          }
          *(_OWORD *)&v175[*(int *)(v177 + 28)] = *(_OWORD *)&v176[*(int *)(v177 + 28)];
          v88 = v299;
          __srce[7](v175, 0, 1, v177);
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v88[7])(v170, 0, 1, v87);
      }
      *(_OWORD *)&a1[v24[18]] = *(_OWORD *)&a2[v24[18]];
      goto LABEL_148;
    case 4u:
      v31 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v31;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
      *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
      *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      v32 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
      v33 = v32[11];
      v34 = &a1[v33];
      v35 = &a2[v33];
      v36 = type metadata accessor for FHIRDateTime();
      v37 = *(_QWORD **)(v36 - 8);
      v38 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v37[6];
      if (v38(v35, 1, v36))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        v292 = v38;
        __dstb = v37;
        *v34 = *v35;
        *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
        *((_DWORD *)v34 + 4) = *((_DWORD *)v35 + 4);
        *(_OWORD *)(v34 + 24) = *(_OWORD *)(v35 + 24);
        *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
        *((_QWORD *)v34 + 7) = *((_QWORD *)v35 + 7);
        v58 = *(int *)(v36 + 28);
        v59 = &v34[v58];
        v60 = &v35[v58];
        v61 = sub_224F67874();
        v62 = *(_QWORD *)(v61 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v59, v60, v61);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
        }
        *(_OWORD *)&v34[*(int *)(v36 + 32)] = *(_OWORD *)&v35[*(int *)(v36 + 32)];
        v37 = __dstb;
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v34, 0, 1, v36);
        v38 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v292;
      }
      v98 = v32[12];
      v99 = &a1[v98];
      v100 = &a2[v98];
      v101 = type metadata accessor for Period();
      v102 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v101 - 8);
      if (v102[6](v100, 1, v101))
      {
        sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
      }
      else
      {
        __srcb = (void (**)(char *, _QWORD, uint64_t, uint64_t))v102;
        if (v38(v100, 1, v36))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
        }
        else
        {
          *v99 = *v100;
          *((_QWORD *)v99 + 1) = *((_QWORD *)v100 + 1);
          *((_DWORD *)v99 + 4) = *((_DWORD *)v100 + 4);
          *(_OWORD *)(v99 + 24) = *(_OWORD *)(v100 + 24);
          *(_OWORD *)(v99 + 40) = *(_OWORD *)(v100 + 40);
          *((_QWORD *)v99 + 7) = *((_QWORD *)v100 + 7);
          v114 = *(int *)(v36 + 28);
          v296 = v38;
          __dstf = &v99[v114];
          v115 = &v100[v114];
          v116 = sub_224F67874();
          v271 = *(_QWORD *)(v116 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v271 + 48))(v115, 1, v116))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__dstf, v115, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v271 + 32))(__dstf, v115, v116);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v271 + 56))(__dstf, 0, 1, v116);
          }
          *(_OWORD *)&v99[*(int *)(v36 + 32)] = *(_OWORD *)&v100[*(int *)(v36 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v37[7])(v99, 0, 1, v36);
          v38 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v296;
        }
        v185 = *(int *)(v101 + 20);
        v186 = &v99[v185];
        v187 = &v100[v185];
        if (v38(v187, 1, v36))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
        }
        else
        {
          v300 = v38;
          __dstj = v37;
          *v186 = *v187;
          *((_QWORD *)v186 + 1) = *((_QWORD *)v187 + 1);
          *((_DWORD *)v186 + 4) = *((_DWORD *)v187 + 4);
          *(_OWORD *)(v186 + 24) = *(_OWORD *)(v187 + 24);
          *(_OWORD *)(v186 + 40) = *(_OWORD *)(v187 + 40);
          *((_QWORD *)v186 + 7) = *((_QWORD *)v187 + 7);
          v189 = *(int *)(v36 + 28);
          v280 = &v186[v189];
          v190 = &v187[v189];
          v191 = sub_224F67874();
          v269 = *(void (***)(void *, const void *, uint64_t))(v191 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v269[6])(v190, 1, v191))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v280, v190, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
          }
          else
          {
            v269[4](v280, v190, v191);
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v269[7])(v280, 0, 1, v191);
          }
          *(_OWORD *)&v186[*(int *)(v36 + 32)] = *(_OWORD *)&v187[*(int *)(v36 + 32)];
          v37 = __dstj;
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstj[7])(v186, 0, 1, v36);
          v38 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v300;
        }
        __srcb[7](v99, 0, 1, v101);
      }
      v211 = v32[13];
      v212 = &a1[v211];
      v213 = &a2[v211];
      if (v38(&a2[v211], 1, v36))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
      }
      else
      {
        __dstl = (void (**)(char *, _QWORD, uint64_t, uint64_t))v37;
        *v212 = *v213;
        *((_QWORD *)v212 + 1) = *((_QWORD *)v213 + 1);
        *((_DWORD *)v212 + 4) = *((_DWORD *)v213 + 4);
        *(_OWORD *)(v212 + 24) = *(_OWORD *)(v213 + 24);
        *(_OWORD *)(v212 + 40) = *(_OWORD *)(v213 + 40);
        *((_QWORD *)v212 + 7) = *((_QWORD *)v213 + 7);
        v215 = *(int *)(v36 + 28);
        v216 = &v212[v215];
        v217 = &v213[v215];
        v218 = sub_224F67874();
        v219 = *(_QWORD *)(v218 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v219 + 48))(v217, 1, v218))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v216, v217, *(_QWORD *)(*(_QWORD *)(v220 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v219 + 32))(v216, v217, v218);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v219 + 56))(v216, 0, 1, v218);
        }
        *(_OWORD *)&v212[*(int *)(v36 + 32)] = *(_OWORD *)&v213[*(int *)(v36 + 32)];
        __dstl[7](v212, 0, 1, v36);
      }
      *(_QWORD *)&a1[v32[14]] = *(_QWORD *)&a2[v32[14]];
      *(_OWORD *)&a1[v32[15]] = *(_OWORD *)&a2[v32[15]];
      v221 = v32[16];
      v222 = &a1[v221];
      v223 = &a2[v221];
      *(_OWORD *)v222 = *(_OWORD *)v223;
      *((_QWORD *)v222 + 2) = *((_QWORD *)v223 + 2);
      v224 = v32[17];
      v225 = &a1[v224];
      v226 = &a2[v224];
      v227 = type metadata accessor for Quantity();
      v228 = *(_QWORD *)(v227 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v228 + 48))(v226, 1, v227))
      {
        sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v225, v226, *(_QWORD *)(*(_QWORD *)(v229 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v225 = *(_OWORD *)v226;
        *(_QWORD *)(v225 + 13) = *(_QWORD *)(v226 + 13);
        *(_OWORD *)(v225 + 24) = *(_OWORD *)(v226 + 24);
        *(_OWORD *)(v225 + 40) = *(_OWORD *)(v226 + 40);
        v230 = *(int *)(v227 + 28);
        __dstm = &v225[v230];
        v231 = &v226[v230];
        v232 = sub_224F675D4();
        v233 = *(_QWORD *)(v232 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v233 + 48))(v231, 1, v232))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(__dstm, v231, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v233 + 32))(__dstm, v231, v232);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v233 + 56))(__dstm, 0, 1, v232);
        }
        *(_OWORD *)&v225[*(int *)(v227 + 32)] = *(_OWORD *)&v226[*(int *)(v227 + 32)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v228 + 56))(v225, 0, 1, v227);
      }
      *(_QWORD *)&a1[v32[18]] = *(_QWORD *)&a2[v32[18]];
      *(_OWORD *)&a1[v32[19]] = *(_OWORD *)&a2[v32[19]];
LABEL_148:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithTake for ModelsDSTU2.ResourceProxy(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  __int128 v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned int (*v38)(_QWORD, _QWORD, _QWORD);
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unsigned int (**v45)(_OWORD *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unsigned int (**v75)(_BYTE *, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned int (*v89)(_QWORD, _QWORD, _QWORD);
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unsigned int (**v96)(_OWORD *, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unsigned int (**v102)(_BYTE *, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unsigned int (*v122)(_QWORD, _QWORD, _QWORD);
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unsigned int (*v153)(_QWORD, _QWORD, _QWORD);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  __int128 v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unsigned int (**v178)(_OWORD *, uint64_t, uint64_t);
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v266;
  void (**v267)(void *, const void *, uint64_t);
  void (**v268)(void *, const void *, uint64_t);
  void (**v269)(void *, const void *, uint64_t);
  uint64_t v270;
  uint64_t v271;
  unsigned int (*v272)(_QWORD, _QWORD, _QWORD);
  uint64_t v273;
  unsigned int (*v274)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v275)(_QWORD, _QWORD, _QWORD);
  void (**v276)(void *, void *, _QWORD);
  char *v277;
  char *v278;
  char *v279;
  char *v280;
  char *v281;
  void *v282;
  void *v283;
  void *v284;
  void *__src;
  void (**__srca)(char *, _QWORD, uint64_t, uint64_t);
  void (**__srcb)(char *, _QWORD, uint64_t, uint64_t);
  void (**__srcc)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD *__srcd;
  void (**__srce)(char *, _QWORD, uint64_t, uint64_t);
  void *v291;
  void *v292;
  void (**v293)(char *, _QWORD, uint64_t, uint64_t);
  void *v294;
  _QWORD *v295;
  void *v296;
  void *v297;
  void *v298;
  _QWORD *v299;
  void *v300;
  char *v301;
  _QWORD *__dst;
  char *__dsta;
  _QWORD *__dstb;
  char *__dstc;
  void *__dstd;
  char *__dste;
  char *__dstf;
  _QWORD *__dstg;
  _QWORD *__dsth;
  char *__dsti;
  _QWORD *__dstj;
  void (**__dstk)(char *, _QWORD, uint64_t, uint64_t);
  void (**__dstl)(char *, _QWORD, uint64_t, uint64_t);
  char *__dstm;

  if (a1 != a2)
  {
    sub_224DDEAA0((uint64_t)a1, type metadata accessor for ModelsDSTU2.ResourceProxy);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        v6 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
        v7 = v6[6];
        v8 = &a1[v7];
        v9 = &a2[v7];
        v10 = type metadata accessor for Reference();
        v11 = *(_QWORD *)(v10 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        }
        else
        {
          v40 = *((_OWORD *)v9 + 1);
          *(_OWORD *)v8 = *(_OWORD *)v9;
          *((_OWORD *)v8 + 1) = v40;
          v41 = *(int *)(v10 + 24);
          v42 = &v8[v41];
          v43 = &v9[v41];
          v44 = type metadata accessor for Identifier();
          v45 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v44 - 8);
          if (((unsigned int (**)(char *, uint64_t, uint64_t))v45)[6](v43, 1, v44))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
          }
          else
          {
            v64 = *((_OWORD *)v43 + 1);
            *(_OWORD *)v42 = *(_OWORD *)v43;
            *((_OWORD *)v42 + 1) = v64;
            *((_QWORD *)v42 + 4) = *((_QWORD *)v43 + 4);
            v65 = *(int *)(v44 + 24);
            v293 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v45;
            __dstc = &v42[v65];
            v66 = &v43[v65];
            v67 = sub_224F675D4();
            v276 = *(void (***)(void *, void *, _QWORD))(v67 - 8);
            __src = v66;
            v68 = v66;
            v69 = v67;
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v276[6])(v68, 1, v67))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__dstc, __src, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
            }
            else
            {
              v276[4](__dstc, __src, v69);
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v276[7])(__dstc, 0, 1, v69);
            }
            *(_OWORD *)&v42[*(int *)(v44 + 28)] = *(_OWORD *)&v43[*(int *)(v44 + 28)];
            v293[7](v42, 0, 1, v44);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
        }
        v118 = v6[7];
        v119 = &a1[v118];
        v120 = &a2[v118];
        v121 = type metadata accessor for FHIRDateTime();
        __dstg = *(_QWORD **)(v121 - 8);
        v122 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstg[6];
        v297 = v122;
        if (v122(v120, 1, v121))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
        }
        else
        {
          *v119 = *v120;
          *((_QWORD *)v119 + 1) = *((_QWORD *)v120 + 1);
          *((_DWORD *)v119 + 4) = *((_DWORD *)v120 + 4);
          *(_OWORD *)(v119 + 24) = *(_OWORD *)(v120 + 24);
          *(_OWORD *)(v119 + 40) = *(_OWORD *)(v120 + 40);
          *((_QWORD *)v119 + 7) = *((_QWORD *)v120 + 7);
          v124 = *(int *)(v121 + 28);
          v125 = &v119[v124];
          v126 = &v120[v124];
          v127 = sub_224F67874();
          v128 = *(_QWORD *)(v127 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v125, v126, v127);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
          }
          *(_OWORD *)&v119[*(int *)(v121 + 32)] = *(_OWORD *)&v120[*(int *)(v121 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstg[7])(v119, 0, 1, v121);
          v122 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v297;
        }
        v130 = v6[8];
        v131 = &a1[v130];
        v132 = &a2[v130];
        *(_OWORD *)v131 = *(_OWORD *)v132;
        *((_QWORD *)v131 + 2) = *((_QWORD *)v132 + 2);
        v133 = v6[9];
        v134 = &a1[v133];
        v135 = &a2[v133];
        *((_QWORD *)v134 + 2) = *((_QWORD *)v135 + 2);
        *(_OWORD *)v134 = *(_OWORD *)v135;
        *(_OWORD *)&a1[v6[10]] = *(_OWORD *)&a2[v6[10]];
        *(_OWORD *)&a1[v6[11]] = *(_OWORD *)&a2[v6[11]];
        v136 = v6[12];
        v137 = &a1[v136];
        v138 = &a2[v136];
        *(_OWORD *)v137 = *(_OWORD *)v138;
        *((_QWORD *)v137 + 2) = *((_QWORD *)v138 + 2);
        *(_QWORD *)&a1[v6[13]] = *(_QWORD *)&a2[v6[13]];
        v139 = v6[14];
        v140 = &a1[v139];
        v141 = &a2[v139];
        if (v122(&a2[v139], 1, v121))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
        }
        else
        {
          *v140 = *v141;
          *((_QWORD *)v140 + 1) = *((_QWORD *)v141 + 1);
          *((_DWORD *)v140 + 4) = *((_DWORD *)v141 + 4);
          *(_OWORD *)(v140 + 24) = *(_OWORD *)(v141 + 24);
          *(_OWORD *)(v140 + 40) = *(_OWORD *)(v141 + 40);
          *((_QWORD *)v140 + 7) = *((_QWORD *)v141 + 7);
          v143 = *(int *)(v121 + 28);
          v144 = &v140[v143];
          v145 = &v141[v143];
          v146 = sub_224F67874();
          v147 = *(_QWORD *)(v146 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v147 + 32))(v144, v145, v146);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v147 + 56))(v144, 0, 1, v146);
          }
          *(_OWORD *)&v140[*(int *)(v121 + 32)] = *(_OWORD *)&v141[*(int *)(v121 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstg[7])(v140, 0, 1, v121);
          v122 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v297;
        }
        v149 = v6[15];
        v150 = &a1[v149];
        v151 = &a2[v149];
        v152 = type metadata accessor for Period();
        __srcd = *(_QWORD **)(v152 - 8);
        v153 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__srcd[6];
        if (v153(v151, 1, v152))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
        }
        else
        {
          if (v122(v151, 1, v121))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
          }
          else
          {
            *v150 = *v151;
            *((_QWORD *)v150 + 1) = *((_QWORD *)v151 + 1);
            *((_DWORD *)v150 + 4) = *((_DWORD *)v151 + 4);
            *(_OWORD *)(v150 + 24) = *(_OWORD *)(v151 + 24);
            *(_OWORD *)(v150 + 40) = *(_OWORD *)(v151 + 40);
            *((_QWORD *)v150 + 7) = *((_QWORD *)v151 + 7);
            v156 = *(int *)(v121 + 28);
            v272 = v153;
            v278 = &v150[v156];
            v157 = &v151[v156];
            v158 = sub_224F67874();
            v159 = *(_QWORD *)(v158 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v157, 1, v158))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v278, v157, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v159 + 32))(v278, v157, v158);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v278, 0, 1, v158);
            }
            *(_OWORD *)&v150[*(int *)(v121 + 32)] = *(_OWORD *)&v151[*(int *)(v121 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstg[7])(v150, 0, 1, v121);
            v122 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v297;
            v153 = v272;
          }
          v193 = *(int *)(v152 + 20);
          v194 = &v150[v193];
          v195 = &v151[v193];
          if (v122(v195, 1, v121))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
          }
          else
          {
            *v194 = *v195;
            *((_QWORD *)v194 + 1) = *((_QWORD *)v195 + 1);
            *((_DWORD *)v194 + 4) = *((_DWORD *)v195 + 4);
            *(_OWORD *)(v194 + 24) = *(_OWORD *)(v195 + 24);
            *(_OWORD *)(v194 + 40) = *(_OWORD *)(v195 + 40);
            *((_QWORD *)v194 + 7) = *((_QWORD *)v195 + 7);
            v197 = *(int *)(v121 + 28);
            v274 = v153;
            v281 = &v194[v197];
            v198 = &v195[v197];
            v199 = sub_224F67874();
            v266 = *(_QWORD *)(v199 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v266 + 48))(v198, 1, v199))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v281, v198, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v266 + 32))(v281, v198, v199);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v266 + 56))(v281, 0, 1, v199);
            }
            v153 = v274;
            *(_OWORD *)&v194[*(int *)(v121 + 32)] = *(_OWORD *)&v195[*(int *)(v121 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstg[7])(v194, 0, 1, v121);
            v122 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v297;
          }
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srcd[7])(v150, 0, 1, v152);
        }
        *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
        v235 = v6[17];
        v236 = &a1[v235];
        v237 = &a2[v235];
        if (v122(&a2[v235], 1, v121))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
        }
        else
        {
          v275 = v153;
          v282 = (void *)v152;
          *v236 = *v237;
          *((_QWORD *)v236 + 1) = *((_QWORD *)v237 + 1);
          *((_DWORD *)v236 + 4) = *((_DWORD *)v237 + 4);
          *(_OWORD *)(v236 + 24) = *(_OWORD *)(v237 + 24);
          *(_OWORD *)(v236 + 40) = *(_OWORD *)(v237 + 40);
          *((_QWORD *)v236 + 7) = *((_QWORD *)v237 + 7);
          v239 = *(int *)(v121 + 28);
          v240 = &v236[v239];
          v241 = &v237[v239];
          v242 = sub_224F67874();
          v243 = *(_QWORD *)(v242 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v243 + 48))(v241, 1, v242))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v243 + 32))(v240, v241, v242);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v243 + 56))(v240, 0, 1, v242);
          }
          v152 = (uint64_t)v282;
          *(_OWORD *)&v236[*(int *)(v121 + 32)] = *(_OWORD *)&v237[*(int *)(v121 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstg[7])(v236, 0, 1, v121);
          v122 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v297;
          v153 = v275;
        }
        v245 = v6[18];
        v246 = &a1[v245];
        v247 = &a2[v245];
        if (v153(&a2[v245], 1, v152))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v246, v247, *(_QWORD *)(*(_QWORD *)(v248 - 8) + 64));
        }
        else
        {
          if (v122(v247, 1, v121))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v246, v247, *(_QWORD *)(*(_QWORD *)(v249 - 8) + 64));
          }
          else
          {
            v283 = (void *)v152;
            *v246 = *v247;
            *((_QWORD *)v246 + 1) = *((_QWORD *)v247 + 1);
            *((_DWORD *)v246 + 4) = *((_DWORD *)v247 + 4);
            *(_OWORD *)(v246 + 24) = *(_OWORD *)(v247 + 24);
            *(_OWORD *)(v246 + 40) = *(_OWORD *)(v247 + 40);
            *((_QWORD *)v246 + 7) = *((_QWORD *)v247 + 7);
            v250 = *(int *)(v121 + 28);
            v251 = &v246[v250];
            v252 = &v247[v250];
            v253 = sub_224F67874();
            v254 = *(_QWORD *)(v253 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v254 + 48))(v252, 1, v253))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v251, v252, *(_QWORD *)(*(_QWORD *)(v255 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v254 + 32))(v251, v252, v253);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v254 + 56))(v251, 0, 1, v253);
            }
            v152 = (uint64_t)v283;
            *(_OWORD *)&v246[*(int *)(v121 + 32)] = *(_OWORD *)&v247[*(int *)(v121 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstg[7])(v246, 0, 1, v121);
            v122 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v297;
          }
          v256 = *(int *)(v152 + 20);
          v257 = &v246[v256];
          v258 = &v247[v256];
          if (v122(v258, 1, v121))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v257, v258, *(_QWORD *)(*(_QWORD *)(v259 - 8) + 64));
          }
          else
          {
            v284 = (void *)v152;
            *v257 = *v258;
            *((_QWORD *)v257 + 1) = *((_QWORD *)v258 + 1);
            *((_DWORD *)v257 + 4) = *((_DWORD *)v258 + 4);
            *(_OWORD *)(v257 + 24) = *(_OWORD *)(v258 + 24);
            *(_OWORD *)(v257 + 40) = *(_OWORD *)(v258 + 40);
            *((_QWORD *)v257 + 7) = *((_QWORD *)v258 + 7);
            v260 = *(int *)(v121 + 28);
            v301 = &v257[v260];
            v261 = &v258[v260];
            v262 = sub_224F67874();
            v263 = *(_QWORD *)(v262 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v263 + 48))(v261, 1, v262))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v301, v261, *(_QWORD *)(*(_QWORD *)(v264 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v263 + 32))(v301, v261, v262);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v263 + 56))(v301, 0, 1, v262);
            }
            *(_OWORD *)&v257[*(int *)(v121 + 32)] = *(_OWORD *)&v258[*(int *)(v121 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstg[7])(v257, 0, 1, v121);
            v152 = (uint64_t)v284;
          }
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srcd[7])(v246, 0, 1, v152);
        }
        *(_OWORD *)&a1[v6[19]] = *(_OWORD *)&a2[v6[19]];
        *(_OWORD *)&a1[v6[20]] = *(_OWORD *)&a2[v6[20]];
        *(_OWORD *)&a1[v6[21]] = *(_OWORD *)&a2[v6[21]];
        goto LABEL_149;
      case 2u:
        v13 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v13;
        v14 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v14;
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        v15 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
        v16 = v15[9];
        v17 = &a1[v16];
        v18 = &a2[v16];
        v19 = type metadata accessor for FHIRDateTime();
        v20 = *(_QWORD **)(v19 - 8);
        v21 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v20[6];
        if (v21(v18, 1, v19))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
        }
        else
        {
          v291 = v21;
          __dst = v20;
          *v17 = *v18;
          *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
          *((_DWORD *)v17 + 4) = *((_DWORD *)v18 + 4);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
          *(_OWORD *)(v17 + 40) = *(_OWORD *)(v18 + 40);
          *((_QWORD *)v17 + 7) = *((_QWORD *)v18 + 7);
          v47 = *(int *)(v19 + 28);
          v48 = &v17[v47];
          v49 = &v18[v47];
          v50 = sub_224F67874();
          v51 = *(_QWORD *)(v50 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v49, v50);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
          }
          *(_OWORD *)&v17[*(int *)(v19 + 32)] = *(_OWORD *)&v18[*(int *)(v19 + 32)];
          v20 = __dst;
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dst[7])(v17, 0, 1, v19);
          v21 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v291;
        }
        v71 = v15[10];
        v72 = &a1[v71];
        v73 = &a2[v71];
        v74 = type metadata accessor for Period();
        v75 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v74 - 8);
        if (v75[6](v73, 1, v74))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
        }
        else
        {
          __srca = (void (**)(char *, _QWORD, uint64_t, uint64_t))v75;
          if (v21(v73, 1, v19))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
          }
          else
          {
            *v72 = *v73;
            *((_QWORD *)v72 + 1) = *((_QWORD *)v73 + 1);
            *((_DWORD *)v72 + 4) = *((_DWORD *)v73 + 4);
            *(_OWORD *)(v72 + 24) = *(_OWORD *)(v73 + 24);
            *(_OWORD *)(v72 + 40) = *(_OWORD *)(v73 + 40);
            *((_QWORD *)v72 + 7) = *((_QWORD *)v73 + 7);
            v105 = *(int *)(v19 + 28);
            v294 = v21;
            __dste = &v72[v105];
            v106 = &v73[v105];
            v107 = sub_224F67874();
            v270 = *(_QWORD *)(v107 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v270 + 48))(v106, 1, v107))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__dste, v106, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v270 + 32))(__dste, v106, v107);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v270 + 56))(__dste, 0, 1, v107);
            }
            *(_OWORD *)&v72[*(int *)(v19 + 32)] = *(_OWORD *)&v73[*(int *)(v19 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v20[7])(v72, 0, 1, v19);
            v21 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v294;
          }
          v161 = *(int *)(v74 + 20);
          v162 = &v72[v161];
          v163 = &v73[v161];
          if (v21(v163, 1, v19))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
          }
          else
          {
            v298 = v21;
            __dsth = v20;
            *v162 = *v163;
            *((_QWORD *)v162 + 1) = *((_QWORD *)v163 + 1);
            *((_DWORD *)v162 + 4) = *((_DWORD *)v163 + 4);
            *(_OWORD *)(v162 + 24) = *(_OWORD *)(v163 + 24);
            *(_OWORD *)(v162 + 40) = *(_OWORD *)(v163 + 40);
            *((_QWORD *)v162 + 7) = *((_QWORD *)v163 + 7);
            v165 = *(int *)(v19 + 28);
            v279 = &v162[v165];
            v166 = &v163[v165];
            v167 = sub_224F67874();
            v268 = *(void (***)(void *, const void *, uint64_t))(v167 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v268[6])(v166, 1, v167))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v279, v166, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
            }
            else
            {
              v268[4](v279, v166, v167);
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v268[7])(v279, 0, 1, v167);
            }
            *(_OWORD *)&v162[*(int *)(v19 + 32)] = *(_OWORD *)&v163[*(int *)(v19 + 32)];
            v20 = __dsth;
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dsth[7])(v162, 0, 1, v19);
            v21 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v298;
          }
          __srca[7](v72, 0, 1, v74);
        }
        v201 = v15[11];
        v202 = &a1[v201];
        v203 = &a2[v201];
        if (v21(&a2[v201], 1, v19))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
        }
        else
        {
          __dstk = (void (**)(char *, _QWORD, uint64_t, uint64_t))v20;
          *v202 = *v203;
          *((_QWORD *)v202 + 1) = *((_QWORD *)v203 + 1);
          *((_DWORD *)v202 + 4) = *((_DWORD *)v203 + 4);
          *(_OWORD *)(v202 + 24) = *(_OWORD *)(v203 + 24);
          *(_OWORD *)(v202 + 40) = *(_OWORD *)(v203 + 40);
          *((_QWORD *)v202 + 7) = *((_QWORD *)v203 + 7);
          v205 = *(int *)(v19 + 28);
          v206 = &v202[v205];
          v207 = &v203[v205];
          v208 = sub_224F67874();
          v209 = *(_QWORD *)(v208 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v207, 1, v208))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v206, v207, *(_QWORD *)(*(_QWORD *)(v210 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v209 + 32))(v206, v207, v208);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v209 + 56))(v206, 0, 1, v208);
          }
          *(_OWORD *)&v202[*(int *)(v19 + 32)] = *(_OWORD *)&v203[*(int *)(v19 + 32)];
          __dstk[7](v202, 0, 1, v19);
        }
        *(_OWORD *)&a1[v15[12]] = *(_OWORD *)&a2[v15[12]];
        goto LABEL_149;
      case 3u:
        v23 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v23;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        v24 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
        v25 = v24[8];
        v26 = &a1[v25];
        v27 = &a2[v25];
        v28 = type metadata accessor for FHIRDateTime();
        v29 = *(_QWORD *)(v28 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          *v26 = *v27;
          *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
          *((_DWORD *)v26 + 4) = *((_DWORD *)v27 + 4);
          *(_OWORD *)(v26 + 24) = *(_OWORD *)(v27 + 24);
          *(_OWORD *)(v26 + 40) = *(_OWORD *)(v27 + 40);
          *((_QWORD *)v26 + 7) = *((_QWORD *)v27 + 7);
          v53 = *(int *)(v28 + 28);
          __dsta = &v26[v53];
          v54 = &v27[v53];
          v55 = sub_224F67874();
          v56 = *(_QWORD *)(v55 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__dsta, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v56 + 32))(__dsta, v54, v55);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(__dsta, 0, 1, v55);
          }
          *(_OWORD *)&v26[*(int *)(v28 + 32)] = *(_OWORD *)&v27[*(int *)(v28 + 32)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
        }
        v78 = v24[9];
        v79 = &a1[v78];
        v80 = &a2[v78];
        *(_QWORD *)v79 = *(_QWORD *)v80;
        *(_QWORD *)(v79 + 5) = *(_QWORD *)(v80 + 5);
        *(_QWORD *)&a1[v24[10]] = *(_QWORD *)&a2[v24[10]];
        a1[v24[11]] = a2[v24[11]];
        *(_QWORD *)&a1[v24[12]] = *(_QWORD *)&a2[v24[12]];
        v81 = v24[13];
        v82 = &a1[v81];
        v83 = &a2[v81];
        *(_OWORD *)v82 = *(_OWORD *)v83;
        *((_QWORD *)v82 + 2) = *((_QWORD *)v83 + 2);
        a1[v24[14]] = a2[v24[14]];
        v84 = v24[15];
        v85 = &a1[v84];
        v86 = &a2[v84];
        v87 = type metadata accessor for Reference();
        v88 = *(_QWORD **)(v87 - 8);
        v89 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v88[6];
        if (v89(v86, 1, v87))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
        }
        else
        {
          __dstd = v89;
          v91 = *((_OWORD *)v86 + 1);
          *(_OWORD *)v85 = *(_OWORD *)v86;
          *((_OWORD *)v85 + 1) = v91;
          v92 = *(int *)(v87 + 24);
          v93 = &v85[v92];
          v94 = &v86[v92];
          v95 = type metadata accessor for Identifier();
          v96 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v95 - 8);
          if (((unsigned int (**)(char *, uint64_t, uint64_t))v96)[6](v94, 1, v95))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
          }
          else
          {
            __srcc = (void (**)(char *, _QWORD, uint64_t, uint64_t))v96;
            v295 = v88;
            v109 = *((_OWORD *)v94 + 1);
            *(_OWORD *)v93 = *(_OWORD *)v94;
            *((_OWORD *)v93 + 1) = v109;
            *((_QWORD *)v93 + 4) = *((_QWORD *)v94 + 4);
            v110 = *(int *)(v95 + 24);
            v277 = &v93[v110];
            v111 = &v94[v110];
            v112 = sub_224F675D4();
            v267 = *(void (***)(void *, const void *, uint64_t))(v112 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v267[6])(v111, 1, v112))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v277, v111, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
            }
            else
            {
              v267[4](v277, v111, v112);
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v267[7])(v277, 0, 1, v112);
            }
            *(_OWORD *)&v93[*(int *)(v95 + 28)] = *(_OWORD *)&v94[*(int *)(v95 + 28)];
            v88 = v295;
            __srcc[7](v93, 0, 1, v95);
          }
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v88[7])(v85, 0, 1, v87);
          v89 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstd;
        }
        *(_OWORD *)&a1[v24[16]] = *(_OWORD *)&a2[v24[16]];
        v169 = v24[17];
        v170 = &a1[v169];
        v171 = &a2[v169];
        if (v89(&a2[v169], 1, v87))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
        }
        else
        {
          v173 = *((_OWORD *)v171 + 1);
          *(_OWORD *)v170 = *(_OWORD *)v171;
          *((_OWORD *)v170 + 1) = v173;
          v174 = *(int *)(v87 + 24);
          v175 = &v170[v174];
          v176 = &v171[v174];
          v177 = type metadata accessor for Identifier();
          v178 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v177 - 8);
          if (((unsigned int (**)(char *, uint64_t, uint64_t))v178)[6](v176, 1, v177))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
          }
          else
          {
            __srce = (void (**)(char *, _QWORD, uint64_t, uint64_t))v178;
            v299 = v88;
            v180 = *((_OWORD *)v176 + 1);
            *(_OWORD *)v175 = *(_OWORD *)v176;
            *((_OWORD *)v175 + 1) = v180;
            *((_QWORD *)v175 + 4) = *((_QWORD *)v176 + 4);
            v181 = *(int *)(v177 + 24);
            __dsti = &v175[v181];
            v182 = &v176[v181];
            v183 = sub_224F675D4();
            v273 = *(_QWORD *)(v183 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v273 + 48))(v182, 1, v183))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__dsti, v182, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v273 + 32))(__dsti, v182, v183);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v273 + 56))(__dsti, 0, 1, v183);
            }
            *(_OWORD *)&v175[*(int *)(v177 + 28)] = *(_OWORD *)&v176[*(int *)(v177 + 28)];
            v88 = v299;
            __srce[7](v175, 0, 1, v177);
          }
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v88[7])(v170, 0, 1, v87);
        }
        *(_OWORD *)&a1[v24[18]] = *(_OWORD *)&a2[v24[18]];
        goto LABEL_149;
      case 4u:
        v31 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v31;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
        *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
        *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        v32 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
        v33 = v32[11];
        v34 = &a1[v33];
        v35 = &a2[v33];
        v36 = type metadata accessor for FHIRDateTime();
        v37 = *(_QWORD **)(v36 - 8);
        v38 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v37[6];
        if (v38(v35, 1, v36))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          v292 = v38;
          __dstb = v37;
          *v34 = *v35;
          *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
          *((_DWORD *)v34 + 4) = *((_DWORD *)v35 + 4);
          *(_OWORD *)(v34 + 24) = *(_OWORD *)(v35 + 24);
          *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
          *((_QWORD *)v34 + 7) = *((_QWORD *)v35 + 7);
          v58 = *(int *)(v36 + 28);
          v59 = &v34[v58];
          v60 = &v35[v58];
          v61 = sub_224F67874();
          v62 = *(_QWORD *)(v61 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v59, v60, v61);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
          }
          *(_OWORD *)&v34[*(int *)(v36 + 32)] = *(_OWORD *)&v35[*(int *)(v36 + 32)];
          v37 = __dstb;
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v34, 0, 1, v36);
          v38 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v292;
        }
        v98 = v32[12];
        v99 = &a1[v98];
        v100 = &a2[v98];
        v101 = type metadata accessor for Period();
        v102 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v101 - 8);
        if (v102[6](v100, 1, v101))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
        }
        else
        {
          __srcb = (void (**)(char *, _QWORD, uint64_t, uint64_t))v102;
          if (v38(v100, 1, v36))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
          }
          else
          {
            *v99 = *v100;
            *((_QWORD *)v99 + 1) = *((_QWORD *)v100 + 1);
            *((_DWORD *)v99 + 4) = *((_DWORD *)v100 + 4);
            *(_OWORD *)(v99 + 24) = *(_OWORD *)(v100 + 24);
            *(_OWORD *)(v99 + 40) = *(_OWORD *)(v100 + 40);
            *((_QWORD *)v99 + 7) = *((_QWORD *)v100 + 7);
            v114 = *(int *)(v36 + 28);
            v296 = v38;
            __dstf = &v99[v114];
            v115 = &v100[v114];
            v116 = sub_224F67874();
            v271 = *(_QWORD *)(v116 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v271 + 48))(v115, 1, v116))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__dstf, v115, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v271 + 32))(__dstf, v115, v116);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v271 + 56))(__dstf, 0, 1, v116);
            }
            *(_OWORD *)&v99[*(int *)(v36 + 32)] = *(_OWORD *)&v100[*(int *)(v36 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v37[7])(v99, 0, 1, v36);
            v38 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v296;
          }
          v185 = *(int *)(v101 + 20);
          v186 = &v99[v185];
          v187 = &v100[v185];
          if (v38(v187, 1, v36))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
          }
          else
          {
            v300 = v38;
            __dstj = v37;
            *v186 = *v187;
            *((_QWORD *)v186 + 1) = *((_QWORD *)v187 + 1);
            *((_DWORD *)v186 + 4) = *((_DWORD *)v187 + 4);
            *(_OWORD *)(v186 + 24) = *(_OWORD *)(v187 + 24);
            *(_OWORD *)(v186 + 40) = *(_OWORD *)(v187 + 40);
            *((_QWORD *)v186 + 7) = *((_QWORD *)v187 + 7);
            v189 = *(int *)(v36 + 28);
            v280 = &v186[v189];
            v190 = &v187[v189];
            v191 = sub_224F67874();
            v269 = *(void (***)(void *, const void *, uint64_t))(v191 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v269[6])(v190, 1, v191))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v280, v190, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
            }
            else
            {
              v269[4](v280, v190, v191);
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v269[7])(v280, 0, 1, v191);
            }
            *(_OWORD *)&v186[*(int *)(v36 + 32)] = *(_OWORD *)&v187[*(int *)(v36 + 32)];
            v37 = __dstj;
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstj[7])(v186, 0, 1, v36);
            v38 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v300;
          }
          __srcb[7](v99, 0, 1, v101);
        }
        v211 = v32[13];
        v212 = &a1[v211];
        v213 = &a2[v211];
        if (v38(&a2[v211], 1, v36))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
        }
        else
        {
          __dstl = (void (**)(char *, _QWORD, uint64_t, uint64_t))v37;
          *v212 = *v213;
          *((_QWORD *)v212 + 1) = *((_QWORD *)v213 + 1);
          *((_DWORD *)v212 + 4) = *((_DWORD *)v213 + 4);
          *(_OWORD *)(v212 + 24) = *(_OWORD *)(v213 + 24);
          *(_OWORD *)(v212 + 40) = *(_OWORD *)(v213 + 40);
          *((_QWORD *)v212 + 7) = *((_QWORD *)v213 + 7);
          v215 = *(int *)(v36 + 28);
          v216 = &v212[v215];
          v217 = &v213[v215];
          v218 = sub_224F67874();
          v219 = *(_QWORD *)(v218 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v219 + 48))(v217, 1, v218))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v216, v217, *(_QWORD *)(*(_QWORD *)(v220 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v219 + 32))(v216, v217, v218);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v219 + 56))(v216, 0, 1, v218);
          }
          *(_OWORD *)&v212[*(int *)(v36 + 32)] = *(_OWORD *)&v213[*(int *)(v36 + 32)];
          __dstl[7](v212, 0, 1, v36);
        }
        *(_QWORD *)&a1[v32[14]] = *(_QWORD *)&a2[v32[14]];
        *(_OWORD *)&a1[v32[15]] = *(_OWORD *)&a2[v32[15]];
        v221 = v32[16];
        v222 = &a1[v221];
        v223 = &a2[v221];
        *(_OWORD *)v222 = *(_OWORD *)v223;
        *((_QWORD *)v222 + 2) = *((_QWORD *)v223 + 2);
        v224 = v32[17];
        v225 = &a1[v224];
        v226 = &a2[v224];
        v227 = type metadata accessor for Quantity();
        v228 = *(_QWORD *)(v227 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v228 + 48))(v226, 1, v227))
        {
          sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v225, v226, *(_QWORD *)(*(_QWORD *)(v229 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v225 = *(_OWORD *)v226;
          *(_QWORD *)(v225 + 13) = *(_QWORD *)(v226 + 13);
          *(_OWORD *)(v225 + 24) = *(_OWORD *)(v226 + 24);
          *(_OWORD *)(v225 + 40) = *(_OWORD *)(v226 + 40);
          v230 = *(int *)(v227 + 28);
          __dstm = &v225[v230];
          v231 = &v226[v230];
          v232 = sub_224F675D4();
          v233 = *(_QWORD *)(v232 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v233 + 48))(v231, 1, v232))
          {
            sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__dstm, v231, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v233 + 32))(__dstm, v231, v232);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v233 + 56))(__dstm, 0, 1, v232);
          }
          *(_OWORD *)&v225[*(int *)(v227 + 32)] = *(_OWORD *)&v226[*(int *)(v227 + 32)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v228 + 56))(v225, 0, 1, v227);
        }
        *(_QWORD *)&a1[v32[18]] = *(_QWORD *)&a2[v32[18]];
        *(_OWORD *)&a1[v32[19]] = *(_OWORD *)&a2[v32[19]];
LABEL_149:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_224E9CDDC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = type metadata accessor for ModelsDSTU2.Condition(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ModelsDSTU2.DiagnosticReport(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for ModelsDSTU2.Immunization(319);
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for ModelsDSTU2.Observation(319);
        if (v4 <= 0x3F)
        {
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Bundle()
{
  return &type metadata for ModelsDSTU2.Bundle;
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsDSTU2.Bundle.BundleEntry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
    swift_bridgeObjectRetain();
    if (!v12(v10, 1, v11))
    {
      v15 = (char *)&loc_224E9CFC4 + 4 * byte_224F6F914[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    sub_224DDEA0C(0, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    v16 = *(int *)(a3 + 24);
    v17 = (uint64_t *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = *v18;
    v20 = v18[1];
    sub_224DDE970(*v18, v20);
    *v17 = v19;
    v17[1] = v20;
  }
  return v4;
}

uint64_t destroy for ModelsDSTU2.Bundle.BundleEntry(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned int (*v26)(_QWORD, _QWORD, _QWORD);
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  char *v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  char *v83;
  uint64_t v84;
  unsigned int (*v85)(char *, uint64_t, uint64_t);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(char *, uint64_t, uint64_t);
  unsigned int (*v110)(char *, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int (*v114)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v115)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v116)(_QWORD, _QWORD, _QWORD);

  swift_bridgeObjectRelease();
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 6u:
        goto LABEL_3;
      case 1u:
        swift_bridgeObjectRelease();
        if (v4[2] != 1)
          swift_bridgeObjectRelease();
        v6 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
        v7 = (char *)v4 + v6[6];
        v8 = type metadata accessor for Reference();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v9 = &v7[*(int *)(v8 + 24)];
          v10 = type metadata accessor for Identifier();
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
          {
            swift_bridgeObjectRelease();
            if (*((_QWORD *)v9 + 3) != 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            v11 = &v9[*(int *)(v10 + 24)];
            v12 = sub_224F675D4();
            v13 = *(_QWORD *)(v12 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
              (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
            swift_bridgeObjectRelease();
          }
        }
        v14 = (char *)v4 + v6[7];
        v15 = type metadata accessor for FHIRDateTime();
        v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48);
        if (!v16(v14, 1, v15))
        {
          if (*((_QWORD *)v14 + 7) != 1)
            swift_bridgeObjectRelease();
          v17 = &v14[*(int *)(v15 + 28)];
          v18 = sub_224F67874();
          v19 = *(_QWORD *)(v18 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
            (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)((char *)v4 + v6[9] + 8) != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)((char *)v4 + v6[12] + 8) != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v20 = (char *)v4 + v6[14];
        if (!v16(v20, 1, v15))
        {
          if (*((_QWORD *)v20 + 7) != 1)
            swift_bridgeObjectRelease();
          v21 = &v20[*(int *)(v15 + 28)];
          v22 = sub_224F67874();
          v23 = *(_QWORD *)(v22 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
            (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
          swift_bridgeObjectRelease();
        }
        v24 = (char *)v4 + v6[15];
        v25 = type metadata accessor for Period();
        v26 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v25 - 8) + 48);
        if (!v26(v24, 1, v25))
        {
          if (!v16(v24, 1, v15))
          {
            v114 = v26;
            if (*((_QWORD *)v24 + 7) != 1)
              swift_bridgeObjectRelease();
            v27 = &v24[*(int *)(v15 + 28)];
            v28 = sub_224F67874();
            v107 = *(_QWORD *)(v28 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v27, 1, v28))
              (*(void (**)(char *, uint64_t))(v107 + 8))(v27, v28);
            swift_bridgeObjectRelease();
            v26 = v114;
          }
          v29 = &v24[*(int *)(v25 + 20)];
          if (!v16(v29, 1, v15))
          {
            v115 = v26;
            if (*((_QWORD *)v29 + 7) != 1)
              swift_bridgeObjectRelease();
            v30 = &v29[*(int *)(v15 + 28)];
            v31 = sub_224F67874();
            v108 = *(_QWORD *)(v31 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v30, 1, v31))
              (*(void (**)(char *, uint64_t))(v108 + 8))(v30, v31);
            swift_bridgeObjectRelease();
            v26 = v115;
          }
        }
        swift_bridgeObjectRelease();
        v32 = (char *)v4 + v6[17];
        if (!v16(v32, 1, v15))
        {
          v109 = v16;
          v116 = v26;
          if (*((_QWORD *)v32 + 7) != 1)
            swift_bridgeObjectRelease();
          v33 = &v32[*(int *)(v15 + 28)];
          v34 = sub_224F67874();
          v35 = *(_QWORD *)(v34 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
            (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v34);
          swift_bridgeObjectRelease();
          v16 = v109;
          v26 = v116;
        }
        v36 = (char *)v4 + v6[18];
        if (!v26(v36, 1, v25))
        {
          if (!v16(v36, 1, v15))
          {
            v110 = v16;
            if (*((_QWORD *)v36 + 7) != 1)
              swift_bridgeObjectRelease();
            v37 = &v36[*(int *)(v15 + 28)];
            v38 = sub_224F67874();
            v39 = *(_QWORD *)(v38 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
              (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
            swift_bridgeObjectRelease();
            v16 = v110;
          }
          v40 = &v36[*(int *)(v25 + 20)];
          if (!v16(v40, 1, v15))
          {
            if (*((_QWORD *)v40 + 7) != 1)
              swift_bridgeObjectRelease();
            v41 = &v40[*(int *)(v15 + 28)];
            v42 = sub_224F67874();
            v43 = *(_QWORD *)(v42 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
              (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v42);
            swift_bridgeObjectRelease();
          }
        }
LABEL_3:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_147;
      case 2u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v44 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
        v45 = (char *)v4 + v44[9];
        v46 = type metadata accessor for FHIRDateTime();
        v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48);
        if (!v47(v45, 1, v46))
        {
          if (*((_QWORD *)v45 + 7) != 1)
            swift_bridgeObjectRelease();
          v48 = &v45[*(int *)(v46 + 28)];
          v49 = sub_224F67874();
          v50 = *(_QWORD *)(v49 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
            (*(void (**)(char *, uint64_t))(v50 + 8))(v48, v49);
          swift_bridgeObjectRelease();
        }
        v51 = (char *)v4 + v44[10];
        v52 = type metadata accessor for Period();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48))(v51, 1, v52))
        {
          if (!v47(v51, 1, v46))
          {
            if (*((_QWORD *)v51 + 7) != 1)
              swift_bridgeObjectRelease();
            v53 = &v51[*(int *)(v46 + 28)];
            v54 = sub_224F67874();
            v111 = *(_QWORD *)(v54 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v53, 1, v54))
              (*(void (**)(char *, uint64_t))(v111 + 8))(v53, v54);
            swift_bridgeObjectRelease();
          }
          v55 = &v51[*(int *)(v52 + 20)];
          if (!v47(v55, 1, v46))
          {
            if (*((_QWORD *)v55 + 7) != 1)
              swift_bridgeObjectRelease();
            v56 = &v55[*(int *)(v46 + 28)];
            v57 = sub_224F67874();
            v58 = *(_QWORD *)(v57 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
              (*(void (**)(char *, uint64_t))(v58 + 8))(v56, v57);
            swift_bridgeObjectRelease();
          }
        }
        v59 = (char *)v4 + v44[11];
        if (!v47(v59, 1, v46))
        {
          if (*((_QWORD *)v59 + 7) != 1)
            swift_bridgeObjectRelease();
          v60 = &v59[*(int *)(v46 + 28)];
          v61 = sub_224F67874();
          v62 = *(_QWORD *)(v61 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
            (*(void (**)(char *, uint64_t))(v62 + 8))(v60, v61);
          swift_bridgeObjectRelease();
        }
        goto LABEL_147;
      case 3u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[4] != 1)
          swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v63 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
        v64 = (char *)v4 + v63[8];
        v65 = type metadata accessor for FHIRDateTime();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 48))(v64, 1, v65))
        {
          if (*((_QWORD *)v64 + 7) != 1)
            swift_bridgeObjectRelease();
          v66 = &v64[*(int *)(v65 + 28)];
          v67 = sub_224F67874();
          v68 = *(_QWORD *)(v67 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
            (*(void (**)(char *, uint64_t))(v68 + 8))(v66, v67);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v69 = (char *)v4 + v63[15];
        v70 = type metadata accessor for Reference();
        v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48);
        if (!v71(v69, 1, v70))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v72 = &v69[*(int *)(v70 + 24)];
          v73 = type metadata accessor for Identifier();
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 48))(v72, 1, v73))
          {
            swift_bridgeObjectRelease();
            if (*((_QWORD *)v72 + 3) != 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            v74 = &v72[*(int *)(v73 + 24)];
            v75 = sub_224F675D4();
            v112 = *(_QWORD *)(v75 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v74, 1, v75))
              (*(void (**)(char *, uint64_t))(v112 + 8))(v74, v75);
            swift_bridgeObjectRelease();
          }
        }
        swift_bridgeObjectRelease();
        v76 = (char *)v4 + v63[17];
        if (!v71(v76, 1, v70))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v77 = &v76[*(int *)(v70 + 24)];
          v78 = type metadata accessor for Identifier();
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 48))(v77, 1, v78))
          {
            swift_bridgeObjectRelease();
            if (*((_QWORD *)v77 + 3) != 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            v79 = &v77[*(int *)(v78 + 24)];
            v80 = sub_224F675D4();
            v81 = *(_QWORD *)(v80 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
              (*(void (**)(char *, uint64_t))(v81 + 8))(v79, v80);
            swift_bridgeObjectRelease();
          }
        }
        goto LABEL_147;
      case 4u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[4] != 1)
          swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[8] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v82 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
        v83 = (char *)v4 + v82[11];
        v84 = type metadata accessor for FHIRDateTime();
        v85 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 48);
        if (!v85(v83, 1, v84))
        {
          if (*((_QWORD *)v83 + 7) != 1)
            swift_bridgeObjectRelease();
          v86 = &v83[*(int *)(v84 + 28)];
          v87 = sub_224F67874();
          v88 = *(_QWORD *)(v87 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
            (*(void (**)(char *, uint64_t))(v88 + 8))(v86, v87);
          swift_bridgeObjectRelease();
        }
        v89 = (char *)v4 + v82[12];
        v90 = type metadata accessor for Period();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 48))(v89, 1, v90))
        {
          if (!v85(v89, 1, v84))
          {
            if (*((_QWORD *)v89 + 7) != 1)
              swift_bridgeObjectRelease();
            v91 = &v89[*(int *)(v84 + 28)];
            v92 = sub_224F67874();
            v113 = *(_QWORD *)(v92 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v91, 1, v92))
              (*(void (**)(char *, uint64_t))(v113 + 8))(v91, v92);
            swift_bridgeObjectRelease();
          }
          v93 = &v89[*(int *)(v90 + 20)];
          if (!v85(v93, 1, v84))
          {
            if (*((_QWORD *)v93 + 7) != 1)
              swift_bridgeObjectRelease();
            v94 = &v93[*(int *)(v84 + 28)];
            v95 = sub_224F67874();
            v96 = *(_QWORD *)(v95 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
              (*(void (**)(char *, uint64_t))(v96 + 8))(v94, v95);
            swift_bridgeObjectRelease();
          }
        }
        v97 = (char *)v4 + v82[13];
        if (!v85(v97, 1, v84))
        {
          if (*((_QWORD *)v97 + 7) != 1)
            swift_bridgeObjectRelease();
          v98 = &v97[*(int *)(v84 + 28)];
          v99 = sub_224F67874();
          v100 = *(_QWORD *)(v99 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
            (*(void (**)(char *, uint64_t))(v100 + 8))(v98, v99);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)((char *)v4 + v82[16] + 8) != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v101 = (char *)v4 + v82[17];
        v102 = type metadata accessor for Quantity();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 48))(v101, 1, v102))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v103 = &v101[*(int *)(v102 + 28)];
          v104 = sub_224F675D4();
          v105 = *(_QWORD *)(v104 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
            (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v104);
          swift_bridgeObjectRelease();
        }
        goto LABEL_146;
      case 5u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[13] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
LABEL_146:
        swift_bridgeObjectRelease();
LABEL_147:
        swift_bridgeObjectRelease();
        break;
      default:
        return sub_224DDE9B4(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
    }
  }
  return sub_224DDE9B4(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

_QWORD *initializeWithCopy for ModelsDSTU2.Bundle.BundleEntry(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  swift_bridgeObjectRetain();
  if (!v11(v9, 1, v10))
  {
    v13 = (char *)&loc_224EA0B90 + 4 * byte_224F6F92A[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  sub_224DDEA0C(0, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  v14 = *(int *)(a3 + 24);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  sub_224DDE970(*v16, v18);
  *v15 = v17;
  v15[1] = v18;
  return a1;
}

_QWORD *assignWithCopy for ModelsDSTU2.Bundle.BundleEntry(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  v11 = v10(v7, 1, v9);
  v12 = v10(v8, 1, v9);
  if (v11)
  {
    if (!v12)
    {
      v15 = (char *)&loc_224EA3808 + 4 * word_224F6F932[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
    goto LABEL_6;
  }
  if (v12)
  {
    sub_224DDEAA0((uint64_t)v7, type metadata accessor for ModelsDSTU2.ResourceProxy);
    v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
    sub_224DDEA0C(0, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy, v13);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_10;
  }
  if (a1 != a2)
  {
    sub_224DDEAA0((uint64_t)v7, type metadata accessor for ModelsDSTU2.ResourceProxy);
    v16 = (char *)&loc_224EA3884 + 4 * word_224F6F940[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
LABEL_10:
  v17 = *(int *)(a3 + 24);
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = *v19;
  v21 = v19[1];
  sub_224DDE970(*v19, v21);
  v22 = *v18;
  v23 = v18[1];
  *v18 = v20;
  v18[1] = v21;
  sub_224DDE9B4(v22, v23);
  return a1;
}

_OWORD *initializeWithTake for ModelsDSTU2.Bundle.BundleEntry(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unsigned int (**v17)(_OWORD *, uint64_t, uint64_t);
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int *v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  int *v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned int (*v41)(_QWORD, _QWORD, _QWORD);
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  uint64_t v47;
  void (**v48)(void);
  uint64_t v49;
  void (**v50)(_OWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  unsigned int (**v77)(_BYTE *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  _OWORD *v87;
  _OWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  unsigned int (*v91)(_QWORD, _QWORD, _QWORD);
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  uint64_t v97;
  void (**v98)(void);
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  _BYTE *v102;
  uint64_t v103;
  unsigned int (**v104)(_BYTE *, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  _BYTE *v146;
  _BYTE *v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  _BYTE *v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _OWORD *v173;
  _OWORD *v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  _OWORD *v178;
  _OWORD *v179;
  uint64_t v180;
  void (**v181)(void);
  uint64_t v182;
  void *v183;
  __int128 v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _BYTE *v191;
  _BYTE *v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _BYTE *v200;
  _BYTE *v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _BYTE *v208;
  _BYTE *v209;
  uint64_t v210;
  uint64_t v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _BYTE *v217;
  _BYTE *v218;
  uint64_t v219;
  uint64_t v220;
  _BYTE *v221;
  _BYTE *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  _OWORD *v230;
  _OWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _BYTE *v241;
  _BYTE *v242;
  uint64_t v243;
  uint64_t v244;
  _BYTE *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE *v250;
  _BYTE *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int *v255;
  uint64_t v256;
  _BYTE *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _BYTE *v262;
  _BYTE *v263;
  uint64_t v264;
  uint64_t v265;
  _BYTE *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int *v274;
  _BYTE *v275;
  _BYTE *v276;
  _BYTE *v277;
  _BYTE *v278;
  void (**v279)(void *, const void *, uint64_t);
  char *v280;
  void *v281;
  _BYTE *v282;
  void (**v283)(void);
  _QWORD *v284;
  _BYTE *v285;
  void (**v286)(void);
  void (**v287)(void *, _QWORD, uint64_t, uint64_t);
  _BYTE *v288;
  int *v289;
  unsigned int (*v290)(_BYTE *, uint64_t, uint64_t);
  char *v291;
  _BYTE *v292;
  _BYTE *__dst;
  void *__dsta;
  int *__dstb;
  _BYTE *__dstc;
  char *__dstd;
  _QWORD *__dste;
  void (**__dstf)(void);
  void *__dstg;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _OWORD *v304;
  uint64_t v305;
  uint64_t v306;
  _OWORD *v307;
  int *__src;
  _QWORD *__srca;
  int *__srcb;
  void *__srcc;
  _BYTE *__srcd;
  _BYTE *__srce;
  int *__srcf;
  void *__srcg;
  char *__srch;
  _OWORD *v317;
  _OWORD *v318;
  _OWORD *v319;
  _OWORD *v320;
  unsigned int (*v321)(_BYTE *, uint64_t, uint64_t);
  int *v322;
  void *v323;
  _BYTE *v324;
  _QWORD *v325;
  unsigned int (*v326)(_BYTE *, uint64_t, uint64_t);
  void (**v327)(void *, _QWORD, uint64_t, uint64_t);
  _BYTE *v328;
  _BYTE *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;

  v3 = a3;
  v4 = a2;
  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (_OWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_224DDEA0C(0, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v332 = v3;
    v330 = v10;
    v331 = v9;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *v7 = *v8;
        *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
        v12 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
        v13 = v12[6];
        v14 = (_OWORD *)((char *)v7 + v13);
        v15 = (_OWORD *)((char *)v8 + v13);
        v16 = type metadata accessor for Reference();
        v17 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v16 - 8);
        if (v17[6](v15, 1, v16))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        }
        else
        {
          __srcb = v12;
          v323 = v17;
          v43 = v15[1];
          *v14 = *v15;
          v14[1] = v43;
          v44 = *(int *)(v16 + 24);
          v45 = (_OWORD *)((char *)v14 + v44);
          v46 = (_OWORD *)((char *)v15 + v44);
          v47 = type metadata accessor for Identifier();
          v48 = *(void (***)(void))(v47 - 8);
          if (((unsigned int (*)(_OWORD *, uint64_t, uint64_t))v48[6])(v46, 1, v47))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
            v50 = (void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))v323;
            v12 = __srcb;
          }
          else
          {
            v286 = v48;
            __dstb = (int *)v47;
            v67 = v46[1];
            *v45 = *v46;
            v45[1] = v67;
            *((_QWORD *)v45 + 4) = *((_QWORD *)v46 + 4);
            v68 = *(int *)(v47 + 24);
            v304 = v45;
            v280 = (char *)v45 + v68;
            v69 = (char *)v46 + v68;
            v70 = sub_224F675D4();
            v71 = *(_QWORD *)(v70 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v280, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v280, v69, v70);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v280, 0, 1, v70);
            }
            v50 = (void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))v323;
            v12 = __srcb;
            *(_OWORD *)((char *)v304 + __dstb[7]) = *(_OWORD *)((char *)v46 + __dstb[7]);
            v286[7]();
          }
          v50[7](v14, 0, 1, v16);
        }
        v126 = v12[7];
        v127 = (char *)v7 + v126;
        v128 = (char *)v8 + v126;
        v129 = type metadata accessor for FHIRDateTime();
        __dste = *(_QWORD **)(v129 - 8);
        v326 = (unsigned int (*)(_BYTE *, uint64_t, uint64_t))__dste[6];
        v306 = v129;
        if (v326(v128, 1, v129))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
        }
        else
        {
          *v127 = *v128;
          *((_QWORD *)v127 + 1) = *((_QWORD *)v128 + 1);
          *((_DWORD *)v127 + 4) = *((_DWORD *)v128 + 4);
          *(_OWORD *)(v127 + 24) = *(_OWORD *)(v128 + 24);
          *(_OWORD *)(v127 + 40) = *(_OWORD *)(v128 + 40);
          *((_QWORD *)v127 + 7) = *((_QWORD *)v128 + 7);
          v131 = *(int *)(v129 + 28);
          __srcd = &v127[v131];
          v132 = &v128[v131];
          v133 = sub_224F67874();
          v134 = *(_QWORD *)(v133 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__srcd, v132, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v134 + 32))(__srcd, v132, v133);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v134 + 56))(__srcd, 0, 1, v133);
          }
          v129 = v306;
          *(_OWORD *)&v127[*(int *)(v306 + 32)] = *(_OWORD *)&v128[*(int *)(v306 + 32)];
          ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dste[7])(v127, 0, 1, v306);
        }
        v136 = v12[8];
        v137 = (char *)v7 + v136;
        v138 = (char *)v8 + v136;
        *(_OWORD *)v137 = *(_OWORD *)v138;
        *((_QWORD *)v137 + 2) = *((_QWORD *)v138 + 2);
        v139 = v12[9];
        v140 = (char *)v7 + v139;
        v141 = (char *)v8 + v139;
        *((_QWORD *)v140 + 2) = *((_QWORD *)v141 + 2);
        *(_OWORD *)v140 = *(_OWORD *)v141;
        *(_OWORD *)((char *)v7 + v12[10]) = *(_OWORD *)((char *)v8 + v12[10]);
        *(_OWORD *)((char *)v7 + v12[11]) = *(_OWORD *)((char *)v8 + v12[11]);
        v142 = v12[12];
        v143 = (char *)v7 + v142;
        v144 = (char *)v8 + v142;
        *(_OWORD *)v143 = *(_OWORD *)v144;
        *((_QWORD *)v143 + 2) = *((_QWORD *)v144 + 2);
        *(_QWORD *)((char *)v7 + v12[13]) = *(_QWORD *)((char *)v8 + v12[13]);
        v145 = v12[14];
        v146 = (char *)v7 + v145;
        v147 = (char *)v8 + v145;
        if (v326((_BYTE *)v8 + v145, 1, v129))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
        }
        else
        {
          *v146 = *v147;
          *((_QWORD *)v146 + 1) = *((_QWORD *)v147 + 1);
          *((_DWORD *)v146 + 4) = *((_DWORD *)v147 + 4);
          *(_OWORD *)(v146 + 24) = *(_OWORD *)(v147 + 24);
          *(_OWORD *)(v146 + 40) = *(_OWORD *)(v147 + 40);
          *((_QWORD *)v146 + 7) = *((_QWORD *)v147 + 7);
          v149 = *(int *)(v129 + 28);
          __srce = &v146[v149];
          v150 = &v147[v149];
          v151 = sub_224F67874();
          v152 = *(_QWORD *)(v151 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v152 + 48))(v150, 1, v151))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__srce, v150, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v152 + 32))(__srce, v150, v151);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v152 + 56))(__srce, 0, 1, v151);
          }
          v129 = v306;
          *(_OWORD *)&v146[*(int *)(v306 + 32)] = *(_OWORD *)&v147[*(int *)(v306 + 32)];
          ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dste[7])(v146, 0, 1, v306);
        }
        v154 = v12[15];
        v155 = (char *)v7 + v154;
        v156 = (char *)v8 + v154;
        v157 = type metadata accessor for Period();
        v284 = *(_QWORD **)(v157 - 8);
        v290 = (unsigned int (*)(_BYTE *, uint64_t, uint64_t))v284[6];
        __srcf = (int *)v157;
        if (v290(v156, 1, v157))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
        }
        else
        {
          if (v326(v156, 1, v129))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
          }
          else
          {
            *v155 = *v156;
            *((_QWORD *)v155 + 1) = *((_QWORD *)v156 + 1);
            *((_DWORD *)v155 + 4) = *((_DWORD *)v156 + 4);
            *(_OWORD *)(v155 + 24) = *(_OWORD *)(v156 + 24);
            *(_OWORD *)(v155 + 40) = *(_OWORD *)(v156 + 40);
            *((_QWORD *)v155 + 7) = *((_QWORD *)v156 + 7);
            v160 = *(int *)(v129 + 28);
            v275 = &v155[v160];
            v161 = &v156[v160];
            v162 = sub_224F67874();
            v270 = *(_QWORD *)(v162 - 8);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v270 + 48))(v161, 1, v162))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v275, v161, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
            }
            else
            {
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v270 + 32))(v275, v161, v162);
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v270 + 56))(v275, 0, 1, v162);
            }
            v157 = (uint64_t)__srcf;
            *(_OWORD *)&v155[*(int *)(v129 + 32)] = *(_OWORD *)&v156[*(int *)(v129 + 32)];
            ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dste[7])(v155, 0, 1, v129);
          }
          v199 = *(int *)(v157 + 20);
          v200 = &v155[v199];
          v201 = &v156[v199];
          if (v326(&v156[v199], 1, v129))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v202 - 8) + 64));
          }
          else
          {
            *v200 = *v201;
            *((_QWORD *)v200 + 1) = *((_QWORD *)v201 + 1);
            *((_DWORD *)v200 + 4) = *((_DWORD *)v201 + 4);
            *(_OWORD *)(v200 + 24) = *(_OWORD *)(v201 + 24);
            *(_OWORD *)(v200 + 40) = *(_OWORD *)(v201 + 40);
            *((_QWORD *)v200 + 7) = *((_QWORD *)v201 + 7);
            v203 = *(int *)(v129 + 28);
            v277 = &v200[v203];
            v204 = &v201[v203];
            v205 = sub_224F67874();
            v271 = *(_QWORD *)(v205 - 8);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v271 + 48))(v204, 1, v205))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v277, v204, *(_QWORD *)(*(_QWORD *)(v206 - 8) + 64));
            }
            else
            {
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v271 + 32))(v277, v204, v205);
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v271 + 56))(v277, 0, 1, v205);
            }
            v129 = v306;
            *(_OWORD *)&v200[*(int *)(v306 + 32)] = *(_OWORD *)&v201[*(int *)(v306 + 32)];
            ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dste[7])(v200, 0, 1, v306);
          }
          ((void (*)(_BYTE *, _QWORD, uint64_t, int *))v284[7])(v155, 0, 1, __srcf);
        }
        *(_OWORD *)((char *)v7 + v12[16]) = *(_OWORD *)((char *)v8 + v12[16]);
        v240 = v12[17];
        v241 = (char *)v7 + v240;
        v242 = (char *)v8 + v240;
        if (v326((_BYTE *)v8 + v240, 1, v129))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v241, v242, *(_QWORD *)(*(_QWORD *)(v243 - 8) + 64));
        }
        else
        {
          *v241 = *v242;
          *((_QWORD *)v241 + 1) = *((_QWORD *)v242 + 1);
          *((_DWORD *)v241 + 4) = *((_DWORD *)v242 + 4);
          *(_OWORD *)(v241 + 24) = *(_OWORD *)(v242 + 24);
          *(_OWORD *)(v241 + 40) = *(_OWORD *)(v242 + 40);
          *((_QWORD *)v241 + 7) = *((_QWORD *)v242 + 7);
          v244 = *(int *)(v129 + 28);
          v278 = &v241[v244];
          v245 = &v242[v244];
          v246 = sub_224F67874();
          v247 = *(_QWORD *)(v246 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v247 + 48))(v245, 1, v246))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v278, v245, *(_QWORD *)(*(_QWORD *)(v248 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v247 + 32))(v278, v245, v246);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v247 + 56))(v278, 0, 1, v246);
          }
          *(_OWORD *)&v241[*(int *)(v306 + 32)] = *(_OWORD *)&v242[*(int *)(v306 + 32)];
          ((void (*)(_BYTE *, _QWORD, uint64_t))__dste[7])(v241, 0, 1);
        }
        v3 = v332;
        v10 = v330;
        v9 = v331;
        v249 = v12[18];
        v250 = (char *)v7 + v249;
        v251 = (char *)v8 + v249;
        if (v290((_BYTE *)v8 + v249, 1, (uint64_t)__srcf))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v250, v251, *(_QWORD *)(*(_QWORD *)(v252 - 8) + 64));
        }
        else
        {
          v253 = v306;
          if (v326(v251, 1, v306))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v250, v251, *(_QWORD *)(*(_QWORD *)(v254 - 8) + 64));
            v255 = __srcf;
          }
          else
          {
            *v250 = *v251;
            *((_QWORD *)v250 + 1) = *((_QWORD *)v251 + 1);
            *((_DWORD *)v250 + 4) = *((_DWORD *)v251 + 4);
            *(_OWORD *)(v250 + 24) = *(_OWORD *)(v251 + 24);
            *(_OWORD *)(v250 + 40) = *(_OWORD *)(v251 + 40);
            *((_QWORD *)v250 + 7) = *((_QWORD *)v251 + 7);
            v256 = *(int *)(v306 + 28);
            v292 = &v250[v256];
            v257 = &v251[v256];
            v258 = sub_224F67874();
            v259 = *(_QWORD *)(v258 - 8);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v259 + 48))(v257, 1, v258))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v292, v257, *(_QWORD *)(*(_QWORD *)(v260 - 8) + 64));
            }
            else
            {
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v259 + 32))(v292, v257, v258);
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v259 + 56))(v292, 0, 1, v258);
            }
            v253 = v306;
            v255 = __srcf;
            *(_OWORD *)&v250[*(int *)(v306 + 32)] = *(_OWORD *)&v251[*(int *)(v306 + 32)];
            ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dste[7])(v250, 0, 1, v306);
          }
          v261 = v255[5];
          v262 = &v250[v261];
          v263 = &v251[v261];
          if (v326(&v251[v261], 1, v253))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v262, v263, *(_QWORD *)(*(_QWORD *)(v264 - 8) + 64));
          }
          else
          {
            *v262 = *v263;
            *((_QWORD *)v262 + 1) = *((_QWORD *)v263 + 1);
            *((_DWORD *)v262 + 4) = *((_DWORD *)v263 + 4);
            *(_OWORD *)(v262 + 24) = *(_OWORD *)(v263 + 24);
            *(_OWORD *)(v262 + 40) = *(_OWORD *)(v263 + 40);
            *((_QWORD *)v262 + 7) = *((_QWORD *)v263 + 7);
            v265 = *(int *)(v253 + 28);
            v329 = &v262[v265];
            v266 = &v263[v265];
            v267 = sub_224F67874();
            v279 = *(void (***)(void *, const void *, uint64_t))(v267 - 8);
            if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v279[6])(v266, 1, v267))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v329, v266, *(_QWORD *)(*(_QWORD *)(v268 - 8) + 64));
            }
            else
            {
              v279[4](v329, v266, v267);
              ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v279[7])(v329, 0, 1, v267);
            }
            *(_OWORD *)&v262[*(int *)(v306 + 32)] = *(_OWORD *)&v263[*(int *)(v306 + 32)];
            ((void (*)(_BYTE *, _QWORD, uint64_t))__dste[7])(v262, 0, 1);
          }
          ((void (*)(_BYTE *, _QWORD, uint64_t, int *))v284[7])(v250, 0, 1, __srcf);
          v3 = v332;
          v10 = v330;
          v9 = v331;
        }
        *(_OWORD *)((char *)v7 + v12[19]) = *(_OWORD *)((char *)v8 + v12[19]);
        *(_OWORD *)((char *)v7 + v12[20]) = *(_OWORD *)((char *)v8 + v12[20]);
        *(_OWORD *)((char *)v7 + v12[21]) = *(_OWORD *)((char *)v8 + v12[21]);
        goto LABEL_150;
      case 2u:
        v19 = v8[1];
        *v7 = *v8;
        v7[1] = v19;
        v20 = v8[3];
        v7[2] = v8[2];
        v7[3] = v20;
        *((_QWORD *)v7 + 8) = *((_QWORD *)v8 + 8);
        *(_OWORD *)((char *)v7 + 72) = *(_OWORD *)((char *)v8 + 72);
        v21 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
        v22 = v21[9];
        v23 = (char *)v7 + v22;
        v24 = (char *)v8 + v22;
        v25 = type metadata accessor for FHIRDateTime();
        v301 = *(_QWORD *)(v25 - 8);
        v321 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v301 + 48);
        __src = v21;
        if (v321(v24, 1, v25))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        }
        else
        {
          *v23 = *v24;
          *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);
          *((_DWORD *)v23 + 4) = *((_DWORD *)v24 + 4);
          *(_OWORD *)(v23 + 24) = *(_OWORD *)(v24 + 24);
          *(_OWORD *)(v23 + 40) = *(_OWORD *)(v24 + 40);
          *((_QWORD *)v23 + 7) = *((_QWORD *)v24 + 7);
          v51 = *(int *)(v25 + 28);
          __dst = &v23[v51];
          v52 = &v24[v51];
          v53 = sub_224F67874();
          v54 = *(_QWORD *)(v53 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__dst, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v54 + 32))(__dst, v52, v53);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v54 + 56))(__dst, 0, 1, v53);
          }
          *(_OWORD *)&v23[*(int *)(v25 + 32)] = *(_OWORD *)&v24[*(int *)(v25 + 32)];
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v23, 0, 1, v25);
          v21 = __src;
        }
        v73 = v21[10];
        v74 = (char *)v7 + v73;
        v75 = (char *)v8 + v73;
        v76 = type metadata accessor for Period();
        v77 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v76 - 8);
        if (v77[6](v75, 1, v76))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
        }
        else
        {
          v287 = (void (**)(void *, _QWORD, uint64_t, uint64_t))v77;
          __dstc = v74;
          if (v321(v75, 1, v25))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
          }
          else
          {
            *v74 = *v75;
            *((_QWORD *)v74 + 1) = *((_QWORD *)v75 + 1);
            *((_DWORD *)v74 + 4) = *((_DWORD *)v75 + 4);
            *(_OWORD *)(v74 + 24) = *(_OWORD *)(v75 + 24);
            *(_OWORD *)(v74 + 40) = *(_OWORD *)(v75 + 40);
            *((_QWORD *)v74 + 7) = *((_QWORD *)v75 + 7);
            v109 = *(int *)(v25 + 28);
            v282 = &v74[v109];
            v110 = &v75[v109];
            v111 = sub_224F67874();
            v272 = *(_QWORD *)(v111 - 8);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v272 + 48))(v110, 1, v111))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v282, v110, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
            }
            else
            {
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v272 + 32))(v282, v110, v111);
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v282, 0, 1, v111);
            }
            v74 = __dstc;
            *(_OWORD *)&__dstc[*(int *)(v25 + 32)] = *(_OWORD *)&v75[*(int *)(v25 + 32)];
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v301 + 56))(__dstc, 0, 1, v25);
          }
          v164 = *(int *)(v76 + 20);
          v165 = &v74[v164];
          v166 = &v75[v164];
          if (v321(&v75[v164], 1, v25))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v165, v166, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
          }
          else
          {
            *v165 = *v166;
            *((_QWORD *)v165 + 1) = *((_QWORD *)v166 + 1);
            *((_DWORD *)v165 + 4) = *((_DWORD *)v166 + 4);
            *(_OWORD *)(v165 + 24) = *(_OWORD *)(v166 + 24);
            *(_OWORD *)(v165 + 40) = *(_OWORD *)(v166 + 40);
            *((_QWORD *)v165 + 7) = *((_QWORD *)v166 + 7);
            v168 = *(int *)(v25 + 28);
            v285 = &v165[v168];
            v169 = &v166[v168];
            v170 = sub_224F67874();
            v273 = *(_QWORD *)(v170 - 8);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v273 + 48))(v169, 1, v170))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v285, v169, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
            }
            else
            {
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v273 + 32))(v285, v169, v170);
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v273 + 56))(v285, 0, 1, v170);
            }
            *(_OWORD *)&v165[*(int *)(v25 + 32)] = *(_OWORD *)&v166[*(int *)(v25 + 32)];
            v21 = __src;
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v165, 0, 1, v25);
          }
          v287[7](__dstc, 0, 1, v76);
        }
        v207 = v21[11];
        v208 = (char *)v7 + v207;
        v209 = (char *)v8 + v207;
        if (v321((_BYTE *)v8 + v207, 1, v25))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v208, v209, *(_QWORD *)(*(_QWORD *)(v210 - 8) + 64));
        }
        else
        {
          *v208 = *v209;
          *((_QWORD *)v208 + 1) = *((_QWORD *)v209 + 1);
          *((_DWORD *)v208 + 4) = *((_DWORD *)v209 + 4);
          *(_OWORD *)(v208 + 24) = *(_OWORD *)(v209 + 24);
          *(_OWORD *)(v208 + 40) = *(_OWORD *)(v209 + 40);
          *((_QWORD *)v208 + 7) = *((_QWORD *)v209 + 7);
          v211 = *(int *)(v25 + 28);
          v328 = &v208[v211];
          v212 = &v209[v211];
          v213 = sub_224F67874();
          v214 = *(_QWORD *)(v213 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v214 + 48))(v212, 1, v213))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v328, v212, *(_QWORD *)(*(_QWORD *)(v215 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v214 + 32))(v328, v212, v213);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v214 + 56))(v328, 0, 1, v213);
          }
          *(_OWORD *)&v208[*(int *)(v25 + 32)] = *(_OWORD *)&v209[*(int *)(v25 + 32)];
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v208, 0, 1, v25);
        }
        v3 = v332;
        v10 = v330;
        v9 = v331;
        *(_OWORD *)((char *)v7 + __src[12]) = *(_OWORD *)((char *)v8 + __src[12]);
        goto LABEL_150;
      case 3u:
        v27 = v8[1];
        *v7 = *v8;
        v7[1] = v27;
        *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
        *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
        v28 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
        v29 = v28[8];
        v30 = (char *)v7 + v29;
        v31 = (char *)v8 + v29;
        v32 = type metadata accessor for FHIRDateTime();
        v33 = *(_QWORD *)(v32 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        }
        else
        {
          v303 = v33;
          *v30 = *v31;
          *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
          *((_DWORD *)v30 + 4) = *((_DWORD *)v31 + 4);
          *(_OWORD *)(v30 + 24) = *(_OWORD *)(v31 + 24);
          *(_OWORD *)(v30 + 40) = *(_OWORD *)(v31 + 40);
          *((_QWORD *)v30 + 7) = *((_QWORD *)v31 + 7);
          v56 = *(int *)(v32 + 28);
          v318 = v4;
          v324 = &v30[v56];
          v57 = &v31[v56];
          v58 = sub_224F67874();
          v59 = *(_QWORD *)(v58 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v324, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 32))(v324, v57, v58);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v324, 0, 1, v58);
          }
          *(_OWORD *)&v30[*(int *)(v32 + 32)] = *(_OWORD *)&v31[*(int *)(v32 + 32)];
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v30, 0, 1, v32);
          v4 = v318;
        }
        v80 = v28[9];
        v81 = (_QWORD *)((char *)v7 + v80);
        v82 = (_QWORD *)((char *)v8 + v80);
        *v81 = *v82;
        *(_QWORD *)((char *)v81 + 5) = *(_QWORD *)((char *)v82 + 5);
        *(_QWORD *)((char *)v7 + v28[10]) = *(_QWORD *)((char *)v8 + v28[10]);
        *((_BYTE *)v7 + v28[11]) = *((_BYTE *)v8 + v28[11]);
        *(_QWORD *)((char *)v7 + v28[12]) = *(_QWORD *)((char *)v8 + v28[12]);
        v83 = v28[13];
        v84 = (char *)v7 + v83;
        v85 = (char *)v8 + v83;
        *(_OWORD *)v84 = *(_OWORD *)v85;
        *((_QWORD *)v84 + 2) = *((_QWORD *)v85 + 2);
        *((_BYTE *)v7 + v28[14]) = *((_BYTE *)v8 + v28[14]);
        v86 = v28[15];
        v87 = (_OWORD *)((char *)v7 + v86);
        v88 = (_OWORD *)((char *)v8 + v86);
        v89 = type metadata accessor for Reference();
        v90 = *(_QWORD **)(v89 - 8);
        v91 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v90[6];
        if (v91(v88, 1, v89))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
        }
        else
        {
          v305 = v89;
          __srcc = v91;
          v325 = v90;
          v93 = v88[1];
          *v87 = *v88;
          v87[1] = v93;
          v94 = *(int *)(v89 + 24);
          v95 = (_OWORD *)((char *)v87 + v94);
          v96 = (_OWORD *)((char *)v88 + v94);
          v97 = type metadata accessor for Identifier();
          v98 = *(void (***)(void))(v97 - 8);
          if (((unsigned int (*)(_OWORD *, uint64_t, uint64_t))v98[6])(v96, 1, v97))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
            v89 = v305;
            v91 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__srcc;
          }
          else
          {
            v283 = v98;
            v289 = (int *)v97;
            v319 = v4;
            v113 = v96[1];
            *v95 = *v96;
            v95[1] = v113;
            *((_QWORD *)v95 + 4) = *((_QWORD *)v96 + 4);
            v114 = *(int *)(v97 + 24);
            __dstd = (char *)v95;
            v115 = (char *)v95 + v114;
            v116 = (char *)v96 + v114;
            v117 = sub_224F675D4();
            v118 = *(_QWORD *)(v117 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v115, v116, v117);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v115, 0, 1, v117);
            }
            v91 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__srcc;
            v4 = v319;
            v89 = v305;
            *(_OWORD *)&__dstd[v289[7]] = *(_OWORD *)((char *)v96 + v289[7]);
            v283[7]();
          }
          v90 = v325;
          ((void (*)(_OWORD *, _QWORD, uint64_t, uint64_t))v325[7])(v87, 0, 1, v89);
        }
        *(_OWORD *)((char *)v7 + v28[16]) = *(_OWORD *)((char *)v8 + v28[16]);
        v172 = v28[17];
        v173 = (_OWORD *)((char *)v7 + v172);
        v174 = (_OWORD *)((char *)v8 + v172);
        if (v91((char *)v8 + v172, 1, v89))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v173, v174, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
        }
        else
        {
          v327 = (void (**)(void *, _QWORD, uint64_t, uint64_t))v90;
          v176 = v174[1];
          *v173 = *v174;
          v173[1] = v176;
          v177 = *(int *)(v89 + 24);
          __srcg = v173;
          v178 = (_OWORD *)((char *)v173 + v177);
          v179 = (_OWORD *)((char *)v174 + v177);
          v180 = type metadata accessor for Identifier();
          v181 = *(void (***)(void))(v180 - 8);
          if (((unsigned int (*)(_OWORD *, uint64_t, uint64_t))v181[6])(v179, 1, v180))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v178, v179, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
            v183 = __srcg;
          }
          else
          {
            __dstf = v181;
            v307 = v178;
            v320 = v4;
            v184 = v179[1];
            *v178 = *v179;
            v178[1] = v184;
            *((_QWORD *)v178 + 4) = *((_QWORD *)v179 + 4);
            v185 = *(int *)(v180 + 24);
            v291 = (char *)v178 + v185;
            v186 = (char *)v179 + v185;
            v187 = sub_224F675D4();
            v188 = *(_QWORD *)(v187 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v188 + 48))(v186, 1, v187))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v291, v186, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v188 + 32))(v291, v186, v187);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v188 + 56))(v291, 0, 1, v187);
            }
            v183 = __srcg;
            v4 = v320;
            *(_OWORD *)((char *)v307 + *(int *)(v180 + 28)) = *(_OWORD *)((char *)v179 + *(int *)(v180 + 28));
            __dstf[7]();
          }
          v327[7](v183, 0, 1, v89);
        }
        v3 = v332;
        v10 = v330;
        v9 = v331;
        *(_OWORD *)((char *)v7 + v28[18]) = *(_OWORD *)((char *)v8 + v28[18]);
        goto LABEL_150;
      case 4u:
        v35 = v8[1];
        *v7 = *v8;
        v7[1] = v35;
        *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
        *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
        *(_OWORD *)((char *)v7 + 56) = *(_OWORD *)((char *)v8 + 56);
        *((_QWORD *)v7 + 9) = *((_QWORD *)v8 + 9);
        *((_QWORD *)v7 + 12) = *((_QWORD *)v8 + 12);
        v7[5] = v8[5];
        *(_OWORD *)((char *)v7 + 104) = *(_OWORD *)((char *)v8 + 104);
        v36 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
        v37 = v36[11];
        v38 = (char *)v7 + v37;
        v39 = (char *)v8 + v37;
        v40 = type metadata accessor for FHIRDateTime();
        __srca = *(_QWORD **)(v40 - 8);
        v41 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__srca[6];
        v317 = v4;
        v322 = v36;
        v302 = v40;
        if (v41(v39, 1, v40))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
        }
        else
        {
          __dsta = v41;
          *v38 = *v39;
          *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
          *((_DWORD *)v38 + 4) = *((_DWORD *)v39 + 4);
          *(_OWORD *)(v38 + 24) = *(_OWORD *)(v39 + 24);
          *(_OWORD *)(v38 + 40) = *(_OWORD *)(v39 + 40);
          *((_QWORD *)v38 + 7) = *((_QWORD *)v39 + 7);
          v61 = *(int *)(v40 + 28);
          v62 = &v38[v61];
          v63 = &v39[v61];
          v64 = sub_224F67874();
          v65 = *(_QWORD *)(v64 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v65 + 32))(v62, v63, v64);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
          }
          *(_OWORD *)&v38[*(int *)(v40 + 32)] = *(_OWORD *)&v39[*(int *)(v40 + 32)];
          ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__srca[7])(v38, 0, 1, v40);
          v4 = v317;
          v36 = v322;
          v41 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dsta;
        }
        v100 = v36[12];
        v101 = (char *)v7 + v100;
        v102 = (char *)v8 + v100;
        v103 = type metadata accessor for Period();
        v104 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v103 - 8);
        if (v104[6](v102, 1, v103))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
          v106 = v302;
        }
        else
        {
          v274 = (int *)v103;
          v281 = v104;
          v106 = v302;
          v288 = v101;
          if (v41(v102, 1, v302))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
            v108 = v274;
          }
          else
          {
            *v101 = *v102;
            *((_QWORD *)v101 + 1) = *((_QWORD *)v102 + 1);
            *((_DWORD *)v101 + 4) = *((_DWORD *)v102 + 4);
            *(_OWORD *)(v101 + 24) = *(_OWORD *)(v102 + 24);
            *(_OWORD *)(v101 + 40) = *(_OWORD *)(v102 + 40);
            *((_QWORD *)v101 + 7) = *((_QWORD *)v102 + 7);
            v120 = *(int *)(v302 + 28);
            v121 = &v101[v120];
            v122 = &v102[v120];
            v123 = sub_224F67874();
            v124 = *(_QWORD *)(v123 - 8);
            v108 = v274;
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
            }
            else
            {
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v124 + 32))(v121, v122, v123);
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v121, 0, 1, v123);
            }
            v106 = v302;
            v101 = v288;
            *(_OWORD *)&v288[*(int *)(v302 + 32)] = *(_OWORD *)&v102[*(int *)(v302 + 32)];
            ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__srca[7])(v288, 0, 1, v302);
            v4 = v317;
            v36 = v322;
          }
          v190 = v108[5];
          v191 = &v101[v190];
          v192 = &v102[v190];
          if (v41(v192, 1, v106))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
          }
          else
          {
            __dstg = v41;
            *v191 = *v192;
            *((_QWORD *)v191 + 1) = *((_QWORD *)v192 + 1);
            *((_DWORD *)v191 + 4) = *((_DWORD *)v192 + 4);
            *(_OWORD *)(v191 + 24) = *(_OWORD *)(v192 + 24);
            *(_OWORD *)(v191 + 40) = *(_OWORD *)(v192 + 40);
            *((_QWORD *)v191 + 7) = *((_QWORD *)v192 + 7);
            v194 = *(int *)(v106 + 28);
            v276 = &v191[v194];
            v195 = &v192[v194];
            v196 = sub_224F67874();
            v197 = *(_QWORD *)(v196 - 8);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v197 + 48))(v195, 1, v196))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v276, v195, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
            }
            else
            {
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v197 + 32))(v276, v195, v196);
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v197 + 56))(v276, 0, 1, v196);
            }
            v4 = v317;
            v36 = v322;
            *(_OWORD *)&v191[*(int *)(v106 + 32)] = *(_OWORD *)&v192[*(int *)(v106 + 32)];
            ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__srca[7])(v191, 0, 1, v106);
            v41 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstg;
          }
          (*((void (**)(_BYTE *, _QWORD, uint64_t, int *))v281 + 7))(v288, 0, 1, v108);
        }
        v216 = v36[13];
        v217 = (char *)v7 + v216;
        v218 = (char *)v8 + v216;
        if (v41((char *)v8 + v216, 1, v106))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v217, v218, *(_QWORD *)(*(_QWORD *)(v219 - 8) + 64));
        }
        else
        {
          *v217 = *v218;
          *((_QWORD *)v217 + 1) = *((_QWORD *)v218 + 1);
          *((_DWORD *)v217 + 4) = *((_DWORD *)v218 + 4);
          *(_OWORD *)(v217 + 24) = *(_OWORD *)(v218 + 24);
          *(_OWORD *)(v217 + 40) = *(_OWORD *)(v218 + 40);
          *((_QWORD *)v217 + 7) = *((_QWORD *)v218 + 7);
          v220 = *(int *)(v106 + 28);
          v221 = &v217[v220];
          v222 = &v218[v220];
          v223 = sub_224F67874();
          v224 = *(_QWORD *)(v223 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v224 + 48))(v222, 1, v223))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v221, v222, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v224 + 32))(v221, v222, v223);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v224 + 56))(v221, 0, 1, v223);
          }
          *(_OWORD *)&v217[*(int *)(v106 + 32)] = *(_OWORD *)&v218[*(int *)(v106 + 32)];
          v4 = v317;
          ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__srca[7])(v217, 0, 1, v106);
          v36 = v322;
        }
        *(_QWORD *)((char *)v7 + v36[14]) = *(_QWORD *)((char *)v8 + v36[14]);
        *(_OWORD *)((char *)v7 + v36[15]) = *(_OWORD *)((char *)v8 + v36[15]);
        v226 = v36[16];
        v227 = (char *)v7 + v226;
        v228 = (char *)v8 + v226;
        *(_OWORD *)v227 = *(_OWORD *)v228;
        *((_QWORD *)v227 + 2) = *((_QWORD *)v228 + 2);
        v229 = v36[17];
        v230 = (_OWORD *)((char *)v7 + v229);
        v231 = (_OWORD *)((char *)v8 + v229);
        v232 = type metadata accessor for Quantity();
        v233 = *(_QWORD *)(v232 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v233 + 48))(v231, 1, v232))
        {
          sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v230, v231, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
        }
        else
        {
          *v230 = *v231;
          *(_QWORD *)((char *)v230 + 13) = *(_QWORD *)((char *)v231 + 13);
          *(_OWORD *)((char *)v230 + 24) = *(_OWORD *)((char *)v231 + 24);
          *(_OWORD *)((char *)v230 + 40) = *(_OWORD *)((char *)v231 + 40);
          v235 = *(int *)(v232 + 28);
          __srch = (char *)v230 + v235;
          v236 = (char *)v231 + v235;
          v237 = sub_224F675D4();
          v238 = *(_QWORD *)(v237 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v238 + 48))(v236, 1, v237))
          {
            sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__srch, v236, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v238 + 32))(__srch, v236, v237);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v238 + 56))(__srch, 0, 1, v237);
          }
          v4 = v317;
          *(_OWORD *)((char *)v230 + *(int *)(v232 + 32)) = *(_OWORD *)((char *)v231 + *(int *)(v232 + 32));
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v233 + 56))(v230, 0, 1, v232);
        }
        v3 = v332;
        v10 = v330;
        v9 = v331;
        *(_QWORD *)((char *)v7 + v322[18]) = *(_QWORD *)((char *)v8 + v322[18]);
        *(_OWORD *)((char *)v7 + v322[19]) = *(_OWORD *)((char *)v8 + v322[19]);
LABEL_150:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(_QWORD *)(v10 + 64));
        break;
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + *(int *)(v3 + 24)) = *(_OWORD *)((char *)v4 + *(int *)(v3 + 24));
  return a1;
}

_QWORD *assignWithTake for ModelsDSTU2.Bundle.BundleEntry(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  size_t v17;
  int *v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  unsigned int (**v23)(_OWORD *, uint64_t, uint64_t);
  uint64_t v24;
  int *v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  unsigned int (**v30)(_OWORD *, uint64_t, uint64_t);
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  int *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unsigned int (**v46)(_BYTE *, uint64_t, uint64_t);
  uint64_t v47;
  __int128 v48;
  int *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  _OWORD *v57;
  char *v58;
  uint64_t v59;
  void (**v60)(void);
  uint64_t v61;
  void (**v62)(_OWORD *, _QWORD, uint64_t, uint64_t);
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  int *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unsigned int (**v77)(_BYTE *, uint64_t, uint64_t);
  uint64_t v78;
  __int128 v79;
  int *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  _OWORD *v103;
  char *v104;
  uint64_t v105;
  void (**v106)(void);
  uint64_t v107;
  void (**v108)(_OWORD *, _QWORD, uint64_t, uint64_t);
  __int128 v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  _OWORD *v145;
  char *v146;
  uint64_t v147;
  unsigned int (*v148)(_QWORD, _QWORD, _QWORD);
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  _OWORD *v152;
  char *v153;
  uint64_t v154;
  void (**v155)(void);
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  uint64_t v164;
  int *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  unsigned int (*v224)(char *, uint64_t, uint64_t);
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  _OWORD *v246;
  char *v247;
  uint64_t v248;
  _QWORD *v249;
  unsigned int (*v250)(_QWORD, _QWORD, _QWORD);
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  _OWORD *v254;
  char *v255;
  uint64_t v256;
  void (**v257)(void);
  uint64_t v258;
  uint64_t v259;
  char *v260;
  char *v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _OWORD *v277;
  char *v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  _OWORD *v282;
  char *v283;
  uint64_t v284;
  void (**v285)(void);
  uint64_t v286;
  __int128 v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  char *v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  __int128 v316;
  uint64_t v317;
  char *v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  char *v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  uint64_t v349;
  _OWORD *v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  char *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  char *v376;
  char *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v393;
  char *v394;
  char *v395;
  uint64_t v396;
  unsigned int (*v397)(_QWORD, _QWORD, _QWORD);
  uint64_t v398;
  uint64_t v399;
  char *v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  uint64_t v414;
  char *v415;
  char *v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  char *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  char *v425;
  char *v426;
  uint64_t v427;
  unsigned int (*v428)(char *, uint64_t);
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  char *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  char *v437;
  char *v438;
  uint64_t v439;
  uint64_t v440;
  char *v441;
  uint64_t v442;
  char *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  _OWORD *v447;
  char *v448;
  uint64_t v449;
  __int128 v450;
  uint64_t v451;
  _OWORD *v452;
  char *v453;
  uint64_t v454;
  void (**v455)(void);
  uint64_t v456;
  __int128 v457;
  uint64_t v458;
  char *v459;
  uint64_t v460;
  uint64_t v461;
  char *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  char *v466;
  char *v467;
  uint64_t v468;
  uint64_t v469;
  char *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  char *v475;
  char *v476;
  uint64_t v477;
  uint64_t v478;
  char *v479;
  uint64_t v480;
  uint64_t v481;
  int *v482;
  uint64_t v483;
  char *v484;
  char *v485;
  uint64_t v486;
  uint64_t v487;
  char *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  char *v493;
  char *v494;
  uint64_t v495;
  uint64_t v496;
  char *v497;
  char *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  char *v504;
  uint64_t v505;
  _OWORD *v506;
  char *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  char *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  char *v517;
  char *v518;
  uint64_t v519;
  int *v520;
  uint64_t v521;
  char *v522;
  char *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  char *v528;
  char *v529;
  uint64_t v530;
  unsigned int (*v531)(char *, uint64_t, uint64_t);
  uint64_t v532;
  uint64_t v533;
  char *v534;
  char *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  char *v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  char *v544;
  uint64_t v545;
  uint64_t v546;
  char *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  void *__src;
  char *__srca;
  void *__srcb;
  void (**__srcc)(void);
  char *__srcd;
  void (**__srce)(void *, void *, _QWORD);
  void (**__srcf)(void *, const void *, uint64_t);
  char *__srcg;
  unsigned int (*__srch)(char *, uint64_t, uint64_t);
  void *__srci;
  void (**__srcj)(void *, const void *, uint64_t);
  char *v563;
  int *v564;
  int *v565;
  void *v566;
  _QWORD *v567;
  char *v568;
  void *v569;
  void (**v570)(void);
  char *v571;
  void (**v572)(void *, void *, _QWORD);
  char *v573;
  unsigned int (*v574)(char *, uint64_t);
  _QWORD *__dst;
  char *__dsta;
  char *__dstb;
  char *__dstc;
  char *__dstd;
  int *__dste;
  char *__dstf;
  char *__dstg;
  int *__dsth;
  char *__dsti;
  _QWORD *__dstj;
  char *__dstk;
  void (**__dstl)(void);
  char *__dstm;
  int *v589;
  int *v590;
  void (**v591)(char *, _QWORD, uint64_t, uint64_t);
  void (**v592)(void);
  char *v593;
  void *v594;
  char *v595;
  _QWORD *v596;
  char *v597;
  void (**v598)(void);
  char *v599;
  char *v600;
  void *v601;
  char *v602;
  void *v603;
  char *v604;
  _QWORD *v605;
  unsigned int (*v606)(char *, uint64_t, uint64_t);
  _QWORD *v607;
  _QWORD *v608;
  char *v609;
  void (**v610)(char *, _QWORD, uint64_t, uint64_t);
  void *v611;
  void (**v612)(void);
  int *v613;
  void *v614;
  char *v615;
  char *v616;
  char *v617;
  _QWORD *v618;
  char *v619;
  unsigned int (*v620)(char *, uint64_t, uint64_t);
  int *v621;
  void *v622;
  int *v623;
  unsigned int (*v624)(char *, uint64_t, uint64_t);
  char *v625;
  _QWORD *v626;
  char *v627;
  unsigned int (*v628)(char *, uint64_t, uint64_t);
  void *v629;
  char *v630;
  char *v631;
  int *v632;
  char *v633;
  char *v634;
  _QWORD *v635;
  unsigned int (*v636)(char *, uint64_t, uint64_t);
  int *v637;
  void *v638;
  char *v639;
  _QWORD *v640;
  int *v641;
  void *v642;
  char *v643;
  _QWORD *v644;
  _QWORD *v645;
  _QWORD *v646;
  _QWORD *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;

  v4 = a2;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t)a1 + v7;
  v9 = (char *)v4 + v7;
  v10 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v11 = *(_QWORD **)(v10 - 8);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11[6];
  v13 = v12(v8, 1, v10);
  v14 = v12((uint64_t)v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v635 = v11;
      v648 = a3;
      v650 = v10;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v644 = v4;
          *(_OWORD *)v8 = *(_OWORD *)v9;
          *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
          v18 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
          v19 = v18[6];
          v20 = (_OWORD *)(v8 + v19);
          v21 = &v9[v19];
          v22 = type metadata accessor for Reference();
          v23 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v22 - 8);
          if (((unsigned int (**)(char *, uint64_t, uint64_t))v23)[6](v21, 1, v22))
          {
            sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
          }
          else
          {
            v622 = v23;
            v55 = *((_OWORD *)v21 + 1);
            *v20 = *(_OWORD *)v21;
            v20[1] = v55;
            v56 = *(int *)(v22 + 24);
            v57 = (_OWORD *)((char *)v20 + v56);
            v58 = &v21[v56];
            v59 = type metadata accessor for Identifier();
            v60 = *(void (***)(void))(v59 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v60[6])(v58, 1, v59))
            {
              sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
              v62 = (void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))v622;
            }
            else
            {
              v592 = v60;
              v609 = (char *)v57;
              v109 = *((_OWORD *)v58 + 1);
              *v57 = *(_OWORD *)v58;
              v57[1] = v109;
              *((_QWORD *)v57 + 4) = *((_QWORD *)v58 + 4);
              v110 = *(int *)(v59 + 24);
              __dstb = (char *)v57 + v110;
              v111 = &v58[v110];
              v112 = sub_224F675D4();
              v113 = *(_QWORD *)(v112 - 8);
              __src = (void *)v112;
              if ((*(unsigned int (**)(char *, uint64_t))(v113 + 48))(v111, 1))
              {
                sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(__dstb, v111, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, void *))(v113 + 32))(__dstb, v111, __src);
                (*(void (**)(char *, _QWORD, uint64_t, void *))(v113 + 56))(__dstb, 0, 1, __src);
              }
              v62 = (void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))v622;
              *(_OWORD *)&v609[*(int *)(v59 + 28)] = *(_OWORD *)&v58[*(int *)(v59 + 28)];
              v592[7]();
            }
            v62[7](v20, 0, 1, v22);
          }
          v11 = v635;
          v190 = v18[7];
          v191 = (char *)(v8 + v190);
          v192 = &v9[v190];
          v193 = type metadata accessor for FHIRDateTime();
          v596 = *(_QWORD **)(v193 - 8);
          v628 = (unsigned int (*)(char *, uint64_t, uint64_t))v596[6];
          __dste = (int *)v193;
          if (v628(v192, 1, v193))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
          }
          else
          {
            *v191 = *v192;
            *((_QWORD *)v191 + 1) = *((_QWORD *)v192 + 1);
            *((_DWORD *)v191 + 4) = *((_DWORD *)v192 + 4);
            *(_OWORD *)(v191 + 24) = *(_OWORD *)(v192 + 24);
            *(_OWORD *)(v191 + 40) = *(_OWORD *)(v192 + 40);
            *((_QWORD *)v191 + 7) = *((_QWORD *)v192 + 7);
            v195 = *(int *)(v193 + 28);
            v196 = &v191[v195];
            v197 = &v192[v195];
            v198 = sub_224F67874();
            v199 = *(_QWORD *)(v198 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v199 + 48))(v197, 1, v198))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v196, v197, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v199 + 32))(v196, v197, v198);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v199 + 56))(v196, 0, 1, v198);
            }
            v11 = v635;
            v193 = (uint64_t)__dste;
            *(_OWORD *)&v191[__dste[8]] = *(_OWORD *)&v192[__dste[8]];
            ((void (*)(char *, _QWORD, uint64_t, int *))v596[7])(v191, 0, 1, __dste);
          }
          v201 = v18[8];
          v202 = v8 + v201;
          v203 = &v9[v201];
          *(_OWORD *)v202 = *(_OWORD *)v203;
          *(_QWORD *)(v202 + 16) = *((_QWORD *)v203 + 2);
          v204 = v18[9];
          v205 = v8 + v204;
          v206 = &v9[v204];
          *(_QWORD *)(v205 + 16) = *((_QWORD *)v206 + 2);
          *(_OWORD *)v205 = *(_OWORD *)v206;
          *(_OWORD *)(v8 + v18[10]) = *(_OWORD *)&v9[v18[10]];
          *(_OWORD *)(v8 + v18[11]) = *(_OWORD *)&v9[v18[11]];
          v207 = v18[12];
          v208 = v8 + v207;
          v209 = &v9[v207];
          *(_OWORD *)v208 = *(_OWORD *)v209;
          *(_QWORD *)(v208 + 16) = *((_QWORD *)v209 + 2);
          *(_QWORD *)(v8 + v18[13]) = *(_QWORD *)&v9[v18[13]];
          v210 = v18[14];
          v211 = (char *)(v8 + v210);
          v212 = &v9[v210];
          if (v628(&v9[v210], 1, v193))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
          }
          else
          {
            *v211 = *v212;
            *((_QWORD *)v211 + 1) = *((_QWORD *)v212 + 1);
            *((_DWORD *)v211 + 4) = *((_DWORD *)v212 + 4);
            *(_OWORD *)(v211 + 24) = *(_OWORD *)(v212 + 24);
            *(_OWORD *)(v211 + 40) = *(_OWORD *)(v212 + 40);
            *((_QWORD *)v211 + 7) = *((_QWORD *)v212 + 7);
            v214 = *(int *)(v193 + 28);
            v215 = &v211[v214];
            v216 = &v212[v214];
            v217 = sub_224F67874();
            v218 = *(_QWORD *)(v217 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v218 + 48))(v216, 1, v217))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v219 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v218 + 32))(v215, v216, v217);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v218 + 56))(v215, 0, 1, v217);
            }
            v11 = v635;
            v193 = (uint64_t)__dste;
            *(_OWORD *)&v211[__dste[8]] = *(_OWORD *)&v212[__dste[8]];
            ((void (*)(char *, _QWORD, uint64_t, int *))v596[7])(v211, 0, 1, __dste);
          }
          v220 = v18[15];
          v221 = (char *)(v8 + v220);
          v222 = &v9[v220];
          v223 = type metadata accessor for Period();
          v567 = *(_QWORD **)(v223 - 8);
          v224 = (unsigned int (*)(char *, uint64_t, uint64_t))v567[6];
          v613 = (int *)v223;
          if (v224(v222, 1, v223))
          {
            sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v221, v222, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
          }
          else
          {
            if (v628(v222, 1, v193))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v221, v222, *(_QWORD *)(*(_QWORD *)(v226 - 8) + 64));
            }
            else
            {
              *v221 = *v222;
              *((_QWORD *)v221 + 1) = *((_QWORD *)v222 + 1);
              *((_DWORD *)v221 + 4) = *((_DWORD *)v222 + 4);
              *(_OWORD *)(v221 + 24) = *(_OWORD *)(v222 + 24);
              *(_OWORD *)(v221 + 40) = *(_OWORD *)(v222 + 40);
              *((_QWORD *)v221 + 7) = *((_QWORD *)v222 + 7);
              v227 = *(int *)(v193 + 28);
              __srcd = &v221[v227];
              v228 = &v222[v227];
              v229 = sub_224F67874();
              v230 = *(_QWORD *)(v229 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v230 + 48))(v228, 1, v229))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(__srcd, v228, *(_QWORD *)(*(_QWORD *)(v231 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v230 + 32))(__srcd, v228, v229);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v230 + 56))(__srcd, 0, 1, v229);
              }
              v193 = (uint64_t)__dste;
              *(_OWORD *)&v221[__dste[8]] = *(_OWORD *)&v222[__dste[8]];
              v223 = (uint64_t)v613;
              ((void (*)(char *, _QWORD, uint64_t, int *))v596[7])(v221, 0, 1, __dste);
              v11 = v635;
            }
            v303 = *(int *)(v223 + 20);
            v304 = &v221[v303];
            v305 = &v222[v303];
            if (v628(v305, 1, v193))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v304, v305, *(_QWORD *)(*(_QWORD *)(v306 - 8) + 64));
            }
            else
            {
              *v304 = *v305;
              *((_QWORD *)v304 + 1) = *((_QWORD *)v305 + 1);
              *((_DWORD *)v304 + 4) = *((_DWORD *)v305 + 4);
              *(_OWORD *)(v304 + 24) = *(_OWORD *)(v305 + 24);
              *(_OWORD *)(v304 + 40) = *(_OWORD *)(v305 + 40);
              *((_QWORD *)v304 + 7) = *((_QWORD *)v305 + 7);
              v307 = *(int *)(v193 + 28);
              __srcg = &v304[v307];
              v308 = &v305[v307];
              v309 = sub_224F67874();
              v548 = *(_QWORD *)(v309 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v548 + 48))(v308, 1, v309))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(__srcg, v308, *(_QWORD *)(*(_QWORD *)(v310 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v548 + 32))(__srcg, v308, v309);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v548 + 56))(__srcg, 0, 1, v309);
              }
              v11 = v635;
              v193 = (uint64_t)__dste;
              *(_OWORD *)&v304[__dste[8]] = *(_OWORD *)&v305[__dste[8]];
              ((void (*)(char *, _QWORD, uint64_t, int *))v596[7])(v304, 0, 1, __dste);
            }
            ((void (*)(char *, _QWORD, uint64_t, int *))v567[7])(v221, 0, 1, v613);
          }
          *(_OWORD *)(v8 + v18[16]) = *(_OWORD *)&v9[v18[16]];
          v360 = v18[17];
          v361 = (char *)(v8 + v360);
          v362 = &v9[v360];
          if (v628(&v9[v360], 1, v193))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v361, v362, *(_QWORD *)(*(_QWORD *)(v363 - 8) + 64));
          }
          else
          {
            __srch = v224;
            *v361 = *v362;
            *((_QWORD *)v361 + 1) = *((_QWORD *)v362 + 1);
            *((_DWORD *)v361 + 4) = *((_DWORD *)v362 + 4);
            *(_OWORD *)(v361 + 24) = *(_OWORD *)(v362 + 24);
            *(_OWORD *)(v361 + 40) = *(_OWORD *)(v362 + 40);
            *((_QWORD *)v361 + 7) = *((_QWORD *)v362 + 7);
            v364 = *(int *)(v193 + 28);
            v365 = &v361[v364];
            v366 = &v362[v364];
            v367 = sub_224F67874();
            v368 = *(_QWORD *)(v367 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v368 + 48))(v366, 1, v367))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v365, v366, *(_QWORD *)(*(_QWORD *)(v369 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v368 + 32))(v365, v366, v367);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v368 + 56))(v365, 0, 1, v367);
            }
            v11 = v635;
            v193 = (uint64_t)__dste;
            v224 = __srch;
            *(_OWORD *)&v361[__dste[8]] = *(_OWORD *)&v362[__dste[8]];
            ((void (*)(char *, _QWORD, uint64_t, int *))v596[7])(v361, 0, 1, __dste);
          }
          v10 = v650;
          v370 = v18[18];
          v371 = (char *)(v8 + v370);
          v372 = &v9[v370];
          if (v224(&v9[v370], 1, (uint64_t)v613))
          {
            sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v371, v372, *(_QWORD *)(*(_QWORD *)(v373 - 8) + 64));
            a3 = v648;
          }
          else
          {
            if (v628(v372, 1, v193))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v371, v372, *(_QWORD *)(*(_QWORD *)(v374 - 8) + 64));
              a3 = v648;
            }
            else
            {
              *v371 = *v372;
              *((_QWORD *)v371 + 1) = *((_QWORD *)v372 + 1);
              *((_DWORD *)v371 + 4) = *((_DWORD *)v372 + 4);
              *(_OWORD *)(v371 + 24) = *(_OWORD *)(v372 + 24);
              *(_OWORD *)(v371 + 40) = *(_OWORD *)(v372 + 40);
              *((_QWORD *)v371 + 7) = *((_QWORD *)v372 + 7);
              v375 = *(int *)(v193 + 28);
              v376 = &v371[v375];
              v377 = &v372[v375];
              v378 = sub_224F67874();
              v379 = *(_QWORD *)(v378 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v379 + 48))(v377, 1, v378))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v376, v377, *(_QWORD *)(*(_QWORD *)(v380 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v379 + 32))(v376, v377, v378);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v379 + 56))(v376, 0, 1, v378);
              }
              v193 = (uint64_t)__dste;
              *(_OWORD *)&v371[__dste[8]] = *(_OWORD *)&v372[__dste[8]];
              ((void (*)(char *, _QWORD, uint64_t, int *))v596[7])(v371, 0, 1, __dste);
              a3 = v648;
              v11 = v635;
            }
            v381 = v613[5];
            v382 = &v371[v381];
            v383 = &v372[v381];
            if (v628(v383, 1, v193))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v382, v383, *(_QWORD *)(*(_QWORD *)(v384 - 8) + 64));
            }
            else
            {
              *v382 = *v383;
              *((_QWORD *)v382 + 1) = *((_QWORD *)v383 + 1);
              *((_DWORD *)v382 + 4) = *((_DWORD *)v383 + 4);
              *(_OWORD *)(v382 + 24) = *(_OWORD *)(v383 + 24);
              *(_OWORD *)(v382 + 40) = *(_OWORD *)(v383 + 40);
              *((_QWORD *)v382 + 7) = *((_QWORD *)v383 + 7);
              v385 = *(int *)(v193 + 28);
              v631 = &v382[v385];
              v386 = &v383[v385];
              v387 = sub_224F67874();
              v550 = *(_QWORD *)(v387 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v550 + 48))(v386, 1, v387))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v631, v386, *(_QWORD *)(*(_QWORD *)(v388 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v550 + 32))(v631, v386, v387);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v550 + 56))(v631, 0, 1, v387);
              }
              v11 = v635;
              *(_OWORD *)&v382[__dste[8]] = *(_OWORD *)&v383[__dste[8]];
              ((void (*)(char *, _QWORD, uint64_t))v596[7])(v382, 0, 1);
            }
            v10 = v650;
            ((void (*)(char *, _QWORD, uint64_t, int *))v567[7])(v371, 0, 1, v613);
          }
          *(_OWORD *)(v8 + v18[19]) = *(_OWORD *)&v9[v18[19]];
          *(_OWORD *)(v8 + v18[20]) = *(_OWORD *)&v9[v18[20]];
          *(_OWORD *)(v8 + v18[21]) = *(_OWORD *)&v9[v18[21]];
          goto LABEL_200;
        case 2u:
          v646 = v4;
          v32 = *((_OWORD *)v9 + 1);
          *(_OWORD *)v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v32;
          v33 = *((_OWORD *)v9 + 3);
          *(_OWORD *)(v8 + 32) = *((_OWORD *)v9 + 2);
          *(_OWORD *)(v8 + 48) = v33;
          *(_QWORD *)(v8 + 64) = *((_QWORD *)v9 + 8);
          *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
          v34 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
          v35 = v34[9];
          v36 = (char *)(v8 + v35);
          v37 = &v9[v35];
          v38 = type metadata accessor for FHIRDateTime();
          v605 = *(_QWORD **)(v38 - 8);
          v620 = (unsigned int (*)(char *, uint64_t, uint64_t))v605[6];
          v589 = v34;
          if (v620(v37, 1, v38))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
          }
          else
          {
            *v36 = *v37;
            *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);
            *((_DWORD *)v36 + 4) = *((_DWORD *)v37 + 4);
            *(_OWORD *)(v36 + 24) = *(_OWORD *)(v37 + 24);
            *(_OWORD *)(v36 + 40) = *(_OWORD *)(v37 + 40);
            *((_QWORD *)v36 + 7) = *((_QWORD *)v37 + 7);
            v86 = *(int *)(v38 + 28);
            __dsta = &v36[v86];
            v87 = &v37[v86];
            v88 = sub_224F67874();
            v89 = *(_QWORD *)(v88 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__dsta, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v89 + 32))(__dsta, v87, v88);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(__dsta, 0, 1, v88);
            }
            *(_OWORD *)&v36[*(int *)(v38 + 32)] = *(_OWORD *)&v37[*(int *)(v38 + 32)];
            v34 = v589;
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v605[7])(v36, 0, 1, v38);
          }
          v131 = v34[10];
          v132 = (char *)(v8 + v131);
          v133 = &v9[v131];
          v134 = type metadata accessor for Period();
          v135 = *(void **)(v134 - 8);
          if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v135 + 6))(v133, 1, v134))
          {
            sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
          }
          else
          {
            if (v620(v133, 1, v38))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
            }
            else
            {
              __srcb = v135;
              *v132 = *v133;
              *((_QWORD *)v132 + 1) = *((_QWORD *)v133 + 1);
              *((_DWORD *)v132 + 4) = *((_DWORD *)v133 + 4);
              *(_OWORD *)(v132 + 24) = *(_OWORD *)(v133 + 24);
              *(_OWORD *)(v132 + 40) = *(_OWORD *)(v133 + 40);
              *((_QWORD *)v132 + 7) = *((_QWORD *)v133 + 7);
              v166 = *(int *)(v38 + 28);
              __dstc = &v132[v166];
              v167 = &v133[v166];
              v168 = sub_224F67874();
              v169 = *(_QWORD *)(v168 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48))(v167, 1, v168))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(__dstc, v167, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v169 + 32))(__dstc, v167, v168);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v169 + 56))(__dstc, 0, 1, v168);
              }
              *(_OWORD *)&v132[*(int *)(v38 + 32)] = *(_OWORD *)&v133[*(int *)(v38 + 32)];
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v605[7])(v132, 0, 1, v38);
              v34 = v589;
              v135 = __srcb;
            }
            v266 = *(int *)(v134 + 20);
            v267 = &v132[v266];
            v268 = &v133[v266];
            if (v620(v268, 1, v38))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v267, v268, *(_QWORD *)(*(_QWORD *)(v269 - 8) + 64));
            }
            else
            {
              *v267 = *v268;
              *((_QWORD *)v267 + 1) = *((_QWORD *)v268 + 1);
              *((_DWORD *)v267 + 4) = *((_DWORD *)v268 + 4);
              *(_OWORD *)(v267 + 24) = *(_OWORD *)(v268 + 24);
              *(_OWORD *)(v267 + 40) = *(_OWORD *)(v268 + 40);
              *((_QWORD *)v267 + 7) = *((_QWORD *)v268 + 7);
              v270 = *(int *)(v38 + 28);
              __dstf = &v267[v270];
              v271 = &v268[v270];
              v272 = sub_224F67874();
              __srce = *(void (***)(void *, void *, _QWORD))(v272 - 8);
              v568 = v271;
              v273 = v271;
              v274 = v272;
              if (((unsigned int (*)(char *, uint64_t, uint64_t))__srce[6])(v273, 1, v272))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(__dstf, v568, *(_QWORD *)(*(_QWORD *)(v275 - 8) + 64));
              }
              else
              {
                __srce[4](__dstf, v568, v274);
                ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srce[7])(__dstf, 0, 1, v274);
              }
              *(_OWORD *)&v267[*(int *)(v38 + 32)] = *(_OWORD *)&v268[*(int *)(v38 + 32)];
              v34 = v589;
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v605[7])(v267, 0, 1, v38);
            }
            (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v135 + 7))(v132, 0, 1, v134);
          }
          a3 = v648;
          v10 = v650;
          v328 = v34[11];
          v329 = (char *)(v8 + v328);
          v330 = &v9[v328];
          if (v620(&v9[v328], 1, v38))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v329, v330, *(_QWORD *)(*(_QWORD *)(v331 - 8) + 64));
          }
          else
          {
            *v329 = *v330;
            *((_QWORD *)v329 + 1) = *((_QWORD *)v330 + 1);
            *((_DWORD *)v329 + 4) = *((_DWORD *)v330 + 4);
            *(_OWORD *)(v329 + 24) = *(_OWORD *)(v330 + 24);
            *(_OWORD *)(v329 + 40) = *(_OWORD *)(v330 + 40);
            *((_QWORD *)v329 + 7) = *((_QWORD *)v330 + 7);
            v332 = *(int *)(v38 + 28);
            v630 = &v329[v332];
            v333 = &v330[v332];
            v334 = sub_224F67874();
            v335 = *(_QWORD *)(v334 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v335 + 48))(v333, 1, v334))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v630, v333, *(_QWORD *)(*(_QWORD *)(v336 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v335 + 32))(v630, v333, v334);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v630, 0, 1, v334);
            }
            v10 = v650;
            *(_OWORD *)&v329[*(int *)(v38 + 32)] = *(_OWORD *)&v330[*(int *)(v38 + 32)];
            v34 = v589;
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v605[7])(v329, 0, 1, v38);
          }
          v11 = v635;
          v4 = v646;
          *(_OWORD *)(v8 + v34[12]) = *(_OWORD *)&v9[v34[12]];
          swift_storeEnumTagMultiPayload();
          break;
        case 3u:
          v644 = v4;
          v40 = *((_OWORD *)v9 + 1);
          *(_OWORD *)v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v40;
          *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
          v41 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
          v42 = v41[8];
          v43 = (char *)(v8 + v42);
          v44 = &v9[v42];
          v45 = type metadata accessor for FHIRDateTime();
          v46 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v45 - 8);
          if (v46[6](v44, 1, v45))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
          }
          else
          {
            v591 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v46;
            *v43 = *v44;
            *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
            *((_DWORD *)v43 + 4) = *((_DWORD *)v44 + 4);
            *(_OWORD *)(v43 + 24) = *(_OWORD *)(v44 + 24);
            *(_OWORD *)(v43 + 40) = *(_OWORD *)(v44 + 40);
            *((_QWORD *)v43 + 7) = *((_QWORD *)v44 + 7);
            v91 = *(int *)(v45 + 28);
            v625 = &v43[v91];
            v92 = &v44[v91];
            v93 = sub_224F67874();
            v94 = *(_QWORD *)(v93 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v625, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v625, v92, v93);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v625, 0, 1, v93);
            }
            *(_OWORD *)&v43[*(int *)(v45 + 32)] = *(_OWORD *)&v44[*(int *)(v45 + 32)];
            v591[7](v43, 0, 1, v45);
          }
          v138 = v41[9];
          v139 = (_QWORD *)(v8 + v138);
          v140 = &v9[v138];
          *v139 = *(_QWORD *)v140;
          *(_QWORD *)((char *)v139 + 5) = *(_QWORD *)(v140 + 5);
          *(_QWORD *)(v8 + v41[10]) = *(_QWORD *)&v9[v41[10]];
          *(_BYTE *)(v8 + v41[11]) = v9[v41[11]];
          *(_QWORD *)(v8 + v41[12]) = *(_QWORD *)&v9[v41[12]];
          v141 = v41[13];
          v142 = v8 + v141;
          v143 = &v9[v141];
          *(_OWORD *)v142 = *(_OWORD *)v143;
          *(_QWORD *)(v142 + 16) = *((_QWORD *)v143 + 2);
          *(_BYTE *)(v8 + v41[14]) = v9[v41[14]];
          v144 = v41[15];
          v145 = (_OWORD *)(v8 + v144);
          v146 = &v9[v144];
          v147 = type metadata accessor for Reference();
          v626 = *(_QWORD **)(v147 - 8);
          v148 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v626[6];
          if (v148(v146, 1, v147))
          {
            sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
          }
          else
          {
            v594 = (void *)v147;
            v611 = v148;
            v150 = *((_OWORD *)v146 + 1);
            *v145 = *(_OWORD *)v146;
            v145[1] = v150;
            v151 = *(int *)(v147 + 24);
            v152 = (_OWORD *)((char *)v145 + v151);
            v153 = &v146[v151];
            v154 = type metadata accessor for Identifier();
            v155 = *(void (***)(void))(v154 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v155[6])(v153, 1, v154))
            {
              sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v152, v153, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
              v147 = (uint64_t)v594;
              v148 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v611;
            }
            else
            {
              __srcc = v155;
              v565 = (int *)v154;
              v171 = *((_OWORD *)v153 + 1);
              *v152 = *(_OWORD *)v153;
              v152[1] = v171;
              *((_QWORD *)v152 + 4) = *((_QWORD *)v153 + 4);
              v172 = *(int *)(v154 + 24);
              __dstd = (char *)v152;
              v173 = (char *)v152 + v172;
              v174 = &v153[v172];
              v175 = sub_224F675D4();
              v176 = *(_QWORD *)(v175 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v176 + 48))(v174, 1, v175))
              {
                sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v173, v174, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v176 + 32))(v173, v174, v175);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v176 + 56))(v173, 0, 1, v175);
              }
              v147 = (uint64_t)v594;
              v148 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v611;
              *(_OWORD *)&__dstd[v565[7]] = *(_OWORD *)&v153[v565[7]];
              __srcc[7]();
            }
            ((void (*)(_OWORD *, _QWORD, uint64_t, uint64_t))v626[7])(v145, 0, 1, v147);
          }
          *(_OWORD *)(v8 + v41[16]) = *(_OWORD *)&v9[v41[16]];
          v276 = v41[17];
          v277 = (_OWORD *)(v8 + v276);
          v278 = &v9[v276];
          if (v148(&v9[v276], 1, v147))
          {
            sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v277, v278, *(_QWORD *)(*(_QWORD *)(v279 - 8) + 64));
            a3 = v648;
          }
          else
          {
            v280 = *((_OWORD *)v278 + 1);
            *v277 = *(_OWORD *)v278;
            v277[1] = v280;
            v281 = *(int *)(v147 + 24);
            v282 = (_OWORD *)((char *)v277 + v281);
            v283 = &v278[v281];
            v284 = type metadata accessor for Identifier();
            v285 = *(void (***)(void))(v284 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v285[6])(v283, 1, v284))
            {
              sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v282, v283, *(_QWORD *)(*(_QWORD *)(v286 - 8) + 64));
              a3 = v648;
            }
            else
            {
              v598 = v285;
              v615 = (char *)v282;
              v287 = *((_OWORD *)v283 + 1);
              *v282 = *(_OWORD *)v283;
              v282[1] = v287;
              *((_QWORD *)v282 + 4) = *((_QWORD *)v283 + 4);
              v288 = *(int *)(v284 + 24);
              __dstg = (char *)v282 + v288;
              v289 = &v283[v288];
              v290 = sub_224F675D4();
              __srcf = *(void (***)(void *, const void *, uint64_t))(v290 - 8);
              if (((unsigned int (*)(char *, uint64_t, uint64_t))__srcf[6])(v289, 1, v290))
              {
                sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(__dstg, v289, *(_QWORD *)(*(_QWORD *)(v291 - 8) + 64));
              }
              else
              {
                __srcf[4](__dstg, v289, v290);
                ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srcf[7])(__dstg, 0, 1, v290);
              }
              a3 = v648;
              *(_OWORD *)&v615[*(int *)(v284 + 28)] = *(_OWORD *)&v283[*(int *)(v284 + 28)];
              v598[7]();
            }
            ((void (*)(_OWORD *, _QWORD, uint64_t, uint64_t))v626[7])(v277, 0, 1, v147);
          }
          v10 = v650;
          v11 = v635;
          *(_OWORD *)(v8 + v41[18]) = *(_OWORD *)&v9[v41[18]];
LABEL_200:
          swift_storeEnumTagMultiPayload();
          v4 = v644;
          break;
        case 4u:
          v48 = *((_OWORD *)v9 + 1);
          *(_OWORD *)v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v48;
          *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
          *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
          *(_QWORD *)(v8 + 72) = *((_QWORD *)v9 + 9);
          *(_QWORD *)(v8 + 96) = *((_QWORD *)v9 + 12);
          *(_OWORD *)(v8 + 80) = *((_OWORD *)v9 + 5);
          *(_OWORD *)(v8 + 104) = *(_OWORD *)(v9 + 104);
          v49 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
          v50 = v49[11];
          v51 = (char *)(v8 + v50);
          v52 = &v9[v50];
          v53 = type metadata accessor for FHIRDateTime();
          __dst = *(_QWORD **)(v53 - 8);
          v606 = (unsigned int (*)(char *, uint64_t, uint64_t))__dst[6];
          v621 = v49;
          v590 = (int *)v53;
          if (v606(v52, 1, v53))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
          }
          else
          {
            *v51 = *v52;
            *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
            *((_DWORD *)v51 + 4) = *((_DWORD *)v52 + 4);
            *(_OWORD *)(v51 + 24) = *(_OWORD *)(v52 + 24);
            *(_OWORD *)(v51 + 40) = *(_OWORD *)(v52 + 40);
            *((_QWORD *)v51 + 7) = *((_QWORD *)v52 + 7);
            v96 = *(int *)(v53 + 28);
            v563 = &v51[v96];
            v97 = &v52[v96];
            v98 = sub_224F67874();
            v99 = *(_QWORD *)(v98 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v563, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v563, v97, v98);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v563, 0, 1, v98);
            }
            a3 = v648;
            v49 = v621;
            *(_OWORD *)&v51[*(int *)(v53 + 32)] = *(_OWORD *)&v52[*(int *)(v53 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dst[7])(v51, 0, 1, v53);
          }
          v157 = v49[12];
          v158 = (char *)(v8 + v157);
          v159 = &v9[v157];
          v160 = type metadata accessor for Period();
          v161 = *(_QWORD *)(v160 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48))(v159, 1, v160))
          {
            sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
            v163 = v590;
          }
          else
          {
            v564 = (int *)v160;
            v549 = v161;
            v163 = v590;
            __srca = v158;
            if (v606(v159, 1, (uint64_t)v590))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
              v165 = v564;
            }
            else
            {
              *v158 = *v159;
              *((_QWORD *)v158 + 1) = *((_QWORD *)v159 + 1);
              *((_DWORD *)v158 + 4) = *((_DWORD *)v159 + 4);
              *(_OWORD *)(v158 + 24) = *(_OWORD *)(v159 + 24);
              *(_OWORD *)(v158 + 40) = *(_OWORD *)(v159 + 40);
              *((_QWORD *)v158 + 7) = *((_QWORD *)v159 + 7);
              v178 = v590[7];
              v179 = &v158[v178];
              v180 = &v159[v178];
              v181 = sub_224F67874();
              v182 = *(_QWORD *)(v181 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v182 + 48))(v180, 1, v181))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v179, v180, v181);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v179, 0, 1, v181);
              }
              v158 = __srca;
              v165 = v564;
              v163 = v590;
              *(_OWORD *)&__srca[v590[8]] = *(_OWORD *)&v159[v590[8]];
              ((void (*)(char *, _QWORD, uint64_t, int *))__dst[7])(__srca, 0, 1, v590);
              a3 = v648;
              v49 = v621;
            }
            v292 = v165[5];
            v293 = &v158[v292];
            v294 = &v159[v292];
            if (v606(v294, 1, (uint64_t)v163))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v293, v294, *(_QWORD *)(*(_QWORD *)(v295 - 8) + 64));
              v297 = v549;
              v296 = __srca;
            }
            else
            {
              *v293 = *v294;
              *((_QWORD *)v293 + 1) = *((_QWORD *)v294 + 1);
              *((_DWORD *)v293 + 4) = *((_DWORD *)v294 + 4);
              *(_OWORD *)(v293 + 24) = *(_OWORD *)(v294 + 24);
              *(_OWORD *)(v293 + 40) = *(_OWORD *)(v294 + 40);
              *((_QWORD *)v293 + 7) = *((_QWORD *)v294 + 7);
              v298 = v163[7];
              v547 = &v293[v298];
              v299 = &v294[v298];
              v300 = sub_224F67874();
              v301 = *(_QWORD *)(v300 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v301 + 48))(v299, 1, v300))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v547, v299, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v301 + 32))(v547, v299, v300);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v547, 0, 1, v300);
              }
              a3 = v648;
              v49 = v621;
              *(_OWORD *)&v293[v163[8]] = *(_OWORD *)&v294[v163[8]];
              ((void (*)(char *, _QWORD, uint64_t, int *))__dst[7])(v293, 0, 1, v163);
              v297 = v549;
              v296 = __srca;
              v165 = v564;
            }
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v297 + 56))(v296, 0, 1, v165);
          }
          v337 = v49[13];
          v338 = (char *)(v8 + v337);
          v339 = &v9[v337];
          if (v606(&v9[v337], 1, (uint64_t)v163))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v338, v339, *(_QWORD *)(*(_QWORD *)(v340 - 8) + 64));
          }
          else
          {
            *v338 = *v339;
            *((_QWORD *)v338 + 1) = *((_QWORD *)v339 + 1);
            *((_DWORD *)v338 + 4) = *((_DWORD *)v339 + 4);
            *(_OWORD *)(v338 + 24) = *(_OWORD *)(v339 + 24);
            *(_OWORD *)(v338 + 40) = *(_OWORD *)(v339 + 40);
            *((_QWORD *)v338 + 7) = *((_QWORD *)v339 + 7);
            v341 = v163[7];
            v616 = &v338[v341];
            v342 = &v339[v341];
            v343 = sub_224F67874();
            v344 = *(_QWORD *)(v343 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v344 + 48))(v342, 1, v343))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v616, v342, *(_QWORD *)(*(_QWORD *)(v345 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v344 + 32))(v616, v342, v343);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v344 + 56))(v616, 0, 1, v343);
            }
            a3 = v648;
            v49 = v621;
            *(_OWORD *)&v338[v163[8]] = *(_OWORD *)&v339[v163[8]];
            ((void (*)(char *, _QWORD, uint64_t, int *))__dst[7])(v338, 0, 1, v163);
          }
          *(_QWORD *)(v8 + v49[14]) = *(_QWORD *)&v9[v49[14]];
          *(_OWORD *)(v8 + v49[15]) = *(_OWORD *)&v9[v49[15]];
          v346 = v49[16];
          v347 = v8 + v346;
          v348 = &v9[v346];
          *(_OWORD *)v347 = *(_OWORD *)v348;
          *(_QWORD *)(v347 + 16) = *((_QWORD *)v348 + 2);
          v349 = v49[17];
          v350 = (_OWORD *)(v8 + v349);
          v351 = &v9[v349];
          v352 = type metadata accessor for Quantity();
          v353 = *(_QWORD *)(v352 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v353 + 48))(v351, 1, v352))
          {
            sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v350, v351, *(_QWORD *)(*(_QWORD *)(v354 - 8) + 64));
          }
          else
          {
            v647 = v4;
            *v350 = *(_OWORD *)v351;
            *(_QWORD *)((char *)v350 + 13) = *(_QWORD *)(v351 + 13);
            *(_OWORD *)((char *)v350 + 24) = *(_OWORD *)(v351 + 24);
            *(_OWORD *)((char *)v350 + 40) = *(_OWORD *)(v351 + 40);
            v355 = *(int *)(v352 + 28);
            v617 = (char *)v350 + v355;
            v356 = &v351[v355];
            v357 = sub_224F675D4();
            v358 = *(_QWORD *)(v357 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v358 + 48))(v356, 1, v357))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v617, v356, *(_QWORD *)(*(_QWORD *)(v359 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v358 + 32))(v617, v356, v357);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v358 + 56))(v617, 0, 1, v357);
            }
            v4 = v647;
            a3 = v648;
            *(_OWORD *)((char *)v350 + *(int *)(v352 + 32)) = *(_OWORD *)&v351[*(int *)(v352 + 32)];
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v353 + 56))(v350, 0, 1, v352);
          }
          v10 = v650;
          v11 = v635;
          *(_QWORD *)(v8 + v621[18]) = *(_QWORD *)&v9[v621[18]];
          *(_OWORD *)(v8 + v621[19]) = *(_OWORD *)&v9[v621[19]];
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy((void *)v8, v9, v11[8]);
          break;
      }
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v11[7])(v8, 0, 1, v10);
      goto LABEL_202;
    }
    v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
    goto LABEL_6;
  }
  if (v14)
  {
    sub_224DDEAA0(v8, type metadata accessor for ModelsDSTU2.ResourceProxy);
    v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
    sub_224DDEA0C(0, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy, v15);
    v17 = *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64);
LABEL_7:
    memcpy((void *)v8, v9, v17);
    goto LABEL_202;
  }
  if (a1 != v4)
  {
    sub_224DDEAA0(v8, type metadata accessor for ModelsDSTU2.ResourceProxy);
    v645 = v4;
    v649 = a3;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(_OWORD *)v8 = *(_OWORD *)v9;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
        v25 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
        v26 = v25[6];
        v27 = (_OWORD *)(v8 + v26);
        v28 = &v9[v26];
        v29 = type metadata accessor for Reference();
        v30 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v29 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v30)[6](v28, 1, v29))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        else
        {
          v638 = v30;
          v101 = *((_OWORD *)v28 + 1);
          *v27 = *(_OWORD *)v28;
          v27[1] = v101;
          v102 = *(int *)(v29 + 24);
          v103 = (_OWORD *)((char *)v27 + v102);
          v104 = &v28[v102];
          v105 = type metadata accessor for Identifier();
          v106 = *(void (***)(void))(v105 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v106[6])(v104, 1, v105))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
            v108 = (void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))v638;
          }
          else
          {
            v612 = v106;
            v627 = (char *)v103;
            v184 = *((_OWORD *)v104 + 1);
            *v103 = *(_OWORD *)v104;
            v103[1] = v184;
            *((_QWORD *)v103 + 4) = *((_QWORD *)v104 + 4);
            v185 = *(int *)(v105 + 24);
            v595 = (char *)v103 + v185;
            v186 = &v104[v185];
            v187 = sub_224F675D4();
            v188 = *(_QWORD *)(v187 - 8);
            v566 = (void *)v187;
            if ((*(unsigned int (**)(char *, uint64_t))(v188 + 48))(v186, 1))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v595, v186, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(v188 + 32))(v595, v186, v566);
              (*(void (**)(char *, _QWORD, uint64_t, void *))(v188 + 56))(v595, 0, 1, v566);
            }
            v108 = (void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))v638;
            *(_OWORD *)&v627[*(int *)(v105 + 28)] = *(_OWORD *)&v104[*(int *)(v105 + 28)];
            v612[7]();
          }
          v108[7](v27, 0, 1, v29);
        }
        v393 = v25[7];
        v394 = (char *)(v8 + v393);
        v395 = &v9[v393];
        v396 = type metadata accessor for FHIRDateTime();
        v618 = *(_QWORD **)(v396 - 8);
        v397 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v618[6];
        v632 = (int *)v396;
        v601 = v397;
        if (v397(v395, 1, v396))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v394, v395, *(_QWORD *)(*(_QWORD *)(v398 - 8) + 64));
        }
        else
        {
          *v394 = *v395;
          *((_QWORD *)v394 + 1) = *((_QWORD *)v395 + 1);
          *((_DWORD *)v394 + 4) = *((_DWORD *)v395 + 4);
          *(_OWORD *)(v394 + 24) = *(_OWORD *)(v395 + 24);
          *(_OWORD *)(v394 + 40) = *(_OWORD *)(v395 + 40);
          *((_QWORD *)v394 + 7) = *((_QWORD *)v395 + 7);
          v399 = *(int *)(v396 + 28);
          v400 = &v394[v399];
          v401 = &v395[v399];
          v402 = sub_224F67874();
          v403 = *(_QWORD *)(v402 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v403 + 48))(v401, 1, v402))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v400, v401, *(_QWORD *)(*(_QWORD *)(v404 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v403 + 32))(v400, v401, v402);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v403 + 56))(v400, 0, 1, v402);
          }
          v396 = (uint64_t)v632;
          *(_OWORD *)&v394[v632[8]] = *(_OWORD *)&v395[v632[8]];
          ((void (*)(char *, _QWORD, uint64_t, int *))v618[7])(v394, 0, 1, v632);
          v397 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v601;
        }
        v405 = v25[8];
        v406 = v8 + v405;
        v407 = &v9[v405];
        *(_OWORD *)v406 = *(_OWORD *)v407;
        *(_QWORD *)(v406 + 16) = *((_QWORD *)v407 + 2);
        v408 = v25[9];
        v409 = v8 + v408;
        v410 = &v9[v408];
        *(_QWORD *)(v409 + 16) = *((_QWORD *)v410 + 2);
        *(_OWORD *)v409 = *(_OWORD *)v410;
        *(_OWORD *)(v8 + v25[10]) = *(_OWORD *)&v9[v25[10]];
        *(_OWORD *)(v8 + v25[11]) = *(_OWORD *)&v9[v25[11]];
        v411 = v25[12];
        v412 = v8 + v411;
        v413 = &v9[v411];
        *(_OWORD *)v412 = *(_OWORD *)v413;
        *(_QWORD *)(v412 + 16) = *((_QWORD *)v413 + 2);
        *(_QWORD *)(v8 + v25[13]) = *(_QWORD *)&v9[v25[13]];
        v414 = v25[14];
        v415 = (char *)(v8 + v414);
        v416 = &v9[v414];
        if (v397(&v9[v414], 1, v396))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v415, v416, *(_QWORD *)(*(_QWORD *)(v417 - 8) + 64));
        }
        else
        {
          *v415 = *v416;
          *((_QWORD *)v415 + 1) = *((_QWORD *)v416 + 1);
          *((_DWORD *)v415 + 4) = *((_DWORD *)v416 + 4);
          *(_OWORD *)(v415 + 24) = *(_OWORD *)(v416 + 24);
          *(_OWORD *)(v415 + 40) = *(_OWORD *)(v416 + 40);
          *((_QWORD *)v415 + 7) = *((_QWORD *)v416 + 7);
          v418 = *(int *)(v396 + 28);
          v419 = &v415[v418];
          v420 = &v416[v418];
          v421 = sub_224F67874();
          v422 = *(_QWORD *)(v421 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v422 + 48))(v420, 1, v421))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v419, v420, *(_QWORD *)(*(_QWORD *)(v423 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v422 + 32))(v419, v420, v421);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v422 + 56))(v419, 0, 1, v421);
          }
          v396 = (uint64_t)v632;
          *(_OWORD *)&v415[v632[8]] = *(_OWORD *)&v416[v632[8]];
          ((void (*)(char *, _QWORD, uint64_t, int *))v618[7])(v415, 0, 1, v632);
          v397 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v601;
        }
        v424 = v25[15];
        v425 = (char *)(v8 + v424);
        v426 = &v9[v424];
        v427 = type metadata accessor for Period();
        __dstj = *(_QWORD **)(v427 - 8);
        v428 = (unsigned int (*)(char *, uint64_t))__dstj[6];
        v641 = (int *)v427;
        if (v428(v426, 1))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v425, v426, *(_QWORD *)(*(_QWORD *)(v429 - 8) + 64));
        }
        else
        {
          if (v397(v426, 1, v396))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v425, v426, *(_QWORD *)(*(_QWORD *)(v430 - 8) + 64));
          }
          else
          {
            *v425 = *v426;
            *((_QWORD *)v425 + 1) = *((_QWORD *)v426 + 1);
            *((_DWORD *)v425 + 4) = *((_DWORD *)v426 + 4);
            *(_OWORD *)(v425 + 24) = *(_OWORD *)(v426 + 24);
            *(_OWORD *)(v425 + 40) = *(_OWORD *)(v426 + 40);
            *((_QWORD *)v425 + 7) = *((_QWORD *)v426 + 7);
            v431 = *(int *)(v396 + 28);
            v571 = &v425[v431];
            v432 = &v426[v431];
            v433 = sub_224F67874();
            v434 = *(_QWORD *)(v433 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v434 + 48))(v432, 1, v433))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v571, v432, *(_QWORD *)(*(_QWORD *)(v435 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v434 + 32))(v571, v432, v433);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v434 + 56))(v571, 0, 1, v433);
            }
            v396 = (uint64_t)v632;
            *(_OWORD *)&v425[v632[8]] = *(_OWORD *)&v426[v632[8]];
            ((void (*)(char *, _QWORD, uint64_t, int *))v618[7])(v425, 0, 1, v632);
            v397 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v601;
          }
          v474 = v641[5];
          v475 = &v425[v474];
          v476 = &v426[v474];
          if (v397(v476, 1, v396))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v475, v476, *(_QWORD *)(*(_QWORD *)(v477 - 8) + 64));
          }
          else
          {
            *v475 = *v476;
            *((_QWORD *)v475 + 1) = *((_QWORD *)v476 + 1);
            *((_DWORD *)v475 + 4) = *((_DWORD *)v476 + 4);
            *(_OWORD *)(v475 + 24) = *(_OWORD *)(v476 + 24);
            *(_OWORD *)(v475 + 40) = *(_OWORD *)(v476 + 40);
            *((_QWORD *)v475 + 7) = *((_QWORD *)v476 + 7);
            v478 = *(int *)(v396 + 28);
            v573 = &v475[v478];
            v479 = &v476[v478];
            v480 = sub_224F67874();
            v551 = *(_QWORD *)(v480 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v551 + 48))(v479, 1, v480))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v573, v479, *(_QWORD *)(*(_QWORD *)(v481 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v551 + 32))(v573, v479, v480);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v551 + 56))(v573, 0, 1, v480);
            }
            v396 = (uint64_t)v632;
            *(_OWORD *)&v475[v632[8]] = *(_OWORD *)&v476[v632[8]];
            ((void (*)(char *, _QWORD, uint64_t, int *))v618[7])(v475, 0, 1, v632);
            v397 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v601;
          }
          ((void (*)(char *, _QWORD, uint64_t, int *))__dstj[7])(v425, 0, 1, v641);
        }
        *(_OWORD *)(v8 + v25[16]) = *(_OWORD *)&v9[v25[16]];
        v516 = v25[17];
        v517 = (char *)(v8 + v516);
        v518 = &v9[v516];
        if (v397(&v9[v516], 1, v396))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v517, v518, *(_QWORD *)(*(_QWORD *)(v519 - 8) + 64));
          v520 = v641;
        }
        else
        {
          v574 = v428;
          *v517 = *v518;
          *((_QWORD *)v517 + 1) = *((_QWORD *)v518 + 1);
          *((_DWORD *)v517 + 4) = *((_DWORD *)v518 + 4);
          *(_OWORD *)(v517 + 24) = *(_OWORD *)(v518 + 24);
          *(_OWORD *)(v517 + 40) = *(_OWORD *)(v518 + 40);
          *((_QWORD *)v517 + 7) = *((_QWORD *)v518 + 7);
          v521 = *(int *)(v396 + 28);
          v522 = &v517[v521];
          v523 = &v518[v521];
          v524 = sub_224F67874();
          v525 = *(_QWORD *)(v524 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v525 + 48))(v523, 1, v524))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v522, v523, *(_QWORD *)(*(_QWORD *)(v526 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v525 + 32))(v522, v523, v524);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v525 + 56))(v522, 0, 1, v524);
          }
          v396 = (uint64_t)v632;
          *(_OWORD *)&v517[v632[8]] = *(_OWORD *)&v518[v632[8]];
          ((void (*)(char *, _QWORD, uint64_t, int *))v618[7])(v517, 0, 1, v632);
          v520 = v641;
          v428 = v574;
        }
        v527 = v25[18];
        v528 = (char *)(v8 + v527);
        v529 = &v9[v527];
        if (((unsigned int (*)(char *, uint64_t, int *))v428)(&v9[v527], 1, v520))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v528, v529, *(_QWORD *)(*(_QWORD *)(v530 - 8) + 64));
          a3 = v649;
        }
        else
        {
          v531 = (unsigned int (*)(char *, uint64_t, uint64_t))v601;
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v601)(v529, 1, v396))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v528, v529, *(_QWORD *)(*(_QWORD *)(v532 - 8) + 64));
            a3 = v649;
          }
          else
          {
            *v528 = *v529;
            *((_QWORD *)v528 + 1) = *((_QWORD *)v529 + 1);
            *((_DWORD *)v528 + 4) = *((_DWORD *)v529 + 4);
            *(_OWORD *)(v528 + 24) = *(_OWORD *)(v529 + 24);
            *(_OWORD *)(v528 + 40) = *(_OWORD *)(v529 + 40);
            *((_QWORD *)v528 + 7) = *((_QWORD *)v529 + 7);
            v533 = *(int *)(v396 + 28);
            v534 = &v528[v533];
            v535 = &v529[v533];
            v536 = sub_224F67874();
            v537 = *(_QWORD *)(v536 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v537 + 48))(v535, 1, v536))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v534, v535, *(_QWORD *)(*(_QWORD *)(v538 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v537 + 32))(v534, v535, v536);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v537 + 56))(v534, 0, 1, v536);
            }
            v396 = (uint64_t)v632;
            v520 = v641;
            *(_OWORD *)&v528[v632[8]] = *(_OWORD *)&v529[v632[8]];
            ((void (*)(char *, _QWORD, uint64_t, int *))v618[7])(v528, 0, 1, v632);
            a3 = v649;
            v531 = (unsigned int (*)(char *, uint64_t, uint64_t))v601;
          }
          v539 = v520[5];
          v540 = &v528[v539];
          v541 = &v529[v539];
          if (v531(v541, 1, v396))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v540, v541, *(_QWORD *)(*(_QWORD *)(v542 - 8) + 64));
          }
          else
          {
            *v540 = *v541;
            *((_QWORD *)v540 + 1) = *((_QWORD *)v541 + 1);
            *((_DWORD *)v540 + 4) = *((_DWORD *)v541 + 4);
            *(_OWORD *)(v540 + 24) = *(_OWORD *)(v541 + 24);
            *(_OWORD *)(v540 + 40) = *(_OWORD *)(v541 + 40);
            *((_QWORD *)v540 + 7) = *((_QWORD *)v541 + 7);
            v543 = *(int *)(v396 + 28);
            v604 = &v540[v543];
            v544 = &v541[v543];
            v545 = sub_224F67874();
            __srcj = *(void (***)(void *, const void *, uint64_t))(v545 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))__srcj[6])(v544, 1, v545))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v604, v544, *(_QWORD *)(*(_QWORD *)(v546 - 8) + 64));
            }
            else
            {
              __srcj[4](v604, v544, v545);
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srcj[7])(v604, 0, 1, v545);
            }
            *(_OWORD *)&v540[v632[8]] = *(_OWORD *)&v541[v632[8]];
            ((void (*)(char *, _QWORD, uint64_t))v618[7])(v540, 0, 1);
          }
          ((void (*)(char *, _QWORD, uint64_t, int *))__dstj[7])(v528, 0, 1, v641);
        }
        *(_OWORD *)(v8 + v25[19]) = *(_OWORD *)&v9[v25[19]];
        *(_OWORD *)(v8 + v25[20]) = *(_OWORD *)&v9[v25[20]];
        *(_OWORD *)(v8 + v25[21]) = *(_OWORD *)&v9[v25[21]];
        goto LABEL_306;
      case 2u:
        v63 = *((_OWORD *)v9 + 1);
        *(_OWORD *)v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v63;
        v64 = *((_OWORD *)v9 + 3);
        *(_OWORD *)(v8 + 32) = *((_OWORD *)v9 + 2);
        *(_OWORD *)(v8 + 48) = v64;
        *(_QWORD *)(v8 + 64) = *((_QWORD *)v9 + 8);
        *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
        v65 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
        v66 = *(int *)(v65 + 36);
        v67 = (char *)(v8 + v66);
        v68 = &v9[v66];
        v69 = type metadata accessor for FHIRDateTime();
        v607 = *(_QWORD **)(v69 - 8);
        v636 = (unsigned int (*)(char *, uint64_t, uint64_t))v607[6];
        v623 = (int *)v65;
        if (v636(v68, 1, v69))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
        }
        else
        {
          *v67 = *v68;
          *((_QWORD *)v67 + 1) = *((_QWORD *)v68 + 1);
          *((_DWORD *)v67 + 4) = *((_DWORD *)v68 + 4);
          *(_OWORD *)(v67 + 24) = *(_OWORD *)(v68 + 24);
          *(_OWORD *)(v67 + 40) = *(_OWORD *)(v68 + 40);
          *((_QWORD *)v67 + 7) = *((_QWORD *)v68 + 7);
          v115 = *(int *)(v69 + 28);
          v593 = &v67[v115];
          v116 = &v68[v115];
          v117 = sub_224F67874();
          v118 = *(_QWORD *)(v117 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v593, v116, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v593, v116, v117);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v593, 0, 1, v117);
          }
          *(_OWORD *)&v67[*(int *)(v69 + 32)] = *(_OWORD *)&v68[*(int *)(v69 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v607[7])(v67, 0, 1, v69);
          v65 = (uint64_t)v623;
        }
        v232 = *(int *)(v65 + 40);
        v233 = (char *)(v8 + v232);
        v234 = &v9[v232];
        v235 = type metadata accessor for Period();
        v236 = *(void **)(v235 - 8);
        if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v236 + 6))(v234, 1, v235))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v233, v234, *(_QWORD *)(*(_QWORD *)(v237 - 8) + 64));
        }
        else
        {
          if (v636(v234, 1, v69))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v233, v234, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
          }
          else
          {
            v569 = v236;
            *v233 = *v234;
            *((_QWORD *)v233 + 1) = *((_QWORD *)v234 + 1);
            *((_DWORD *)v233 + 4) = *((_DWORD *)v234 + 4);
            *(_OWORD *)(v233 + 24) = *(_OWORD *)(v234 + 24);
            *(_OWORD *)(v233 + 40) = *(_OWORD *)(v234 + 40);
            *((_QWORD *)v233 + 7) = *((_QWORD *)v234 + 7);
            v311 = *(int *)(v69 + 28);
            v599 = &v233[v311];
            v312 = &v234[v311];
            v313 = sub_224F67874();
            v314 = *(_QWORD *)(v313 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v314 + 48))(v312, 1, v313))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v599, v312, *(_QWORD *)(*(_QWORD *)(v315 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v314 + 32))(v599, v312, v313);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v599, 0, 1, v313);
            }
            *(_OWORD *)&v233[*(int *)(v69 + 32)] = *(_OWORD *)&v234[*(int *)(v69 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v607[7])(v233, 0, 1, v69);
            v236 = v569;
          }
          v436 = *(int *)(v235 + 20);
          v437 = &v233[v436];
          v438 = &v234[v436];
          if (v636(v438, 1, v69))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v437, v438, *(_QWORD *)(*(_QWORD *)(v439 - 8) + 64));
          }
          else
          {
            *v437 = *v438;
            *((_QWORD *)v437 + 1) = *((_QWORD *)v438 + 1);
            *((_DWORD *)v437 + 4) = *((_DWORD *)v438 + 4);
            *(_OWORD *)(v437 + 24) = *(_OWORD *)(v438 + 24);
            *(_OWORD *)(v437 + 40) = *(_OWORD *)(v438 + 40);
            *((_QWORD *)v437 + 7) = *((_QWORD *)v438 + 7);
            v440 = *(int *)(v69 + 28);
            v602 = &v437[v440];
            v441 = &v438[v440];
            v442 = sub_224F67874();
            v572 = *(void (***)(void *, void *, _QWORD))(v442 - 8);
            __dstk = v441;
            v443 = v441;
            v444 = v442;
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v572[6])(v443, 1, v442))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v602, __dstk, *(_QWORD *)(*(_QWORD *)(v445 - 8) + 64));
            }
            else
            {
              v572[4](v602, __dstk, v444);
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v572[7])(v602, 0, 1, v444);
            }
            *(_OWORD *)&v437[*(int *)(v69 + 32)] = *(_OWORD *)&v438[*(int *)(v69 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v607[7])(v437, 0, 1, v69);
          }
          (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v236 + 7))(v233, 0, 1, v235);
        }
        a3 = v649;
        v482 = v623;
        v483 = v623[11];
        v484 = (char *)(v8 + v483);
        v485 = &v9[v483];
        if (v636(&v9[v483], 1, v69))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v484, v485, *(_QWORD *)(*(_QWORD *)(v486 - 8) + 64));
          v4 = v645;
        }
        else
        {
          *v484 = *v485;
          *((_QWORD *)v484 + 1) = *((_QWORD *)v485 + 1);
          *((_DWORD *)v484 + 4) = *((_DWORD *)v485 + 4);
          *(_OWORD *)(v484 + 24) = *(_OWORD *)(v485 + 24);
          *(_OWORD *)(v484 + 40) = *(_OWORD *)(v485 + 40);
          *((_QWORD *)v484 + 7) = *((_QWORD *)v485 + 7);
          v487 = *(int *)(v69 + 28);
          v643 = &v484[v487];
          v488 = &v485[v487];
          v489 = sub_224F67874();
          v490 = *(_QWORD *)(v489 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v490 + 48))(v488, 1, v489))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v643, v488, *(_QWORD *)(*(_QWORD *)(v491 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v490 + 32))(v643, v488, v489);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v490 + 56))(v643, 0, 1, v489);
          }
          *(_OWORD *)&v484[*(int *)(v69 + 32)] = *(_OWORD *)&v485[*(int *)(v69 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v607[7])(v484, 0, 1, v69);
          v4 = v645;
          v482 = v623;
        }
        *(_OWORD *)(v8 + v482[12]) = *(_OWORD *)&v9[v482[12]];
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v71 = *((_OWORD *)v9 + 1);
        *(_OWORD *)v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v71;
        *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        v72 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
        v73 = v72[8];
        v74 = (char *)(v8 + v73);
        v75 = &v9[v73];
        v76 = type metadata accessor for FHIRDateTime();
        v77 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v76 - 8);
        if (v77[6](v75, 1, v76))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
        }
        else
        {
          v610 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v77;
          *v74 = *v75;
          *((_QWORD *)v74 + 1) = *((_QWORD *)v75 + 1);
          *((_DWORD *)v74 + 4) = *((_DWORD *)v75 + 4);
          *(_OWORD *)(v74 + 24) = *(_OWORD *)(v75 + 24);
          *(_OWORD *)(v74 + 40) = *(_OWORD *)(v75 + 40);
          *((_QWORD *)v74 + 7) = *((_QWORD *)v75 + 7);
          v120 = *(int *)(v76 + 28);
          v639 = &v74[v120];
          v121 = &v75[v120];
          v122 = sub_224F67874();
          v123 = *(_QWORD *)(v122 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v639, v121, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v639, v121, v122);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v639, 0, 1, v122);
          }
          *(_OWORD *)&v74[*(int *)(v76 + 32)] = *(_OWORD *)&v75[*(int *)(v76 + 32)];
          v610[7](v74, 0, 1, v76);
        }
        v239 = v72[9];
        v240 = (_QWORD *)(v8 + v239);
        v241 = &v9[v239];
        *v240 = *(_QWORD *)v241;
        *(_QWORD *)((char *)v240 + 5) = *(_QWORD *)(v241 + 5);
        *(_QWORD *)(v8 + v72[10]) = *(_QWORD *)&v9[v72[10]];
        *(_BYTE *)(v8 + v72[11]) = v9[v72[11]];
        *(_QWORD *)(v8 + v72[12]) = *(_QWORD *)&v9[v72[12]];
        v242 = v72[13];
        v243 = v8 + v242;
        v244 = &v9[v242];
        *(_OWORD *)v243 = *(_OWORD *)v244;
        *(_QWORD *)(v243 + 16) = *((_QWORD *)v244 + 2);
        *(_BYTE *)(v8 + v72[14]) = v9[v72[14]];
        v245 = v72[15];
        v246 = (_OWORD *)(v8 + v245);
        v247 = &v9[v245];
        v248 = type metadata accessor for Reference();
        v249 = *(_QWORD **)(v248 - 8);
        v250 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v249[6];
        if (v250(v247, 1, v248))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v246, v247, *(_QWORD *)(*(_QWORD *)(v251 - 8) + 64));
        }
        else
        {
          v614 = (void *)v248;
          v629 = v250;
          v252 = *((_OWORD *)v247 + 1);
          *v246 = *(_OWORD *)v247;
          v246[1] = v252;
          v253 = *(int *)(v248 + 24);
          v254 = (_OWORD *)((char *)v246 + v253);
          v255 = &v247[v253];
          v256 = type metadata accessor for Identifier();
          v257 = *(void (***)(void))(v256 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v257[6])(v255, 1, v256))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v254, v255, *(_QWORD *)(*(_QWORD *)(v258 - 8) + 64));
            v248 = (uint64_t)v614;
            v250 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v629;
          }
          else
          {
            v570 = v257;
            __dsth = (int *)v256;
            v640 = v249;
            v316 = *((_OWORD *)v255 + 1);
            *v254 = *(_OWORD *)v255;
            v254[1] = v316;
            *((_QWORD *)v254 + 4) = *((_QWORD *)v255 + 4);
            v317 = *(int *)(v256 + 24);
            v600 = (char *)v254;
            v318 = (char *)v254 + v317;
            v319 = &v255[v317];
            v320 = sub_224F675D4();
            v321 = *(_QWORD *)(v320 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v321 + 48))(v319, 1, v320))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v318, v319, *(_QWORD *)(*(_QWORD *)(v322 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v321 + 32))(v318, v319, v320);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v321 + 56))(v318, 0, 1, v320);
            }
            v250 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v629;
            v249 = v640;
            v248 = (uint64_t)v614;
            *(_OWORD *)&v600[__dsth[7]] = *(_OWORD *)&v255[__dsth[7]];
            v570[7]();
          }
          ((void (*)(_OWORD *, _QWORD, uint64_t, uint64_t))v249[7])(v246, 0, 1, v248);
        }
        *(_OWORD *)(v8 + v72[16]) = *(_OWORD *)&v9[v72[16]];
        v446 = v72[17];
        v447 = (_OWORD *)(v8 + v446);
        v448 = &v9[v446];
        if (v250(&v9[v446], 1, v248))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v447, v448, *(_QWORD *)(*(_QWORD *)(v449 - 8) + 64));
          a3 = v649;
        }
        else
        {
          v642 = v249;
          v450 = *((_OWORD *)v448 + 1);
          *v447 = *(_OWORD *)v448;
          v447[1] = v450;
          v451 = *(int *)(v248 + 24);
          v452 = (_OWORD *)((char *)v447 + v451);
          v453 = &v448[v451];
          v454 = type metadata accessor for Identifier();
          v455 = *(void (***)(void))(v454 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v455[6])(v453, 1, v454))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v452, v453, *(_QWORD *)(*(_QWORD *)(v456 - 8) + 64));
            a3 = v649;
          }
          else
          {
            __dstl = v455;
            v457 = *((_OWORD *)v453 + 1);
            *v452 = *(_OWORD *)v453;
            v452[1] = v457;
            *((_QWORD *)v452 + 4) = *((_QWORD *)v453 + 4);
            v458 = *(int *)(v454 + 24);
            v619 = (char *)v452;
            v633 = (char *)v452 + v458;
            v459 = &v453[v458];
            v460 = sub_224F675D4();
            v461 = *(_QWORD *)(v460 - 8);
            v603 = v459;
            v462 = v459;
            v463 = v460;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v461 + 48))(v462, 1, v460))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v633, v603, *(_QWORD *)(*(_QWORD *)(v464 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(v461 + 32))(v633, v603, v463);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v461 + 56))(v633, 0, 1, v463);
            }
            a3 = v649;
            *(_OWORD *)&v619[*(int *)(v454 + 28)] = *(_OWORD *)&v453[*(int *)(v454 + 28)];
            __dstl[7]();
          }
          (*((void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))v642 + 7))(v447, 0, 1, v248);
        }
        *(_OWORD *)(v8 + v72[18]) = *(_OWORD *)&v9[v72[18]];
LABEL_306:
        swift_storeEnumTagMultiPayload();
        v4 = v645;
        break;
      case 4u:
        v79 = *((_OWORD *)v9 + 1);
        *(_OWORD *)v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v79;
        *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
        *(_QWORD *)(v8 + 72) = *((_QWORD *)v9 + 9);
        *(_QWORD *)(v8 + 96) = *((_QWORD *)v9 + 12);
        *(_OWORD *)(v8 + 80) = *((_OWORD *)v9 + 5);
        *(_OWORD *)(v8 + 104) = *(_OWORD *)(v9 + 104);
        v80 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
        v81 = v80[11];
        v82 = (char *)(v8 + v81);
        v83 = &v9[v81];
        v84 = type metadata accessor for FHIRDateTime();
        v608 = *(_QWORD **)(v84 - 8);
        v624 = (unsigned int (*)(char *, uint64_t, uint64_t))v608[6];
        v637 = v80;
        if (v624(v83, 1, v84))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
        }
        else
        {
          *v82 = *v83;
          *((_QWORD *)v82 + 1) = *((_QWORD *)v83 + 1);
          *((_DWORD *)v82 + 4) = *((_DWORD *)v83 + 4);
          *(_OWORD *)(v82 + 24) = *(_OWORD *)(v83 + 24);
          *(_OWORD *)(v82 + 40) = *(_OWORD *)(v83 + 40);
          *((_QWORD *)v82 + 7) = *((_QWORD *)v83 + 7);
          v125 = *(int *)(v84 + 28);
          v126 = &v82[v125];
          v127 = &v83[v125];
          v128 = sub_224F67874();
          v129 = *(_QWORD *)(v128 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v126, v127, v128);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v126, 0, 1, v128);
          }
          *(_OWORD *)&v82[*(int *)(v84 + 32)] = *(_OWORD *)&v83[*(int *)(v84 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v608[7])(v82, 0, 1, v84);
          v80 = v637;
          v4 = v645;
        }
        v259 = v80[12];
        v260 = (char *)(v8 + v259);
        v261 = &v9[v259];
        v262 = type metadata accessor for Period();
        v263 = *(void **)(v262 - 8);
        if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v263 + 6))(v261, 1, v262))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v260, v261, *(_QWORD *)(*(_QWORD *)(v264 - 8) + 64));
        }
        else
        {
          v597 = v260;
          if (v624(v261, 1, v84))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v260, v261, *(_QWORD *)(*(_QWORD *)(v265 - 8) + 64));
          }
          else
          {
            *v260 = *v261;
            *((_QWORD *)v260 + 1) = *((_QWORD *)v261 + 1);
            *((_DWORD *)v260 + 4) = *((_DWORD *)v261 + 4);
            *(_OWORD *)(v260 + 24) = *(_OWORD *)(v261 + 24);
            *(_OWORD *)(v260 + 40) = *(_OWORD *)(v261 + 40);
            *((_QWORD *)v260 + 7) = *((_QWORD *)v261 + 7);
            v323 = *(int *)(v84 + 28);
            __dsti = &v260[v323];
            v324 = &v261[v323];
            v325 = sub_224F67874();
            v326 = *(_QWORD *)(v325 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v326 + 48))(v324, 1, v325))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__dsti, v324, *(_QWORD *)(*(_QWORD *)(v327 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v326 + 32))(__dsti, v324, v325);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v326 + 56))(__dsti, 0, 1, v325);
            }
            v260 = v597;
            *(_OWORD *)&v597[*(int *)(v84 + 32)] = *(_OWORD *)&v261[*(int *)(v84 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v608[7])(v597, 0, 1, v84);
            v80 = v637;
            v4 = v645;
          }
          v465 = *(int *)(v262 + 20);
          v466 = &v260[v465];
          v467 = &v261[v465];
          if (v624(v467, 1, v84))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v466, v467, *(_QWORD *)(*(_QWORD *)(v468 - 8) + 64));
          }
          else
          {
            __srci = v263;
            *v466 = *v467;
            *((_QWORD *)v466 + 1) = *((_QWORD *)v467 + 1);
            *((_DWORD *)v466 + 4) = *((_DWORD *)v467 + 4);
            *(_OWORD *)(v466 + 24) = *(_OWORD *)(v467 + 24);
            *(_OWORD *)(v466 + 40) = *(_OWORD *)(v467 + 40);
            *((_QWORD *)v466 + 7) = *((_QWORD *)v467 + 7);
            v469 = *(int *)(v84 + 28);
            __dstm = &v466[v469];
            v470 = &v467[v469];
            v471 = sub_224F67874();
            v472 = *(_QWORD *)(v471 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v472 + 48))(v470, 1, v471))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__dstm, v470, *(_QWORD *)(*(_QWORD *)(v473 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v472 + 32))(__dstm, v470, v471);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v472 + 56))(__dstm, 0, 1, v471);
            }
            v80 = v637;
            v4 = v645;
            v263 = __srci;
            *(_OWORD *)&v466[*(int *)(v84 + 32)] = *(_OWORD *)&v467[*(int *)(v84 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v608[7])(v466, 0, 1, v84);
          }
          (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v263 + 7))(v597, 0, 1, v262);
        }
        a3 = v649;
        v492 = v80[13];
        v493 = (char *)(v8 + v492);
        v494 = &v9[v492];
        if (v624(&v9[v492], 1, v84))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v493, v494, *(_QWORD *)(*(_QWORD *)(v495 - 8) + 64));
        }
        else
        {
          *v493 = *v494;
          *((_QWORD *)v493 + 1) = *((_QWORD *)v494 + 1);
          *((_DWORD *)v493 + 4) = *((_DWORD *)v494 + 4);
          *(_OWORD *)(v493 + 24) = *(_OWORD *)(v494 + 24);
          *(_OWORD *)(v493 + 40) = *(_OWORD *)(v494 + 40);
          *((_QWORD *)v493 + 7) = *((_QWORD *)v494 + 7);
          v496 = *(int *)(v84 + 28);
          v497 = &v493[v496];
          v498 = &v494[v496];
          v499 = sub_224F67874();
          v500 = *(_QWORD *)(v499 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v500 + 48))(v498, 1, v499))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v497, v498, *(_QWORD *)(*(_QWORD *)(v501 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v500 + 32))(v497, v498, v499);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v500 + 56))(v497, 0, 1, v499);
          }
          v4 = v645;
          *(_OWORD *)&v493[*(int *)(v84 + 32)] = *(_OWORD *)&v494[*(int *)(v84 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v608[7])(v493, 0, 1, v84);
          a3 = v649;
          v80 = v637;
        }
        *(_QWORD *)(v8 + v80[14]) = *(_QWORD *)&v9[v80[14]];
        *(_OWORD *)(v8 + v80[15]) = *(_OWORD *)&v9[v80[15]];
        v502 = v80[16];
        v503 = v8 + v502;
        v504 = &v9[v502];
        *(_OWORD *)v503 = *(_OWORD *)v504;
        *(_QWORD *)(v503 + 16) = *((_QWORD *)v504 + 2);
        v505 = v80[17];
        v506 = (_OWORD *)(v8 + v505);
        v507 = &v9[v505];
        v508 = type metadata accessor for Quantity();
        v509 = *(_QWORD *)(v508 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v509 + 48))(v507, 1, v508))
        {
          sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v506, v507, *(_QWORD *)(*(_QWORD *)(v510 - 8) + 64));
        }
        else
        {
          *v506 = *(_OWORD *)v507;
          *(_QWORD *)((char *)v506 + 13) = *(_QWORD *)(v507 + 13);
          *(_OWORD *)((char *)v506 + 24) = *(_OWORD *)(v507 + 24);
          *(_OWORD *)((char *)v506 + 40) = *(_OWORD *)(v507 + 40);
          v511 = *(int *)(v508 + 28);
          v634 = (char *)v506 + v511;
          v512 = &v507[v511];
          v513 = sub_224F675D4();
          v514 = *(_QWORD *)(v513 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v514 + 48))(v512, 1, v513))
          {
            sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v634, v512, *(_QWORD *)(*(_QWORD *)(v515 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v514 + 32))(v634, v512, v513);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v514 + 56))(v634, 0, 1, v513);
          }
          v4 = v645;
          a3 = v649;
          *(_OWORD *)((char *)v506 + *(int *)(v508 + 32)) = *(_OWORD *)&v507[*(int *)(v508 + 32)];
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v509 + 56))(v506, 0, 1, v508);
        }
        *(_QWORD *)(v8 + v637[18]) = *(_QWORD *)&v9[v637[18]];
        *(_OWORD *)(v8 + v637[19]) = *(_OWORD *)&v9[v637[19]];
        swift_storeEnumTagMultiPayload();
        break;
      default:
        v17 = v11[8];
        goto LABEL_7;
    }
  }
LABEL_202:
  v389 = *(int *)(a3 + 24);
  v390 = *(_QWORD *)((char *)a1 + v389);
  v391 = *(_QWORD *)((char *)a1 + v389 + 8);
  *(_OWORD *)((char *)a1 + v389) = *(_OWORD *)((char *)v4 + v389);
  sub_224DDE9B4(v390, v391);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Bundle.BundleEntry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224EAFF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.Bundle.BundleEntry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224EAFFF4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_224EB0080()
{
  unint64_t v0;

  sub_224DDEA0C(319, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsDSTU2.Condition(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int (**v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(_QWORD *, uint64_t, uint64_t);
  uint64_t v23;
  void (**v24)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  void (*v37)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  unsigned int (*v42)(_QWORD, _QWORD, _QWORD);
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  void (*v56)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  void (*v93)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  unsigned int (*v98)(_QWORD, _QWORD, _QWORD);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  void (*v113)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  void (*v129)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  _BYTE *v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  _BYTE *v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  void (*v150)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v151;
  _BYTE *v152;
  _BYTE *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  _BYTE *v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  void (*v168)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v169;
  _BYTE *v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  _BYTE *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  uint64_t v183;
  void (*v184)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  _BYTE *v198;
  char *v199;
  unsigned int (*v200)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v201)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v202)(_QWORD, _QWORD, _QWORD);
  uint64_t v203;
  uint64_t v204;
  int *v205;
  uint64_t v206;
  void *v207;
  int *v208;
  void *v209;
  _BYTE *v210;
  _QWORD *__dst;
  _QWORD *__dsta;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8 != 1)
      swift_bridgeObjectRetain();
    a1[2] = v8;
    v9 = v6[6];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for Reference();
    v13 = *(unsigned int (***)(_QWORD *, uint64_t, uint64_t))(v12 - 8);
    if (v13[6](v11, 1, v12))
    {
      sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v205 = v6;
      v207 = v13;
      v16 = v11[1];
      *v10 = *v11;
      v10[1] = v16;
      v17 = v11[3];
      v10[2] = v11[2];
      v10[3] = v17;
      v18 = *(int *)(v12 + 24);
      __dst = (_QWORD *)((char *)v10 + v18);
      v19 = (_QWORD *)((char *)v11 + v18);
      v20 = type metadata accessor for Identifier();
      v21 = *(_QWORD *)(v20 - 8);
      v22 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v22(v19, 1, v20))
      {
        sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        v6 = v205;
        v24 = (void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v207;
      }
      else
      {
        v203 = v21;
        v25 = v19[1];
        *__dst = *v19;
        __dst[1] = v25;
        v26 = v19[3];
        swift_bridgeObjectRetain();
        v27 = v19;
        if (v26 == 1)
        {
          *((_OWORD *)__dst + 1) = *((_OWORD *)v19 + 1);
          __dst[4] = v19[4];
        }
        else
        {
          __dst[2] = v19[2];
          __dst[3] = v26;
          __dst[4] = v19[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v24 = (void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v207;
        v208 = (int *)v20;
        v28 = *(int *)(v20 + 24);
        v199 = (char *)__dst + v28;
        v29 = (char *)v27 + v28;
        v30 = sub_224F675D4();
        v31 = *(_QWORD *)(v30 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v199, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v199, v29, v30);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v199, 0, 1, v30);
        }
        v6 = v205;
        v33 = v208[7];
        v34 = (_QWORD *)((char *)__dst + v33);
        v35 = (_QWORD *)((char *)v27 + v33);
        v36 = v35[1];
        *v34 = *v35;
        v34[1] = v36;
        v37 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v203 + 56);
        swift_bridgeObjectRetain();
        v37(__dst, 0, 1, v208);
      }
      v24[7](v10, 0, 1, v12);
    }
    v38 = v6[7];
    v39 = (char *)a1 + v38;
    v40 = (char *)a2 + v38;
    v41 = type metadata accessor for FHIRDateTime();
    __dsta = *(_QWORD **)(v41 - 8);
    v42 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dsta[6];
    v209 = v42;
    if (v42(v40, 1, v41))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      *v39 = *v40;
      *((_QWORD *)v39 + 1) = *((_QWORD *)v40 + 1);
      *((_DWORD *)v39 + 4) = *((_DWORD *)v40 + 4);
      v44 = *((_QWORD *)v40 + 7);
      if (v44 == 1)
      {
        v45 = *(_OWORD *)(v40 + 40);
        *(_OWORD *)(v39 + 24) = *(_OWORD *)(v40 + 24);
        *(_OWORD *)(v39 + 40) = v45;
        *((_QWORD *)v39 + 7) = *((_QWORD *)v40 + 7);
      }
      else
      {
        v39[24] = v40[24];
        *(_WORD *)(v39 + 25) = *(_WORD *)(v40 + 25);
        *(_OWORD *)(v39 + 28) = *(_OWORD *)(v40 + 28);
        *((_DWORD *)v39 + 11) = *((_DWORD *)v40 + 11);
        *((_QWORD *)v39 + 6) = *((_QWORD *)v40 + 6);
        *((_QWORD *)v39 + 7) = v44;
        swift_bridgeObjectRetain();
      }
      v46 = *(int *)(v41 + 28);
      v47 = &v39[v46];
      v48 = &v40[v46];
      v49 = sub_224F67874();
      v50 = *(_QWORD *)(v49 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v50 + 16))(v47, v48, v49);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      }
      v52 = *(int *)(v41 + 32);
      v53 = &v39[v52];
      v54 = &v40[v52];
      v55 = v54[1];
      *v53 = *v54;
      v53[1] = v55;
      v42 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v209;
      v56 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dsta[7];
      swift_bridgeObjectRetain();
      v56(v39, 0, 1, v41);
    }
    v57 = v6[8];
    v58 = v6[9];
    v59 = (uint64_t *)((char *)a1 + v57);
    v60 = (uint64_t *)((char *)a2 + v57);
    v61 = v60[1];
    *v59 = *v60;
    v59[1] = v61;
    v59[2] = v60[2];
    v62 = (char *)a1 + v58;
    v63 = (char *)a2 + v58;
    v64 = *(uint64_t *)((char *)a2 + v58 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v64 == 1)
    {
      *(_OWORD *)v62 = *(_OWORD *)v63;
      *((_QWORD *)v62 + 2) = *((_QWORD *)v63 + 2);
    }
    else
    {
      *(_QWORD *)v62 = *(_QWORD *)v63;
      *((_QWORD *)v62 + 1) = v64;
      *((_QWORD *)v62 + 2) = *((_QWORD *)v63 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v65 = v6[10];
    v66 = v6[11];
    v67 = (uint64_t *)((char *)a1 + v65);
    v68 = (uint64_t *)((char *)a2 + v65);
    v69 = v68[1];
    *v67 = *v68;
    v67[1] = v69;
    v70 = (uint64_t *)((char *)a1 + v66);
    v71 = (uint64_t *)((char *)a2 + v66);
    v72 = v71[1];
    *v70 = *v71;
    v70[1] = v72;
    v73 = v6[12];
    v74 = (char *)a1 + v73;
    v75 = (char *)a2 + v73;
    v76 = *(uint64_t *)((char *)a2 + v73 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v76 == 1)
    {
      *(_OWORD *)v74 = *(_OWORD *)v75;
      *((_QWORD *)v74 + 2) = *((_QWORD *)v75 + 2);
    }
    else
    {
      *(_QWORD *)v74 = *(_QWORD *)v75;
      *((_QWORD *)v74 + 1) = v76;
      *((_QWORD *)v74 + 2) = *((_QWORD *)v75 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v77 = v6[14];
    *(uint64_t *)((char *)a1 + v6[13]) = *(uint64_t *)((char *)a2 + v6[13]);
    v78 = (char *)a1 + v77;
    v79 = (char *)a2 + v77;
    swift_bridgeObjectRetain();
    if (v42(v79, 1, v41))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    }
    else
    {
      *v78 = *v79;
      *((_QWORD *)v78 + 1) = *((_QWORD *)v79 + 1);
      *((_DWORD *)v78 + 4) = *((_DWORD *)v79 + 4);
      v81 = *((_QWORD *)v79 + 7);
      if (v81 == 1)
      {
        v82 = *(_OWORD *)(v79 + 40);
        *(_OWORD *)(v78 + 24) = *(_OWORD *)(v79 + 24);
        *(_OWORD *)(v78 + 40) = v82;
        *((_QWORD *)v78 + 7) = *((_QWORD *)v79 + 7);
      }
      else
      {
        v78[24] = v79[24];
        *(_WORD *)(v78 + 25) = *(_WORD *)(v79 + 25);
        *(_OWORD *)(v78 + 28) = *(_OWORD *)(v79 + 28);
        *((_DWORD *)v78 + 11) = *((_DWORD *)v79 + 11);
        *((_QWORD *)v78 + 6) = *((_QWORD *)v79 + 6);
        *((_QWORD *)v78 + 7) = v81;
        swift_bridgeObjectRetain();
      }
      v83 = *(int *)(v41 + 28);
      v84 = &v78[v83];
      v85 = &v79[v83];
      v86 = sub_224F67874();
      v87 = *(_QWORD *)(v86 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v87 + 16))(v84, v85, v86);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
      }
      v89 = *(int *)(v41 + 32);
      v90 = &v78[v89];
      v91 = &v79[v89];
      v92 = v91[1];
      *v90 = *v91;
      v90[1] = v92;
      v42 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v209;
      v93 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dsta[7];
      swift_bridgeObjectRetain();
      v93(v78, 0, 1, v41);
    }
    v94 = v6[15];
    v95 = (char *)a1 + v94;
    v96 = (char *)a2 + v94;
    v97 = type metadata accessor for Period();
    v204 = *(_QWORD *)(v97 - 8);
    v98 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v204 + 48);
    v206 = v97;
    if (v98(v96, 1, v97))
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    }
    else
    {
      if (v42(v96, 1, v41))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
      }
      else
      {
        *v95 = *v96;
        *((_QWORD *)v95 + 1) = *((_QWORD *)v96 + 1);
        *((_DWORD *)v95 + 4) = *((_DWORD *)v96 + 4);
        v101 = *((_QWORD *)v96 + 7);
        v200 = v98;
        if (v101 == 1)
        {
          v102 = *(_OWORD *)(v96 + 40);
          *(_OWORD *)(v95 + 24) = *(_OWORD *)(v96 + 24);
          *(_OWORD *)(v95 + 40) = v102;
          *((_QWORD *)v95 + 7) = *((_QWORD *)v96 + 7);
        }
        else
        {
          v95[24] = v96[24];
          *(_WORD *)(v95 + 25) = *(_WORD *)(v96 + 25);
          *(_OWORD *)(v95 + 28) = *(_OWORD *)(v96 + 28);
          *((_DWORD *)v95 + 11) = *((_DWORD *)v96 + 11);
          *((_QWORD *)v95 + 6) = *((_QWORD *)v96 + 6);
          *((_QWORD *)v95 + 7) = v101;
          swift_bridgeObjectRetain();
        }
        v103 = *(int *)(v41 + 28);
        v104 = &v95[v103];
        v105 = &v96[v103];
        v106 = sub_224F67874();
        v107 = *(_QWORD *)(v106 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v107 + 16))(v104, v105, v106);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v104, 0, 1, v106);
        }
        v97 = v206;
        v42 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v209;
        v109 = *(int *)(v41 + 32);
        v110 = &v95[v109];
        v111 = &v96[v109];
        v112 = v111[1];
        *v110 = *v111;
        v110[1] = v112;
        v113 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dsta[7];
        swift_bridgeObjectRetain();
        v113(v95, 0, 1, v41);
        v98 = v200;
      }
      v114 = *(int *)(v97 + 20);
      v115 = &v95[v114];
      v116 = &v96[v114];
      if (v42(v116, 1, v41))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
      }
      else
      {
        *v115 = *v116;
        *((_QWORD *)v115 + 1) = *((_QWORD *)v116 + 1);
        *((_DWORD *)v115 + 4) = *((_DWORD *)v116 + 4);
        v118 = *((_QWORD *)v116 + 7);
        v201 = v98;
        if (v118 == 1)
        {
          v119 = *(_OWORD *)(v116 + 40);
          *(_OWORD *)(v115 + 24) = *(_OWORD *)(v116 + 24);
          *(_OWORD *)(v115 + 40) = v119;
          *((_QWORD *)v115 + 7) = *((_QWORD *)v116 + 7);
        }
        else
        {
          v115[24] = v116[24];
          *(_WORD *)(v115 + 25) = *(_WORD *)(v116 + 25);
          *(_OWORD *)(v115 + 28) = *(_OWORD *)(v116 + 28);
          *((_DWORD *)v115 + 11) = *((_DWORD *)v116 + 11);
          *((_QWORD *)v115 + 6) = *((_QWORD *)v116 + 6);
          *((_QWORD *)v115 + 7) = v118;
          swift_bridgeObjectRetain();
        }
        v120 = *(int *)(v41 + 28);
        v198 = &v115[v120];
        v121 = &v116[v120];
        v122 = sub_224F67874();
        v123 = *(_QWORD *)(v122 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v198, v121, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v123 + 16))(v198, v121, v122);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v198, 0, 1, v122);
        }
        v97 = v206;
        v42 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v209;
        v125 = *(int *)(v41 + 32);
        v126 = &v115[v125];
        v127 = &v116[v125];
        v128 = v127[1];
        *v126 = *v127;
        v126[1] = v128;
        v129 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dsta[7];
        swift_bridgeObjectRetain();
        v129(v115, 0, 1, v41);
        v98 = v201;
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v204 + 56))(v95, 0, 1, v97);
    }
    v130 = v6[16];
    v131 = v6[17];
    v132 = (uint64_t *)((char *)a1 + v130);
    v133 = (uint64_t *)((char *)a2 + v130);
    v134 = v133[1];
    *v132 = *v133;
    v132[1] = v134;
    v135 = (char *)a1 + v131;
    v136 = (char *)a2 + v131;
    swift_bridgeObjectRetain();
    if (v42(v136, 1, v41))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    }
    else
    {
      *v135 = *v136;
      *((_QWORD *)v135 + 1) = *((_QWORD *)v136 + 1);
      *((_DWORD *)v135 + 4) = *((_DWORD *)v136 + 4);
      v138 = *((_QWORD *)v136 + 7);
      v202 = v98;
      if (v138 == 1)
      {
        v139 = *(_OWORD *)(v136 + 40);
        *(_OWORD *)(v135 + 24) = *(_OWORD *)(v136 + 24);
        *(_OWORD *)(v135 + 40) = v139;
        *((_QWORD *)v135 + 7) = *((_QWORD *)v136 + 7);
      }
      else
      {
        v135[24] = v136[24];
        *(_WORD *)(v135 + 25) = *(_WORD *)(v136 + 25);
        *(_OWORD *)(v135 + 28) = *(_OWORD *)(v136 + 28);
        *((_DWORD *)v135 + 11) = *((_DWORD *)v136 + 11);
        *((_QWORD *)v135 + 6) = *((_QWORD *)v136 + 6);
        *((_QWORD *)v135 + 7) = v138;
        swift_bridgeObjectRetain();
      }
      v140 = *(int *)(v41 + 28);
      v141 = &v135[v140];
      v142 = &v136[v140];
      v143 = sub_224F67874();
      v144 = *(_QWORD *)(v143 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v144 + 48))(v142, 1, v143))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v144 + 16))(v141, v142, v143);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v141, 0, 1, v143);
      }
      v97 = v206;
      v146 = *(int *)(v41 + 32);
      v147 = &v135[v146];
      v148 = &v136[v146];
      v149 = v148[1];
      *v147 = *v148;
      v147[1] = v149;
      v150 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dsta[7];
      swift_bridgeObjectRetain();
      v150(v135, 0, 1, v41);
      v42 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v209;
      v98 = v202;
    }
    v151 = v6[18];
    v152 = (char *)a1 + v151;
    v153 = (char *)a2 + v151;
    if (v98((char *)a2 + v151, 1, v97))
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v152, v153, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
    }
    else
    {
      if (v42(v153, 1, v41))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v152, v153, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
      }
      else
      {
        *v152 = *v153;
        *((_QWORD *)v152 + 1) = *((_QWORD *)v153 + 1);
        *((_DWORD *)v152 + 4) = *((_DWORD *)v153 + 4);
        v156 = *((_QWORD *)v153 + 7);
        if (v156 == 1)
        {
          v157 = *(_OWORD *)(v153 + 40);
          *(_OWORD *)(v152 + 24) = *(_OWORD *)(v153 + 24);
          *(_OWORD *)(v152 + 40) = v157;
          *((_QWORD *)v152 + 7) = *((_QWORD *)v153 + 7);
        }
        else
        {
          v152[24] = v153[24];
          *(_WORD *)(v152 + 25) = *(_WORD *)(v153 + 25);
          *(_OWORD *)(v152 + 28) = *(_OWORD *)(v153 + 28);
          *((_DWORD *)v152 + 11) = *((_DWORD *)v153 + 11);
          *((_QWORD *)v152 + 6) = *((_QWORD *)v153 + 6);
          *((_QWORD *)v152 + 7) = v156;
          swift_bridgeObjectRetain();
        }
        v158 = *(int *)(v41 + 28);
        v159 = &v152[v158];
        v160 = &v153[v158];
        v161 = sub_224F67874();
        v162 = *(_QWORD *)(v161 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v162 + 48))(v160, 1, v161))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v162 + 16))(v159, v160, v161);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v162 + 56))(v159, 0, 1, v161);
        }
        v97 = v206;
        v42 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v209;
        v164 = *(int *)(v41 + 32);
        v165 = &v152[v164];
        v166 = &v153[v164];
        v167 = v166[1];
        *v165 = *v166;
        v165[1] = v167;
        v168 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dsta[7];
        swift_bridgeObjectRetain();
        v168(v152, 0, 1, v41);
      }
      v169 = *(int *)(v97 + 20);
      v170 = &v152[v169];
      v171 = &v153[v169];
      if (v42(v171, 1, v41))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
      }
      else
      {
        *v170 = *v171;
        *((_QWORD *)v170 + 1) = *((_QWORD *)v171 + 1);
        *((_DWORD *)v170 + 4) = *((_DWORD *)v171 + 4);
        v173 = *((_QWORD *)v171 + 7);
        if (v173 == 1)
        {
          v174 = *(_OWORD *)(v171 + 40);
          *(_OWORD *)(v170 + 24) = *(_OWORD *)(v171 + 24);
          *(_OWORD *)(v170 + 40) = v174;
          *((_QWORD *)v170 + 7) = *((_QWORD *)v171 + 7);
        }
        else
        {
          v170[24] = v171[24];
          *(_WORD *)(v170 + 25) = *(_WORD *)(v171 + 25);
          *(_OWORD *)(v170 + 28) = *(_OWORD *)(v171 + 28);
          *((_DWORD *)v170 + 11) = *((_DWORD *)v171 + 11);
          *((_QWORD *)v170 + 6) = *((_QWORD *)v171 + 6);
          *((_QWORD *)v170 + 7) = v173;
          swift_bridgeObjectRetain();
        }
        v175 = *(int *)(v41 + 28);
        v210 = &v170[v175];
        v176 = &v171[v175];
        v177 = sub_224F67874();
        v178 = *(_QWORD *)(v177 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v178 + 48))(v176, 1, v177))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v210, v176, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v178 + 16))(v210, v176, v177);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v178 + 56))(v210, 0, 1, v177);
        }
        v97 = v206;
        v180 = *(int *)(v41 + 32);
        v181 = &v170[v180];
        v182 = &v171[v180];
        v183 = v182[1];
        *v181 = *v182;
        v181[1] = v183;
        v184 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dsta[7];
        swift_bridgeObjectRetain();
        v184(v170, 0, 1, v41);
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v204 + 56))(v152, 0, 1, v97);
    }
    v185 = v6[19];
    v186 = v6[20];
    v187 = (uint64_t *)((char *)a1 + v185);
    v188 = (uint64_t *)((char *)a2 + v185);
    v189 = v188[1];
    *v187 = *v188;
    v187[1] = v189;
    v190 = (uint64_t *)((char *)a1 + v186);
    v191 = (uint64_t *)((char *)a2 + v186);
    v192 = v191[1];
    *v190 = *v191;
    v190[1] = v192;
    v193 = v6[21];
    v194 = (uint64_t *)((char *)a1 + v193);
    v195 = (uint64_t *)((char *)a2 + v193);
    v196 = v195[1];
    *v194 = *v195;
    v194[1] = v196;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ModelsDSTU2.Condition(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16) != 1)
    swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = type metadata accessor for Reference();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v4 + *(int *)(v5 + 24);
    v7 = type metadata accessor for Identifier();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    {
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v6 + 24) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v8 = v6 + *(int *)(v7 + 24);
      v9 = sub_224F675D4();
      v10 = *(_QWORD *)(v9 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      swift_bridgeObjectRelease();
    }
  }
  v11 = a1 + a2[7];
  v12 = type metadata accessor for FHIRDateTime();
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48);
  if (!v13(v11, 1, v12))
  {
    if (*(_QWORD *)(v11 + 56) != 1)
      swift_bridgeObjectRelease();
    v14 = v11 + *(int *)(v12 + 28);
    v15 = sub_224F67874();
    v16 = *(_QWORD *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[9] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[12] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v17 = a1 + a2[14];
  if (!v13(v17, 1, v12))
  {
    if (*(_QWORD *)(v17 + 56) != 1)
      swift_bridgeObjectRelease();
    v18 = v17 + *(int *)(v12 + 28);
    v19 = sub_224F67874();
    v20 = *(_QWORD *)(v19 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    swift_bridgeObjectRelease();
  }
  v21 = a1 + a2[15];
  v22 = type metadata accessor for Period();
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
  if (!v23(v21, 1, v22))
  {
    if (!v13(v21, 1, v12))
    {
      if (*(_QWORD *)(v21 + 56) != 1)
        swift_bridgeObjectRelease();
      v24 = v21 + *(int *)(v12 + 28);
      v25 = sub_224F67874();
      v26 = *(_QWORD *)(v25 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
      swift_bridgeObjectRelease();
    }
    v27 = v21 + *(int *)(v22 + 20);
    if (!v13(v27, 1, v12))
    {
      if (*(_QWORD *)(v27 + 56) != 1)
        swift_bridgeObjectRelease();
      v28 = v27 + *(int *)(v12 + 28);
      v29 = sub_224F67874();
      v30 = *(_QWORD *)(v29 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  v31 = a1 + a2[17];
  if (!v13(v31, 1, v12))
  {
    if (*(_QWORD *)(v31 + 56) != 1)
      swift_bridgeObjectRelease();
    v32 = v31 + *(int *)(v12 + 28);
    v33 = sub_224F67874();
    v34 = *(_QWORD *)(v33 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
    swift_bridgeObjectRelease();
  }
  v35 = a1 + a2[18];
  if (!v23(v35, 1, v22))
  {
    if (!v13(v35, 1, v12))
    {
      if (*(_QWORD *)(v35 + 56) != 1)
        swift_bridgeObjectRelease();
      v36 = v35 + *(int *)(v12 + 28);
      v37 = sub_224F67874();
      v38 = *(_QWORD *)(v37 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
      swift_bridgeObjectRelease();
    }
    v39 = v35 + *(int *)(v22 + 20);
    if (!v13(v39, 1, v12))
    {
      if (*(_QWORD *)(v39 + 56) != 1)
        swift_bridgeObjectRelease();
      v40 = v39 + *(int *)(v12 + 28);
      v41 = sub_224F67874();
      v42 = *(_QWORD *)(v41 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ModelsDSTU2.Condition(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(_QWORD *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  void (*v35)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  unsigned int (*v40)(_QWORD, _QWORD, _QWORD);
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  void (*v54)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  void (*v91)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  unsigned int (*v96)(_QWORD, _QWORD, _QWORD);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  void (*v111)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v112;
  _BYTE *v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  void (*v127)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  _BYTE *v133;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  void (*v148)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v149;
  _BYTE *v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  _BYTE *v157;
  _BYTE *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  void (*v166)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v167;
  _BYTE *v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  _BYTE *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  void (*v182)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  _BYTE *v196;
  char *__dst;
  void *__dsta;
  void *__dstb;
  void *__dstc;
  uint64_t v201;
  int *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  void *v206;
  _BYTE *v207;
  uint64_t v208;
  uint64_t v209;

  v4 = a2;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7 != 1)
    swift_bridgeObjectRetain();
  a1[2] = v7;
  v8 = a3[6];
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)v4 + v8);
  v11 = type metadata accessor for Reference();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v205 = v4;
    v208 = v12;
    v202 = a3;
    v14 = v10[1];
    *v9 = *v10;
    v9[1] = v14;
    v15 = v10[3];
    v9[2] = v10[2];
    v9[3] = v15;
    v16 = *(int *)(v11 + 24);
    v17 = (_QWORD *)((char *)v9 + v16);
    v18 = (_QWORD *)((char *)v10 + v16);
    v19 = type metadata accessor for Identifier();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v21(v18, 1, v19))
    {
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      a3 = v202;
    }
    else
    {
      v23 = v18[1];
      *v17 = *v18;
      v17[1] = v23;
      v24 = v18[3];
      swift_bridgeObjectRetain();
      v25 = v17;
      if (v24 == 1)
      {
        *((_OWORD *)v17 + 1) = *((_OWORD *)v18 + 1);
        v17[4] = v18[4];
      }
      else
      {
        v17[2] = v18[2];
        v17[3] = v24;
        v17[4] = v18[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      a3 = v202;
      v203 = v19;
      v26 = *(int *)(v19 + 24);
      __dst = (char *)v25 + v26;
      v27 = (char *)v18 + v26;
      v28 = sub_224F675D4();
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 16))(__dst, v27, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
      }
      v31 = *(int *)(v203 + 28);
      v32 = (_QWORD *)((char *)v25 + v31);
      v33 = (_QWORD *)((char *)v18 + v31);
      v34 = v33[1];
      *v32 = *v33;
      v32[1] = v34;
      v35 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56);
      swift_bridgeObjectRetain();
      v35(v25, 0, 1, v203);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v208 + 56))(v9, 0, 1, v11);
    v4 = v205;
  }
  v36 = a3[7];
  v37 = (char *)a1 + v36;
  v38 = (char *)v4 + v36;
  v39 = type metadata accessor for FHIRDateTime();
  v209 = *(_QWORD *)(v39 - 8);
  v40 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v209 + 48);
  v206 = v40;
  if (v40(v38, 1, v39))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    *v37 = *v38;
    *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
    *((_DWORD *)v37 + 4) = *((_DWORD *)v38 + 4);
    v42 = *((_QWORD *)v38 + 7);
    if (v42 == 1)
    {
      v43 = *(_OWORD *)(v38 + 40);
      *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
      *(_OWORD *)(v37 + 40) = v43;
      *((_QWORD *)v37 + 7) = *((_QWORD *)v38 + 7);
    }
    else
    {
      v37[24] = v38[24];
      *(_WORD *)(v37 + 25) = *(_WORD *)(v38 + 25);
      *(_OWORD *)(v37 + 28) = *(_OWORD *)(v38 + 28);
      *((_DWORD *)v37 + 11) = *((_DWORD *)v38 + 11);
      *((_QWORD *)v37 + 6) = *((_QWORD *)v38 + 6);
      *((_QWORD *)v37 + 7) = v42;
      swift_bridgeObjectRetain();
    }
    v44 = *(int *)(v39 + 28);
    v45 = &v37[v44];
    v46 = &v38[v44];
    v47 = sub_224F67874();
    v48 = *(_QWORD *)(v47 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    v50 = *(int *)(v39 + 32);
    v51 = &v37[v50];
    v52 = &v38[v50];
    v53 = v52[1];
    *v51 = *v52;
    v51[1] = v53;
    v40 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v206;
    v54 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v209 + 56);
    swift_bridgeObjectRetain();
    v54(v37, 0, 1, v39);
  }
  v55 = a3[8];
  v56 = a3[9];
  v57 = (_QWORD *)((char *)a1 + v55);
  v58 = (_QWORD *)((char *)v4 + v55);
  v59 = v58[1];
  *v57 = *v58;
  v57[1] = v59;
  v57[2] = v58[2];
  v60 = (char *)a1 + v56;
  v61 = (char *)v4 + v56;
  v62 = *(_QWORD *)((char *)v4 + v56 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v62 == 1)
  {
    *(_OWORD *)v60 = *(_OWORD *)v61;
    *((_QWORD *)v60 + 2) = *((_QWORD *)v61 + 2);
  }
  else
  {
    *(_QWORD *)v60 = *(_QWORD *)v61;
    *((_QWORD *)v60 + 1) = v62;
    *((_QWORD *)v60 + 2) = *((_QWORD *)v61 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v63 = a3[10];
  v64 = a3[11];
  v65 = (_QWORD *)((char *)a1 + v63);
  v66 = (_QWORD *)((char *)v4 + v63);
  v67 = v66[1];
  *v65 = *v66;
  v65[1] = v67;
  v68 = (_QWORD *)((char *)a1 + v64);
  v69 = (_QWORD *)((char *)v4 + v64);
  v70 = v69[1];
  *v68 = *v69;
  v68[1] = v70;
  v71 = a3[12];
  v72 = (char *)a1 + v71;
  v73 = (char *)v4 + v71;
  v74 = *(_QWORD *)((char *)v4 + v71 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v74 == 1)
  {
    *(_OWORD *)v72 = *(_OWORD *)v73;
    *((_QWORD *)v72 + 2) = *((_QWORD *)v73 + 2);
  }
  else
  {
    *(_QWORD *)v72 = *(_QWORD *)v73;
    *((_QWORD *)v72 + 1) = v74;
    *((_QWORD *)v72 + 2) = *((_QWORD *)v73 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v75 = a3[14];
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)v4 + a3[13]);
  v76 = (char *)a1 + v75;
  v77 = (char *)v4 + v75;
  swift_bridgeObjectRetain();
  if (v40(v77, 1, v39))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    *v76 = *v77;
    *((_QWORD *)v76 + 1) = *((_QWORD *)v77 + 1);
    *((_DWORD *)v76 + 4) = *((_DWORD *)v77 + 4);
    v79 = *((_QWORD *)v77 + 7);
    if (v79 == 1)
    {
      v80 = *(_OWORD *)(v77 + 40);
      *(_OWORD *)(v76 + 24) = *(_OWORD *)(v77 + 24);
      *(_OWORD *)(v76 + 40) = v80;
      *((_QWORD *)v76 + 7) = *((_QWORD *)v77 + 7);
    }
    else
    {
      v76[24] = v77[24];
      *(_WORD *)(v76 + 25) = *(_WORD *)(v77 + 25);
      *(_OWORD *)(v76 + 28) = *(_OWORD *)(v77 + 28);
      *((_DWORD *)v76 + 11) = *((_DWORD *)v77 + 11);
      *((_QWORD *)v76 + 6) = *((_QWORD *)v77 + 6);
      *((_QWORD *)v76 + 7) = v79;
      swift_bridgeObjectRetain();
    }
    v81 = *(int *)(v39 + 28);
    v82 = &v76[v81];
    v83 = &v77[v81];
    v84 = sub_224F67874();
    v85 = *(_QWORD *)(v84 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v85 + 16))(v82, v83, v84);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
    }
    v87 = *(int *)(v39 + 32);
    v88 = &v76[v87];
    v89 = &v77[v87];
    v90 = v89[1];
    *v88 = *v89;
    v88[1] = v90;
    v40 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v206;
    v91 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v209 + 56);
    swift_bridgeObjectRetain();
    v91(v76, 0, 1, v39);
  }
  v92 = a3[15];
  v93 = (char *)a1 + v92;
  v94 = (char *)v4 + v92;
  v95 = type metadata accessor for Period();
  v201 = *(_QWORD *)(v95 - 8);
  v96 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v201 + 48);
  v204 = v95;
  if (v96(v94, 1, v95))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
  }
  else
  {
    if (v40(v94, 1, v39))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    }
    else
    {
      *v93 = *v94;
      *((_QWORD *)v93 + 1) = *((_QWORD *)v94 + 1);
      *((_DWORD *)v93 + 4) = *((_DWORD *)v94 + 4);
      v99 = *((_QWORD *)v94 + 7);
      __dsta = v96;
      if (v99 == 1)
      {
        v100 = *(_OWORD *)(v94 + 40);
        *(_OWORD *)(v93 + 24) = *(_OWORD *)(v94 + 24);
        *(_OWORD *)(v93 + 40) = v100;
        *((_QWORD *)v93 + 7) = *((_QWORD *)v94 + 7);
      }
      else
      {
        v93[24] = v94[24];
        *(_WORD *)(v93 + 25) = *(_WORD *)(v94 + 25);
        *(_OWORD *)(v93 + 28) = *(_OWORD *)(v94 + 28);
        *((_DWORD *)v93 + 11) = *((_DWORD *)v94 + 11);
        *((_QWORD *)v93 + 6) = *((_QWORD *)v94 + 6);
        *((_QWORD *)v93 + 7) = v99;
        swift_bridgeObjectRetain();
      }
      v101 = *(int *)(v39 + 28);
      v102 = &v93[v101];
      v103 = &v94[v101];
      v104 = sub_224F67874();
      v105 = *(_QWORD *)(v104 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v105 + 16))(v102, v103, v104);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
      }
      v95 = v204;
      v107 = *(int *)(v39 + 32);
      v108 = &v93[v107];
      v109 = &v94[v107];
      v110 = v109[1];
      *v108 = *v109;
      v108[1] = v110;
      v111 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v209 + 56);
      swift_bridgeObjectRetain();
      v111(v93, 0, 1, v39);
      v40 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v206;
      v96 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dsta;
    }
    v112 = *(int *)(v95 + 20);
    v113 = &v93[v112];
    v114 = &v94[v112];
    if (v40(v114, 1, v39))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
    }
    else
    {
      *v113 = *v114;
      *((_QWORD *)v113 + 1) = *((_QWORD *)v114 + 1);
      *((_DWORD *)v113 + 4) = *((_DWORD *)v114 + 4);
      v116 = *((_QWORD *)v114 + 7);
      __dstb = v96;
      if (v116 == 1)
      {
        v117 = *(_OWORD *)(v114 + 40);
        *(_OWORD *)(v113 + 24) = *(_OWORD *)(v114 + 24);
        *(_OWORD *)(v113 + 40) = v117;
        *((_QWORD *)v113 + 7) = *((_QWORD *)v114 + 7);
      }
      else
      {
        v113[24] = v114[24];
        *(_WORD *)(v113 + 25) = *(_WORD *)(v114 + 25);
        *(_OWORD *)(v113 + 28) = *(_OWORD *)(v114 + 28);
        *((_DWORD *)v113 + 11) = *((_DWORD *)v114 + 11);
        *((_QWORD *)v113 + 6) = *((_QWORD *)v114 + 6);
        *((_QWORD *)v113 + 7) = v116;
        swift_bridgeObjectRetain();
      }
      v118 = *(int *)(v39 + 28);
      v196 = &v113[v118];
      v119 = &v114[v118];
      v120 = sub_224F67874();
      v121 = *(_QWORD *)(v120 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v196, v119, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v121 + 16))(v196, v119, v120);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v196, 0, 1, v120);
      }
      v123 = *(int *)(v39 + 32);
      v124 = &v113[v123];
      v125 = &v114[v123];
      v126 = v125[1];
      *v124 = *v125;
      v124[1] = v126;
      v40 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v206;
      v127 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v209 + 56);
      swift_bridgeObjectRetain();
      v127(v113, 0, 1, v39);
      v95 = v204;
      v96 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstb;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v201 + 56))(v93, 0, 1, v95);
  }
  v128 = a3[16];
  v129 = a3[17];
  v130 = (_QWORD *)((char *)a1 + v128);
  v131 = (_QWORD *)((char *)v4 + v128);
  v132 = v131[1];
  *v130 = *v131;
  v130[1] = v132;
  v133 = (char *)a1 + v129;
  v134 = (char *)v4 + v129;
  swift_bridgeObjectRetain();
  if (v40(v134, 1, v39))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
  }
  else
  {
    *v133 = *v134;
    *((_QWORD *)v133 + 1) = *((_QWORD *)v134 + 1);
    *((_DWORD *)v133 + 4) = *((_DWORD *)v134 + 4);
    v136 = *((_QWORD *)v134 + 7);
    __dstc = v96;
    if (v136 == 1)
    {
      v137 = *(_OWORD *)(v134 + 40);
      *(_OWORD *)(v133 + 24) = *(_OWORD *)(v134 + 24);
      *(_OWORD *)(v133 + 40) = v137;
      *((_QWORD *)v133 + 7) = *((_QWORD *)v134 + 7);
    }
    else
    {
      v133[24] = v134[24];
      *(_WORD *)(v133 + 25) = *(_WORD *)(v134 + 25);
      *(_OWORD *)(v133 + 28) = *(_OWORD *)(v134 + 28);
      *((_DWORD *)v133 + 11) = *((_DWORD *)v134 + 11);
      *((_QWORD *)v133 + 6) = *((_QWORD *)v134 + 6);
      *((_QWORD *)v133 + 7) = v136;
      swift_bridgeObjectRetain();
    }
    v138 = *(int *)(v39 + 28);
    v139 = &v133[v138];
    v140 = &v134[v138];
    v141 = sub_224F67874();
    v142 = *(_QWORD *)(v141 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v142 + 16))(v139, v140, v141);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v142 + 56))(v139, 0, 1, v141);
    }
    v95 = v204;
    v144 = *(int *)(v39 + 32);
    v145 = &v133[v144];
    v146 = &v134[v144];
    v147 = v146[1];
    *v145 = *v146;
    v145[1] = v147;
    v148 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v209 + 56);
    swift_bridgeObjectRetain();
    v148(v133, 0, 1, v39);
    v40 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v206;
    v96 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstc;
  }
  v149 = a3[18];
  v150 = (char *)a1 + v149;
  v151 = (char *)v4 + v149;
  if (v96((char *)v4 + v149, 1, v95))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
  }
  else
  {
    if (v40(v151, 1, v39))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
    }
    else
    {
      *v150 = *v151;
      *((_QWORD *)v150 + 1) = *((_QWORD *)v151 + 1);
      *((_DWORD *)v150 + 4) = *((_DWORD *)v151 + 4);
      v154 = *((_QWORD *)v151 + 7);
      if (v154 == 1)
      {
        v155 = *(_OWORD *)(v151 + 40);
        *(_OWORD *)(v150 + 24) = *(_OWORD *)(v151 + 24);
        *(_OWORD *)(v150 + 40) = v155;
        *((_QWORD *)v150 + 7) = *((_QWORD *)v151 + 7);
      }
      else
      {
        v150[24] = v151[24];
        *(_WORD *)(v150 + 25) = *(_WORD *)(v151 + 25);
        *(_OWORD *)(v150 + 28) = *(_OWORD *)(v151 + 28);
        *((_DWORD *)v150 + 11) = *((_DWORD *)v151 + 11);
        *((_QWORD *)v150 + 6) = *((_QWORD *)v151 + 6);
        *((_QWORD *)v150 + 7) = v154;
        swift_bridgeObjectRetain();
      }
      v156 = *(int *)(v39 + 28);
      v157 = &v150[v156];
      v158 = &v151[v156];
      v159 = sub_224F67874();
      v160 = *(_QWORD *)(v159 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v160 + 48))(v158, 1, v159))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v160 + 16))(v157, v158, v159);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v160 + 56))(v157, 0, 1, v159);
      }
      v95 = v204;
      v162 = *(int *)(v39 + 32);
      v163 = &v150[v162];
      v164 = &v151[v162];
      v165 = v164[1];
      *v163 = *v164;
      v163[1] = v165;
      v166 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v209 + 56);
      swift_bridgeObjectRetain();
      v166(v150, 0, 1, v39);
      v40 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v206;
    }
    v167 = *(int *)(v95 + 20);
    v168 = &v150[v167];
    v169 = &v151[v167];
    if (v40(v169, 1, v39))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
    }
    else
    {
      *v168 = *v169;
      *((_QWORD *)v168 + 1) = *((_QWORD *)v169 + 1);
      *((_DWORD *)v168 + 4) = *((_DWORD *)v169 + 4);
      v171 = *((_QWORD *)v169 + 7);
      if (v171 == 1)
      {
        v172 = *(_OWORD *)(v169 + 40);
        *(_OWORD *)(v168 + 24) = *(_OWORD *)(v169 + 24);
        *(_OWORD *)(v168 + 40) = v172;
        *((_QWORD *)v168 + 7) = *((_QWORD *)v169 + 7);
      }
      else
      {
        v168[24] = v169[24];
        *(_WORD *)(v168 + 25) = *(_WORD *)(v169 + 25);
        *(_OWORD *)(v168 + 28) = *(_OWORD *)(v169 + 28);
        *((_DWORD *)v168 + 11) = *((_DWORD *)v169 + 11);
        *((_QWORD *)v168 + 6) = *((_QWORD *)v169 + 6);
        *((_QWORD *)v168 + 7) = v171;
        swift_bridgeObjectRetain();
      }
      v173 = *(int *)(v39 + 28);
      v207 = &v168[v173];
      v174 = &v169[v173];
      v175 = sub_224F67874();
      v176 = *(_QWORD *)(v175 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v176 + 48))(v174, 1, v175))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v207, v174, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v176 + 16))(v207, v174, v175);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v176 + 56))(v207, 0, 1, v175);
      }
      v178 = *(int *)(v39 + 32);
      v179 = &v168[v178];
      v180 = &v169[v178];
      v181 = v180[1];
      *v179 = *v180;
      v179[1] = v181;
      v182 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v209 + 56);
      swift_bridgeObjectRetain();
      v182(v168, 0, 1, v39);
      v95 = v204;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v201 + 56))(v150, 0, 1, v95);
  }
  v183 = a3[19];
  v184 = a3[20];
  v185 = (_QWORD *)((char *)a1 + v183);
  v186 = (_QWORD *)((char *)v4 + v183);
  v187 = v186[1];
  *v185 = *v186;
  v185[1] = v187;
  v188 = (_QWORD *)((char *)a1 + v184);
  v189 = (_QWORD *)((char *)v4 + v184);
  v190 = v189[1];
  *v188 = *v189;
  v188[1] = v190;
  v191 = a3[21];
  v192 = (_QWORD *)((char *)a1 + v191);
  v193 = (_QWORD *)((char *)v4 + v191);
  v194 = v193[1];
  *v192 = *v193;
  v192[1] = v194;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for ModelsDSTU2.Condition(uint64_t *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  size_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(_QWORD *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  void (*v51)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 *v63;
  __int128 *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  void *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  void (*v78)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  void *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(void *, uint64_t, uint64_t);
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t (*v120)(uint64_t, uint64_t, uint64_t);
  int v121;
  int v122;
  uint64_t (*v123)(uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 *v128;
  __int128 *v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  char *v142;
  void (*v143)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  void *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t (*v152)(void *, uint64_t, uint64_t);
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  char *v158;
  uint64_t v159;
  _BYTE *v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t (*v163)(char *, uint64_t, uint64_t);
  int v164;
  int v165;
  unint64_t *v166;
  uint64_t (*v167)();
  uint64_t (*v168)(uint64_t, uint64_t);
  uint64_t (*v169)();
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t (*v174)(uint64_t, uint64_t);
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  _BYTE *v181;
  _BYTE *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  void (*v193)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v194;
  _BYTE *v195;
  _BYTE *v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  _BYTE *v203;
  _BYTE *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  void (*v211)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t (*v220)(uint64_t, uint64_t);
  uint64_t v221;
  uint64_t (*v222)(char *, uint64_t, uint64_t);
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 *v226;
  __int128 *v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  void *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  char *v241;
  void (*v242)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  void *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t (*v251)(void *, uint64_t, uint64_t);
  int v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  char *v257;
  uint64_t v258;
  _BYTE *v259;
  _BYTE *v260;
  int v261;
  int v262;
  uint64_t (*v263)(uint64_t, uint64_t);
  uint64_t v264;
  size_t v265;
  void *v266;
  const void *v267;
  uint64_t v268;
  unsigned int v269;
  unsigned int v270;
  uint64_t (*v271)(uint64_t, uint64_t);
  uint64_t v272;
  __int128 v273;
  __int128 v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  _BYTE *v278;
  _BYTE *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  __int128 v285;
  __int128 v286;
  uint64_t v287;
  _QWORD *v288;
  _QWORD *v289;
  void (*v290)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v291;
  _BYTE *v292;
  _BYTE *v293;
  uint64_t v294;
  uint64_t v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  uint64_t v299;
  _BYTE *v300;
  _BYTE *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  _QWORD *v307;
  void (*v308)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v309;
  _QWORD *v310;
  _QWORD *v311;
  uint64_t v312;
  _QWORD *v313;
  _QWORD *v314;
  uint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  __int128 *v319;
  __int128 *v320;
  uint64_t v321;
  __int128 v322;
  __int128 *v323;
  __int128 *v324;
  uint64_t v325;
  __int128 v326;
  __int128 v327;
  __int128 *v328;
  __int128 *v329;
  uint64_t v330;
  __int128 v331;
  __int128 v332;
  uint64_t v333;
  void *v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  __int128 v339;
  uint64_t v340;
  _BYTE *v341;
  _BYTE *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  __int128 v347;
  uint64_t v348;
  _BYTE *v349;
  _BYTE *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  _QWORD *v356;
  char *v357;
  void (*v358)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v359;
  _QWORD *v360;
  _QWORD *v361;
  void (*v362)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v363;
  _QWORD *v364;
  _QWORD *v365;
  void (*v366)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v367;
  uint64_t v368;
  __int128 v369;
  uint64_t v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  uint64_t v374;
  void *v375;
  char *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t (*v379)(void *, uint64_t, uint64_t);
  int v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  _QWORD *v384;
  char *v385;
  uint64_t v386;
  _BYTE *v387;
  _BYTE *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t (*v391)(_BYTE *, uint64_t, uint64_t);
  int v392;
  int v393;
  uint64_t v394;
  uint64_t v395;
  _QWORD *v396;
  _QWORD *v397;
  uint64_t v398;
  unsigned int v399;
  unsigned int v400;
  uint64_t v401;
  __int128 v402;
  __int128 v403;
  __int128 *v404;
  __int128 *v405;
  uint64_t v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  uint64_t v410;
  _BYTE *v411;
  _BYTE *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  _QWORD *v418;
  _QWORD *v419;
  void (*v420)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v421;
  __int128 v422;
  uint64_t v423;
  _BYTE *v424;
  _BYTE *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t (*v428)(_BYTE *, uint64_t, uint64_t);
  int v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  _QWORD *v433;
  _QWORD *v434;
  uint64_t v435;
  uint64_t v436;
  _BYTE *v437;
  unsigned int v438;
  unsigned int v439;
  uint64_t (*v440)(uint64_t, uint64_t);
  uint64_t v441;
  uint64_t v442;
  __int128 v443;
  __int128 v444;
  __int128 *v445;
  __int128 *v446;
  uint64_t v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  uint64_t v451;
  void *v452;
  _BYTE *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  _QWORD *v458;
  _QWORD *v459;
  void (*v460)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v461;
  __int128 v462;
  __int128 v463;
  uint64_t v464;
  _BYTE *v465;
  _BYTE *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t (*v469)(_BYTE *, uint64_t, uint64_t);
  int v470;
  int v471;
  uint64_t v472;
  uint64_t v473;
  _QWORD *v474;
  _QWORD *v475;
  __int128 v476;
  uint64_t v477;
  void *v478;
  _BYTE *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t (*v482)(void *, uint64_t, uint64_t);
  int v483;
  int v484;
  uint64_t v485;
  uint64_t v486;
  _QWORD *v487;
  _QWORD *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t (*v497)(char *, uint64_t, uint64_t);
  _QWORD *__src;
  _QWORD *v499;
  int *v500;
  uint64_t *__dst;
  char *__dsta;
  uint64_t (*__dstb)(uint64_t, uint64_t, uint64_t);

  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = v5 + 2;
  v7 = v4[2];
  if (v5[2] == 1)
  {
    if (v7 == 1)
    {
      v8 = 1;
LABEL_6:
      *v6 = v8;
      goto LABEL_9;
    }
    *v6 = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v7 == 1)
    {
      sub_224E2C98C((uint64_t)(v5 + 2));
      v8 = v4[2];
      goto LABEL_6;
    }
    *v6 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  v9 = a3[6];
  v10 = (uint64_t *)((char *)v5 + v9);
  v11 = (_QWORD *)((char *)v4 + v9);
  v12 = type metadata accessor for Reference();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  v499 = v4;
  v500 = a3;
  if (!v15)
  {
    if (v16)
    {
      sub_224DDEAA0((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_14;
    }
    *v10 = *v11;
    v10[1] = v11[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v10[2] = v11[2];
    v10[3] = v11[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v29 = *(int *)(v12 + 24);
    v30 = (uint64_t)v10 + v29;
    v31 = (char *)v11 + v29;
    v32 = type metadata accessor for Identifier();
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
    v35 = v34(v30, 1, v32);
    v36 = v34((uint64_t)v31, 1, v32);
    if (v35)
    {
      if (!v36)
      {
        *(_QWORD *)v30 = *(_QWORD *)v31;
        *(_QWORD *)(v30 + 8) = *((_QWORD *)v31 + 1);
        v46 = *((_QWORD *)v31 + 3);
        swift_bridgeObjectRetain();
        if (v46 == 1)
        {
          v47 = *((_OWORD *)v31 + 1);
          *(_QWORD *)(v30 + 32) = *((_QWORD *)v31 + 4);
          *(_OWORD *)(v30 + 16) = v47;
        }
        else
        {
          *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
          *(_QWORD *)(v30 + 24) = *((_QWORD *)v31 + 3);
          *(_QWORD *)(v30 + 32) = *((_QWORD *)v31 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v333 = *(int *)(v32 + 24);
        v334 = (void *)(v30 + v333);
        v335 = &v31[v333];
        v336 = sub_224F675D4();
        v337 = *(_QWORD *)(v336 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v337 + 48))(v335, 1, v336))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v334, v335, *(_QWORD *)(*(_QWORD *)(v338 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v337 + 16))(v334, v335, v336);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v337 + 56))(v334, 0, 1, v336);
        }
        v4 = v499;
        a3 = v500;
        v355 = *(int *)(v32 + 28);
        v356 = (_QWORD *)(v30 + v355);
        v357 = &v31[v355];
        *v356 = *(_QWORD *)v357;
        v356[1] = *((_QWORD *)v357 + 1);
        v358 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56);
        swift_bridgeObjectRetain();
        v358(v30, 0, 1, v32);
        goto LABEL_34;
      }
      v37 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_25:
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v37);
      v19 = *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64);
      v20 = (void *)v30;
      v21 = v31;
      goto LABEL_15;
    }
    if (v36)
    {
      sub_224DDEAA0(v30, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      v37 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_25;
    }
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *(_QWORD *)(v30 + 8) = *((_QWORD *)v31 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v319 = (__int128 *)(v30 + 16);
    v320 = (__int128 *)(v31 + 16);
    v321 = *((_QWORD *)v31 + 3);
    if (*(_QWORD *)(v30 + 24) == 1)
    {
      if (v321 == 1)
      {
        v322 = *v320;
        *(_QWORD *)(v30 + 32) = *((_QWORD *)v31 + 4);
        *v319 = v322;
      }
      else
      {
        *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
        *(_QWORD *)(v30 + 24) = *((_QWORD *)v31 + 3);
        *(_QWORD *)(v30 + 32) = *((_QWORD *)v31 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v321 == 1)
    {
      sub_224E2C9C0(v30 + 16);
      v367 = *((_QWORD *)v31 + 4);
      *v319 = *v320;
      *(_QWORD *)(v30 + 32) = v367;
    }
    else
    {
      *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
      *(_QWORD *)(v30 + 24) = *((_QWORD *)v31 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v30 + 32) = *((_QWORD *)v31 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v374 = *(int *)(v32 + 24);
    v375 = (void *)(v30 + v374);
    v376 = &v31[v374];
    v377 = sub_224F675D4();
    v378 = *(_QWORD *)(v377 - 8);
    v379 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v378 + 48);
    v380 = v379(v375, 1, v377);
    v381 = v379(v376, 1, v377);
    if (v380)
    {
      if (!v381)
      {
        (*(void (**)(void *, char *, uint64_t))(v378 + 16))(v375, v376, v377);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v378 + 56))(v375, 0, 1, v377);
LABEL_242:
        v4 = v499;
        v383 = *(int *)(v32 + 28);
        v384 = (_QWORD *)(v30 + v383);
        v385 = &v31[v383];
        *v384 = *(_QWORD *)v385;
        v384[1] = *((_QWORD *)v385 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        a3 = v500;
        goto LABEL_34;
      }
    }
    else
    {
      if (!v381)
      {
        (*(void (**)(void *, char *, uint64_t))(v378 + 24))(v375, v376, v377);
        goto LABEL_242;
      }
      (*(void (**)(void *, uint64_t))(v378 + 8))(v375, v377);
    }
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v375, v376, *(_QWORD *)(*(_QWORD *)(v382 - 8) + 64));
    goto LABEL_242;
  }
  if (v16)
  {
    v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_14:
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v17);
    v19 = *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64);
    v20 = v10;
    v21 = v11;
LABEL_15:
    memcpy(v20, v21, v19);
    goto LABEL_34;
  }
  __dst = v5;
  *v10 = *v11;
  v10[1] = v11[1];
  v10[2] = v11[2];
  v10[3] = v11[3];
  v22 = *(int *)(v12 + 24);
  v23 = (_QWORD *)((char *)v10 + v22);
  v24 = (_QWORD *)((char *)v11 + v22);
  v25 = type metadata accessor for Identifier();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v27(v24, 1, v25))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    v5 = __dst;
  }
  else
  {
    *v23 = *v24;
    v23[1] = v24[1];
    v38 = v24[3];
    swift_bridgeObjectRetain();
    v496 = v26;
    if (v38 == 1)
    {
      v39 = *((_OWORD *)v24 + 1);
      v23[4] = v24[4];
      *((_OWORD *)v23 + 1) = v39;
    }
    else
    {
      v23[2] = v24[2];
      v23[3] = v24[3];
      v23[4] = v24[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v5 = __dst;
    v41 = *(int *)(v25 + 24);
    __dsta = (char *)v23 + v41;
    v42 = (char *)v24 + v41;
    v43 = sub_224F675D4();
    v44 = *(_QWORD *)(v43 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dsta, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(__dsta, v42, v43);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(__dsta, 0, 1, v43);
    }
    v4 = v499;
    a3 = v500;
    v48 = *(int *)(v25 + 28);
    v49 = (_QWORD *)((char *)v23 + v48);
    v50 = (_QWORD *)((char *)v24 + v48);
    *v49 = *v50;
    v49[1] = v50[1];
    v51 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v496 + 56);
    swift_bridgeObjectRetain();
    v51(v23, 0, 1, v25);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_34:
  v52 = a3[7];
  v53 = (uint64_t)v5 + v52;
  v54 = (char *)v4 + v52;
  v55 = type metadata accessor for FHIRDateTime();
  __src = *(_QWORD **)(v55 - 8);
  __dstb = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__src[6];
  v56 = __dstb(v53, 1, v55);
  v57 = __dstb((uint64_t)v54, 1, v55);
  if (!v56)
  {
    if (v57)
    {
      sub_224DDEAA0(v53, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v58 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_39;
    }
    *(_BYTE *)v53 = *v54;
    *(_QWORD *)(v53 + 8) = *((_QWORD *)v54 + 1);
    *(_WORD *)(v53 + 16) = *((_WORD *)v54 + 8);
    *(_WORD *)(v53 + 18) = *((_WORD *)v54 + 9);
    v63 = (__int128 *)(v53 + 24);
    v64 = (__int128 *)(v54 + 24);
    v65 = *((_QWORD *)v54 + 7);
    if (*(_QWORD *)(v53 + 56) == 1)
    {
      if (v65 == 1)
      {
        v66 = *v64;
        v67 = *(_OWORD *)(v54 + 40);
        *(_QWORD *)(v53 + 56) = *((_QWORD *)v54 + 7);
        *v63 = v66;
        *(_OWORD *)(v53 + 40) = v67;
      }
      else
      {
        *(_BYTE *)(v53 + 24) = v54[24];
        *(_BYTE *)(v53 + 25) = v54[25];
        *(_BYTE *)(v53 + 26) = v54[26];
        v81 = *(_OWORD *)(v54 + 28);
        *(_DWORD *)(v53 + 44) = *((_DWORD *)v54 + 11);
        *(_OWORD *)(v53 + 28) = v81;
        *(_QWORD *)(v53 + 48) = *((_QWORD *)v54 + 6);
        *(_QWORD *)(v53 + 56) = *((_QWORD *)v54 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v65 == 1)
    {
      sub_224E2C9F4(v53 + 24);
      v79 = *((_QWORD *)v54 + 7);
      v80 = *(_OWORD *)(v54 + 40);
      *v63 = *v64;
      *(_OWORD *)(v53 + 40) = v80;
      *(_QWORD *)(v53 + 56) = v79;
    }
    else
    {
      *(_BYTE *)(v53 + 24) = v54[24];
      *(_BYTE *)(v53 + 25) = v54[25];
      *(_BYTE *)(v53 + 26) = v54[26];
      *(_DWORD *)(v53 + 28) = *((_DWORD *)v54 + 7);
      *(_WORD *)(v53 + 32) = *((_WORD *)v54 + 16);
      *(_WORD *)(v53 + 34) = *((_WORD *)v54 + 17);
      *(_WORD *)(v53 + 36) = *((_WORD *)v54 + 18);
      *(_WORD *)(v53 + 38) = *((_WORD *)v54 + 19);
      *(_WORD *)(v53 + 40) = *((_WORD *)v54 + 20);
      *(_WORD *)(v53 + 42) = *((_WORD *)v54 + 21);
      *(_WORD *)(v53 + 44) = *((_WORD *)v54 + 22);
      *(_WORD *)(v53 + 46) = *((_WORD *)v54 + 23);
      *(_QWORD *)(v53 + 48) = *((_QWORD *)v54 + 6);
      *(_QWORD *)(v53 + 56) = *((_QWORD *)v54 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v82 = *(int *)(v55 + 28);
    v83 = (void *)(v53 + v82);
    v84 = &v54[v82];
    v85 = sub_224F67874();
    v86 = *(_QWORD *)(v85 - 8);
    v87 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v86 + 48);
    v88 = v87(v83, 1, v85);
    v89 = v87(v84, 1, v85);
    if (v88)
    {
      if (!v89)
      {
        (*(void (**)(void *, char *, uint64_t))(v86 + 16))(v83, v84, v85);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v83, 0, 1, v85);
LABEL_60:
        v4 = v499;
        a3 = v500;
        v91 = *(int *)(v55 + 32);
        v92 = (_QWORD *)(v53 + v91);
        v93 = &v54[v91];
        *v92 = *(_QWORD *)v93;
        v92[1] = *((_QWORD *)v93 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_61;
      }
    }
    else
    {
      if (!v89)
      {
        (*(void (**)(void *, char *, uint64_t))(v86 + 24))(v83, v84, v85);
        goto LABEL_60;
      }
      (*(void (**)(void *, uint64_t))(v86 + 8))(v83, v85);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_60;
  }
  if (v57)
  {
    v58 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_39:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v58);
    memcpy((void *)v53, v54, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_61;
  }
  *(_BYTE *)v53 = *v54;
  v60 = *((_QWORD *)v54 + 1);
  *(_DWORD *)(v53 + 16) = *((_DWORD *)v54 + 4);
  *(_QWORD *)(v53 + 8) = v60;
  if (*((_QWORD *)v54 + 7) == 1)
  {
    v61 = *(_OWORD *)(v54 + 24);
    v62 = *(_OWORD *)(v54 + 40);
    *(_QWORD *)(v53 + 56) = *((_QWORD *)v54 + 7);
    *(_OWORD *)(v53 + 24) = v61;
    *(_OWORD *)(v53 + 40) = v62;
  }
  else
  {
    *(_BYTE *)(v53 + 24) = v54[24];
    *(_BYTE *)(v53 + 25) = v54[25];
    *(_BYTE *)(v53 + 26) = v54[26];
    v68 = *(_OWORD *)(v54 + 28);
    *(_DWORD *)(v53 + 44) = *((_DWORD *)v54 + 11);
    *(_OWORD *)(v53 + 28) = v68;
    *(_QWORD *)(v53 + 48) = *((_QWORD *)v54 + 6);
    *(_QWORD *)(v53 + 56) = *((_QWORD *)v54 + 7);
    swift_bridgeObjectRetain();
  }
  v69 = *(int *)(v55 + 28);
  v70 = (void *)(v53 + v69);
  v71 = &v54[v69];
  v72 = sub_224F67874();
  v73 = *(_QWORD *)(v72 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v73 + 16))(v70, v71, v72);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
  }
  a3 = v500;
  v75 = *(int *)(v55 + 32);
  v76 = (_QWORD *)(v53 + v75);
  v77 = &v54[v75];
  *v76 = *(_QWORD *)v77;
  v76[1] = *((_QWORD *)v77 + 1);
  v78 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))__src[7];
  swift_bridgeObjectRetain();
  v78(v53, 0, 1, v55);
LABEL_61:
  v94 = a3[8];
  v95 = (uint64_t *)((char *)v5 + v94);
  v96 = (char *)v4 + v94;
  *v95 = *(_QWORD *)((char *)v4 + v94);
  v95[1] = *(_QWORD *)((char *)v4 + v94 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v95[2] = *((_QWORD *)v96 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v97 = a3[9];
  v98 = (uint64_t)v5 + v97;
  v99 = (char *)v4 + v97;
  v100 = *(uint64_t *)((char *)v5 + v97 + 8);
  v101 = *(_QWORD *)((char *)v4 + v97 + 8);
  if (v100 == 1)
  {
    if (v101 == 1)
    {
      v102 = *(_OWORD *)v99;
      *(_QWORD *)(v98 + 16) = *((_QWORD *)v99 + 2);
      *(_OWORD *)v98 = v102;
    }
    else
    {
      *(_QWORD *)v98 = *(_QWORD *)v99;
      *(_QWORD *)(v98 + 8) = *((_QWORD *)v99 + 1);
      *(_QWORD *)(v98 + 16) = *((_QWORD *)v99 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v101 == 1)
  {
    sub_224E2C9C0(v98);
    v103 = *((_QWORD *)v99 + 2);
    *(_OWORD *)v98 = *(_OWORD *)v99;
    *(_QWORD *)(v98 + 16) = v103;
  }
  else
  {
    *(_QWORD *)v98 = *(_QWORD *)v99;
    *(_QWORD *)(v98 + 8) = *((_QWORD *)v99 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v98 + 16) = *((_QWORD *)v99 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v104 = a3[10];
  v105 = (uint64_t *)((char *)v5 + v104);
  v106 = (_QWORD *)((char *)v4 + v104);
  *v105 = *v106;
  v105[1] = v106[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v107 = a3[11];
  v108 = (uint64_t *)((char *)v5 + v107);
  v109 = (_QWORD *)((char *)v4 + v107);
  *v108 = *v109;
  v108[1] = v109[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v110 = a3[12];
  v111 = (uint64_t)v5 + v110;
  v112 = (char *)v4 + v110;
  v113 = *(uint64_t *)((char *)v5 + v110 + 8);
  v114 = *(_QWORD *)((char *)v4 + v110 + 8);
  if (v113 == 1)
  {
    if (v114 == 1)
    {
      v115 = *(_OWORD *)v112;
      *(_QWORD *)(v111 + 16) = *((_QWORD *)v112 + 2);
      *(_OWORD *)v111 = v115;
    }
    else
    {
      *(_QWORD *)v111 = *(_QWORD *)v112;
      *(_QWORD *)(v111 + 8) = *((_QWORD *)v112 + 1);
      *(_QWORD *)(v111 + 16) = *((_QWORD *)v112 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v114 == 1)
  {
    sub_224E2C9C0(v111);
    v116 = *((_QWORD *)v112 + 2);
    *(_OWORD *)v111 = *(_OWORD *)v112;
    *(_QWORD *)(v111 + 16) = v116;
  }
  else
  {
    *(_QWORD *)v111 = *(_QWORD *)v112;
    *(_QWORD *)(v111 + 8) = *((_QWORD *)v112 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v111 + 16) = *((_QWORD *)v112 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  *(uint64_t *)((char *)v5 + a3[13]) = *(_QWORD *)((char *)v4 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v117 = a3[14];
  v118 = (uint64_t)v5 + v117;
  v119 = (char *)v4 + v117;
  v120 = __dstb;
  v121 = __dstb((uint64_t)v5 + v117, 1, v55);
  v122 = __dstb((uint64_t)v119, 1, v55);
  if (!v121)
  {
    if (v122)
    {
      sub_224DDEAA0(v118, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v123 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_80;
    }
    *(_BYTE *)v118 = *v119;
    *(_QWORD *)(v118 + 8) = *((_QWORD *)v119 + 1);
    *(_WORD *)(v118 + 16) = *((_WORD *)v119 + 8);
    *(_WORD *)(v118 + 18) = *((_WORD *)v119 + 9);
    v128 = (__int128 *)(v118 + 24);
    v129 = (__int128 *)(v119 + 24);
    v130 = *((_QWORD *)v119 + 7);
    if (*(_QWORD *)(v118 + 56) == 1)
    {
      if (v130 == 1)
      {
        v131 = *v129;
        v132 = *(_OWORD *)(v119 + 40);
        *(_QWORD *)(v118 + 56) = *((_QWORD *)v119 + 7);
        *v128 = v131;
        *(_OWORD *)(v118 + 40) = v132;
      }
      else
      {
        *(_BYTE *)(v118 + 24) = v119[24];
        *(_BYTE *)(v118 + 25) = v119[25];
        *(_BYTE *)(v118 + 26) = v119[26];
        v146 = *(_OWORD *)(v119 + 28);
        *(_DWORD *)(v118 + 44) = *((_DWORD *)v119 + 11);
        *(_OWORD *)(v118 + 28) = v146;
        *(_QWORD *)(v118 + 48) = *((_QWORD *)v119 + 6);
        *(_QWORD *)(v118 + 56) = *((_QWORD *)v119 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v130 == 1)
    {
      sub_224E2C9F4(v118 + 24);
      v144 = *((_QWORD *)v119 + 7);
      v145 = *(_OWORD *)(v119 + 40);
      *v128 = *v129;
      *(_OWORD *)(v118 + 40) = v145;
      *(_QWORD *)(v118 + 56) = v144;
    }
    else
    {
      *(_BYTE *)(v118 + 24) = v119[24];
      *(_BYTE *)(v118 + 25) = v119[25];
      *(_BYTE *)(v118 + 26) = v119[26];
      *(_DWORD *)(v118 + 28) = *((_DWORD *)v119 + 7);
      *(_WORD *)(v118 + 32) = *((_WORD *)v119 + 16);
      *(_WORD *)(v118 + 34) = *((_WORD *)v119 + 17);
      *(_WORD *)(v118 + 36) = *((_WORD *)v119 + 18);
      *(_WORD *)(v118 + 38) = *((_WORD *)v119 + 19);
      *(_WORD *)(v118 + 40) = *((_WORD *)v119 + 20);
      *(_WORD *)(v118 + 42) = *((_WORD *)v119 + 21);
      *(_WORD *)(v118 + 44) = *((_WORD *)v119 + 22);
      *(_WORD *)(v118 + 46) = *((_WORD *)v119 + 23);
      *(_QWORD *)(v118 + 48) = *((_QWORD *)v119 + 6);
      *(_QWORD *)(v118 + 56) = *((_QWORD *)v119 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v147 = *(int *)(v55 + 28);
    v148 = (void *)(v118 + v147);
    v149 = &v119[v147];
    v150 = sub_224F67874();
    v151 = *(_QWORD *)(v150 - 8);
    v152 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v151 + 48);
    v153 = v152(v148, 1, v150);
    v154 = v152(v149, 1, v150);
    if (v153)
    {
      if (!v154)
      {
        (*(void (**)(void *, char *, uint64_t))(v151 + 16))(v148, v149, v150);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v151 + 56))(v148, 0, 1, v150);
LABEL_101:
        v4 = v499;
        a3 = v500;
        v120 = __dstb;
        v156 = *(int *)(v55 + 32);
        v157 = (_QWORD *)(v118 + v156);
        v158 = &v119[v156];
        *v157 = *(_QWORD *)v158;
        v157[1] = *((_QWORD *)v158 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_102;
      }
    }
    else
    {
      if (!v154)
      {
        (*(void (**)(void *, char *, uint64_t))(v151 + 24))(v148, v149, v150);
        goto LABEL_101;
      }
      (*(void (**)(void *, uint64_t))(v151 + 8))(v148, v150);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
    goto LABEL_101;
  }
  if (v122)
  {
    v123 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_80:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v123);
    memcpy((void *)v118, v119, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    goto LABEL_102;
  }
  *(_BYTE *)v118 = *v119;
  v125 = *((_QWORD *)v119 + 1);
  *(_DWORD *)(v118 + 16) = *((_DWORD *)v119 + 4);
  *(_QWORD *)(v118 + 8) = v125;
  if (*((_QWORD *)v119 + 7) == 1)
  {
    v126 = *(_OWORD *)(v119 + 24);
    v127 = *(_OWORD *)(v119 + 40);
    *(_QWORD *)(v118 + 56) = *((_QWORD *)v119 + 7);
    *(_OWORD *)(v118 + 24) = v126;
    *(_OWORD *)(v118 + 40) = v127;
  }
  else
  {
    *(_BYTE *)(v118 + 24) = v119[24];
    *(_BYTE *)(v118 + 25) = v119[25];
    *(_BYTE *)(v118 + 26) = v119[26];
    v133 = *(_OWORD *)(v119 + 28);
    *(_DWORD *)(v118 + 44) = *((_DWORD *)v119 + 11);
    *(_OWORD *)(v118 + 28) = v133;
    *(_QWORD *)(v118 + 48) = *((_QWORD *)v119 + 6);
    *(_QWORD *)(v118 + 56) = *((_QWORD *)v119 + 7);
    swift_bridgeObjectRetain();
  }
  v134 = *(int *)(v55 + 28);
  v135 = (void *)(v118 + v134);
  v136 = &v119[v134];
  v137 = sub_224F67874();
  v138 = *(_QWORD *)(v137 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48))(v136, 1, v137))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v138 + 16))(v135, v136, v137);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v138 + 56))(v135, 0, 1, v137);
  }
  a3 = v500;
  v120 = __dstb;
  v140 = *(int *)(v55 + 32);
  v141 = (_QWORD *)(v118 + v140);
  v142 = &v119[v140];
  *v141 = *(_QWORD *)v142;
  v141[1] = *((_QWORD *)v142 + 1);
  v143 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))__src[7];
  swift_bridgeObjectRetain();
  v143(v118, 0, 1, v55);
LABEL_102:
  v159 = a3[15];
  v160 = (char *)v5 + v159;
  v161 = (char *)v4 + v159;
  v162 = type metadata accessor for Period();
  v495 = *(_QWORD *)(v162 - 8);
  v163 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v495 + 48);
  v164 = v163(v160, 1, v162);
  v497 = v163;
  v165 = v163(v161, 1, v162);
  if (v164)
  {
    if (v165)
    {
      v166 = &qword_2557E04B8;
      v167 = type metadata accessor for Period;
LABEL_105:
      v168 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_109:
      sub_224DDEA0C(0, v166, (uint64_t (*)(uint64_t))v167, v168);
      memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
      goto LABEL_137;
    }
    if (v120((uint64_t)v161, 1, v55))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
    }
    else
    {
      *v160 = *v161;
      v175 = *((_QWORD *)v161 + 1);
      *((_DWORD *)v160 + 4) = *((_DWORD *)v161 + 4);
      *((_QWORD *)v160 + 1) = v175;
      if (*((_QWORD *)v161 + 7) == 1)
      {
        v176 = *(_OWORD *)(v161 + 24);
        v177 = *(_OWORD *)(v161 + 40);
        *((_QWORD *)v160 + 7) = *((_QWORD *)v161 + 7);
        *(_OWORD *)(v160 + 24) = v176;
        *(_OWORD *)(v160 + 40) = v177;
      }
      else
      {
        v160[24] = v161[24];
        v160[25] = v161[25];
        v160[26] = v161[26];
        v179 = *(_OWORD *)(v161 + 28);
        *((_DWORD *)v160 + 11) = *((_DWORD *)v161 + 11);
        *(_OWORD *)(v160 + 28) = v179;
        *((_QWORD *)v160 + 6) = *((_QWORD *)v161 + 6);
        *((_QWORD *)v160 + 7) = *((_QWORD *)v161 + 7);
        swift_bridgeObjectRetain();
      }
      v180 = *(int *)(v55 + 28);
      v181 = &v160[v180];
      v182 = &v161[v180];
      v183 = sub_224F67874();
      v184 = *(_QWORD *)(v183 - 8);
      v185 = v162;
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v184 + 48))(v182, 1, v183))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v186 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v184 + 16))(v181, v182, v183);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v184 + 56))(v181, 0, 1, v183);
      }
      v120 = __dstb;
      v190 = *(int *)(v55 + 32);
      v191 = &v160[v190];
      v192 = &v161[v190];
      *v191 = *v192;
      v191[1] = v192[1];
      v4 = v499;
      v193 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__src[7];
      swift_bridgeObjectRetain();
      v193(v160, 0, 1, v55);
      a3 = v500;
      v162 = v185;
    }
    v194 = *(int *)(v162 + 20);
    v195 = &v160[v194];
    v196 = &v161[v194];
    if (v120((uint64_t)v196, 1, v55))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v195, v196, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
    }
    else
    {
      *v195 = *v196;
      v198 = *((_QWORD *)v196 + 1);
      *((_DWORD *)v195 + 4) = *((_DWORD *)v196 + 4);
      *((_QWORD *)v195 + 1) = v198;
      if (*((_QWORD *)v196 + 7) == 1)
      {
        v199 = *(_OWORD *)(v196 + 24);
        v200 = *(_OWORD *)(v196 + 40);
        *((_QWORD *)v195 + 7) = *((_QWORD *)v196 + 7);
        *(_OWORD *)(v195 + 24) = v199;
        *(_OWORD *)(v195 + 40) = v200;
      }
      else
      {
        v195[24] = v196[24];
        v195[25] = v196[25];
        v195[26] = v196[26];
        v201 = *(_OWORD *)(v196 + 28);
        *((_DWORD *)v195 + 11) = *((_DWORD *)v196 + 11);
        *(_OWORD *)(v195 + 28) = v201;
        *((_QWORD *)v195 + 6) = *((_QWORD *)v196 + 6);
        *((_QWORD *)v195 + 7) = *((_QWORD *)v196 + 7);
        swift_bridgeObjectRetain();
      }
      v202 = *(int *)(v55 + 28);
      v203 = &v195[v202];
      v204 = &v196[v202];
      v205 = sub_224F67874();
      v206 = *(_QWORD *)(v205 - 8);
      v489 = v162;
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v206 + 48))(v204, 1, v205))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v203, v204, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v206 + 16))(v203, v204, v205);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v203, 0, 1, v205);
      }
      a3 = v500;
      v120 = __dstb;
      v208 = *(int *)(v55 + 32);
      v209 = &v195[v208];
      v210 = &v196[v208];
      *v209 = *v210;
      v209[1] = v210[1];
      v211 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__src[7];
      swift_bridgeObjectRetain();
      v211(v195, 0, 1, v55);
      v4 = v499;
      v162 = v489;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v495 + 56))(v160, 0, 1, v162);
    goto LABEL_137;
  }
  if (v165)
  {
    v169 = type metadata accessor for Period;
    sub_224DDEAA0((uint64_t)v160, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    v166 = &qword_2557E04B8;
LABEL_108:
    v168 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
    v167 = v169;
    goto LABEL_109;
  }
  v172 = v120((uint64_t)v160, 1, v55);
  v173 = v120((uint64_t)v161, 1, v55);
  if (!v172)
  {
    if (v173)
    {
      sub_224DDEAA0((uint64_t)v160, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v174 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_119;
    }
    *v160 = *v161;
    *((_QWORD *)v160 + 1) = *((_QWORD *)v161 + 1);
    *((_WORD *)v160 + 8) = *((_WORD *)v161 + 8);
    *((_WORD *)v160 + 9) = *((_WORD *)v161 + 9);
    v323 = (__int128 *)(v160 + 24);
    v324 = (__int128 *)(v161 + 24);
    v325 = *((_QWORD *)v161 + 7);
    v492 = v162;
    if (*((_QWORD *)v160 + 7) == 1)
    {
      if (v325 == 1)
      {
        v326 = *v324;
        v327 = *(_OWORD *)(v161 + 40);
        *((_QWORD *)v160 + 7) = *((_QWORD *)v161 + 7);
        *v323 = v326;
        *(_OWORD *)(v160 + 40) = v327;
      }
      else
      {
        v160[24] = v161[24];
        v160[25] = v161[25];
        v160[26] = v161[26];
        v372 = *(_OWORD *)(v161 + 28);
        *((_DWORD *)v160 + 11) = *((_DWORD *)v161 + 11);
        *(_OWORD *)(v160 + 28) = v372;
        *((_QWORD *)v160 + 6) = *((_QWORD *)v161 + 6);
        *((_QWORD *)v160 + 7) = *((_QWORD *)v161 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v325 == 1)
    {
      sub_224E2C9F4((uint64_t)(v160 + 24));
      v368 = *((_QWORD *)v161 + 7);
      v369 = *(_OWORD *)(v161 + 40);
      *v323 = *v324;
      *(_OWORD *)(v160 + 40) = v369;
      *((_QWORD *)v160 + 7) = v368;
    }
    else
    {
      v160[24] = v161[24];
      v160[25] = v161[25];
      v160[26] = v161[26];
      *((_DWORD *)v160 + 7) = *((_DWORD *)v161 + 7);
      *((_WORD *)v160 + 16) = *((_WORD *)v161 + 16);
      *((_WORD *)v160 + 17) = *((_WORD *)v161 + 17);
      *((_WORD *)v160 + 18) = *((_WORD *)v161 + 18);
      *((_WORD *)v160 + 19) = *((_WORD *)v161 + 19);
      *((_WORD *)v160 + 20) = *((_WORD *)v161 + 20);
      *((_WORD *)v160 + 21) = *((_WORD *)v161 + 21);
      *((_WORD *)v160 + 22) = *((_WORD *)v161 + 22);
      *((_WORD *)v160 + 23) = *((_WORD *)v161 + 23);
      *((_QWORD *)v160 + 6) = *((_QWORD *)v161 + 6);
      *((_QWORD *)v160 + 7) = *((_QWORD *)v161 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v386 = *(int *)(v55 + 28);
    v387 = &v160[v386];
    v388 = &v161[v386];
    v389 = sub_224F67874();
    v390 = *(_QWORD *)(v389 - 8);
    v391 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v390 + 48);
    v392 = v391(v387, 1, v389);
    v393 = v391(v388, 1, v389);
    if (v392)
    {
      v162 = v492;
      if (!v393)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v390 + 16))(v387, v388, v389);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v390 + 56))(v387, 0, 1, v389);
LABEL_250:
        a3 = v500;
        v395 = *(int *)(v55 + 32);
        v396 = &v160[v395];
        v397 = &v161[v395];
        *v396 = *v397;
        v396[1] = v397[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v4 = v499;
        v120 = __dstb;
        goto LABEL_251;
      }
    }
    else
    {
      v162 = v492;
      if (!v393)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v390 + 24))(v387, v388, v389);
        goto LABEL_250;
      }
      (*(void (**)(_BYTE *, uint64_t))(v390 + 8))(v387, v389);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v387, v388, *(_QWORD *)(*(_QWORD *)(v394 - 8) + 64));
    goto LABEL_250;
  }
  if (v173)
  {
    v174 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_119:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v174);
    memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
    goto LABEL_251;
  }
  *v160 = *v161;
  v187 = *((_QWORD *)v161 + 1);
  *((_DWORD *)v160 + 4) = *((_DWORD *)v161 + 4);
  *((_QWORD *)v160 + 1) = v187;
  if (*((_QWORD *)v161 + 7) == 1)
  {
    v188 = *(_OWORD *)(v161 + 24);
    v189 = *(_OWORD *)(v161 + 40);
    *((_QWORD *)v160 + 7) = *((_QWORD *)v161 + 7);
    *(_OWORD *)(v160 + 24) = v188;
    *(_OWORD *)(v160 + 40) = v189;
  }
  else
  {
    v160[24] = v161[24];
    v160[25] = v161[25];
    v160[26] = v161[26];
    v339 = *(_OWORD *)(v161 + 28);
    *((_DWORD *)v160 + 11) = *((_DWORD *)v161 + 11);
    *(_OWORD *)(v160 + 28) = v339;
    *((_QWORD *)v160 + 6) = *((_QWORD *)v161 + 6);
    *((_QWORD *)v160 + 7) = *((_QWORD *)v161 + 7);
    swift_bridgeObjectRetain();
  }
  v340 = *(int *)(v55 + 28);
  v341 = &v160[v340];
  v342 = &v161[v340];
  v343 = sub_224F67874();
  v344 = *(_QWORD *)(v343 - 8);
  v345 = v162;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v344 + 48))(v342, 1, v343))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v341, v342, *(_QWORD *)(*(_QWORD *)(v346 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v344 + 16))(v341, v342, v343);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v344 + 56))(v341, 0, 1, v343);
  }
  v120 = __dstb;
  v359 = *(int *)(v55 + 32);
  v360 = &v160[v359];
  v361 = &v161[v359];
  *v360 = *v361;
  v360[1] = v361[1];
  v4 = v499;
  v362 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__src[7];
  swift_bridgeObjectRetain();
  v362(v160, 0, 1, v55);
  a3 = v500;
  v162 = v345;
LABEL_251:
  v398 = *(int *)(v162 + 20);
  v160 += v398;
  v161 += v398;
  v399 = v120((uint64_t)v160, 1, v55);
  v400 = v120((uint64_t)v161, 1, v55);
  if (!v399)
  {
    if (v400)
    {
      v169 = type metadata accessor for FHIRDateTime;
      sub_224DDEAA0((uint64_t)v160, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v166 = &qword_2557E02D0;
      goto LABEL_108;
    }
    *v160 = *v161;
    *((_QWORD *)v160 + 1) = *((_QWORD *)v161 + 1);
    *((_WORD *)v160 + 8) = *((_WORD *)v161 + 8);
    *((_WORD *)v160 + 9) = *((_WORD *)v161 + 9);
    v404 = (__int128 *)(v160 + 24);
    v405 = (__int128 *)(v161 + 24);
    v406 = *((_QWORD *)v161 + 7);
    v494 = v162;
    if (*((_QWORD *)v160 + 7) == 1)
    {
      if (v406 == 1)
      {
        v407 = *v405;
        v408 = *(_OWORD *)(v161 + 40);
        *((_QWORD *)v160 + 7) = *((_QWORD *)v161 + 7);
        *v404 = v407;
        *(_OWORD *)(v160 + 40) = v408;
      }
      else
      {
        v160[24] = v161[24];
        v160[25] = v161[25];
        v160[26] = v161[26];
        v463 = *(_OWORD *)(v161 + 28);
        *((_DWORD *)v160 + 11) = *((_DWORD *)v161 + 11);
        *(_OWORD *)(v160 + 28) = v463;
        *((_QWORD *)v160 + 6) = *((_QWORD *)v161 + 6);
        *((_QWORD *)v160 + 7) = *((_QWORD *)v161 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v406 == 1)
    {
      sub_224E2C9F4((uint64_t)(v160 + 24));
      v421 = *((_QWORD *)v161 + 7);
      v422 = *(_OWORD *)(v161 + 40);
      *v404 = *v405;
      *(_OWORD *)(v160 + 40) = v422;
      *((_QWORD *)v160 + 7) = v421;
    }
    else
    {
      v160[24] = v161[24];
      v160[25] = v161[25];
      v160[26] = v161[26];
      *((_DWORD *)v160 + 7) = *((_DWORD *)v161 + 7);
      *((_WORD *)v160 + 16) = *((_WORD *)v161 + 16);
      *((_WORD *)v160 + 17) = *((_WORD *)v161 + 17);
      *((_WORD *)v160 + 18) = *((_WORD *)v161 + 18);
      *((_WORD *)v160 + 19) = *((_WORD *)v161 + 19);
      *((_WORD *)v160 + 20) = *((_WORD *)v161 + 20);
      *((_WORD *)v160 + 21) = *((_WORD *)v161 + 21);
      *((_WORD *)v160 + 22) = *((_WORD *)v161 + 22);
      *((_WORD *)v160 + 23) = *((_WORD *)v161 + 23);
      *((_QWORD *)v160 + 6) = *((_QWORD *)v161 + 6);
      *((_QWORD *)v160 + 7) = *((_QWORD *)v161 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v464 = *(int *)(v55 + 28);
    v465 = &v160[v464];
    v466 = &v161[v464];
    v467 = sub_224F67874();
    v468 = *(_QWORD *)(v467 - 8);
    v469 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v468 + 48);
    v470 = v469(v465, 1, v467);
    v471 = v469(v466, 1, v467);
    if (v470)
    {
      v162 = v494;
      if (!v471)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v468 + 16))(v465, v466, v467);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v468 + 56))(v465, 0, 1, v467);
LABEL_302:
        a3 = v500;
        v473 = *(int *)(v55 + 32);
        v474 = &v160[v473];
        v475 = &v161[v473];
        *v474 = *v475;
        v474[1] = v475[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v4 = v499;
        v120 = __dstb;
        goto LABEL_137;
      }
    }
    else
    {
      v162 = v494;
      if (!v471)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v468 + 24))(v465, v466, v467);
        goto LABEL_302;
      }
      (*(void (**)(_BYTE *, uint64_t))(v468 + 8))(v465, v467);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v465, v466, *(_QWORD *)(*(_QWORD *)(v472 - 8) + 64));
    goto LABEL_302;
  }
  if (v400)
  {
    v166 = &qword_2557E02D0;
    v167 = type metadata accessor for FHIRDateTime;
    goto LABEL_105;
  }
  *v160 = *v161;
  v401 = *((_QWORD *)v161 + 1);
  *((_DWORD *)v160 + 4) = *((_DWORD *)v161 + 4);
  *((_QWORD *)v160 + 1) = v401;
  if (*((_QWORD *)v161 + 7) == 1)
  {
    v402 = *(_OWORD *)(v161 + 24);
    v403 = *(_OWORD *)(v161 + 40);
    *((_QWORD *)v160 + 7) = *((_QWORD *)v161 + 7);
    *(_OWORD *)(v160 + 24) = v402;
    *(_OWORD *)(v160 + 40) = v403;
  }
  else
  {
    v160[24] = v161[24];
    v160[25] = v161[25];
    v160[26] = v161[26];
    v409 = *(_OWORD *)(v161 + 28);
    *((_DWORD *)v160 + 11) = *((_DWORD *)v161 + 11);
    *(_OWORD *)(v160 + 28) = v409;
    *((_QWORD *)v160 + 6) = *((_QWORD *)v161 + 6);
    *((_QWORD *)v160 + 7) = *((_QWORD *)v161 + 7);
    swift_bridgeObjectRetain();
  }
  v410 = *(int *)(v55 + 28);
  v411 = &v160[v410];
  v412 = &v161[v410];
  v413 = sub_224F67874();
  v414 = *(_QWORD *)(v413 - 8);
  v415 = v162;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v414 + 48))(v412, 1, v413))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v411, v412, *(_QWORD *)(*(_QWORD *)(v416 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v414 + 16))(v411, v412, v413);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v414 + 56))(v411, 0, 1, v413);
  }
  v120 = __dstb;
  v417 = *(int *)(v55 + 32);
  v418 = &v160[v417];
  v419 = &v161[v417];
  *v418 = *v419;
  v418[1] = v419[1];
  v4 = v499;
  v420 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__src[7];
  swift_bridgeObjectRetain();
  v420(v160, 0, 1, v55);
  a3 = v500;
  v162 = v415;
LABEL_137:
  v212 = a3[16];
  v213 = (uint64_t *)((char *)v5 + v212);
  v214 = (_QWORD *)((char *)v4 + v212);
  *v213 = *v214;
  v213[1] = v214[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v215 = a3[17];
  v216 = (uint64_t)v5 + v215;
  v217 = (char *)v4 + v215;
  v218 = v120((uint64_t)v5 + v215, 1, v55);
  v219 = v120((uint64_t)v217, 1, v55);
  if (!v218)
  {
    if (v219)
    {
      sub_224DDEAA0(v216, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v220 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_142;
    }
    *(_BYTE *)v216 = *v217;
    *(_QWORD *)(v216 + 8) = *((_QWORD *)v217 + 1);
    *(_WORD *)(v216 + 16) = *((_WORD *)v217 + 8);
    *(_WORD *)(v216 + 18) = *((_WORD *)v217 + 9);
    v226 = (__int128 *)(v216 + 24);
    v227 = (__int128 *)(v217 + 24);
    v228 = *((_QWORD *)v217 + 7);
    v490 = v162;
    if (*(_QWORD *)(v216 + 56) == 1)
    {
      if (v228 == 1)
      {
        v229 = *v227;
        v230 = *(_OWORD *)(v217 + 40);
        *(_QWORD *)(v216 + 56) = *((_QWORD *)v217 + 7);
        *v226 = v229;
        *(_OWORD *)(v216 + 40) = v230;
      }
      else
      {
        *(_BYTE *)(v216 + 24) = v217[24];
        *(_BYTE *)(v216 + 25) = v217[25];
        *(_BYTE *)(v216 + 26) = v217[26];
        v245 = *(_OWORD *)(v217 + 28);
        *(_DWORD *)(v216 + 44) = *((_DWORD *)v217 + 11);
        *(_OWORD *)(v216 + 28) = v245;
        *(_QWORD *)(v216 + 48) = *((_QWORD *)v217 + 6);
        *(_QWORD *)(v216 + 56) = *((_QWORD *)v217 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v228 == 1)
    {
      sub_224E2C9F4(v216 + 24);
      v243 = *((_QWORD *)v217 + 7);
      v244 = *(_OWORD *)(v217 + 40);
      *v226 = *v227;
      *(_OWORD *)(v216 + 40) = v244;
      *(_QWORD *)(v216 + 56) = v243;
    }
    else
    {
      *(_BYTE *)(v216 + 24) = v217[24];
      *(_BYTE *)(v216 + 25) = v217[25];
      *(_BYTE *)(v216 + 26) = v217[26];
      *(_DWORD *)(v216 + 28) = *((_DWORD *)v217 + 7);
      *(_WORD *)(v216 + 32) = *((_WORD *)v217 + 16);
      *(_WORD *)(v216 + 34) = *((_WORD *)v217 + 17);
      *(_WORD *)(v216 + 36) = *((_WORD *)v217 + 18);
      *(_WORD *)(v216 + 38) = *((_WORD *)v217 + 19);
      *(_WORD *)(v216 + 40) = *((_WORD *)v217 + 20);
      *(_WORD *)(v216 + 42) = *((_WORD *)v217 + 21);
      *(_WORD *)(v216 + 44) = *((_WORD *)v217 + 22);
      *(_WORD *)(v216 + 46) = *((_WORD *)v217 + 23);
      *(_QWORD *)(v216 + 48) = *((_QWORD *)v217 + 6);
      *(_QWORD *)(v216 + 56) = *((_QWORD *)v217 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v246 = *(int *)(v55 + 28);
    v247 = (void *)(v216 + v246);
    v248 = &v217[v246];
    v249 = sub_224F67874();
    v250 = *(_QWORD *)(v249 - 8);
    v251 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v250 + 48);
    v252 = v251(v247, 1, v249);
    v253 = v251(v248, 1, v249);
    if (v252)
    {
      if (!v253)
      {
        (*(void (**)(void *, char *, uint64_t))(v250 + 16))(v247, v248, v249);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v250 + 56))(v247, 0, 1, v249);
LABEL_163:
        v4 = v499;
        a3 = v500;
        v120 = __dstb;
        v162 = v490;
        v222 = v497;
        v255 = *(int *)(v55 + 32);
        v256 = (_QWORD *)(v216 + v255);
        v257 = &v217[v255];
        *v256 = *(_QWORD *)v257;
        v256[1] = *((_QWORD *)v257 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_164;
      }
    }
    else
    {
      if (!v253)
      {
        (*(void (**)(void *, char *, uint64_t))(v250 + 24))(v247, v248, v249);
        goto LABEL_163;
      }
      (*(void (**)(void *, uint64_t))(v250 + 8))(v247, v249);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v247, v248, *(_QWORD *)(*(_QWORD *)(v254 - 8) + 64));
    goto LABEL_163;
  }
  if (v219)
  {
    v220 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_142:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v220);
    memcpy((void *)v216, v217, *(_QWORD *)(*(_QWORD *)(v221 - 8) + 64));
    v222 = v497;
    goto LABEL_164;
  }
  *(_BYTE *)v216 = *v217;
  v223 = *((_QWORD *)v217 + 1);
  *(_DWORD *)(v216 + 16) = *((_DWORD *)v217 + 4);
  *(_QWORD *)(v216 + 8) = v223;
  if (*((_QWORD *)v217 + 7) == 1)
  {
    v224 = *(_OWORD *)(v217 + 24);
    v225 = *(_OWORD *)(v217 + 40);
    *(_QWORD *)(v216 + 56) = *((_QWORD *)v217 + 7);
    *(_OWORD *)(v216 + 24) = v224;
    *(_OWORD *)(v216 + 40) = v225;
  }
  else
  {
    *(_BYTE *)(v216 + 24) = v217[24];
    *(_BYTE *)(v216 + 25) = v217[25];
    *(_BYTE *)(v216 + 26) = v217[26];
    v231 = *(_OWORD *)(v217 + 28);
    *(_DWORD *)(v216 + 44) = *((_DWORD *)v217 + 11);
    *(_OWORD *)(v216 + 28) = v231;
    *(_QWORD *)(v216 + 48) = *((_QWORD *)v217 + 6);
    *(_QWORD *)(v216 + 56) = *((_QWORD *)v217 + 7);
    swift_bridgeObjectRetain();
  }
  v232 = *(int *)(v55 + 28);
  v233 = (void *)(v216 + v232);
  v234 = &v217[v232];
  v235 = sub_224F67874();
  v236 = *(_QWORD *)(v235 - 8);
  v237 = v162;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v236 + 48))(v234, 1, v235))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v233, v234, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v236 + 16))(v233, v234, v235);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v236 + 56))(v233, 0, 1, v235);
  }
  v4 = v499;
  a3 = v500;
  v120 = __dstb;
  v239 = *(int *)(v55 + 32);
  v240 = (_QWORD *)(v216 + v239);
  v241 = &v217[v239];
  *v240 = *(_QWORD *)v241;
  v240[1] = *((_QWORD *)v241 + 1);
  v222 = v497;
  v242 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))__src[7];
  swift_bridgeObjectRetain();
  v242(v216, 0, 1, v55);
  v162 = v237;
LABEL_164:
  v258 = a3[18];
  v259 = (char *)v5 + v258;
  v260 = (char *)v4 + v258;
  v261 = v222((char *)v5 + v258, 1, v162);
  v262 = v222(v260, 1, v162);
  if (!v261)
  {
    if (v262)
    {
      sub_224DDEAA0((uint64_t)v259, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v263 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_169;
    }
    v269 = v120((uint64_t)v259, 1, v55);
    v270 = v120((uint64_t)v260, 1, v55);
    if (v269)
    {
      if (v270)
      {
        v271 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_180:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v271);
        memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v275 - 8) + 64));
        goto LABEL_276;
      }
      *v259 = *v260;
      v284 = *((_QWORD *)v260 + 1);
      *((_DWORD *)v259 + 4) = *((_DWORD *)v260 + 4);
      *((_QWORD *)v259 + 1) = v284;
      if (*((_QWORD *)v260 + 7) == 1)
      {
        v285 = *(_OWORD *)(v260 + 24);
        v286 = *(_OWORD *)(v260 + 40);
        *((_QWORD *)v259 + 7) = *((_QWORD *)v260 + 7);
        *(_OWORD *)(v259 + 24) = v285;
        *(_OWORD *)(v259 + 40) = v286;
      }
      else
      {
        v259[24] = v260[24];
        v259[25] = v260[25];
        v259[26] = v260[26];
        v347 = *(_OWORD *)(v260 + 28);
        *((_DWORD *)v259 + 11) = *((_DWORD *)v260 + 11);
        *(_OWORD *)(v259 + 28) = v347;
        *((_QWORD *)v259 + 6) = *((_QWORD *)v260 + 6);
        *((_QWORD *)v259 + 7) = *((_QWORD *)v260 + 7);
        swift_bridgeObjectRetain();
      }
      v348 = *(int *)(v55 + 28);
      v349 = &v259[v348];
      v350 = &v260[v348];
      v351 = sub_224F67874();
      v352 = *(_QWORD *)(v351 - 8);
      v353 = v162;
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v352 + 48))(v350, 1, v351))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v349, v350, *(_QWORD *)(*(_QWORD *)(v354 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v352 + 16))(v349, v350, v351);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v352 + 56))(v349, 0, 1, v351);
      }
      v120 = __dstb;
      v363 = *(int *)(v55 + 32);
      v364 = &v259[v363];
      v365 = &v260[v363];
      *v364 = *v365;
      v364[1] = v365[1];
      v4 = v499;
      v366 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__src[7];
      swift_bridgeObjectRetain();
      v366(v259, 0, 1, v55);
      a3 = v500;
      v162 = v353;
LABEL_276:
      v435 = *(int *)(v162 + 20);
      v436 = (uint64_t)&v259[v435];
      v437 = &v260[v435];
      v438 = v120(v436, 1, v55);
      v439 = v120((uint64_t)v437, 1, v55);
      if (v438)
      {
        if (!v439)
        {
          *(_BYTE *)v436 = *v437;
          v442 = *((_QWORD *)v437 + 1);
          *(_DWORD *)(v436 + 16) = *((_DWORD *)v437 + 4);
          *(_QWORD *)(v436 + 8) = v442;
          if (*((_QWORD *)v437 + 7) == 1)
          {
            v443 = *(_OWORD *)(v437 + 24);
            v444 = *(_OWORD *)(v437 + 40);
            *(_QWORD *)(v436 + 56) = *((_QWORD *)v437 + 7);
            *(_OWORD *)(v436 + 24) = v443;
            *(_OWORD *)(v436 + 40) = v444;
          }
          else
          {
            *(_BYTE *)(v436 + 24) = v437[24];
            *(_BYTE *)(v436 + 25) = v437[25];
            *(_BYTE *)(v436 + 26) = v437[26];
            v450 = *(_OWORD *)(v437 + 28);
            *(_DWORD *)(v436 + 44) = *((_DWORD *)v437 + 11);
            *(_OWORD *)(v436 + 28) = v450;
            *(_QWORD *)(v436 + 48) = *((_QWORD *)v437 + 6);
            *(_QWORD *)(v436 + 56) = *((_QWORD *)v437 + 7);
            swift_bridgeObjectRetain();
          }
          v451 = *(int *)(v55 + 28);
          v452 = (void *)(v436 + v451);
          v453 = &v437[v451];
          v454 = sub_224F67874();
          v455 = *(_QWORD *)(v454 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v455 + 48))(v453, 1, v454))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v452, v453, *(_QWORD *)(*(_QWORD *)(v456 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v455 + 16))(v452, v453, v454);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v455 + 56))(v452, 0, 1, v454);
          }
          a3 = v500;
          v457 = *(int *)(v55 + 32);
          v458 = (_QWORD *)(v436 + v457);
          v459 = &v437[v457];
          *v458 = *v459;
          v458[1] = v459[1];
          v460 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))__src[7];
          swift_bridgeObjectRetain();
          v460(v436, 0, 1, v55);
          goto LABEL_198;
        }
        v440 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_281:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v440);
        v265 = *(_QWORD *)(*(_QWORD *)(v441 - 8) + 64);
        v266 = (void *)v436;
        v267 = v437;
        goto LABEL_170;
      }
      if (v439)
      {
        sub_224DDEAA0(v436, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v440 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_281;
      }
      *(_BYTE *)v436 = *v437;
      *(_QWORD *)(v436 + 8) = *((_QWORD *)v437 + 1);
      *(_WORD *)(v436 + 16) = *((_WORD *)v437 + 8);
      *(_WORD *)(v436 + 18) = *((_WORD *)v437 + 9);
      v445 = (__int128 *)(v436 + 24);
      v446 = (__int128 *)(v437 + 24);
      v447 = *((_QWORD *)v437 + 7);
      if (*(_QWORD *)(v436 + 56) == 1)
      {
        if (v447 == 1)
        {
          v448 = *v446;
          v449 = *(_OWORD *)(v437 + 40);
          *(_QWORD *)(v436 + 56) = *((_QWORD *)v437 + 7);
          *v445 = v448;
          *(_OWORD *)(v436 + 40) = v449;
        }
        else
        {
          *(_BYTE *)(v436 + 24) = v437[24];
          *(_BYTE *)(v436 + 25) = v437[25];
          *(_BYTE *)(v436 + 26) = v437[26];
          v476 = *(_OWORD *)(v437 + 28);
          *(_DWORD *)(v436 + 44) = *((_DWORD *)v437 + 11);
          *(_OWORD *)(v436 + 28) = v476;
          *(_QWORD *)(v436 + 48) = *((_QWORD *)v437 + 6);
          *(_QWORD *)(v436 + 56) = *((_QWORD *)v437 + 7);
          swift_bridgeObjectRetain();
        }
      }
      else if (v447 == 1)
      {
        sub_224E2C9F4(v436 + 24);
        v461 = *((_QWORD *)v437 + 7);
        v462 = *(_OWORD *)(v437 + 40);
        *v445 = *v446;
        *(_OWORD *)(v436 + 40) = v462;
        *(_QWORD *)(v436 + 56) = v461;
      }
      else
      {
        *(_BYTE *)(v436 + 24) = v437[24];
        *(_BYTE *)(v436 + 25) = v437[25];
        *(_BYTE *)(v436 + 26) = v437[26];
        *(_DWORD *)(v436 + 28) = *((_DWORD *)v437 + 7);
        *(_WORD *)(v436 + 32) = *((_WORD *)v437 + 16);
        *(_WORD *)(v436 + 34) = *((_WORD *)v437 + 17);
        *(_WORD *)(v436 + 36) = *((_WORD *)v437 + 18);
        *(_WORD *)(v436 + 38) = *((_WORD *)v437 + 19);
        *(_WORD *)(v436 + 40) = *((_WORD *)v437 + 20);
        *(_WORD *)(v436 + 42) = *((_WORD *)v437 + 21);
        *(_WORD *)(v436 + 44) = *((_WORD *)v437 + 22);
        *(_WORD *)(v436 + 46) = *((_WORD *)v437 + 23);
        *(_QWORD *)(v436 + 48) = *((_QWORD *)v437 + 6);
        *(_QWORD *)(v436 + 56) = *((_QWORD *)v437 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      v477 = *(int *)(v55 + 28);
      v478 = (void *)(v436 + v477);
      v479 = &v437[v477];
      v480 = sub_224F67874();
      v481 = *(_QWORD *)(v480 - 8);
      v482 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v481 + 48);
      v483 = v482(v478, 1, v480);
      v484 = v482(v479, 1, v480);
      if (v483)
      {
        if (!v484)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v481 + 16))(v478, v479, v480);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v481 + 56))(v478, 0, 1, v480);
LABEL_311:
          v4 = v499;
          a3 = v500;
          v486 = *(int *)(v55 + 32);
          v487 = (_QWORD *)(v436 + v486);
          v488 = &v437[v486];
          *v487 = *v488;
          v487[1] = v488[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_198;
        }
      }
      else
      {
        if (!v484)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v481 + 24))(v478, v479, v480);
          goto LABEL_311;
        }
        (*(void (**)(void *, uint64_t))(v481 + 8))(v478, v480);
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v478, v479, *(_QWORD *)(*(_QWORD *)(v485 - 8) + 64));
      goto LABEL_311;
    }
    if (v270)
    {
      sub_224DDEAA0((uint64_t)v259, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v271 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_180;
    }
    *v259 = *v260;
    *((_QWORD *)v259 + 1) = *((_QWORD *)v260 + 1);
    *((_WORD *)v259 + 8) = *((_WORD *)v260 + 8);
    *((_WORD *)v259 + 9) = *((_WORD *)v260 + 9);
    v328 = (__int128 *)(v259 + 24);
    v329 = (__int128 *)(v260 + 24);
    v330 = *((_QWORD *)v260 + 7);
    v493 = v162;
    if (*((_QWORD *)v259 + 7) == 1)
    {
      if (v330 == 1)
      {
        v331 = *v329;
        v332 = *(_OWORD *)(v260 + 40);
        *((_QWORD *)v259 + 7) = *((_QWORD *)v260 + 7);
        *v328 = v331;
        *(_OWORD *)(v259 + 40) = v332;
      }
      else
      {
        v259[24] = v260[24];
        v259[25] = v260[25];
        v259[26] = v260[26];
        v373 = *(_OWORD *)(v260 + 28);
        *((_DWORD *)v259 + 11) = *((_DWORD *)v260 + 11);
        *(_OWORD *)(v259 + 28) = v373;
        *((_QWORD *)v259 + 6) = *((_QWORD *)v260 + 6);
        *((_QWORD *)v259 + 7) = *((_QWORD *)v260 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v330 == 1)
    {
      sub_224E2C9F4((uint64_t)(v259 + 24));
      v370 = *((_QWORD *)v260 + 7);
      v371 = *(_OWORD *)(v260 + 40);
      *v328 = *v329;
      *(_OWORD *)(v259 + 40) = v371;
      *((_QWORD *)v259 + 7) = v370;
    }
    else
    {
      v259[24] = v260[24];
      v259[25] = v260[25];
      v259[26] = v260[26];
      *((_DWORD *)v259 + 7) = *((_DWORD *)v260 + 7);
      *((_WORD *)v259 + 16) = *((_WORD *)v260 + 16);
      *((_WORD *)v259 + 17) = *((_WORD *)v260 + 17);
      *((_WORD *)v259 + 18) = *((_WORD *)v260 + 18);
      *((_WORD *)v259 + 19) = *((_WORD *)v260 + 19);
      *((_WORD *)v259 + 20) = *((_WORD *)v260 + 20);
      *((_WORD *)v259 + 21) = *((_WORD *)v260 + 21);
      *((_WORD *)v259 + 22) = *((_WORD *)v260 + 22);
      *((_WORD *)v259 + 23) = *((_WORD *)v260 + 23);
      *((_QWORD *)v259 + 6) = *((_QWORD *)v260 + 6);
      *((_QWORD *)v259 + 7) = *((_QWORD *)v260 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v423 = *(int *)(v55 + 28);
    v424 = &v259[v423];
    v425 = &v260[v423];
    v426 = sub_224F67874();
    v427 = *(_QWORD *)(v426 - 8);
    v428 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v427 + 48);
    v429 = v428(v424, 1, v426);
    v430 = v428(v425, 1, v426);
    if (v429)
    {
      v162 = v493;
      if (!v430)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v427 + 16))(v424, v425, v426);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v427 + 56))(v424, 0, 1, v426);
LABEL_275:
        v120 = __dstb;
        v432 = *(int *)(v55 + 32);
        v433 = &v259[v432];
        v434 = &v260[v432];
        *v433 = *v434;
        v433[1] = v434[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v4 = v499;
        a3 = v500;
        goto LABEL_276;
      }
    }
    else
    {
      v162 = v493;
      if (!v430)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v427 + 24))(v424, v425, v426);
        goto LABEL_275;
      }
      (*(void (**)(_BYTE *, uint64_t))(v427 + 8))(v424, v426);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v424, v425, *(_QWORD *)(*(_QWORD *)(v431 - 8) + 64));
    goto LABEL_275;
  }
  if (v262)
  {
    v263 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_169:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v263);
    v265 = *(_QWORD *)(*(_QWORD *)(v264 - 8) + 64);
    v266 = v259;
    v267 = v260;
LABEL_170:
    memcpy(v266, v267, v265);
    goto LABEL_198;
  }
  if (v120((uint64_t)v260, 1, v55))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v268 - 8) + 64));
  }
  else
  {
    *v259 = *v260;
    v272 = *((_QWORD *)v260 + 1);
    *((_DWORD *)v259 + 4) = *((_DWORD *)v260 + 4);
    *((_QWORD *)v259 + 1) = v272;
    if (*((_QWORD *)v260 + 7) == 1)
    {
      v273 = *(_OWORD *)(v260 + 24);
      v274 = *(_OWORD *)(v260 + 40);
      *((_QWORD *)v259 + 7) = *((_QWORD *)v260 + 7);
      *(_OWORD *)(v259 + 24) = v273;
      *(_OWORD *)(v259 + 40) = v274;
    }
    else
    {
      v259[24] = v260[24];
      v259[25] = v260[25];
      v259[26] = v260[26];
      v276 = *(_OWORD *)(v260 + 28);
      *((_DWORD *)v259 + 11) = *((_DWORD *)v260 + 11);
      *(_OWORD *)(v259 + 28) = v276;
      *((_QWORD *)v259 + 6) = *((_QWORD *)v260 + 6);
      *((_QWORD *)v259 + 7) = *((_QWORD *)v260 + 7);
      swift_bridgeObjectRetain();
    }
    v277 = *(int *)(v55 + 28);
    v278 = &v259[v277];
    v279 = &v260[v277];
    v280 = sub_224F67874();
    v281 = *(_QWORD *)(v280 - 8);
    v282 = v162;
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v281 + 48))(v279, 1, v280))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v278, v279, *(_QWORD *)(*(_QWORD *)(v283 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v281 + 16))(v278, v279, v280);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v281 + 56))(v278, 0, 1, v280);
    }
    v120 = __dstb;
    v287 = *(int *)(v55 + 32);
    v288 = &v259[v287];
    v289 = &v260[v287];
    *v288 = *v289;
    v288[1] = v289[1];
    v4 = v499;
    v290 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__src[7];
    swift_bridgeObjectRetain();
    v290(v259, 0, 1, v55);
    a3 = v500;
    v162 = v282;
  }
  v291 = *(int *)(v162 + 20);
  v292 = &v259[v291];
  v293 = &v260[v291];
  if (v120((uint64_t)v293, 1, v55))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v292, v293, *(_QWORD *)(*(_QWORD *)(v294 - 8) + 64));
  }
  else
  {
    *v292 = *v293;
    v295 = *((_QWORD *)v293 + 1);
    *((_DWORD *)v292 + 4) = *((_DWORD *)v293 + 4);
    *((_QWORD *)v292 + 1) = v295;
    if (*((_QWORD *)v293 + 7) == 1)
    {
      v296 = *(_OWORD *)(v293 + 24);
      v297 = *(_OWORD *)(v293 + 40);
      *((_QWORD *)v292 + 7) = *((_QWORD *)v293 + 7);
      *(_OWORD *)(v292 + 24) = v296;
      *(_OWORD *)(v292 + 40) = v297;
    }
    else
    {
      v292[24] = v293[24];
      v292[25] = v293[25];
      v292[26] = v293[26];
      v298 = *(_OWORD *)(v293 + 28);
      *((_DWORD *)v292 + 11) = *((_DWORD *)v293 + 11);
      *(_OWORD *)(v292 + 28) = v298;
      *((_QWORD *)v292 + 6) = *((_QWORD *)v293 + 6);
      *((_QWORD *)v292 + 7) = *((_QWORD *)v293 + 7);
      swift_bridgeObjectRetain();
    }
    v299 = *(int *)(v55 + 28);
    v300 = &v292[v299];
    v301 = &v293[v299];
    v302 = sub_224F67874();
    v303 = *(_QWORD *)(v302 - 8);
    v491 = v162;
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v303 + 48))(v301, 1, v302))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v300, v301, *(_QWORD *)(*(_QWORD *)(v304 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v303 + 16))(v300, v301, v302);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v300, 0, 1, v302);
    }
    a3 = v500;
    v305 = *(int *)(v55 + 32);
    v306 = &v292[v305];
    v307 = &v293[v305];
    *v306 = *v307;
    v306[1] = v307[1];
    v308 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__src[7];
    swift_bridgeObjectRetain();
    v308(v292, 0, 1, v55);
    v4 = v499;
    v162 = v491;
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v495 + 56))(v259, 0, 1, v162);
LABEL_198:
  v309 = a3[19];
  v310 = (uint64_t *)((char *)v5 + v309);
  v311 = (_QWORD *)((char *)v4 + v309);
  *v310 = *v311;
  v310[1] = v311[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v312 = a3[20];
  v313 = (uint64_t *)((char *)v5 + v312);
  v314 = (_QWORD *)((char *)v4 + v312);
  *v313 = *v314;
  v313[1] = v314[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v315 = a3[21];
  v316 = (uint64_t *)((char *)v5 + v315);
  v317 = (_QWORD *)((char *)v4 + v315);
  *v316 = *v317;
  v316[1] = v317[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t initializeWithTake for ModelsDSTU2.Condition(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unsigned int (**v17)(_OWORD *, uint64_t, uint64_t);
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int (*v30)(_QWORD, _QWORD, _QWORD);
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  unsigned int (*v65)(_QWORD, _QWORD, _QWORD);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  unsigned int (*v114)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v115)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v116)(_QWORD, _QWORD, _QWORD);
  void (**v117)(void *, void *, _QWORD);
  _BYTE *v118;
  _BYTE *v119;
  void *v120;
  void *v121;
  void *v122;
  void *__src;
  _QWORD *__srca;
  void *v125;
  void *v126;
  _BYTE *v127;
  char *__dst;
  _QWORD *__dsta;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = type metadata accessor for Reference();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    v13 = *(int *)(v9 + 24);
    v14 = (_OWORD *)((char *)v7 + v13);
    v15 = (_OWORD *)((char *)v8 + v13);
    v16 = type metadata accessor for Identifier();
    v17 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v16 - 8);
    if (v17[6](v15, 1, v16))
    {
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v19 = v15[1];
      *v14 = *v15;
      v14[1] = v19;
      *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
      v20 = *(int *)(v16 + 24);
      v125 = v17;
      __dst = (char *)v14 + v20;
      v21 = (char *)v15 + v20;
      v22 = sub_224F675D4();
      v117 = *(void (***)(void *, void *, _QWORD))(v22 - 8);
      __src = v21;
      v23 = v21;
      v24 = v22;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v117[6])(v23, 1, v22))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v117[4](__dst, __src, v24);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v117[7])(__dst, 0, 1, v24);
      }
      *(_OWORD *)((char *)v14 + *(int *)(v16 + 28)) = *(_OWORD *)((char *)v15 + *(int *)(v16 + 28));
      (*((void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))v125 + 7))(v14, 0, 1, v16);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v26 = a3[7];
  v27 = (_BYTE *)(a1 + v26);
  v28 = (_BYTE *)(a2 + v26);
  v29 = type metadata accessor for FHIRDateTime();
  __dsta = *(_QWORD **)(v29 - 8);
  v30 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dsta[6];
  v126 = v30;
  if (v30(v28, 1, v29))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    *v27 = *v28;
    *((_QWORD *)v27 + 1) = *((_QWORD *)v28 + 1);
    *((_DWORD *)v27 + 4) = *((_DWORD *)v28 + 4);
    *(_OWORD *)(v27 + 24) = *(_OWORD *)(v28 + 24);
    *(_OWORD *)(v27 + 40) = *(_OWORD *)(v28 + 40);
    *((_QWORD *)v27 + 7) = *((_QWORD *)v28 + 7);
    v32 = *(int *)(v29 + 28);
    v33 = &v27[v32];
    v34 = &v28[v32];
    v35 = sub_224F67874();
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v36 + 32))(v33, v34, v35);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    *(_OWORD *)&v27[*(int *)(v29 + 32)] = *(_OWORD *)&v28[*(int *)(v29 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dsta[7])(v27, 0, 1, v29);
    v30 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v126;
  }
  v38 = a3[8];
  v39 = a3[9];
  v40 = a1 + v38;
  v41 = a2 + v38;
  *(_OWORD *)v40 = *(_OWORD *)v41;
  *(_QWORD *)(v40 + 16) = *(_QWORD *)(v41 + 16);
  v42 = a1 + v39;
  v43 = a2 + v39;
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *(_QWORD *)(v42 + 16) = *(_QWORD *)(v43 + 16);
  v44 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v44) = *(_OWORD *)(a2 + v44);
  v45 = a3[12];
  v46 = a3[13];
  v47 = a1 + v45;
  v48 = (__int128 *)(a2 + v45);
  v49 = *v48;
  *(_QWORD *)(v47 + 16) = *((_QWORD *)v48 + 2);
  v50 = *(_QWORD *)(a2 + v46);
  *(_OWORD *)v47 = v49;
  *(_QWORD *)(a1 + v46) = v50;
  v51 = a3[14];
  v52 = (_BYTE *)(a1 + v51);
  v53 = (_BYTE *)(a2 + v51);
  if (v30(a2 + v51, 1, v29))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    *v52 = *v53;
    *((_QWORD *)v52 + 1) = *((_QWORD *)v53 + 1);
    *((_DWORD *)v52 + 4) = *((_DWORD *)v53 + 4);
    *(_OWORD *)(v52 + 24) = *(_OWORD *)(v53 + 24);
    *(_OWORD *)(v52 + 40) = *(_OWORD *)(v53 + 40);
    *((_QWORD *)v52 + 7) = *((_QWORD *)v53 + 7);
    v55 = *(int *)(v29 + 28);
    v56 = &v52[v55];
    v57 = &v53[v55];
    v58 = sub_224F67874();
    v59 = *(_QWORD *)(v58 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 32))(v56, v57, v58);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
    }
    *(_OWORD *)&v52[*(int *)(v29 + 32)] = *(_OWORD *)&v53[*(int *)(v29 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dsta[7])(v52, 0, 1, v29);
    v30 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v126;
  }
  v61 = a3[15];
  v62 = (_BYTE *)(a1 + v61);
  v63 = (_BYTE *)(a2 + v61);
  v64 = type metadata accessor for Period();
  __srca = *(_QWORD **)(v64 - 8);
  v65 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__srca[6];
  if (v65(v63, 1, v64))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    if (v30(v63, 1, v29))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      *v62 = *v63;
      *((_QWORD *)v62 + 1) = *((_QWORD *)v63 + 1);
      *((_DWORD *)v62 + 4) = *((_DWORD *)v63 + 4);
      *(_OWORD *)(v62 + 24) = *(_OWORD *)(v63 + 24);
      *(_OWORD *)(v62 + 40) = *(_OWORD *)(v63 + 40);
      *((_QWORD *)v62 + 7) = *((_QWORD *)v63 + 7);
      v68 = *(int *)(v29 + 28);
      v114 = v65;
      v118 = &v62[v68];
      v69 = &v63[v68];
      v70 = sub_224F67874();
      v71 = *(_QWORD *)(v70 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v118, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v71 + 32))(v118, v69, v70);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v118, 0, 1, v70);
      }
      *(_OWORD *)&v62[*(int *)(v29 + 32)] = *(_OWORD *)&v63[*(int *)(v29 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dsta[7])(v62, 0, 1, v29);
      v30 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v126;
      v65 = v114;
    }
    v73 = *(int *)(v64 + 20);
    v74 = &v62[v73];
    v75 = &v63[v73];
    if (v30(v75, 1, v29))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    }
    else
    {
      *v74 = *v75;
      *((_QWORD *)v74 + 1) = *((_QWORD *)v75 + 1);
      *((_DWORD *)v74 + 4) = *((_DWORD *)v75 + 4);
      *(_OWORD *)(v74 + 24) = *(_OWORD *)(v75 + 24);
      *(_OWORD *)(v74 + 40) = *(_OWORD *)(v75 + 40);
      *((_QWORD *)v74 + 7) = *((_QWORD *)v75 + 7);
      v77 = *(int *)(v29 + 28);
      v115 = v65;
      v119 = &v74[v77];
      v78 = &v75[v77];
      v79 = sub_224F67874();
      v113 = *(_QWORD *)(v79 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v113 + 48))(v78, 1, v79))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v119, v78, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v113 + 32))(v119, v78, v79);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v119, 0, 1, v79);
      }
      v65 = v115;
      *(_OWORD *)&v74[*(int *)(v29 + 32)] = *(_OWORD *)&v75[*(int *)(v29 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dsta[7])(v74, 0, 1, v29);
      v30 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v126;
    }
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__srca[7])(v62, 0, 1, v64);
  }
  v81 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  v82 = (_BYTE *)(a1 + v81);
  v83 = (_BYTE *)(a2 + v81);
  if (v30(a2 + v81, 1, v29))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
  }
  else
  {
    v116 = v65;
    v120 = (void *)v64;
    *v82 = *v83;
    *((_QWORD *)v82 + 1) = *((_QWORD *)v83 + 1);
    *((_DWORD *)v82 + 4) = *((_DWORD *)v83 + 4);
    *(_OWORD *)(v82 + 24) = *(_OWORD *)(v83 + 24);
    *(_OWORD *)(v82 + 40) = *(_OWORD *)(v83 + 40);
    *((_QWORD *)v82 + 7) = *((_QWORD *)v83 + 7);
    v85 = *(int *)(v29 + 28);
    v86 = &v82[v85];
    v87 = &v83[v85];
    v88 = sub_224F67874();
    v89 = *(_QWORD *)(v88 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v89 + 32))(v86, v87, v88);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
    }
    v65 = v116;
    v64 = (uint64_t)v120;
    *(_OWORD *)&v82[*(int *)(v29 + 32)] = *(_OWORD *)&v83[*(int *)(v29 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dsta[7])(v82, 0, 1, v29);
    v30 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v126;
  }
  v91 = a3[18];
  v92 = (_BYTE *)(a1 + v91);
  v93 = (_BYTE *)(a2 + v91);
  if (v65(a2 + v91, 1, v64))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
  }
  else
  {
    if (v30(v93, 1, v29))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    }
    else
    {
      v121 = (void *)v64;
      *v92 = *v93;
      *((_QWORD *)v92 + 1) = *((_QWORD *)v93 + 1);
      *((_DWORD *)v92 + 4) = *((_DWORD *)v93 + 4);
      *(_OWORD *)(v92 + 24) = *(_OWORD *)(v93 + 24);
      *(_OWORD *)(v92 + 40) = *(_OWORD *)(v93 + 40);
      *((_QWORD *)v92 + 7) = *((_QWORD *)v93 + 7);
      v96 = *(int *)(v29 + 28);
      v97 = &v92[v96];
      v98 = &v93[v96];
      v99 = sub_224F67874();
      v100 = *(_QWORD *)(v99 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v100 + 32))(v97, v98, v99);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
      }
      v64 = (uint64_t)v121;
      *(_OWORD *)&v92[*(int *)(v29 + 32)] = *(_OWORD *)&v93[*(int *)(v29 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dsta[7])(v92, 0, 1, v29);
      v30 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v126;
    }
    v102 = *(int *)(v64 + 20);
    v103 = &v92[v102];
    v104 = &v93[v102];
    if (v30(v104, 1, v29))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
    }
    else
    {
      v122 = (void *)v64;
      *v103 = *v104;
      *((_QWORD *)v103 + 1) = *((_QWORD *)v104 + 1);
      *((_DWORD *)v103 + 4) = *((_DWORD *)v104 + 4);
      *(_OWORD *)(v103 + 24) = *(_OWORD *)(v104 + 24);
      *(_OWORD *)(v103 + 40) = *(_OWORD *)(v104 + 40);
      *((_QWORD *)v103 + 7) = *((_QWORD *)v104 + 7);
      v106 = *(int *)(v29 + 28);
      v127 = &v103[v106];
      v107 = &v104[v106];
      v108 = sub_224F67874();
      v109 = *(_QWORD *)(v108 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v127, v107, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v109 + 32))(v127, v107, v108);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v127, 0, 1, v108);
      }
      *(_OWORD *)&v103[*(int *)(v29 + 32)] = *(_OWORD *)&v104[*(int *)(v29 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dsta[7])(v103, 0, 1, v29);
      v64 = (uint64_t)v122;
    }
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__srca[7])(v92, 0, 1, v64);
  }
  v111 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(_OWORD *)(a1 + v111) = *(_OWORD *)(a2 + v111);
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  return a1;
}

_QWORD *assignWithTake for ModelsDSTU2.Condition(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  size_t v19;
  void *v20;
  const void *v21;
  __int128 v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  __int128 v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(void *, uint64_t, uint64_t);
  int v77;
  uint64_t v78;
  size_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  int v114;
  int v115;
  uint64_t (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  void *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  void *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(void *, uint64_t, uint64_t);
  int v132;
  uint64_t v133;
  size_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t (*v146)(char *, uint64_t, uint64_t);
  int v147;
  int v148;
  unint64_t *v149;
  uint64_t (*v150)();
  uint64_t (*v151)(uint64_t, uint64_t);
  uint64_t (*v152)();
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  uint64_t (*v157)(uint64_t, uint64_t);
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t (*v166)(uint64_t, uint64_t, uint64_t);
  uint64_t v167;
  _BYTE *v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  _BYTE *v175;
  uint64_t v176;
  uint64_t v177;
  _BYTE *v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  int v191;
  int v192;
  uint64_t (*v193)(uint64_t, uint64_t);
  uint64_t v194;
  uint64_t (*v195)(char *, uint64_t, uint64_t);
  uint64_t (*v196)(uint64_t, uint64_t, uint64_t);
  uint64_t v197;
  void *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  void *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t (*v210)(void *, uint64_t, uint64_t);
  int v211;
  uint64_t v212;
  size_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  _QWORD *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _BYTE *v224;
  _BYTE *v225;
  int v226;
  int v227;
  uint64_t (*v228)(uint64_t, uint64_t);
  uint64_t v229;
  size_t v230;
  void *v231;
  const void *v232;
  uint64_t v233;
  int v234;
  int v235;
  uint64_t (*v236)(uint64_t, uint64_t);
  uint64_t v237;
  uint64_t v238;
  _BYTE *v239;
  _BYTE *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t (*v245)(uint64_t, uint64_t, uint64_t);
  uint64_t v246;
  _BYTE *v247;
  _BYTE *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _BYTE *v253;
  _BYTE *v254;
  uint64_t v255;
  uint64_t v256;
  _BYTE *v257;
  _BYTE *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v278;
  __int128 v279;
  uint64_t v280;
  void *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t (*v285)(void *, uint64_t, uint64_t);
  int v286;
  uint64_t v287;
  size_t v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  _BYTE *v292;
  _BYTE *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t (*v296)(_BYTE *, uint64_t, uint64_t);
  int v297;
  uint64_t v298;
  size_t v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  _BYTE *v303;
  _BYTE *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t (*v307)(_BYTE *, uint64_t, uint64_t);
  int v308;
  uint64_t v309;
  size_t v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  int v325;
  uint64_t (*v326)(uint64_t, uint64_t, uint64_t);
  uint64_t v327;
  _BYTE *v328;
  _BYTE *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  __int128 v334;
  uint64_t v335;
  _BYTE *v336;
  _BYTE *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t (*v340)(_BYTE *, uint64_t, uint64_t);
  int v341;
  uint64_t v342;
  size_t v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  _BYTE *v353;
  int v354;
  int v355;
  uint64_t (*v356)(uint64_t, uint64_t);
  uint64_t v357;
  uint64_t v358;
  void *v359;
  _BYTE *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  __int128 v365;
  uint64_t v366;
  void *v367;
  _BYTE *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t (*v371)(void *, uint64_t, uint64_t);
  int v372;
  uint64_t v373;
  size_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  _QWORD *v383;
  uint64_t *v384;
  uint64_t v385;
  uint64_t v386;
  void *v387;
  void *v388;
  void *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  void *v401;
  void *v402;
  uint64_t v403;
  void *v404;
  _QWORD *v405;
  uint64_t (*v406)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v407)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v408)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v409)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v410)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v411)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v412)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v413)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v414)(uint64_t, uint64_t, uint64_t);
  uint64_t (*__src)(char *, uint64_t, uint64_t);
  void *__srca;
  void *__srcb;
  char *v418;
  _QWORD *v419;
  int *v420;

  v4 = a2;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a1 + 2;
  v8 = v4[2];
  if (a1[2] == 1)
    goto LABEL_4;
  if (v8 == 1)
  {
    sub_224E2C98C((uint64_t)(a1 + 2));
    v8 = v4[2];
LABEL_4:
    *v7 = v8;
    goto LABEL_6;
  }
  *v7 = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  v9 = a3[6];
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)v4 + v9);
  v12 = type metadata accessor for Reference();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  v420 = a3;
  if (!v15)
  {
    if (v16)
    {
      sub_224DDEAA0((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_11;
    }
    v29 = v11[1];
    *v10 = *v11;
    v10[1] = v29;
    swift_bridgeObjectRelease();
    v30 = v11[3];
    v10[2] = v11[2];
    v10[3] = v30;
    swift_bridgeObjectRelease();
    v31 = *(int *)(v12 + 24);
    v32 = (uint64_t)v10 + v31;
    v33 = (_QWORD *)((char *)v11 + v31);
    v34 = type metadata accessor for Identifier();
    v35 = *(_QWORD *)(v34 - 8);
    v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
    v37 = v36(v32, 1, v34);
    v38 = v36((uint64_t)v33, 1, v34);
    if (v37)
    {
      if (!v38)
      {
        v47 = *((_OWORD *)v33 + 1);
        *(_OWORD *)v32 = *(_OWORD *)v33;
        *(_OWORD *)(v32 + 16) = v47;
        *(_QWORD *)(v32 + 32) = v33[4];
        v48 = *(int *)(v34 + 24);
        v49 = (void *)(v32 + v48);
        v50 = (char *)v33 + v48;
        v51 = sub_224F675D4();
        v52 = *(_QWORD *)(v51 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v52 + 32))(v49, v50, v51);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
        }
        a3 = v420;
        *(_OWORD *)(v32 + *(int *)(v34 + 28)) = *(_OWORD *)((char *)v33 + *(int *)(v34 + 28));
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
        goto LABEL_28;
      }
      v39 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_22:
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v39);
      v19 = *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64);
      v20 = (void *)v32;
      v21 = v33;
      goto LABEL_12;
    }
    if (v38)
    {
      sub_224DDEAA0(v32, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      v39 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_22;
    }
    v82 = v33[1];
    *(_QWORD *)v32 = *v33;
    *(_QWORD *)(v32 + 8) = v82;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v32 + 24) != 1)
    {
      v83 = v33[3];
      if (v83 != 1)
      {
        *(_QWORD *)(v32 + 16) = v33[2];
        *(_QWORD *)(v32 + 24) = v83;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v32 + 32) = v33[4];
        swift_bridgeObjectRelease();
LABEL_187:
        v280 = *(int *)(v34 + 24);
        v281 = (void *)(v32 + v280);
        v282 = (char *)v33 + v280;
        v283 = sub_224F675D4();
        v284 = *(_QWORD *)(v283 - 8);
        v285 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v284 + 48);
        __srca = v281;
        LODWORD(v281) = v285(v281, 1, v283);
        v286 = v285(v282, 1, v283);
        if ((_DWORD)v281)
        {
          if (!v286)
          {
            (*(void (**)(void *, char *, uint64_t))(v284 + 32))(__srca, v282, v283);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v284 + 56))(__srca, 0, 1, v283);
            goto LABEL_211;
          }
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v288 = *(_QWORD *)(*(_QWORD *)(v287 - 8) + 64);
          v289 = __srca;
        }
        else
        {
          if (!v286)
          {
            (*(void (**)(void *, char *, uint64_t))(v284 + 40))(__srca, v282, v283);
            goto LABEL_211;
          }
          (*(void (**)(void *, uint64_t))(v284 + 8))(__srca, v283);
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v288 = *(_QWORD *)(*(_QWORD *)(v290 - 8) + 64);
          v289 = __srca;
        }
        memcpy(v289, v282, v288);
LABEL_211:
        v313 = *(int *)(v34 + 28);
        v314 = (_QWORD *)(v32 + v313);
        v315 = (_QWORD *)((char *)v33 + v313);
        v317 = *v315;
        v316 = v315[1];
        *v314 = v317;
        v314[1] = v316;
        swift_bridgeObjectRelease();
        a3 = v420;
        goto LABEL_28;
      }
      sub_224E2C9C0(v32 + 16);
    }
    *(_OWORD *)(v32 + 16) = *((_OWORD *)v33 + 1);
    *(_QWORD *)(v32 + 32) = v33[4];
    goto LABEL_187;
  }
  if (v16)
  {
    v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_11:
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v17);
    v19 = *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64);
    v20 = v10;
    v21 = v11;
LABEL_12:
    memcpy(v20, v21, v19);
    goto LABEL_28;
  }
  v22 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v22;
  v23 = *(int *)(v12 + 24);
  v24 = (_OWORD *)((char *)v10 + v23);
  v25 = (_OWORD *)((char *)v11 + v23);
  v26 = type metadata accessor for Identifier();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v400 = v27;
    v405 = v4;
    v40 = v25[1];
    *v24 = *v25;
    v24[1] = v40;
    *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
    v41 = *(int *)(v26 + 24);
    v418 = (char *)v24 + v41;
    v42 = (char *)v25 + v41;
    v43 = sub_224F675D4();
    v44 = *(_QWORD *)(v43 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v418, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v418, v42, v43);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v418, 0, 1, v43);
    }
    a3 = v420;
    *(_OWORD *)((char *)v24 + *(int *)(v26 + 28)) = *(_OWORD *)((char *)v25 + *(int *)(v26 + 28));
    v4 = v405;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v400 + 56))(v24, 0, 1, v26);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_28:
  v54 = a3[7];
  v55 = (uint64_t)a1 + v54;
  v56 = (char *)v4 + v54;
  v57 = type metadata accessor for FHIRDateTime();
  v419 = *(_QWORD **)(v57 - 8);
  v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v419[6];
  v59 = v58(v55, 1, v57);
  v60 = v58((uint64_t)v56, 1, v57);
  if (!v59)
  {
    if (v60)
    {
      sub_224DDEAA0(v55, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v61 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_33;
    }
    *(_BYTE *)v55 = *v56;
    *(_QWORD *)(v55 + 8) = *((_QWORD *)v56 + 1);
    *(_DWORD *)(v55 + 16) = *((_DWORD *)v56 + 4);
    v406 = v58;
    if (*(_QWORD *)(v55 + 56) != 1)
    {
      v69 = *((_QWORD *)v56 + 7);
      if (v69 != 1)
      {
        *(_BYTE *)(v55 + 24) = v56[24];
        *(_WORD *)(v55 + 25) = *(_WORD *)(v56 + 25);
        *(_DWORD *)(v55 + 28) = *((_DWORD *)v56 + 7);
        *(_OWORD *)(v55 + 32) = *((_OWORD *)v56 + 2);
        *(_QWORD *)(v55 + 48) = *((_QWORD *)v56 + 6);
        *(_QWORD *)(v55 + 56) = v69;
        swift_bridgeObjectRelease();
LABEL_43:
        v71 = *(int *)(v57 + 28);
        v72 = (void *)(v55 + v71);
        v73 = &v56[v71];
        v74 = sub_224F67874();
        v75 = *(_QWORD *)(v74 - 8);
        v76 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v75 + 48);
        v401 = v72;
        LODWORD(v72) = v76(v72, 1, v74);
        v77 = v76(v73, 1, v74);
        if ((_DWORD)v72)
        {
          if (!v77)
          {
            (*(void (**)(void *, char *, uint64_t))(v75 + 32))(v401, v73, v74);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v401, 0, 1, v74);
            goto LABEL_55;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v79 = *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64);
          v80 = v401;
        }
        else
        {
          if (!v77)
          {
            (*(void (**)(void *, char *, uint64_t))(v75 + 40))(v401, v73, v74);
            goto LABEL_55;
          }
          (*(void (**)(void *, uint64_t))(v75 + 8))(v401, v74);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v79 = *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64);
          v80 = v401;
        }
        memcpy(v80, v73, v79);
LABEL_55:
        a3 = v420;
        v58 = v406;
        v84 = *(int *)(v57 + 32);
        v85 = (_QWORD *)(v55 + v84);
        v86 = &v56[v84];
        v88 = *(_QWORD *)v86;
        v87 = *((_QWORD *)v86 + 1);
        *v85 = v88;
        v85[1] = v87;
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
      sub_224E2C9F4(v55 + 24);
    }
    v70 = *(_OWORD *)(v56 + 40);
    *(_OWORD *)(v55 + 24) = *(_OWORD *)(v56 + 24);
    *(_OWORD *)(v55 + 40) = v70;
    *(_QWORD *)(v55 + 56) = *((_QWORD *)v56 + 7);
    goto LABEL_43;
  }
  if (v60)
  {
    v61 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_33:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v61);
    memcpy((void *)v55, v56, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_56;
  }
  *(_BYTE *)v55 = *v56;
  *(_QWORD *)(v55 + 8) = *((_QWORD *)v56 + 1);
  *(_DWORD *)(v55 + 16) = *((_DWORD *)v56 + 4);
  *(_OWORD *)(v55 + 24) = *(_OWORD *)(v56 + 24);
  *(_OWORD *)(v55 + 40) = *(_OWORD *)(v56 + 40);
  *(_QWORD *)(v55 + 56) = *((_QWORD *)v56 + 7);
  v63 = *(int *)(v57 + 28);
  v64 = (void *)(v55 + v63);
  v65 = &v56[v63];
  v66 = sub_224F67874();
  v67 = *(_QWORD *)(v66 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v67 + 32))(v64, v65, v66);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
  }
  *(_OWORD *)(v55 + *(int *)(v57 + 32)) = *(_OWORD *)&v56[*(int *)(v57 + 32)];
  a3 = v420;
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v419[7])(v55, 0, 1, v57);
LABEL_56:
  v89 = a3[8];
  v90 = (_QWORD *)((char *)a1 + v89);
  v91 = (char *)v4 + v89;
  v92 = *(_QWORD *)((char *)v4 + v89 + 8);
  *v90 = *(_QWORD *)((char *)v4 + v89);
  v90[1] = v92;
  swift_bridgeObjectRelease();
  v90[2] = *((_QWORD *)v91 + 2);
  swift_bridgeObjectRelease();
  v93 = a3[9];
  v94 = (uint64_t)a1 + v93;
  v95 = (char *)v4 + v93;
  if (*(_QWORD *)((char *)a1 + v93 + 8) == 1)
  {
LABEL_59:
    *(_OWORD *)v94 = *(_OWORD *)v95;
    *(_QWORD *)(v94 + 16) = *((_QWORD *)v95 + 2);
    goto LABEL_61;
  }
  v96 = *((_QWORD *)v95 + 1);
  if (v96 == 1)
  {
    sub_224E2C9C0(v94);
    goto LABEL_59;
  }
  *(_QWORD *)v94 = *(_QWORD *)v95;
  *(_QWORD *)(v94 + 8) = v96;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v94 + 16) = *((_QWORD *)v95 + 2);
  swift_bridgeObjectRelease();
LABEL_61:
  v97 = a3[10];
  v98 = (_QWORD *)((char *)a1 + v97);
  v99 = (_QWORD *)((char *)v4 + v97);
  v101 = *v99;
  v100 = v99[1];
  *v98 = v101;
  v98[1] = v100;
  swift_bridgeObjectRelease();
  v102 = a3[11];
  v103 = (_QWORD *)((char *)a1 + v102);
  v104 = (_QWORD *)((char *)v4 + v102);
  v106 = *v104;
  v105 = v104[1];
  *v103 = v106;
  v103[1] = v105;
  swift_bridgeObjectRelease();
  v107 = a3[12];
  v108 = (uint64_t)a1 + v107;
  v109 = (char *)v4 + v107;
  if (*(_QWORD *)((char *)a1 + v107 + 8) == 1)
  {
LABEL_64:
    *(_OWORD *)v108 = *(_OWORD *)v109;
    *(_QWORD *)(v108 + 16) = *((_QWORD *)v109 + 2);
    goto LABEL_66;
  }
  v110 = *((_QWORD *)v109 + 1);
  if (v110 == 1)
  {
    sub_224E2C9C0(v108);
    goto LABEL_64;
  }
  *(_QWORD *)v108 = *(_QWORD *)v109;
  *(_QWORD *)(v108 + 8) = v110;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v108 + 16) = *((_QWORD *)v109 + 2);
  swift_bridgeObjectRelease();
LABEL_66:
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)v4 + a3[13]);
  swift_bridgeObjectRelease();
  v111 = a3[14];
  v112 = (uint64_t)a1 + v111;
  v113 = (char *)v4 + v111;
  v114 = v58((uint64_t)a1 + v111, 1, v57);
  v115 = v58((uint64_t)v113, 1, v57);
  if (!v114)
  {
    if (v115)
    {
      sub_224DDEAA0(v112, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v116 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_71;
    }
    *(_BYTE *)v112 = *v113;
    *(_QWORD *)(v112 + 8) = *((_QWORD *)v113 + 1);
    *(_DWORD *)(v112 + 16) = *((_DWORD *)v113 + 4);
    v407 = v58;
    if (*(_QWORD *)(v112 + 56) != 1)
    {
      v124 = *((_QWORD *)v113 + 7);
      if (v124 != 1)
      {
        *(_BYTE *)(v112 + 24) = v113[24];
        *(_WORD *)(v112 + 25) = *(_WORD *)(v113 + 25);
        *(_DWORD *)(v112 + 28) = *((_DWORD *)v113 + 7);
        *(_OWORD *)(v112 + 32) = *((_OWORD *)v113 + 2);
        *(_QWORD *)(v112 + 48) = *((_QWORD *)v113 + 6);
        *(_QWORD *)(v112 + 56) = v124;
        swift_bridgeObjectRelease();
LABEL_81:
        v126 = *(int *)(v57 + 28);
        v127 = (void *)(v112 + v126);
        v128 = &v113[v126];
        v129 = sub_224F67874();
        v130 = *(_QWORD *)(v129 - 8);
        v131 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v130 + 48);
        v402 = v127;
        LODWORD(v127) = v131(v127, 1, v129);
        v132 = v131(v128, 1, v129);
        if ((_DWORD)v127)
        {
          if (!v132)
          {
            (*(void (**)(void *, char *, uint64_t))(v130 + 32))(v402, v128, v129);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v402, 0, 1, v129);
            goto LABEL_89;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v134 = *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64);
          v135 = v402;
        }
        else
        {
          if (!v132)
          {
            (*(void (**)(void *, char *, uint64_t))(v130 + 40))(v402, v128, v129);
            goto LABEL_89;
          }
          (*(void (**)(void *, uint64_t))(v130 + 8))(v402, v129);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v134 = *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64);
          v135 = v402;
        }
        memcpy(v135, v128, v134);
LABEL_89:
        a3 = v420;
        v58 = v407;
        v137 = *(int *)(v57 + 32);
        v138 = (_QWORD *)(v112 + v137);
        v139 = &v113[v137];
        v141 = *(_QWORD *)v139;
        v140 = *((_QWORD *)v139 + 1);
        *v138 = v141;
        v138[1] = v140;
        swift_bridgeObjectRelease();
        goto LABEL_90;
      }
      sub_224E2C9F4(v112 + 24);
    }
    v125 = *(_OWORD *)(v113 + 40);
    *(_OWORD *)(v112 + 24) = *(_OWORD *)(v113 + 24);
    *(_OWORD *)(v112 + 40) = v125;
    *(_QWORD *)(v112 + 56) = *((_QWORD *)v113 + 7);
    goto LABEL_81;
  }
  if (v115)
  {
    v116 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_71:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v116);
    memcpy((void *)v112, v113, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    goto LABEL_90;
  }
  *(_BYTE *)v112 = *v113;
  *(_QWORD *)(v112 + 8) = *((_QWORD *)v113 + 1);
  *(_DWORD *)(v112 + 16) = *((_DWORD *)v113 + 4);
  *(_OWORD *)(v112 + 24) = *(_OWORD *)(v113 + 24);
  *(_OWORD *)(v112 + 40) = *(_OWORD *)(v113 + 40);
  *(_QWORD *)(v112 + 56) = *((_QWORD *)v113 + 7);
  v118 = *(int *)(v57 + 28);
  v119 = (void *)(v112 + v118);
  v120 = &v113[v118];
  v121 = sub_224F67874();
  v122 = *(_QWORD *)(v121 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v120, 1, v121))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v122 + 32))(v119, v120, v121);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v122 + 56))(v119, 0, 1, v121);
  }
  *(_OWORD *)(v112 + *(int *)(v57 + 32)) = *(_OWORD *)&v113[*(int *)(v57 + 32)];
  a3 = v420;
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v419[7])(v112, 0, 1, v57);
LABEL_90:
  v142 = a3[15];
  v143 = (char *)a1 + v142;
  v144 = (char *)v4 + v142;
  v145 = type metadata accessor for Period();
  v403 = *(_QWORD *)(v145 - 8);
  v146 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v403 + 48);
  v147 = v146(v143, 1, v145);
  __src = v146;
  v148 = v146(v144, 1, v145);
  if (v147)
  {
    if (v148)
    {
      v149 = &qword_2557E04B8;
      v150 = type metadata accessor for Period;
LABEL_93:
      v151 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_97:
      sub_224DDEA0C(0, v149, (uint64_t (*)(uint64_t))v150, v151);
      memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
      goto LABEL_119;
    }
    if (v58((uint64_t)v144, 1, v57))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
    }
    else
    {
      v158 = v145;
      v408 = v58;
      *v143 = *v144;
      *((_QWORD *)v143 + 1) = *((_QWORD *)v144 + 1);
      *((_DWORD *)v143 + 4) = *((_DWORD *)v144 + 4);
      *(_OWORD *)(v143 + 24) = *(_OWORD *)(v144 + 24);
      *(_OWORD *)(v143 + 40) = *(_OWORD *)(v144 + 40);
      *((_QWORD *)v143 + 7) = *((_QWORD *)v144 + 7);
      v159 = *(int *)(v57 + 28);
      v160 = &v143[v159];
      v161 = &v144[v159];
      v162 = sub_224F67874();
      v163 = *(_QWORD *)(v162 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v163 + 48))(v161, 1, v162))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v163 + 32))(v160, v161, v162);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v160, 0, 1, v162);
      }
      v145 = v158;
      *(_OWORD *)&v143[*(int *)(v57 + 32)] = *(_OWORD *)&v144[*(int *)(v57 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v419[7])(v143, 0, 1, v57);
      a3 = v420;
      v58 = v408;
    }
    v173 = *(int *)(v145 + 20);
    v174 = &v143[v173];
    v175 = &v144[v173];
    if (v58((uint64_t)v175, 1, v57))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
    }
    else
    {
      v391 = v145;
      v409 = v58;
      *v174 = *v175;
      *((_QWORD *)v174 + 1) = *((_QWORD *)v175 + 1);
      *((_DWORD *)v174 + 4) = *((_DWORD *)v175 + 4);
      *(_OWORD *)(v174 + 24) = *(_OWORD *)(v175 + 24);
      *(_OWORD *)(v174 + 40) = *(_OWORD *)(v175 + 40);
      *((_QWORD *)v174 + 7) = *((_QWORD *)v175 + 7);
      v177 = *(int *)(v57 + 28);
      v178 = &v174[v177];
      v179 = &v175[v177];
      v180 = sub_224F67874();
      v181 = *(_QWORD *)(v180 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v181 + 48))(v179, 1, v180))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v178, v179, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v181 + 32))(v178, v179, v180);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v181 + 56))(v178, 0, 1, v180);
      }
      *(_OWORD *)&v174[*(int *)(v57 + 32)] = *(_OWORD *)&v175[*(int *)(v57 + 32)];
      a3 = v420;
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v419[7])(v174, 0, 1, v57);
      v58 = v409;
      v145 = v391;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v403 + 56))(v143, 0, 1, v145);
    goto LABEL_119;
  }
  if (v148)
  {
    v152 = type metadata accessor for Period;
    sub_224DDEAA0((uint64_t)v143, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    v149 = &qword_2557E04B8;
LABEL_96:
    v151 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
    v150 = v152;
    goto LABEL_97;
  }
  v155 = v58((uint64_t)v143, 1, v57);
  v156 = v58((uint64_t)v144, 1, v57);
  if (!v155)
  {
    if (v156)
    {
      sub_224DDEAA0((uint64_t)v143, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v157 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_107;
    }
    v394 = v145;
    *v143 = *v144;
    *((_QWORD *)v143 + 1) = *((_QWORD *)v144 + 1);
    *((_DWORD *)v143 + 4) = *((_DWORD *)v144 + 4);
    v411 = v58;
    if (*((_QWORD *)v143 + 7) != 1)
    {
      v216 = *((_QWORD *)v144 + 7);
      if (v216 != 1)
      {
        v143[24] = v144[24];
        *(_WORD *)(v143 + 25) = *(_WORD *)(v144 + 25);
        *((_DWORD *)v143 + 7) = *((_DWORD *)v144 + 7);
        *((_OWORD *)v143 + 2) = *((_OWORD *)v144 + 2);
        *((_QWORD *)v143 + 6) = *((_QWORD *)v144 + 6);
        *((_QWORD *)v143 + 7) = v216;
        swift_bridgeObjectRelease();
LABEL_194:
        v291 = *(int *)(v57 + 28);
        v292 = &v143[v291];
        v293 = &v144[v291];
        v294 = sub_224F67874();
        v295 = *(_QWORD *)(v294 - 8);
        v296 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v295 + 48);
        v388 = v292;
        LODWORD(v292) = v296(v292, 1, v294);
        v297 = v296(v293, 1, v294);
        if ((_DWORD)v292)
        {
          a3 = v420;
          if (!v297)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v295 + 32))(v388, v293, v294);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v295 + 56))(v388, 0, 1, v294);
            goto LABEL_213;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v299 = *(_QWORD *)(*(_QWORD *)(v298 - 8) + 64);
          v300 = v388;
        }
        else
        {
          a3 = v420;
          if (!v297)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v295 + 40))(v388, v293, v294);
            goto LABEL_213;
          }
          (*(void (**)(void *, uint64_t))(v295 + 8))(v388, v294);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v299 = *(_QWORD *)(*(_QWORD *)(v301 - 8) + 64);
          v300 = v388;
        }
        memcpy(v300, v293, v299);
LABEL_213:
        v318 = *(int *)(v57 + 32);
        v319 = &v143[v318];
        v320 = (uint64_t *)&v144[v318];
        v322 = *v320;
        v321 = v320[1];
        *v319 = v322;
        v319[1] = v321;
        swift_bridgeObjectRelease();
        v58 = v411;
        v145 = v394;
        goto LABEL_214;
      }
      sub_224E2C9F4((uint64_t)(v143 + 24));
    }
    v217 = *(_OWORD *)(v144 + 40);
    *(_OWORD *)(v143 + 24) = *(_OWORD *)(v144 + 24);
    *(_OWORD *)(v143 + 40) = v217;
    *((_QWORD *)v143 + 7) = *((_QWORD *)v144 + 7);
    goto LABEL_194;
  }
  if (v156)
  {
    v157 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_107:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v157);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
    goto LABEL_214;
  }
  v390 = v145;
  v166 = v58;
  *v143 = *v144;
  *((_QWORD *)v143 + 1) = *((_QWORD *)v144 + 1);
  *((_DWORD *)v143 + 4) = *((_DWORD *)v144 + 4);
  *(_OWORD *)(v143 + 24) = *(_OWORD *)(v144 + 24);
  *(_OWORD *)(v143 + 40) = *(_OWORD *)(v144 + 40);
  *((_QWORD *)v143 + 7) = *((_QWORD *)v144 + 7);
  v167 = *(int *)(v57 + 28);
  v168 = &v143[v167];
  v169 = &v144[v167];
  v170 = sub_224F67874();
  v171 = *(_QWORD *)(v170 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v171 + 48))(v169, 1, v170))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v171 + 32))(v168, v169, v170);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v171 + 56))(v168, 0, 1, v170);
  }
  v58 = v166;
  v145 = v390;
  *(_OWORD *)&v143[*(int *)(v57 + 32)] = *(_OWORD *)&v144[*(int *)(v57 + 32)];
  ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v419[7])(v143, 0, 1, v57);
  a3 = v420;
LABEL_214:
  v323 = *(int *)(v145 + 20);
  v143 += v323;
  v144 += v323;
  v324 = v58((uint64_t)v143, 1, v57);
  v325 = v58((uint64_t)v144, 1, v57);
  if (!v324)
  {
    if (v325)
    {
      v152 = type metadata accessor for FHIRDateTime;
      sub_224DDEAA0((uint64_t)v143, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v149 = &qword_2557E02D0;
      goto LABEL_96;
    }
    v399 = v145;
    *v143 = *v144;
    *((_QWORD *)v143 + 1) = *((_QWORD *)v144 + 1);
    *((_DWORD *)v143 + 4) = *((_DWORD *)v144 + 4);
    v414 = v58;
    if (*((_QWORD *)v143 + 7) != 1)
    {
      v333 = *((_QWORD *)v144 + 7);
      if (v333 != 1)
      {
        v143[24] = v144[24];
        *(_WORD *)(v143 + 25) = *(_WORD *)(v144 + 25);
        *((_DWORD *)v143 + 7) = *((_DWORD *)v144 + 7);
        *((_OWORD *)v143 + 2) = *((_OWORD *)v144 + 2);
        *((_QWORD *)v143 + 6) = *((_QWORD *)v144 + 6);
        *((_QWORD *)v143 + 7) = v333;
        swift_bridgeObjectRelease();
LABEL_228:
        v335 = *(int *)(v57 + 28);
        v336 = &v143[v335];
        v337 = &v144[v335];
        v338 = sub_224F67874();
        v339 = *(_QWORD *)(v338 - 8);
        v340 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v339 + 48);
        v389 = v336;
        LODWORD(v336) = v340(v336, 1, v338);
        v341 = v340(v337, 1, v338);
        if ((_DWORD)v336)
        {
          if (!v341)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v339 + 32))(v389, v337, v338);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v339 + 56))(v389, 0, 1, v338);
            goto LABEL_260;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v343 = *(_QWORD *)(*(_QWORD *)(v342 - 8) + 64);
          v344 = v389;
        }
        else
        {
          if (!v341)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v339 + 40))(v389, v337, v338);
            goto LABEL_260;
          }
          (*(void (**)(void *, uint64_t))(v339 + 8))(v389, v338);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v343 = *(_QWORD *)(*(_QWORD *)(v345 - 8) + 64);
          v344 = v389;
        }
        memcpy(v344, v337, v343);
LABEL_260:
        a3 = v420;
        v377 = *(int *)(v57 + 32);
        v378 = &v143[v377];
        v379 = (uint64_t *)&v144[v377];
        v381 = *v379;
        v380 = v379[1];
        *v378 = v381;
        v378[1] = v380;
        swift_bridgeObjectRelease();
        v58 = v414;
        v145 = v399;
        goto LABEL_119;
      }
      sub_224E2C9F4((uint64_t)(v143 + 24));
    }
    v334 = *(_OWORD *)(v144 + 40);
    *(_OWORD *)(v143 + 24) = *(_OWORD *)(v144 + 24);
    *(_OWORD *)(v143 + 40) = v334;
    *((_QWORD *)v143 + 7) = *((_QWORD *)v144 + 7);
    goto LABEL_228;
  }
  if (v325)
  {
    v149 = &qword_2557E02D0;
    v150 = type metadata accessor for FHIRDateTime;
    goto LABEL_93;
  }
  v398 = v145;
  v326 = v58;
  *v143 = *v144;
  *((_QWORD *)v143 + 1) = *((_QWORD *)v144 + 1);
  *((_DWORD *)v143 + 4) = *((_DWORD *)v144 + 4);
  *(_OWORD *)(v143 + 24) = *(_OWORD *)(v144 + 24);
  *(_OWORD *)(v143 + 40) = *(_OWORD *)(v144 + 40);
  *((_QWORD *)v143 + 7) = *((_QWORD *)v144 + 7);
  v327 = *(int *)(v57 + 28);
  v328 = &v143[v327];
  v329 = &v144[v327];
  v330 = sub_224F67874();
  v331 = *(_QWORD *)(v330 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v331 + 48))(v329, 1, v330))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v328, v329, *(_QWORD *)(*(_QWORD *)(v332 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v331 + 32))(v328, v329, v330);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v331 + 56))(v328, 0, 1, v330);
  }
  v58 = v326;
  v145 = v398;
  *(_OWORD *)&v143[*(int *)(v57 + 32)] = *(_OWORD *)&v144[*(int *)(v57 + 32)];
  ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v419[7])(v143, 0, 1, v57);
  a3 = v420;
LABEL_119:
  v183 = a3[16];
  v184 = (_QWORD *)((char *)a1 + v183);
  v185 = (_QWORD *)((char *)v4 + v183);
  v187 = *v185;
  v186 = v185[1];
  *v184 = v187;
  v184[1] = v186;
  swift_bridgeObjectRelease();
  v188 = a3[17];
  v189 = (uint64_t)a1 + v188;
  v190 = (char *)v4 + v188;
  v191 = v58((uint64_t)a1 + v188, 1, v57);
  v192 = v58((uint64_t)v190, 1, v57);
  if (!v191)
  {
    if (v192)
    {
      sub_224DDEAA0(v189, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v193 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_124;
    }
    v393 = v145;
    *(_BYTE *)v189 = *v190;
    *(_QWORD *)(v189 + 8) = *((_QWORD *)v190 + 1);
    *(_DWORD *)(v189 + 16) = *((_DWORD *)v190 + 4);
    v410 = v58;
    if (*(_QWORD *)(v189 + 56) != 1)
    {
      v203 = *((_QWORD *)v190 + 7);
      if (v203 != 1)
      {
        *(_BYTE *)(v189 + 24) = v190[24];
        *(_WORD *)(v189 + 25) = *(_WORD *)(v190 + 25);
        *(_DWORD *)(v189 + 28) = *((_DWORD *)v190 + 7);
        *(_OWORD *)(v189 + 32) = *((_OWORD *)v190 + 2);
        *(_QWORD *)(v189 + 48) = *((_QWORD *)v190 + 6);
        *(_QWORD *)(v189 + 56) = v203;
        swift_bridgeObjectRelease();
LABEL_134:
        v205 = *(int *)(v57 + 28);
        v206 = (void *)(v189 + v205);
        v207 = &v190[v205];
        v208 = sub_224F67874();
        v209 = *(_QWORD *)(v208 - 8);
        v210 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v209 + 48);
        v387 = v206;
        LODWORD(v206) = v210(v206, 1, v208);
        v211 = v210(v207, 1, v208);
        if ((_DWORD)v206)
        {
          if (!v211)
          {
            (*(void (**)(void *, char *, uint64_t))(v209 + 32))(v387, v207, v208);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v209 + 56))(v387, 0, 1, v208);
            goto LABEL_146;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v213 = *(_QWORD *)(*(_QWORD *)(v212 - 8) + 64);
          v214 = v387;
        }
        else
        {
          if (!v211)
          {
            (*(void (**)(void *, char *, uint64_t))(v209 + 40))(v387, v207, v208);
            goto LABEL_146;
          }
          (*(void (**)(void *, uint64_t))(v209 + 8))(v387, v208);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v213 = *(_QWORD *)(*(_QWORD *)(v215 - 8) + 64);
          v214 = v387;
        }
        memcpy(v214, v207, v213);
LABEL_146:
        a3 = v420;
        v58 = v410;
        v195 = __src;
        v145 = v393;
        v218 = *(int *)(v57 + 32);
        v219 = (_QWORD *)(v189 + v218);
        v220 = &v190[v218];
        v222 = *(_QWORD *)v220;
        v221 = *((_QWORD *)v220 + 1);
        *v219 = v222;
        v219[1] = v221;
        swift_bridgeObjectRelease();
        goto LABEL_147;
      }
      sub_224E2C9F4(v189 + 24);
    }
    v204 = *(_OWORD *)(v190 + 40);
    *(_OWORD *)(v189 + 24) = *(_OWORD *)(v190 + 24);
    *(_OWORD *)(v189 + 40) = v204;
    *(_QWORD *)(v189 + 56) = *((_QWORD *)v190 + 7);
    goto LABEL_134;
  }
  if (v192)
  {
    v193 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_124:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v193);
    memcpy((void *)v189, v190, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
    v195 = __src;
    goto LABEL_147;
  }
  v392 = v145;
  v196 = v58;
  *(_BYTE *)v189 = *v190;
  *(_QWORD *)(v189 + 8) = *((_QWORD *)v190 + 1);
  *(_DWORD *)(v189 + 16) = *((_DWORD *)v190 + 4);
  *(_OWORD *)(v189 + 24) = *(_OWORD *)(v190 + 24);
  *(_OWORD *)(v189 + 40) = *(_OWORD *)(v190 + 40);
  *(_QWORD *)(v189 + 56) = *((_QWORD *)v190 + 7);
  v197 = *(int *)(v57 + 28);
  v198 = (void *)(v189 + v197);
  v199 = &v190[v197];
  v200 = sub_224F67874();
  v201 = *(_QWORD *)(v200 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v201 + 48))(v199, 1, v200))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v202 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v201 + 32))(v198, v199, v200);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v201 + 56))(v198, 0, 1, v200);
  }
  v58 = v196;
  v145 = v392;
  v195 = __src;
  *(_OWORD *)(v189 + *(int *)(v57 + 32)) = *(_OWORD *)&v190[*(int *)(v57 + 32)];
  a3 = v420;
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v419[7])(v189, 0, 1, v57);
LABEL_147:
  v223 = a3[18];
  v224 = (char *)a1 + v223;
  v225 = (char *)v4 + v223;
  v226 = v195((char *)a1 + v223, 1, v145);
  v227 = v195(v225, 1, v145);
  if (!v226)
  {
    if (v227)
    {
      sub_224DDEAA0((uint64_t)v224, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v228 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_152;
    }
    v234 = v58((uint64_t)v224, 1, v57);
    v235 = v58((uint64_t)v225, 1, v57);
    if (v234)
    {
      if (v235)
      {
        v236 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_163:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v236);
        memcpy(v224, v225, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
        goto LABEL_237;
      }
      v395 = v145;
      v245 = v58;
      *v224 = *v225;
      *((_QWORD *)v224 + 1) = *((_QWORD *)v225 + 1);
      *((_DWORD *)v224 + 4) = *((_DWORD *)v225 + 4);
      *(_OWORD *)(v224 + 24) = *(_OWORD *)(v225 + 24);
      *(_OWORD *)(v224 + 40) = *(_OWORD *)(v225 + 40);
      *((_QWORD *)v224 + 7) = *((_QWORD *)v225 + 7);
      v246 = *(int *)(v57 + 28);
      v247 = &v224[v246];
      v248 = &v225[v246];
      v249 = sub_224F67874();
      v250 = *(_QWORD *)(v249 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v250 + 48))(v248, 1, v249))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v247, v248, *(_QWORD *)(*(_QWORD *)(v251 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v250 + 32))(v247, v248, v249);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v250 + 56))(v247, 0, 1, v249);
      }
      v58 = v245;
      v145 = v395;
      *(_OWORD *)&v224[*(int *)(v57 + 32)] = *(_OWORD *)&v225[*(int *)(v57 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v419[7])(v224, 0, 1, v57);
      a3 = v420;
LABEL_237:
      v351 = *(int *)(v145 + 20);
      v352 = (uint64_t)&v224[v351];
      v353 = &v225[v351];
      v354 = v58(v352, 1, v57);
      v355 = v58((uint64_t)v353, 1, v57);
      if (v354)
      {
        if (!v355)
        {
          *(_BYTE *)v352 = *v353;
          *(_QWORD *)(v352 + 8) = *((_QWORD *)v353 + 1);
          *(_DWORD *)(v352 + 16) = *((_DWORD *)v353 + 4);
          *(_OWORD *)(v352 + 24) = *(_OWORD *)(v353 + 24);
          *(_OWORD *)(v352 + 40) = *(_OWORD *)(v353 + 40);
          *(_QWORD *)(v352 + 56) = *((_QWORD *)v353 + 7);
          v358 = *(int *)(v57 + 28);
          v359 = (void *)(v352 + v358);
          v360 = &v353[v358];
          v361 = sub_224F67874();
          v362 = *(_QWORD *)(v361 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v362 + 48))(v360, 1, v361))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v359, v360, *(_QWORD *)(*(_QWORD *)(v363 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v362 + 32))(v359, v360, v361);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v362 + 56))(v359, 0, 1, v361);
          }
          *(_OWORD *)(v352 + *(int *)(v57 + 32)) = *(_OWORD *)&v353[*(int *)(v57 + 32)];
          a3 = v420;
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v419[7])(v352, 0, 1, v57);
          goto LABEL_175;
        }
        v356 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_242:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v356);
        v230 = *(_QWORD *)(*(_QWORD *)(v357 - 8) + 64);
        v231 = (void *)v352;
        v232 = v353;
        goto LABEL_153;
      }
      if (v355)
      {
        sub_224DDEAA0(v352, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v356 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_242;
      }
      *(_BYTE *)v352 = *v353;
      *(_QWORD *)(v352 + 8) = *((_QWORD *)v353 + 1);
      *(_DWORD *)(v352 + 16) = *((_DWORD *)v353 + 4);
      if (*(_QWORD *)(v352 + 56) != 1)
      {
        v364 = *((_QWORD *)v353 + 7);
        if (v364 != 1)
        {
          *(_BYTE *)(v352 + 24) = v353[24];
          *(_WORD *)(v352 + 25) = *(_WORD *)(v353 + 25);
          *(_DWORD *)(v352 + 28) = *((_DWORD *)v353 + 7);
          *(_OWORD *)(v352 + 32) = *((_OWORD *)v353 + 2);
          *(_QWORD *)(v352 + 48) = *((_QWORD *)v353 + 6);
          *(_QWORD *)(v352 + 56) = v364;
          swift_bridgeObjectRelease();
LABEL_252:
          v366 = *(int *)(v57 + 28);
          v367 = (void *)(v352 + v366);
          v368 = &v353[v366];
          v369 = sub_224F67874();
          v370 = *(_QWORD *)(v369 - 8);
          v371 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v370 + 48);
          __srcb = v367;
          LODWORD(v367) = v371(v367, 1, v369);
          v372 = v371(v368, 1, v369);
          if ((_DWORD)v367)
          {
            if (!v372)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v370 + 32))(__srcb, v368, v369);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v370 + 56))(__srcb, 0, 1, v369);
              goto LABEL_262;
            }
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            v374 = *(_QWORD *)(*(_QWORD *)(v373 - 8) + 64);
            v375 = __srcb;
          }
          else
          {
            if (!v372)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v370 + 40))(__srcb, v368, v369);
              goto LABEL_262;
            }
            (*(void (**)(void *, uint64_t))(v370 + 8))(__srcb, v369);
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            v374 = *(_QWORD *)(*(_QWORD *)(v376 - 8) + 64);
            v375 = __srcb;
          }
          memcpy(v375, v368, v374);
LABEL_262:
          a3 = v420;
          v382 = *(int *)(v57 + 32);
          v383 = (_QWORD *)(v352 + v382);
          v384 = (uint64_t *)&v353[v382];
          v386 = *v384;
          v385 = v384[1];
          *v383 = v386;
          v383[1] = v385;
          swift_bridgeObjectRelease();
          goto LABEL_175;
        }
        sub_224E2C9F4(v352 + 24);
      }
      v365 = *(_OWORD *)(v353 + 40);
      *(_OWORD *)(v352 + 24) = *(_OWORD *)(v353 + 24);
      *(_OWORD *)(v352 + 40) = v365;
      *(_QWORD *)(v352 + 56) = *((_QWORD *)v353 + 7);
      goto LABEL_252;
    }
    if (v235)
    {
      sub_224DDEAA0((uint64_t)v224, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v236 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_163;
    }
    v397 = v145;
    *v224 = *v225;
    *((_QWORD *)v224 + 1) = *((_QWORD *)v225 + 1);
    *((_DWORD *)v224 + 4) = *((_DWORD *)v225 + 4);
    v413 = v58;
    if (*((_QWORD *)v224 + 7) != 1)
    {
      v278 = *((_QWORD *)v225 + 7);
      if (v278 != 1)
      {
        v224[24] = v225[24];
        *(_WORD *)(v224 + 25) = *(_WORD *)(v225 + 25);
        *((_DWORD *)v224 + 7) = *((_DWORD *)v225 + 7);
        *((_OWORD *)v224 + 2) = *((_OWORD *)v225 + 2);
        *((_QWORD *)v224 + 6) = *((_QWORD *)v225 + 6);
        *((_QWORD *)v224 + 7) = v278;
        swift_bridgeObjectRelease();
LABEL_201:
        v302 = *(int *)(v57 + 28);
        v303 = &v224[v302];
        v304 = &v225[v302];
        v305 = sub_224F67874();
        v306 = *(_QWORD *)(v305 - 8);
        v307 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v306 + 48);
        v404 = v303;
        LODWORD(v303) = v307(v303, 1, v305);
        v308 = v307(v304, 1, v305);
        if ((_DWORD)v303)
        {
          a3 = v420;
          if (!v308)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v306 + 32))(v404, v304, v305);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v306 + 56))(v404, 0, 1, v305);
            goto LABEL_236;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v310 = *(_QWORD *)(*(_QWORD *)(v309 - 8) + 64);
          v311 = v404;
        }
        else
        {
          a3 = v420;
          if (!v308)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v306 + 40))(v404, v304, v305);
            goto LABEL_236;
          }
          (*(void (**)(void *, uint64_t))(v306 + 8))(v404, v305);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v310 = *(_QWORD *)(*(_QWORD *)(v312 - 8) + 64);
          v311 = v404;
        }
        memcpy(v311, v304, v310);
LABEL_236:
        v58 = v413;
        v346 = *(int *)(v57 + 32);
        v347 = &v224[v346];
        v348 = (uint64_t *)&v225[v346];
        v350 = *v348;
        v349 = v348[1];
        *v347 = v350;
        v347[1] = v349;
        swift_bridgeObjectRelease();
        v145 = v397;
        goto LABEL_237;
      }
      sub_224E2C9F4((uint64_t)(v224 + 24));
    }
    v279 = *(_OWORD *)(v225 + 40);
    *(_OWORD *)(v224 + 24) = *(_OWORD *)(v225 + 24);
    *(_OWORD *)(v224 + 40) = v279;
    *((_QWORD *)v224 + 7) = *((_QWORD *)v225 + 7);
    goto LABEL_201;
  }
  if (v227)
  {
    v228 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_152:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v228);
    v230 = *(_QWORD *)(*(_QWORD *)(v229 - 8) + 64);
    v231 = v224;
    v232 = v225;
LABEL_153:
    memcpy(v231, v232, v230);
    goto LABEL_175;
  }
  if (v58((uint64_t)v225, 1, v57))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v224, v225, *(_QWORD *)(*(_QWORD *)(v233 - 8) + 64));
  }
  else
  {
    v237 = v145;
    v412 = v58;
    *v224 = *v225;
    *((_QWORD *)v224 + 1) = *((_QWORD *)v225 + 1);
    *((_DWORD *)v224 + 4) = *((_DWORD *)v225 + 4);
    *(_OWORD *)(v224 + 24) = *(_OWORD *)(v225 + 24);
    *(_OWORD *)(v224 + 40) = *(_OWORD *)(v225 + 40);
    *((_QWORD *)v224 + 7) = *((_QWORD *)v225 + 7);
    v238 = *(int *)(v57 + 28);
    v239 = &v224[v238];
    v240 = &v225[v238];
    v241 = sub_224F67874();
    v242 = *(_QWORD *)(v241 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v242 + 48))(v240, 1, v241))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v239, v240, *(_QWORD *)(*(_QWORD *)(v243 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v242 + 32))(v239, v240, v241);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v242 + 56))(v239, 0, 1, v241);
    }
    v145 = v237;
    *(_OWORD *)&v224[*(int *)(v57 + 32)] = *(_OWORD *)&v225[*(int *)(v57 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v419[7])(v224, 0, 1, v57);
    a3 = v420;
    v58 = v412;
  }
  v252 = *(int *)(v145 + 20);
  v253 = &v224[v252];
  v254 = &v225[v252];
  if (v58((uint64_t)v254, 1, v57))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v253, v254, *(_QWORD *)(*(_QWORD *)(v255 - 8) + 64));
  }
  else
  {
    v396 = v145;
    *v253 = *v254;
    *((_QWORD *)v253 + 1) = *((_QWORD *)v254 + 1);
    *((_DWORD *)v253 + 4) = *((_DWORD *)v254 + 4);
    *(_OWORD *)(v253 + 24) = *(_OWORD *)(v254 + 24);
    *(_OWORD *)(v253 + 40) = *(_OWORD *)(v254 + 40);
    *((_QWORD *)v253 + 7) = *((_QWORD *)v254 + 7);
    v256 = *(int *)(v57 + 28);
    v257 = &v253[v256];
    v258 = &v254[v256];
    v259 = sub_224F67874();
    v260 = *(_QWORD *)(v259 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v260 + 48))(v258, 1, v259))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v257, v258, *(_QWORD *)(*(_QWORD *)(v261 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v260 + 32))(v257, v258, v259);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v260 + 56))(v257, 0, 1, v259);
    }
    *(_OWORD *)&v253[*(int *)(v57 + 32)] = *(_OWORD *)&v254[*(int *)(v57 + 32)];
    a3 = v420;
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v419[7])(v253, 0, 1, v57);
    v145 = v396;
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v403 + 56))(v224, 0, 1, v145);
LABEL_175:
  v262 = a3[19];
  v263 = (_QWORD *)((char *)a1 + v262);
  v264 = (_QWORD *)((char *)v4 + v262);
  v266 = *v264;
  v265 = v264[1];
  *v263 = v266;
  v263[1] = v265;
  swift_bridgeObjectRelease();
  v267 = a3[20];
  v268 = (_QWORD *)((char *)a1 + v267);
  v269 = (_QWORD *)((char *)v4 + v267);
  v271 = *v269;
  v270 = v269[1];
  *v268 = v271;
  v268[1] = v270;
  swift_bridgeObjectRelease();
  v272 = a3[21];
  v273 = (_QWORD *)((char *)a1 + v272);
  v274 = (_QWORD *)((char *)v4 + v272);
  v276 = *v274;
  v275 = v274[1];
  *v273 = v276;
  v273[1] = v275;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Condition()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224EB8BEC(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a3[15];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.Condition()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224EB8D04(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a4[15];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_224EB8E0C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_224DDEA0C(319, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_224DDEA0C(319, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
    {
      sub_224DDEA0C(319, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ModelsDSTU2.DiagnosticReport(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int (*v14)(_QWORD, _QWORD, _QWORD);
  uint64_t v15;
  int *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int (*v21)(_QWORD, _QWORD, _QWORD);
  __int128 v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  void (*v53)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  void (*v69)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  void (*v86)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  unsigned int (*v92)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v93)(_QWORD, _QWORD, _QWORD);
  _BYTE *__dsta;
  uint64_t v97;
  uint64_t v98;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    v19 = (_QWORD *)(v18 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    v9 = a2[9];
    a1[8] = a2[8];
    a1[9] = v9;
    v10 = a3[9];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    a1[10] = a2[10];
    v13 = type metadata accessor for FHIRDateTime();
    v98 = *(_QWORD *)(v13 - 8);
    v14 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v98 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v12, 1, v13))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      v16 = a3;
      v17 = a2;
    }
    else
    {
      *v11 = *v12;
      *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
      *((_DWORD *)v11 + 4) = *((_DWORD *)v12 + 4);
      v20 = *((_QWORD *)v12 + 7);
      v21 = v14;
      if (v20 == 1)
      {
        v22 = *(_OWORD *)(v12 + 40);
        *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 24);
        *(_OWORD *)(v11 + 40) = v22;
        *((_QWORD *)v11 + 7) = *((_QWORD *)v12 + 7);
      }
      else
      {
        v11[24] = v12[24];
        *(_WORD *)(v11 + 25) = *(_WORD *)(v12 + 25);
        *(_OWORD *)(v11 + 28) = *(_OWORD *)(v12 + 28);
        *((_DWORD *)v11 + 11) = *((_DWORD *)v12 + 11);
        *((_QWORD *)v11 + 6) = *((_QWORD *)v12 + 6);
        *((_QWORD *)v11 + 7) = v20;
        swift_bridgeObjectRetain();
      }
      v16 = a3;
      v23 = *(int *)(v13 + 28);
      v24 = &v11[v23];
      v25 = &v12[v23];
      v26 = sub_224F67874();
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v27 + 16))(v24, v25, v26);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      v14 = v21;
      v29 = *(int *)(v13 + 32);
      v30 = &v11[v29];
      v31 = &v12[v29];
      v32 = v31[1];
      *v30 = *v31;
      v30[1] = v32;
      v33 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v98 + 56);
      swift_bridgeObjectRetain();
      v33(v11, 0, 1, v13);
      v17 = a2;
    }
    v19 = a1;
    v34 = v16[10];
    v35 = (char *)a1 + v34;
    v36 = (char *)v17 + v34;
    v37 = type metadata accessor for Period();
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v97 = v13;
      if (v14(v36, 1, v13))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        *v35 = *v36;
        *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
        *((_DWORD *)v35 + 4) = *((_DWORD *)v36 + 4);
        v41 = *((_QWORD *)v36 + 7);
        v92 = v14;
        if (v41 == 1)
        {
          v42 = *(_OWORD *)(v36 + 40);
          *(_OWORD *)(v35 + 24) = *(_OWORD *)(v36 + 24);
          *(_OWORD *)(v35 + 40) = v42;
          *((_QWORD *)v35 + 7) = *((_QWORD *)v36 + 7);
        }
        else
        {
          v35[24] = v36[24];
          *(_WORD *)(v35 + 25) = *(_WORD *)(v36 + 25);
          *(_OWORD *)(v35 + 28) = *(_OWORD *)(v36 + 28);
          *((_DWORD *)v35 + 11) = *((_DWORD *)v36 + 11);
          *((_QWORD *)v35 + 6) = *((_QWORD *)v36 + 6);
          *((_QWORD *)v35 + 7) = v41;
          swift_bridgeObjectRetain();
        }
        v43 = *(int *)(v13 + 28);
        v44 = &v35[v43];
        v45 = &v36[v43];
        v46 = sub_224F67874();
        v47 = *(_QWORD *)(v46 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v47 + 16))(v44, v45, v46);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        }
        v14 = v92;
        v49 = *(int *)(v97 + 32);
        v50 = &v35[v49];
        v51 = &v36[v49];
        v52 = v51[1];
        *v50 = *v51;
        v50[1] = v52;
        v16 = a3;
        v53 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v98 + 56);
        swift_bridgeObjectRetain();
        v53(v35, 0, 1, v97);
        v13 = v97;
      }
      v54 = *(int *)(v37 + 20);
      v55 = &v35[v54];
      v56 = &v36[v54];
      if (v14(v56, 1, v13))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        *v55 = *v56;
        *((_QWORD *)v55 + 1) = *((_QWORD *)v56 + 1);
        *((_DWORD *)v55 + 4) = *((_DWORD *)v56 + 4);
        v58 = *((_QWORD *)v56 + 7);
        v93 = v14;
        if (v58 == 1)
        {
          v59 = *(_OWORD *)(v56 + 40);
          *(_OWORD *)(v55 + 24) = *(_OWORD *)(v56 + 24);
          *(_OWORD *)(v55 + 40) = v59;
          *((_QWORD *)v55 + 7) = *((_QWORD *)v56 + 7);
        }
        else
        {
          v55[24] = v56[24];
          *(_WORD *)(v55 + 25) = *(_WORD *)(v56 + 25);
          *(_OWORD *)(v55 + 28) = *(_OWORD *)(v56 + 28);
          *((_DWORD *)v55 + 11) = *((_DWORD *)v56 + 11);
          *((_QWORD *)v55 + 6) = *((_QWORD *)v56 + 6);
          *((_QWORD *)v55 + 7) = v58;
          swift_bridgeObjectRetain();
        }
        v60 = *(int *)(v13 + 28);
        __dsta = &v55[v60];
        v61 = &v56[v60];
        v62 = sub_224F67874();
        v63 = *(_QWORD *)(v62 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(__dsta, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v63 + 16))(__dsta, v61, v62);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v63 + 56))(__dsta, 0, 1, v62);
        }
        v14 = v93;
        v65 = *(int *)(v97 + 32);
        v66 = &v55[v65];
        v67 = &v56[v65];
        v68 = v67[1];
        *v66 = *v67;
        v66[1] = v68;
        v16 = a3;
        v69 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v98 + 56);
        swift_bridgeObjectRetain();
        v69(v55, 0, 1, v97);
        v13 = v97;
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    v70 = v16[11];
    v71 = (char *)v19 + v70;
    v72 = (char *)v17 + v70;
    if (v14((char *)v17 + v70, 1, v13))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    }
    else
    {
      *v71 = *v72;
      *((_QWORD *)v71 + 1) = *((_QWORD *)v72 + 1);
      *((_DWORD *)v71 + 4) = *((_DWORD *)v72 + 4);
      v74 = *((_QWORD *)v72 + 7);
      if (v74 == 1)
      {
        v75 = *(_OWORD *)(v72 + 40);
        *(_OWORD *)(v71 + 24) = *(_OWORD *)(v72 + 24);
        *(_OWORD *)(v71 + 40) = v75;
        *((_QWORD *)v71 + 7) = *((_QWORD *)v72 + 7);
      }
      else
      {
        v71[24] = v72[24];
        *(_WORD *)(v71 + 25) = *(_WORD *)(v72 + 25);
        *(_OWORD *)(v71 + 28) = *(_OWORD *)(v72 + 28);
        *((_DWORD *)v71 + 11) = *((_DWORD *)v72 + 11);
        *((_QWORD *)v71 + 6) = *((_QWORD *)v72 + 6);
        *((_QWORD *)v71 + 7) = v74;
        swift_bridgeObjectRetain();
      }
      v76 = *(int *)(v13 + 28);
      v77 = &v71[v76];
      v78 = &v72[v76];
      v79 = sub_224F67874();
      v80 = *(_QWORD *)(v79 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v80 + 16))(v77, v78, v79);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
      }
      v82 = *(int *)(v13 + 32);
      v83 = &v71[v82];
      v84 = &v72[v82];
      v85 = v84[1];
      *v83 = *v84;
      v83[1] = v85;
      v86 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v98 + 56);
      swift_bridgeObjectRetain();
      v86(v71, 0, 1, v13);
    }
    v87 = v16[12];
    v88 = (_QWORD *)((char *)v19 + v87);
    v89 = (_QWORD *)((char *)v17 + v87);
    v90 = v89[1];
    *v88 = *v89;
    v88[1] = v90;
    swift_bridgeObjectRetain();
  }
  return v19;
}

uint64_t destroy for ModelsDSTU2.DiagnosticReport(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[9];
  v5 = type metadata accessor for FHIRDateTime();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    if (*(_QWORD *)(v4 + 56) != 1)
      swift_bridgeObjectRelease();
    v7 = v4 + *(int *)(v5 + 28);
    v8 = sub_224F67874();
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    swift_bridgeObjectRelease();
  }
  v10 = a1 + a2[10];
  v11 = type metadata accessor for Period();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    if (!v6(v10, 1, v5))
    {
      if (*(_QWORD *)(v10 + 56) != 1)
        swift_bridgeObjectRelease();
      v12 = v10 + *(int *)(v5 + 28);
      v13 = sub_224F67874();
      v14 = *(_QWORD *)(v13 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
      swift_bridgeObjectRelease();
    }
    v15 = v10 + *(int *)(v11 + 20);
    if (!v6(v15, 1, v5))
    {
      if (*(_QWORD *)(v15 + 56) != 1)
        swift_bridgeObjectRelease();
      v16 = v15 + *(int *)(v5 + 28);
      v17 = sub_224F67874();
      v18 = *(_QWORD *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      swift_bridgeObjectRelease();
    }
  }
  v19 = a1 + a2[11];
  if (!v6(v19, 1, v5))
  {
    if (*(_QWORD *)(v19 + 56) != 1)
      swift_bridgeObjectRelease();
    v20 = v19 + *(int *)(v5 + 28);
    v21 = sub_224F67874();
    v22 = *(_QWORD *)(v21 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ModelsDSTU2.DiagnosticReport(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD, _QWORD, _QWORD);
  uint64_t v13;
  _QWORD *v14;
  int *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void (*v50)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  void (*v67)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  void (*v84)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  unsigned int (*v90)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v91)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v92)(_QWORD, _QWORD, _QWORD);
  uint64_t v94;
  uint64_t v95;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a3[9];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  a1[10] = a2[10];
  v11 = type metadata accessor for FHIRDateTime();
  v95 = *(_QWORD *)(v11 - 8);
  v12 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v95 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v10, 1, v11))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    v14 = a2;
    v15 = a3;
    v16 = a1;
  }
  else
  {
    *v9 = *v10;
    *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
    *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
    v17 = *((_QWORD *)v10 + 7);
    v90 = v12;
    if (v17 == 1)
    {
      v18 = *(_OWORD *)(v10 + 40);
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
      *(_OWORD *)(v9 + 40) = v18;
      *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
    }
    else
    {
      v9[24] = v10[24];
      *(_WORD *)(v9 + 25) = *(_WORD *)(v10 + 25);
      *(_OWORD *)(v9 + 28) = *(_OWORD *)(v10 + 28);
      *((_DWORD *)v9 + 11) = *((_DWORD *)v10 + 11);
      *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
      *((_QWORD *)v9 + 7) = v17;
      swift_bridgeObjectRetain();
    }
    v14 = a2;
    v15 = a3;
    v16 = a1;
    v19 = *(int *)(v11 + 28);
    v20 = &v9[v19];
    v21 = &v10[v19];
    v22 = sub_224F67874();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v12 = v90;
    v25 = *(int *)(v11 + 32);
    v26 = &v9[v25];
    v27 = &v10[v25];
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v95 + 56);
    swift_bridgeObjectRetain();
    v29(v9, 0, 1, v11);
  }
  v30 = v15[10];
  v31 = (char *)v16 + v30;
  v32 = (char *)v14 + v30;
  v33 = type metadata accessor for Period();
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    if (v12(v32, 1, v11))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      *v31 = *v32;
      *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
      *((_DWORD *)v31 + 4) = *((_DWORD *)v32 + 4);
      v37 = *((_QWORD *)v32 + 7);
      v91 = v12;
      if (v37 == 1)
      {
        v38 = *(_OWORD *)(v32 + 40);
        *(_OWORD *)(v31 + 24) = *(_OWORD *)(v32 + 24);
        *(_OWORD *)(v31 + 40) = v38;
        *((_QWORD *)v31 + 7) = *((_QWORD *)v32 + 7);
      }
      else
      {
        v31[24] = v32[24];
        *(_WORD *)(v31 + 25) = *(_WORD *)(v32 + 25);
        *(_OWORD *)(v31 + 28) = *(_OWORD *)(v32 + 28);
        *((_DWORD *)v31 + 11) = *((_DWORD *)v32 + 11);
        *((_QWORD *)v31 + 6) = *((_QWORD *)v32 + 6);
        *((_QWORD *)v31 + 7) = v37;
        swift_bridgeObjectRetain();
      }
      v39 = v11;
      v40 = *(int *)(v11 + 28);
      v41 = &v31[v40];
      v42 = &v32[v40];
      v43 = sub_224F67874();
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v44 + 16))(v41, v42, v43);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      v11 = v39;
      v46 = *(int *)(v39 + 32);
      v47 = &v31[v46];
      v48 = &v32[v46];
      v49 = v48[1];
      *v47 = *v48;
      v47[1] = v49;
      v50 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v95 + 56);
      swift_bridgeObjectRetain();
      v50(v31, 0, 1, v39);
      v14 = a2;
      v15 = a3;
      v12 = v91;
    }
    v51 = *(int *)(v33 + 20);
    v52 = &v31[v51];
    v53 = &v32[v51];
    if (v12(v53, 1, v11))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      *v52 = *v53;
      *((_QWORD *)v52 + 1) = *((_QWORD *)v53 + 1);
      *((_DWORD *)v52 + 4) = *((_DWORD *)v53 + 4);
      v55 = *((_QWORD *)v53 + 7);
      v92 = v12;
      if (v55 == 1)
      {
        v56 = *(_OWORD *)(v53 + 40);
        *(_OWORD *)(v52 + 24) = *(_OWORD *)(v53 + 24);
        *(_OWORD *)(v52 + 40) = v56;
        *((_QWORD *)v52 + 7) = *((_QWORD *)v53 + 7);
      }
      else
      {
        v52[24] = v53[24];
        *(_WORD *)(v52 + 25) = *(_WORD *)(v53 + 25);
        *(_OWORD *)(v52 + 28) = *(_OWORD *)(v53 + 28);
        *((_DWORD *)v52 + 11) = *((_DWORD *)v53 + 11);
        *((_QWORD *)v52 + 6) = *((_QWORD *)v53 + 6);
        *((_QWORD *)v52 + 7) = v55;
        swift_bridgeObjectRetain();
      }
      v94 = v11;
      v57 = *(int *)(v11 + 28);
      v58 = &v52[v57];
      v59 = &v53[v57];
      v60 = sub_224F67874();
      v61 = *(_QWORD *)(v60 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v61 + 16))(v58, v59, v60);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
      }
      v12 = v92;
      v11 = v94;
      v63 = *(int *)(v94 + 32);
      v64 = &v52[v63];
      v65 = &v53[v63];
      v66 = v65[1];
      *v64 = *v65;
      v64[1] = v66;
      v67 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v95 + 56);
      swift_bridgeObjectRetain();
      v67(v52, 0, 1, v94);
      v14 = a2;
      v15 = a3;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  v68 = v15[11];
  v69 = (char *)v16 + v68;
  v70 = (char *)v14 + v68;
  if (v12((char *)v14 + v68, 1, v11))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    *v69 = *v70;
    *((_QWORD *)v69 + 1) = *((_QWORD *)v70 + 1);
    *((_DWORD *)v69 + 4) = *((_DWORD *)v70 + 4);
    v72 = *((_QWORD *)v70 + 7);
    if (v72 == 1)
    {
      v73 = *(_OWORD *)(v70 + 40);
      *(_OWORD *)(v69 + 24) = *(_OWORD *)(v70 + 24);
      *(_OWORD *)(v69 + 40) = v73;
      *((_QWORD *)v69 + 7) = *((_QWORD *)v70 + 7);
    }
    else
    {
      v69[24] = v70[24];
      *(_WORD *)(v69 + 25) = *(_WORD *)(v70 + 25);
      *(_OWORD *)(v69 + 28) = *(_OWORD *)(v70 + 28);
      *((_DWORD *)v69 + 11) = *((_DWORD *)v70 + 11);
      *((_QWORD *)v69 + 6) = *((_QWORD *)v70 + 6);
      *((_QWORD *)v69 + 7) = v72;
      swift_bridgeObjectRetain();
    }
    v74 = *(int *)(v11 + 28);
    v75 = &v69[v74];
    v76 = &v70[v74];
    v77 = sub_224F67874();
    v78 = *(_QWORD *)(v77 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v78 + 16))(v75, v76, v77);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
    }
    v80 = *(int *)(v11 + 32);
    v81 = &v69[v80];
    v82 = &v70[v80];
    v83 = v82[1];
    *v81 = *v82;
    v81[1] = v83;
    v84 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v95 + 56);
    swift_bridgeObjectRetain();
    v84(v69, 0, 1, v11);
  }
  v85 = v15[12];
  v86 = (_QWORD *)((char *)v16 + v85);
  v87 = (_QWORD *)((char *)v14 + v85);
  v88 = v87[1];
  *v86 = *v87;
  v86[1] = v88;
  swift_bridgeObjectRetain();
  return v16;
}

_QWORD *assignWithCopy for ModelsDSTU2.DiagnosticReport(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  void (*v33)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void *, uint64_t, uint64_t);
  int v43;
  uint64_t v44;
  size_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(_BYTE *, uint64_t, uint64_t);
  int v57;
  int v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  size_t v61;
  void *v62;
  const void *v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  void (*v84)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  void (*v101)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  char *v104;
  int v105;
  int v106;
  uint64_t (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 *v112;
  __int128 *v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  void *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  char *v126;
  void (*v127)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  void *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(void *, uint64_t, uint64_t);
  int v137;
  uint64_t v138;
  size_t v139;
  void *v140;
  uint64_t v141;
  __int128 *v142;
  __int128 *v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  __int128 v154;
  uint64_t v155;
  _BYTE *v156;
  _BYTE *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  void (*v164)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  _BYTE *v169;
  _BYTE *v170;
  uint64_t v171;
  uint64_t (*v172)(_BYTE *, uint64_t, uint64_t);
  int v173;
  uint64_t v174;
  size_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE *v183;
  int v184;
  int v185;
  uint64_t (*v186)(uint64_t, uint64_t);
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 *v191;
  __int128 *v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  void *v198;
  _BYTE *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  void (*v206)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  void *v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t (*v215)(void *, uint64_t, uint64_t);
  int v216;
  uint64_t v217;
  size_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  void *v227;
  _BYTE *__src;
  _BYTE *__srca;
  void *__srcb;
  int *v231;
  int *v232;
  int *v233;
  int *v234;
  int *v235;
  int *v236;
  int *v237;
  uint64_t v238;
  void *v239;
  uint64_t (*v240)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[9];
  v7 = (uint64_t)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for FHIRDateTime();
  v238 = *(_QWORD *)(v9 - 8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v238 + 48);
  v11 = v10(v7, 1, v9);
  v240 = v10;
  v12 = v10((uint64_t)v8, 1, v9);
  if (!v11)
  {
    if (v12)
    {
      sub_224DDEAA0(v7, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    *(_BYTE *)v7 = *v8;
    *(_QWORD *)(v7 + 8) = *((_QWORD *)v8 + 1);
    *(_WORD *)(v7 + 16) = *((_WORD *)v8 + 8);
    *(_WORD *)(v7 + 18) = *((_WORD *)v8 + 9);
    v18 = (__int128 *)(v7 + 24);
    v19 = (__int128 *)(v8 + 24);
    v20 = *((_QWORD *)v8 + 7);
    v231 = a3;
    if (*(_QWORD *)(v7 + 56) == 1)
    {
      if (v20 == 1)
      {
        v21 = *v19;
        v22 = *(_OWORD *)(v8 + 40);
        *(_QWORD *)(v7 + 56) = *((_QWORD *)v8 + 7);
        *v18 = v21;
        *(_OWORD *)(v7 + 40) = v22;
      }
      else
      {
        *(_BYTE *)(v7 + 24) = v8[24];
        *(_BYTE *)(v7 + 25) = v8[25];
        *(_BYTE *)(v7 + 26) = v8[26];
        v36 = *(_OWORD *)(v8 + 28);
        *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(v7 + 28) = v36;
        *(_QWORD *)(v7 + 48) = *((_QWORD *)v8 + 6);
        *(_QWORD *)(v7 + 56) = *((_QWORD *)v8 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v20 == 1)
    {
      sub_224E2C9F4(v7 + 24);
      v34 = *((_QWORD *)v8 + 7);
      v35 = *(_OWORD *)(v8 + 40);
      *v18 = *v19;
      *(_OWORD *)(v7 + 40) = v35;
      *(_QWORD *)(v7 + 56) = v34;
    }
    else
    {
      *(_BYTE *)(v7 + 24) = v8[24];
      *(_BYTE *)(v7 + 25) = v8[25];
      *(_BYTE *)(v7 + 26) = v8[26];
      *(_DWORD *)(v7 + 28) = *((_DWORD *)v8 + 7);
      *(_WORD *)(v7 + 32) = *((_WORD *)v8 + 16);
      *(_WORD *)(v7 + 34) = *((_WORD *)v8 + 17);
      *(_WORD *)(v7 + 36) = *((_WORD *)v8 + 18);
      *(_WORD *)(v7 + 38) = *((_WORD *)v8 + 19);
      *(_WORD *)(v7 + 40) = *((_WORD *)v8 + 20);
      *(_WORD *)(v7 + 42) = *((_WORD *)v8 + 21);
      *(_WORD *)(v7 + 44) = *((_WORD *)v8 + 22);
      *(_WORD *)(v7 + 46) = *((_WORD *)v8 + 23);
      *(_QWORD *)(v7 + 48) = *((_QWORD *)v8 + 6);
      *(_QWORD *)(v7 + 56) = *((_QWORD *)v8 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v37 = *(int *)(v9 + 28);
    v38 = (void *)(v7 + v37);
    v39 = &v8[v37];
    v40 = sub_224F67874();
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v41 + 48);
    v226 = v38;
    LODWORD(v38) = v42(v38, 1, v40);
    v43 = v42(v39, 1, v40);
    if ((_DWORD)v38)
    {
      if (!v43)
      {
        (*(void (**)(void *, char *, uint64_t))(v41 + 16))(v226, v39, v40);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v226, 0, 1, v40);
        goto LABEL_29;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v45 = *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64);
      v46 = v226;
    }
    else
    {
      if (!v43)
      {
        (*(void (**)(void *, char *, uint64_t))(v41 + 24))(v226, v39, v40);
        goto LABEL_29;
      }
      (*(void (**)(void *, uint64_t))(v41 + 8))(v226, v40);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v45 = *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64);
      v46 = v226;
    }
    memcpy(v46, v39, v45);
LABEL_29:
    a3 = v231;
    v48 = *(int *)(v9 + 32);
    v49 = (_QWORD *)(v7 + v48);
    v50 = &v8[v48];
    *v49 = *(_QWORD *)v50;
    v49[1] = *((_QWORD *)v50 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  if (v12)
  {
    v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v13);
    memcpy((void *)v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_30;
  }
  *(_BYTE *)v7 = *v8;
  v15 = *((_QWORD *)v8 + 1);
  *(_DWORD *)(v7 + 16) = *((_DWORD *)v8 + 4);
  *(_QWORD *)(v7 + 8) = v15;
  if (*((_QWORD *)v8 + 7) == 1)
  {
    v16 = *(_OWORD *)(v8 + 24);
    v17 = *(_OWORD *)(v8 + 40);
    *(_QWORD *)(v7 + 56) = *((_QWORD *)v8 + 7);
    *(_OWORD *)(v7 + 24) = v16;
    *(_OWORD *)(v7 + 40) = v17;
  }
  else
  {
    *(_BYTE *)(v7 + 24) = v8[24];
    *(_BYTE *)(v7 + 25) = v8[25];
    *(_BYTE *)(v7 + 26) = v8[26];
    v23 = *(_OWORD *)(v8 + 28);
    *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
    *(_OWORD *)(v7 + 28) = v23;
    *(_QWORD *)(v7 + 48) = *((_QWORD *)v8 + 6);
    *(_QWORD *)(v7 + 56) = *((_QWORD *)v8 + 7);
    swift_bridgeObjectRetain();
  }
  v24 = *(int *)(v9 + 28);
  v25 = (void *)(v7 + v24);
  v26 = &v8[v24];
  v27 = sub_224F67874();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = *(int *)(v9 + 32);
  v31 = (_QWORD *)(v7 + v30);
  v32 = &v8[v30];
  *v31 = *(_QWORD *)v32;
  v31[1] = *((_QWORD *)v32 + 1);
  v33 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v238 + 56);
  swift_bridgeObjectRetain();
  v33(v7, 0, 1, v9);
LABEL_30:
  v51 = a3[10];
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  v54 = type metadata accessor for Period();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v55 + 48);
  v57 = v56(v52, 1, v54);
  v58 = v56(v53, 1, v54);
  if (!v57)
  {
    if (v58)
    {
      sub_224DDEAA0((uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v59 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_35;
    }
    v65 = v240((uint64_t)v52, 1, v9);
    v66 = v240((uint64_t)v53, 1, v9);
    if (v65)
    {
      if (v66)
      {
        v67 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_46:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v67);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        goto LABEL_115;
      }
      *v52 = *v53;
      v78 = *((_QWORD *)v53 + 1);
      *((_DWORD *)v52 + 4) = *((_DWORD *)v53 + 4);
      *((_QWORD *)v52 + 1) = v78;
      v233 = a3;
      if (*((_QWORD *)v53 + 7) == 1)
      {
        v79 = *(_OWORD *)(v53 + 24);
        v80 = *(_OWORD *)(v53 + 40);
        *((_QWORD *)v52 + 7) = *((_QWORD *)v53 + 7);
        *(_OWORD *)(v52 + 24) = v79;
        *(_OWORD *)(v52 + 40) = v80;
      }
      else
      {
        v52[24] = v53[24];
        v52[25] = v53[25];
        v52[26] = v53[26];
        v154 = *(_OWORD *)(v53 + 28);
        *((_DWORD *)v52 + 11) = *((_DWORD *)v53 + 11);
        *(_OWORD *)(v52 + 28) = v154;
        *((_QWORD *)v52 + 6) = *((_QWORD *)v53 + 6);
        *((_QWORD *)v52 + 7) = *((_QWORD *)v53 + 7);
        swift_bridgeObjectRetain();
      }
      v155 = *(int *)(v9 + 28);
      v156 = &v52[v155];
      v157 = &v53[v155];
      v158 = sub_224F67874();
      v159 = *(_QWORD *)(v158 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v159 + 48))(v157, 1, v158))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v159 + 16))(v156, v157, v158);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v156, 0, 1, v158);
      }
      v161 = *(int *)(v9 + 32);
      v162 = &v52[v161];
      v163 = &v53[v161];
      *v162 = *v163;
      v162[1] = v163[1];
      a3 = v233;
      v164 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v238 + 56);
      swift_bridgeObjectRetain();
      v164(v52, 0, 1, v9);
LABEL_115:
      v181 = *(int *)(v54 + 20);
      v182 = (uint64_t)&v52[v181];
      v183 = &v53[v181];
      v184 = v240(v182, 1, v9);
      v185 = v240((uint64_t)v183, 1, v9);
      if (v184)
      {
        if (!v185)
        {
          *(_BYTE *)v182 = *v183;
          v188 = *((_QWORD *)v183 + 1);
          *(_DWORD *)(v182 + 16) = *((_DWORD *)v183 + 4);
          *(_QWORD *)(v182 + 8) = v188;
          if (*((_QWORD *)v183 + 7) == 1)
          {
            v189 = *(_OWORD *)(v183 + 24);
            v190 = *(_OWORD *)(v183 + 40);
            *(_QWORD *)(v182 + 56) = *((_QWORD *)v183 + 7);
            *(_OWORD *)(v182 + 24) = v189;
            *(_OWORD *)(v182 + 40) = v190;
          }
          else
          {
            *(_BYTE *)(v182 + 24) = v183[24];
            *(_BYTE *)(v182 + 25) = v183[25];
            *(_BYTE *)(v182 + 26) = v183[26];
            v196 = *(_OWORD *)(v183 + 28);
            *(_DWORD *)(v182 + 44) = *((_DWORD *)v183 + 11);
            *(_OWORD *)(v182 + 28) = v196;
            *(_QWORD *)(v182 + 48) = *((_QWORD *)v183 + 6);
            *(_QWORD *)(v182 + 56) = *((_QWORD *)v183 + 7);
            swift_bridgeObjectRetain();
          }
          v197 = *(int *)(v9 + 28);
          v198 = (void *)(v182 + v197);
          v199 = &v183[v197];
          v200 = sub_224F67874();
          v201 = *(_QWORD *)(v200 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v201 + 48))(v199, 1, v200))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v202 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v201 + 16))(v198, v199, v200);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v201 + 56))(v198, 0, 1, v200);
          }
          v203 = *(int *)(v9 + 32);
          v204 = (_QWORD *)(v182 + v203);
          v205 = &v183[v203];
          *v204 = *v205;
          v204[1] = v205[1];
          v206 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v238 + 56);
          swift_bridgeObjectRetain();
          v206(v182, 0, 1, v9);
          goto LABEL_64;
        }
        v186 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_120:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v186);
        v61 = *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64);
        v62 = (void *)v182;
        v63 = v183;
        goto LABEL_36;
      }
      if (v185)
      {
        sub_224DDEAA0(v182, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v186 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_120;
      }
      *(_BYTE *)v182 = *v183;
      *(_QWORD *)(v182 + 8) = *((_QWORD *)v183 + 1);
      *(_WORD *)(v182 + 16) = *((_WORD *)v183 + 8);
      *(_WORD *)(v182 + 18) = *((_WORD *)v183 + 9);
      v191 = (__int128 *)(v182 + 24);
      v192 = (__int128 *)(v183 + 24);
      v193 = *((_QWORD *)v183 + 7);
      v237 = a3;
      if (*(_QWORD *)(v182 + 56) == 1)
      {
        if (v193 == 1)
        {
          v194 = *v192;
          v195 = *(_OWORD *)(v183 + 40);
          *(_QWORD *)(v182 + 56) = *((_QWORD *)v183 + 7);
          *v191 = v194;
          *(_OWORD *)(v182 + 40) = v195;
        }
        else
        {
          *(_BYTE *)(v182 + 24) = v183[24];
          *(_BYTE *)(v182 + 25) = v183[25];
          *(_BYTE *)(v182 + 26) = v183[26];
          v209 = *(_OWORD *)(v183 + 28);
          *(_DWORD *)(v182 + 44) = *((_DWORD *)v183 + 11);
          *(_OWORD *)(v182 + 28) = v209;
          *(_QWORD *)(v182 + 48) = *((_QWORD *)v183 + 6);
          *(_QWORD *)(v182 + 56) = *((_QWORD *)v183 + 7);
          swift_bridgeObjectRetain();
        }
      }
      else if (v193 == 1)
      {
        sub_224E2C9F4(v182 + 24);
        v207 = *((_QWORD *)v183 + 7);
        v208 = *(_OWORD *)(v183 + 40);
        *v191 = *v192;
        *(_OWORD *)(v182 + 40) = v208;
        *(_QWORD *)(v182 + 56) = v207;
      }
      else
      {
        *(_BYTE *)(v182 + 24) = v183[24];
        *(_BYTE *)(v182 + 25) = v183[25];
        *(_BYTE *)(v182 + 26) = v183[26];
        *(_DWORD *)(v182 + 28) = *((_DWORD *)v183 + 7);
        *(_WORD *)(v182 + 32) = *((_WORD *)v183 + 16);
        *(_WORD *)(v182 + 34) = *((_WORD *)v183 + 17);
        *(_WORD *)(v182 + 36) = *((_WORD *)v183 + 18);
        *(_WORD *)(v182 + 38) = *((_WORD *)v183 + 19);
        *(_WORD *)(v182 + 40) = *((_WORD *)v183 + 20);
        *(_WORD *)(v182 + 42) = *((_WORD *)v183 + 21);
        *(_WORD *)(v182 + 44) = *((_WORD *)v183 + 22);
        *(_WORD *)(v182 + 46) = *((_WORD *)v183 + 23);
        *(_QWORD *)(v182 + 48) = *((_QWORD *)v183 + 6);
        *(_QWORD *)(v182 + 56) = *((_QWORD *)v183 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      v210 = *(int *)(v9 + 28);
      v211 = (void *)(v182 + v210);
      v212 = &v183[v210];
      v213 = sub_224F67874();
      v214 = *(_QWORD *)(v213 - 8);
      v215 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v214 + 48);
      v227 = v211;
      LODWORD(v211) = v215(v211, 1, v213);
      v216 = v215(v212, 1, v213);
      if ((_DWORD)v211)
      {
        if (!v216)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v214 + 16))(v227, v212, v213);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v214 + 56))(v227, 0, 1, v213);
          goto LABEL_143;
        }
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v218 = *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64);
        v219 = v227;
      }
      else
      {
        if (!v216)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v214 + 24))(v227, v212, v213);
          goto LABEL_143;
        }
        (*(void (**)(void *, uint64_t))(v214 + 8))(v227, v213);
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v218 = *(_QWORD *)(*(_QWORD *)(v220 - 8) + 64);
        v219 = v227;
      }
      memcpy(v219, v212, v218);
LABEL_143:
      a3 = v237;
      v221 = *(int *)(v9 + 32);
      v222 = (_QWORD *)(v182 + v221);
      v223 = &v183[v221];
      *v222 = *v223;
      v222[1] = v223[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_64;
    }
    if (v66)
    {
      sub_224DDEAA0((uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v67 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_46;
    }
    *v52 = *v53;
    *((_QWORD *)v52 + 1) = *((_QWORD *)v53 + 1);
    *((_WORD *)v52 + 8) = *((_WORD *)v53 + 8);
    *((_WORD *)v52 + 9) = *((_WORD *)v53 + 9);
    v142 = (__int128 *)(v52 + 24);
    v143 = (__int128 *)(v53 + 24);
    v144 = *((_QWORD *)v53 + 7);
    v236 = a3;
    if (*((_QWORD *)v52 + 7) == 1)
    {
      if (v144 == 1)
      {
        v145 = *v143;
        v146 = *(_OWORD *)(v53 + 40);
        *((_QWORD *)v52 + 7) = *((_QWORD *)v53 + 7);
        *v142 = v145;
        *(_OWORD *)(v52 + 40) = v146;
      }
      else
      {
        v52[24] = v53[24];
        v52[25] = v53[25];
        v52[26] = v53[26];
        v167 = *(_OWORD *)(v53 + 28);
        *((_DWORD *)v52 + 11) = *((_DWORD *)v53 + 11);
        *(_OWORD *)(v52 + 28) = v167;
        *((_QWORD *)v52 + 6) = *((_QWORD *)v53 + 6);
        *((_QWORD *)v52 + 7) = *((_QWORD *)v53 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v144 == 1)
    {
      sub_224E2C9F4((uint64_t)(v52 + 24));
      v165 = *((_QWORD *)v53 + 7);
      v166 = *(_OWORD *)(v53 + 40);
      *v142 = *v143;
      *(_OWORD *)(v52 + 40) = v166;
      *((_QWORD *)v52 + 7) = v165;
    }
    else
    {
      v52[24] = v53[24];
      v52[25] = v53[25];
      v52[26] = v53[26];
      *((_DWORD *)v52 + 7) = *((_DWORD *)v53 + 7);
      *((_WORD *)v52 + 16) = *((_WORD *)v53 + 16);
      *((_WORD *)v52 + 17) = *((_WORD *)v53 + 17);
      *((_WORD *)v52 + 18) = *((_WORD *)v53 + 18);
      *((_WORD *)v52 + 19) = *((_WORD *)v53 + 19);
      *((_WORD *)v52 + 20) = *((_WORD *)v53 + 20);
      *((_WORD *)v52 + 21) = *((_WORD *)v53 + 21);
      *((_WORD *)v52 + 22) = *((_WORD *)v53 + 22);
      *((_WORD *)v52 + 23) = *((_WORD *)v53 + 23);
      *((_QWORD *)v52 + 6) = *((_QWORD *)v53 + 6);
      *((_QWORD *)v52 + 7) = *((_QWORD *)v53 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v168 = *(int *)(v9 + 28);
    v169 = &v52[v168];
    v170 = &v53[v168];
    v171 = sub_224F67874();
    v225 = *(_QWORD *)(v171 - 8);
    v172 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v225 + 48);
    __srcb = v169;
    LODWORD(v169) = v172(v169, 1, v171);
    v173 = v172(v170, 1, v171);
    if ((_DWORD)v169)
    {
      if (!v173)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v225 + 16))(__srcb, v170, v171);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v225 + 56))(__srcb, 0, 1, v171);
        goto LABEL_114;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v175 = *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64);
      v176 = __srcb;
    }
    else
    {
      if (!v173)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v225 + 24))(__srcb, v170, v171);
        goto LABEL_114;
      }
      (*(void (**)(void *, uint64_t))(v225 + 8))(__srcb, v171);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v175 = *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64);
      v176 = __srcb;
    }
    memcpy(v176, v170, v175);
LABEL_114:
    v178 = *(int *)(v9 + 32);
    v179 = &v52[v178];
    v180 = &v53[v178];
    *v179 = *v180;
    v179[1] = v180[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a3 = v236;
    goto LABEL_115;
  }
  if (v58)
  {
    v59 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_35:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v59);
    v61 = *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64);
    v62 = v52;
    v63 = v53;
LABEL_36:
    memcpy(v62, v63, v61);
    goto LABEL_64;
  }
  if (v240((uint64_t)v53, 1, v9))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
  }
  else
  {
    *v52 = *v53;
    v68 = *((_QWORD *)v53 + 1);
    *((_DWORD *)v52 + 4) = *((_DWORD *)v53 + 4);
    *((_QWORD *)v52 + 1) = v68;
    v232 = a3;
    if (*((_QWORD *)v53 + 7) == 1)
    {
      v69 = *(_OWORD *)(v53 + 24);
      v70 = *(_OWORD *)(v53 + 40);
      *((_QWORD *)v52 + 7) = *((_QWORD *)v53 + 7);
      *(_OWORD *)(v52 + 24) = v69;
      *(_OWORD *)(v52 + 40) = v70;
    }
    else
    {
      v52[24] = v53[24];
      v52[25] = v53[25];
      v52[26] = v53[26];
      v72 = *(_OWORD *)(v53 + 28);
      *((_DWORD *)v52 + 11) = *((_DWORD *)v53 + 11);
      *(_OWORD *)(v52 + 28) = v72;
      *((_QWORD *)v52 + 6) = *((_QWORD *)v53 + 6);
      *((_QWORD *)v52 + 7) = *((_QWORD *)v53 + 7);
      swift_bridgeObjectRetain();
    }
    v73 = *(int *)(v9 + 28);
    __src = &v52[v73];
    v74 = &v53[v73];
    v75 = sub_224F67874();
    v76 = *(_QWORD *)(v75 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__src, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v76 + 16))(__src, v74, v75);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v76 + 56))(__src, 0, 1, v75);
    }
    v81 = *(int *)(v9 + 32);
    v82 = &v52[v81];
    v83 = &v53[v81];
    *v82 = *v83;
    v82[1] = v83[1];
    a3 = v232;
    v84 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v238 + 56);
    swift_bridgeObjectRetain();
    v84(v52, 0, 1, v9);
  }
  v85 = *(int *)(v54 + 20);
  v86 = &v52[v85];
  v87 = &v53[v85];
  if (v240((uint64_t)v87, 1, v9))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    *v86 = *v87;
    v89 = *((_QWORD *)v87 + 1);
    *((_DWORD *)v86 + 4) = *((_DWORD *)v87 + 4);
    *((_QWORD *)v86 + 1) = v89;
    v234 = a3;
    if (*((_QWORD *)v87 + 7) == 1)
    {
      v90 = *(_OWORD *)(v87 + 24);
      v91 = *(_OWORD *)(v87 + 40);
      *((_QWORD *)v86 + 7) = *((_QWORD *)v87 + 7);
      *(_OWORD *)(v86 + 24) = v90;
      *(_OWORD *)(v86 + 40) = v91;
    }
    else
    {
      v86[24] = v87[24];
      v86[25] = v87[25];
      v86[26] = v87[26];
      v92 = *(_OWORD *)(v87 + 28);
      *((_DWORD *)v86 + 11) = *((_DWORD *)v87 + 11);
      *(_OWORD *)(v86 + 28) = v92;
      *((_QWORD *)v86 + 6) = *((_QWORD *)v87 + 6);
      *((_QWORD *)v86 + 7) = *((_QWORD *)v87 + 7);
      swift_bridgeObjectRetain();
    }
    v224 = v9;
    v93 = *(int *)(v9 + 28);
    __srca = &v86[v93];
    v94 = &v87[v93];
    v95 = sub_224F67874();
    v96 = *(_QWORD *)(v95 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__srca, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v96 + 16))(__srca, v94, v95);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v96 + 56))(__srca, 0, 1, v95);
    }
    v9 = v224;
    v98 = *(int *)(v224 + 32);
    v99 = &v86[v98];
    v100 = &v87[v98];
    *v99 = *v100;
    v99[1] = v100[1];
    a3 = v234;
    v101 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v238 + 56);
    swift_bridgeObjectRetain();
    v101(v86, 0, 1, v224);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
LABEL_64:
  v102 = a3[11];
  v103 = (uint64_t)a1 + v102;
  v104 = (char *)a2 + v102;
  v105 = v240((uint64_t)a1 + v102, 1, v9);
  v106 = v240((uint64_t)v104, 1, v9);
  if (!v105)
  {
    if (v106)
    {
      sub_224DDEAA0(v103, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v107 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_69;
    }
    *(_BYTE *)v103 = *v104;
    *(_QWORD *)(v103 + 8) = *((_QWORD *)v104 + 1);
    *(_WORD *)(v103 + 16) = *((_WORD *)v104 + 8);
    *(_WORD *)(v103 + 18) = *((_WORD *)v104 + 9);
    v112 = (__int128 *)(v103 + 24);
    v113 = (__int128 *)(v104 + 24);
    v114 = *((_QWORD *)v104 + 7);
    v235 = a3;
    if (*(_QWORD *)(v103 + 56) == 1)
    {
      if (v114 == 1)
      {
        v115 = *v113;
        v116 = *(_OWORD *)(v104 + 40);
        *(_QWORD *)(v103 + 56) = *((_QWORD *)v104 + 7);
        *v112 = v115;
        *(_OWORD *)(v103 + 40) = v116;
      }
      else
      {
        *(_BYTE *)(v103 + 24) = v104[24];
        *(_BYTE *)(v103 + 25) = v104[25];
        *(_BYTE *)(v103 + 26) = v104[26];
        v130 = *(_OWORD *)(v104 + 28);
        *(_DWORD *)(v103 + 44) = *((_DWORD *)v104 + 11);
        *(_OWORD *)(v103 + 28) = v130;
        *(_QWORD *)(v103 + 48) = *((_QWORD *)v104 + 6);
        *(_QWORD *)(v103 + 56) = *((_QWORD *)v104 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v114 == 1)
    {
      sub_224E2C9F4(v103 + 24);
      v128 = *((_QWORD *)v104 + 7);
      v129 = *(_OWORD *)(v104 + 40);
      *v112 = *v113;
      *(_OWORD *)(v103 + 40) = v129;
      *(_QWORD *)(v103 + 56) = v128;
    }
    else
    {
      *(_BYTE *)(v103 + 24) = v104[24];
      *(_BYTE *)(v103 + 25) = v104[25];
      *(_BYTE *)(v103 + 26) = v104[26];
      *(_DWORD *)(v103 + 28) = *((_DWORD *)v104 + 7);
      *(_WORD *)(v103 + 32) = *((_WORD *)v104 + 16);
      *(_WORD *)(v103 + 34) = *((_WORD *)v104 + 17);
      *(_WORD *)(v103 + 36) = *((_WORD *)v104 + 18);
      *(_WORD *)(v103 + 38) = *((_WORD *)v104 + 19);
      *(_WORD *)(v103 + 40) = *((_WORD *)v104 + 20);
      *(_WORD *)(v103 + 42) = *((_WORD *)v104 + 21);
      *(_WORD *)(v103 + 44) = *((_WORD *)v104 + 22);
      *(_WORD *)(v103 + 46) = *((_WORD *)v104 + 23);
      *(_QWORD *)(v103 + 48) = *((_QWORD *)v104 + 6);
      *(_QWORD *)(v103 + 56) = *((_QWORD *)v104 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v131 = *(int *)(v9 + 28);
    v132 = (void *)(v103 + v131);
    v133 = &v104[v131];
    v134 = sub_224F67874();
    v135 = *(_QWORD *)(v134 - 8);
    v136 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v135 + 48);
    v239 = v132;
    LODWORD(v132) = v136(v132, 1, v134);
    v137 = v136(v133, 1, v134);
    if ((_DWORD)v132)
    {
      if (!v137)
      {
        (*(void (**)(void *, char *, uint64_t))(v135 + 16))(v239, v133, v134);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v239, 0, 1, v134);
        goto LABEL_95;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v139 = *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64);
      v140 = v239;
    }
    else
    {
      if (!v137)
      {
        (*(void (**)(void *, char *, uint64_t))(v135 + 24))(v239, v133, v134);
        goto LABEL_95;
      }
      (*(void (**)(void *, uint64_t))(v135 + 8))(v239, v134);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v139 = *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64);
      v140 = v239;
    }
    memcpy(v140, v133, v139);
LABEL_95:
    a3 = v235;
    v147 = *(int *)(v9 + 32);
    v148 = (_QWORD *)(v103 + v147);
    v149 = &v104[v147];
    *v148 = *(_QWORD *)v149;
    v148[1] = *((_QWORD *)v149 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_96;
  }
  if (v106)
  {
    v107 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_69:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v107);
    memcpy((void *)v103, v104, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    goto LABEL_96;
  }
  *(_BYTE *)v103 = *v104;
  v109 = *((_QWORD *)v104 + 1);
  *(_DWORD *)(v103 + 16) = *((_DWORD *)v104 + 4);
  *(_QWORD *)(v103 + 8) = v109;
  if (*((_QWORD *)v104 + 7) == 1)
  {
    v110 = *(_OWORD *)(v104 + 24);
    v111 = *(_OWORD *)(v104 + 40);
    *(_QWORD *)(v103 + 56) = *((_QWORD *)v104 + 7);
    *(_OWORD *)(v103 + 24) = v110;
    *(_OWORD *)(v103 + 40) = v111;
  }
  else
  {
    *(_BYTE *)(v103 + 24) = v104[24];
    *(_BYTE *)(v103 + 25) = v104[25];
    *(_BYTE *)(v103 + 26) = v104[26];
    v117 = *(_OWORD *)(v104 + 28);
    *(_DWORD *)(v103 + 44) = *((_DWORD *)v104 + 11);
    *(_OWORD *)(v103 + 28) = v117;
    *(_QWORD *)(v103 + 48) = *((_QWORD *)v104 + 6);
    *(_QWORD *)(v103 + 56) = *((_QWORD *)v104 + 7);
    swift_bridgeObjectRetain();
  }
  v118 = *(int *)(v9 + 28);
  v119 = (void *)(v103 + v118);
  v120 = &v104[v118];
  v121 = sub_224F67874();
  v122 = *(_QWORD *)(v121 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v120, 1, v121))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v122 + 16))(v119, v120, v121);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v122 + 56))(v119, 0, 1, v121);
  }
  v124 = *(int *)(v9 + 32);
  v125 = (_QWORD *)(v103 + v124);
  v126 = &v104[v124];
  *v125 = *(_QWORD *)v126;
  v125[1] = *((_QWORD *)v126 + 1);
  v127 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v238 + 56);
  swift_bridgeObjectRetain();
  v127(v103, 0, 1, v9);
LABEL_96:
  v150 = a3[12];
  v151 = (_QWORD *)((char *)a1 + v150);
  v152 = (_QWORD *)((char *)a2 + v150);
  *v151 = *v152;
  v151[1] = v152[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ModelsDSTU2.DiagnosticReport(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD, _QWORD, _QWORD);
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v52;
  _BYTE *__dst;
  _BYTE *__dsta;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v58)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v59)(_QWORD, _QWORD, _QWORD);
  uint64_t v60;

  v3 = a3;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = a3[9];
  v9 = (_BYTE *)(a1 + v8);
  v10 = (_BYTE *)(a2 + v8);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v11 = type metadata accessor for FHIRDateTime();
  v60 = *(_QWORD *)(v11 - 8);
  v12 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v60 + 48);
  if (v12(v10, 1, v11))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v57 = v12;
    *v9 = *v10;
    *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
    *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
    *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
    v14 = *(int *)(v11 + 28);
    v15 = &v9[v14];
    v16 = &v10[v14];
    v17 = sub_224F67874();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    *(_OWORD *)&v9[*(int *)(v11 + 32)] = *(_OWORD *)&v10[*(int *)(v11 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v9, 0, 1, v11);
    v12 = v57;
  }
  v20 = v3[10];
  v21 = (_BYTE *)(a1 + v20);
  v22 = (_BYTE *)(a2 + v20);
  v23 = type metadata accessor for Period();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    if (v12(v22, 1, v11))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v55 = v24;
      v58 = v12;
      *v21 = *v22;
      *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
      *((_DWORD *)v21 + 4) = *((_DWORD *)v22 + 4);
      *(_OWORD *)(v21 + 24) = *(_OWORD *)(v22 + 24);
      *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
      *((_QWORD *)v21 + 7) = *((_QWORD *)v22 + 7);
      v27 = *(int *)(v11 + 28);
      __dst = &v21[v27];
      v28 = &v22[v27];
      v29 = sub_224F67874();
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v30 + 32))(__dst, v28, v29);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v29);
      }
      *(_OWORD *)&v21[*(int *)(v11 + 32)] = *(_OWORD *)&v22[*(int *)(v11 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v21, 0, 1, v11);
      v24 = v55;
      v12 = v58;
    }
    v32 = *(int *)(v23 + 20);
    v33 = &v21[v32];
    v34 = &v22[v32];
    if (v12(v34, 1, v11))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v52 = v3;
      v56 = v24;
      v59 = v12;
      *v33 = *v34;
      *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
      *((_DWORD *)v33 + 4) = *((_DWORD *)v34 + 4);
      *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
      *(_OWORD *)(v33 + 40) = *(_OWORD *)(v34 + 40);
      *((_QWORD *)v33 + 7) = *((_QWORD *)v34 + 7);
      v36 = *(int *)(v11 + 28);
      __dsta = &v33[v36];
      v37 = &v34[v36];
      v38 = sub_224F67874();
      v39 = *(_QWORD *)(v38 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dsta, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v39 + 32))(__dsta, v37, v38);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v39 + 56))(__dsta, 0, 1, v38);
      }
      v24 = v56;
      v3 = v52;
      *(_OWORD *)&v33[*(int *)(v11 + 32)] = *(_OWORD *)&v34[*(int *)(v11 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v33, 0, 1, v11);
      v12 = v59;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v41 = v3[11];
  v42 = (_BYTE *)(a1 + v41);
  v43 = (_BYTE *)(a2 + v41);
  if (v12(a2 + v41, 1, v11))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    *v42 = *v43;
    *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
    *((_DWORD *)v42 + 4) = *((_DWORD *)v43 + 4);
    *(_OWORD *)(v42 + 24) = *(_OWORD *)(v43 + 24);
    *(_OWORD *)(v42 + 40) = *(_OWORD *)(v43 + 40);
    *((_QWORD *)v42 + 7) = *((_QWORD *)v43 + 7);
    v45 = *(int *)(v11 + 28);
    v46 = &v42[v45];
    v47 = &v43[v45];
    v48 = sub_224F67874();
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v49 + 32))(v46, v47, v48);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    *(_OWORD *)&v42[*(int *)(v11 + 32)] = *(_OWORD *)&v43[*(int *)(v11 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v42, 0, 1, v11);
  }
  *(_OWORD *)(a1 + v3[12]) = *(_OWORD *)(a2 + v3[12]);
  return a1;
}

_QWORD *assignWithTake for ModelsDSTU2.DiagnosticReport(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void *, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  size_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(_BYTE *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  size_t v54;
  void *v55;
  const void *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  int v84;
  int v85;
  uint64_t (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  void *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  void *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(void *, uint64_t, uint64_t);
  int v102;
  uint64_t v103;
  size_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  _QWORD *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  _BYTE *v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t (*v124)(_BYTE *, uint64_t, uint64_t);
  int v125;
  uint64_t v126;
  size_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  int v138;
  int v139;
  uint64_t (*v140)(uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  void *v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  void *v151;
  _BYTE *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t (*v155)(void *, uint64_t, uint64_t);
  int v156;
  uint64_t v157;
  size_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  void *v169;
  _BYTE *__src;
  _BYTE *__srca;
  void *__srcb;
  int *v173;
  int *v174;
  int *v175;
  int *v176;
  int *v177;
  int *v178;
  uint64_t v179;
  void *v180;
  uint64_t (*v181)(uint64_t, uint64_t, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRelease();
  v10 = a2[10];
  a1[9] = a2[9];
  a1[10] = v10;
  swift_bridgeObjectRelease();
  v11 = a3[9];
  v12 = (uint64_t)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for FHIRDateTime();
  v179 = *(_QWORD *)(v14 - 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v179 + 48);
  v16 = v15(v12, 1, v14);
  v181 = v15;
  v17 = v15((uint64_t)v13, 1, v14);
  if (!v16)
  {
    if (v17)
    {
      sub_224DDEAA0(v12, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    *(_BYTE *)v12 = *v13;
    *(_QWORD *)(v12 + 8) = *((_QWORD *)v13 + 1);
    *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
    v173 = a3;
    if (*(_QWORD *)(v12 + 56) != 1)
    {
      v26 = *((_QWORD *)v13 + 7);
      if (v26 != 1)
      {
        *(_BYTE *)(v12 + 24) = v13[24];
        *(_WORD *)(v12 + 25) = *(_WORD *)(v13 + 25);
        *(_DWORD *)(v12 + 28) = *((_DWORD *)v13 + 7);
        *(_OWORD *)(v12 + 32) = *((_OWORD *)v13 + 2);
        *(_QWORD *)(v12 + 48) = *((_QWORD *)v13 + 6);
        *(_QWORD *)(v12 + 56) = v26;
        swift_bridgeObjectRelease();
LABEL_16:
        v28 = *(int *)(v14 + 28);
        v29 = (void *)(v12 + v28);
        v30 = &v13[v28];
        v31 = sub_224F67874();
        v32 = *(_QWORD *)(v31 - 8);
        v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
        v168 = v29;
        LODWORD(v29) = v33(v29, 1, v31);
        v34 = v33(v30, 1, v31);
        if ((_DWORD)v29)
        {
          if (!v34)
          {
            (*(void (**)(void *, char *, uint64_t))(v32 + 32))(v168, v30, v31);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v168, 0, 1, v31);
            goto LABEL_24;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v36 = *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64);
          v37 = v168;
        }
        else
        {
          if (!v34)
          {
            (*(void (**)(void *, char *, uint64_t))(v32 + 40))(v168, v30, v31);
            goto LABEL_24;
          }
          (*(void (**)(void *, uint64_t))(v32 + 8))(v168, v31);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v36 = *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64);
          v37 = v168;
        }
        memcpy(v37, v30, v36);
LABEL_24:
        a3 = v173;
        v39 = *(int *)(v14 + 32);
        v40 = (_QWORD *)(v12 + v39);
        v41 = &v13[v39];
        v43 = *(_QWORD *)v41;
        v42 = *((_QWORD *)v41 + 1);
        *v40 = v43;
        v40[1] = v42;
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      sub_224E2C9F4(v12 + 24);
    }
    v27 = *(_OWORD *)(v13 + 40);
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
    *(_OWORD *)(v12 + 40) = v27;
    *(_QWORD *)(v12 + 56) = *((_QWORD *)v13 + 7);
    goto LABEL_16;
  }
  if (v17)
  {
    v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v18);
    memcpy((void *)v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_25;
  }
  *(_BYTE *)v12 = *v13;
  *(_QWORD *)(v12 + 8) = *((_QWORD *)v13 + 1);
  *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
  *(_QWORD *)(v12 + 56) = *((_QWORD *)v13 + 7);
  v20 = *(int *)(v14 + 28);
  v21 = (void *)(v12 + v20);
  v22 = &v13[v20];
  v23 = sub_224F67874();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(_OWORD *)(v12 + *(int *)(v14 + 32)) = *(_OWORD *)&v13[*(int *)(v14 + 32)];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v179 + 56))(v12, 0, 1, v14);
LABEL_25:
  v44 = a3[10];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = type metadata accessor for Period();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (!v50)
  {
    if (v51)
    {
      sub_224DDEAA0((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v52 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_30;
    }
    v58 = v181((uint64_t)v45, 1, v14);
    v59 = v181((uint64_t)v46, 1, v14);
    if (v58)
    {
      if (v59)
      {
        v60 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_41:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v60);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
        goto LABEL_95;
      }
      v175 = a3;
      *v45 = *v46;
      *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
      *((_DWORD *)v45 + 4) = *((_DWORD *)v46 + 4);
      *(_OWORD *)(v45 + 24) = *(_OWORD *)(v46 + 24);
      *(_OWORD *)(v45 + 40) = *(_OWORD *)(v46 + 40);
      *((_QWORD *)v45 + 7) = *((_QWORD *)v46 + 7);
      v67 = *(int *)(v14 + 28);
      v68 = &v45[v67];
      v69 = &v46[v67];
      v70 = sub_224F67874();
      v71 = *(_QWORD *)(v70 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v71 + 32))(v68, v69, v70);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
      }
      *(_OWORD *)&v45[*(int *)(v14 + 32)] = *(_OWORD *)&v46[*(int *)(v14 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v179 + 56))(v45, 0, 1, v14);
LABEL_94:
      a3 = v175;
LABEL_95:
      v135 = *(int *)(v47 + 20);
      v136 = (uint64_t)&v45[v135];
      v137 = &v46[v135];
      v138 = v181(v136, 1, v14);
      v139 = v181((uint64_t)v137, 1, v14);
      if (v138)
      {
        if (!v139)
        {
          *(_BYTE *)v136 = *v137;
          *(_QWORD *)(v136 + 8) = *((_QWORD *)v137 + 1);
          *(_DWORD *)(v136 + 16) = *((_DWORD *)v137 + 4);
          *(_OWORD *)(v136 + 24) = *(_OWORD *)(v137 + 24);
          *(_OWORD *)(v136 + 40) = *(_OWORD *)(v137 + 40);
          *(_QWORD *)(v136 + 56) = *((_QWORD *)v137 + 7);
          v142 = *(int *)(v14 + 28);
          v143 = (void *)(v136 + v142);
          v144 = &v137[v142];
          v145 = sub_224F67874();
          v146 = *(_QWORD *)(v145 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v146 + 48))(v144, 1, v145))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v146 + 32))(v143, v144, v145);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
          }
          *(_OWORD *)(v136 + *(int *)(v14 + 32)) = *(_OWORD *)&v137[*(int *)(v14 + 32)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v179 + 56))(v136, 0, 1, v14);
          goto LABEL_53;
        }
        v140 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_100:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v140);
        v54 = *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64);
        v55 = (void *)v136;
        v56 = v137;
        goto LABEL_31;
      }
      if (v139)
      {
        sub_224DDEAA0(v136, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v140 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_100;
      }
      *(_BYTE *)v136 = *v137;
      *(_QWORD *)(v136 + 8) = *((_QWORD *)v137 + 1);
      *(_DWORD *)(v136 + 16) = *((_DWORD *)v137 + 4);
      v178 = a3;
      if (*(_QWORD *)(v136 + 56) != 1)
      {
        v148 = *((_QWORD *)v137 + 7);
        if (v148 != 1)
        {
          *(_BYTE *)(v136 + 24) = v137[24];
          *(_WORD *)(v136 + 25) = *(_WORD *)(v137 + 25);
          *(_DWORD *)(v136 + 28) = *((_DWORD *)v137 + 7);
          *(_OWORD *)(v136 + 32) = *((_OWORD *)v137 + 2);
          *(_QWORD *)(v136 + 48) = *((_QWORD *)v137 + 6);
          *(_QWORD *)(v136 + 56) = v148;
          swift_bridgeObjectRelease();
LABEL_110:
          v150 = *(int *)(v14 + 28);
          v151 = (void *)(v136 + v150);
          v152 = &v137[v150];
          v153 = sub_224F67874();
          v154 = *(_QWORD *)(v153 - 8);
          v155 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v154 + 48);
          v169 = v151;
          LODWORD(v151) = v155(v151, 1, v153);
          v156 = v155(v152, 1, v153);
          if ((_DWORD)v151)
          {
            if (!v156)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v154 + 32))(v169, v152, v153);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v154 + 56))(v169, 0, 1, v153);
              goto LABEL_118;
            }
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            v158 = *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64);
            v159 = v169;
          }
          else
          {
            if (!v156)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v154 + 40))(v169, v152, v153);
              goto LABEL_118;
            }
            (*(void (**)(void *, uint64_t))(v154 + 8))(v169, v153);
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            v158 = *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64);
            v159 = v169;
          }
          memcpy(v159, v152, v158);
LABEL_118:
          a3 = v178;
          v161 = *(int *)(v14 + 32);
          v162 = (_QWORD *)(v136 + v161);
          v163 = (uint64_t *)&v137[v161];
          v165 = *v163;
          v164 = v163[1];
          *v162 = v165;
          v162[1] = v164;
          swift_bridgeObjectRelease();
          goto LABEL_53;
        }
        sub_224E2C9F4(v136 + 24);
      }
      v149 = *(_OWORD *)(v137 + 40);
      *(_OWORD *)(v136 + 24) = *(_OWORD *)(v137 + 24);
      *(_OWORD *)(v136 + 40) = v149;
      *(_QWORD *)(v136 + 56) = *((_QWORD *)v137 + 7);
      goto LABEL_110;
    }
    if (v59)
    {
      sub_224DDEAA0((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v60 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_41;
    }
    *v45 = *v46;
    *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
    *((_DWORD *)v45 + 4) = *((_DWORD *)v46 + 4);
    v175 = a3;
    if (*((_QWORD *)v45 + 7) != 1)
    {
      v107 = *((_QWORD *)v46 + 7);
      if (v107 != 1)
      {
        v45[24] = v46[24];
        *(_WORD *)(v45 + 25) = *(_WORD *)(v46 + 25);
        *((_DWORD *)v45 + 7) = *((_DWORD *)v46 + 7);
        *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
        *((_QWORD *)v45 + 6) = *((_QWORD *)v46 + 6);
        *((_QWORD *)v45 + 7) = v107;
        swift_bridgeObjectRelease();
LABEL_85:
        v120 = *(int *)(v14 + 28);
        v121 = &v45[v120];
        v122 = &v46[v120];
        v123 = sub_224F67874();
        v167 = *(_QWORD *)(v123 - 8);
        v124 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v167 + 48);
        __srcb = v121;
        LODWORD(v121) = v124(v121, 1, v123);
        v125 = v124(v122, 1, v123);
        if ((_DWORD)v121)
        {
          if (!v125)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v167 + 32))(__srcb, v122, v123);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v167 + 56))(__srcb, 0, 1, v123);
            goto LABEL_93;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v127 = *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64);
          v128 = __srcb;
        }
        else
        {
          if (!v125)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v167 + 40))(__srcb, v122, v123);
            goto LABEL_93;
          }
          (*(void (**)(void *, uint64_t))(v167 + 8))(__srcb, v123);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v127 = *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64);
          v128 = __srcb;
        }
        memcpy(v128, v122, v127);
LABEL_93:
        v130 = *(int *)(v14 + 32);
        v131 = &v45[v130];
        v132 = (uint64_t *)&v46[v130];
        v134 = *v132;
        v133 = v132[1];
        *v131 = v134;
        v131[1] = v133;
        swift_bridgeObjectRelease();
        goto LABEL_94;
      }
      sub_224E2C9F4((uint64_t)(v45 + 24));
    }
    v108 = *(_OWORD *)(v46 + 40);
    *(_OWORD *)(v45 + 24) = *(_OWORD *)(v46 + 24);
    *(_OWORD *)(v45 + 40) = v108;
    *((_QWORD *)v45 + 7) = *((_QWORD *)v46 + 7);
    goto LABEL_85;
  }
  if (v51)
  {
    v52 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_30:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v52);
    v54 = *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64);
    v55 = v45;
    v56 = v46;
LABEL_31:
    memcpy(v55, v56, v54);
    goto LABEL_53;
  }
  if (v181((uint64_t)v46, 1, v14))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    *v45 = *v46;
    *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
    *((_DWORD *)v45 + 4) = *((_DWORD *)v46 + 4);
    *(_OWORD *)(v45 + 24) = *(_OWORD *)(v46 + 24);
    *(_OWORD *)(v45 + 40) = *(_OWORD *)(v46 + 40);
    *((_QWORD *)v45 + 7) = *((_QWORD *)v46 + 7);
    v61 = *(int *)(v14 + 28);
    __src = &v45[v61];
    v174 = a3;
    v62 = &v46[v61];
    v63 = sub_224F67874();
    v64 = *(_QWORD *)(v63 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__src, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v64 + 32))(__src, v62, v63);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v64 + 56))(__src, 0, 1, v63);
    }
    *(_OWORD *)&v45[*(int *)(v14 + 32)] = *(_OWORD *)&v46[*(int *)(v14 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v179 + 56))(v45, 0, 1, v14);
    a3 = v174;
  }
  v73 = *(int *)(v47 + 20);
  v74 = &v45[v73];
  v75 = &v46[v73];
  if (v181((uint64_t)v75, 1, v14))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
  }
  else
  {
    *v74 = *v75;
    *((_QWORD *)v74 + 1) = *((_QWORD *)v75 + 1);
    *((_DWORD *)v74 + 4) = *((_DWORD *)v75 + 4);
    *(_OWORD *)(v74 + 24) = *(_OWORD *)(v75 + 24);
    *(_OWORD *)(v74 + 40) = *(_OWORD *)(v75 + 40);
    *((_QWORD *)v74 + 7) = *((_QWORD *)v75 + 7);
    v77 = *(int *)(v14 + 28);
    __srca = &v74[v77];
    v176 = a3;
    v78 = &v75[v77];
    v79 = sub_224F67874();
    v166 = *(_QWORD *)(v79 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v166 + 48))(v78, 1, v79))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__srca, v78, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v166 + 32))(__srca, v78, v79);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v166 + 56))(__srca, 0, 1, v79);
    }
    *(_OWORD *)&v74[*(int *)(v14 + 32)] = *(_OWORD *)&v75[*(int *)(v14 + 32)];
    a3 = v176;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v179 + 56))(v74, 0, 1, v14);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
LABEL_53:
  v81 = a3[11];
  v82 = (uint64_t)a1 + v81;
  v83 = (char *)a2 + v81;
  v84 = v181((uint64_t)a1 + v81, 1, v14);
  v85 = v181((uint64_t)v83, 1, v14);
  if (!v84)
  {
    if (v85)
    {
      sub_224DDEAA0(v82, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v86 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_58;
    }
    *(_BYTE *)v82 = *v83;
    *(_QWORD *)(v82 + 8) = *((_QWORD *)v83 + 1);
    *(_DWORD *)(v82 + 16) = *((_DWORD *)v83 + 4);
    v177 = a3;
    if (*(_QWORD *)(v82 + 56) != 1)
    {
      v94 = *((_QWORD *)v83 + 7);
      if (v94 != 1)
      {
        *(_BYTE *)(v82 + 24) = v83[24];
        *(_WORD *)(v82 + 25) = *(_WORD *)(v83 + 25);
        *(_DWORD *)(v82 + 28) = *((_DWORD *)v83 + 7);
        *(_OWORD *)(v82 + 32) = *((_OWORD *)v83 + 2);
        *(_QWORD *)(v82 + 48) = *((_QWORD *)v83 + 6);
        *(_QWORD *)(v82 + 56) = v94;
        swift_bridgeObjectRelease();
LABEL_68:
        v96 = *(int *)(v14 + 28);
        v97 = (void *)(v82 + v96);
        v98 = &v83[v96];
        v99 = sub_224F67874();
        v100 = *(_QWORD *)(v99 - 8);
        v101 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v100 + 48);
        v180 = v97;
        LODWORD(v97) = v101(v97, 1, v99);
        v102 = v101(v98, 1, v99);
        if ((_DWORD)v97)
        {
          if (!v102)
          {
            (*(void (**)(void *, char *, uint64_t))(v100 + 32))(v180, v98, v99);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v180, 0, 1, v99);
            goto LABEL_80;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v104 = *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64);
          v105 = v180;
        }
        else
        {
          if (!v102)
          {
            (*(void (**)(void *, char *, uint64_t))(v100 + 40))(v180, v98, v99);
            goto LABEL_80;
          }
          (*(void (**)(void *, uint64_t))(v100 + 8))(v180, v99);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v104 = *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64);
          v105 = v180;
        }
        memcpy(v105, v98, v104);
LABEL_80:
        a3 = v177;
        v109 = *(int *)(v14 + 32);
        v110 = (_QWORD *)(v82 + v109);
        v111 = &v83[v109];
        v113 = *(_QWORD *)v111;
        v112 = *((_QWORD *)v111 + 1);
        *v110 = v113;
        v110[1] = v112;
        swift_bridgeObjectRelease();
        goto LABEL_81;
      }
      sub_224E2C9F4(v82 + 24);
    }
    v95 = *(_OWORD *)(v83 + 40);
    *(_OWORD *)(v82 + 24) = *(_OWORD *)(v83 + 24);
    *(_OWORD *)(v82 + 40) = v95;
    *(_QWORD *)(v82 + 56) = *((_QWORD *)v83 + 7);
    goto LABEL_68;
  }
  if (v85)
  {
    v86 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_58:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v86);
    memcpy((void *)v82, v83, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    goto LABEL_81;
  }
  *(_BYTE *)v82 = *v83;
  *(_QWORD *)(v82 + 8) = *((_QWORD *)v83 + 1);
  *(_DWORD *)(v82 + 16) = *((_DWORD *)v83 + 4);
  *(_OWORD *)(v82 + 24) = *(_OWORD *)(v83 + 24);
  *(_OWORD *)(v82 + 40) = *(_OWORD *)(v83 + 40);
  *(_QWORD *)(v82 + 56) = *((_QWORD *)v83 + 7);
  v88 = *(int *)(v14 + 28);
  v89 = (void *)(v82 + v88);
  v90 = &v83[v88];
  v91 = sub_224F67874();
  v92 = *(_QWORD *)(v91 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v92 + 32))(v89, v90, v91);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
  }
  *(_OWORD *)(v82 + *(int *)(v14 + 32)) = *(_OWORD *)&v83[*(int *)(v14 + 32)];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v179 + 56))(v82, 0, 1, v14);
LABEL_81:
  v114 = a3[12];
  v115 = (_QWORD *)((char *)a1 + v114);
  v116 = (_QWORD *)((char *)a2 + v114);
  v118 = *v116;
  v117 = v116[1];
  *v115 = v118;
  v115[1] = v117;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.DiagnosticReport()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224EBD140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.DiagnosticReport()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224EBD21C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_224EBD2E8()
{
  unint64_t v0;
  unint64_t v1;

  sub_224DDEA0C(319, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_224DDEA0C(319, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ModelsDSTU2.Immunization(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_BYTE *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v31)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int (*v47)(_QWORD *, uint64_t, int *);
  unsigned int (*v48)(_QWORD *, uint64_t, int *);
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  void (*v72)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(_QWORD *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  void (*v101)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  char *v107;
  _QWORD *v108;
  char *v109;
  unsigned int (*v110)(_QWORD *, uint64_t, int *);
  uint64_t v111;
  uint64_t v112;
  int *v113;
  _BYTE *__dst;
  int *__dsta;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 != 1)
      swift_bridgeObjectRetain();
    v10 = a2[5];
    v11 = a2[6];
    a1[4] = v9;
    a1[5] = v10;
    a1[6] = v11;
    v12 = a3[8];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for FHIRDateTime();
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain();
    if (v17(v14, 1, v15))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v13 = *v14;
      *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
      *((_DWORD *)v13 + 4) = *((_DWORD *)v14 + 4);
      v20 = *((_QWORD *)v14 + 7);
      if (v20 == 1)
      {
        v21 = *(_OWORD *)(v14 + 40);
        *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
        *(_OWORD *)(v13 + 40) = v21;
        *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
      }
      else
      {
        v13[24] = v14[24];
        *(_WORD *)(v13 + 25) = *(_WORD *)(v14 + 25);
        *(_OWORD *)(v13 + 28) = *(_OWORD *)(v14 + 28);
        *((_DWORD *)v13 + 11) = *((_DWORD *)v14 + 11);
        *((_QWORD *)v13 + 6) = *((_QWORD *)v14 + 6);
        *((_QWORD *)v13 + 7) = v20;
        swift_bridgeObjectRetain();
      }
      v22 = *(int *)(v15 + 28);
      __dst = &v13[v22];
      v23 = &v14[v22];
      v24 = sub_224F67874();
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v25 + 16))(__dst, v23, v24);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v24);
      }
      v27 = *(int *)(v15 + 32);
      v28 = &v13[v27];
      v29 = &v14[v27];
      v30 = v29[1];
      *v28 = *v29;
      v28[1] = v30;
      v31 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56);
      swift_bridgeObjectRetain();
      v31(v13, 0, 1, v15);
    }
    v32 = a3[9];
    v33 = a3[10];
    v34 = (_QWORD *)((char *)a1 + v32);
    v35 = (_QWORD *)((char *)a2 + v32);
    *v34 = *v35;
    *(_QWORD *)((char *)v34 + 5) = *(_QWORD *)((char *)v35 + 5);
    *(_QWORD *)((char *)a1 + v33) = *(_QWORD *)((char *)a2 + v33);
    v36 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *(_QWORD *)((char *)a1 + v36) = *(_QWORD *)((char *)a2 + v36);
    v37 = a3[13];
    v38 = a3[14];
    v39 = (_QWORD *)((char *)a1 + v37);
    v40 = (_QWORD *)((char *)a2 + v37);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = v40[2];
    LOBYTE(v40) = *((_BYTE *)a2 + v38);
    v39[2] = v42;
    *((_BYTE *)a1 + v38) = (_BYTE)v40;
    v113 = a3;
    v43 = a3[15];
    v44 = (_QWORD *)((char *)a1 + v43);
    v45 = (_QWORD *)((char *)a2 + v43);
    v46 = type metadata accessor for Reference();
    v112 = *(_QWORD *)(v46 - 8);
    v47 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v112 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48 = v47;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __dsta = (int *)v46;
    if (v47(v45, 1, (int *)v46))
    {
      sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      v50 = v113;
    }
    else
    {
      v110 = v47;
      v51 = v45[1];
      *v44 = *v45;
      v44[1] = v51;
      v52 = v45[3];
      v44[2] = v45[2];
      v44[3] = v52;
      v53 = *(int *)(v46 + 24);
      v54 = (_QWORD *)((char *)v44 + v53);
      v55 = (_QWORD *)((char *)v45 + v53);
      v56 = type metadata accessor for Identifier();
      v57 = *(_QWORD *)(v56 - 8);
      v58 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v57 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v59 = v44;
      if (v58(v55, 1, v56))
      {
        sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        v48 = v110;
        v50 = v113;
      }
      else
      {
        v61 = v55[1];
        *v54 = *v55;
        v54[1] = v61;
        v62 = v55[3];
        swift_bridgeObjectRetain();
        v50 = v113;
        v108 = v59;
        if (v62 == 1)
        {
          *((_OWORD *)v54 + 1) = *((_OWORD *)v55 + 1);
          v54[4] = v55[4];
        }
        else
        {
          v54[2] = v55[2];
          v54[3] = v62;
          v54[4] = v55[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v63 = *(int *)(v56 + 24);
        v107 = (char *)v54 + v63;
        v64 = (char *)v55 + v63;
        v65 = sub_224F675D4();
        v66 = *(_QWORD *)(v65 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v107, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v107, v64, v65);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v107, 0, 1, v65);
        }
        v59 = v108;
        v48 = v110;
        v68 = *(int *)(v56 + 28);
        v69 = (_QWORD *)((char *)v54 + v68);
        v70 = (_QWORD *)((char *)v55 + v68);
        v71 = v70[1];
        *v69 = *v70;
        v69[1] = v71;
        v72 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v57 + 56);
        swift_bridgeObjectRetain();
        v72(v54, 0, 1, v56);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v112 + 56))(v59, 0, 1, __dsta);
    }
    v73 = v50[16];
    v74 = v50[17];
    v75 = (_QWORD *)((char *)a1 + v73);
    v76 = (_QWORD *)((char *)a2 + v73);
    v77 = v76[1];
    *v75 = *v76;
    v75[1] = v77;
    v78 = (_QWORD *)((char *)a1 + v74);
    v79 = (_QWORD *)((char *)a2 + v74);
    swift_bridgeObjectRetain();
    if (v48(v79, 1, __dsta))
    {
      sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    }
    else
    {
      v81 = v79[1];
      *v78 = *v79;
      v78[1] = v81;
      v82 = v79[3];
      v78[2] = v79[2];
      v78[3] = v82;
      v83 = __dsta[6];
      v84 = (_QWORD *)((char *)v78 + v83);
      v85 = (_QWORD *)((char *)v79 + v83);
      v86 = type metadata accessor for Identifier();
      v87 = *(_QWORD *)(v86 - 8);
      v88 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v87 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v88(v85, 1, v86))
      {
        sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
        v50 = v113;
      }
      else
      {
        v111 = v87;
        v90 = v85[1];
        *v84 = *v85;
        v84[1] = v90;
        v91 = v85[3];
        swift_bridgeObjectRetain();
        if (v91 == 1)
        {
          *((_OWORD *)v84 + 1) = *((_OWORD *)v85 + 1);
          v84[4] = v85[4];
        }
        else
        {
          v84[2] = v85[2];
          v84[3] = v91;
          v84[4] = v85[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v50 = v113;
        v92 = *(int *)(v86 + 24);
        v109 = (char *)v84 + v92;
        v93 = (char *)v85 + v92;
        v94 = sub_224F675D4();
        v95 = *(_QWORD *)(v94 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v109, v93, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v109, v93, v94);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v109, 0, 1, v94);
        }
        v97 = *(int *)(v86 + 28);
        v98 = (_QWORD *)((char *)v84 + v97);
        v99 = (_QWORD *)((char *)v85 + v97);
        v100 = v99[1];
        *v98 = *v99;
        v98[1] = v100;
        v101 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v111 + 56);
        swift_bridgeObjectRetain();
        v101(v84, 0, 1, v86);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v112 + 56))(v78, 0, 1, __dsta);
    }
    v102 = v50[18];
    v103 = (_QWORD *)((char *)a1 + v102);
    v104 = (_QWORD *)((char *)a2 + v102);
    v105 = v104[1];
    *v103 = *v104;
    v103[1] = v105;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ModelsDSTU2.Immunization(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32) != 1)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[8];
  v5 = type metadata accessor for FHIRDateTime();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (*(_QWORD *)(v4 + 56) != 1)
      swift_bridgeObjectRelease();
    v6 = v4 + *(int *)(v5 + 28);
    v7 = sub_224F67874();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = a1 + a2[15];
  v10 = type metadata accessor for Reference();
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  if (!v11(v9, 1, v10))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = v9 + *(int *)(v10 + 24);
    v13 = type metadata accessor for Identifier();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
    {
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v12 + 24) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v14 = v12 + *(int *)(v13 + 24);
      v15 = sub_224F675D4();
      v16 = *(_QWORD *)(v15 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  v17 = a1 + a2[17];
  if (!v11(v17, 1, v10))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 = v17 + *(int *)(v10 + 24);
    v19 = type metadata accessor for Identifier();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))
    {
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v18 + 24) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v20 = v18 + *(int *)(v19 + 24);
      v21 = sub_224F675D4();
      v22 = *(_QWORD *)(v21 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
      swift_bridgeObjectRelease();
    }
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ModelsDSTU2.Immunization(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(_BYTE *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int (*v45)(_QWORD, _QWORD, _QWORD);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int (*v53)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int (*v84)(_QWORD *, uint64_t, uint64_t);
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  char *v106;
  _QWORD *v107;
  char *v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  void *v112;
  _QWORD *v113;
  void *__src;
  void *__srca;
  _BYTE *__dst;
  _QWORD *__dsta;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1)
    swift_bridgeObjectRetain();
  v9 = a2[5];
  v10 = a2[6];
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  v11 = a3[8];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for FHIRDateTime();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48);
  swift_bridgeObjectRetain();
  if (v16(v13, 1, v14))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
    *((_DWORD *)v12 + 4) = *((_DWORD *)v13 + 4);
    v18 = *((_QWORD *)v13 + 7);
    if (v18 == 1)
    {
      v19 = *(_OWORD *)(v13 + 40);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
      *(_OWORD *)(v12 + 40) = v19;
      *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
    }
    else
    {
      v12[24] = v13[24];
      *(_WORD *)(v12 + 25) = *(_WORD *)(v13 + 25);
      *(_OWORD *)(v12 + 28) = *(_OWORD *)(v13 + 28);
      *((_DWORD *)v12 + 11) = *((_DWORD *)v13 + 11);
      *((_QWORD *)v12 + 6) = *((_QWORD *)v13 + 6);
      *((_QWORD *)v12 + 7) = v18;
      swift_bridgeObjectRetain();
    }
    v20 = *(int *)(v14 + 28);
    __dst = &v12[v20];
    v21 = &v13[v20];
    v22 = sub_224F67874();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v23 + 16))(__dst, v21, v22);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
    }
    v25 = *(int *)(v14 + 32);
    v26 = &v12[v25];
    v27 = &v13[v25];
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56);
    swift_bridgeObjectRetain();
    v29(v12, 0, 1, v14);
  }
  v30 = a3[9];
  v31 = a3[10];
  v32 = (_QWORD *)((char *)a1 + v30);
  v33 = (_QWORD *)((char *)a2 + v30);
  *v32 = *v33;
  *(_QWORD *)((char *)v32 + 5) = *(_QWORD *)((char *)v33 + 5);
  *(_QWORD *)((char *)a1 + v31) = *(_QWORD *)((char *)a2 + v31);
  v34 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + v34) = *(_QWORD *)((char *)a2 + v34);
  v35 = a3[13];
  v36 = a3[14];
  v37 = (_QWORD *)((char *)a1 + v35);
  v38 = (_QWORD *)((char *)a2 + v35);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v40 = v38[2];
  LOBYTE(v38) = *((_BYTE *)a2 + v36);
  v37[2] = v40;
  *((_BYTE *)a1 + v36) = (_BYTE)v38;
  v41 = a3[15];
  v42 = (_QWORD *)((char *)a1 + v41);
  v43 = (_QWORD *)((char *)a2 + v41);
  v44 = type metadata accessor for Reference();
  __dsta = *(_QWORD **)(v44 - 8);
  v45 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dsta[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v45(v43, 1, v44))
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    v112 = v45;
    __src = (void *)v44;
    v47 = v43[1];
    *v42 = *v43;
    v42[1] = v47;
    v48 = v43[3];
    v42[2] = v43[2];
    v42[3] = v48;
    v49 = *(int *)(v44 + 24);
    v111 = (_QWORD *)((char *)v42 + v49);
    v50 = (_QWORD *)((char *)v43 + v49);
    v51 = type metadata accessor for Identifier();
    v52 = *(_QWORD **)(v51 - 8);
    v53 = (unsigned int (*)(_QWORD *, uint64_t, uint64_t))v52[6];
    swift_bridgeObjectRetain();
    v54 = v50;
    swift_bridgeObjectRetain();
    if (v53(v50, 1, v51))
    {
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v111, v50, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      v44 = (uint64_t)__src;
    }
    else
    {
      v107 = v52;
      v56 = v50[1];
      *v111 = *v50;
      v111[1] = v56;
      v57 = v50[3];
      swift_bridgeObjectRetain();
      v109 = v50;
      if (v57 == 1)
      {
        *((_OWORD *)v111 + 1) = *((_OWORD *)v50 + 1);
        v111[4] = v50[4];
      }
      else
      {
        v111[2] = v50[2];
        v111[3] = v57;
        v111[4] = v50[4];
        swift_bridgeObjectRetain();
        v54 = v50;
        swift_bridgeObjectRetain();
      }
      v58 = v51;
      v44 = (uint64_t)__src;
      v59 = *(int *)(v51 + 24);
      v106 = (char *)v111 + v59;
      v60 = (char *)v54 + v59;
      v61 = sub_224F675D4();
      v62 = *(_QWORD *)(v61 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v106, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v106, v60, v61);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v106, 0, 1, v61);
      }
      v64 = *(int *)(v58 + 28);
      v65 = (_QWORD *)((char *)v111 + v64);
      v66 = (_QWORD *)((char *)v109 + v64);
      v67 = v66[1];
      *v65 = *v66;
      v65[1] = v67;
      v68 = v58;
      v69 = (void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v107[7];
      swift_bridgeObjectRetain();
      v69(v111, 0, 1, v68);
    }
    ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))__dsta[7])(v42, 0, 1, v44);
    v45 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v112;
  }
  v70 = a3[16];
  v71 = a3[17];
  v72 = (_QWORD *)((char *)a1 + v70);
  v73 = (_QWORD *)((char *)a2 + v70);
  v74 = v73[1];
  *v72 = *v73;
  v72[1] = v74;
  v75 = (_QWORD *)((char *)a1 + v71);
  v76 = (_QWORD *)((char *)a2 + v71);
  swift_bridgeObjectRetain();
  if (v45(v76, 1, v44))
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
  }
  else
  {
    v78 = v76[1];
    *v75 = *v76;
    v75[1] = v78;
    v79 = v76[3];
    v75[2] = v76[2];
    v75[3] = v79;
    v80 = *(int *)(v44 + 24);
    v113 = (_QWORD *)((char *)v75 + v80);
    __srca = (void *)v44;
    v81 = (_QWORD *)((char *)v76 + v80);
    v82 = type metadata accessor for Identifier();
    v83 = *(_QWORD *)(v82 - 8);
    v84 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v83 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v84(v81, 1, v82))
    {
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v113, v81, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      v86 = __srca;
    }
    else
    {
      v110 = v83;
      v87 = v81[1];
      *v113 = *v81;
      v113[1] = v87;
      v88 = v81[3];
      swift_bridgeObjectRetain();
      if (v88 == 1)
      {
        *((_OWORD *)v113 + 1) = *((_OWORD *)v81 + 1);
        v113[4] = v81[4];
      }
      else
      {
        v113[2] = v81[2];
        v113[3] = v88;
        v113[4] = v81[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v89 = v82;
      v86 = __srca;
      v90 = *(int *)(v82 + 24);
      v108 = (char *)v113 + v90;
      v91 = (char *)v81 + v90;
      v92 = sub_224F675D4();
      v93 = *(_QWORD *)(v92 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v108, v91, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v108, v91, v92);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v108, 0, 1, v92);
      }
      v95 = *(int *)(v89 + 28);
      v96 = (_QWORD *)((char *)v113 + v95);
      v97 = (_QWORD *)((char *)v81 + v95);
      v98 = v97[1];
      *v96 = *v97;
      v96[1] = v98;
      v99 = v89;
      v100 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v110 + 56);
      swift_bridgeObjectRetain();
      v100(v113, 0, 1, v99);
    }
    ((void (*)(_QWORD *, _QWORD, uint64_t, void *))__dsta[7])(v75, 0, 1, v86);
  }
  v101 = a3[18];
  v102 = (_QWORD *)((char *)a1 + v101);
  v103 = (_QWORD *)((char *)a2 + v101);
  v104 = v103[1];
  *v102 = *v103;
  v102[1] = v104;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ModelsDSTU2.Immunization(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  void (*v37)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void *, uint64_t, uint64_t);
  int v47;
  uint64_t v48;
  size_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  __int128 *v63;
  __int128 *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t (*v67)(__int128 *, uint64_t, uint64_t);
  int v68;
  int v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  size_t v72;
  __int128 *v73;
  __int128 *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(_QWORD *, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  __int128 *v83;
  __int128 *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(__int128 *, uint64_t, uint64_t);
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  void (*v106)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  int v113;
  int v114;
  uint64_t (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  size_t v117;
  void *v118;
  const void *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int (*v124)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(uint64_t, uint64_t, uint64_t);
  int v133;
  int v134;
  uint64_t (*v135)(uint64_t, uint64_t);
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  void (*v151)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  __int128 *v156;
  __int128 *v157;
  uint64_t v158;
  __int128 v159;
  __int128 *v160;
  __int128 *v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  void (*v178)(__int128 *, _QWORD, uint64_t, uint64_t);
  uint64_t v179;
  _QWORD *v180;
  char *v181;
  void (*v182)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t (*v188)(char *, uint64_t, uint64_t);
  int v189;
  uint64_t v190;
  size_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t (*v199)(void *, uint64_t, uint64_t);
  int v200;
  uint64_t v201;
  size_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  _QWORD *v209;
  char *v210;
  uint64_t v211;
  _QWORD *v212;
  __int128 *v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  void *__dst;
  void *__dsta;
  _QWORD *__dstb;
  char *__dstc;
  char *__dstd;
  void *__dste;
  _QWORD *__src;
  _QWORD *__srca;
  void *__srcb;
  int *v226;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 4;
  v7 = a2[4];
  if (a1[4] == 1)
  {
    if (v7 == 1)
    {
      v8 = 1;
LABEL_6:
      *v6 = v8;
      goto LABEL_9;
    }
    *v6 = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v7 == 1)
    {
      sub_224E2C98C((uint64_t)(a1 + 4));
      v8 = a2[4];
      goto LABEL_6;
    }
    *v6 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = a3[8];
  v10 = (uint64_t)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for FHIRDateTime();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  v226 = a3;
  if (!v15)
  {
    if (v16)
    {
      sub_224DDEAA0(v10, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_14;
    }
    *(_BYTE *)v10 = *v11;
    *(_QWORD *)(v10 + 8) = *((_QWORD *)v11 + 1);
    *(_WORD *)(v10 + 16) = *((_WORD *)v11 + 8);
    *(_WORD *)(v10 + 18) = *((_WORD *)v11 + 9);
    v22 = (__int128 *)(v10 + 24);
    v23 = (__int128 *)(v11 + 24);
    v24 = *((_QWORD *)v11 + 7);
    if (*(_QWORD *)(v10 + 56) == 1)
    {
      if (v24 == 1)
      {
        v25 = *v23;
        v26 = *(_OWORD *)(v11 + 40);
        *(_QWORD *)(v10 + 56) = *((_QWORD *)v11 + 7);
        *v22 = v25;
        *(_OWORD *)(v10 + 40) = v26;
      }
      else
      {
        *(_BYTE *)(v10 + 24) = v11[24];
        *(_BYTE *)(v10 + 25) = v11[25];
        *(_BYTE *)(v10 + 26) = v11[26];
        v40 = *(_OWORD *)(v11 + 28);
        *(_DWORD *)(v10 + 44) = *((_DWORD *)v11 + 11);
        *(_OWORD *)(v10 + 28) = v40;
        *(_QWORD *)(v10 + 48) = *((_QWORD *)v11 + 6);
        *(_QWORD *)(v10 + 56) = *((_QWORD *)v11 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v24 == 1)
    {
      sub_224E2C9F4(v10 + 24);
      v38 = *((_QWORD *)v11 + 7);
      v39 = *(_OWORD *)(v11 + 40);
      *v22 = *v23;
      *(_OWORD *)(v10 + 40) = v39;
      *(_QWORD *)(v10 + 56) = v38;
    }
    else
    {
      *(_BYTE *)(v10 + 24) = v11[24];
      *(_BYTE *)(v10 + 25) = v11[25];
      *(_BYTE *)(v10 + 26) = v11[26];
      *(_DWORD *)(v10 + 28) = *((_DWORD *)v11 + 7);
      *(_WORD *)(v10 + 32) = *((_WORD *)v11 + 16);
      *(_WORD *)(v10 + 34) = *((_WORD *)v11 + 17);
      *(_WORD *)(v10 + 36) = *((_WORD *)v11 + 18);
      *(_WORD *)(v10 + 38) = *((_WORD *)v11 + 19);
      *(_WORD *)(v10 + 40) = *((_WORD *)v11 + 20);
      *(_WORD *)(v10 + 42) = *((_WORD *)v11 + 21);
      *(_WORD *)(v10 + 44) = *((_WORD *)v11 + 22);
      *(_WORD *)(v10 + 46) = *((_WORD *)v11 + 23);
      *(_QWORD *)(v10 + 48) = *((_QWORD *)v11 + 6);
      *(_QWORD *)(v10 + 56) = *((_QWORD *)v11 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v41 = *(int *)(v12 + 28);
    v42 = (void *)(v10 + v41);
    v43 = &v11[v41];
    v44 = sub_224F67874();
    v45 = *(_QWORD *)(v44 - 8);
    v46 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v45 + 48);
    __dst = v42;
    LODWORD(v42) = v46(v42, 1, v44);
    v47 = v46(v43, 1, v44);
    if ((_DWORD)v42)
    {
      if (!v47)
      {
        (*(void (**)(void *, char *, uint64_t))(v45 + 16))(__dst, v43, v44);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(__dst, 0, 1, v44);
        goto LABEL_37;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v49 = *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64);
      v50 = __dst;
    }
    else
    {
      if (!v47)
      {
        (*(void (**)(void *, char *, uint64_t))(v45 + 24))(__dst, v43, v44);
        goto LABEL_37;
      }
      (*(void (**)(void *, uint64_t))(v45 + 8))(__dst, v44);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v49 = *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64);
      v50 = __dst;
    }
    memcpy(v50, v43, v49);
LABEL_37:
    a3 = v226;
    v52 = *(int *)(v12 + 32);
    v53 = (_QWORD *)(v10 + v52);
    v54 = &v11[v52];
    *v53 = *(_QWORD *)v54;
    v53[1] = *((_QWORD *)v54 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  if (v16)
  {
    v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_14:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v17);
    memcpy((void *)v10, v11, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_38;
  }
  *(_BYTE *)v10 = *v11;
  v19 = *((_QWORD *)v11 + 1);
  *(_DWORD *)(v10 + 16) = *((_DWORD *)v11 + 4);
  *(_QWORD *)(v10 + 8) = v19;
  if (*((_QWORD *)v11 + 7) == 1)
  {
    v20 = *(_OWORD *)(v11 + 24);
    v21 = *(_OWORD *)(v11 + 40);
    *(_QWORD *)(v10 + 56) = *((_QWORD *)v11 + 7);
    *(_OWORD *)(v10 + 24) = v20;
    *(_OWORD *)(v10 + 40) = v21;
  }
  else
  {
    *(_BYTE *)(v10 + 24) = v11[24];
    *(_BYTE *)(v10 + 25) = v11[25];
    *(_BYTE *)(v10 + 26) = v11[26];
    v27 = *(_OWORD *)(v11 + 28);
    *(_DWORD *)(v10 + 44) = *((_DWORD *)v11 + 11);
    *(_OWORD *)(v10 + 28) = v27;
    *(_QWORD *)(v10 + 48) = *((_QWORD *)v11 + 6);
    *(_QWORD *)(v10 + 56) = *((_QWORD *)v11 + 7);
    swift_bridgeObjectRetain();
  }
  v28 = *(int *)(v12 + 28);
  v29 = (void *)(v10 + v28);
  v30 = &v11[v28];
  v31 = sub_224F67874();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  a3 = v226;
  v34 = *(int *)(v12 + 32);
  v35 = (_QWORD *)(v10 + v34);
  v36 = &v11[v34];
  *v35 = *(_QWORD *)v36;
  v35[1] = *((_QWORD *)v36 + 1);
  v37 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v13 + 56);
  swift_bridgeObjectRetain();
  v37(v10, 0, 1, v12);
LABEL_38:
  v55 = a3[9];
  v56 = (_QWORD *)((char *)a1 + v55);
  v57 = (_QWORD *)((char *)a2 + v55);
  v58 = *v57;
  *(_QWORD *)((char *)v56 + 5) = *(uint64_t *)((char *)v57 + 5);
  *v56 = v58;
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59 = a3[13];
  v60 = (_QWORD *)((char *)a1 + v59);
  v61 = (char *)a2 + v59;
  *v60 = *(_QWORD *)((char *)a2 + v59);
  v60[1] = *(_QWORD *)((char *)a2 + v59 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v60[2] = *((_QWORD *)v61 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  v62 = a3[15];
  v63 = (__int128 *)((char *)a1 + v62);
  v64 = (__int128 *)((char *)a2 + v62);
  v65 = type metadata accessor for Reference();
  v66 = *(_QWORD **)(v65 - 8);
  v67 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v66[6];
  v68 = v67(v63, 1, v65);
  v69 = v67(v64, 1, v65);
  if (!v68)
  {
    if (v69)
    {
      sub_224DDEAA0((uint64_t)v63, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      v70 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_43;
    }
    __srca = v66;
    *(_QWORD *)v63 = *(_QWORD *)v64;
    *((_QWORD *)v63 + 1) = *((_QWORD *)v64 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v63 + 2) = *((_QWORD *)v64 + 2);
    *((_QWORD *)v63 + 3) = *((_QWORD *)v64 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v82 = *(int *)(v65 + 24);
    v83 = (__int128 *)((char *)v63 + v82);
    v84 = (__int128 *)((char *)v64 + v82);
    v85 = type metadata accessor for Identifier();
    v86 = *(_QWORD *)(v85 - 8);
    v87 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v86 + 48);
    v88 = v87(v83, 1, v85);
    v89 = v87(v84, 1, v85);
    if (v88)
    {
      v66 = __srca;
      if (v89)
      {
        sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
        a3 = v226;
      }
      else
      {
        *(_QWORD *)v83 = *(_QWORD *)v84;
        *((_QWORD *)v83 + 1) = *((_QWORD *)v84 + 1);
        v101 = *((_QWORD *)v84 + 3);
        swift_bridgeObjectRetain();
        if (v101 == 1)
        {
          v102 = v84[1];
          *((_QWORD *)v83 + 4) = *((_QWORD *)v84 + 4);
          v83[1] = v102;
        }
        else
        {
          *((_QWORD *)v83 + 2) = *((_QWORD *)v84 + 2);
          *((_QWORD *)v83 + 3) = *((_QWORD *)v84 + 3);
          *((_QWORD *)v83 + 4) = *((_QWORD *)v84 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v164 = *(int *)(v85 + 24);
        __dstc = (char *)v83 + v164;
        v213 = v84;
        v165 = (char *)v84 + v164;
        v166 = sub_224F675D4();
        v167 = *(_QWORD *)(v166 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48))(v165, 1, v166))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(__dstc, v165, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v167 + 16))(__dstc, v165, v166);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v167 + 56))(__dstc, 0, 1, v166);
        }
        v66 = __srca;
        v175 = *(int *)(v85 + 28);
        v176 = (_QWORD *)((char *)v83 + v175);
        v177 = (_QWORD *)((char *)v213 + v175);
        *v176 = *v177;
        v176[1] = v177[1];
        v178 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v86 + 56);
        swift_bridgeObjectRetain();
        v178(v83, 0, 1, v85);
        a3 = v226;
      }
      goto LABEL_62;
    }
    v66 = __srca;
    a3 = v226;
    if (v89)
    {
      sub_224DDEAA0((uint64_t)v83, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v72 = *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64);
      v73 = v83;
      v74 = v84;
      goto LABEL_44;
    }
    *(_QWORD *)v83 = *(_QWORD *)v84;
    *((_QWORD *)v83 + 1) = *((_QWORD *)v84 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v156 = v83 + 1;
    v157 = v84 + 1;
    v158 = *((_QWORD *)v84 + 3);
    if (*((_QWORD *)v83 + 3) == 1)
    {
      if (v158 == 1)
      {
        v159 = *v157;
        *((_QWORD *)v83 + 4) = *((_QWORD *)v84 + 4);
        *v156 = v159;
      }
      else
      {
        *((_QWORD *)v83 + 2) = *((_QWORD *)v84 + 2);
        *((_QWORD *)v83 + 3) = *((_QWORD *)v84 + 3);
        *((_QWORD *)v83 + 4) = *((_QWORD *)v84 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v158 == 1)
    {
      sub_224E2C9C0((uint64_t)(v83 + 1));
      v183 = *((_QWORD *)v84 + 4);
      *v156 = *v157;
      *((_QWORD *)v83 + 4) = v183;
    }
    else
    {
      *((_QWORD *)v83 + 2) = *((_QWORD *)v84 + 2);
      *((_QWORD *)v83 + 3) = *((_QWORD *)v84 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v83 + 4) = *((_QWORD *)v84 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v185 = *(int *)(v85 + 24);
    v186 = (char *)v83 + v185;
    __dstd = (char *)v84 + v185;
    v187 = sub_224F675D4();
    v214 = *(_QWORD *)(v187 - 8);
    v216 = v186;
    v188 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v214 + 48);
    LODWORD(v186) = v188(v186, 1, v187);
    v189 = v188(__dstd, 1, v187);
    if ((_DWORD)v186)
    {
      v66 = __srca;
      if (!v189)
      {
        (*(void (**)(void *, char *, uint64_t))(v214 + 16))(v216, __dstd, v187);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v214 + 56))(v216, 0, 1, v187);
        goto LABEL_127;
      }
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v191 = *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64);
      v192 = v216;
    }
    else
    {
      v66 = __srca;
      if (!v189)
      {
        (*(void (**)(void *, char *, uint64_t))(v214 + 24))(v216, __dstd, v187);
        goto LABEL_127;
      }
      (*(void (**)(void *, uint64_t))(v214 + 8))(v216, v187);
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v191 = *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64);
      v192 = v216;
    }
    memcpy(v192, __dstd, v191);
LABEL_127:
    a3 = v226;
    v205 = *(int *)(v85 + 28);
    v206 = (_QWORD *)((char *)v83 + v205);
    v207 = (_QWORD *)((char *)v84 + v205);
    *v206 = *v207;
    v206[1] = v207[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  if (v69)
  {
    v70 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_43:
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v70);
    v72 = *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64);
    v73 = v63;
    v74 = v64;
LABEL_44:
    memcpy(v73, v74, v72);
    goto LABEL_62;
  }
  __dsta = v67;
  __src = v66;
  *(_QWORD *)v63 = *(_QWORD *)v64;
  *((_QWORD *)v63 + 1) = *((_QWORD *)v64 + 1);
  *((_QWORD *)v63 + 2) = *((_QWORD *)v64 + 2);
  *((_QWORD *)v63 + 3) = *((_QWORD *)v64 + 3);
  v215 = v65;
  v75 = *(int *)(v65 + 24);
  v76 = (_QWORD *)((char *)v63 + v75);
  v77 = (_QWORD *)((char *)v64 + v75);
  v78 = type metadata accessor for Identifier();
  v79 = *(_QWORD *)(v78 - 8);
  v80 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v79 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v80(v77, 1, v78))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    a3 = v226;
  }
  else
  {
    v211 = v79;
    *v76 = *v77;
    v76[1] = v77[1];
    v91 = v77[3];
    swift_bridgeObjectRetain();
    if (v91 == 1)
    {
      v92 = *((_OWORD *)v77 + 1);
      v76[4] = v77[4];
      *((_OWORD *)v76 + 1) = v92;
    }
    else
    {
      v76[2] = v77[2];
      v76[3] = v77[3];
      v76[4] = v77[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v94 = v78;
    v95 = *(int *)(v78 + 24);
    v96 = (char *)v76 + v95;
    v97 = (char *)v77 + v95;
    v98 = sub_224F675D4();
    v99 = *(_QWORD *)(v98 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v96, v97, v98);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
    }
    a3 = v226;
    v103 = *(int *)(v94 + 28);
    v104 = (_QWORD *)((char *)v76 + v103);
    v105 = (_QWORD *)((char *)v77 + v103);
    *v104 = *v105;
    v104[1] = v105[1];
    v106 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v211 + 56);
    swift_bridgeObjectRetain();
    v106(v76, 0, 1, v94);
  }
  v67 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))__dsta;
  v66 = __src;
  v65 = v215;
  ((void (*)(__int128 *, _QWORD, uint64_t, uint64_t))__src[7])(v63, 0, 1, v215);
LABEL_62:
  v107 = a3[16];
  v108 = (_QWORD *)((char *)a1 + v107);
  v109 = (_QWORD *)((char *)a2 + v107);
  *v108 = *v109;
  v108[1] = v109[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v110 = a3[17];
  v111 = (_QWORD *)((char *)a1 + v110);
  v112 = (_QWORD *)((char *)a2 + v110);
  v113 = v67((char *)a1 + v110, 1, v65);
  v114 = v67(v112, 1, v65);
  if (!v113)
  {
    if (v114)
    {
      sub_224DDEAA0((uint64_t)v111, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      v115 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_67;
    }
    *v111 = *v112;
    v111[1] = v112[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v111[2] = v112[2];
    v111[3] = v112[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v127 = *(int *)(v65 + 24);
    v128 = (uint64_t)v111 + v127;
    v129 = (char *)v112 + v127;
    v130 = type metadata accessor for Identifier();
    v131 = *(_QWORD *)(v130 - 8);
    v132 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v131 + 48);
    v133 = v132(v128, 1, v130);
    v134 = v132(v129, 1, v130);
    if (v133)
    {
      if (!v134)
      {
        *(_QWORD *)v128 = *(_QWORD *)v129;
        *(_QWORD *)(v128 + 8) = *((_QWORD *)v129 + 1);
        v146 = *((_QWORD *)v129 + 3);
        swift_bridgeObjectRetain();
        if (v146 == 1)
        {
          v147 = *((_OWORD *)v129 + 1);
          *(_QWORD *)(v128 + 32) = *((_QWORD *)v129 + 4);
          *(_OWORD *)(v128 + 16) = v147;
        }
        else
        {
          *(_QWORD *)(v128 + 16) = *((_QWORD *)v129 + 2);
          *(_QWORD *)(v128 + 24) = *((_QWORD *)v129 + 3);
          *(_QWORD *)(v128 + 32) = *((_QWORD *)v129 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v169 = *(int *)(v130 + 24);
        v170 = (void *)(v128 + v169);
        v171 = &v129[v169];
        v172 = sub_224F675D4();
        v173 = *(_QWORD *)(v172 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 48))(v171, 1, v172))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v173 + 16))(v170, v171, v172);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v173 + 56))(v170, 0, 1, v172);
        }
        a3 = v226;
        v179 = *(int *)(v130 + 28);
        v180 = (_QWORD *)(v128 + v179);
        v181 = &v129[v179];
        *v180 = *(_QWORD *)v181;
        v180[1] = *((_QWORD *)v181 + 1);
        v182 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v131 + 56);
        swift_bridgeObjectRetain();
        v182(v128, 0, 1, v130);
        goto LABEL_87;
      }
      v135 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_78:
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v135);
      v117 = *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64);
      v118 = (void *)v128;
      v119 = v129;
      goto LABEL_68;
    }
    if (v134)
    {
      sub_224DDEAA0(v128, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      v135 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_78;
    }
    *(_QWORD *)v128 = *(_QWORD *)v129;
    *(_QWORD *)(v128 + 8) = *((_QWORD *)v129 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v160 = (__int128 *)(v128 + 16);
    v161 = (__int128 *)(v129 + 16);
    v162 = *((_QWORD *)v129 + 3);
    if (*(_QWORD *)(v128 + 24) == 1)
    {
      if (v162 == 1)
      {
        v163 = *v161;
        *(_QWORD *)(v128 + 32) = *((_QWORD *)v129 + 4);
        *v160 = v163;
      }
      else
      {
        *(_QWORD *)(v128 + 16) = *((_QWORD *)v129 + 2);
        *(_QWORD *)(v128 + 24) = *((_QWORD *)v129 + 3);
        *(_QWORD *)(v128 + 32) = *((_QWORD *)v129 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v162 == 1)
    {
      sub_224E2C9C0(v128 + 16);
      v184 = *((_QWORD *)v129 + 4);
      *v160 = *v161;
      *(_QWORD *)(v128 + 32) = v184;
    }
    else
    {
      *(_QWORD *)(v128 + 16) = *((_QWORD *)v129 + 2);
      *(_QWORD *)(v128 + 24) = *((_QWORD *)v129 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v128 + 32) = *((_QWORD *)v129 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v194 = *(int *)(v130 + 24);
    v195 = (void *)(v128 + v194);
    v196 = &v129[v194];
    v197 = sub_224F675D4();
    v198 = *(_QWORD *)(v197 - 8);
    v199 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v198 + 48);
    __dste = v195;
    LODWORD(v195) = v199(v195, 1, v197);
    v200 = v199(v196, 1, v197);
    if ((_DWORD)v195)
    {
      if (!v200)
      {
        (*(void (**)(void *, char *, uint64_t))(v198 + 16))(__dste, v196, v197);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v198 + 56))(__dste, 0, 1, v197);
        goto LABEL_129;
      }
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v202 = *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64);
      v203 = __dste;
    }
    else
    {
      if (!v200)
      {
        (*(void (**)(void *, char *, uint64_t))(v198 + 24))(__dste, v196, v197);
        goto LABEL_129;
      }
      (*(void (**)(void *, uint64_t))(v198 + 8))(__dste, v197);
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v202 = *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64);
      v203 = __dste;
    }
    memcpy(v203, v196, v202);
LABEL_129:
    a3 = v226;
    v208 = *(int *)(v130 + 28);
    v209 = (_QWORD *)(v128 + v208);
    v210 = &v129[v208];
    *v209 = *(_QWORD *)v210;
    v209[1] = *((_QWORD *)v210 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_87;
  }
  if (v114)
  {
    v115 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_67:
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v115);
    v117 = *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64);
    v118 = v111;
    v119 = v112;
LABEL_68:
    memcpy(v118, v119, v117);
    goto LABEL_87;
  }
  *v111 = *v112;
  v111[1] = v112[1];
  v111[2] = v112[2];
  v111[3] = v112[3];
  v120 = *(int *)(v65 + 24);
  __dstb = (_QWORD *)((char *)v111 + v120);
  __srcb = v66;
  v121 = (_QWORD *)((char *)v112 + v120);
  v122 = type metadata accessor for Identifier();
  v123 = *(_QWORD *)(v122 - 8);
  v124 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v123 + 48);
  swift_bridgeObjectRetain();
  v125 = v121;
  swift_bridgeObjectRetain();
  if (v124(v121, 1, v122))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dstb, v121, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
    a3 = v226;
  }
  else
  {
    *__dstb = *v121;
    __dstb[1] = v121[1];
    v136 = v121[3];
    swift_bridgeObjectRetain();
    if (v136 == 1)
    {
      v137 = *((_OWORD *)v121 + 1);
      __dstb[4] = v121[4];
      *((_OWORD *)__dstb + 1) = v137;
    }
    else
    {
      __dstb[2] = v121[2];
      __dstb[3] = v121[3];
      __dstb[4] = v121[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v139 = v122;
    v140 = *(int *)(v122 + 24);
    v141 = (char *)__dstb + v140;
    v212 = v125;
    v142 = (char *)v125 + v140;
    v143 = sub_224F675D4();
    v144 = *(_QWORD *)(v143 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v144 + 48))(v142, 1, v143))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v141, v142, v143);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v141, 0, 1, v143);
    }
    a3 = v226;
    v148 = *(int *)(v139 + 28);
    v149 = (_QWORD *)((char *)__dstb + v148);
    v150 = (_QWORD *)((char *)v212 + v148);
    *v149 = *v150;
    v149[1] = v150[1];
    v151 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v123 + 56);
    swift_bridgeObjectRetain();
    v151(__dstb, 0, 1, v139);
  }
  (*((void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))__srcb + 7))(v111, 0, 1, v65);
LABEL_87:
  v152 = a3[18];
  v153 = (_QWORD *)((char *)a1 + v152);
  v154 = (_QWORD *)((char *)a2 + v152);
  *v153 = *v154;
  v153[1] = v154[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ModelsDSTU2.Immunization(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(_QWORD, _QWORD, _QWORD);
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  _OWORD *v53;
  _OWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  char *__src;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *__dst;
  void *__dsta;
  char *__dstb;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v7 = a3[8];
  v8 = (_BYTE *)(a1 + v7);
  v9 = (_BYTE *)(a2 + v7);
  v10 = type metadata accessor for FHIRDateTime();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    *v8 = *v9;
    *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
    *((_DWORD *)v8 + 4) = *((_DWORD *)v9 + 4);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
    *((_QWORD *)v8 + 7) = *((_QWORD *)v9 + 7);
    v13 = *(int *)(v10 + 28);
    __dst = &v8[v13];
    v14 = &v9[v13];
    v15 = sub_224F67874();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 32))(__dst, v14, v15);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    *(_OWORD *)&v8[*(int *)(v10 + 32)] = *(_OWORD *)&v9[*(int *)(v10 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v18 = a3[9];
  v19 = a3[10];
  v20 = (_QWORD *)(a1 + v18);
  v21 = (_QWORD *)(a2 + v18);
  *v20 = *v21;
  *(_QWORD *)((char *)v20 + 5) = *(_QWORD *)((char *)v21 + 5);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  v22 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
  v23 = a3[13];
  v24 = a3[14];
  v25 = a1 + v23;
  v26 = (__int128 *)(a2 + v23);
  v27 = *v26;
  *(_QWORD *)(v25 + 16) = *((_QWORD *)v26 + 2);
  LOBYTE(v26) = *(_BYTE *)(a2 + v24);
  *(_OWORD *)v25 = v27;
  *(_BYTE *)(a1 + v24) = (_BYTE)v26;
  v28 = a3[15];
  v29 = (_OWORD *)(a1 + v28);
  v30 = (_OWORD *)(a2 + v28);
  v31 = type metadata accessor for Reference();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v32 + 48);
  if (v33(v30, 1, v31))
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    __dsta = v33;
    v35 = v30[1];
    *v29 = *v30;
    v29[1] = v35;
    v36 = *(int *)(v31 + 24);
    v37 = (_OWORD *)((char *)v29 + v36);
    v38 = (_OWORD *)((char *)v30 + v36);
    v39 = type metadata accessor for Identifier();
    v40 = *(_QWORD *)(v39 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v67 = v40;
      v69 = v32;
      v42 = v38[1];
      *v37 = *v38;
      v37[1] = v42;
      *((_QWORD *)v37 + 4) = *((_QWORD *)v38 + 4);
      v43 = *(int *)(v39 + 24);
      __src = (char *)v37 + v43;
      v44 = (char *)v38 + v43;
      v45 = sub_224F675D4();
      v64 = *(_QWORD *)(v45 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v44, 1, v45))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__src, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 32))(__src, v44, v45);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(__src, 0, 1, v45);
      }
      *(_OWORD *)((char *)v37 + *(int *)(v39 + 28)) = *(_OWORD *)((char *)v38 + *(int *)(v39 + 28));
      v32 = v69;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v37, 0, 1, v39);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    v33 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dsta;
  }
  v47 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  v48 = (_OWORD *)(a1 + v47);
  v49 = (_OWORD *)(a2 + v47);
  if (v33(a2 + v47, 1, v31))
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    v51 = v49[1];
    *v48 = *v49;
    v48[1] = v51;
    v52 = *(int *)(v31 + 24);
    v53 = (_OWORD *)((char *)v48 + v52);
    v54 = (_OWORD *)((char *)v49 + v52);
    v55 = type metadata accessor for Identifier();
    v56 = *(_QWORD *)(v55 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
    {
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v68 = v56;
      v70 = v32;
      v58 = v54[1];
      *v53 = *v54;
      v53[1] = v58;
      *((_QWORD *)v53 + 4) = *((_QWORD *)v54 + 4);
      v59 = *(int *)(v55 + 24);
      __dstb = (char *)v53 + v59;
      v60 = (char *)v54 + v59;
      v61 = sub_224F675D4();
      v65 = *(_QWORD *)(v61 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v60, 1, v61))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dstb, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v65 + 32))(__dstb, v60, v61);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(__dstb, 0, 1, v61);
      }
      *(_OWORD *)((char *)v53 + *(int *)(v55 + 28)) = *(_OWORD *)((char *)v54 + *(int *)(v55 + 28));
      v32 = v70;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v53, 0, 1, v55);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v48, 0, 1, v31);
  }
  *(_OWORD *)(a1 + a3[18]) = *(_OWORD *)(a2 + a3[18]);
  return a1;
}

_QWORD *assignWithTake for ModelsDSTU2.Immunization(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  size_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t (*v59)(_QWORD *, uint64_t, uint64_t);
  int v60;
  int v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  size_t v64;
  void *v65;
  const void *v66;
  __int128 v67;
  uint64_t v68;
  _OWORD *v69;
  _OWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  _OWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(_OWORD *, uint64_t, uint64_t);
  int v82;
  int v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  int v105;
  int v106;
  uint64_t (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  size_t v109;
  void *v110;
  const void *v111;
  __int128 v112;
  uint64_t v113;
  _OWORD *v114;
  _OWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(uint64_t, uint64_t, uint64_t);
  int v127;
  int v128;
  uint64_t (*v129)(uint64_t, uint64_t);
  __int128 v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  void *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t (*v157)(char *, uint64_t, uint64_t);
  int v158;
  uint64_t v159;
  size_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t (*v168)(void *, uint64_t, uint64_t);
  int v169;
  uint64_t v170;
  size_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _OWORD *v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  void *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  void *v195;
  _QWORD *__src;
  _QWORD *__srca;
  _QWORD *__srcb;
  int *v199;
  int *v200;
  int *v201;
  int *v202;
  int *v203;
  int *v204;
  int *v205;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a1 + 4;
  v9 = a2[4];
  if (a1[4] == 1)
    goto LABEL_4;
  if (v9 == 1)
  {
    sub_224E2C98C((uint64_t)(a1 + 4));
    v9 = a2[4];
LABEL_4:
    *v8 = v9;
    goto LABEL_6;
  }
  *v8 = v9;
  swift_bridgeObjectRelease();
LABEL_6:
  v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_bridgeObjectRelease();
  v11 = a3[8];
  v12 = (uint64_t)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for FHIRDateTime();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16((uint64_t)v13, 1, v14);
  if (!v17)
  {
    if (v18)
    {
      sub_224DDEAA0(v12, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_11;
    }
    *(_BYTE *)v12 = *v13;
    *(_QWORD *)(v12 + 8) = *((_QWORD *)v13 + 1);
    *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
    v200 = a3;
    if (*(_QWORD *)(v12 + 56) != 1)
    {
      v27 = *((_QWORD *)v13 + 7);
      if (v27 != 1)
      {
        *(_BYTE *)(v12 + 24) = v13[24];
        *(_WORD *)(v12 + 25) = *(_WORD *)(v13 + 25);
        *(_DWORD *)(v12 + 28) = *((_DWORD *)v13 + 7);
        *(_OWORD *)(v12 + 32) = *((_OWORD *)v13 + 2);
        *(_QWORD *)(v12 + 48) = *((_QWORD *)v13 + 6);
        *(_QWORD *)(v12 + 56) = v27;
        swift_bridgeObjectRelease();
LABEL_21:
        v29 = *(int *)(v14 + 28);
        v30 = (void *)(v12 + v29);
        v31 = &v13[v29];
        v32 = sub_224F67874();
        v33 = *(_QWORD *)(v32 - 8);
        v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
        v190 = v30;
        LODWORD(v30) = v34(v30, 1, v32);
        v35 = v34(v31, 1, v32);
        if ((_DWORD)v30)
        {
          if (!v35)
          {
            (*(void (**)(void *, char *, uint64_t))(v33 + 32))(v190, v31, v32);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v190, 0, 1, v32);
            goto LABEL_29;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v37 = *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64);
          v38 = v190;
        }
        else
        {
          if (!v35)
          {
            (*(void (**)(void *, char *, uint64_t))(v33 + 40))(v190, v31, v32);
            goto LABEL_29;
          }
          (*(void (**)(void *, uint64_t))(v33 + 8))(v190, v32);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v37 = *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64);
          v38 = v190;
        }
        memcpy(v38, v31, v37);
LABEL_29:
        a3 = v200;
        v40 = *(int *)(v14 + 32);
        v41 = (_QWORD *)(v12 + v40);
        v42 = &v13[v40];
        v44 = *(_QWORD *)v42;
        v43 = *((_QWORD *)v42 + 1);
        *v41 = v44;
        v41[1] = v43;
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      sub_224E2C9F4(v12 + 24);
    }
    v28 = *(_OWORD *)(v13 + 40);
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
    *(_OWORD *)(v12 + 40) = v28;
    *(_QWORD *)(v12 + 56) = *((_QWORD *)v13 + 7);
    goto LABEL_21;
  }
  if (v18)
  {
    v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_11:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v19);
    memcpy((void *)v12, v13, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_30;
  }
  v199 = a3;
  *(_BYTE *)v12 = *v13;
  *(_QWORD *)(v12 + 8) = *((_QWORD *)v13 + 1);
  *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
  *(_QWORD *)(v12 + 56) = *((_QWORD *)v13 + 7);
  v21 = *(int *)(v14 + 28);
  v22 = (void *)(v12 + v21);
  v23 = &v13[v21];
  v24 = sub_224F67874();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  a3 = v199;
  *(_OWORD *)(v12 + *(int *)(v14 + 32)) = *(_OWORD *)&v13[*(int *)(v14 + 32)];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_30:
  v45 = a3[9];
  v46 = a3[10];
  v47 = (_QWORD *)((char *)a1 + v45);
  v48 = (_QWORD *)((char *)a2 + v45);
  *v47 = *v48;
  *(_QWORD *)((char *)v47 + 5) = *(_QWORD *)((char *)v48 + 5);
  *(_QWORD *)((char *)a1 + v46) = *(_QWORD *)((char *)a2 + v46);
  swift_bridgeObjectRelease();
  v49 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + v49) = *(_QWORD *)((char *)a2 + v49);
  swift_bridgeObjectRelease();
  v50 = a3[13];
  v51 = (_QWORD *)((char *)a1 + v50);
  v52 = (char *)a2 + v50;
  v53 = *(_QWORD *)((char *)a2 + v50 + 8);
  *v51 = *(_QWORD *)((char *)a2 + v50);
  v51[1] = v53;
  swift_bridgeObjectRelease();
  v51[2] = *((_QWORD *)v52 + 2);
  swift_bridgeObjectRelease();
  v54 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  v55 = (_QWORD *)((char *)a1 + v54);
  v56 = (_QWORD *)((char *)a2 + v54);
  v57 = type metadata accessor for Reference();
  v58 = *(_QWORD **)(v57 - 8);
  v59 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v58[6];
  v60 = v59(v55, 1, v57);
  v61 = v59(v56, 1, v57);
  if (!v60)
  {
    if (v61)
    {
      sub_224DDEAA0((uint64_t)v55, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      v62 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_35;
    }
    __srca = v58;
    v201 = a3;
    v74 = v56[1];
    *v55 = *v56;
    v55[1] = v74;
    swift_bridgeObjectRelease();
    v75 = v56[3];
    v55[2] = v56[2];
    v55[3] = v75;
    swift_bridgeObjectRelease();
    v76 = *(int *)(v57 + 24);
    v77 = (_OWORD *)((char *)v55 + v76);
    v78 = (_OWORD *)((char *)v56 + v76);
    v79 = type metadata accessor for Identifier();
    v80 = *(_QWORD *)(v79 - 8);
    v81 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v80 + 48);
    v82 = v81(v77, 1, v79);
    v83 = v81(v78, 1, v79);
    if (v82)
    {
      v58 = __srca;
      if (v83)
      {
        sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
        a3 = v201;
      }
      else
      {
        v91 = v78[1];
        *v77 = *v78;
        v77[1] = v91;
        *((_QWORD *)v77 + 4) = *((_QWORD *)v78 + 4);
        v92 = *(int *)(v79 + 24);
        v192 = (char *)v77 + v92;
        v186 = v78;
        v93 = (char *)v78 + v92;
        v94 = sub_224F675D4();
        v95 = *(_QWORD *)(v94 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v192, v93, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v192, v93, v94);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v192, 0, 1, v94);
        }
        v58 = __srca;
        *(_OWORD *)((char *)v77 + *(int *)(v79 + 28)) = *(_OWORD *)((char *)v186 + *(int *)(v79 + 28));
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
        a3 = v201;
      }
      goto LABEL_51;
    }
    v58 = __srca;
    a3 = v201;
    if (v83)
    {
      sub_224DDEAA0((uint64_t)v77, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v64 = *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64);
      v65 = v77;
      v66 = v78;
      goto LABEL_36;
    }
    v150 = *((_QWORD *)v78 + 1);
    *(_QWORD *)v77 = *(_QWORD *)v78;
    *((_QWORD *)v77 + 1) = v150;
    swift_bridgeObjectRelease();
    if (*((_QWORD *)v77 + 3) != 1)
    {
      v151 = *((_QWORD *)v78 + 3);
      if (v151 != 1)
      {
        *((_QWORD *)v77 + 2) = *((_QWORD *)v78 + 2);
        *((_QWORD *)v77 + 3) = v151;
        swift_bridgeObjectRelease();
        *((_QWORD *)v77 + 4) = *((_QWORD *)v78 + 4);
        swift_bridgeObjectRelease();
LABEL_87:
        v154 = *(int *)(v79 + 24);
        v155 = (char *)v77 + v154;
        v194 = (char *)v78 + v154;
        v156 = sub_224F675D4();
        v188 = *(_QWORD *)(v156 - 8);
        v189 = v155;
        v157 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v188 + 48);
        LODWORD(v155) = v157(v155, 1, v156);
        v158 = v157(v194, 1, v156);
        if ((_DWORD)v155)
        {
          v58 = __srca;
          if (!v158)
          {
            (*(void (**)(void *, char *, uint64_t))(v188 + 32))(v189, v194, v156);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v188 + 56))(v189, 0, 1, v156);
            goto LABEL_103;
          }
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v160 = *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64);
          v161 = v189;
        }
        else
        {
          v58 = __srca;
          if (!v158)
          {
            (*(void (**)(void *, char *, uint64_t))(v188 + 40))(v189, v194, v156);
            goto LABEL_103;
          }
          (*(void (**)(void *, uint64_t))(v188 + 8))(v189, v156);
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v160 = *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64);
          v161 = v189;
        }
        memcpy(v161, v194, v160);
LABEL_103:
        a3 = v201;
        v174 = *(int *)(v79 + 28);
        v175 = (_QWORD *)((char *)v77 + v174);
        v176 = (uint64_t *)((char *)v78 + v174);
        v178 = *v176;
        v177 = v176[1];
        *v175 = v178;
        v175[1] = v177;
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
      sub_224E2C9C0((uint64_t)(v77 + 1));
    }
    v77[1] = v78[1];
    *((_QWORD *)v77 + 4) = *((_QWORD *)v78 + 4);
    goto LABEL_87;
  }
  if (v61)
  {
    v62 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_35:
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v62);
    v64 = *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64);
    v65 = v55;
    v66 = v56;
LABEL_36:
    memcpy(v65, v66, v64);
    goto LABEL_51;
  }
  __src = v58;
  v67 = *((_OWORD *)v56 + 1);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *((_OWORD *)v55 + 1) = v67;
  v68 = *(int *)(v57 + 24);
  v69 = (_OWORD *)((char *)v55 + v68);
  v70 = (_OWORD *)((char *)v56 + v68);
  v71 = type metadata accessor for Identifier();
  v72 = *(_QWORD *)(v71 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    v58 = __src;
  }
  else
  {
    v185 = v72;
    v202 = a3;
    v85 = v70[1];
    *v69 = *v70;
    v69[1] = v85;
    *((_QWORD *)v69 + 4) = *((_QWORD *)v70 + 4);
    v86 = *(int *)(v71 + 24);
    v191 = (char *)v69 + v86;
    v87 = (char *)v70 + v86;
    v88 = sub_224F675D4();
    v184 = *(_QWORD *)(v88 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v184 + 48))(v87, 1, v88))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v191, v87, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v191, v87, v88);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v184 + 56))(v191, 0, 1, v88);
    }
    a3 = v202;
    *(_OWORD *)((char *)v69 + *(int *)(v71 + 28)) = *(_OWORD *)((char *)v70 + *(int *)(v71 + 28));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v185 + 56))(v69, 0, 1, v71);
    v58 = __src;
  }
  ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v58[7])(v55, 0, 1, v57);
LABEL_51:
  v97 = a3[16];
  v98 = (_QWORD *)((char *)a1 + v97);
  v99 = (_QWORD *)((char *)a2 + v97);
  v101 = *v99;
  v100 = v99[1];
  *v98 = v101;
  v98[1] = v100;
  swift_bridgeObjectRelease();
  v102 = a3[17];
  v103 = (_QWORD *)((char *)a1 + v102);
  v104 = (_QWORD *)((char *)a2 + v102);
  v105 = v59((_QWORD *)((char *)a1 + v102), 1, v57);
  v106 = v59(v104, 1, v57);
  if (!v105)
  {
    if (v106)
    {
      sub_224DDEAA0((uint64_t)v103, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      v107 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_56;
    }
    v119 = v104[1];
    *v103 = *v104;
    v103[1] = v119;
    swift_bridgeObjectRelease();
    v120 = v104[3];
    v103[2] = v104[2];
    v103[3] = v120;
    swift_bridgeObjectRelease();
    v121 = *(int *)(v57 + 24);
    v122 = (uint64_t)v103 + v121;
    v123 = (_QWORD *)((char *)v104 + v121);
    v124 = type metadata accessor for Identifier();
    v125 = *(_QWORD *)(v124 - 8);
    v126 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 48);
    v127 = v126(v122, 1, v124);
    v128 = v126((uint64_t)v123, 1, v124);
    if (v127)
    {
      if (!v128)
      {
        v204 = a3;
        v137 = *((_OWORD *)v123 + 1);
        *(_OWORD *)v122 = *(_OWORD *)v123;
        *(_OWORD *)(v122 + 16) = v137;
        *(_QWORD *)(v122 + 32) = v123[4];
        v138 = *(int *)(v124 + 24);
        v139 = (void *)(v122 + v138);
        v140 = (char *)v123 + v138;
        v141 = sub_224F675D4();
        v142 = *(_QWORD *)(v141 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v142 + 32))(v139, v140, v141);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v142 + 56))(v139, 0, 1, v141);
        }
        a3 = v204;
        *(_OWORD *)(v122 + *(int *)(v124 + 28)) = *(_OWORD *)((char *)v123 + *(int *)(v124 + 28));
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);
        goto LABEL_73;
      }
      v129 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_67:
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v129);
      v109 = *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64);
      v110 = (void *)v122;
      v111 = v123;
      goto LABEL_57;
    }
    if (v128)
    {
      sub_224DDEAA0(v122, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      v129 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_67;
    }
    v152 = v123[1];
    *(_QWORD *)v122 = *v123;
    *(_QWORD *)(v122 + 8) = v152;
    swift_bridgeObjectRelease();
    v205 = a3;
    if (*(_QWORD *)(v122 + 24) != 1)
    {
      v153 = v123[3];
      if (v153 != 1)
      {
        *(_QWORD *)(v122 + 16) = v123[2];
        *(_QWORD *)(v122 + 24) = v153;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v122 + 32) = v123[4];
        swift_bridgeObjectRelease();
LABEL_94:
        v163 = *(int *)(v124 + 24);
        v164 = (void *)(v122 + v163);
        v165 = (char *)v123 + v163;
        v166 = sub_224F675D4();
        v167 = *(_QWORD *)(v166 - 8);
        v168 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v167 + 48);
        v195 = v164;
        LODWORD(v164) = v168(v164, 1, v166);
        v169 = v168(v165, 1, v166);
        if ((_DWORD)v164)
        {
          if (!v169)
          {
            (*(void (**)(void *, char *, uint64_t))(v167 + 32))(v195, v165, v166);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v195, 0, 1, v166);
            goto LABEL_105;
          }
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v171 = *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64);
          v172 = v195;
        }
        else
        {
          if (!v169)
          {
            (*(void (**)(void *, char *, uint64_t))(v167 + 40))(v195, v165, v166);
            goto LABEL_105;
          }
          (*(void (**)(void *, uint64_t))(v167 + 8))(v195, v166);
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v171 = *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64);
          v172 = v195;
        }
        memcpy(v172, v165, v171);
LABEL_105:
        a3 = v205;
        v179 = *(int *)(v124 + 28);
        v180 = (_QWORD *)(v122 + v179);
        v181 = (_QWORD *)((char *)v123 + v179);
        v183 = *v181;
        v182 = v181[1];
        *v180 = v183;
        v180[1] = v182;
        swift_bridgeObjectRelease();
        goto LABEL_73;
      }
      sub_224E2C9C0(v122 + 16);
    }
    *(_OWORD *)(v122 + 16) = *((_OWORD *)v123 + 1);
    *(_QWORD *)(v122 + 32) = v123[4];
    goto LABEL_94;
  }
  if (v106)
  {
    v107 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_56:
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v107);
    v109 = *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64);
    v110 = v103;
    v111 = v104;
LABEL_57:
    memcpy(v110, v111, v109);
    goto LABEL_73;
  }
  v112 = *((_OWORD *)v104 + 1);
  *(_OWORD *)v103 = *(_OWORD *)v104;
  *((_OWORD *)v103 + 1) = v112;
  v113 = *(int *)(v57 + 24);
  v114 = (_OWORD *)((char *)v103 + v113);
  v115 = (_OWORD *)((char *)v104 + v113);
  v116 = type metadata accessor for Identifier();
  v117 = *(_QWORD *)(v116 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    v187 = v117;
    __srcb = v58;
    v203 = a3;
    v130 = v115[1];
    *v114 = *v115;
    v114[1] = v130;
    *((_QWORD *)v114 + 4) = *((_QWORD *)v115 + 4);
    v131 = *(int *)(v116 + 24);
    v193 = (char *)v114 + v131;
    v132 = (char *)v115 + v131;
    v133 = sub_224F675D4();
    v134 = *(_QWORD *)(v133 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v193, v132, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v193, v132, v133);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v134 + 56))(v193, 0, 1, v133);
    }
    v58 = __srcb;
    a3 = v203;
    *(_OWORD *)((char *)v114 + *(int *)(v116 + 28)) = *(_OWORD *)((char *)v115 + *(int *)(v116 + 28));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v187 + 56))(v114, 0, 1, v116);
  }
  ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v58[7])(v103, 0, 1, v57);
LABEL_73:
  v144 = a3[18];
  v145 = (_QWORD *)((char *)a1 + v144);
  v146 = (_QWORD *)((char *)a2 + v144);
  v148 = *v146;
  v147 = v146[1];
  *v145 = v148;
  v145[1] = v147;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Immunization()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224EC10F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 60);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.Immunization()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224EC11D0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 60);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_224EC129C()
{
  unint64_t v0;
  unint64_t v1;

  sub_224DDEA0C(319, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_224DDEA0C(319, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.ImmunizationVaccinationProtocol(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.ImmunizationVaccinationProtocol(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.ImmunizationVaccinationProtocol()
{
  return &type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol;
}

uint64_t initializeBufferWithCopyOfBuffer for ModelsDSTU2.Observation(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  void (*v34)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  void (*v54)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  void (*v70)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (*v87)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int (*v107)(char *, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  void (*v113)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  _BYTE *__dst;
  void *v120;
  void *v121;
  char *v122;
  int *v123;
  int *v124;
  int *v125;
  unsigned int (*v126)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v127)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v128)(_QWORD, _QWORD, _QWORD);
  uint64_t v129;
  uint64_t v130;
  char *v131;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 != 1)
      swift_bridgeObjectRetain();
    v11 = a2[5];
    v10 = a2[6];
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v10;
    v12 = a2[8];
    swift_bridgeObjectRetain();
    if (v12 == 1)
    {
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(_QWORD *)(a1 + 72) = a2[9];
    }
    else
    {
      *(_QWORD *)(a1 + 56) = a2[7];
      *(_QWORD *)(a1 + 64) = v12;
      *(_QWORD *)(a1 + 72) = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v14 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v14;
    v15 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v15;
    v16 = v6[11];
    v17 = (_BYTE *)(a1 + v16);
    v18 = (char *)a2 + v16;
    *(_QWORD *)(a1 + 112) = a2[14];
    v19 = type metadata accessor for FHIRDateTime();
    v130 = *(_QWORD *)(v19 - 8);
    v20 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v130 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20(v18, 1, v19))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      *v17 = *v18;
      *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
      *((_DWORD *)v17 + 4) = *((_DWORD *)v18 + 4);
      v22 = *((_QWORD *)v18 + 7);
      v126 = v20;
      if (v22 == 1)
      {
        v23 = *(_OWORD *)(v18 + 40);
        *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
        *(_OWORD *)(v17 + 40) = v23;
        *((_QWORD *)v17 + 7) = *((_QWORD *)v18 + 7);
      }
      else
      {
        v17[24] = v18[24];
        *(_WORD *)(v17 + 25) = *(_WORD *)(v18 + 25);
        *(_OWORD *)(v17 + 28) = *(_OWORD *)(v18 + 28);
        *((_DWORD *)v17 + 11) = *((_DWORD *)v18 + 11);
        *((_QWORD *)v17 + 6) = *((_QWORD *)v18 + 6);
        *((_QWORD *)v17 + 7) = v22;
        swift_bridgeObjectRetain();
      }
      v24 = *(int *)(v19 + 28);
      v25 = &v17[v24];
      v26 = &v18[v24];
      v27 = sub_224F67874();
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v28 + 16))(v25, v26, v27);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      v30 = *(int *)(v19 + 32);
      v31 = &v17[v30];
      v32 = &v18[v30];
      v33 = v32[1];
      *v31 = *v32;
      v31[1] = v33;
      v34 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v130 + 56);
      swift_bridgeObjectRetain();
      v34(v17, 0, 1, v19);
      v20 = v126;
    }
    v35 = v6[12];
    v36 = (_BYTE *)(a1 + v35);
    v37 = (char *)a2 + v35;
    v38 = type metadata accessor for Period();
    v39 = *(void **)(v38 - 8);
    if ((*((unsigned int (**)(_BYTE *, uint64_t, uint64_t))v39 + 6))(v37, 1, v38))
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      if (v20(v37, 1, v19))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        *v36 = *v37;
        *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);
        *((_DWORD *)v36 + 4) = *((_DWORD *)v37 + 4);
        v42 = *((_QWORD *)v37 + 7);
        v123 = v6;
        v127 = v20;
        v120 = v39;
        if (v42 == 1)
        {
          v43 = *(_OWORD *)(v37 + 40);
          *(_OWORD *)(v36 + 24) = *(_OWORD *)(v37 + 24);
          *(_OWORD *)(v36 + 40) = v43;
          *((_QWORD *)v36 + 7) = *((_QWORD *)v37 + 7);
        }
        else
        {
          v36[24] = v37[24];
          *(_WORD *)(v36 + 25) = *(_WORD *)(v37 + 25);
          *(_OWORD *)(v36 + 28) = *(_OWORD *)(v37 + 28);
          *((_DWORD *)v36 + 11) = *((_DWORD *)v37 + 11);
          *((_QWORD *)v36 + 6) = *((_QWORD *)v37 + 6);
          *((_QWORD *)v36 + 7) = v42;
          swift_bridgeObjectRetain();
        }
        v44 = *(int *)(v19 + 28);
        v45 = &v36[v44];
        v46 = &v37[v44];
        v47 = sub_224F67874();
        v48 = *(_QWORD *)(v47 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v48 + 16))(v45, v46, v47);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
        }
        v39 = v120;
        v6 = v123;
        v50 = *(int *)(v19 + 32);
        v51 = &v36[v50];
        v52 = &v37[v50];
        v53 = v52[1];
        *v51 = *v52;
        v51[1] = v53;
        v54 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v130 + 56);
        swift_bridgeObjectRetain();
        v54(v36, 0, 1, v19);
        v20 = v127;
      }
      v55 = *(int *)(v38 + 20);
      v56 = &v36[v55];
      v57 = &v37[v55];
      if (v20(v57, 1, v19))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        *v56 = *v57;
        *((_QWORD *)v56 + 1) = *((_QWORD *)v57 + 1);
        *((_DWORD *)v56 + 4) = *((_DWORD *)v57 + 4);
        v59 = *((_QWORD *)v57 + 7);
        v124 = v6;
        v128 = v20;
        v121 = v39;
        if (v59 == 1)
        {
          v60 = *(_OWORD *)(v57 + 40);
          *(_OWORD *)(v56 + 24) = *(_OWORD *)(v57 + 24);
          *(_OWORD *)(v56 + 40) = v60;
          *((_QWORD *)v56 + 7) = *((_QWORD *)v57 + 7);
        }
        else
        {
          v56[24] = v57[24];
          *(_WORD *)(v56 + 25) = *(_WORD *)(v57 + 25);
          *(_OWORD *)(v56 + 28) = *(_OWORD *)(v57 + 28);
          *((_DWORD *)v56 + 11) = *((_DWORD *)v57 + 11);
          *((_QWORD *)v56 + 6) = *((_QWORD *)v57 + 6);
          *((_QWORD *)v56 + 7) = v59;
          swift_bridgeObjectRetain();
        }
        v61 = *(int *)(v19 + 28);
        __dst = &v56[v61];
        v62 = &v57[v61];
        v63 = sub_224F67874();
        v64 = *(_QWORD *)(v63 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(__dst, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v64 + 16))(__dst, v62, v63);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v64 + 56))(__dst, 0, 1, v63);
        }
        v39 = v121;
        v6 = v124;
        v66 = *(int *)(v19 + 32);
        v67 = &v56[v66];
        v68 = &v57[v66];
        v69 = v68[1];
        *v67 = *v68;
        v67[1] = v69;
        v70 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v130 + 56);
        swift_bridgeObjectRetain();
        v70(v56, 0, 1, v19);
        v20 = v128;
      }
      (*((void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))v39 + 7))(v36, 0, 1, v38);
    }
    v71 = v6[13];
    v72 = (_BYTE *)(a1 + v71);
    v73 = (char *)a2 + v71;
    if (v20((char *)a2 + v71, 1, v19))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
    else
    {
      *v72 = *v73;
      *((_QWORD *)v72 + 1) = *((_QWORD *)v73 + 1);
      *((_DWORD *)v72 + 4) = *((_DWORD *)v73 + 4);
      v75 = *((_QWORD *)v73 + 7);
      if (v75 == 1)
      {
        v76 = *(_OWORD *)(v73 + 40);
        *(_OWORD *)(v72 + 24) = *(_OWORD *)(v73 + 24);
        *(_OWORD *)(v72 + 40) = v76;
        *((_QWORD *)v72 + 7) = *((_QWORD *)v73 + 7);
      }
      else
      {
        v72[24] = v73[24];
        *(_WORD *)(v72 + 25) = *(_WORD *)(v73 + 25);
        *(_OWORD *)(v72 + 28) = *(_OWORD *)(v73 + 28);
        *((_DWORD *)v72 + 11) = *((_DWORD *)v73 + 11);
        *((_QWORD *)v72 + 6) = *((_QWORD *)v73 + 6);
        *((_QWORD *)v72 + 7) = v75;
        swift_bridgeObjectRetain();
      }
      v77 = *(int *)(v19 + 28);
      v78 = &v72[v77];
      v79 = &v73[v77];
      v80 = sub_224F67874();
      v81 = *(_QWORD *)(v80 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v81 + 16))(v78, v79, v80);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
      }
      v83 = *(int *)(v19 + 32);
      v84 = &v72[v83];
      v85 = &v73[v83];
      v86 = v85[1];
      *v84 = *v85;
      v84[1] = v86;
      v87 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v130 + 56);
      swift_bridgeObjectRetain();
      v87(v72, 0, 1, v19);
    }
    v88 = v6[15];
    *(_QWORD *)(a1 + v6[14]) = *(uint64_t *)((char *)a2 + v6[14]);
    v89 = (_QWORD *)(a1 + v88);
    v90 = (uint64_t *)((char *)a2 + v88);
    v91 = v90[1];
    *v89 = *v90;
    v89[1] = v91;
    v92 = v6[16];
    v93 = a1 + v92;
    v94 = (uint64_t)a2 + v92;
    v95 = *(uint64_t *)((char *)a2 + v92 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v95 == 1)
    {
      *(_OWORD *)v93 = *(_OWORD *)v94;
      *(_QWORD *)(v93 + 16) = *(_QWORD *)(v94 + 16);
    }
    else
    {
      *(_QWORD *)v93 = *(_QWORD *)v94;
      *(_QWORD *)(v93 + 8) = v95;
      *(_QWORD *)(v93 + 16) = *(_QWORD *)(v94 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v96 = v6[17];
    v97 = (_QWORD *)(a1 + v96);
    v98 = (uint64_t *)((char *)a2 + v96);
    v99 = type metadata accessor for Quantity();
    v100 = *(_QWORD *)(v99 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
    {
      sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    }
    else
    {
      v125 = v6;
      v129 = v100;
      *(_OWORD *)v97 = *(_OWORD *)v98;
      *(_QWORD *)((char *)v97 + 13) = *(_QWORD *)((char *)v98 + 13);
      v102 = v98[4];
      v97[3] = v98[3];
      v97[4] = v102;
      v103 = v98[6];
      v97[5] = v98[5];
      v97[6] = v103;
      v104 = *(int *)(v99 + 28);
      v122 = (char *)v97 + v104;
      v131 = (char *)v98 + v104;
      v105 = sub_224F675D4();
      v106 = *(_QWORD *)(v105 - 8);
      v107 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v107(v131, 1, v105))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v122, v131, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v122, v131, v105);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v122, 0, 1, v105);
      }
      v109 = *(int *)(v99 + 32);
      v110 = (_QWORD *)((char *)v97 + v109);
      v111 = (_QWORD *)((char *)v98 + v109);
      v112 = v111[1];
      *v110 = *v111;
      v110[1] = v112;
      v113 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v129 + 56);
      swift_bridgeObjectRetain();
      v113(v97, 0, 1, v99);
      v6 = v125;
    }
    v114 = v6[19];
    *(_QWORD *)(a1 + v6[18]) = *(uint64_t *)((char *)a2 + v6[18]);
    v115 = (_QWORD *)(a1 + v114);
    v116 = (uint64_t *)((char *)a2 + v114);
    v117 = v116[1];
    *v115 = *v116;
    v115[1] = v117;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ModelsDSTU2.Observation(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32) != 1)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 64) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[11];
  v5 = type metadata accessor for FHIRDateTime();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    if (*(_QWORD *)(v4 + 56) != 1)
      swift_bridgeObjectRelease();
    v7 = v4 + *(int *)(v5 + 28);
    v8 = sub_224F67874();
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    swift_bridgeObjectRelease();
  }
  v10 = a1 + a2[12];
  v11 = type metadata accessor for Period();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    if (!v6(v10, 1, v5))
    {
      if (*(_QWORD *)(v10 + 56) != 1)
        swift_bridgeObjectRelease();
      v12 = v10 + *(int *)(v5 + 28);
      v13 = sub_224F67874();
      v14 = *(_QWORD *)(v13 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
      swift_bridgeObjectRelease();
    }
    v15 = v10 + *(int *)(v11 + 20);
    if (!v6(v15, 1, v5))
    {
      if (*(_QWORD *)(v15 + 56) != 1)
        swift_bridgeObjectRelease();
      v16 = v15 + *(int *)(v5 + 28);
      v17 = sub_224F67874();
      v18 = *(_QWORD *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      swift_bridgeObjectRelease();
    }
  }
  v19 = a1 + a2[13];
  if (!v6(v19, 1, v5))
  {
    if (*(_QWORD *)(v19 + 56) != 1)
      swift_bridgeObjectRelease();
    v20 = v19 + *(int *)(v5 + 28);
    v21 = sub_224F67874();
    v22 = *(_QWORD *)(v21 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[16] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v23 = a1 + a2[17];
  v24 = type metadata accessor for Quantity();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 1, v24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v23 + *(int *)(v24 + 28);
    v26 = sub_224F675D4();
    v27 = *(_QWORD *)(v26 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ModelsDSTU2.Observation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int (*v18)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v19)(_QWORD, _QWORD, _QWORD);
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (*v52)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  void (*v68)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  void (*v85)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  unsigned int (*v105)(char *, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  void (*v111)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v117;
  _BYTE *__dst;
  _BYTE *__dsta;
  _QWORD *__dstb;
  int *v121;
  int *v122;
  int *v123;
  void *v124;
  void *v125;
  void *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1)
    swift_bridgeObjectRetain();
  v10 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v9;
  v11 = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  if (v11 == 1)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  else
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  v13 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v13;
  v14 = a3[11];
  v15 = (_BYTE *)(a1 + v14);
  v16 = (_BYTE *)(a2 + v14);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v17 = type metadata accessor for FHIRDateTime();
  v128 = *(_QWORD *)(v17 - 8);
  v18 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v128 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = v18;
  swift_bridgeObjectRetain();
  if (v18(v16, 1, v17))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v15 = *v16;
    *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
    *((_DWORD *)v15 + 4) = *((_DWORD *)v16 + 4);
    v21 = *((_QWORD *)v16 + 7);
    v124 = v18;
    if (v21 == 1)
    {
      v22 = *(_OWORD *)(v16 + 40);
      *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
      *(_OWORD *)(v15 + 40) = v22;
      *((_QWORD *)v15 + 7) = *((_QWORD *)v16 + 7);
    }
    else
    {
      v15[24] = v16[24];
      *(_WORD *)(v15 + 25) = *(_WORD *)(v16 + 25);
      *(_OWORD *)(v15 + 28) = *(_OWORD *)(v16 + 28);
      *((_DWORD *)v15 + 11) = *((_DWORD *)v16 + 11);
      *((_QWORD *)v15 + 6) = *((_QWORD *)v16 + 6);
      *((_QWORD *)v15 + 7) = v21;
      swift_bridgeObjectRetain();
    }
    v23 = *(int *)(v17 + 28);
    v24 = &v15[v23];
    v25 = &v16[v23];
    v26 = sub_224F67874();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v29 = *(int *)(v17 + 32);
    v30 = &v15[v29];
    v31 = &v16[v29];
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    v19 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v124;
    v33 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v128 + 56);
    swift_bridgeObjectRetain();
    v33(v15, 0, 1, v17);
  }
  v34 = a3[12];
  v35 = (_BYTE *)(a1 + v34);
  v36 = (_BYTE *)(a2 + v34);
  v37 = type metadata accessor for Period();
  v38 = *(_QWORD *)(v37 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    if (v19(v36, 1, v17))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      *v35 = *v36;
      *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
      *((_DWORD *)v35 + 4) = *((_DWORD *)v36 + 4);
      v41 = *((_QWORD *)v36 + 7);
      v121 = a3;
      v125 = v19;
      if (v41 == 1)
      {
        v42 = *(_OWORD *)(v36 + 40);
        *(_OWORD *)(v35 + 24) = *(_OWORD *)(v36 + 24);
        *(_OWORD *)(v35 + 40) = v42;
        *((_QWORD *)v35 + 7) = *((_QWORD *)v36 + 7);
      }
      else
      {
        v35[24] = v36[24];
        *(_WORD *)(v35 + 25) = *(_WORD *)(v36 + 25);
        *(_OWORD *)(v35 + 28) = *(_OWORD *)(v36 + 28);
        *((_DWORD *)v35 + 11) = *((_DWORD *)v36 + 11);
        *((_QWORD *)v35 + 6) = *((_QWORD *)v36 + 6);
        *((_QWORD *)v35 + 7) = v41;
        swift_bridgeObjectRetain();
      }
      v43 = *(int *)(v17 + 28);
      __dst = &v35[v43];
      v44 = &v36[v43];
      v45 = sub_224F67874();
      v46 = *(_QWORD *)(v45 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 16))(__dst, v44, v45);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v46 + 56))(__dst, 0, 1, v45);
      }
      a3 = v121;
      v48 = *(int *)(v17 + 32);
      v49 = &v35[v48];
      v50 = &v36[v48];
      v51 = v50[1];
      *v49 = *v50;
      v49[1] = v51;
      v52 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v128 + 56);
      swift_bridgeObjectRetain();
      v52(v35, 0, 1, v17);
      v19 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v125;
    }
    v53 = *(int *)(v37 + 20);
    v54 = &v35[v53];
    v55 = &v36[v53];
    if (v19(v55, 1, v17))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      *v54 = *v55;
      *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
      *((_DWORD *)v54 + 4) = *((_DWORD *)v55 + 4);
      v57 = *((_QWORD *)v55 + 7);
      v122 = a3;
      v126 = v19;
      v117 = v38;
      if (v57 == 1)
      {
        v58 = *(_OWORD *)(v55 + 40);
        *(_OWORD *)(v54 + 24) = *(_OWORD *)(v55 + 24);
        *(_OWORD *)(v54 + 40) = v58;
        *((_QWORD *)v54 + 7) = *((_QWORD *)v55 + 7);
      }
      else
      {
        v54[24] = v55[24];
        *(_WORD *)(v54 + 25) = *(_WORD *)(v55 + 25);
        *(_OWORD *)(v54 + 28) = *(_OWORD *)(v55 + 28);
        *((_DWORD *)v54 + 11) = *((_DWORD *)v55 + 11);
        *((_QWORD *)v54 + 6) = *((_QWORD *)v55 + 6);
        *((_QWORD *)v54 + 7) = v57;
        swift_bridgeObjectRetain();
      }
      v59 = *(int *)(v17 + 28);
      __dsta = &v54[v59];
      v60 = &v55[v59];
      v61 = sub_224F67874();
      v62 = *(_QWORD *)(v61 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dsta, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v62 + 16))(__dsta, v60, v61);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v62 + 56))(__dsta, 0, 1, v61);
      }
      a3 = v122;
      v19 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v126;
      v38 = v117;
      v64 = *(int *)(v17 + 32);
      v65 = &v54[v64];
      v66 = &v55[v64];
      v67 = v66[1];
      *v65 = *v66;
      v65[1] = v67;
      v68 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v128 + 56);
      swift_bridgeObjectRetain();
      v68(v54, 0, 1, v17);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  v69 = a3[13];
  v70 = (_BYTE *)(a1 + v69);
  v71 = (_BYTE *)(a2 + v69);
  if (v19(a2 + v69, 1, v17))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
  }
  else
  {
    *v70 = *v71;
    *((_QWORD *)v70 + 1) = *((_QWORD *)v71 + 1);
    *((_DWORD *)v70 + 4) = *((_DWORD *)v71 + 4);
    v73 = *((_QWORD *)v71 + 7);
    if (v73 == 1)
    {
      v74 = *(_OWORD *)(v71 + 40);
      *(_OWORD *)(v70 + 24) = *(_OWORD *)(v71 + 24);
      *(_OWORD *)(v70 + 40) = v74;
      *((_QWORD *)v70 + 7) = *((_QWORD *)v71 + 7);
    }
    else
    {
      v70[24] = v71[24];
      *(_WORD *)(v70 + 25) = *(_WORD *)(v71 + 25);
      *(_OWORD *)(v70 + 28) = *(_OWORD *)(v71 + 28);
      *((_DWORD *)v70 + 11) = *((_DWORD *)v71 + 11);
      *((_QWORD *)v70 + 6) = *((_QWORD *)v71 + 6);
      *((_QWORD *)v70 + 7) = v73;
      swift_bridgeObjectRetain();
    }
    v75 = *(int *)(v17 + 28);
    v76 = &v70[v75];
    v77 = &v71[v75];
    v78 = sub_224F67874();
    v79 = *(_QWORD *)(v78 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 16))(v76, v77, v78);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
    }
    v81 = *(int *)(v17 + 32);
    v82 = &v70[v81];
    v83 = &v71[v81];
    v84 = v83[1];
    *v82 = *v83;
    v82[1] = v84;
    v85 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v128 + 56);
    swift_bridgeObjectRetain();
    v85(v70, 0, 1, v17);
  }
  v86 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  v87 = (_QWORD *)(a1 + v86);
  v88 = (_QWORD *)(a2 + v86);
  v89 = v88[1];
  *v87 = *v88;
  v87[1] = v89;
  v90 = a3[16];
  v91 = a1 + v90;
  v92 = a2 + v90;
  v93 = *(_QWORD *)(a2 + v90 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v93 == 1)
  {
    *(_OWORD *)v91 = *(_OWORD *)v92;
    *(_QWORD *)(v91 + 16) = *(_QWORD *)(v92 + 16);
  }
  else
  {
    *(_QWORD *)v91 = *(_QWORD *)v92;
    *(_QWORD *)(v91 + 8) = v93;
    *(_QWORD *)(v91 + 16) = *(_QWORD *)(v92 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v94 = a3[17];
  v95 = (_QWORD *)(a1 + v94);
  v96 = (_QWORD *)(a2 + v94);
  v97 = type metadata accessor for Quantity();
  v98 = *(_QWORD *)(v97 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
  {
    sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
  }
  else
  {
    v129 = v98;
    v123 = a3;
    *(_OWORD *)v95 = *(_OWORD *)v96;
    *(_QWORD *)((char *)v95 + 13) = *(_QWORD *)((char *)v96 + 13);
    v100 = v96[4];
    v95[3] = v96[3];
    v95[4] = v100;
    v101 = v96[6];
    v95[5] = v96[5];
    v95[6] = v101;
    v102 = *(int *)(v97 + 28);
    v127 = (char *)v95 + v102;
    v103 = (char *)v96 + v102;
    v104 = sub_224F675D4();
    __dstb = *(_QWORD **)(v104 - 8);
    v105 = (unsigned int (*)(char *, uint64_t, uint64_t))__dstb[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v105(v103, 1, v104))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v127, v103, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))__dstb[2])(v127, v103, v104);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v127, 0, 1, v104);
    }
    v107 = *(int *)(v97 + 32);
    v108 = (_QWORD *)((char *)v95 + v107);
    v109 = (_QWORD *)((char *)v96 + v107);
    v110 = v109[1];
    *v108 = *v109;
    v108[1] = v110;
    v111 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v129 + 56);
    swift_bridgeObjectRetain();
    v111(v95, 0, 1, v97);
    a3 = v123;
  }
  v112 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  v113 = (_QWORD *)(a1 + v112);
  v114 = (_QWORD *)(a2 + v112);
  v115 = v114[1];
  *v113 = *v114;
  v113[1] = v115;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ModelsDSTU2.Observation(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  void (*v40)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(_BYTE *, uint64_t, uint64_t);
  int v62;
  int v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  int v68;
  int v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  void (*v89)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  void (*v106)(_BYTE *, _QWORD, uint64_t, uint64_t);
  __int128 *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  void (*v122)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(_BYTE *, uint64_t, uint64_t);
  int v132;
  uint64_t v133;
  size_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  int v143;
  int v144;
  uint64_t (*v145)(uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  int v150;
  int v151;
  uint64_t (*v152)(uint64_t, uint64_t);
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 *v157;
  __int128 *v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  void *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  char *v171;
  void (*v172)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  void *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t (*v181)(void *, uint64_t, uint64_t);
  int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  char *v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t (*v203)(_QWORD *, uint64_t, uint64_t);
  int v204;
  int v205;
  uint64_t (*v206)(uint64_t, uint64_t);
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  unsigned int (*v212)(char *, uint64_t, uint64_t);
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t (*v220)(char *, uint64_t, uint64_t);
  int v221;
  int v222;
  uint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  void (*v226)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  __int128 *v238;
  __int128 *v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  void *v245;
  _BYTE *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  _QWORD *v252;
  void (*v253)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  void *v258;
  _BYTE *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t (*v262)(void *, uint64_t, uint64_t);
  int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  void *v269;
  _BYTE *__dst;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  _QWORD *v278;
  _QWORD *v279;
  uint64_t (*v280)(uint64_t, uint64_t, uint64_t);
  char *v281;
  int *v282;

  v4 = a2;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = v4[2];
  a1[3] = v4[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 4;
  v7 = v4[4];
  if (a1[4] == 1)
  {
    if (v7 == 1)
    {
      v8 = 1;
LABEL_6:
      *v6 = v8;
      goto LABEL_9;
    }
    *v6 = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v7 == 1)
    {
      sub_224E2C98C((uint64_t)(a1 + 4));
      v8 = v4[4];
      goto LABEL_6;
    }
    *v6 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  a1[5] = v4[5];
  a1[6] = v4[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = (__int128 *)(a1 + 7);
  v10 = (__int128 *)(v4 + 7);
  v11 = v4[8];
  if (a1[8] == 1)
  {
    if (v11 == 1)
    {
      v12 = *v10;
      a1[9] = v4[9];
      *v9 = v12;
    }
    else
    {
      a1[7] = v4[7];
      a1[8] = v4[8];
      a1[9] = v4[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v11 == 1)
  {
    sub_224E2C9C0((uint64_t)(a1 + 7));
    v13 = v4[9];
    *v9 = *v10;
    a1[9] = v13;
  }
  else
  {
    a1[7] = v4[7];
    a1[8] = v4[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[9] = v4[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  a1[10] = v4[10];
  a1[11] = v4[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = v4[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = v4[13];
  a1[14] = v4[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[11];
  v15 = (uint64_t)a1 + v14;
  v16 = (char *)v4 + v14;
  v17 = type metadata accessor for FHIRDateTime();
  v271 = *(_QWORD *)(v17 - 8);
  v280 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v271 + 48);
  v18 = v280(v15, 1, v17);
  v19 = v280((uint64_t)v16, 1, v17);
  v282 = a3;
  if (!v18)
  {
    if (v19)
    {
      sub_224DDEAA0(v15, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_21;
    }
    *(_BYTE *)v15 = *v16;
    *(_QWORD *)(v15 + 8) = *((_QWORD *)v16 + 1);
    *(_WORD *)(v15 + 16) = *((_WORD *)v16 + 8);
    *(_WORD *)(v15 + 18) = *((_WORD *)v16 + 9);
    v25 = (__int128 *)(v15 + 24);
    v26 = (__int128 *)(v16 + 24);
    v27 = *((_QWORD *)v16 + 7);
    v273 = v4;
    if (*(_QWORD *)(v15 + 56) == 1)
    {
      if (v27 == 1)
      {
        v28 = *v26;
        v29 = *(_OWORD *)(v16 + 40);
        *(_QWORD *)(v15 + 56) = *((_QWORD *)v16 + 7);
        *v25 = v28;
        *(_OWORD *)(v15 + 40) = v29;
      }
      else
      {
        *(_BYTE *)(v15 + 24) = v16[24];
        *(_BYTE *)(v15 + 25) = v16[25];
        *(_BYTE *)(v15 + 26) = v16[26];
        v43 = *(_OWORD *)(v16 + 28);
        *(_DWORD *)(v15 + 44) = *((_DWORD *)v16 + 11);
        *(_OWORD *)(v15 + 28) = v43;
        *(_QWORD *)(v15 + 48) = *((_QWORD *)v16 + 6);
        *(_QWORD *)(v15 + 56) = *((_QWORD *)v16 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v27 == 1)
    {
      sub_224E2C9F4(v15 + 24);
      v41 = *((_QWORD *)v16 + 7);
      v42 = *(_OWORD *)(v16 + 40);
      *v25 = *v26;
      *(_OWORD *)(v15 + 40) = v42;
      *(_QWORD *)(v15 + 56) = v41;
    }
    else
    {
      *(_BYTE *)(v15 + 24) = v16[24];
      *(_BYTE *)(v15 + 25) = v16[25];
      *(_BYTE *)(v15 + 26) = v16[26];
      *(_DWORD *)(v15 + 28) = *((_DWORD *)v16 + 7);
      *(_WORD *)(v15 + 32) = *((_WORD *)v16 + 16);
      *(_WORD *)(v15 + 34) = *((_WORD *)v16 + 17);
      *(_WORD *)(v15 + 36) = *((_WORD *)v16 + 18);
      *(_WORD *)(v15 + 38) = *((_WORD *)v16 + 19);
      *(_WORD *)(v15 + 40) = *((_WORD *)v16 + 20);
      *(_WORD *)(v15 + 42) = *((_WORD *)v16 + 21);
      *(_WORD *)(v15 + 44) = *((_WORD *)v16 + 22);
      *(_WORD *)(v15 + 46) = *((_WORD *)v16 + 23);
      *(_QWORD *)(v15 + 48) = *((_QWORD *)v16 + 6);
      *(_QWORD *)(v15 + 56) = *((_QWORD *)v16 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v44 = *(int *)(v17 + 28);
    v45 = (void *)(v15 + v44);
    v46 = &v16[v44];
    v47 = sub_224F67874();
    v48 = *(_QWORD *)(v47 - 8);
    v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
    v50 = v49(v45, 1, v47);
    v51 = v49(v46, 1, v47);
    if (v50)
    {
      if (!v51)
      {
        (*(void (**)(void *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
LABEL_42:
        v4 = v273;
        a3 = v282;
        v53 = *(int *)(v17 + 32);
        v54 = (_QWORD *)(v15 + v53);
        v55 = &v16[v53];
        *v54 = *(_QWORD *)v55;
        v54[1] = *((_QWORD *)v55 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_43;
      }
    }
    else
    {
      if (!v51)
      {
        (*(void (**)(void *, char *, uint64_t))(v48 + 24))(v45, v46, v47);
        goto LABEL_42;
      }
      (*(void (**)(void *, uint64_t))(v48 + 8))(v45, v47);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_42;
  }
  if (v19)
  {
    v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_21:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v20);
    memcpy((void *)v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_43;
  }
  *(_BYTE *)v15 = *v16;
  v22 = *((_QWORD *)v16 + 1);
  *(_DWORD *)(v15 + 16) = *((_DWORD *)v16 + 4);
  *(_QWORD *)(v15 + 8) = v22;
  if (*((_QWORD *)v16 + 7) == 1)
  {
    v23 = *(_OWORD *)(v16 + 24);
    v24 = *(_OWORD *)(v16 + 40);
    *(_QWORD *)(v15 + 56) = *((_QWORD *)v16 + 7);
    *(_OWORD *)(v15 + 24) = v23;
    *(_OWORD *)(v15 + 40) = v24;
  }
  else
  {
    *(_BYTE *)(v15 + 24) = v16[24];
    *(_BYTE *)(v15 + 25) = v16[25];
    *(_BYTE *)(v15 + 26) = v16[26];
    v30 = *(_OWORD *)(v16 + 28);
    *(_DWORD *)(v15 + 44) = *((_DWORD *)v16 + 11);
    *(_OWORD *)(v15 + 28) = v30;
    *(_QWORD *)(v15 + 48) = *((_QWORD *)v16 + 6);
    *(_QWORD *)(v15 + 56) = *((_QWORD *)v16 + 7);
    swift_bridgeObjectRetain();
  }
  v31 = *(int *)(v17 + 28);
  v32 = (void *)(v15 + v31);
  v33 = &v16[v31];
  v34 = sub_224F67874();
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  a3 = v282;
  v37 = *(int *)(v17 + 32);
  v38 = (_QWORD *)(v15 + v37);
  v39 = &v16[v37];
  *v38 = *(_QWORD *)v39;
  v38[1] = *((_QWORD *)v39 + 1);
  v40 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v271 + 56);
  swift_bridgeObjectRetain();
  v40(v15, 0, 1, v17);
LABEL_43:
  v56 = a3[12];
  v57 = (char *)a1 + v56;
  v58 = (char *)v4 + v56;
  v59 = type metadata accessor for Period();
  v60 = *(_QWORD *)(v59 - 8);
  v61 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v60 + 48);
  v62 = v61(v57, 1, v59);
  v63 = v61(v58, 1, v59);
  if (!v62)
  {
    if (v63)
    {
      sub_224DDEAA0((uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v64 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_48;
    }
    v66 = v280;
    v68 = v280((uint64_t)v57, 1, v17);
    v69 = v280((uint64_t)v58, 1, v17);
    if (v68)
    {
      if (v69)
      {
        v70 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_59:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v70);
        memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
        goto LABEL_99;
      }
      *v57 = *v58;
      v82 = *((_QWORD *)v58 + 1);
      *((_DWORD *)v57 + 4) = *((_DWORD *)v58 + 4);
      *((_QWORD *)v57 + 1) = v82;
      v83 = v4;
      if (*((_QWORD *)v58 + 7) == 1)
      {
        v84 = *(_OWORD *)(v58 + 24);
        v85 = *(_OWORD *)(v58 + 40);
        *((_QWORD *)v57 + 7) = *((_QWORD *)v58 + 7);
        *(_OWORD *)(v57 + 24) = v84;
        *(_OWORD *)(v57 + 40) = v85;
      }
      else
      {
        v57[24] = v58[24];
        v57[25] = v58[25];
        v57[26] = v58[26];
        v112 = *(_OWORD *)(v58 + 28);
        *((_DWORD *)v57 + 11) = *((_DWORD *)v58 + 11);
        *(_OWORD *)(v57 + 28) = v112;
        *((_QWORD *)v57 + 6) = *((_QWORD *)v58 + 6);
        *((_QWORD *)v57 + 7) = *((_QWORD *)v58 + 7);
        swift_bridgeObjectRetain();
      }
      v113 = *(int *)(v17 + 28);
      v114 = &v57[v113];
      v115 = &v58[v113];
      v116 = sub_224F67874();
      v117 = *(_QWORD *)(v116 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v117 + 16))(v114, v115, v116);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
      }
      v4 = v83;
      v119 = *(int *)(v17 + 32);
      v120 = &v57[v119];
      v121 = &v58[v119];
      *v120 = *v121;
      v120[1] = v121[1];
      v122 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v271 + 56);
      swift_bridgeObjectRetain();
      v122(v57, 0, 1, v17);
      v66 = v280;
      a3 = v282;
LABEL_99:
      v140 = *(int *)(v59 + 20);
      v141 = (uint64_t)&v57[v140];
      v142 = &v58[v140];
      v143 = v66(v141, 1, v17);
      v144 = v66((uint64_t)v142, 1, v17);
      if (v143)
      {
        if (!v144)
        {
          *(_BYTE *)v141 = *v142;
          v235 = *((_QWORD *)v142 + 1);
          *(_DWORD *)(v141 + 16) = *((_DWORD *)v142 + 4);
          *(_QWORD *)(v141 + 8) = v235;
          if (*((_QWORD *)v142 + 7) == 1)
          {
            v236 = *(_OWORD *)(v142 + 24);
            v237 = *(_OWORD *)(v142 + 40);
            *(_QWORD *)(v141 + 56) = *((_QWORD *)v142 + 7);
            *(_OWORD *)(v141 + 24) = v236;
            *(_OWORD *)(v141 + 40) = v237;
          }
          else
          {
            *(_BYTE *)(v141 + 24) = v142[24];
            *(_BYTE *)(v141 + 25) = v142[25];
            *(_BYTE *)(v141 + 26) = v142[26];
            v243 = *(_OWORD *)(v142 + 28);
            *(_DWORD *)(v141 + 44) = *((_DWORD *)v142 + 11);
            *(_OWORD *)(v141 + 28) = v243;
            *(_QWORD *)(v141 + 48) = *((_QWORD *)v142 + 6);
            *(_QWORD *)(v141 + 56) = *((_QWORD *)v142 + 7);
            swift_bridgeObjectRetain();
          }
          v244 = *(int *)(v17 + 28);
          v245 = (void *)(v141 + v244);
          v246 = &v142[v244];
          v247 = sub_224F67874();
          v248 = *(_QWORD *)(v247 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v248 + 48))(v246, 1, v247))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v245, v246, *(_QWORD *)(*(_QWORD *)(v249 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v248 + 16))(v245, v246, v247);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v248 + 56))(v245, 0, 1, v247);
          }
          a3 = v282;
          v250 = *(int *)(v17 + 32);
          v251 = (_QWORD *)(v141 + v250);
          v252 = &v142[v250];
          *v251 = *v252;
          v251[1] = v252[1];
          v253 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v271 + 56);
          swift_bridgeObjectRetain();
          v253(v141, 0, 1, v17);
          goto LABEL_49;
        }
        v145 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_104;
      }
      if (v144)
      {
        sub_224DDEAA0(v141, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v145 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_104:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v145);
        memcpy((void *)v141, v142, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
        goto LABEL_105;
      }
      *(_BYTE *)v141 = *v142;
      *(_QWORD *)(v141 + 8) = *((_QWORD *)v142 + 1);
      *(_WORD *)(v141 + 16) = *((_WORD *)v142 + 8);
      *(_WORD *)(v141 + 18) = *((_WORD *)v142 + 9);
      v238 = (__int128 *)(v141 + 24);
      v239 = (__int128 *)(v142 + 24);
      v240 = *((_QWORD *)v142 + 7);
      v279 = v4;
      if (*(_QWORD *)(v141 + 56) == 1)
      {
        if (v240 == 1)
        {
          v241 = *v239;
          v242 = *(_OWORD *)(v142 + 40);
          *(_QWORD *)(v141 + 56) = *((_QWORD *)v142 + 7);
          *v238 = v241;
          *(_OWORD *)(v141 + 40) = v242;
        }
        else
        {
          *(_BYTE *)(v141 + 24) = v142[24];
          *(_BYTE *)(v141 + 25) = v142[25];
          *(_BYTE *)(v141 + 26) = v142[26];
          v256 = *(_OWORD *)(v142 + 28);
          *(_DWORD *)(v141 + 44) = *((_DWORD *)v142 + 11);
          *(_OWORD *)(v141 + 28) = v256;
          *(_QWORD *)(v141 + 48) = *((_QWORD *)v142 + 6);
          *(_QWORD *)(v141 + 56) = *((_QWORD *)v142 + 7);
          swift_bridgeObjectRetain();
        }
      }
      else if (v240 == 1)
      {
        sub_224E2C9F4(v141 + 24);
        v254 = *((_QWORD *)v142 + 7);
        v255 = *(_OWORD *)(v142 + 40);
        *v238 = *v239;
        *(_OWORD *)(v141 + 40) = v255;
        *(_QWORD *)(v141 + 56) = v254;
      }
      else
      {
        *(_BYTE *)(v141 + 24) = v142[24];
        *(_BYTE *)(v141 + 25) = v142[25];
        *(_BYTE *)(v141 + 26) = v142[26];
        *(_DWORD *)(v141 + 28) = *((_DWORD *)v142 + 7);
        *(_WORD *)(v141 + 32) = *((_WORD *)v142 + 16);
        *(_WORD *)(v141 + 34) = *((_WORD *)v142 + 17);
        *(_WORD *)(v141 + 36) = *((_WORD *)v142 + 18);
        *(_WORD *)(v141 + 38) = *((_WORD *)v142 + 19);
        *(_WORD *)(v141 + 40) = *((_WORD *)v142 + 20);
        *(_WORD *)(v141 + 42) = *((_WORD *)v142 + 21);
        *(_WORD *)(v141 + 44) = *((_WORD *)v142 + 22);
        *(_WORD *)(v141 + 46) = *((_WORD *)v142 + 23);
        *(_QWORD *)(v141 + 48) = *((_QWORD *)v142 + 6);
        *(_QWORD *)(v141 + 56) = *((_QWORD *)v142 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      v257 = *(int *)(v17 + 28);
      v258 = (void *)(v141 + v257);
      v259 = &v142[v257];
      v260 = sub_224F67874();
      v261 = *(_QWORD *)(v260 - 8);
      v262 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v261 + 48);
      v263 = v262(v258, 1, v260);
      v264 = v262(v259, 1, v260);
      if (v263)
      {
        if (!v264)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v261 + 16))(v258, v259, v260);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v261 + 56))(v258, 0, 1, v260);
LABEL_179:
          v4 = v279;
          a3 = v282;
          v266 = *(int *)(v17 + 32);
          v267 = (_QWORD *)(v141 + v266);
          v268 = &v142[v266];
          *v267 = *v268;
          v267[1] = v268[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_49;
        }
      }
      else
      {
        if (!v264)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v261 + 24))(v258, v259, v260);
          goto LABEL_179;
        }
        (*(void (**)(void *, uint64_t))(v261 + 8))(v258, v260);
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v258, v259, *(_QWORD *)(*(_QWORD *)(v265 - 8) + 64));
      goto LABEL_179;
    }
    if (v69)
    {
      sub_224DDEAA0((uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v70 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_59;
    }
    *v57 = *v58;
    *((_QWORD *)v57 + 1) = *((_QWORD *)v58 + 1);
    *((_WORD *)v57 + 8) = *((_WORD *)v58 + 8);
    *((_WORD *)v57 + 9) = *((_WORD *)v58 + 9);
    v107 = (__int128 *)(v57 + 24);
    v108 = (__int128 *)(v58 + 24);
    v109 = *((_QWORD *)v58 + 7);
    v276 = v4;
    if (*((_QWORD *)v57 + 7) == 1)
    {
      if (v109 == 1)
      {
        v110 = *v108;
        v111 = *(_OWORD *)(v58 + 40);
        *((_QWORD *)v57 + 7) = *((_QWORD *)v58 + 7);
        *v107 = v110;
        *(_OWORD *)(v57 + 40) = v111;
      }
      else
      {
        v57[24] = v58[24];
        v57[25] = v58[25];
        v57[26] = v58[26];
        v125 = *(_OWORD *)(v58 + 28);
        *((_DWORD *)v57 + 11) = *((_DWORD *)v58 + 11);
        *(_OWORD *)(v57 + 28) = v125;
        *((_QWORD *)v57 + 6) = *((_QWORD *)v58 + 6);
        *((_QWORD *)v57 + 7) = *((_QWORD *)v58 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v109 == 1)
    {
      sub_224E2C9F4((uint64_t)(v57 + 24));
      v123 = *((_QWORD *)v58 + 7);
      v124 = *(_OWORD *)(v58 + 40);
      *v107 = *v108;
      *(_OWORD *)(v57 + 40) = v124;
      *((_QWORD *)v57 + 7) = v123;
    }
    else
    {
      v57[24] = v58[24];
      v57[25] = v58[25];
      v57[26] = v58[26];
      *((_DWORD *)v57 + 7) = *((_DWORD *)v58 + 7);
      *((_WORD *)v57 + 16) = *((_WORD *)v58 + 16);
      *((_WORD *)v57 + 17) = *((_WORD *)v58 + 17);
      *((_WORD *)v57 + 18) = *((_WORD *)v58 + 18);
      *((_WORD *)v57 + 19) = *((_WORD *)v58 + 19);
      *((_WORD *)v57 + 20) = *((_WORD *)v58 + 20);
      *((_WORD *)v57 + 21) = *((_WORD *)v58 + 21);
      *((_WORD *)v57 + 22) = *((_WORD *)v58 + 22);
      *((_WORD *)v57 + 23) = *((_WORD *)v58 + 23);
      *((_QWORD *)v57 + 6) = *((_QWORD *)v58 + 6);
      *((_QWORD *)v57 + 7) = *((_QWORD *)v58 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v126 = *(int *)(v17 + 28);
    v127 = &v57[v126];
    v128 = &v58[v126];
    v129 = sub_224F67874();
    v130 = *(_QWORD *)(v129 - 8);
    v131 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v130 + 48);
    v269 = v127;
    LODWORD(v127) = v131(v127, 1, v129);
    v132 = v131(v128, 1, v129);
    if ((_DWORD)v127)
    {
      if (!v132)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v130 + 16))(v269, v128, v129);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v269, 0, 1, v129);
        goto LABEL_98;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v134 = *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64);
      v135 = v269;
    }
    else
    {
      if (!v132)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v130 + 24))(v269, v128, v129);
        goto LABEL_98;
      }
      (*(void (**)(void *, uint64_t))(v130 + 8))(v269, v129);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v134 = *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64);
      v135 = v269;
    }
    memcpy(v135, v128, v134);
LABEL_98:
    a3 = v282;
    v137 = *(int *)(v17 + 32);
    v138 = &v57[v137];
    v139 = &v58[v137];
    *v138 = *v139;
    v138[1] = v139[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v4 = v276;
    v66 = v280;
    goto LABEL_99;
  }
  if (v63)
  {
    v64 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_48:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v64);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
LABEL_49:
    v66 = v280;
    goto LABEL_105;
  }
  v66 = v280;
  if (v280((uint64_t)v58, 1, v17))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
  }
  else
  {
    *v57 = *v58;
    v71 = *((_QWORD *)v58 + 1);
    *((_DWORD *)v57 + 4) = *((_DWORD *)v58 + 4);
    *((_QWORD *)v57 + 1) = v71;
    v274 = v4;
    if (*((_QWORD *)v58 + 7) == 1)
    {
      v72 = *(_OWORD *)(v58 + 24);
      v73 = *(_OWORD *)(v58 + 40);
      *((_QWORD *)v57 + 7) = *((_QWORD *)v58 + 7);
      *(_OWORD *)(v57 + 24) = v72;
      *(_OWORD *)(v57 + 40) = v73;
    }
    else
    {
      v57[24] = v58[24];
      v57[25] = v58[25];
      v57[26] = v58[26];
      v75 = *(_OWORD *)(v58 + 28);
      *((_DWORD *)v57 + 11) = *((_DWORD *)v58 + 11);
      *(_OWORD *)(v57 + 28) = v75;
      *((_QWORD *)v57 + 6) = *((_QWORD *)v58 + 6);
      *((_QWORD *)v57 + 7) = *((_QWORD *)v58 + 7);
      swift_bridgeObjectRetain();
    }
    v76 = *(int *)(v17 + 28);
    v77 = &v57[v76];
    v78 = &v58[v76];
    v79 = sub_224F67874();
    v80 = *(_QWORD *)(v79 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v80 + 16))(v77, v78, v79);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
    }
    v86 = *(int *)(v17 + 32);
    v87 = &v57[v86];
    v88 = &v58[v86];
    *v87 = *v88;
    v87[1] = v88[1];
    v4 = v274;
    v89 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v271 + 56);
    swift_bridgeObjectRetain();
    v89(v57, 0, 1, v17);
    v66 = v280;
    a3 = v282;
  }
  v90 = *(int *)(v59 + 20);
  v91 = &v57[v90];
  v92 = &v58[v90];
  if (v66((uint64_t)v92, 1, v17))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
  }
  else
  {
    *v91 = *v92;
    v94 = *((_QWORD *)v92 + 1);
    *((_DWORD *)v91 + 4) = *((_DWORD *)v92 + 4);
    *((_QWORD *)v91 + 1) = v94;
    v275 = v4;
    if (*((_QWORD *)v92 + 7) == 1)
    {
      v95 = *(_OWORD *)(v92 + 24);
      v96 = *(_OWORD *)(v92 + 40);
      *((_QWORD *)v91 + 7) = *((_QWORD *)v92 + 7);
      *(_OWORD *)(v91 + 24) = v95;
      *(_OWORD *)(v91 + 40) = v96;
    }
    else
    {
      v91[24] = v92[24];
      v91[25] = v92[25];
      v91[26] = v92[26];
      v97 = *(_OWORD *)(v92 + 28);
      *((_DWORD *)v91 + 11) = *((_DWORD *)v92 + 11);
      *(_OWORD *)(v91 + 28) = v97;
      *((_QWORD *)v91 + 6) = *((_QWORD *)v92 + 6);
      *((_QWORD *)v91 + 7) = *((_QWORD *)v92 + 7);
      swift_bridgeObjectRetain();
    }
    v98 = *(int *)(v17 + 28);
    __dst = &v91[v98];
    v99 = &v92[v98];
    v100 = sub_224F67874();
    v101 = *(_QWORD *)(v100 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v101 + 16))(__dst, v99, v100);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v101 + 56))(__dst, 0, 1, v100);
    }
    a3 = v282;
    v103 = *(int *)(v17 + 32);
    v104 = &v91[v103];
    v105 = &v92[v103];
    *v104 = *v105;
    v104[1] = v105[1];
    v106 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v271 + 56);
    swift_bridgeObjectRetain();
    v106(v91, 0, 1, v17);
    v4 = v275;
    v66 = v280;
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
LABEL_105:
  v147 = a3[13];
  v148 = (uint64_t)a1 + v147;
  v149 = (char *)v4 + v147;
  v150 = v66((uint64_t)a1 + v147, 1, v17);
  v151 = v66((uint64_t)v149, 1, v17);
  if (!v150)
  {
    if (v151)
    {
      sub_224DDEAA0(v148, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v152 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_110;
    }
    *(_BYTE *)v148 = *v149;
    *(_QWORD *)(v148 + 8) = *((_QWORD *)v149 + 1);
    *(_WORD *)(v148 + 16) = *((_WORD *)v149 + 8);
    *(_WORD *)(v148 + 18) = *((_WORD *)v149 + 9);
    v157 = (__int128 *)(v148 + 24);
    v158 = (__int128 *)(v149 + 24);
    v159 = *((_QWORD *)v149 + 7);
    v277 = v4;
    if (*(_QWORD *)(v148 + 56) == 1)
    {
      if (v159 == 1)
      {
        v160 = *v158;
        v161 = *(_OWORD *)(v149 + 40);
        *(_QWORD *)(v148 + 56) = *((_QWORD *)v149 + 7);
        *v157 = v160;
        *(_OWORD *)(v148 + 40) = v161;
      }
      else
      {
        *(_BYTE *)(v148 + 24) = v149[24];
        *(_BYTE *)(v148 + 25) = v149[25];
        *(_BYTE *)(v148 + 26) = v149[26];
        v175 = *(_OWORD *)(v149 + 28);
        *(_DWORD *)(v148 + 44) = *((_DWORD *)v149 + 11);
        *(_OWORD *)(v148 + 28) = v175;
        *(_QWORD *)(v148 + 48) = *((_QWORD *)v149 + 6);
        *(_QWORD *)(v148 + 56) = *((_QWORD *)v149 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v159 == 1)
    {
      sub_224E2C9F4(v148 + 24);
      v173 = *((_QWORD *)v149 + 7);
      v174 = *(_OWORD *)(v149 + 40);
      *v157 = *v158;
      *(_OWORD *)(v148 + 40) = v174;
      *(_QWORD *)(v148 + 56) = v173;
    }
    else
    {
      *(_BYTE *)(v148 + 24) = v149[24];
      *(_BYTE *)(v148 + 25) = v149[25];
      *(_BYTE *)(v148 + 26) = v149[26];
      *(_DWORD *)(v148 + 28) = *((_DWORD *)v149 + 7);
      *(_WORD *)(v148 + 32) = *((_WORD *)v149 + 16);
      *(_WORD *)(v148 + 34) = *((_WORD *)v149 + 17);
      *(_WORD *)(v148 + 36) = *((_WORD *)v149 + 18);
      *(_WORD *)(v148 + 38) = *((_WORD *)v149 + 19);
      *(_WORD *)(v148 + 40) = *((_WORD *)v149 + 20);
      *(_WORD *)(v148 + 42) = *((_WORD *)v149 + 21);
      *(_WORD *)(v148 + 44) = *((_WORD *)v149 + 22);
      *(_WORD *)(v148 + 46) = *((_WORD *)v149 + 23);
      *(_QWORD *)(v148 + 48) = *((_QWORD *)v149 + 6);
      *(_QWORD *)(v148 + 56) = *((_QWORD *)v149 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v176 = *(int *)(v17 + 28);
    v177 = (void *)(v148 + v176);
    v178 = &v149[v176];
    v179 = sub_224F67874();
    v180 = *(_QWORD *)(v179 - 8);
    v181 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v180 + 48);
    v182 = v181(v177, 1, v179);
    v183 = v181(v178, 1, v179);
    if (v182)
    {
      if (!v183)
      {
        (*(void (**)(void *, char *, uint64_t))(v180 + 16))(v177, v178, v179);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v180 + 56))(v177, 0, 1, v179);
LABEL_131:
        v4 = v277;
        a3 = v282;
        v185 = *(int *)(v17 + 32);
        v186 = (_QWORD *)(v148 + v185);
        v187 = &v149[v185];
        *v186 = *(_QWORD *)v187;
        v186[1] = *((_QWORD *)v187 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_132;
      }
    }
    else
    {
      if (!v183)
      {
        (*(void (**)(void *, char *, uint64_t))(v180 + 24))(v177, v178, v179);
        goto LABEL_131;
      }
      (*(void (**)(void *, uint64_t))(v180 + 8))(v177, v179);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
    goto LABEL_131;
  }
  if (v151)
  {
    v152 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_110:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v152);
    memcpy((void *)v148, v149, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
    goto LABEL_132;
  }
  *(_BYTE *)v148 = *v149;
  v154 = *((_QWORD *)v149 + 1);
  *(_DWORD *)(v148 + 16) = *((_DWORD *)v149 + 4);
  *(_QWORD *)(v148 + 8) = v154;
  if (*((_QWORD *)v149 + 7) == 1)
  {
    v155 = *(_OWORD *)(v149 + 24);
    v156 = *(_OWORD *)(v149 + 40);
    *(_QWORD *)(v148 + 56) = *((_QWORD *)v149 + 7);
    *(_OWORD *)(v148 + 24) = v155;
    *(_OWORD *)(v148 + 40) = v156;
  }
  else
  {
    *(_BYTE *)(v148 + 24) = v149[24];
    *(_BYTE *)(v148 + 25) = v149[25];
    *(_BYTE *)(v148 + 26) = v149[26];
    v162 = *(_OWORD *)(v149 + 28);
    *(_DWORD *)(v148 + 44) = *((_DWORD *)v149 + 11);
    *(_OWORD *)(v148 + 28) = v162;
    *(_QWORD *)(v148 + 48) = *((_QWORD *)v149 + 6);
    *(_QWORD *)(v148 + 56) = *((_QWORD *)v149 + 7);
    swift_bridgeObjectRetain();
  }
  v163 = *(int *)(v17 + 28);
  v164 = (void *)(v148 + v163);
  v165 = &v149[v163];
  v166 = sub_224F67874();
  v167 = *(_QWORD *)(v166 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48))(v165, 1, v166))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v167 + 16))(v164, v165, v166);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v164, 0, 1, v166);
  }
  a3 = v282;
  v169 = *(int *)(v17 + 32);
  v170 = (_QWORD *)(v148 + v169);
  v171 = &v149[v169];
  *v170 = *(_QWORD *)v171;
  v170[1] = *((_QWORD *)v171 + 1);
  v172 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v271 + 56);
  swift_bridgeObjectRetain();
  v172(v148, 0, 1, v17);
LABEL_132:
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)v4 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v188 = a3[15];
  v189 = (_QWORD *)((char *)a1 + v188);
  v190 = (_QWORD *)((char *)v4 + v188);
  *v189 = *v190;
  v189[1] = v190[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v191 = a3[16];
  v192 = (uint64_t)a1 + v191;
  v193 = (char *)v4 + v191;
  v194 = *(_QWORD *)((char *)a1 + v191 + 8);
  v195 = *(_QWORD *)((char *)v4 + v191 + 8);
  if (v194 == 1)
  {
    if (v195 == 1)
    {
      v196 = *(_OWORD *)v193;
      *(_QWORD *)(v192 + 16) = *((_QWORD *)v193 + 2);
      *(_OWORD *)v192 = v196;
    }
    else
    {
      *(_QWORD *)v192 = *(_QWORD *)v193;
      *(_QWORD *)(v192 + 8) = *((_QWORD *)v193 + 1);
      *(_QWORD *)(v192 + 16) = *((_QWORD *)v193 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v195 == 1)
  {
    sub_224E2C9C0(v192);
    v197 = *((_QWORD *)v193 + 2);
    *(_OWORD *)v192 = *(_OWORD *)v193;
    *(_QWORD *)(v192 + 16) = v197;
  }
  else
  {
    *(_QWORD *)v192 = *(_QWORD *)v193;
    *(_QWORD *)(v192 + 8) = *((_QWORD *)v193 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v192 + 16) = *((_QWORD *)v193 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v198 = a3[17];
  v199 = (_QWORD *)((char *)a1 + v198);
  v200 = (_QWORD *)((char *)v4 + v198);
  v201 = type metadata accessor for Quantity();
  v202 = *(_QWORD *)(v201 - 8);
  v203 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v202 + 48);
  v204 = v203(v199, 1, v201);
  v205 = v203(v200, 1, v201);
  if (!v204)
  {
    if (v205)
    {
      sub_224DDEAA0((uint64_t)v199, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
      v206 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_144;
    }
    v278 = v4;
    v214 = *(_OWORD *)v200;
    *(_QWORD *)((char *)v199 + 13) = *(_QWORD *)((char *)v200 + 13);
    *(_OWORD *)v199 = v214;
    v199[3] = v200[3];
    v199[4] = v200[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v199[5] = v200[5];
    v199[6] = v200[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v215 = *(int *)(v201 + 28);
    v216 = (char *)v199 + v215;
    v217 = (char *)v200 + v215;
    v218 = sub_224F675D4();
    v219 = *(_QWORD *)(v218 - 8);
    v220 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v219 + 48);
    v221 = v220(v216, 1, v218);
    v222 = v220(v217, 1, v218);
    if (v221)
    {
      if (!v222)
      {
        (*(void (**)(char *, char *, uint64_t))(v219 + 16))(v216, v217, v218);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v219 + 56))(v216, 0, 1, v218);
LABEL_155:
        v4 = v278;
        a3 = v282;
        v228 = *(int *)(v201 + 32);
        v229 = (_QWORD *)((char *)v199 + v228);
        v230 = (_QWORD *)((char *)v200 + v228);
        *v229 = *v230;
        v229[1] = v230[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_156;
      }
    }
    else
    {
      if (!v222)
      {
        (*(void (**)(char *, char *, uint64_t))(v219 + 24))(v216, v217, v218);
        goto LABEL_155;
      }
      (*(void (**)(char *, uint64_t))(v219 + 8))(v216, v218);
    }
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v216, v217, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
    goto LABEL_155;
  }
  if (v205)
  {
    v206 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_144:
    sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, v206);
    memcpy(v199, v200, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
    goto LABEL_156;
  }
  v208 = *(_OWORD *)v200;
  *(_QWORD *)((char *)v199 + 13) = *(_QWORD *)((char *)v200 + 13);
  *(_OWORD *)v199 = v208;
  v199[3] = v200[3];
  v199[4] = v200[4];
  v199[5] = v200[5];
  v199[6] = v200[6];
  v209 = *(int *)(v201 + 28);
  v281 = (char *)v199 + v209;
  v210 = (char *)v200 + v209;
  v211 = sub_224F675D4();
  v272 = *(_QWORD *)(v211 - 8);
  v212 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v272 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v212(v210, 1, v211))
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v281, v210, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v272 + 16))(v281, v210, v211);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v281, 0, 1, v211);
  }
  a3 = v282;
  v223 = *(int *)(v201 + 32);
  v224 = (_QWORD *)((char *)v199 + v223);
  v225 = (_QWORD *)((char *)v200 + v223);
  *v224 = *v225;
  v224[1] = v225[1];
  v226 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v202 + 56);
  swift_bridgeObjectRetain();
  v226(v199, 0, 1, v201);
LABEL_156:
  *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)v4 + a3[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v231 = a3[19];
  v232 = (_QWORD *)((char *)a1 + v231);
  v233 = (_QWORD *)((char *)v4 + v231);
  *v232 = *v233;
  v232[1] = v233[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ModelsDSTU2.Observation(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int (*v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  __int128 v54;
  _OWORD *v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  _BYTE *__dst;
  _BYTE *__dsta;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v73)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v74)(_QWORD, _QWORD, _QWORD);
  _QWORD *v75;
  char *v76;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v7 = a3[11];
  v8 = (_BYTE *)(a1 + v7);
  v9 = (_BYTE *)(a2 + v7);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v10 = type metadata accessor for FHIRDateTime();
  v75 = *(_QWORD **)(v10 - 8);
  v11 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v75[6];
  if (v11(v9, 1, v10))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v72 = v11;
    *v8 = *v9;
    *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
    *((_DWORD *)v8 + 4) = *((_DWORD *)v9 + 4);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
    *((_QWORD *)v8 + 7) = *((_QWORD *)v9 + 7);
    v13 = *(int *)(v10 + 28);
    v14 = &v8[v13];
    v15 = &v9[v13];
    v16 = sub_224F67874();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    *(_OWORD *)&v8[*(int *)(v10 + 32)] = *(_OWORD *)&v9[*(int *)(v10 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v75[7])(v8, 0, 1, v10);
    v11 = v72;
  }
  v19 = a3[12];
  v20 = (_BYTE *)(a1 + v19);
  v21 = (_BYTE *)(a2 + v19);
  v22 = type metadata accessor for Period();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    if (v11(v21, 1, v10))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v70 = v23;
      v73 = v11;
      *v20 = *v21;
      *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
      *((_DWORD *)v20 + 4) = *((_DWORD *)v21 + 4);
      *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
      *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
      *((_QWORD *)v20 + 7) = *((_QWORD *)v21 + 7);
      v26 = *(int *)(v10 + 28);
      __dst = &v20[v26];
      v27 = &v21[v26];
      v28 = sub_224F67874();
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 32))(__dst, v27, v28);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
      }
      *(_OWORD *)&v20[*(int *)(v10 + 32)] = *(_OWORD *)&v21[*(int *)(v10 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v75[7])(v20, 0, 1, v10);
      v23 = v70;
      v11 = v73;
    }
    v31 = *(int *)(v22 + 20);
    v32 = &v20[v31];
    v33 = &v21[v31];
    if (v11(v33, 1, v10))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v71 = v23;
      v74 = v11;
      *v32 = *v33;
      *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
      *((_DWORD *)v32 + 4) = *((_DWORD *)v33 + 4);
      *(_OWORD *)(v32 + 24) = *(_OWORD *)(v33 + 24);
      *(_OWORD *)(v32 + 40) = *(_OWORD *)(v33 + 40);
      *((_QWORD *)v32 + 7) = *((_QWORD *)v33 + 7);
      v35 = *(int *)(v10 + 28);
      __dsta = &v32[v35];
      v36 = &v33[v35];
      v37 = sub_224F67874();
      v67 = *(_QWORD *)(v37 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v67 + 48))(v36, 1, v37))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dsta, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v67 + 32))(__dsta, v36, v37);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v67 + 56))(__dsta, 0, 1, v37);
      }
      v23 = v71;
      *(_OWORD *)&v32[*(int *)(v10 + 32)] = *(_OWORD *)&v33[*(int *)(v10 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v75[7])(v32, 0, 1, v10);
      v11 = v74;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v39 = a3[13];
  v40 = (_BYTE *)(a1 + v39);
  v41 = (_BYTE *)(a2 + v39);
  if (v11(a2 + v39, 1, v10))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    *v40 = *v41;
    *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
    *((_DWORD *)v40 + 4) = *((_DWORD *)v41 + 4);
    *(_OWORD *)(v40 + 24) = *(_OWORD *)(v41 + 24);
    *(_OWORD *)(v40 + 40) = *(_OWORD *)(v41 + 40);
    *((_QWORD *)v40 + 7) = *((_QWORD *)v41 + 7);
    v43 = *(int *)(v10 + 28);
    v44 = &v40[v43];
    v45 = &v41[v43];
    v46 = sub_224F67874();
    v47 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v47 + 32))(v44, v45, v46);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    *(_OWORD *)&v40[*(int *)(v10 + 32)] = *(_OWORD *)&v41[*(int *)(v10 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v75[7])(v40, 0, 1, v10);
  }
  v49 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v49) = *(_OWORD *)(a2 + v49);
  v50 = a3[16];
  v51 = a3[17];
  v52 = a1 + v50;
  v53 = (__int128 *)(a2 + v50);
  v54 = *v53;
  *(_QWORD *)(v52 + 16) = *((_QWORD *)v53 + 2);
  *(_OWORD *)v52 = v54;
  v55 = (_OWORD *)(a1 + v51);
  v56 = (_OWORD *)(a2 + v51);
  v57 = type metadata accessor for Quantity();
  v58 = *(_QWORD *)(v57 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
  {
    sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    *v55 = *v56;
    *(_QWORD *)((char *)v55 + 13) = *(_QWORD *)((char *)v56 + 13);
    *(_OWORD *)((char *)v55 + 24) = *(_OWORD *)((char *)v56 + 24);
    *(_OWORD *)((char *)v55 + 40) = *(_OWORD *)((char *)v56 + 40);
    v60 = *(int *)(v57 + 28);
    v76 = (char *)v55 + v60;
    v61 = (char *)v56 + v60;
    v62 = sub_224F675D4();
    v63 = *(_QWORD *)(v62 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v76, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v76, v61, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v76, 0, 1, v62);
    }
    *(_OWORD *)((char *)v55 + *(int *)(v57 + 32)) = *(_OWORD *)((char *)v56 + *(int *)(v57 + 32));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
  }
  v65 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  *(_OWORD *)(a1 + v65) = *(_OWORD *)(a2 + v65);
  return a1;
}

uint64_t assignWithTake for ModelsDSTU2.Observation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void *, uint64_t, uint64_t);
  int v36;
  uint64_t v37;
  size_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(_BYTE *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  int v58;
  int v59;
  uint64_t (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t (*v87)(_BYTE *, uint64_t, uint64_t);
  int v88;
  uint64_t v89;
  size_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  int v101;
  int v102;
  uint64_t (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  void *v113;
  const void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  void *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(void *, uint64_t, uint64_t);
  int v126;
  uint64_t v127;
  size_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t (*v158)(uint64_t, uint64_t, uint64_t);
  int v159;
  int v160;
  uint64_t (*v161)(uint64_t, uint64_t);
  uint64_t v162;
  uint64_t v163;
  void *v164;
  const void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t (*v176)(void *, uint64_t, uint64_t);
  int v177;
  uint64_t v178;
  size_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v193;
  void *v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t (*v198)(void *, uint64_t, uint64_t);
  int v199;
  uint64_t v200;
  size_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  void *v212;
  _BYTE *__src;
  _BYTE *__srca;
  void *__srcb;
  uint64_t v216;
  void *v217;
  void *v218;
  int *v219;
  uint64_t (*v220)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = (_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) == 1)
    goto LABEL_4;
  if (v9 == 1)
  {
    sub_224E2C98C(a1 + 32);
    v9 = *(_QWORD *)(a2 + 32);
LABEL_4:
    *v8 = v9;
    goto LABEL_6;
  }
  *v8 = v9;
  swift_bridgeObjectRelease();
LABEL_6:
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 64) == 1)
  {
LABEL_9:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a2 + 64);
  if (v11 == 1)
  {
    sub_224E2C9C0(a1 + 56);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
LABEL_11:
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v13;
  swift_bridgeObjectRelease();
  v14 = a3[11];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for FHIRDateTime();
  v216 = *(_QWORD *)(v17 - 8);
  v220 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v216 + 48);
  v18 = v220(v15, 1, v17);
  v19 = v220(v16, 1, v17);
  v219 = a3;
  if (!v18)
  {
    if (v19)
    {
      sub_224DDEAA0(v15, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_16;
    }
    *(_BYTE *)v15 = *(_BYTE *)v16;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
    *(_DWORD *)(v15 + 16) = *(_DWORD *)(v16 + 16);
    if (*(_QWORD *)(v15 + 56) != 1)
    {
      v28 = *(_QWORD *)(v16 + 56);
      if (v28 != 1)
      {
        *(_BYTE *)(v15 + 24) = *(_BYTE *)(v16 + 24);
        *(_WORD *)(v15 + 25) = *(_WORD *)(v16 + 25);
        *(_DWORD *)(v15 + 28) = *(_DWORD *)(v16 + 28);
        *(_OWORD *)(v15 + 32) = *(_OWORD *)(v16 + 32);
        *(_QWORD *)(v15 + 48) = *(_QWORD *)(v16 + 48);
        *(_QWORD *)(v15 + 56) = v28;
        swift_bridgeObjectRelease();
LABEL_26:
        v30 = *(int *)(v17 + 28);
        v31 = (void *)(v15 + v30);
        v32 = (void *)(v16 + v30);
        v33 = sub_224F67874();
        v34 = *(_QWORD *)(v33 - 8);
        v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
        v211 = v31;
        LODWORD(v31) = v35(v31, 1, v33);
        v36 = v35(v32, 1, v33);
        if ((_DWORD)v31)
        {
          if (!v36)
          {
            (*(void (**)(void *, void *, uint64_t))(v34 + 32))(v211, v32, v33);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v211, 0, 1, v33);
            goto LABEL_34;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v38 = *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64);
          v39 = v211;
        }
        else
        {
          if (!v36)
          {
            (*(void (**)(void *, void *, uint64_t))(v34 + 40))(v211, v32, v33);
            goto LABEL_34;
          }
          (*(void (**)(void *, uint64_t))(v34 + 8))(v211, v33);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v38 = *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64);
          v39 = v211;
        }
        memcpy(v39, v32, v38);
LABEL_34:
        a3 = v219;
        v41 = *(int *)(v17 + 32);
        v42 = (_QWORD *)(v15 + v41);
        v43 = (uint64_t *)(v16 + v41);
        v45 = *v43;
        v44 = v43[1];
        *v42 = v45;
        v42[1] = v44;
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }
      sub_224E2C9F4(v15 + 24);
    }
    v29 = *(_OWORD *)(v16 + 40);
    *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
    *(_OWORD *)(v15 + 40) = v29;
    *(_QWORD *)(v15 + 56) = *(_QWORD *)(v16 + 56);
    goto LABEL_26;
  }
  if (v19)
  {
    v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_16:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v20);
    memcpy((void *)v15, (const void *)v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_35;
  }
  *(_BYTE *)v15 = *(_BYTE *)v16;
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  *(_DWORD *)(v15 + 16) = *(_DWORD *)(v16 + 16);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(v16 + 40);
  *(_QWORD *)(v15 + 56) = *(_QWORD *)(v16 + 56);
  v22 = *(int *)(v17 + 28);
  v23 = (void *)(v15 + v22);
  v24 = (const void *)(v16 + v22);
  v25 = sub_224F67874();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  *(_OWORD *)(v15 + *(int *)(v17 + 32)) = *(_OWORD *)(v16 + *(int *)(v17 + 32));
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v216 + 56))(v15, 0, 1, v17);
LABEL_35:
  v46 = a3[12];
  v47 = (_BYTE *)(a1 + v46);
  v48 = (_BYTE *)(a2 + v46);
  v49 = type metadata accessor for Period();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v50 + 48);
  v52 = v51(v47, 1, v49);
  v53 = v51(v48, 1, v49);
  if (!v52)
  {
    if (v53)
    {
      sub_224DDEAA0((uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v54 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_40;
    }
    v56 = v220;
    v58 = v220((uint64_t)v47, 1, v17);
    v59 = v220((uint64_t)v48, 1, v17);
    if (v58)
    {
      if (v59)
      {
        v60 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_51:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v60);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
        goto LABEL_79;
      }
      *v47 = *v48;
      *((_QWORD *)v47 + 1) = *((_QWORD *)v48 + 1);
      *((_DWORD *)v47 + 4) = *((_DWORD *)v48 + 4);
      *(_OWORD *)(v47 + 24) = *(_OWORD *)(v48 + 24);
      *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
      *((_QWORD *)v47 + 7) = *((_QWORD *)v48 + 7);
      v67 = *(int *)(v17 + 28);
      v68 = &v47[v67];
      v69 = &v48[v67];
      v70 = sub_224F67874();
      v71 = *(_QWORD *)(v70 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v71 + 32))(v68, v69, v70);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
      }
      *(_OWORD *)&v47[*(int *)(v17 + 32)] = *(_OWORD *)&v48[*(int *)(v17 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v47, 0, 1, v17);
      a3 = v219;
      v56 = v220;
LABEL_79:
      v98 = *(int *)(v49 + 20);
      v99 = (uint64_t)&v47[v98];
      v100 = &v48[v98];
      v101 = v56(v99, 1, v17);
      v102 = v56((uint64_t)v100, 1, v17);
      if (v101)
      {
        if (!v102)
        {
          *(_BYTE *)v99 = *v100;
          *(_QWORD *)(v99 + 8) = *((_QWORD *)v100 + 1);
          *(_DWORD *)(v99 + 16) = *((_DWORD *)v100 + 4);
          *(_OWORD *)(v99 + 24) = *(_OWORD *)(v100 + 24);
          *(_OWORD *)(v99 + 40) = *(_OWORD *)(v100 + 40);
          *(_QWORD *)(v99 + 56) = *((_QWORD *)v100 + 7);
          v131 = *(int *)(v17 + 28);
          v132 = (void *)(v99 + v131);
          v133 = &v100[v131];
          v134 = sub_224F67874();
          v135 = *(_QWORD *)(v134 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v135 + 48))(v133, 1, v134))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v135 + 32))(v132, v133, v134);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v132, 0, 1, v134);
          }
          v56 = v220;
          *(_OWORD *)(v99 + *(int *)(v17 + 32)) = *(_OWORD *)&v100[*(int *)(v17 + 32)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v216 + 56))(v99, 0, 1, v17);
          goto LABEL_85;
        }
        v103 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_84:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v103);
        memcpy((void *)v99, v100, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
        goto LABEL_85;
      }
      if (v102)
      {
        sub_224DDEAA0(v99, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v103 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_84;
      }
      *(_BYTE *)v99 = *v100;
      *(_QWORD *)(v99 + 8) = *((_QWORD *)v100 + 1);
      *(_DWORD *)(v99 + 16) = *((_DWORD *)v100 + 4);
      if (*(_QWORD *)(v99 + 56) != 1)
      {
        v137 = *((_QWORD *)v100 + 7);
        if (v137 != 1)
        {
          *(_BYTE *)(v99 + 24) = v100[24];
          *(_WORD *)(v99 + 25) = *(_WORD *)(v100 + 25);
          *(_DWORD *)(v99 + 28) = *((_DWORD *)v100 + 7);
          *(_OWORD *)(v99 + 32) = *((_OWORD *)v100 + 2);
          *(_QWORD *)(v99 + 48) = *((_QWORD *)v100 + 6);
          *(_QWORD *)(v99 + 56) = v137;
          swift_bridgeObjectRelease();
LABEL_143:
          v193 = *(int *)(v17 + 28);
          v194 = (void *)(v99 + v193);
          v195 = &v100[v193];
          v196 = sub_224F67874();
          v197 = *(_QWORD *)(v196 - 8);
          v198 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v197 + 48);
          v212 = v194;
          LODWORD(v194) = v198(v194, 1, v196);
          v199 = v198(v195, 1, v196);
          if ((_DWORD)v194)
          {
            if (!v199)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v197 + 32))(v212, v195, v196);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v197 + 56))(v212, 0, 1, v196);
              goto LABEL_151;
            }
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            v201 = *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64);
            v202 = v212;
          }
          else
          {
            if (!v199)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v197 + 40))(v212, v195, v196);
              goto LABEL_151;
            }
            (*(void (**)(void *, uint64_t))(v197 + 8))(v212, v196);
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            v201 = *(_QWORD *)(*(_QWORD *)(v203 - 8) + 64);
            v202 = v212;
          }
          memcpy(v202, v195, v201);
LABEL_151:
          a3 = v219;
          v204 = *(int *)(v17 + 32);
          v205 = (_QWORD *)(v99 + v204);
          v206 = (uint64_t *)&v100[v204];
          v208 = *v206;
          v207 = v206[1];
          *v205 = v208;
          v205[1] = v207;
          swift_bridgeObjectRelease();
          goto LABEL_41;
        }
        sub_224E2C9F4(v99 + 24);
      }
      v138 = *(_OWORD *)(v100 + 40);
      *(_OWORD *)(v99 + 24) = *(_OWORD *)(v100 + 24);
      *(_OWORD *)(v99 + 40) = v138;
      *(_QWORD *)(v99 + 56) = *((_QWORD *)v100 + 7);
      goto LABEL_143;
    }
    if (v59)
    {
      sub_224DDEAA0((uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v60 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_51;
    }
    *v47 = *v48;
    *((_QWORD *)v47 + 1) = *((_QWORD *)v48 + 1);
    *((_DWORD *)v47 + 4) = *((_DWORD *)v48 + 4);
    if (*((_QWORD *)v47 + 7) != 1)
    {
      v81 = *((_QWORD *)v48 + 7);
      if (v81 != 1)
      {
        v47[24] = v48[24];
        *(_WORD *)(v47 + 25) = *(_WORD *)(v48 + 25);
        *((_DWORD *)v47 + 7) = *((_DWORD *)v48 + 7);
        *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
        *((_QWORD *)v47 + 6) = *((_QWORD *)v48 + 6);
        *((_QWORD *)v47 + 7) = v81;
        swift_bridgeObjectRelease();
LABEL_70:
        v83 = *(int *)(v17 + 28);
        v84 = &v47[v83];
        v85 = &v48[v83];
        v86 = sub_224F67874();
        v210 = *(_QWORD *)(v86 - 8);
        v87 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v210 + 48);
        __srcb = v84;
        LODWORD(v84) = v87(v84, 1, v86);
        v88 = v87(v85, 1, v86);
        if ((_DWORD)v84)
        {
          if (!v88)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v210 + 32))(__srcb, v85, v86);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v210 + 56))(__srcb, 0, 1, v86);
            goto LABEL_78;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v90 = *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64);
          v91 = __srcb;
        }
        else
        {
          if (!v88)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v210 + 40))(__srcb, v85, v86);
            goto LABEL_78;
          }
          (*(void (**)(void *, uint64_t))(v210 + 8))(__srcb, v86);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v90 = *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64);
          v91 = __srcb;
        }
        memcpy(v91, v85, v90);
LABEL_78:
        v56 = v220;
        v93 = *(int *)(v17 + 32);
        v94 = &v47[v93];
        v95 = (uint64_t *)&v48[v93];
        v97 = *v95;
        v96 = v95[1];
        *v94 = v97;
        v94[1] = v96;
        swift_bridgeObjectRelease();
        a3 = v219;
        goto LABEL_79;
      }
      sub_224E2C9F4((uint64_t)(v47 + 24));
    }
    v82 = *(_OWORD *)(v48 + 40);
    *(_OWORD *)(v47 + 24) = *(_OWORD *)(v48 + 24);
    *(_OWORD *)(v47 + 40) = v82;
    *((_QWORD *)v47 + 7) = *((_QWORD *)v48 + 7);
    goto LABEL_70;
  }
  if (v53)
  {
    v54 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_40:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v54);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
LABEL_41:
    v56 = v220;
    goto LABEL_85;
  }
  v56 = v220;
  if (v220((uint64_t)v48, 1, v17))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    *v47 = *v48;
    *((_QWORD *)v47 + 1) = *((_QWORD *)v48 + 1);
    *((_DWORD *)v47 + 4) = *((_DWORD *)v48 + 4);
    *(_OWORD *)(v47 + 24) = *(_OWORD *)(v48 + 24);
    *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
    *((_QWORD *)v47 + 7) = *((_QWORD *)v48 + 7);
    v61 = *(int *)(v17 + 28);
    __src = &v47[v61];
    v62 = &v48[v61];
    v63 = sub_224F67874();
    v64 = *(_QWORD *)(v63 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__src, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v64 + 32))(__src, v62, v63);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v64 + 56))(__src, 0, 1, v63);
    }
    *(_OWORD *)&v47[*(int *)(v17 + 32)] = *(_OWORD *)&v48[*(int *)(v17 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v47, 0, 1, v17);
    a3 = v219;
    v56 = v220;
  }
  v73 = *(int *)(v49 + 20);
  v74 = &v47[v73];
  v75 = &v48[v73];
  if (v56((uint64_t)v75, 1, v17))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
  }
  else
  {
    *v74 = *v75;
    *((_QWORD *)v74 + 1) = *((_QWORD *)v75 + 1);
    *((_DWORD *)v74 + 4) = *((_DWORD *)v75 + 4);
    *(_OWORD *)(v74 + 24) = *(_OWORD *)(v75 + 24);
    *(_OWORD *)(v74 + 40) = *(_OWORD *)(v75 + 40);
    *((_QWORD *)v74 + 7) = *((_QWORD *)v75 + 7);
    v77 = *(int *)(v17 + 28);
    __srca = &v74[v77];
    v78 = &v75[v77];
    v79 = sub_224F67874();
    v209 = *(_QWORD *)(v79 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v209 + 48))(v78, 1, v79))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__srca, v78, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v209 + 32))(__srca, v78, v79);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v209 + 56))(__srca, 0, 1, v79);
    }
    *(_OWORD *)&v74[*(int *)(v17 + 32)] = *(_OWORD *)&v75[*(int *)(v17 + 32)];
    a3 = v219;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v74, 0, 1, v17);
    v56 = v220;
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
LABEL_85:
  v105 = a3[13];
  v106 = a1 + v105;
  v107 = a2 + v105;
  v108 = v56(a1 + v105, 1, v17);
  v109 = v56(v107, 1, v17);
  if (!v108)
  {
    if (v109)
    {
      sub_224DDEAA0(v106, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v110 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_90;
    }
    *(_BYTE *)v106 = *(_BYTE *)v107;
    *(_QWORD *)(v106 + 8) = *(_QWORD *)(v107 + 8);
    *(_DWORD *)(v106 + 16) = *(_DWORD *)(v107 + 16);
    if (*(_QWORD *)(v106 + 56) != 1)
    {
      v118 = *(_QWORD *)(v107 + 56);
      if (v118 != 1)
      {
        *(_BYTE *)(v106 + 24) = *(_BYTE *)(v107 + 24);
        *(_WORD *)(v106 + 25) = *(_WORD *)(v107 + 25);
        *(_DWORD *)(v106 + 28) = *(_DWORD *)(v107 + 28);
        *(_OWORD *)(v106 + 32) = *(_OWORD *)(v107 + 32);
        *(_QWORD *)(v106 + 48) = *(_QWORD *)(v107 + 48);
        *(_QWORD *)(v106 + 56) = v118;
        swift_bridgeObjectRelease();
LABEL_100:
        v120 = *(int *)(v17 + 28);
        v121 = (void *)(v106 + v120);
        v122 = (void *)(v107 + v120);
        v123 = sub_224F67874();
        v124 = *(_QWORD *)(v123 - 8);
        v125 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v124 + 48);
        v217 = v121;
        LODWORD(v121) = v125(v121, 1, v123);
        v126 = v125(v122, 1, v123);
        if ((_DWORD)v121)
        {
          if (!v126)
          {
            (*(void (**)(void *, void *, uint64_t))(v124 + 32))(v217, v122, v123);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v217, 0, 1, v123);
            goto LABEL_114;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v128 = *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64);
          v129 = v217;
        }
        else
        {
          if (!v126)
          {
            (*(void (**)(void *, void *, uint64_t))(v124 + 40))(v217, v122, v123);
            goto LABEL_114;
          }
          (*(void (**)(void *, uint64_t))(v124 + 8))(v217, v123);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v128 = *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64);
          v129 = v217;
        }
        memcpy(v129, v122, v128);
LABEL_114:
        a3 = v219;
        v139 = *(int *)(v17 + 32);
        v140 = (_QWORD *)(v106 + v139);
        v141 = (uint64_t *)(v107 + v139);
        v143 = *v141;
        v142 = v141[1];
        *v140 = v143;
        v140[1] = v142;
        swift_bridgeObjectRelease();
        goto LABEL_115;
      }
      sub_224E2C9F4(v106 + 24);
    }
    v119 = *(_OWORD *)(v107 + 40);
    *(_OWORD *)(v106 + 24) = *(_OWORD *)(v107 + 24);
    *(_OWORD *)(v106 + 40) = v119;
    *(_QWORD *)(v106 + 56) = *(_QWORD *)(v107 + 56);
    goto LABEL_100;
  }
  if (v109)
  {
    v110 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_90:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v110);
    memcpy((void *)v106, (const void *)v107, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    goto LABEL_115;
  }
  *(_BYTE *)v106 = *(_BYTE *)v107;
  *(_QWORD *)(v106 + 8) = *(_QWORD *)(v107 + 8);
  *(_DWORD *)(v106 + 16) = *(_DWORD *)(v107 + 16);
  *(_OWORD *)(v106 + 24) = *(_OWORD *)(v107 + 24);
  *(_OWORD *)(v106 + 40) = *(_OWORD *)(v107 + 40);
  *(_QWORD *)(v106 + 56) = *(_QWORD *)(v107 + 56);
  v112 = *(int *)(v17 + 28);
  v113 = (void *)(v106 + v112);
  v114 = (const void *)(v107 + v112);
  v115 = sub_224F67874();
  v116 = *(_QWORD *)(v115 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v116 + 32))(v113, v114, v115);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
  }
  *(_OWORD *)(v106 + *(int *)(v17 + 32)) = *(_OWORD *)(v107 + *(int *)(v17 + 32));
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v216 + 56))(v106, 0, 1, v17);
LABEL_115:
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  v144 = a3[15];
  v145 = (_QWORD *)(a1 + v144);
  v146 = (uint64_t *)(a2 + v144);
  v148 = *v146;
  v147 = v146[1];
  *v145 = v148;
  v145[1] = v147;
  swift_bridgeObjectRelease();
  v149 = a3[16];
  v150 = a1 + v149;
  v151 = a2 + v149;
  if (*(_QWORD *)(a1 + v149 + 8) == 1)
  {
LABEL_118:
    *(_OWORD *)v150 = *(_OWORD *)v151;
    *(_QWORD *)(v150 + 16) = *(_QWORD *)(v151 + 16);
    goto LABEL_120;
  }
  v152 = *(_QWORD *)(v151 + 8);
  if (v152 == 1)
  {
    sub_224E2C9C0(v150);
    goto LABEL_118;
  }
  *(_QWORD *)v150 = *(_QWORD *)v151;
  *(_QWORD *)(v150 + 8) = v152;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v150 + 16) = *(_QWORD *)(v151 + 16);
  swift_bridgeObjectRelease();
LABEL_120:
  v153 = a3[17];
  v154 = a1 + v153;
  v155 = a2 + v153;
  v156 = type metadata accessor for Quantity();
  v157 = *(_QWORD *)(v156 - 8);
  v158 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v157 + 48);
  v159 = v158(v154, 1, v156);
  v160 = v158(v155, 1, v156);
  if (!v159)
  {
    if (v160)
    {
      sub_224DDEAA0(v154, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
      v161 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_125;
    }
    *(_OWORD *)v154 = *(_OWORD *)v155;
    *(_QWORD *)(v154 + 13) = *(_QWORD *)(v155 + 13);
    v169 = *(_QWORD *)(v155 + 32);
    *(_QWORD *)(v154 + 24) = *(_QWORD *)(v155 + 24);
    *(_QWORD *)(v154 + 32) = v169;
    swift_bridgeObjectRelease();
    v170 = *(_QWORD *)(v155 + 48);
    *(_QWORD *)(v154 + 40) = *(_QWORD *)(v155 + 40);
    *(_QWORD *)(v154 + 48) = v170;
    swift_bridgeObjectRelease();
    v171 = *(int *)(v156 + 28);
    v172 = (void *)(v154 + v171);
    v173 = (void *)(v155 + v171);
    v174 = sub_224F675D4();
    v175 = *(_QWORD *)(v174 - 8);
    v176 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v175 + 48);
    v218 = v172;
    LODWORD(v172) = v176(v172, 1, v174);
    v177 = v176(v173, 1, v174);
    if ((_DWORD)v172)
    {
      if (!v177)
      {
        (*(void (**)(void *, void *, uint64_t))(v175 + 32))(v218, v173, v174);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v175 + 56))(v218, 0, 1, v174);
        goto LABEL_138;
      }
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v179 = *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64);
      v180 = v218;
    }
    else
    {
      if (!v177)
      {
        (*(void (**)(void *, void *, uint64_t))(v175 + 40))(v218, v173, v174);
        goto LABEL_138;
      }
      (*(void (**)(void *, uint64_t))(v175 + 8))(v218, v174);
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v179 = *(_QWORD *)(*(_QWORD *)(v181 - 8) + 64);
      v180 = v218;
    }
    memcpy(v180, v173, v179);
LABEL_138:
    a3 = v219;
    v182 = *(int *)(v156 + 32);
    v183 = (_QWORD *)(v154 + v182);
    v184 = (uint64_t *)(v155 + v182);
    v186 = *v184;
    v185 = v184[1];
    *v183 = v186;
    v183[1] = v185;
    swift_bridgeObjectRelease();
    goto LABEL_139;
  }
  if (v160)
  {
    v161 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_125:
    sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, v161);
    memcpy((void *)v154, (const void *)v155, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_139;
  }
  *(_OWORD *)v154 = *(_OWORD *)v155;
  *(_QWORD *)(v154 + 13) = *(_QWORD *)(v155 + 13);
  *(_OWORD *)(v154 + 24) = *(_OWORD *)(v155 + 24);
  *(_OWORD *)(v154 + 40) = *(_OWORD *)(v155 + 40);
  v163 = *(int *)(v156 + 28);
  v164 = (void *)(v154 + v163);
  v165 = (const void *)(v155 + v163);
  v166 = sub_224F675D4();
  v167 = *(_QWORD *)(v166 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v167 + 48))(v165, 1, v166))
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v167 + 32))(v164, v165, v166);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v164, 0, 1, v166);
  }
  a3 = v219;
  *(_OWORD *)(v154 + *(int *)(v156 + 32)) = *(_OWORD *)(v155 + *(int *)(v156 + 32));
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v157 + 56))(v154, 0, 1, v156);
LABEL_139:
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  swift_bridgeObjectRelease();
  v187 = a3[19];
  v188 = (_QWORD *)(a1 + v187);
  v189 = (uint64_t *)(a2 + v187);
  v191 = *v189;
  v190 = v189[1];
  *v188 = v191;
  v188[1] = v190;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Observation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224EC6644(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[11];
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[12];
      }
      else
      {
        sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a3[17];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.Observation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224EC675C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[11];
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[12];
      }
      else
      {
        sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a4[17];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_224EC6864()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_224DDEA0C(319, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_224DDEA0C(319, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
    {
      sub_224DDEA0C(319, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsDSTU2.HumanName(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(_BYTE *, uint64_t, uint64_t);
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  void (*v35)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  void (*v53)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  _BYTE *__dst;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    v16 = v15 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = a2[7];
    v9 = *(int *)(a3 + 40);
    v10 = (char *)a2 + v9;
    __dst = (char *)a1 + v9;
    a1[6] = a2[6];
    a1[7] = v8;
    v11 = type metadata accessor for Period();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v17 = type metadata accessor for FHIRDateTime();
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48);
      if (v19(v10, 1, v17))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v21 = __dst;
        memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        *__dst = *v10;
        *((_QWORD *)__dst + 1) = *((_QWORD *)v10 + 1);
        *((_DWORD *)__dst + 4) = *((_DWORD *)v10 + 4);
        v22 = *((_QWORD *)v10 + 7);
        v55 = v18;
        v23 = v11;
        if (v22 == 1)
        {
          v24 = *(_OWORD *)(v10 + 40);
          *(_OWORD *)(__dst + 24) = *(_OWORD *)(v10 + 24);
          *(_OWORD *)(__dst + 40) = v24;
          *((_QWORD *)__dst + 7) = *((_QWORD *)v10 + 7);
        }
        else
        {
          __dst[24] = v10[24];
          *(_WORD *)(__dst + 25) = *(_WORD *)(v10 + 25);
          *(_OWORD *)(__dst + 28) = *(_OWORD *)(v10 + 28);
          *((_DWORD *)__dst + 11) = *((_DWORD *)v10 + 11);
          *((_QWORD *)__dst + 6) = *((_QWORD *)v10 + 6);
          *((_QWORD *)__dst + 7) = v22;
          swift_bridgeObjectRetain();
        }
        v25 = *(int *)(v17 + 28);
        v26 = &__dst[v25];
        v27 = &v10[v25];
        v28 = sub_224F67874();
        v29 = *(_QWORD *)(v28 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 16))(v26, v27, v28);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
        }
        v21 = __dst;
        v11 = v23;
        v18 = v55;
        v31 = *(int *)(v17 + 32);
        v32 = &__dst[v31];
        v33 = &v10[v31];
        v34 = v33[1];
        *v32 = *v33;
        v32[1] = v34;
        v35 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v55 + 56);
        swift_bridgeObjectRetain();
        v35(__dst, 0, 1, v17);
      }
      v36 = *(int *)(v11 + 20);
      v37 = &v21[v36];
      v38 = &v10[v36];
      if (v19(&v10[v36], 1, v17))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        *v37 = *v38;
        *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
        *((_DWORD *)v37 + 4) = *((_DWORD *)v38 + 4);
        v40 = *((_QWORD *)v38 + 7);
        v56 = v18;
        v41 = v11;
        if (v40 == 1)
        {
          v42 = *(_OWORD *)(v38 + 40);
          *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
          *(_OWORD *)(v37 + 40) = v42;
          *((_QWORD *)v37 + 7) = *((_QWORD *)v38 + 7);
        }
        else
        {
          v37[24] = v38[24];
          *(_WORD *)(v37 + 25) = *(_WORD *)(v38 + 25);
          *(_OWORD *)(v37 + 28) = *(_OWORD *)(v38 + 28);
          *((_DWORD *)v37 + 11) = *((_DWORD *)v38 + 11);
          *((_QWORD *)v37 + 6) = *((_QWORD *)v38 + 6);
          *((_QWORD *)v37 + 7) = v40;
          swift_bridgeObjectRetain();
        }
        v43 = *(int *)(v17 + 28);
        v44 = &v37[v43];
        v45 = &v38[v43];
        v46 = sub_224F67874();
        v47 = *(_QWORD *)(v46 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v47 + 16))(v44, v45, v46);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        }
        v21 = __dst;
        v11 = v41;
        v49 = *(int *)(v17 + 32);
        v50 = &v37[v49];
        v51 = &v38[v49];
        v52 = v51[1];
        *v50 = *v51;
        v50[1] = v52;
        v53 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56);
        swift_bridgeObjectRetain();
        v53(v37, 0, 1, v17);
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v21, 0, 1, v11);
    }
    return a1;
  }
  return (uint64_t *)v16;
}

uint64_t destroy for ModelsDSTU2.HumanName(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for Period();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = type metadata accessor for FHIRDateTime();
    v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
    if (!v8(v4, 1, v7))
    {
      if (*(_QWORD *)(v4 + 56) != 1)
        swift_bridgeObjectRelease();
      v9 = v4 + *(int *)(v7 + 28);
      v10 = sub_224F67874();
      v11 = *(_QWORD *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      swift_bridgeObjectRelease();
    }
    v12 = v4 + *(int *)(v5 + 20);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v12, 1, v7);
    if (!(_DWORD)result)
    {
      if (*(_QWORD *)(v12 + 56) != 1)
        swift_bridgeObjectRelease();
      v13 = v12 + *(int *)(v7 + 28);
      v14 = sub_224F67874();
      v15 = *(_QWORD *)(v14 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

_QWORD *initializeWithCopy for ModelsDSTU2.HumanName(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(_BYTE *, uint64_t, uint64_t);
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v31)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void (*v50)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _BYTE *__dst;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  v7 = *(int *)(a3 + 40);
  v8 = (char *)a2 + v7;
  __dst = (char *)a1 + v7;
  a1[6] = a2[6];
  a1[7] = v6;
  v9 = type metadata accessor for Period();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for FHIRDateTime();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48);
    if (v15(v8, 1, v13))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v17 = __dst;
      memcpy(__dst, v8, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      *__dst = *v8;
      *((_QWORD *)__dst + 1) = *((_QWORD *)v8 + 1);
      *((_DWORD *)__dst + 4) = *((_DWORD *)v8 + 4);
      v18 = *((_QWORD *)v8 + 7);
      v52 = v14;
      v19 = v9;
      if (v18 == 1)
      {
        v20 = *(_OWORD *)(v8 + 40);
        *(_OWORD *)(__dst + 24) = *(_OWORD *)(v8 + 24);
        *(_OWORD *)(__dst + 40) = v20;
        *((_QWORD *)__dst + 7) = *((_QWORD *)v8 + 7);
      }
      else
      {
        __dst[24] = v8[24];
        *(_WORD *)(__dst + 25) = *(_WORD *)(v8 + 25);
        *(_OWORD *)(__dst + 28) = *(_OWORD *)(v8 + 28);
        *((_DWORD *)__dst + 11) = *((_DWORD *)v8 + 11);
        *((_QWORD *)__dst + 6) = *((_QWORD *)v8 + 6);
        *((_QWORD *)__dst + 7) = v18;
        swift_bridgeObjectRetain();
      }
      v21 = *(int *)(v13 + 28);
      v22 = &__dst[v21];
      v23 = &v8[v21];
      v24 = sub_224F67874();
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v25 + 16))(v22, v23, v24);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      v9 = v19;
      v27 = *(int *)(v13 + 32);
      v17 = __dst;
      v28 = &__dst[v27];
      v29 = &v8[v27];
      v30 = v29[1];
      *v28 = *v29;
      v28[1] = v30;
      v14 = v52;
      v31 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v52 + 56);
      swift_bridgeObjectRetain();
      v31(__dst, 0, 1, v13);
    }
    v32 = *(int *)(v9 + 20);
    v33 = &v17[v32];
    v34 = &v8[v32];
    if (v15(&v8[v32], 1, v13))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      v36 = v10;
    }
    else
    {
      *v33 = *v34;
      *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
      *((_DWORD *)v33 + 4) = *((_DWORD *)v34 + 4);
      v37 = *((_QWORD *)v34 + 7);
      v53 = v9;
      v38 = v14;
      if (v37 == 1)
      {
        v39 = *(_OWORD *)(v34 + 40);
        *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
        *(_OWORD *)(v33 + 40) = v39;
        *((_QWORD *)v33 + 7) = *((_QWORD *)v34 + 7);
      }
      else
      {
        v33[24] = v34[24];
        *(_WORD *)(v33 + 25) = *(_WORD *)(v34 + 25);
        *(_OWORD *)(v33 + 28) = *(_OWORD *)(v34 + 28);
        *((_DWORD *)v33 + 11) = *((_DWORD *)v34 + 11);
        *((_QWORD *)v33 + 6) = *((_QWORD *)v34 + 6);
        *((_QWORD *)v33 + 7) = v37;
        swift_bridgeObjectRetain();
      }
      v40 = *(int *)(v13 + 28);
      v41 = &v33[v40];
      v42 = &v34[v40];
      v43 = sub_224F67874();
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v44 + 16))(v41, v42, v43);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      v36 = v10;
      v46 = *(int *)(v13 + 32);
      v47 = &v33[v46];
      v48 = &v34[v46];
      v49 = v48[1];
      *v47 = *v48;
      v47[1] = v49;
      v50 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v38 + 56);
      swift_bridgeObjectRetain();
      v50(v33, 0, 1, v13);
      v17 = __dst;
      v9 = v53;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v17, 0, 1, v9);
  }
  return a1;
}

_QWORD *assignWithCopy for ModelsDSTU2.HumanName(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  size_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(_BYTE *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_BYTE *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  void (*v45)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void (*v62)(_BYTE *, _QWORD, uint64_t, uint64_t);
  __int128 *v64;
  __int128 *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  void (*v79)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t (*v87)(_BYTE *, uint64_t, uint64_t);
  int v88;
  uint64_t v89;
  size_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  int v99;
  int v100;
  uint64_t (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 *v106;
  __int128 *v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  void *v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  void (*v121)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  void *v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t (*v130)(void *, uint64_t, uint64_t);
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  _BYTE *__dst;
  _BYTE *__dsta;
  void *__dstb;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Period();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    v23 = type metadata accessor for FHIRDateTime();
    v24 = *(_QWORD *)(v23 - 8);
    v25 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48);
    v26 = v25(v7, 1, v23);
    v27 = v25(v8, 1, v23);
    if (v26)
    {
      if (v27)
      {
        v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_17:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v28);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        goto LABEL_57;
      }
      *v7 = *v8;
      v39 = *((_QWORD *)v8 + 1);
      *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
      *((_QWORD *)v7 + 1) = v39;
      v142 = v24;
      if (*((_QWORD *)v8 + 7) == 1)
      {
        v40 = *(_OWORD *)(v8 + 24);
        v41 = *(_OWORD *)(v8 + 40);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        *(_OWORD *)(v7 + 24) = v40;
        *(_OWORD *)(v7 + 40) = v41;
      }
      else
      {
        v7[24] = v8[24];
        v7[25] = v8[25];
        v7[26] = v8[26];
        v69 = *(_OWORD *)(v8 + 28);
        *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(v7 + 28) = v69;
        *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        swift_bridgeObjectRetain();
      }
      v70 = *(int *)(v23 + 28);
      v71 = &v7[v70];
      v72 = &v8[v70];
      v73 = sub_224F67874();
      v74 = *(_QWORD *)(v73 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v74 + 16))(v71, v72, v73);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
      }
      v76 = *(int *)(v23 + 32);
      v77 = &v7[v76];
      v78 = &v8[v76];
      *v77 = *v78;
      v77[1] = v78[1];
      v24 = v142;
      v79 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v142 + 56);
      swift_bridgeObjectRetain();
      v79(v7, 0, 1, v23);
LABEL_57:
      v96 = *(int *)(v9 + 20);
      v97 = (uint64_t)&v7[v96];
      v98 = &v8[v96];
      v99 = v25((_BYTE *)v97, 1, v23);
      v100 = v25(v98, 1, v23);
      if (v99)
      {
        if (!v100)
        {
          *(_BYTE *)v97 = *v98;
          v103 = *((_QWORD *)v98 + 1);
          *(_DWORD *)(v97 + 16) = *((_DWORD *)v98 + 4);
          *(_QWORD *)(v97 + 8) = v103;
          if (*((_QWORD *)v98 + 7) == 1)
          {
            v104 = *(_OWORD *)(v98 + 24);
            v105 = *(_OWORD *)(v98 + 40);
            *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
            *(_OWORD *)(v97 + 24) = v104;
            *(_OWORD *)(v97 + 40) = v105;
          }
          else
          {
            *(_BYTE *)(v97 + 24) = v98[24];
            *(_BYTE *)(v97 + 25) = v98[25];
            *(_BYTE *)(v97 + 26) = v98[26];
            v111 = *(_OWORD *)(v98 + 28);
            *(_DWORD *)(v97 + 44) = *((_DWORD *)v98 + 11);
            *(_OWORD *)(v97 + 28) = v111;
            *(_QWORD *)(v97 + 48) = *((_QWORD *)v98 + 6);
            *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
            swift_bridgeObjectRetain();
          }
          v112 = *(int *)(v23 + 28);
          v113 = (void *)(v97 + v112);
          v114 = &v98[v112];
          v115 = sub_224F67874();
          v116 = *(_QWORD *)(v115 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v116 + 16))(v113, v114, v115);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
          }
          v118 = *(int *)(v23 + 32);
          v119 = (_QWORD *)(v97 + v118);
          v120 = &v98[v118];
          *v119 = *v120;
          v119[1] = v120[1];
          v121 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56);
          swift_bridgeObjectRetain();
          v121(v97, 0, 1, v23);
          return a1;
        }
        v101 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_62:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v101);
        v16 = *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64);
        v17 = (void *)v97;
        v18 = v98;
        goto LABEL_7;
      }
      if (v100)
      {
        sub_224DDEAA0(v97, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v101 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_62;
      }
      *(_BYTE *)v97 = *v98;
      *(_QWORD *)(v97 + 8) = *((_QWORD *)v98 + 1);
      *(_WORD *)(v97 + 16) = *((_WORD *)v98 + 8);
      *(_WORD *)(v97 + 18) = *((_WORD *)v98 + 9);
      v106 = (__int128 *)(v97 + 24);
      v107 = (__int128 *)(v98 + 24);
      v108 = *((_QWORD *)v98 + 7);
      if (*(_QWORD *)(v97 + 56) == 1)
      {
        if (v108 == 1)
        {
          v109 = *v107;
          v110 = *(_OWORD *)(v98 + 40);
          *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
          *v106 = v109;
          *(_OWORD *)(v97 + 40) = v110;
        }
        else
        {
          *(_BYTE *)(v97 + 24) = v98[24];
          *(_BYTE *)(v97 + 25) = v98[25];
          *(_BYTE *)(v97 + 26) = v98[26];
          v124 = *(_OWORD *)(v98 + 28);
          *(_DWORD *)(v97 + 44) = *((_DWORD *)v98 + 11);
          *(_OWORD *)(v97 + 28) = v124;
          *(_QWORD *)(v97 + 48) = *((_QWORD *)v98 + 6);
          *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
          swift_bridgeObjectRetain();
        }
      }
      else if (v108 == 1)
      {
        sub_224E2C9F4(v97 + 24);
        v122 = *((_QWORD *)v98 + 7);
        v123 = *(_OWORD *)(v98 + 40);
        *v106 = *v107;
        *(_OWORD *)(v97 + 40) = v123;
        *(_QWORD *)(v97 + 56) = v122;
      }
      else
      {
        *(_BYTE *)(v97 + 24) = v98[24];
        *(_BYTE *)(v97 + 25) = v98[25];
        *(_BYTE *)(v97 + 26) = v98[26];
        *(_DWORD *)(v97 + 28) = *((_DWORD *)v98 + 7);
        *(_WORD *)(v97 + 32) = *((_WORD *)v98 + 16);
        *(_WORD *)(v97 + 34) = *((_WORD *)v98 + 17);
        *(_WORD *)(v97 + 36) = *((_WORD *)v98 + 18);
        *(_WORD *)(v97 + 38) = *((_WORD *)v98 + 19);
        *(_WORD *)(v97 + 40) = *((_WORD *)v98 + 20);
        *(_WORD *)(v97 + 42) = *((_WORD *)v98 + 21);
        *(_WORD *)(v97 + 44) = *((_WORD *)v98 + 22);
        *(_WORD *)(v97 + 46) = *((_WORD *)v98 + 23);
        *(_QWORD *)(v97 + 48) = *((_QWORD *)v98 + 6);
        *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      v125 = *(int *)(v23 + 28);
      v126 = (void *)(v97 + v125);
      v127 = &v98[v125];
      v128 = sub_224F67874();
      v129 = *(_QWORD *)(v128 - 8);
      v130 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v129 + 48);
      v131 = v130(v126, 1, v128);
      v132 = v130(v127, 1, v128);
      if (v131)
      {
        if (!v132)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v129 + 16))(v126, v127, v128);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v126, 0, 1, v128);
LABEL_83:
          v134 = *(int *)(v23 + 32);
          v135 = (_QWORD *)(v97 + v134);
          v136 = &v98[v134];
          *v135 = *v136;
          v135[1] = v136[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return a1;
        }
      }
      else
      {
        if (!v132)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v129 + 24))(v126, v127, v128);
          goto LABEL_83;
        }
        (*(void (**)(void *, uint64_t))(v129 + 8))(v126, v128);
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
      goto LABEL_83;
    }
    if (v27)
    {
      sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_17;
    }
    *v7 = *v8;
    *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
    *((_WORD *)v7 + 8) = *((_WORD *)v8 + 8);
    *((_WORD *)v7 + 9) = *((_WORD *)v8 + 9);
    v64 = (__int128 *)(v7 + 24);
    v65 = (__int128 *)(v8 + 24);
    v66 = *((_QWORD *)v8 + 7);
    v144 = v24;
    if (*((_QWORD *)v7 + 7) == 1)
    {
      if (v66 == 1)
      {
        v67 = *v65;
        v68 = *(_OWORD *)(v8 + 40);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        *v64 = v67;
        *(_OWORD *)(v7 + 40) = v68;
      }
      else
      {
        v7[24] = v8[24];
        v7[25] = v8[25];
        v7[26] = v8[26];
        v82 = *(_OWORD *)(v8 + 28);
        *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(v7 + 28) = v82;
        *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v66 == 1)
    {
      sub_224E2C9F4((uint64_t)(v7 + 24));
      v80 = *((_QWORD *)v8 + 7);
      v81 = *(_OWORD *)(v8 + 40);
      *v64 = *v65;
      *(_OWORD *)(v7 + 40) = v81;
      *((_QWORD *)v7 + 7) = v80;
    }
    else
    {
      v7[24] = v8[24];
      v7[25] = v8[25];
      v7[26] = v8[26];
      *((_DWORD *)v7 + 7) = *((_DWORD *)v8 + 7);
      *((_WORD *)v7 + 16) = *((_WORD *)v8 + 16);
      *((_WORD *)v7 + 17) = *((_WORD *)v8 + 17);
      *((_WORD *)v7 + 18) = *((_WORD *)v8 + 18);
      *((_WORD *)v7 + 19) = *((_WORD *)v8 + 19);
      *((_WORD *)v7 + 20) = *((_WORD *)v8 + 20);
      *((_WORD *)v7 + 21) = *((_WORD *)v8 + 21);
      *((_WORD *)v7 + 22) = *((_WORD *)v8 + 22);
      *((_WORD *)v7 + 23) = *((_WORD *)v8 + 23);
      *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
      *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v83 = *(int *)(v23 + 28);
    v84 = &v7[v83];
    v85 = &v8[v83];
    v86 = sub_224F67874();
    v137 = *(_QWORD *)(v86 - 8);
    v87 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v137 + 48);
    __dstb = v84;
    LODWORD(v84) = v87(v84, 1, v86);
    v88 = v87(v85, 1, v86);
    if ((_DWORD)v84)
    {
      if (!v88)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v137 + 16))(__dstb, v85, v86);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v137 + 56))(__dstb, 0, 1, v86);
        goto LABEL_56;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v90 = *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64);
      v91 = __dstb;
    }
    else
    {
      if (!v88)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v137 + 24))(__dstb, v85, v86);
        goto LABEL_56;
      }
      (*(void (**)(void *, uint64_t))(v137 + 8))(__dstb, v86);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v90 = *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64);
      v91 = __dstb;
    }
    memcpy(v91, v85, v90);
LABEL_56:
    v24 = v144;
    v93 = *(int *)(v23 + 32);
    v94 = &v7[v93];
    v95 = &v8[v93];
    *v94 = *v95;
    v94[1] = v95[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  if (v13)
  {
    v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v14);
    v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
    v17 = v7;
    v18 = v8;
LABEL_7:
    memcpy(v17, v18, v16);
    return a1;
  }
  v19 = type metadata accessor for FHIRDateTime();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48);
  if (v21(v8, 1, v19))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    v29 = *((_QWORD *)v8 + 1);
    *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
    *((_QWORD *)v7 + 1) = v29;
    v141 = v20;
    if (*((_QWORD *)v8 + 7) == 1)
    {
      v30 = *(_OWORD *)(v8 + 24);
      v31 = *(_OWORD *)(v8 + 40);
      *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
      *(_OWORD *)(v7 + 24) = v30;
      *(_OWORD *)(v7 + 40) = v31;
    }
    else
    {
      v7[24] = v8[24];
      v7[25] = v8[25];
      v7[26] = v8[26];
      v33 = *(_OWORD *)(v8 + 28);
      *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
      *(_OWORD *)(v7 + 28) = v33;
      *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
      *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
      swift_bridgeObjectRetain();
    }
    v34 = *(int *)(v19 + 28);
    __dst = &v7[v34];
    v35 = &v8[v34];
    v36 = sub_224F67874();
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v37 + 16))(__dst, v35, v36);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v36);
    }
    v42 = *(int *)(v19 + 32);
    v43 = &v7[v42];
    v44 = &v8[v42];
    *v43 = *v44;
    v43[1] = v44[1];
    v20 = v141;
    v45 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v141 + 56);
    swift_bridgeObjectRetain();
    v45(v7, 0, 1, v19);
  }
  v46 = *(int *)(v9 + 20);
  v47 = &v7[v46];
  v48 = &v8[v46];
  if (v21(v48, 1, v19))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    *v47 = *v48;
    v50 = *((_QWORD *)v48 + 1);
    *((_DWORD *)v47 + 4) = *((_DWORD *)v48 + 4);
    *((_QWORD *)v47 + 1) = v50;
    v143 = v20;
    if (*((_QWORD *)v48 + 7) == 1)
    {
      v51 = *(_OWORD *)(v48 + 24);
      v52 = *(_OWORD *)(v48 + 40);
      *((_QWORD *)v47 + 7) = *((_QWORD *)v48 + 7);
      *(_OWORD *)(v47 + 24) = v51;
      *(_OWORD *)(v47 + 40) = v52;
    }
    else
    {
      v47[24] = v48[24];
      v47[25] = v48[25];
      v47[26] = v48[26];
      v53 = *(_OWORD *)(v48 + 28);
      *((_DWORD *)v47 + 11) = *((_DWORD *)v48 + 11);
      *(_OWORD *)(v47 + 28) = v53;
      *((_QWORD *)v47 + 6) = *((_QWORD *)v48 + 6);
      *((_QWORD *)v47 + 7) = *((_QWORD *)v48 + 7);
      swift_bridgeObjectRetain();
    }
    v54 = *(int *)(v19 + 28);
    __dsta = &v47[v54];
    v55 = &v48[v54];
    v56 = sub_224F67874();
    v57 = *(_QWORD *)(v56 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dsta, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v57 + 16))(__dsta, v55, v56);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v57 + 56))(__dsta, 0, 1, v56);
    }
    v59 = *(int *)(v19 + 32);
    v60 = &v47[v59];
    v61 = &v48[v59];
    *v60 = *v61;
    v60[1] = v61[1];
    v62 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v143 + 56);
    swift_bridgeObjectRetain();
    v62(v47, 0, 1, v19);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for ModelsDSTU2.HumanName(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_BYTE *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *__dst;
  _BYTE *__dsta;
  uint64_t v33;
  uint64_t v34;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Period();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = type metadata accessor for FHIRDateTime();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48);
    if (v14(v8, 1, v12))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      *v7 = *v8;
      *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
      *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
      *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
      v16 = *(int *)(v12 + 28);
      __dst = &v7[v16];
      v33 = v13;
      v17 = &v8[v16];
      v18 = sub_224F67874();
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v19 + 32))(__dst, v17, v18);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
      }
      *(_OWORD *)&v7[*(int *)(v12 + 32)] = *(_OWORD *)&v8[*(int *)(v12 + 32)];
      v13 = v33;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v7, 0, 1, v12);
    }
    v21 = *(int *)(v9 + 20);
    v22 = &v7[v21];
    v23 = &v8[v21];
    if (v14(v23, 1, v12))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      *v22 = *v23;
      *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);
      *((_DWORD *)v22 + 4) = *((_DWORD *)v23 + 4);
      *(_OWORD *)(v22 + 24) = *(_OWORD *)(v23 + 24);
      *(_OWORD *)(v22 + 40) = *(_OWORD *)(v23 + 40);
      *((_QWORD *)v22 + 7) = *((_QWORD *)v23 + 7);
      v25 = *(int *)(v12 + 28);
      __dsta = &v22[v25];
      v34 = v13;
      v26 = &v23[v25];
      v27 = sub_224F67874();
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dsta, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v28 + 32))(__dsta, v26, v27);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dsta, 0, 1, v27);
      }
      *(_OWORD *)&v22[*(int *)(v12 + 32)] = *(_OWORD *)&v23[*(int *)(v12 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v22, 0, 1, v12);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

_QWORD *assignWithTake for ModelsDSTU2.HumanName(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_BYTE *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  size_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(_BYTE *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_BYTE *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t (*v59)(_BYTE *, uint64_t, uint64_t);
  int v60;
  uint64_t v61;
  size_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  int v73;
  int v74;
  uint64_t (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  void *v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  void *v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(void *, uint64_t, uint64_t);
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *__dst;
  _BYTE *__dsta;
  void *__dstb;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 40);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Period();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_224DDEAA0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    v25 = type metadata accessor for FHIRDateTime();
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48);
    v28 = v27(v9, 1, v25);
    v29 = v27(v10, 1, v25);
    if (v28)
    {
      if (v29)
      {
        v30 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_17:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v30);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        goto LABEL_46;
      }
      v104 = v26;
      *v9 = *v10;
      *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
      *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
      *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
      *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
      v37 = *(int *)(v25 + 28);
      v38 = &v9[v37];
      v39 = &v10[v37];
      v40 = sub_224F67874();
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 32))(v38, v39, v40);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      }
      *(_OWORD *)&v9[*(int *)(v25 + 32)] = *(_OWORD *)&v10[*(int *)(v25 + 32)];
      v26 = v104;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v9, 0, 1, v25);
LABEL_46:
      v70 = *(int *)(v11 + 20);
      v71 = (uint64_t)&v9[v70];
      v72 = &v10[v70];
      v73 = v27((_BYTE *)v71, 1, v25);
      v74 = v27(v72, 1, v25);
      if (v73)
      {
        if (!v74)
        {
          *(_BYTE *)v71 = *v72;
          *(_QWORD *)(v71 + 8) = *((_QWORD *)v72 + 1);
          *(_DWORD *)(v71 + 16) = *((_DWORD *)v72 + 4);
          *(_OWORD *)(v71 + 24) = *(_OWORD *)(v72 + 24);
          *(_OWORD *)(v71 + 40) = *(_OWORD *)(v72 + 40);
          *(_QWORD *)(v71 + 56) = *((_QWORD *)v72 + 7);
          v77 = *(int *)(v25 + 28);
          v78 = (void *)(v71 + v77);
          v79 = &v72[v77];
          v80 = sub_224F67874();
          v81 = *(_QWORD *)(v80 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v81 + 32))(v78, v79, v80);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
          }
          *(_OWORD *)(v71 + *(int *)(v25 + 32)) = *(_OWORD *)&v72[*(int *)(v25 + 32)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v71, 0, 1, v25);
          return a1;
        }
        v75 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_51:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v75);
        v18 = *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64);
        v19 = (void *)v71;
        v20 = v72;
        goto LABEL_7;
      }
      if (v74)
      {
        sub_224DDEAA0(v71, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v75 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_51;
      }
      *(_BYTE *)v71 = *v72;
      *(_QWORD *)(v71 + 8) = *((_QWORD *)v72 + 1);
      *(_DWORD *)(v71 + 16) = *((_DWORD *)v72 + 4);
      if (*(_QWORD *)(v71 + 56) != 1)
      {
        v83 = *((_QWORD *)v72 + 7);
        if (v83 != 1)
        {
          *(_BYTE *)(v71 + 24) = v72[24];
          *(_WORD *)(v71 + 25) = *(_WORD *)(v72 + 25);
          *(_DWORD *)(v71 + 28) = *((_DWORD *)v72 + 7);
          *(_OWORD *)(v71 + 32) = *((_OWORD *)v72 + 2);
          *(_QWORD *)(v71 + 48) = *((_QWORD *)v72 + 6);
          *(_QWORD *)(v71 + 56) = v83;
          swift_bridgeObjectRelease();
LABEL_61:
          v85 = *(int *)(v25 + 28);
          v86 = (void *)(v71 + v85);
          v87 = &v72[v85];
          v88 = sub_224F67874();
          v89 = *(_QWORD *)(v88 - 8);
          v90 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v89 + 48);
          v91 = v90(v86, 1, v88);
          v92 = v90(v87, 1, v88);
          if (v91)
          {
            if (!v92)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v89 + 32))(v86, v87, v88);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
LABEL_67:
              v94 = *(int *)(v25 + 32);
              v95 = (_QWORD *)(v71 + v94);
              v96 = (uint64_t *)&v72[v94];
              v98 = *v96;
              v97 = v96[1];
              *v95 = v98;
              v95[1] = v97;
              swift_bridgeObjectRelease();
              return a1;
            }
          }
          else
          {
            if (!v92)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v89 + 40))(v86, v87, v88);
              goto LABEL_67;
            }
            (*(void (**)(void *, uint64_t))(v89 + 8))(v86, v88);
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
          goto LABEL_67;
        }
        sub_224E2C9F4(v71 + 24);
      }
      v84 = *(_OWORD *)(v72 + 40);
      *(_OWORD *)(v71 + 24) = *(_OWORD *)(v72 + 24);
      *(_OWORD *)(v71 + 40) = v84;
      *(_QWORD *)(v71 + 56) = *((_QWORD *)v72 + 7);
      goto LABEL_61;
    }
    if (v29)
    {
      sub_224DDEAA0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v30 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_17;
    }
    *v9 = *v10;
    *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
    *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
    v106 = v26;
    if (*((_QWORD *)v9 + 7) != 1)
    {
      v53 = *((_QWORD *)v10 + 7);
      if (v53 != 1)
      {
        v9[24] = v10[24];
        *(_WORD *)(v9 + 25) = *(_WORD *)(v10 + 25);
        *((_DWORD *)v9 + 7) = *((_DWORD *)v10 + 7);
        *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
        *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
        *((_QWORD *)v9 + 7) = v53;
        swift_bridgeObjectRelease();
LABEL_37:
        v55 = *(int *)(v25 + 28);
        v56 = &v9[v55];
        v57 = &v10[v55];
        v58 = sub_224F67874();
        v99 = *(_QWORD *)(v58 - 8);
        v59 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v99 + 48);
        __dstb = v56;
        LODWORD(v56) = v59(v56, 1, v58);
        v60 = v59(v57, 1, v58);
        if ((_DWORD)v56)
        {
          if (!v60)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v99 + 32))(__dstb, v57, v58);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v99 + 56))(__dstb, 0, 1, v58);
            goto LABEL_45;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v62 = *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64);
          v63 = __dstb;
        }
        else
        {
          if (!v60)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v99 + 40))(__dstb, v57, v58);
            goto LABEL_45;
          }
          (*(void (**)(void *, uint64_t))(v99 + 8))(__dstb, v58);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v62 = *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64);
          v63 = __dstb;
        }
        memcpy(v63, v57, v62);
LABEL_45:
        v26 = v106;
        v65 = *(int *)(v25 + 32);
        v66 = &v9[v65];
        v67 = (uint64_t *)&v10[v65];
        v69 = *v67;
        v68 = v67[1];
        *v66 = v69;
        v66[1] = v68;
        swift_bridgeObjectRelease();
        goto LABEL_46;
      }
      sub_224E2C9F4((uint64_t)(v9 + 24));
    }
    v54 = *(_OWORD *)(v10 + 40);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
    *(_OWORD *)(v9 + 40) = v54;
    *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
    goto LABEL_37;
  }
  if (v15)
  {
    v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64);
    v19 = v9;
    v20 = v10;
LABEL_7:
    memcpy(v19, v20, v18);
    return a1;
  }
  v21 = type metadata accessor for FHIRDateTime();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v22 + 48);
  if (v23(v10, 1, v21))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
    *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
    *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
    v31 = *(int *)(v21 + 28);
    __dst = &v9[v31];
    v103 = v22;
    v32 = &v10[v31];
    v33 = sub_224F67874();
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v34 + 32))(__dst, v32, v33);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
    }
    *(_OWORD *)&v9[*(int *)(v21 + 32)] = *(_OWORD *)&v10[*(int *)(v21 + 32)];
    v22 = v103;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v9, 0, 1, v21);
  }
  v43 = *(int *)(v11 + 20);
  v44 = &v9[v43];
  v45 = &v10[v43];
  if (v23(v45, 1, v21))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    *v44 = *v45;
    *((_QWORD *)v44 + 1) = *((_QWORD *)v45 + 1);
    *((_DWORD *)v44 + 4) = *((_DWORD *)v45 + 4);
    *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 24);
    *(_OWORD *)(v44 + 40) = *(_OWORD *)(v45 + 40);
    *((_QWORD *)v44 + 7) = *((_QWORD *)v45 + 7);
    v47 = *(int *)(v21 + 28);
    __dsta = &v44[v47];
    v105 = v22;
    v48 = &v45[v47];
    v49 = sub_224F67874();
    v50 = *(_QWORD *)(v49 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dsta, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v50 + 32))(__dsta, v48, v49);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v50 + 56))(__dsta, 0, 1, v49);
    }
    *(_OWORD *)&v44[*(int *)(v21 + 32)] = *(_OWORD *)&v45[*(int *)(v21 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v44, 0, 1, v21);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.HumanName()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224EC9088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.HumanName()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224EC9134(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

void sub_224EC91C0()
{
  unint64_t v0;

  sub_224DDEA0C(319, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t destroy for ModelsDSTU2.Patient(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 104) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ModelsDSTU2.Patient(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 37) = *(_QWORD *)(a2 + 37);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 == 1)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v9;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ModelsDSTU2.Patient(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[4];
  *(_QWORD *)((char *)a1 + 37) = *(_QWORD *)((char *)a2 + 37);
  a1[4] = v4;
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (__int128 *)(a1 + 12);
  v6 = (__int128 *)(a2 + 12);
  v7 = a2[13];
  if (a1[13] == 1)
  {
    if (v7 == 1)
    {
      v8 = *v6;
      a1[14] = a2[14];
      *v5 = v8;
    }
    else
    {
      a1[12] = a2[12];
      a1[13] = a2[13];
      a1[14] = a2[14];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v7 == 1)
  {
    sub_224E2C9C0((uint64_t)(a1 + 12));
    v9 = a2[14];
    *v5 = *v6;
    a1[14] = v9;
  }
  else
  {
    a1[12] = a2[12];
    a1[13] = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[14] = a2[14];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

_QWORD *assignWithTake for ModelsDSTU2.Patient(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  *(_QWORD *)((char *)a1 + 37) = *(_QWORD *)((char *)a2 + 37);
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRelease();
  if (a1[13] != 1)
  {
    v7 = a2[13];
    if (v7 != 1)
    {
      a1[12] = a2[12];
      a1[13] = v7;
      swift_bridgeObjectRelease();
      a1[14] = a2[14];
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_224E2C9C0((uint64_t)(a1 + 12));
  }
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  a1[14] = a2[14];
LABEL_6:
  a1[15] = a2[15];
  swift_bridgeObjectRelease();
  v8 = a2[17];
  a1[16] = a2[16];
  a1[17] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Patient(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.Patient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Patient()
{
  return &type metadata for ModelsDSTU2.Patient;
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.HumanName.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_224EC9830 + 4 * byte_224F6F963[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_224EC9864 + 4 * byte_224F6F95E[v4]))();
}

uint64_t sub_224EC9864(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EC986C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EC9874);
  return result;
}

uint64_t sub_224EC9880(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EC9888);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_224EC988C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EC9894(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.HumanName.CodingKeys()
{
  return &type metadata for ModelsDSTU2.HumanName.CodingKeys;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.ImmunizationVaccinationProtocol.CodingKeys()
{
  return &type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol.CodingKeys;
}

uint64_t _s23HealthRecordsExtraction11ModelsDSTU2V31ImmunizationVaccinationProtocolV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_224EC9910 + 4 * byte_224F6F96D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_224EC9944 + 4 * byte_224F6F968[v4]))();
}

uint64_t sub_224EC9944(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EC994C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EC9954);
  return result;
}

uint64_t sub_224EC9960(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EC9968);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_224EC996C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EC9974(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Bundle.BundleEntry.CodingKeys()
{
  return &type metadata for ModelsDSTU2.Bundle.BundleEntry.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Patient.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.Patient.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_224EC9A6C + 4 * byte_224F6F977[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_224EC9AA0 + 4 * byte_224F6F972[v4]))();
}

uint64_t sub_224EC9AA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EC9AA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EC9AB0);
  return result;
}

uint64_t sub_224EC9ABC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EC9AC4);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_224EC9AC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EC9AD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Patient.CodingKeys()
{
  return &type metadata for ModelsDSTU2.Patient.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Observation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.Observation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_224EC9BC8 + 4 * byte_224F6F981[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_224EC9BFC + 4 * byte_224F6F97C[v4]))();
}

uint64_t sub_224EC9BFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EC9C04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EC9C0CLL);
  return result;
}

uint64_t sub_224EC9C18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EC9C20);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_224EC9C24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EC9C2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Observation.CodingKeys()
{
  return &type metadata for ModelsDSTU2.Observation.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Immunization.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.Immunization.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_224EC9D24 + 4 * byte_224F6F98B[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_224EC9D58 + 4 * byte_224F6F986[v4]))();
}

uint64_t sub_224EC9D58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EC9D60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EC9D68);
  return result;
}

uint64_t sub_224EC9D74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EC9D7CLL);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_224EC9D80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EC9D88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Immunization.CodingKeys()
{
  return &type metadata for ModelsDSTU2.Immunization.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.DiagnosticReport.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_224EC9DF0 + 4 * byte_224F6F995[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_224EC9E24 + 4 * byte_224F6F990[v4]))();
}

uint64_t sub_224EC9E24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EC9E2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EC9E34);
  return result;
}

uint64_t sub_224EC9E40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EC9E48);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_224EC9E4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EC9E54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.DiagnosticReport.CodingKeys()
{
  return &type metadata for ModelsDSTU2.DiagnosticReport.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Condition.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.Condition.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_224EC9F4C + 4 * byte_224F6F99F[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_224EC9F80 + 4 * byte_224F6F99A[v4]))();
}

uint64_t sub_224EC9F80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EC9F88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EC9F90);
  return result;
}

uint64_t sub_224EC9F9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EC9FA4);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_224EC9FA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EC9FB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Condition.CodingKeys()
{
  return &type metadata for ModelsDSTU2.Condition.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.Bundle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_224ECA018 + 4 * byte_224F6F9A9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_224ECA04C + 4 * byte_224F6F9A4[v4]))();
}

uint64_t sub_224ECA04C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224ECA054(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224ECA05CLL);
  return result;
}

uint64_t sub_224ECA068(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224ECA070);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_224ECA074(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224ECA07C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Bundle.CodingKeys()
{
  return &type metadata for ModelsDSTU2.Bundle.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.ResourceProxy.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_224ECA0D8 + 4 * byte_224F6F9AE[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_224ECA0F8 + 4 * byte_224F6F9B3[v4]))();
}

_BYTE *sub_224ECA0D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_224ECA0F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_224ECA100(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_224ECA108(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_224ECA110(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_224ECA118(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.ResourceProxy.CodingKeys()
{
  return &type metadata for ModelsDSTU2.ResourceProxy.CodingKeys;
}

unint64_t sub_224ECA138()
{
  unint64_t result;

  result = qword_2557E26C0;
  if (!qword_2557E26C0)
  {
    result = MEMORY[0x22768ED24](&unk_224F70804, &type metadata for ModelsDSTU2.ResourceProxy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E26C0);
  }
  return result;
}

unint64_t sub_224ECA180()
{
  unint64_t result;

  result = qword_2557E26C8;
  if (!qword_2557E26C8)
  {
    result = MEMORY[0x22768ED24](&unk_224F708BC, &type metadata for ModelsDSTU2.Bundle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E26C8);
  }
  return result;
}

unint64_t sub_224ECA1C8()
{
  unint64_t result;

  result = qword_2557E26D0;
  if (!qword_2557E26D0)
  {
    result = MEMORY[0x22768ED24](&unk_224F70974, &type metadata for ModelsDSTU2.Condition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E26D0);
  }
  return result;
}

unint64_t sub_224ECA210()
{
  unint64_t result;

  result = qword_2557E26D8;
  if (!qword_2557E26D8)
  {
    result = MEMORY[0x22768ED24](&unk_224F70A2C, &type metadata for ModelsDSTU2.DiagnosticReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E26D8);
  }
  return result;
}

unint64_t sub_224ECA258()
{
  unint64_t result;

  result = qword_2557E26E0;
  if (!qword_2557E26E0)
  {
    result = MEMORY[0x22768ED24](&unk_224F70AE4, &type metadata for ModelsDSTU2.Immunization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E26E0);
  }
  return result;
}

unint64_t sub_224ECA2A0()
{
  unint64_t result;

  result = qword_2557E26E8;
  if (!qword_2557E26E8)
  {
    result = MEMORY[0x22768ED24](&unk_224F70B9C, &type metadata for ModelsDSTU2.Observation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E26E8);
  }
  return result;
}

unint64_t sub_224ECA2E8()
{
  unint64_t result;

  result = qword_2557E26F0;
  if (!qword_2557E26F0)
  {
    result = MEMORY[0x22768ED24](&unk_224F70C54, &type metadata for ModelsDSTU2.Patient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E26F0);
  }
  return result;
}

unint64_t sub_224ECA330()
{
  unint64_t result;

  result = qword_2557E26F8;
  if (!qword_2557E26F8)
  {
    result = MEMORY[0x22768ED24](&unk_224F70D44, &type metadata for ModelsDSTU2.Bundle.BundleEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E26F8);
  }
  return result;
}

unint64_t sub_224ECA378()
{
  unint64_t result;

  result = qword_2557E2700;
  if (!qword_2557E2700)
  {
    result = MEMORY[0x22768ED24](&unk_224F70DFC, &type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2700);
  }
  return result;
}

unint64_t sub_224ECA3C0()
{
  unint64_t result;

  result = qword_2557E2708;
  if (!qword_2557E2708)
  {
    result = MEMORY[0x22768ED24](&unk_224F70EB4, &type metadata for ModelsDSTU2.HumanName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2708);
  }
  return result;
}

unint64_t sub_224ECA408()
{
  unint64_t result;

  result = qword_2557E2710;
  if (!qword_2557E2710)
  {
    result = MEMORY[0x22768ED24](&unk_224F70E24, &type metadata for ModelsDSTU2.HumanName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2710);
  }
  return result;
}

unint64_t sub_224ECA450()
{
  unint64_t result;

  result = qword_2557E2718;
  if (!qword_2557E2718)
  {
    result = MEMORY[0x22768ED24](&unk_224F70E4C, &type metadata for ModelsDSTU2.HumanName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2718);
  }
  return result;
}

unint64_t sub_224ECA498()
{
  unint64_t result;

  result = qword_2557E2720;
  if (!qword_2557E2720)
  {
    result = MEMORY[0x22768ED24](&unk_224F70D6C, &type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2720);
  }
  return result;
}

unint64_t sub_224ECA4E0()
{
  unint64_t result;

  result = qword_2557E2728;
  if (!qword_2557E2728)
  {
    result = MEMORY[0x22768ED24](&unk_224F70D94, &type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2728);
  }
  return result;
}

unint64_t sub_224ECA528()
{
  unint64_t result;

  result = qword_2557E2730;
  if (!qword_2557E2730)
  {
    result = MEMORY[0x22768ED24](&unk_224F70C7C, &type metadata for ModelsDSTU2.Bundle.BundleEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2730);
  }
  return result;
}

unint64_t sub_224ECA570()
{
  unint64_t result;

  result = qword_2557E2738;
  if (!qword_2557E2738)
  {
    result = MEMORY[0x22768ED24](&unk_224F70CA4, &type metadata for ModelsDSTU2.Bundle.BundleEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2738);
  }
  return result;
}

unint64_t sub_224ECA5B8()
{
  unint64_t result;

  result = qword_2557E2740;
  if (!qword_2557E2740)
  {
    result = MEMORY[0x22768ED24](&unk_224F70BC4, &type metadata for ModelsDSTU2.Patient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2740);
  }
  return result;
}

unint64_t sub_224ECA600()
{
  unint64_t result;

  result = qword_2557E2748;
  if (!qword_2557E2748)
  {
    result = MEMORY[0x22768ED24](&unk_224F70BEC, &type metadata for ModelsDSTU2.Patient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2748);
  }
  return result;
}

unint64_t sub_224ECA648()
{
  unint64_t result;

  result = qword_2557E2750;
  if (!qword_2557E2750)
  {
    result = MEMORY[0x22768ED24](&unk_224F70B0C, &type metadata for ModelsDSTU2.Observation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2750);
  }
  return result;
}

unint64_t sub_224ECA690()
{
  unint64_t result;

  result = qword_2557E2758;
  if (!qword_2557E2758)
  {
    result = MEMORY[0x22768ED24](&unk_224F70B34, &type metadata for ModelsDSTU2.Observation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2758);
  }
  return result;
}

unint64_t sub_224ECA6D8()
{
  unint64_t result;

  result = qword_2557E2760;
  if (!qword_2557E2760)
  {
    result = MEMORY[0x22768ED24](&unk_224F70A54, &type metadata for ModelsDSTU2.Immunization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2760);
  }
  return result;
}

unint64_t sub_224ECA720()
{
  unint64_t result;

  result = qword_2557E2768;
  if (!qword_2557E2768)
  {
    result = MEMORY[0x22768ED24](&unk_224F70A7C, &type metadata for ModelsDSTU2.Immunization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2768);
  }
  return result;
}

unint64_t sub_224ECA768()
{
  unint64_t result;

  result = qword_2557E2770;
  if (!qword_2557E2770)
  {
    result = MEMORY[0x22768ED24](&unk_224F7099C, &type metadata for ModelsDSTU2.DiagnosticReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2770);
  }
  return result;
}

unint64_t sub_224ECA7B0()
{
  unint64_t result;

  result = qword_2557E2778;
  if (!qword_2557E2778)
  {
    result = MEMORY[0x22768ED24](&unk_224F709C4, &type metadata for ModelsDSTU2.DiagnosticReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2778);
  }
  return result;
}

unint64_t sub_224ECA7F8()
{
  unint64_t result;

  result = qword_2557E2780;
  if (!qword_2557E2780)
  {
    result = MEMORY[0x22768ED24](&unk_224F708E4, &type metadata for ModelsDSTU2.Condition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2780);
  }
  return result;
}

unint64_t sub_224ECA840()
{
  unint64_t result;

  result = qword_2557E2788;
  if (!qword_2557E2788)
  {
    result = MEMORY[0x22768ED24](&unk_224F7090C, &type metadata for ModelsDSTU2.Condition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2788);
  }
  return result;
}

unint64_t sub_224ECA888()
{
  unint64_t result;

  result = qword_2557E2790;
  if (!qword_2557E2790)
  {
    result = MEMORY[0x22768ED24](&unk_224F7082C, &type metadata for ModelsDSTU2.Bundle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2790);
  }
  return result;
}

unint64_t sub_224ECA8D0()
{
  unint64_t result;

  result = qword_2557E2798;
  if (!qword_2557E2798)
  {
    result = MEMORY[0x22768ED24](&unk_224F70854, &type metadata for ModelsDSTU2.Bundle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2798);
  }
  return result;
}

unint64_t sub_224ECA918()
{
  unint64_t result;

  result = qword_2557E27A0;
  if (!qword_2557E27A0)
  {
    result = MEMORY[0x22768ED24](&unk_224F7073C, &type metadata for ModelsDSTU2.ResourceProxy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E27A0);
  }
  return result;
}

unint64_t sub_224ECA960()
{
  unint64_t result;

  result = qword_2557E27A8;
  if (!qword_2557E27A8)
  {
    result = MEMORY[0x22768ED24](&unk_224F70764, &type metadata for ModelsDSTU2.ResourceProxy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E27A8);
  }
  return result;
}

uint64_t sub_224ECA9A4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635018093 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7265747265737361 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F63655265746164 && a2 == 0xEC00000064656472 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6C6163696E696C63 && a2 == 0xEE00737574617453 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000224F814E0 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7974697265766573 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6574695379646F62 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x7461447465736E6FLL && a2 == 0xED0000656D695465 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7265507465736E6FLL && a2 == 0xEB00000000646F69 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x7274537465736E6FLL && a2 == 0xEB00000000676E69 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000224F81500 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6E656D6574616261 && a2 == 0xEF646F6972655074 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x6E656D6574616261 && a2 == 0xEF676E6972745374 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x7365746F6ELL && a2 == 0xE500000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 17;
    else
      return 18;
  }
}

uint64_t sub_224ECB180(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6973756C636E6F63 && a2 == 0xEA00000000006E6FLL || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000224F81520 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7669746365666665 && a2 == 0xEF646F6972655065 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x646575737369 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_224ECB534(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635018093 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6974617269707865 && a2 == 0xEE00657461446E6FLL || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 1702129518 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x646574726F706572 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000224F82010 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x43656E6963636176 && a2 == 0xEB0000000065646FLL || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6947746F4E736177 && a2 == 0xEB000000006E6576 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x74636166756E616DLL && a2 == 0xEB00000000657275 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x65626D754E746F6CLL && a2 == 0xE900000000000072 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x656D726F66726570 && a2 == 0xE900000000000072 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 14;
    else
      return 15;
  }
}

uint64_t sub_224ECBB54(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7571655365736F64 && a2 == 0xEC00000065636E65;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F44736569726573 && a2 == 0xEB00000000736573)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_224ECBC74(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635018093 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x73746E656D6D6F63 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000224F81520 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7669746365666665 && a2 == 0xEF646F6972655065 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x646575737369 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656D726F66726570 && a2 == 0xE900000000000072 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x72745365756C6176 && a2 == 0xEB00000000676E69 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000224F81580 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x61755165756C6176 && a2 == 0xED0000797469746ELL || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x636E657265666572 && a2 == 0xEE0065676E615265 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 15;
    else
      return 16;
  }
}

uint64_t sub_224ECC330(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7461446874726962 && a2 == 0xE900000000000065 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7265646E6567 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6D6F63656C6574 && a2 == 0xE700000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x73736572646461 && a2 == 0xE700000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x536C61746972616DLL && a2 == 0xED00007375746174 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6F69736E65747865 && a2 == 0xE90000000000006ELL || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

void sub_224ECC7CC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E27B0)
  {
    type metadata accessor for ModelsDSTU2.ResourceProxy(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E27B0);
  }
}

id sub_224ECC858(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v33 = a3;
  v29 = a2;
  v6 = sub_224F67874();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_224F67760();
  v31 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_224F677A8();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v28 - v16;
  v18 = v3[11];
  v30 = v3[10];
  v19 = v3[18];
  v20 = (int *)type metadata accessor for ExtractionContext();
  sub_224E75F34(a1 + v20[8], (uint64_t)v17, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v21 = a2;
  v22 = v33;
  sub_224DDE970(v21, v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_224F6779C();
  v23 = *(_QWORD *)(a1 + v20[10]);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v11, a1 + v20[7], v32);
  swift_bridgeObjectRetain();
  sub_224F67868();
  v24 = objc_allocWithZone(MEMORY[0x24BE48990]);
  v25 = v29;
  v26 = sub_224F658B0(v29, v22, 1, (uint64_t)v17, v30, v18, v19, (uint64_t)v14, v23, (uint64_t)v11, (uint64_t)v8, 0);
  sub_224DDE9B4(v25, v22);
  return v26;
}

uint64_t sub_224ECCA74(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)(v3 + 464) = a1;
  *(_QWORD *)(v3 + 472) = a2;
  *(_QWORD *)(v3 + 480) = type metadata accessor for RecordExtractionContext();
  *(_QWORD *)(v3 + 488) = swift_task_alloc();
  v4 = sub_224F677A8();
  *(_QWORD *)(v3 + 496) = v4;
  *(_QWORD *)(v3 + 504) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 512) = swift_task_alloc();
  v5 = v2[11];
  *(_OWORD *)(v3 + 176) = v2[10];
  *(_OWORD *)(v3 + 192) = v5;
  v6 = v2[13];
  *(_OWORD *)(v3 + 208) = v2[12];
  *(_OWORD *)(v3 + 224) = v6;
  v7 = v2[7];
  *(_OWORD *)(v3 + 112) = v2[6];
  *(_OWORD *)(v3 + 128) = v7;
  v8 = v2[9];
  *(_OWORD *)(v3 + 144) = v2[8];
  *(_OWORD *)(v3 + 160) = v8;
  v9 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v9;
  v10 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v10;
  v11 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v11;
  return swift_task_switch();
}

uint64_t sub_224ECCB30()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  id v20;
  _QWORD *v21;
  _BYTE *v23;
  uint64_t v24;

  v1 = objc_msgSend(*(id *)(v0 + 464), sel_credentialTypes);
  v2 = sub_224F67D6C();

  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease();
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 504);
    v5 = *(_QWORD *)(v0 + 512);
    v7 = *(_QWORD **)(v0 + 488);
    v6 = *(_QWORD *)(v0 + 496);
    v8 = *(_QWORD *)(v0 + 480);
    v24 = *(_QWORD *)(v0 + 472);
    v9 = objc_msgSend(*(id *)(v0 + 464), sel_syncIdentifier);
    sub_224F67790();

    v10 = objc_allocWithZone(MEMORY[0x24BDD3D00]);
    v11 = (void *)sub_224F67784();
    v12 = objc_msgSend(v10, sel_initWithSignedClinicalDataRecordIdentifier_, v11);
    *(_QWORD *)(v0 + 520) = v12;

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    sub_224DDB408(v24, (uint64_t)v7 + *(int *)(v8 + 20), (uint64_t (*)(_QWORD))type metadata accessor for ExtractionContext);
    *v7 = v12;
    v13 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v0 + 256) = v13;
    v14 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 272) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 288) = v14;
    v15 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 320) = v15;
    v16 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 352) = v16;
    v17 = *(_OWORD *)(v0 + 160);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 144);
    *(_OWORD *)(v0 + 384) = v17;
    v18 = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 176);
    *(_OWORD *)(v0 + 416) = v18;
    v19 = *(_OWORD *)(v0 + 224);
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v0 + 448) = v19;
    v20 = v12;
    v21 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 528) = v21;
    *v21 = v0;
    v21[1] = sub_224ECCD30;
    return sub_224ECCE60(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 464));
  }
  else
  {
    sub_224ECF1EC();
    swift_allocError();
    *v23 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_224ECCD30(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 536) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 544) = a1;
  return swift_task_switch();
}

uint64_t sub_224ECCDA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 488);

  sub_224DDEAA0(v1, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 544));
}

uint64_t sub_224ECCE04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 488);

  sub_224DDEAA0(v1, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224ECCE60(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)(v3 + 736) = a2;
  *(_QWORD *)(v3 + 728) = a1;
  type metadata accessor for RecordExtractionContext();
  *(_QWORD *)(v3 + 744) = swift_task_alloc();
  v4 = v2[11];
  *(_OWORD *)(v3 + 176) = v2[10];
  *(_OWORD *)(v3 + 192) = v4;
  v5 = v2[13];
  *(_OWORD *)(v3 + 208) = v2[12];
  *(_OWORD *)(v3 + 224) = v5;
  v6 = v2[7];
  *(_OWORD *)(v3 + 112) = v2[6];
  *(_OWORD *)(v3 + 128) = v6;
  v7 = v2[9];
  *(_OWORD *)(v3 + 144) = v2[8];
  *(_OWORD *)(v3 + 160) = v7;
  v8 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v8;
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  v10 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v10;
  return swift_task_switch();
}

uint64_t sub_224ECCEF4()
{
  uint64_t v0;
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v14;

  v1 = (_OWORD *)(v0 + 488);
  v3 = *(_OWORD *)(v0 + 176);
  v2 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 320) = v3;
  *(_OWORD *)(v0 + 336) = v2;
  *(_OWORD *)(v0 + 345) = *(_OWORD *)(v0 + 201);
  v4 = *(_OWORD *)(v0 + 160);
  v5 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 256) = v5;
  v6 = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 272) = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 288) = v6;
  *(_OWORD *)(v0 + 304) = v4;
  v7 = *(_OWORD *)(v0 + 336);
  *(_OWORD *)(v0 + 409) = *(_OWORD *)(v0 + 345);
  *(_OWORD *)(v0 + 384) = v3;
  *(_OWORD *)(v0 + 400) = v7;
  *(_OWORD *)(v0 + 368) = v4;
  v8 = *(_OWORD *)(v0 + 376);
  v9 = *(_OWORD *)(v0 + 392);
  v10 = *(_OWORD *)(v0 + 408);
  *(_BYTE *)(v0 + 480) = *(_BYTE *)(v0 + 424);
  *(_OWORD *)(v0 + 448) = v9;
  *(_OWORD *)(v0 + 464) = v10;
  *(_OWORD *)(v0 + 432) = v8;
  sub_224ECF230(v0 + 440, v0 + 536);
  sub_224ECF26C((id *)(v0 + 432));
  sub_224ECF230(v0 + 536, v0 + 488);
  v11 = *(_OWORD *)(v0 + 504);
  if ((*(_BYTE *)(v0 + 528) & 1) != 0)
  {
    *(_OWORD *)(v0 + 584) = *v1;
    *(_OWORD *)(v0 + 600) = v11;
    *(_QWORD *)(v0 + 616) = *(_QWORD *)(v0 + 520);
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 768) = v12;
    *v12 = v0;
    v12[1] = sub_224ECD0B8;
    return sub_224F1FDDC(*(_QWORD *)(v0 + 728));
  }
  else
  {
    *(_OWORD *)(v0 + 624) = *v1;
    *(_OWORD *)(v0 + 640) = v11;
    *(_QWORD *)(v0 + 656) = *(_QWORD *)(v0 + 520);
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 752) = v14;
    *v14 = v0;
    v14[1] = sub_224ECD044;
    return sub_224F4A50C(*(_QWORD *)(v0 + 728));
  }
}

uint64_t sub_224ECD044(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[83] = v3;
  v4[84] = a1;
  v4[85] = a2;
  v4[86] = v2;
  v4[95] = v2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224ECD0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[87] = v3;
  v4[88] = a1;
  v4[89] = a2;
  v4[90] = v2;
  v4[97] = v2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224ECD12C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  char v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  __int128 *v47;
  __int128 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id *v52;
  void *v53;
  void *v54;
  void *v55;
  _QWORD *v56;
  void *v57;
  __int128 *v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  void *v63;
  id v64;
  uint64_t v66;
  _BYTE *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  unint64_t v72;
  int64_t v73;
  uint64_t v74;
  id v75;
  unint64_t v76;
  unint64_t v77;

  v69 = *(_QWORD *)(v0 + 760);
  v1 = *(_QWORD *)(v0 + 672);
  sub_224ECF2D4((id *)(v0 + 432));
  v76 = MEMORY[0x24BEE4AF8];
  if (v1 >> 62)
  {
LABEL_71:
    swift_bridgeObjectRetain();
    v2 = sub_224F681D4();
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    if (v2 < 1)
    {
      __break(1u);
      goto LABEL_79;
    }
    for (i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x22768E1CC](i, v1);
      else
        v5 = *(id *)(v1 + 8 * i + 32);
      v6 = v5;
      if (objc_msgSend(v5, sel_enteredInError, v68))
      {

      }
      else
      {
        MEMORY[0x22768DE24]();
        if (*(_QWORD *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_224F67D90();
        sub_224F67D9C();
        sub_224F67D84();
      }
    }
    v7 = v76;
  }
  else
  {
    v7 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease_n();
  if (!(v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
      v77 = v3;
      sub_224F6818C();
      goto LABEL_20;
    }
    goto LABEL_76;
  }
  swift_bridgeObjectRetain();
  v66 = sub_224F681D4();
  swift_bridgeObjectRelease();
  if (!v66)
  {
LABEL_76:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_224ECF1EC();
    swift_allocError();
    *v67 = 1;
    swift_willThrow();
    goto LABEL_77;
  }
  swift_bridgeObjectRetain();
  v8 = sub_224F681D4();
  swift_bridgeObjectRelease();
  v1 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v77 = MEMORY[0x24BEE4AF8];
    sub_224F6818C();
    if ((v8 & 0x8000000000000000) == 0)
    {
LABEL_20:
      v9 = 0;
      do
      {
        if ((v7 & 0xC000000000000001) != 0)
          v10 = (id)MEMORY[0x22768E1CC](v9, v7);
        else
          v10 = *(id *)(v7 + 8 * v9 + 32);
        v11 = v10;
        ++v9;
        v12 = objc_msgSend(v10, sel_asSignedClinicalDataItem, v68);

        sub_224F68174();
        sub_224F68198();
        sub_224F681A4();
        sub_224F68180();
      }
      while (v8 != v9);
      v68 = v77;
      v76 = v3;
      sub_224E53720(0, v8, 0);
      v13 = 0;
      v1 = v3;
      v73 = v8;
      while (1)
      {
        if (v13 == v8)
        {
LABEL_70:
          __break(1u);
          goto LABEL_71;
        }
        v74 = v13;
        if ((v7 & 0xC000000000000001) != 0)
          v14 = (id)MEMORY[0x22768E1CC]();
        else
          v14 = *(id *)(v7 + 32 + 8 * v13);
        v15 = v14;
        v16 = objc_msgSend(v14, sel_primaryConcept, v68);
        v17 = objc_msgSend(v16, sel_localizedPreferredName);

        if (v17)
        {
          v18 = sub_224F67B80();
          v20 = v19;

          v21 = HIBYTE(v20) & 0xF;
          if ((v20 & 0x2000000000000000) == 0)
            v21 = v18 & 0xFFFFFFFFFFFFLL;
          if (v21)
            goto LABEL_62;
          swift_bridgeObjectRelease();
        }
        v22 = objc_msgSend(v15, sel_medicalRecordCodings);
        sub_224E5451C(0, (unint64_t *)&qword_2557E1648);
        v23 = sub_224F67D6C();

        if (v23 >> 62)
        {
          swift_bridgeObjectRetain();
          v24 = sub_224F681D4();
          if (v24)
          {
LABEL_37:
            v71 = v15;
            v72 = v1;
            v75 = (id)objc_opt_self();
            v25 = 0;
            while (1)
            {
              v26 = (v23 & 0xC000000000000001) != 0
                  ? (id)MEMORY[0x22768E1CC](v25, v23)
                  : *(id *)(v23 + 8 * v25 + 32);
              v27 = v26;
              v28 = v25 + 1;
              if (__OFADD__(v25, 1))
                break;
              v29 = objc_msgSend(v26, sel_codingSystem);
              v1 = (unint64_t)objc_msgSend(v75, sel_textSystem);
              if (v29)
              {
                sub_224E5451C(0, &qword_2557E27E8);
                v30 = v29;
                v31 = sub_224F67F28();

                if ((v31 & 1) != 0)
                {
                  swift_bridgeObjectRelease_n();
                  v32 = objc_msgSend(v27, sel_displayString);

                  if (v32)
                  {
                    v18 = sub_224F67B80();
                    v20 = v33;

                    goto LABEL_51;
                  }
LABEL_48:
                  v18 = 0;
                  v20 = 0xE000000000000000;
LABEL_51:
                  v15 = v71;
                  v1 = v72;
                  goto LABEL_54;
                }
                v1 = (unint64_t)v27;
              }
              else
              {

              }
              ++v25;
              if (v28 == v24)
              {
                swift_bridgeObjectRelease_n();
                goto LABEL_48;
              }
            }
            __break(1u);
            goto LABEL_70;
          }
        }
        else
        {
          v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v24)
            goto LABEL_37;
        }
        swift_bridgeObjectRelease_n();
        v18 = 0;
        v20 = 0xE000000000000000;
LABEL_54:
        v34 = HIBYTE(v20) & 0xF;
        if ((v20 & 0x2000000000000000) == 0)
          v34 = v18 & 0xFFFFFFFFFFFFLL;
        if (!v34)
        {
          swift_bridgeObjectRelease();
          v35 = sub_224F577C8();
          v20 = v36;
          v37 = HIBYTE(v36) & 0xF;
          if ((v36 & 0x2000000000000000) == 0)
            v37 = v35 & 0xFFFFFFFFFFFFLL;
          if (v37)
          {
            v18 = v35;
          }
          else
          {
            swift_bridgeObjectRelease();
            v38 = objc_msgSend(v15, sel_fallbackDisplayString);
            v18 = sub_224F67B80();
            v20 = v39;

          }
        }
LABEL_62:

        v76 = v1;
        v41 = *(_QWORD *)(v1 + 16);
        v40 = *(_QWORD *)(v1 + 24);
        v42 = v74;
        if (v41 >= v40 >> 1)
        {
          sub_224E53720(v40 > 1, v41 + 1, 1);
          v42 = v74;
        }
        v13 = v42 + 1;
        *(_QWORD *)(v1 + 16) = v41 + 1;
        v43 = v1 + 16 * v41;
        *(_QWORD *)(v43 + 32) = v18;
        *(_QWORD *)(v43 + 40) = v20;
        v8 = v73;
        if (v13 == v73)
        {
          v44 = v70;
          v45 = v68;
          goto LABEL_66;
        }
      }
    }
    __break(1u);
    goto LABEL_76;
  }
LABEL_79:
  v45 = v1;
  v44 = v70;
LABEL_66:
  v46 = (_QWORD *)v44;
  v47 = sub_224ECE374(*(_QWORD *)(v44 + 728), *(void **)(v44 + 736), v45);
  if (!v69)
  {
    v48 = v47;
    v49 = v46[93];
    v50 = v46[91];
    swift_bridgeObjectRelease();
    sub_224DDB408(v50, v49, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    v51 = sub_224E5A3D0();
    v52 = (id *)v46[93];
    v53 = (void *)v51;
    v55 = v54;
    v56 = v46;
    v57 = (void *)v46[92];
    sub_224E5451C(0, &qword_2557E27D8);
    v58 = v48;
    v59 = (void *)sub_224F07D48(v52, v58, v1, v53, v55);
    sub_224DDE9B4((uint64_t)v53, (unint64_t)v55);

    v60 = objc_allocWithZone(MEMORY[0x24BE48A68]);
    sub_224E5451C(0, &qword_2557E1518);
    v61 = v57;
    v62 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    sub_224E5451C(0, &qword_2557E27E0);
    v63 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    v64 = objc_msgSend(v60, sel_initWithOriginalRecord_mainRecord_verifiableClinicalRecord_medicalRecords_clinicalRecords_, v61, v58, v59, v62, v63);

    swift_task_dealloc();
    return ((uint64_t (*)(id))v56[1])(v64);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_77:
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v70 + 8))();
}

uint64_t sub_224ECDA14()
{
  uint64_t v0;

  sub_224ECF2D4((id *)(v0 + 432));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224ECDA50()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  char v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  __int128 *v47;
  __int128 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id *v52;
  void *v53;
  void *v54;
  void *v55;
  _QWORD *v56;
  void *v57;
  __int128 *v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  void *v63;
  id v64;
  uint64_t v66;
  _BYTE *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  unint64_t v72;
  int64_t v73;
  uint64_t v74;
  id v75;
  unint64_t v76;
  unint64_t v77;

  v69 = *(_QWORD *)(v0 + 776);
  v1 = *(_QWORD *)(v0 + 704);
  sub_224ECF2D4((id *)(v0 + 432));
  v76 = MEMORY[0x24BEE4AF8];
  if (v1 >> 62)
  {
LABEL_71:
    swift_bridgeObjectRetain();
    v2 = sub_224F681D4();
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    if (v2 < 1)
    {
      __break(1u);
      goto LABEL_79;
    }
    for (i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x22768E1CC](i, v1);
      else
        v5 = *(id *)(v1 + 8 * i + 32);
      v6 = v5;
      if (objc_msgSend(v5, sel_enteredInError, v68))
      {

      }
      else
      {
        MEMORY[0x22768DE24]();
        if (*(_QWORD *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_224F67D90();
        sub_224F67D9C();
        sub_224F67D84();
      }
    }
    v7 = v76;
  }
  else
  {
    v7 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease_n();
  if (!(v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
      v77 = v3;
      sub_224F6818C();
      goto LABEL_20;
    }
    goto LABEL_76;
  }
  swift_bridgeObjectRetain();
  v66 = sub_224F681D4();
  swift_bridgeObjectRelease();
  if (!v66)
  {
LABEL_76:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_224ECF1EC();
    swift_allocError();
    *v67 = 1;
    swift_willThrow();
    goto LABEL_77;
  }
  swift_bridgeObjectRetain();
  v8 = sub_224F681D4();
  swift_bridgeObjectRelease();
  v1 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v77 = MEMORY[0x24BEE4AF8];
    sub_224F6818C();
    if ((v8 & 0x8000000000000000) == 0)
    {
LABEL_20:
      v9 = 0;
      do
      {
        if ((v7 & 0xC000000000000001) != 0)
          v10 = (id)MEMORY[0x22768E1CC](v9, v7);
        else
          v10 = *(id *)(v7 + 8 * v9 + 32);
        v11 = v10;
        ++v9;
        v12 = objc_msgSend(v10, sel_asSignedClinicalDataItem, v68);

        sub_224F68174();
        sub_224F68198();
        sub_224F681A4();
        sub_224F68180();
      }
      while (v8 != v9);
      v68 = v77;
      v76 = v3;
      sub_224E53720(0, v8, 0);
      v13 = 0;
      v1 = v3;
      v73 = v8;
      while (1)
      {
        if (v13 == v8)
        {
LABEL_70:
          __break(1u);
          goto LABEL_71;
        }
        v74 = v13;
        if ((v7 & 0xC000000000000001) != 0)
          v14 = (id)MEMORY[0x22768E1CC]();
        else
          v14 = *(id *)(v7 + 32 + 8 * v13);
        v15 = v14;
        v16 = objc_msgSend(v14, sel_primaryConcept, v68);
        v17 = objc_msgSend(v16, sel_localizedPreferredName);

        if (v17)
        {
          v18 = sub_224F67B80();
          v20 = v19;

          v21 = HIBYTE(v20) & 0xF;
          if ((v20 & 0x2000000000000000) == 0)
            v21 = v18 & 0xFFFFFFFFFFFFLL;
          if (v21)
            goto LABEL_62;
          swift_bridgeObjectRelease();
        }
        v22 = objc_msgSend(v15, sel_medicalRecordCodings);
        sub_224E5451C(0, (unint64_t *)&qword_2557E1648);
        v23 = sub_224F67D6C();

        if (v23 >> 62)
        {
          swift_bridgeObjectRetain();
          v24 = sub_224F681D4();
          if (v24)
          {
LABEL_37:
            v71 = v15;
            v72 = v1;
            v75 = (id)objc_opt_self();
            v25 = 0;
            while (1)
            {
              v26 = (v23 & 0xC000000000000001) != 0
                  ? (id)MEMORY[0x22768E1CC](v25, v23)
                  : *(id *)(v23 + 8 * v25 + 32);
              v27 = v26;
              v28 = v25 + 1;
              if (__OFADD__(v25, 1))
                break;
              v29 = objc_msgSend(v26, sel_codingSystem);
              v1 = (unint64_t)objc_msgSend(v75, sel_textSystem);
              if (v29)
              {
                sub_224E5451C(0, &qword_2557E27E8);
                v30 = v29;
                v31 = sub_224F67F28();

                if ((v31 & 1) != 0)
                {
                  swift_bridgeObjectRelease_n();
                  v32 = objc_msgSend(v27, sel_displayString);

                  if (v32)
                  {
                    v18 = sub_224F67B80();
                    v20 = v33;

                    goto LABEL_51;
                  }
LABEL_48:
                  v18 = 0;
                  v20 = 0xE000000000000000;
LABEL_51:
                  v15 = v71;
                  v1 = v72;
                  goto LABEL_54;
                }
                v1 = (unint64_t)v27;
              }
              else
              {

              }
              ++v25;
              if (v28 == v24)
              {
                swift_bridgeObjectRelease_n();
                goto LABEL_48;
              }
            }
            __break(1u);
            goto LABEL_70;
          }
        }
        else
        {
          v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v24)
            goto LABEL_37;
        }
        swift_bridgeObjectRelease_n();
        v18 = 0;
        v20 = 0xE000000000000000;
LABEL_54:
        v34 = HIBYTE(v20) & 0xF;
        if ((v20 & 0x2000000000000000) == 0)
          v34 = v18 & 0xFFFFFFFFFFFFLL;
        if (!v34)
        {
          swift_bridgeObjectRelease();
          v35 = sub_224F577C8();
          v20 = v36;
          v37 = HIBYTE(v36) & 0xF;
          if ((v36 & 0x2000000000000000) == 0)
            v37 = v35 & 0xFFFFFFFFFFFFLL;
          if (v37)
          {
            v18 = v35;
          }
          else
          {
            swift_bridgeObjectRelease();
            v38 = objc_msgSend(v15, sel_fallbackDisplayString);
            v18 = sub_224F67B80();
            v20 = v39;

          }
        }
LABEL_62:

        v76 = v1;
        v41 = *(_QWORD *)(v1 + 16);
        v40 = *(_QWORD *)(v1 + 24);
        v42 = v74;
        if (v41 >= v40 >> 1)
        {
          sub_224E53720(v40 > 1, v41 + 1, 1);
          v42 = v74;
        }
        v13 = v42 + 1;
        *(_QWORD *)(v1 + 16) = v41 + 1;
        v43 = v1 + 16 * v41;
        *(_QWORD *)(v43 + 32) = v18;
        *(_QWORD *)(v43 + 40) = v20;
        v8 = v73;
        if (v13 == v73)
        {
          v44 = v70;
          v45 = v68;
          goto LABEL_66;
        }
      }
    }
    __break(1u);
    goto LABEL_76;
  }
LABEL_79:
  v45 = v1;
  v44 = v70;
LABEL_66:
  v46 = (_QWORD *)v44;
  v47 = sub_224ECE374(*(_QWORD *)(v44 + 728), *(void **)(v44 + 736), v45);
  if (!v69)
  {
    v48 = v47;
    v49 = v46[93];
    v50 = v46[91];
    swift_bridgeObjectRelease();
    sub_224DDB408(v50, v49, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
    v51 = sub_224E5A3D0();
    v52 = (id *)v46[93];
    v53 = (void *)v51;
    v55 = v54;
    v56 = v46;
    v57 = (void *)v46[92];
    sub_224E5451C(0, &qword_2557E27D8);
    v58 = v48;
    v59 = (void *)sub_224F07D48(v52, v58, v1, v53, v55);
    sub_224DDE9B4((uint64_t)v53, (unint64_t)v55);

    v60 = objc_allocWithZone(MEMORY[0x24BE48A68]);
    sub_224E5451C(0, &qword_2557E1518);
    v61 = v57;
    v62 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    sub_224E5451C(0, &qword_2557E27E0);
    v63 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    v64 = objc_msgSend(v60, sel_initWithOriginalRecord_mainRecord_verifiableClinicalRecord_medicalRecords_clinicalRecords_, v61, v58, v59, v62, v63);

    swift_task_dealloc();
    return ((uint64_t (*)(id))v56[1])(v64);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_77:
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v70 + 8))();
}

uint64_t sub_224ECE338()
{
  uint64_t v0;

  sub_224ECF2D4((id *)(v0 + 432));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

__int128 *sub_224ECE374(uint64_t a1, void *a2, unint64_t a3)
{
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  __int128 *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  uint64_t v67;
  id v68;
  void *v69;
  uint64_t v71;
  char *v72;
  char *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  id *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;

  v81 = a1;
  v74 = a2;
  sub_224E63218(0, &qword_2557E27F0, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v72 - v9;
  sub_224E63218(0, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  MEMORY[0x24BDAC7A8](v11);
  v78 = (uint64_t)&v72 - v12;
  v13 = type metadata accessor for RecordExtractionContext();
  MEMORY[0x24BDAC7A8](v13);
  v77 = (id *)((char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_224F67760();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v76 = (uint64_t)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v75 = (uint64_t)&v72 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v72 - v22;
  v24 = MEMORY[0x24BDAC7A8](v21);
  v85 = (uint64_t)&v72 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (uint64_t)&v72 - v27;
  v29 = v3[11];
  v114 = v3[10];
  v115 = v29;
  v30 = v3[13];
  v116 = v3[12];
  v117 = v30;
  v31 = v3[7];
  v110 = v3[6];
  v111 = v31;
  v32 = v3[9];
  v112 = v3[8];
  v113 = v32;
  v33 = v3[3];
  v106 = v3[2];
  v107 = v33;
  v34 = v3[5];
  v108 = v3[4];
  v109 = v34;
  v35 = v3[1];
  v104 = *v3;
  v105 = v35;
  v89 = v36;
  sub_224F676A0();
  if (a3 >> 62)
    goto LABEL_32;
  v37 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    v83 = v37;
    v72 = v10;
    v73 = v8;
    v87 = a3;
    v79 = v28;
    if (!v37)
      break;
    v86 = v15;
    v84 = a3 & 0xC000000000000001;
    v28 = 4;
    v15 = v83;
    v82 = v23;
    while (1)
    {
      v10 = (char *)(v28 - 4);
      v38 = v84 ? (id)MEMORY[0x22768E1CC](v28 - 4, a3) : *(id *)(a3 + 8 * v28);
      v39 = v38;
      v8 = (char *)(v28 - 3);
      if (__OFADD__(v10, 1))
        break;
      v88 = v28;
      v40 = objc_msgSend(v38, sel_relevantDate);
      sub_224F6773C();

      LOBYTE(v40) = sub_224F67724();
      v41 = *(void (**)(char *, uint64_t))(v16 + 8);
      v42 = v86;
      v41(v23, v86);
      if ((v40 & 1) != 0)
      {
        v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32);
        v44 = v16;
        v45 = v85;
        v46 = v89;
        v43(v85, v89, v42);
        v47 = v46;
        v48 = v45;
        v16 = v44;
        v15 = v83;
      }
      else
      {
        v49 = v16;
        v50 = v89;
        v41((char *)v89, v42);
        v51 = objc_msgSend(v39, sel_relevantDate);
        v52 = v85;
        sub_224F6773C();

        v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32);
        v47 = v50;
        v16 = v49;
        v23 = v82;
        v48 = v52;
      }
      v43(v47, v48, v42);

      if (v8 == (char *)v15)
      {
        swift_bridgeObjectRelease();
        v15 = v86;
        v28 = v79;
        goto LABEL_16;
      }
      a3 = v87;
      v28 = v88 + 1;
    }
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    v37 = sub_224F681D4();
  }
  swift_bridgeObjectRelease();
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32);
LABEL_16:
  v43(v28, v89, v15);
  if ((BYTE8(v116) & 1) != 0)
  {
    v90 = v114;
    v91 = v115;
    *(_QWORD *)&v92 = v116;
    v53 = &v90;
    v54 = v80;
    v55 = sub_224F1F5EC();
    v56 = v54;
    if (v54)
    {
LABEL_18:
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v28, v15);
      return v53;
    }
  }
  else
  {
    v90 = v114;
    v91 = v115;
    *(_QWORD *)&v92 = v116;
    v53 = &v90;
    v57 = v80;
    v55 = sub_224F49DE4();
    v56 = v57;
    if (v57)
      goto LABEL_18;
  }
  v84 = (unint64_t)v55;
  sub_224DDB408(v81, (uint64_t)v77, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v58 = sub_224F677D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v78, 1, 1, v58);
  v100 = v114;
  v101 = v115;
  v102 = v116;
  v103 = v117;
  v96 = v110;
  v97 = v111;
  v98 = v112;
  v99 = v113;
  v92 = v106;
  v93 = v107;
  v94 = v108;
  v95 = v109;
  v90 = v104;
  v91 = v105;
  v59 = sub_224ECEA90();
  v88 = *((_QWORD *)&v109 + 1);
  v85 = v109;
  v86 = v59;
  if ((BYTE8(v110) & 1) != 0)
  {
    v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v61 = (uint64_t)v72;
    v89 = v56;
    v60(v72, 1, 1, v15);
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_224ECF33C((uint64_t)&v109);
    v61 = (uint64_t)v72;
    sub_224F67730();
    v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v60((char *)v61, 0, 1, v15);
    sub_224ECF3C0((uint64_t)&v109);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v61, 1, v15) == 1)
  {
    sub_224F67754();
    sub_224E7601C(v61, &qword_2557E27F0, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  }
  else
  {
    v43(v75, v61, v15);
  }
  v62 = (uint64_t)v73;
  v89 = v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v76, v28, v15);
  if ((BYTE8(v112) & 1) != 0)
  {
    v60((char *)v62, 1, 1, v15);
  }
  else
  {
    sub_224ECF33C((uint64_t)&v109);
    sub_224F67730();
    v60((char *)v62, 0, 1, v15);
    sub_224ECF3C0((uint64_t)&v109);
  }
  v63 = v15;
  v64 = v62;
  sub_224E5451C(0, &qword_2557E27F8);
  v65 = v74;
  v66 = objc_msgSend(v74, sel_signatureStatus);
  v67 = v87;
  swift_bridgeObjectRetain();
  v68 = objc_msgSend(v65, sel_sourceType);
  v71 = v67;
  v69 = (void *)v84;
  v53 = (__int128 *)sub_224F06AA8(v77, v78, 0, 0, v86, v85, v88, v75, v76, v64, (uint64_t)v66, v84, v71, 0, 0xF000000000000000, (uint64_t)v68);

  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v79, v63);
  return v53;
}

uint64_t sub_224ECEA90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int EnumCaseMultiPayload;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  sub_224E63218(0, &qword_2557E0330, (void (*)(uint64_t))type metadata accessor for ModelsR4.ResourceProxy);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v47 - v2;
  v4 = type metadata accessor for ModelsR4.ResourceProxy(0);
  v53 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v56 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v47 - v7;
  sub_224E63218(0, &qword_2557E02E0, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.ResourceProxy);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v47 - v10;
  v12 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v52 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v47 - v16;
  v18 = *(_QWORD **)(v0 + 144);
  v19 = *(_QWORD *)(v0 + 176);
  if ((*(_BYTE *)(v0 + 200) & 1) != 0)
  {
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        v54 = v4;
        v21 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
        v22 = *(_QWORD *)(v21 - 8);
        v23 = v19 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
        v55 = *(_QWORD *)(v22 + 72);
        v51 = *MEMORY[0x24BDD3860];
        v50 = *MEMORY[0x24BDD3858];
        swift_bridgeObjectRetain();
        v48 = v19;
        swift_bridgeObjectRetain();
        v24 = v53;
        v52 = v21;
        do
        {
          sub_224E75F34(v23 + *(int *)(v21 + 20), (uint64_t)v3, &qword_2557E0330, (void (*)(uint64_t))type metadata accessor for ModelsR4.ResourceProxy);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v3, 1, v54) == 1)
          {
            sub_224E7601C((uint64_t)v3, &qword_2557E0330, (void (*)(uint64_t))type metadata accessor for ModelsR4.ResourceProxy);
          }
          else
          {
            sub_224DDEADC((uint64_t)v3, (uint64_t)v8, type metadata accessor for ModelsR4.ResourceProxy);
            sub_224DDB408((uint64_t)v8, v56, type metadata accessor for ModelsR4.ResourceProxy);
            EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            if (EnumCaseMultiPayload == 5 || EnumCaseMultiPayload == 6)
            {
              v26 = sub_224F67B80();
              v28 = v27;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v18 = sub_224E56678(0, v18[2] + 1, 1, v18);
              v30 = v18[2];
              v29 = v18[3];
              if (v30 >= v29 >> 1)
                v18 = sub_224E56678((_QWORD *)(v29 > 1), v30 + 1, 1, v18);
              v18[2] = v30 + 1;
              v31 = &v18[2 * v30];
              v31[4] = v26;
              v31[5] = v28;
              v21 = v52;
              v24 = v53;
            }
            sub_224DDEAA0((uint64_t)v8, type metadata accessor for ModelsR4.ResourceProxy);
            sub_224DDEAA0(v56, type metadata accessor for ModelsR4.ResourceProxy);
          }
          v23 += v55;
          --v20;
        }
        while (v20);
LABEL_31:
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
    }
  }
  else if (v19)
  {
    v32 = *(_QWORD *)(v19 + 16);
    if (v32)
    {
      v54 = v15;
      v55 = v14;
      v33 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
      v34 = *(_QWORD *)(v33 - 8);
      v35 = v19 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
      v56 = *(_QWORD *)(v34 + 72);
      v50 = *MEMORY[0x24BDD3860];
      v49 = *MEMORY[0x24BDD3858];
      swift_bridgeObjectRetain();
      v48 = v19;
      swift_bridgeObjectRetain();
      v36 = v52;
      v53 = v33;
      do
      {
        sub_224E75F34(v35 + *(int *)(v33 + 20), (uint64_t)v11, &qword_2557E02E0, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.ResourceProxy);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v11, 1, v55) == 1)
        {
          sub_224E7601C((uint64_t)v11, &qword_2557E02E0, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.ResourceProxy);
        }
        else
        {
          sub_224DDEADC((uint64_t)v11, (uint64_t)v17, type metadata accessor for ModelsDSTU2.ResourceProxy);
          v37 = v54;
          sub_224DDB408((uint64_t)v17, v54, type metadata accessor for ModelsDSTU2.ResourceProxy);
          v38 = swift_getEnumCaseMultiPayload();
          if (v38 == 3 || v38 == 4)
          {
            v51 = sub_224F67B80();
            v40 = v39;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v18 = sub_224E56678(0, v18[2] + 1, 1, v18);
            v42 = v18[2];
            v41 = v18[3];
            if (v42 >= v41 >> 1)
              v18 = sub_224E56678((_QWORD *)(v41 > 1), v42 + 1, 1, v18);
            v18[2] = v42 + 1;
            v43 = &v18[2 * v42];
            v36 = v52;
            v43[4] = v51;
            v43[5] = v40;
            v33 = v53;
          }
          sub_224DDEAA0((uint64_t)v17, type metadata accessor for ModelsDSTU2.ResourceProxy);
          sub_224DDEAA0(v37, type metadata accessor for ModelsDSTU2.ResourceProxy);
        }
        v35 += v56;
        --v32;
      }
      while (v32);
      goto LABEL_31;
    }
  }
  swift_bridgeObjectRetain();
LABEL_32:
  swift_bridgeObjectRetain();
  v57 = sub_224F67E8C();
  v44 = swift_bridgeObjectRetain();
  v45 = sub_224ECF448(v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return v45;
}

id sub_224ECF01C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v9 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v16 - v11;
  v13 = *(_QWORD *)(v4 + 80);
  v14 = *(_QWORD *)(v4 + 88);
  sub_224E75F34(a3, (uint64_t)&v16 - v11, (unint64_t *)&qword_2557E02A8, v9);
  objc_allocWithZone(MEMORY[0x24BE48998]);
  sub_224DDE970(a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_224E5A598(a1, a2, 1, (uint64_t)v12, v13, v14, 0, 0, 0, 0xF000000000000000, 0, a4);
}

uint64_t sub_224ECF13C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_224ECF198;
  return sub_224ECCA74(a1, a2);
}

uint64_t sub_224ECF198(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

unint64_t sub_224ECF1EC()
{
  unint64_t result;

  result = qword_2557E27D0;
  if (!qword_2557E27D0)
  {
    result = MEMORY[0x22768ED24](&unk_224F76214, &type metadata for SignedClinicalDataExtractionError);
    atomic_store(result, (unint64_t *)&qword_2557E27D0);
  }
  return result;
}

uint64_t sub_224ECF230(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

id *sub_224ECF26C(id *a1)
{
  id v2;

  v2 = *a1;
  sub_224E5AC94();
  return a1;
}

id *sub_224ECF2D4(id *a1)
{

  sub_224E5AF3C();
  return a1;
}

uint64_t sub_224ECF33C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  sub_224E5AC94();
  return a1;
}

uint64_t sub_224ECF3C0(uint64_t a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_224E5AF3C();
  return a1;
}

uint64_t sub_224ECF448(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v2 = 0;
  v3 = result + 40;
  v4 = -(uint64_t)v1;
  v5 = MEMORY[0x24BEE4AF8];
  v15 = result + 40;
  v16 = *(_QWORD *)(result + 16);
  do
  {
    if (v2 <= v1)
      v6 = v1;
    else
      v6 = v2;
    v7 = -(uint64_t)v6;
    for (i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      v10 = *(i - 1);
      v9 = *i;
      swift_bridgeObjectRetain_n();
      v11 = sub_224F19FE4(&v17, v10, v9);
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
        break;
      result = swift_bridgeObjectRelease();
      ++v2;
      if (v4 + v2 == 1)
        return v5;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    v18 = v5;
    if ((result & 1) == 0)
    {
      result = sub_224E53720(0, *(_QWORD *)(v5 + 16) + 1, 1);
      v5 = v18;
    }
    v13 = *(_QWORD *)(v5 + 16);
    v12 = *(_QWORD *)(v5 + 24);
    if (v13 >= v12 >> 1)
    {
      result = sub_224E53720(v12 > 1, v13 + 1, 1);
      v5 = v18;
    }
    *(_QWORD *)(v5 + 16) = v13 + 1;
    v14 = v5 + 16 * v13;
    *(_QWORD *)(v14 + 32) = v10;
    *(_QWORD *)(v14 + 40) = v9;
    v3 = v15;
    v1 = v16;
  }
  while (v4 + v2);
  return v5;
}

unint64_t sub_224ECF5B0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD v23[2];
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;

  v25 = a1;
  v26 = a2;
  v4 = type metadata accessor for Attachment();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)v23 - v9;
  v11 = MEMORY[0x24BEE4AF8];
  v27 = MEMORY[0x24BEE4AF8];
  v12 = *(_QWORD *)(a3 + 16);
  if (!v12)
  {
    v16 = MEMORY[0x24BEE4AF8];
    if (!(MEMORY[0x24BEE4AF8] >> 62))
      goto LABEL_13;
LABEL_17:
    swift_bridgeObjectRetain();
    v22 = sub_224F681D4();
    swift_bridgeObjectRelease();
    if (v22)
      return v16;
    goto LABEL_14;
  }
  v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v23[1] = a3;
  v24 = v13;
  v14 = a3 + v13;
  v15 = *(_QWORD *)(v8 + 72);
  swift_bridgeObjectRetain();
  v16 = MEMORY[0x24BEE4AF8];
  do
  {
    sub_224DDB408(v14, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
    v17 = sub_224ECF80C(v25, v26);
    if (v17)
    {
      v18 = v17;
      MEMORY[0x22768DE24]();
      if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_224F67D90();
      sub_224F67D9C();
      sub_224F67D84();

    }
    sub_224DDB408((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = sub_224E56EB4(0, *(_QWORD *)(v16 + 16) + 1, 1, v16);
    v20 = *(_QWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 24);
    if (v20 >= v19 >> 1)
      v16 = sub_224E56EB4(v19 > 1, v20 + 1, 1, v16);
    *(_QWORD *)(v16 + 16) = v20 + 1;
    sub_224ED0EF0((uint64_t)v7, v16 + v24 + v20 * v15);
    sub_224DDEAA0((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
    v14 += v15;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  v11 = v27;
  if (v27 >> 62)
    goto LABEL_17;
LABEL_13:
  if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
LABEL_14:
    swift_bridgeObjectRelease();
  return v16;
}

id sub_224ECF80C(uint64_t a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t, uint64_t);
  void (*v110)(char *, char *, uint64_t);
  void (*v111)(char *, _QWORD, uint64_t, uint64_t);
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void (*v127)(char *, uint64_t);
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  id v140;
  char *v141;
  unsigned int v142;
  void (*v143)(char *, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(void (*)(char *, char *, uint64_t), uint64_t, uint64_t, uint64_t);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(char *, char *, uint64_t);
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  void *v157;
  void (*v159)(char *, uint64_t);
  unint64_t v160;
  char *v161;
  uint64_t v162;
  int v163;
  void (*v164)(char *, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t (*v167)(unint64_t, uint64_t, uint64_t);
  int v168;
  uint64_t inited;
  uint64_t v170;
  uint64_t *boxed_opaque_existential_1;
  char *v172;
  void (*v173)(char *, uint64_t);
  uint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t *v182;
  char *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  void *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  void (*v200)(char *, char *, uint64_t);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;

  v3 = v2;
  v205 = a1;
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v175 - v7;
  v9 = type metadata accessor for PostExtractionContext();
  MEMORY[0x24BDAC7A8](v9);
  v201 = (uint64_t)&v175 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = type metadata accessor for FHIRDateTime();
  v186 = *(_QWORD *)(v187 - 8);
  MEMORY[0x24BDAC7A8](v187);
  v178 = (uint64_t)&v175 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E27F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], v5);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v175 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v193 = (unint64_t)&v175 - v16;
  v192 = sub_224F67760();
  v198 = *(_QWORD *)(v192 - 8);
  MEMORY[0x24BDAC7A8](v192);
  v175 = (char *)&v175 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_224F675D4();
  v206 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v185 = (char *)&v175 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v180 = (char *)&v175 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v176 = (char *)&v175 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v179 = (char *)&v175 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v199 = (char *)&v175 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v204 = (char *)&v175 - v29;
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, v30, v5);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v175 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x24BDAC7A8](v32);
  v202 = (uint64_t)&v175 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v200 = (void (*)(char *, char *, uint64_t))((char *)&v175 - v38);
  v39 = MEMORY[0x24BDAC7A8](v37);
  v184 = (char *)&v175 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v194 = (uint64_t)&v175 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v45 = (uint64_t)&v175 - v44;
  MEMORY[0x24BDAC7A8](v43);
  v47 = (char *)&v175 - v46;
  v48 = v3[3];
  v189 = a2;
  v191 = v8;
  v188 = v15;
  if (v48)
  {
    v49 = v3;
    v50 = v3 + 2;
    swift_bridgeObjectRetain();
    v51 = sub_224F67604();
    v53 = v52;
    swift_bridgeObjectRelease();
    if (v53 >> 60 == 15)
    {
      if (qword_2557E0128 != -1)
        swift_once();
      v54 = sub_224F679B8();
      __swift_project_value_buffer(v54, (uint64_t)qword_2557FC958);
      v55 = sub_224F679AC();
      v56 = sub_224F67ED4();
      if (os_log_type_enabled(v55, v56))
      {
        v57 = (uint8_t *)swift_slowAlloc();
        v58 = swift_slowAlloc();
        v208 = v58;
        *(_DWORD *)v57 = 136315138;
        v207 = type metadata accessor for Attachment();
        sub_224ED0F84();
        v59 = sub_224F67BC8();
        v207 = sub_224E76904(v59, v60, &v208);
        sub_224F68000();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_224DAC000, v55, v56, "%s: Failed to base64 decode inline data for attachment.", v57, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22768EDE4](v58, -1, -1);
        MEMORY[0x22768EDE4](v57, -1, -1);
      }

      return 0;
    }
    v183 = v34;
    v190 = v18;
    v177 = v47;
    sub_224DDE970(v51, v53);
    sub_224F45ACC(v51, v53);
    v66 = v65;
    v68 = v67;
    v181 = type metadata accessor for Attachment();
    v69 = *(int *)(v181 + 32);
    v182 = v49;
    v70 = (uint64_t *)((char *)v49 + v69);
    v71 = v70[1];
    v197 = v66;
    v196 = v68;
    v195 = v53;
    v203 = v51;
    if (v71)
    {
      v72 = *v70;
      sub_224E58810(v51, v53);
    }
    else
    {
      sub_224DDE970(v66, v68);
      v72 = sub_224F6764C();
      v71 = v73;
      sub_224E58810(v51, v53);
      sub_224DDE9B4(v66, v68);
    }
    swift_bridgeObjectRelease();
    *v70 = v72;
    v70[1] = v71;
    *v50 = 0;
    v50[1] = 0;
    v47 = v177;
    v18 = v190;
    v64 = v195;
    v63 = v203;
    v3 = v182;
    v61 = (int *)v181;
  }
  else
  {
    v183 = v34;
    v61 = (int *)type metadata accessor for Attachment();
    if (*(uint64_t *)((char *)v3 + v61[8] + 8))
    {
      swift_bridgeObjectRetain();
      v197 = sub_224F67604();
      v196 = v62;
      swift_bridgeObjectRelease();
      v63 = 0;
      v64 = 0xF000000000000000;
    }
    else
    {
      v63 = 0;
      v197 = 0;
      v64 = 0xF000000000000000;
      v196 = 0xF000000000000000;
    }
  }
  v74 = v206;
  v177 = *(char **)(v206 + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v177)(v47, 1, 1, v18);
  type metadata accessor for Attachment();
  sub_224E5AF70((uint64_t)v3 + v61[6], v45);
  v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  if (v75(v45, 1, v18) == 1)
  {
    sub_224DDB50C(v45, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    LODWORD(v45) = 0;
  }
  else
  {
    v182 = v3;
    v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 32);
    v86((uint64_t)v204, v45, v18);
    v87 = v74;
    v88 = v205 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    v89 = v88 + *(int *)(type metadata accessor for ExtractionContext() + 32);
    v90 = v194;
    sub_224E5AF70(v89, v194);
    if (v75(v90, 1, v18) == 1)
    {
      v190 = v18;
      sub_224DDB50C(v90, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      if (qword_2557E0128 != -1)
        swift_once();
      v91 = sub_224F679B8();
      __swift_project_value_buffer(v91, (uint64_t)qword_2557FC958);
      v92 = sub_224F679AC();
      v93 = sub_224F67ED4();
      if (os_log_type_enabled(v92, v93))
      {
        v203 = v63;
        v94 = (uint8_t *)swift_slowAlloc();
        v95 = swift_slowAlloc();
        v207 = (uint64_t)v61;
        v208 = v95;
        *(_DWORD *)v94 = 136315138;
        sub_224ED0F84();
        v96 = sub_224F67BC8();
        v207 = sub_224E76904(v96, v97, &v208);
        sub_224F68000();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_224DAC000, v92, v93, "%s: sourceURL is nil in ExtractionContext for attachment.", v94, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22768EDE4](v95, -1, -1);
        MEMORY[0x22768EDE4](v94, -1, -1);

        v98 = v203;
      }
      else
      {

        v98 = v63;
      }
      sub_224E58810(v98, v64);
      (*(void (**)(char *, uint64_t))(v206 + 8))(v204, v190);
      goto LABEL_48;
    }
    v203 = v63;
    v181 = (uint64_t)v61;
    v108 = (uint64_t)v199;
    v86((uint64_t)v199, v90, v18);
    v109 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
    v110 = v200;
    v109((char *)v200, v108, v18);
    v111 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v177;
    ((void (*)(void (*)(char *, char *, uint64_t), _QWORD, uint64_t, uint64_t))v177)(v110, 0, 1, v18);
    v112 = v184;
    sub_224EFC540(v110, v184);
    sub_224DDB50C((uint64_t)v110, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v75((uint64_t)v112, 1, v18) == 1)
    {
      sub_224DDB50C((uint64_t)v112, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v113 = v203;
      if (qword_2557E0128 != -1)
        swift_once();
      v114 = sub_224F679B8();
      __swift_project_value_buffer(v114, (uint64_t)qword_2557FC958);
      v115 = v180;
      v116 = (uint64_t)v199;
      v109(v180, (uint64_t)v199, v18);
      v117 = (uint64_t)v204;
      v109(v185, (uint64_t)v204, v18);
      v118 = sub_224F679AC();
      v119 = sub_224F67ED4();
      if (os_log_type_enabled(v118, v119))
      {
        v120 = swift_slowAlloc();
        v190 = v18;
        v121 = v120;
        v122 = swift_slowAlloc();
        v205 = v122;
        *(_DWORD *)v121 = 136315650;
        v207 = v181;
        v208 = v122;
        sub_224ED0F84();
        v123 = sub_224F67BC8();
        v207 = sub_224E76904(v123, v124, &v208);
        sub_224F68000();
        swift_bridgeObjectRelease();
        *(_WORD *)(v121 + 12) = 2080;
        v125 = sub_224F6755C();
        v207 = sub_224E76904(v125, v126, &v208);
        sub_224F68000();
        swift_bridgeObjectRelease();
        v195 = v64;
        v127 = *(void (**)(char *, uint64_t))(v206 + 8);
        v128 = v115;
        v129 = v190;
        v127(v128, v190);
        *(_WORD *)(v121 + 22) = 2080;
        v130 = v185;
        v131 = sub_224F6755C();
        v207 = sub_224E76904(v131, v132, &v208);
        sub_224F68000();
        swift_bridgeObjectRelease();
        v127(v130, v129);
        _os_log_impl(&dword_224DAC000, v118, v119, "%s: Failed to create fully qualified url for attachment with sourceURL: %s reference URL: %s", (uint8_t *)v121, 0x20u);
        v133 = v205;
        swift_arrayDestroy();
        MEMORY[0x22768EDE4](v133, -1, -1);
        MEMORY[0x22768EDE4](v121, -1, -1);

        sub_224E58810(v203, v195);
        v127(v199, v129);
        v127(v204, v129);
      }
      else
      {

        v159 = *(void (**)(char *, uint64_t))(v206 + 8);
        v159(v185, v18);
        v159(v115, v18);
        sub_224E58810(v113, v64);
        v159((char *)v116, v18);
        v159((char *)v117, v18);
      }
      v160 = v196;
      sub_224DDB50C((uint64_t)v47, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v138 = v197;
      v139 = v160;
      goto LABEL_49;
    }
    v141 = v179;
    v86((uint64_t)v179, (uint64_t)v112, v18);
    sub_224DDB50C((uint64_t)v47, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v109(v47, (uint64_t)v141, v18);
    v111(v47, 0, 1, v18);
    v142 = v75((uint64_t)v47, 1, v18);
    v63 = v203;
    if (v142)
    {
      v143 = *(void (**)(char *, uint64_t))(v206 + 8);
      v143(v141, v18);
      v143(v199, v18);
      v143(v204, v18);
      LODWORD(v45) = 0;
    }
    else
    {
      v161 = v176;
      v109(v176, (uint64_t)v47, v18);
      v162 = (uint64_t)v200;
      v109((char *)v200, (uint64_t)v199, v18);
      v111((char *)v162, 0, 1, v18);
      v45 = (uint64_t)v141;
      v163 = sub_224EFC840(0x7972616E6942, 0xE600000000000000, v162);
      sub_224DDB50C(v162, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v164 = *(void (**)(char *, uint64_t))(v206 + 8);
      v164(v161, v18);
      v165 = v45;
      LODWORD(v45) = v163;
      v164((char *)v165, v18);
      v164(v199, v18);
      v164(v204, v18);
    }
    v3 = v182;
    v61 = (int *)v181;
  }
  v76 = v202;
  sub_224E5AF70((uint64_t)v47, v202);
  v77 = v75(v76, 1, v18);
  sub_224DDB50C(v76, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v195 = v64;
  v78 = v64 >> 60;
  if (v77 == 1 && v78 >= 0xF)
  {
    if (qword_2557E0128 != -1)
      swift_once();
    v79 = sub_224F679B8();
    __swift_project_value_buffer(v79, (uint64_t)qword_2557FC958);
    v80 = sub_224F679AC();
    v81 = sub_224F67EBC();
    if (os_log_type_enabled(v80, v81))
    {
      v82 = (uint8_t *)swift_slowAlloc();
      v83 = swift_slowAlloc();
      v207 = (uint64_t)v61;
      v208 = v83;
      *(_DWORD *)v82 = 136315138;
      sub_224ED0F84();
      v84 = sub_224F67BC8();
      v207 = sub_224E76904(v84, v85, &v208);
      sub_224F68000();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_224DAC000, v80, v81, "%s: Attachment has neither a 'url' nor 'data'. ", v82, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v83, -1, -1);
      MEMORY[0x22768EDE4](v82, -1, -1);
    }

LABEL_48:
    v136 = v197;
    v137 = v196;
    sub_224DDB50C((uint64_t)v47, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v138 = v136;
    v139 = v137;
LABEL_49:
    sub_224E58810(v138, v139);
    return 0;
  }
  v99 = (uint64_t)v3 + v61[10];
  v100 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v186 + 48))(v99, 1, v187);
  v203 = v63;
  if (v100)
  {
    v101 = v193;
    v102 = v192;
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v198 + 56))(v193, 1, 1, v192);
    v103 = (uint64_t)v191;
LABEL_31:
    sub_224DDB50C(v101, &qword_2557E27F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
    v193 = 0;
    goto LABEL_32;
  }
  v181 = (uint64_t)v61;
  v190 = v18;
  v144 = v178;
  sub_224DDB408(v99, v178, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  FHIRDateTime.asNSDate()(v193);
  v145 = (uint64_t)v191;
  v102 = v192;
  sub_224DDEAA0(v144, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v166 = v198;
  (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v198 + 56))(v193, 0, 1, v102);
  v167 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v166 + 48);
  v101 = v193;
  v168 = v167(v193, 1, v102);
  v18 = v190;
  v61 = (int *)v181;
  v103 = v145;
  if (v168 == 1)
    goto LABEL_31;
  LODWORD(v206) = v45;
  v45 = v198;
  (*(void (**)(char *, uint64_t, uint64_t))(v198 + 32))(v175, v101, v102);
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1478, (uint64_t (*)(uint64_t))sub_224E5373C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_224F6D8B0;
  *(_QWORD *)(inited + 32) = sub_224F67B80();
  *(_QWORD *)(inited + 40) = v170;
  *(_QWORD *)(inited + 72) = v102;
  v103 = v145;
  v61 = (int *)v181;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
  v172 = v175;
  (*(void (**)(uint64_t *, char *, uint64_t))(v45 + 16))(boxed_opaque_existential_1, v175, v102);
  v193 = sub_224E51ED8(inited);
  v173 = *(void (**)(char *, uint64_t))(v45 + 8);
  LOBYTE(v45) = v206;
  v173(v172, v102);
LABEL_32:
  sub_224DDB408(v205, v201, (uint64_t (*)(_QWORD))type metadata accessor for PostExtractionContext);
  v104 = 7;
  if (v78 > 0xE)
    v104 = 0;
  v206 = v104;
  v105 = (uint64_t *)((char *)v3 + v61[9]);
  v106 = v105[1];
  v204 = (char *)*v105;
  sub_224E5AF70((uint64_t)v47, (uint64_t)v183);
  if ((*((_BYTE *)v3 + v61[7] + 4) & 1) == 0)
  {
    swift_bridgeObjectRetain();
    v199 = (char *)sub_224F68558();
    if ((v45 & 1) == 0)
      goto LABEL_36;
LABEL_43:
    v194 = sub_224F67B80();
    v107 = v134;
    goto LABEL_44;
  }
  swift_bridgeObjectRetain();
  v199 = 0;
  if ((v45 & 1) != 0)
    goto LABEL_43;
LABEL_36:
  v107 = v3[1];
  v194 = *v3;
  swift_bridgeObjectRetain();
LABEL_44:
  v202 = v106;
  if (*(uint64_t *)((char *)v3 + v61[11] + 8))
  {
    swift_bridgeObjectRetain_n();
    sub_224F677B4();
    v135 = sub_224F677D8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 56))(v103, 0, 1, v135);
    swift_bridgeObjectRelease();
  }
  else
  {
    v146 = sub_224F677D8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v146 - 8) + 56))(v103, 1, 1, v146);
  }
  v147 = (void (*)(void (*)(char *, char *, uint64_t), uint64_t, uint64_t, uint64_t))v177;
  sub_224ED0F34();
  v148 = v205 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v149 = v148 + *(int *)(type metadata accessor for ExtractionContext() + 28);
  v150 = v198;
  v151 = (uint64_t)v188;
  (*(void (**)(char *, uint64_t, uint64_t))(v198 + 16))(v188, v149, v102);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v150 + 56))(v151, 0, 1, v102);
  v152 = v200;
  v147(v200, 1, 1, v18);
  v153 = v197;
  v154 = v196;
  sub_224ED0F70(v197, v196);
  v155 = v195;
  v156 = v203;
  v174 = (uint64_t)v152;
  v157 = v199;
  v140 = sub_224F291E0(v201, v189, v206, (uint64_t)v204, v202, (uint64_t)v183, (uint64_t)v199, v194, v107, v103, 0, 0xF000000000000000, v151, v174, v203, v195, v153, v154, v193);
  sub_224E58810(v153, v154);
  sub_224E58810(v156, v155);

  sub_224DDB50C((uint64_t)v47, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  sub_224E58810(v153, v154);
  return v140;
}

uint64_t sub_224ED0EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Attachment();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_224ED0F34()
{
  unint64_t result;

  result = qword_2557E2800;
  if (!qword_2557E2800)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E2800);
  }
  return result;
}

uint64_t sub_224ED0F70(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_224DDE970(a1, a2);
  return a1;
}

unint64_t sub_224ED0F84()
{
  unint64_t result;

  result = qword_2557E2808;
  if (!qword_2557E2808)
  {
    type metadata accessor for Attachment();
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E2808);
  }
  return result;
}

uint64_t sub_224ED0FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

void sub_224ED0FD8()
{
  uint64_t v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t i;
  uint64_t v17;
  id v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_codings);
  *(_QWORD *)(v0 + 40) = sub_224E5451C(0, (unint64_t *)&qword_2557E1648);
  v2 = sub_224F67D6C();

  if (v2 >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = sub_224F681D4())
  {
    v4 = 0;
    if ((v2 & 0xC000000000000001) != 0)
    {
LABEL_4:
      v5 = (id)MEMORY[0x22768E1CC](v4, v2);
      goto LABEL_6;
    }
    while (1)
    {
      v5 = *(id *)(v2 + 8 * v4 + 32);
LABEL_6:
      v6 = v5;
      if (__OFADD__(v4, 1))
        break;
      v7 = objc_msgSend(v5, sel_displayString);
      if (v7)
      {
        v8 = v7;
        v9 = sub_224F67B80();
        v11 = v10;

        swift_bridgeObjectRelease();
        v12 = HIBYTE(v11) & 0xF;
        if ((v11 & 0x2000000000000000) == 0)
          v12 = v9 & 0xFFFFFFFFFFFFLL;
        if (v12)
        {
          v13 = *(void **)(v0 + 16);
          swift_bridgeObjectRelease_n();

LABEL_48:
          v39 = v13;
          (*(void (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
          return;
        }
      }

      if (v4 + 1 == v3)
        goto LABEL_17;
      ++v4;
      if ((v2 & 0xC000000000000001) != 0)
        goto LABEL_4;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  swift_bridgeObjectRelease_n();
  v14 = (unint64_t)sub_224ED1860();
  *(_QWORD *)(v0 + 48) = v14;
  if (v14 >> 62)
    goto LABEL_46;
  v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  *(_QWORD *)(v0 + 56) = v15;
  if (!v15)
  {
LABEL_47:
    v13 = *(void **)(v0 + 16);
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
LABEL_19:
  for (i = 0; ; i = *(_QWORD *)(v0 + 72))
  {
    v17 = *(_QWORD *)(v0 + 48);
    if ((v17 & 0xC000000000000001) != 0)
    {
      v18 = (id)MEMORY[0x22768E1CC](i);
    }
    else
    {
      if (i >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      v18 = *(id *)(v17 + 8 * i + 32);
    }
    *(_QWORD *)(v0 + 64) = v18;
    *(_QWORD *)(v0 + 72) = i + 1;
    if (__OFADD__(i, 1))
      goto LABEL_45;
    v19 = objc_msgSend(*(id *)(v0 + 16), sel_codings);
    v20 = sub_224F67D6C();

    if (!(v20 >> 62))
    {
      v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    swift_bridgeObjectRetain();
    v21 = sub_224F681D4();
    swift_bridgeObjectRelease_n();
    if (v21 < 0)
      break;
LABEL_27:
    *(_QWORD *)(v0 + 80) = v21;
    if (v21)
    {
      v22 = 0;
      *(_QWORD *)(v0 + 88) = 0;
      while (1)
      {
        v23 = objc_msgSend(*(id *)(v0 + 16), sel_codings);
        v24 = sub_224F67D6C();

        if ((v24 & 0xC000000000000001) != 0)
        {
          v25 = (id)MEMORY[0x22768E1CC](v22, v24);
        }
        else
        {
          if (v22 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            v38 = sub_224F681D4();
            *(_QWORD *)(v0 + 56) = v38;
            if (!v38)
              goto LABEL_47;
            goto LABEL_19;
          }
          v25 = *(id *)(v24 + 8 * v22 + 32);
        }
        v21 = (uint64_t)v25;
        *(_QWORD *)(v0 + 96) = v25;
        swift_bridgeObjectRelease();
        v26 = objc_msgSend((id)v21, sel_codingSystem);
        if (v26)
        {
          v27 = v26;
          v28 = *(void **)(v0 + 64);
          sub_224E5451C(0, &qword_2557E27E8);
          v29 = v28;
          v30 = v27;
          LOBYTE(v27) = sub_224F67F28();

          if ((v27 & 1) != 0)
            goto LABEL_42;
        }
        v31 = *(_QWORD *)(v0 + 88);
        v32 = *(_QWORD *)(v0 + 80);

        if (v31 + 1 == v32)
          break;
        v33 = *(_QWORD *)(v0 + 80);
        v22 = *(_QWORD *)(v0 + 88) + 1;
        *(_QWORD *)(v0 + 88) = v22;
        if (v22 == v33)
          goto LABEL_44;
      }
    }
    v34 = *(_QWORD *)(v0 + 72);
    v35 = *(_QWORD *)(v0 + 56);

    if (v34 == v35)
      goto LABEL_47;
  }
  __break(1u);
LABEL_42:
  v36 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v36;
  *v36 = v0;
  v36[1] = sub_224ED1430;
  v37 = *(_QWORD *)(v0 + 32);
  v36[19] = v21;
  v36[20] = v37;
  swift_task_switch();
}

uint64_t sub_224ED1430(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_224ED148C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  unint64_t v4;
  id v5;
  unint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  _QWORD *v36;
  uint64_t v37;

  v1 = *(void **)(v0 + 112);
  if (!v1)
  {
    while (1)
    {
      v14 = *(_QWORD *)(v0 + 88);
      v15 = *(_QWORD *)(v0 + 80);

      if (v14 + 1 == v15)
        break;
      v23 = *(_QWORD *)(v0 + 80);
      v24 = *(_QWORD *)(v0 + 88) + 1;
LABEL_22:
      *(_QWORD *)(v0 + 88) = v24;
      if (v24 == v23)
        goto LABEL_35;
      v25 = objc_msgSend(*(id *)(v0 + 16), sel_codings);
      v26 = sub_224F67D6C();

      if ((v26 & 0xC000000000000001) != 0)
      {
        v27 = (id)MEMORY[0x22768E1CC](v24, v26);
      }
      else
      {
        if (v24 >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_36;
        v27 = *(id *)(v26 + 8 * v24 + 32);
      }
      v28 = v27;
      *(_QWORD *)(v0 + 96) = v27;
      swift_bridgeObjectRelease();
      v29 = objc_msgSend(v28, sel_codingSystem);
      if (v29)
      {
        v30 = v29;
        v31 = *(void **)(v0 + 64);
        sub_224E5451C(0, &qword_2557E27E8);
        v32 = v31;
        v33 = v30;
        LOBYTE(v30) = sub_224F67F28();

        if ((v30 & 1) != 0)
        {
          v36 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 104) = v36;
          *v36 = v0;
          v36[1] = sub_224ED1430;
          v37 = *(_QWORD *)(v0 + 32);
          v36[19] = v28;
          v36[20] = v37;
          swift_task_switch();
          return;
        }
      }
    }
    while (1)
    {
      v16 = *(_QWORD *)(v0 + 72);
      v17 = *(_QWORD *)(v0 + 56);

      if (v16 == v17)
      {
        v34 = *(void **)(v0 + 16);
        swift_bridgeObjectRelease();
        v35 = v34;
        v13 = *(id *)(v0 + 16);
        goto LABEL_31;
      }
      v18 = *(_QWORD *)(v0 + 72);
      v19 = *(_QWORD *)(v0 + 48);
      if ((v19 & 0xC000000000000001) != 0)
      {
        v20 = (id)MEMORY[0x22768E1CC](*(_QWORD *)(v0 + 72));
      }
      else
      {
        if (v18 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_34;
        v20 = *(id *)(v19 + 8 * v18 + 32);
      }
      *(_QWORD *)(v0 + 64) = v20;
      *(_QWORD *)(v0 + 72) = v18 + 1;
      if (__OFADD__(v18, 1))
        break;
      v21 = objc_msgSend(*(id *)(v0 + 16), sel_codings);
      v22 = sub_224F67D6C();

      if (v22 >> 62)
      {
        swift_bridgeObjectRetain();
        v23 = sub_224F681D4();
        swift_bridgeObjectRelease_n();
        if (v23 < 0)
          goto LABEL_33;
      }
      else
      {
        v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRelease();
      }
      *(_QWORD *)(v0 + 80) = v23;
      if (v23)
      {
        v24 = 0;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v2 = *(void **)(v0 + 16);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v2, sel_codings);
  v4 = sub_224F67D6C();

  v5 = v1;
  if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
    || (v4 & 0x8000000000000000) != 0
    || (v4 & 0x4000000000000000) != 0)
  {
    sub_224ED6E98(v4);
  }
  v6 = *(_QWORD *)(v0 + 88);
  if (v6 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_37:
    __break(1u);
    return;
  }
  v7 = *(void **)(v0 + 96);
  v8 = *(void **)(v0 + 64);
  v9 = (v4 & 0xFFFFFFFFFFFFFF8) + 8 * v6;
  v10 = *(void **)(v9 + 32);
  *(_QWORD *)(v9 + 32) = v5;

  sub_224F67D84();
  v11 = objc_allocWithZone(MEMORY[0x24BDD3CD0]);
  v12 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v11, sel_initWithCodings_, v12, v4);

LABEL_31:
  (*(void (**)(id))(v0 + 8))(v13);
}

id sub_224ED1860()
{
  id result;
  void *v1;
  char v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  id v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *v12;

  sub_224E5451C(0, &qword_2557E2950);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_conditionRecordTypeForIdentifier_, *MEMORY[0x24BDD2AE8]);
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }
  v1 = result;
  sub_224E5451C(0, (unint64_t *)&qword_2557E1BA8);
  v2 = sub_224F67F28();

  if ((v2 & 1) == 0)
  {
    sub_224E5451C(0, &qword_2557E1F00);
    result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_vaccinationRecordTypeForIdentifier_, *MEMORY[0x24BDD3848]);
    if (result)
    {
      v4 = result;
      v5 = sub_224F67F28();

      if ((v5 & 1) != 0)
      {
        sub_224E54704(0, (unint64_t *)&qword_2557E2960, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v3 = swift_allocObject();
        *(_OWORD *)(v3 + 16) = xmmword_224F71230;
        v6 = (void *)objc_opt_self();
        *(_QWORD *)(v3 + 32) = objc_msgSend(v6, sel_CVXSystem);
        v7 = objc_msgSend(v6, sel_SNOMEDCodeSystem);
LABEL_12:
        *(_QWORD *)(v3 + 40) = v7;
        goto LABEL_13;
      }
      sub_224E5451C(0, &qword_2557E2958);
      result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestResultTypeForIdentifier_, *MEMORY[0x24BDD2BB0]);
      if (result)
      {
        v8 = result;
        v9 = sub_224F67F28();

        if ((v9 & 1) != 0)
        {
LABEL_11:
          sub_224E54704(0, (unint64_t *)&qword_2557E2960, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
          v3 = swift_allocObject();
          *(_OWORD *)(v3 + 16) = xmmword_224F71230;
          v12 = (void *)objc_opt_self();
          *(_QWORD *)(v3 + 32) = objc_msgSend(v12, sel_LOINCCodeSystem);
          v7 = objc_msgSend(v12, sel_SNOMEDCodeSystem);
          goto LABEL_12;
        }
        sub_224E5451C(0, (unint64_t *)&qword_2557E1CF8);
        result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestReportTypeForIdentifier_, *MEMORY[0x24BDD2B90]);
        if (result)
        {
          v10 = result;
          v11 = sub_224F67F28();

          if ((v11 & 1) == 0)
            return (id)MEMORY[0x24BEE4AF8];
          goto LABEL_11;
        }
LABEL_19:
        __break(1u);
        return result;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_224E54704(0, (unint64_t *)&qword_2557E2960, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_224F71240;
  *(_QWORD *)(v3 + 32) = objc_msgSend((id)objc_opt_self(), sel_SNOMEDCodeSystem);
LABEL_13:
  sub_224F67D84();
  return (id)v3;
}

uint64_t sub_224ED1BB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 160) = v1;
  return swift_task_switch();
}

uint64_t sub_224ED1BC8()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  void *v27;
  uint8_t *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v1 = objc_msgSend(*(id *)(v0 + 152), sel_displayString);
  if (!v1)
    goto LABEL_6;
  v2 = v1;
  v3 = sub_224F67B80();
  v5 = v4;

  swift_bridgeObjectRelease();
  v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v6 = v3 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    v7 = *(void **)(v0 + 152);
    v8 = v7;
  }
  else
  {
LABEL_6:
    v9 = objc_msgSend(*(id *)(v0 + 152), sel_code);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)(v0 + 152);
      v12 = *(_QWORD *)(v0 + 160);
      v13 = sub_224F67B80();
      v15 = v14;

      *(_QWORD *)(v0 + 168) = v13;
      *(_QWORD *)(v0 + 176) = v15;
      v16 = objc_msgSend((id)objc_opt_self(), sel_selectionForNodesWithCoding_, v11);
      *(_QWORD *)(v0 + 184) = v16;
      v17 = *(_QWORD *)(v12 + 16);
      v18 = swift_task_alloc();
      *(_QWORD *)(v0 + 192) = v18;
      *(_QWORD *)(v18 + 16) = v16;
      *(_QWORD *)(v18 + 24) = v17;
      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 200) = v19;
      sub_224E54704(0, (unint64_t *)&qword_2557E16D0, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
      *v19 = v0;
      v19[1] = sub_224ED1F18;
      return sub_224F683B4();
    }
    if (qword_2557E0128 != -1)
      swift_once();
    v21 = *(void **)(v0 + 152);
    v22 = sub_224F679B8();
    __swift_project_value_buffer(v22, (uint64_t)qword_2557FC958);
    v23 = v21;
    v24 = sub_224F679AC();
    v25 = sub_224F67EC8();
    v26 = os_log_type_enabled(v24, v25);
    v27 = *(void **)(v0 + 152);
    if (v26)
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v33 = v29;
      *(_DWORD *)v28 = 136315138;
      v30 = (id)HKSensitiveLogItem();
      sub_224F68078();
      swift_unknownObjectRelease();
      v31 = sub_224F67BC8();
      *(_QWORD *)(v0 + 136) = sub_224E76904(v31, v32, &v33);
      sub_224F68000();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_224DAC000, v24, v25, "CodeableConceptLookupService.codingWithAddedDisplayString() cannot look up display strings without a code for %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v29, -1, -1);
      MEMORY[0x22768EDE4](v28, -1, -1);
    }
    else
    {

    }
    v7 = 0;
  }
  return (*(uint64_t (**)(void *))(v0 + 8))(v7);
}

uint64_t sub_224ED1F18()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224ED1F74()
{
  uint64_t v0;
  uint64_t v1;
  uint32_t *p_ivar_base_size;
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  void *v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  char v70;
  char v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  id v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  NSObject *v81;
  os_log_type_t v82;
  _BOOL4 v83;
  id v84;
  uint8_t *v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  unint64_t v89;
  id v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  id v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  id v105;
  uint64_t v106;

  v1 = v0;

  p_ivar_base_size = &HealthRecordSpotlightSearchResult.ivar_base_size;
  if (*(_QWORD *)(v0 + 120))
  {
    v3 = *(void **)(v0 + 152);
    swift_bridgeObjectRelease();
    v4 = objc_msgSend(v3, sel_codingSystem);
    v5 = objc_msgSend(v3, sel_codingVersion);
    if (v5)
    {
      v6 = v5;
      sub_224F67B80();
      v8 = v7;

    }
    else
    {
      v8 = 0;
    }
    v23 = objc_msgSend(*(id *)(v0 + 152), sel_code);
    if (v23)
    {
      v24 = v23;
      sub_224F67B80();
      v26 = v25;

      if (v8)
        goto LABEL_11;
    }
    else
    {
      v26 = 0;
      if (v8)
      {
LABEL_11:
        v27 = (void *)sub_224F67B5C();
        swift_bridgeObjectRelease();
        if (v26)
        {
LABEL_12:
          v28 = (void *)sub_224F67B5C();
          swift_bridgeObjectRelease();
LABEL_16:
          v29 = (void *)sub_224F67B5C();
          swift_bridgeObjectRelease();
          v30 = objc_msgSend((id)objc_opt_self(), sel_medicalCodingWithSystem_codingVersion_code_displayString_, v4, v27, v28, v29);

          return (*(uint64_t (**)(id))(v0 + 8))(v30);
        }
LABEL_15:
        v28 = 0;
        goto LABEL_16;
      }
    }
    v27 = 0;
    if (v26)
      goto LABEL_12;
    goto LABEL_15;
  }
  if (qword_2557E0128 != -1)
    swift_once();
  v10 = (id *)(v0 + 152);
  v9 = *(void **)(v0 + 152);
  v11 = sub_224F679B8();
  __swift_project_value_buffer(v11, (uint64_t)qword_2557FC958);
  v12 = v9;
  v13 = sub_224F679AC();
  v14 = sub_224F67EC8();
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(void **)(v0 + 152);
  if (v15)
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v106 = v18;
    *(_DWORD *)v17 = 136315138;
    v19 = (id)HKSensitiveLogItem();
    sub_224F68078();
    swift_unknownObjectRelease();
    v20 = sub_224F67BC8();
    *(_QWORD *)(v0 + 144) = sub_224E76904(v20, v21, &v106);
    sub_224F68000();
    v1 = v0;
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_224DAC000, v13, v14, "CodeableConceptLookupService.codingWithAddedDisplayString() unable to find display string for %s in ontology, falling back to hardcoding", v17, 0xCu);
    swift_arrayDestroy();
    v22 = v18;
    p_ivar_base_size = (_DWORD *)(&HealthRecordSpotlightSearchResult + 8);
    MEMORY[0x22768EDE4](v22, -1, -1);
    MEMORY[0x22768EDE4](v17, -1, -1);
  }
  else
  {

  }
  v32 = objc_msgSend(*v10, *((SEL *)p_ivar_base_size + 209));
  v33 = (void *)objc_opt_self();
  v34 = objc_msgSend(v33, sel_CVXSystem);
  v35 = v34;
  if (!v32)
  {
    if (v34)
    {

      goto LABEL_34;
    }
    goto LABEL_24;
  }
  if (!v34)
  {

    goto LABEL_34;
  }
  sub_224E5451C(0, &qword_2557E27E8);
  v36 = v32;
  v37 = sub_224F67F28();

  if ((v37 & 1) != 0)
  {
LABEL_24:
    if (qword_2557E0130 != -1)
      swift_once();
    if (!*((_QWORD *)off_2557E2810 + 2))
      goto LABEL_34;
    v38 = *(_QWORD *)(v1 + 168);
    v39 = *(_QWORD *)(v1 + 176);
    swift_bridgeObjectRetain();
    sub_224E533E8(v38, v39);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    v41 = sub_224F679AC();
    v42 = sub_224F67EE0();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_224DAC000, v41, v42, "CodeableConceptLookupService.codingWithAddedDisplayString() unable to find display string in ontology, but found in hardcoded data. System: CVX", v43, 2u);
      MEMORY[0x22768EDE4](v43, -1, -1);
    }
    v44 = *v10;

    v45 = objc_msgSend(v44, *((SEL *)p_ivar_base_size + 209));
    v46 = objc_msgSend(v44, sel_codingVersion);
    if (v46)
    {
      v47 = v46;
      sub_224F67B80();
      v49 = v48;

    }
    else
    {
      v49 = 0;
    }
    v90 = objc_msgSend(*v10, sel_code);
    if (v90)
    {
      v91 = v90;
      sub_224F67B80();
      v93 = v92;

      if (v49)
        goto LABEL_72;
    }
    else
    {
      v93 = 0;
      if (v49)
      {
LABEL_72:
        v94 = (void *)sub_224F67B5C();
        swift_bridgeObjectRelease();
        if (v93)
        {
LABEL_85:
          v95 = (void *)sub_224F67B5C();
          swift_bridgeObjectRelease();
          goto LABEL_96;
        }
LABEL_76:
        v95 = 0;
LABEL_96:
        v104 = (void *)sub_224F67B5C();
        swift_bridgeObjectRelease();
        v105 = objc_msgSend((id)objc_opt_self(), sel_medicalCodingWithSystem_codingVersion_code_displayString_, v45, v94, v95, v104);

        return (*(uint64_t (**)(id))(v1 + 8))(v105);
      }
    }
    v94 = 0;
    if (v93)
      goto LABEL_85;
    goto LABEL_76;
  }
LABEL_34:
  v50 = objc_msgSend(*v10, *((SEL *)p_ivar_base_size + 209));
  v51 = objc_msgSend(v33, sel_LOINCCodeSystem);
  v52 = v51;
  if (!v50)
  {
    if (v51)
    {

      goto LABEL_50;
    }
LABEL_40:
    if (qword_2557E0138 != -1)
      swift_once();
    if (*((_QWORD *)off_2557E2818 + 2))
    {
      v55 = *(_QWORD *)(v1 + 168);
      v56 = *(_QWORD *)(v1 + 176);
      swift_bridgeObjectRetain();
      sub_224E533E8(v55, v56);
      if ((v57 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease_n();
        v58 = sub_224F679AC();
        v59 = sub_224F67EE0();
        if (os_log_type_enabled(v58, v59))
        {
          v60 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v60 = 0;
          _os_log_impl(&dword_224DAC000, v58, v59, "CodeableConceptLookupService.codingWithAddedDisplayString() unable to find display string in ontology, but found in hardcoded data. System: LOINC", v60, 2u);
          MEMORY[0x22768EDE4](v60, -1, -1);
        }
        v61 = *v10;

        v45 = objc_msgSend(v61, *((SEL *)p_ivar_base_size + 209));
        v62 = objc_msgSend(v61, sel_codingVersion);
        if (v62)
        {
          v63 = v62;
          sub_224F67B80();
          v65 = v64;

        }
        else
        {
          v65 = 0;
        }
        v96 = objc_msgSend(*v10, sel_code);
        if (v96)
        {
          v97 = v96;
          sub_224F67B80();
          v99 = v98;

        }
        else
        {
          v99 = 0;
        }
        if (v65)
        {
          v94 = (void *)sub_224F67B5C();
          swift_bridgeObjectRelease();
        }
        else
        {
          v94 = 0;
        }
        if (!v99)
        {
          v95 = 0;
          goto LABEL_96;
        }
        goto LABEL_85;
      }
      swift_bridgeObjectRelease();
    }
    goto LABEL_50;
  }
  if (!v51)
  {

    goto LABEL_50;
  }
  sub_224E5451C(0, &qword_2557E27E8);
  v53 = v50;
  v54 = sub_224F67F28();

  if ((v54 & 1) != 0)
    goto LABEL_40;
LABEL_50:
  v66 = objc_msgSend(*v10, *((SEL *)p_ivar_base_size + 209));
  v67 = objc_msgSend(v33, sel_SNOMEDCodeSystem);
  v68 = v67;
  if (v66)
  {
    if (v67)
    {
      sub_224E5451C(0, &qword_2557E27E8);
      v69 = v66;
      v70 = sub_224F67F28();

      if ((v70 & 1) == 0)
        goto LABEL_65;
LABEL_56:
      if (qword_2557E0140 != -1)
        swift_once();
      if (!*((_QWORD *)off_2557E2820 + 2))
        goto LABEL_65;
      sub_224E533E8(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176));
      if ((v71 & 1) == 0)
        goto LABEL_65;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v72 = sub_224F679AC();
      v73 = sub_224F67EE0();
      if (os_log_type_enabled(v72, v73))
      {
        v74 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v74 = 0;
        _os_log_impl(&dword_224DAC000, v72, v73, "CodeableConceptLookupService.codingWithAddedDisplayString() unable to find display string in ontology, but found in hardcoded data. System: SNOMED", v74, 2u);
        MEMORY[0x22768EDE4](v74, -1, -1);
      }
      v75 = *v10;

      v45 = objc_msgSend(v75, *((SEL *)p_ivar_base_size + 209));
      v76 = objc_msgSend(v75, sel_codingVersion);
      if (v76)
      {
        v77 = v76;
        sub_224F67B80();
        v79 = v78;

      }
      else
      {
        v79 = 0;
      }
      v100 = objc_msgSend(*v10, sel_code);
      if (v100)
      {
        v101 = v100;
        sub_224F67B80();
        v103 = v102;

      }
      else
      {
        v103 = 0;
      }
      if (v79)
      {
        v94 = (void *)sub_224F67B5C();
        swift_bridgeObjectRelease();
      }
      else
      {
        v94 = 0;
      }
      if (!v103)
      {
        v95 = 0;
        goto LABEL_96;
      }
      goto LABEL_85;
    }

  }
  else
  {
    if (!v67)
      goto LABEL_56;

  }
LABEL_65:
  swift_bridgeObjectRelease();
  v80 = *v10;
  v81 = sub_224F679AC();
  v82 = sub_224F67EC8();
  v83 = os_log_type_enabled(v81, v82);
  v84 = *v10;
  if (v83)
  {
    v85 = (uint8_t *)swift_slowAlloc();
    v86 = swift_slowAlloc();
    v106 = v86;
    *(_DWORD *)v85 = 136315138;
    v87 = (id)HKSensitiveLogItem();
    sub_224F68078();
    swift_unknownObjectRelease();
    v88 = sub_224F67BC8();
    *(_QWORD *)(v1 + 128) = sub_224E76904(v88, v89, &v106);
    sub_224F68000();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_224DAC000, v81, v82, "CodeableConceptLookupService.codingWithAddedDisplayString() unable to find display string for %s", v85, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22768EDE4](v86, -1, -1);
    MEMORY[0x22768EDE4](v85, -1, -1);
  }
  else
  {

  }
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
}

void sub_224ED2C50(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  _QWORD aBlock[6];

  sub_224ED7784();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v12 = objc_allocWithZone(MEMORY[0x24BDD3A38]);
  aBlock[4] = sub_224ED7874;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_224ED6DF4;
  aBlock[3] = &block_descriptor;
  v13 = _Block_copy(aBlock);
  v14 = a3;
  v15 = objc_msgSend(v12, sel_initWithConceptSelection_resultsHandler_, a2, v13);
  _Block_release(v13);
  swift_release();
  objc_msgSend(v14, sel_executeQuery_, v15);

}

void sub_224ED2DBC(uint64_t a1, void *a2, int a3, void *a4, id a5)
{
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;

  objc_msgSend(a5, sel_stopQuery_, a1);
  if (a4)
  {
    v7 = a4;
    if (qword_2557E0128 != -1)
      swift_once();
    v8 = sub_224F679B8();
    __swift_project_value_buffer(v8, (uint64_t)qword_2557FC958);
    v9 = a4;
    v10 = a4;
    v11 = sub_224F679AC();
    v12 = sub_224F67ED4();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v23 = v14;
      *(_DWORD *)v13 = 136315138;
      v15 = a4;
      v16 = a4;
      sub_224E57260();
      sub_224F6848C();
      v17 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v18 = sub_224F67BC8();
      v20 = v19;

      sub_224E76904(v18, v20, &v23);
      sub_224F68000();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_224DAC000, v11, v12, "CodeableConceptLookupService.cvxDisplayString(for:) failed: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v14, -1, -1);
      MEMORY[0x22768EDE4](v13, -1, -1);
    }
    else
    {

    }
    sub_224ED7784();
    sub_224F67DE4();

  }
  else
  {
    if (a2)
    {
      v21 = objc_msgSend(a2, sel_localizedPreferredName);
      if (v21)
      {
        v22 = v21;
        sub_224F67B80();

      }
    }
    sub_224ED7784();
    sub_224F67DE4();
  }
}

uint64_t sub_224ED3090(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;

  *(_QWORD *)(v7 + 232) = a6;
  *(_QWORD *)(v7 + 240) = v6;
  *(_QWORD *)(v7 + 216) = a4;
  *(_QWORD *)(v7 + 224) = a5;
  *(_QWORD *)(v7 + 200) = a2;
  *(_QWORD *)(v7 + 208) = a3;
  *(_BYTE *)(v7 + 321) = a1;
  v12 = swift_task_alloc();
  *(_QWORD *)(v7 + 248) = v12;
  *(_QWORD *)v12 = v7;
  *(_QWORD *)(v12 + 8) = sub_224ED3124;
  *(_QWORD *)(v12 + 48) = a6;
  *(_QWORD *)(v12 + 56) = v6;
  *(_QWORD *)(v12 + 32) = a2;
  *(_QWORD *)(v12 + 40) = a3;
  *(_BYTE *)(v12 + 168) = a1;
  return swift_task_switch();
}

uint64_t sub_224ED3124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[2] = v4;
  v5[3] = a1;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = a4;
  v5[32] = a1;
  v5[33] = a2;
  v5[34] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224ED3190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  char v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 264);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 224);
    *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 176) = MEMORY[0x24BEE4AF8];
    if (v2)
    {
      swift_bridgeObjectRetain();
      v3 = swift_task_alloc();
      *(_QWORD *)(v0 + 288) = v3;
      *(_QWORD *)v3 = v0;
      *(_QWORD *)(v3 + 8) = sub_224ED380C;
      v4 = *(_QWORD *)(v0 + 240);
      v5 = *(_QWORD *)(v0 + 216);
      *(_QWORD *)(v3 + 48) = *(_QWORD *)(v0 + 232);
      *(_QWORD *)(v3 + 56) = v4;
      *(_QWORD *)(v3 + 32) = v5;
      *(_QWORD *)(v3 + 40) = v2;
      *(_BYTE *)(v3 + 168) = 0;
      return swift_task_switch();
    }
    v20 = sub_224ED78F4(*(_QWORD *)(v0 + 256), v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v22 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v23 = (void *)objc_opt_self();
    v24 = objc_msgSend(v23, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v20, 0, v21, v22);

    MEMORY[0x22768DE24]();
    if (*(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_224F67D90();
    v25 = *(_BYTE *)(v0 + 321);
    sub_224F67D9C();
    sub_224F67D84();
    sub_224ED7A5C(v25);
    if (v26)
    {
      v27 = v26;
      v28 = objc_msgSend((id)objc_opt_self(), sel_textSystem);
      swift_bridgeObjectRetain();
      v29 = (void *)sub_224F67B5C();
      swift_bridgeObjectRelease();
      v30 = (void *)sub_224F67B5C();
      swift_bridgeObjectRelease();
      v31 = objc_msgSend(v23, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v28, 0, v29, v30);

      MEMORY[0x22768DE24]();
      if (*(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        sub_224F67D90();
      sub_224F67D9C();
      sub_224F67D84();
      v32 = v27;
      MEMORY[0x22768DE24]();
      if (*(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        sub_224F67D90();
      sub_224F67D9C();
      sub_224F67D84();

    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v36 = objc_allocWithZone(MEMORY[0x24BDD3CD0]);
    sub_224E5451C(0, (unint64_t *)&qword_2557E1648);
    v34 = (id)sub_224F67D60();
    swift_bridgeObjectRelease();
    v35 = objc_msgSend(v36, sel_initWithCodings_, v34);
  }
  else
  {
    if (qword_2557E0128 != -1)
      swift_once();
    v7 = sub_224F679B8();
    __swift_project_value_buffer(v7, (uint64_t)qword_2557FC958);
    swift_bridgeObjectRetain_n();
    v8 = sub_224F679AC();
    v9 = sub_224F67EBC();
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 208);
    if (v10)
    {
      v12 = *(_QWORD *)(v0 + 200);
      v38 = *(_BYTE *)(v0 + 321);
      v13 = swift_slowAlloc();
      v39 = swift_slowAlloc();
      v40 = v39;
      *(_DWORD *)v13 = 136315394;
      *(_QWORD *)(v0 + 160) = v12;
      *(_QWORD *)(v0 + 168) = v11;
      swift_bridgeObjectRetain();
      sub_224F6848C();
      v14 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v15 = sub_224F67BC8();
      *(_QWORD *)(v0 + 184) = sub_224E76904(v15, v16, &v40);
      sub_224F68000();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2080;
      *(_BYTE *)(v0 + 320) = v38;
      sub_224F6848C();
      v17 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v18 = sub_224F67BC8();
      *(_QWORD *)(v0 + 192) = sub_224E76904(v18, v19, &v40);
      sub_224F68000();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_224DAC000, v8, v9, "medicalCodingForEUDCC(valueSet:code:) code \"%s\" not found in valueSet: %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v39, -1, -1);
      MEMORY[0x22768EDE4](v13, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_bridgeObjectRetain();
    v33 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v34 = objc_msgSend((id)objc_opt_self(), sel_medicalCodingWithSystem_codingVersion_code_displayString_, 0, 0, v33, 0);

    v35 = objc_msgSend((id)objc_opt_self(), sel_collectionWithCoding_, v34);
  }
  v37 = v35;

  return (*(uint64_t (**)(id))(v0 + 8))(v37);
}

uint64_t sub_224ED380C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[7] = v4;
  v5[8] = a1;
  v5[9] = a2;
  v5[10] = a3;
  v5[11] = a4;
  v5[37] = a1;
  v5[38] = a2;
  v5[39] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224ED3878()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  char v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v27;

  v1 = *(_QWORD *)(v0 + 304);
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_224F67C94();
    sub_224F67C94();
    v2 = objc_msgSend((id)objc_opt_self(), sel_textSystem);
    v3 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v27 = (id)objc_opt_self();
    v4 = objc_msgSend(v27, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v2, 0, 0, v3);

    MEMORY[0x22768DE24]();
    if (*(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_224F67D90();
    v5 = *(_QWORD *)(v0 + 296);
    sub_224F67D9C();
    sub_224F67D84();
    v6 = sub_224ED78F4(v5, v1);
    swift_bridgeObjectRelease();
    v7 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v8 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v27, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v6, 0, v7, v8);

    MEMORY[0x22768DE24]();
    if (*(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v10 = sub_224ED78F4(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v12 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v13 = (void *)objc_opt_self();
  v14 = objc_msgSend(v13, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v10, 0, v11, v12);

  MEMORY[0x22768DE24]();
  if (*(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    sub_224F67D90();
  v15 = *(_BYTE *)(v0 + 321);
  sub_224F67D9C();
  sub_224F67D84();
  sub_224ED7A5C(v15);
  if (v16)
  {
    v17 = v16;
    v18 = objc_msgSend((id)objc_opt_self(), sel_textSystem);
    swift_bridgeObjectRetain();
    v19 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v20 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v21 = objc_msgSend(v13, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v18, 0, v19, v20);

    MEMORY[0x22768DE24]();
    if (*(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();
    v22 = v17;
    MEMORY[0x22768DE24]();
    if (*(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();

  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v23 = objc_allocWithZone(MEMORY[0x24BDD3CD0]);
  sub_224E5451C(0, (unint64_t *)&qword_2557E1648);
  v24 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(v23, sel_initWithCodings_, v24);

  return (*(uint64_t (**)(id))(v0 + 8))(v25);
}

uint64_t sub_224ED3D74(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 48) = a4;
  *(_QWORD *)(v5 + 56) = v4;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  *(_BYTE *)(v5 + 168) = a1;
  return swift_task_switch();
}

uint64_t sub_224ED3D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  char v21;
  void *v22;
  id v23;
  void *v24;

  if ((*(_BYTE *)(v0 + 48) & 4) != 0)
  {
    v21 = *(_BYTE *)(v0 + 168);
  }
  else
  {
    v1 = *(char *)(v0 + 168);
    v2 = (uint64_t)*(&off_24ED026D8 + v1);
    *(_QWORD *)(v0 + 64) = v2;
    v3 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v0 + 72) = v3;
    if (v3)
    {
      v4 = *(_QWORD *)(v0 + 56);
      *(_QWORD *)(v0 + 80) = objc_opt_self();
      *(_QWORD *)(v0 + 88) = objc_opt_self();
      *(_QWORD *)(v0 + 96) = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v0 + 104) = 0;
      v5 = *(_QWORD *)(v0 + 64);
      v6 = *(_QWORD *)(v5 + 32);
      *(_QWORD *)(v0 + 112) = v6;
      v7 = *(_QWORD *)(v5 + 40);
      *(_QWORD *)(v0 + 120) = v7;
      swift_bridgeObjectRetain();
      if (v6 == 0xD000000000000016 && v7 == 0x8000000224F7F240 || (sub_224F683CC() & 1) != 0)
      {
        v8 = (void *)objc_opt_self();
        swift_bridgeObjectRetain();
        v9 = objc_msgSend(v8, sel_SNOMEDCodeSystem);
      }
      else
      {
        if ((v6 != 0xD000000000000010 || v7 != 0x8000000224F7F2A0) && (sub_224F683CC() & 1) == 0)
        {
          v23 = objc_allocWithZone(MEMORY[0x24BDD3CD8]);
          swift_bridgeObjectRetain_n();
          v24 = (void *)sub_224F67B5C();
          swift_bridgeObjectRelease();
          v10 = objc_msgSend(v23, sel_initWithIdentifier_name_OID_type_synonyms_hasDisplayStrings_, v24, 0, 0, 1, 0, 0);

          goto LABEL_8;
        }
        v22 = (void *)objc_opt_self();
        swift_bridgeObjectRetain();
        v9 = objc_msgSend(v22, sel_LOINCCodeSystem);
      }
      v10 = v9;
LABEL_8:
      *(_QWORD *)(v0 + 128) = v10;
      v11 = *(void **)(v0 + 88);
      v12 = *(_QWORD *)(v0 + 96);
      v13 = *(void **)(v0 + 80);
      v14 = v10;
      swift_bridgeObjectRetain();
      v15 = (void *)sub_224F67B5C();
      swift_bridgeObjectRelease();
      v16 = objc_msgSend(v13, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v14, 0, v15, 0);
      *(_QWORD *)(v0 + 136) = v16;

      v17 = objc_msgSend(v11, sel_selectionForNodesWithCoding_, v16);
      *(_QWORD *)(v0 + 144) = v17;
      v18 = swift_task_alloc();
      *(_QWORD *)(v0 + 152) = v18;
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = v12;
      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 160) = v19;
      sub_224E54704(0, (unint64_t *)&qword_2557E16D0, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
      *v19 = v0;
      v19[1] = sub_224ED40F8;
      return sub_224F683B4();
    }
    v21 = v1;
  }
  sub_224ED6F00(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224ED40F8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224ED4154()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  id v30;
  void *v31;

  v1 = *(void **)(v0 + 136);
  v2 = *(void **)(v0 + 128);

  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);

  v5 = *(_QWORD *)(v0 + 120);
  if (v4)
  {
    swift_bridgeObjectRelease();
    v6 = *(_QWORD *)(v0 + 112);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v6, v5, v3, v4);
  }
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRelease();
  if (v7 + 1 == v8)
  {
    swift_bridgeObjectRelease();
    sub_224ED6F00(*(_BYTE *)(v0 + 168));
    v5 = v9;
    v3 = v10;
    v4 = v11;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v6, v5, v3, v4);
  }
  v13 = *(_QWORD *)(v0 + 104) + 1;
  *(_QWORD *)(v0 + 104) = v13;
  v14 = *(_QWORD *)(v0 + 64) + 16 * v13;
  v15 = *(_QWORD *)(v14 + 32);
  *(_QWORD *)(v0 + 112) = v15;
  v16 = *(_QWORD *)(v14 + 40);
  *(_QWORD *)(v0 + 120) = v16;
  if (v15 == 0xD000000000000016 && v16 == 0x8000000224F7F240 || (sub_224F683CC() & 1) != 0)
  {
    v17 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v18 = objc_msgSend(v17, sel_SNOMEDCodeSystem);
  }
  else
  {
    if ((v15 != 0xD000000000000010 || v16 != 0x8000000224F7F2A0) && (sub_224F683CC() & 1) == 0)
    {
      v30 = objc_allocWithZone(MEMORY[0x24BDD3CD8]);
      swift_bridgeObjectRetain_n();
      v31 = (void *)sub_224F67B5C();
      swift_bridgeObjectRelease();
      v19 = objc_msgSend(v30, sel_initWithIdentifier_name_OID_type_synonyms_hasDisplayStrings_, v31, 0, 0, 1, 0, 0);

      goto LABEL_11;
    }
    v29 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v18 = objc_msgSend(v29, sel_LOINCCodeSystem);
  }
  v19 = v18;
LABEL_11:
  *(_QWORD *)(v0 + 128) = v19;
  v20 = *(void **)(v0 + 88);
  v21 = *(_QWORD *)(v0 + 96);
  v22 = *(void **)(v0 + 80);
  v23 = v19;
  swift_bridgeObjectRetain();
  v24 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(v22, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v23, 0, v24, 0);
  *(_QWORD *)(v0 + 136) = v25;

  v26 = objc_msgSend(v20, sel_selectionForNodesWithCoding_, v25);
  *(_QWORD *)(v0 + 144) = v26;
  v27 = swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v27;
  *(_QWORD *)(v27 + 16) = v26;
  *(_QWORD *)(v27 + 24) = v21;
  v28 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v28;
  sub_224E54704(0, (unint64_t *)&qword_2557E16D0, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  *v28 = v0;
  v28[1] = sub_224ED40F8;
  return sub_224F683B4();
}

uint64_t sub_224ED44CC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 192) = a7;
  *(_QWORD *)(v8 + 200) = v7;
  *(_QWORD *)(v8 + 176) = a5;
  *(_QWORD *)(v8 + 184) = a6;
  *(_QWORD *)(v8 + 160) = a3;
  *(_QWORD *)(v8 + 168) = a4;
  *(_BYTE *)(v8 + 341) = a2;
  *(_QWORD *)(v8 + 152) = a1;
  v13 = type metadata accessor for Coding();
  *(_QWORD *)(v8 + 208) = v13;
  *(_QWORD *)(v8 + 216) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 224) = swift_task_alloc();
  *(_QWORD *)(v8 + 232) = swift_task_alloc();
  *(_QWORD *)(v8 + 240) = swift_task_alloc();
  v14 = swift_task_alloc();
  *(_QWORD *)(v8 + 248) = v14;
  *(_QWORD *)v14 = v8;
  *(_QWORD *)(v14 + 8) = sub_224ED45A8;
  *(_QWORD *)(v14 + 48) = a7;
  *(_QWORD *)(v14 + 56) = v7;
  *(_QWORD *)(v14 + 32) = a3;
  *(_QWORD *)(v14 + 40) = a4;
  *(_BYTE *)(v14 + 168) = a2;
  return swift_task_switch();
}

uint64_t sub_224ED45A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[2] = v4;
  v5[3] = a1;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = a4;
  v5[32] = a2;
  v5[33] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224ED4608()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;

  if (*(_QWORD *)(v0 + 256))
  {
    v1 = *(_QWORD *)(v0 + 264);
    v2 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 240);
    v4 = *(int **)(v0 + 208);
    v6 = *(_QWORD *)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 168);
    *(_QWORD *)(v0 + 272) = v2;
    sub_224F675B0();
    swift_bridgeObjectRelease();
    v7 = (_QWORD *)(v3 + v4[5]);
    *v7 = v6;
    v7[1] = v5;
    v8 = (_QWORD *)(v3 + v4[6]);
    *v8 = v1;
    v8[1] = v2;
    v9 = (_QWORD *)(v3 + v4[7]);
    *v9 = 0;
    v9[1] = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = sub_224E56EC8(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v12 = *(_QWORD *)(v10 + 16);
    v11 = *(_QWORD *)(v10 + 24);
    if (v12 >= v11 >> 1)
      v10 = sub_224E56EC8(v11 > 1, v12 + 1, 1, v10);
    *(_QWORD *)(v0 + 280) = v10;
    v13 = *(_QWORD *)(v0 + 240);
    v14 = *(_QWORD *)(v0 + 216);
    v15 = *(_QWORD *)(v0 + 184);
    *(_QWORD *)(v10 + 16) = v12 + 1;
    v16 = *(_DWORD *)(v14 + 80);
    *(_DWORD *)(v0 + 336) = v16;
    v17 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)(v0 + 288) = v17;
    sub_224E79250(v13, v10 + ((v16 + 32) & ~(unint64_t)v16) + v17 * v12);
    if (v15)
    {
      v18 = *(_QWORD *)(v0 + 184);
      swift_bridgeObjectRetain();
      v19 = swift_task_alloc();
      *(_QWORD *)(v0 + 296) = v19;
      *(_QWORD *)v19 = v0;
      *(_QWORD *)(v19 + 8) = sub_224ED4B0C;
      v20 = *(_QWORD *)(v0 + 200);
      v21 = *(_QWORD *)(v0 + 176);
      *(_QWORD *)(v19 + 48) = *(_QWORD *)(v0 + 192);
      *(_QWORD *)(v19 + 56) = v20;
      *(_QWORD *)(v19 + 32) = v21;
      *(_QWORD *)(v19 + 40) = v18;
      *(_BYTE *)(v19 + 168) = 0;
      return swift_task_switch();
    }
    swift_bridgeObjectRelease();
    v36 = *(_QWORD **)(v0 + 152);
    *v36 = 0;
    v36[1] = 0;
    v36[2] = v10;
  }
  else
  {
    if (qword_2557E0128 != -1)
      swift_once();
    v23 = sub_224F679B8();
    __swift_project_value_buffer(v23, (uint64_t)qword_2557FC958);
    swift_bridgeObjectRetain_n();
    v24 = sub_224F679AC();
    v25 = sub_224F67EBC();
    v26 = os_log_type_enabled(v24, v25);
    v27 = *(_QWORD *)(v0 + 168);
    if (v26)
    {
      v28 = *(_QWORD *)(v0 + 160);
      v49 = *(_BYTE *)(v0 + 341);
      v29 = swift_slowAlloc();
      v50 = swift_slowAlloc();
      v51 = v50;
      *(_DWORD *)v29 = 136315394;
      *(_QWORD *)(v0 + 120) = v28;
      *(_QWORD *)(v0 + 128) = v27;
      swift_bridgeObjectRetain();
      sub_224F6848C();
      v30 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v31 = sub_224F67BC8();
      *(_QWORD *)(v0 + 136) = sub_224E76904(v31, v32, &v51);
      sub_224F68000();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v29 + 12) = 2080;
      *(_BYTE *)(v0 + 340) = v49;
      sub_224F6848C();
      v33 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v34 = sub_224F67BC8();
      *(_QWORD *)(v0 + 144) = sub_224E76904(v34, v35, &v51);
      sub_224F68000();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_224DAC000, v24, v25, "codeableConceptForEUDCC(valueSet:code:) code \"%s\" not found in valueSet: %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v50, -1, -1);
      MEMORY[0x22768EDE4](v29, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v38 = *(int **)(v0 + 208);
    v37 = *(_QWORD *)(v0 + 216);
    v40 = *(_QWORD *)(v0 + 160);
    v39 = *(_QWORD *)(v0 + 168);
    v41 = *(_QWORD **)(v0 + 152);
    sub_224E585B8(0, &qword_2557E15B0, (void (*)(uint64_t))type metadata accessor for Coding);
    v42 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_224F6D8B0;
    v44 = v43 + v42;
    v45 = sub_224F675D4();
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 1, 1, v45);
    v46 = (_QWORD *)(v44 + v38[5]);
    *v46 = v40;
    v46[1] = v39;
    v47 = (_QWORD *)(v44 + v38[6]);
    *v47 = 0;
    v47[1] = 0;
    v48 = (_QWORD *)(v44 + v38[7]);
    *v48 = 0;
    v48[1] = 0;
    *v41 = 0;
    v41[1] = 0;
    v41[2] = v43;
    swift_bridgeObjectRetain();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224ED4B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[38] = a1;
  v5[39] = a2;
  v5[40] = a3;
  v5[41] = a4;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224ED4B6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (*(_QWORD *)(v0 + 312))
  {
    v1 = *(_QWORD *)(v0 + 280);
    v2 = *(_QWORD *)(v0 + 232);
    v3 = *(int **)(v0 + 208);
    v31 = *(_QWORD *)(v0 + 320);
    v32 = *(_QWORD *)(v0 + 328);
    swift_bridgeObjectRetain();
    sub_224F67C94();
    sub_224F67C94();
    swift_bridgeObjectRelease();
    sub_224F67B80();
    sub_224F675B0();
    swift_bridgeObjectRelease();
    v4 = (_QWORD *)(v2 + v3[5]);
    *v4 = 0;
    v4[1] = 0;
    v5 = (_QWORD *)(v2 + v3[6]);
    *v5 = v31;
    v5[1] = v32;
    v6 = (_QWORD *)(v2 + v3[7]);
    *v6 = 0;
    v6[1] = 0;
    v8 = *(_QWORD *)(v1 + 16);
    v7 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain();
    v9 = *(_QWORD *)(v0 + 280);
    if (v8 >= v7 >> 1)
      v9 = sub_224E56EC8(v7 > 1, v8 + 1, 1, *(_QWORD *)(v0 + 280));
    v29 = *(_QWORD *)(v0 + 320);
    v30 = *(_QWORD *)(v0 + 328);
    v10 = *(_QWORD *)(v0 + 288);
    v11 = *(unsigned __int8 *)(v0 + 336);
    v13 = *(_QWORD *)(v0 + 224);
    v12 = *(_QWORD *)(v0 + 232);
    v14 = *(int **)(v0 + 208);
    v16 = *(_QWORD *)(v0 + 176);
    v15 = *(_QWORD *)(v0 + 184);
    *(_QWORD *)(v9 + 16) = v8 + 1;
    sub_224E79250(v12, v9 + ((v11 + 32) & ~v11) + v10 * v8);
    sub_224F675B0();
    swift_bridgeObjectRelease();
    v17 = (_QWORD *)(v13 + v14[5]);
    *v17 = v16;
    v17[1] = v15;
    v18 = (_QWORD *)(v13 + v14[6]);
    *v18 = v29;
    v18[1] = v30;
    v19 = (_QWORD *)(v13 + v14[7]);
    *v19 = 0;
    v19[1] = 0;
    v21 = *(_QWORD *)(v9 + 16);
    v20 = *(_QWORD *)(v9 + 24);
    if (v21 >= v20 >> 1)
      v9 = sub_224E56EC8(v20 > 1, v21 + 1, 1, v9);
    v22 = *(_QWORD *)(v0 + 288);
    v23 = *(unsigned __int8 *)(v0 + 336);
    v24 = *(_QWORD *)(v0 + 224);
    *(_QWORD *)(v9 + 16) = v21 + 1;
    sub_224E79250(v24, v9 + ((v23 + 32) & ~v23) + v22 * v21);
    v26 = v32;
    v25 = v31;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = 0;
    v26 = 0;
    v9 = *(_QWORD *)(v0 + 280);
  }
  v27 = *(_QWORD **)(v0 + 152);
  *v27 = v25;
  v27[1] = v26;
  v27[2] = v9;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224ED4DB8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;

  *(_QWORD *)(v6 + 160) = a3;
  *(_QWORD *)(v6 + 168) = a4;
  *(_BYTE *)(v6 + 193) = a2;
  *(_QWORD *)(v6 + 152) = a1;
  v11 = swift_task_alloc();
  *(_QWORD *)(v6 + 176) = v11;
  *(_QWORD *)v11 = v6;
  *(_QWORD *)(v11 + 8) = sub_224ED4E48;
  *(_QWORD *)(v11 + 48) = a5;
  *(_QWORD *)(v11 + 56) = v5;
  *(_QWORD *)(v11 + 32) = a3;
  *(_QWORD *)(v11 + 40) = a4;
  *(_BYTE *)(v11 + 168) = a2;
  return swift_task_switch();
}

uint64_t sub_224ED4E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[2] = v4;
  v5[3] = a1;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = a4;
  v5[23] = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224ED4EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;

  if (*(_QWORD *)(v0 + 184))
  {
    v2 = *(_QWORD *)(v0 + 40);
    v1 = *(_QWORD *)(v0 + 48);
    v4 = *(_QWORD *)(v0 + 160);
    v3 = *(_QWORD *)(v0 + 168);
    v5 = *(_QWORD *)(v0 + 152);
    v6 = v5 + *(int *)(type metadata accessor for Reference() + 24);
    v7 = type metadata accessor for Identifier();
    sub_224F675B0();
    swift_bridgeObjectRelease();
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_OWORD *)(v6 + 24) = xmmword_224F71250;
    v8 = (_QWORD *)(v6 + *(int *)(v7 + 28));
    *v8 = v4;
    v8[1] = v3;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  }
  else
  {
    if (qword_2557E0128 != -1)
      swift_once();
    v9 = sub_224F679B8();
    __swift_project_value_buffer(v9, (uint64_t)qword_2557FC958);
    swift_bridgeObjectRetain_n();
    v10 = sub_224F679AC();
    v11 = sub_224F67EBC();
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(_QWORD *)(v0 + 168);
    if (v12)
    {
      v14 = *(_QWORD *)(v0 + 160);
      v27 = *(_BYTE *)(v0 + 193);
      v15 = swift_slowAlloc();
      v28 = swift_slowAlloc();
      v30 = v28;
      *(_DWORD *)v15 = 136315394;
      *(_QWORD *)(v0 + 120) = v14;
      *(_QWORD *)(v0 + 128) = v13;
      swift_bridgeObjectRetain();
      sub_224F6848C();
      v16 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v17 = sub_224F67BC8();
      *(_QWORD *)(v0 + 136) = sub_224E76904(v17, v18, &v30);
      sub_224F68000();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 12) = 2080;
      *(_BYTE *)(v0 + 192) = v27;
      sub_224F6848C();
      v19 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v20 = sub_224F67BC8();
      *(_QWORD *)(v0 + 144) = sub_224E76904(v20, v21, &v30);
      sub_224F68000();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_224DAC000, v10, v11, "referenceForEUDCC(valueSet:code:) code \"%s\" not found in valueSet: %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v28, -1, -1);
      MEMORY[0x22768EDE4](v15, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v1 = *(_QWORD *)(v0 + 168);
    v22 = *(_QWORD *)(v0 + 152);
    v23 = v22 + *(int *)(type metadata accessor for Reference() + 24);
    v24 = type metadata accessor for Identifier();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
    v2 = *(_QWORD *)(v0 + 160);
  }
  v25 = *(_QWORD **)(v0 + 152);
  *v25 = v2;
  v25[1] = v1;
  v25[2] = 0;
  v25[3] = 0;
  v29 = *(uint64_t (**)(void))(v0 + 8);
  swift_bridgeObjectRetain();
  return v29();
}

uint64_t sub_224ED5248()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CodeableConceptLookupService()
{
  return objc_opt_self();
}

void *sub_224ED528C()
{
  void *result;

  result = (void *)sub_224E52024((uint64_t)&unk_24ECF6178);
  off_2557E2810 = result;
  return result;
}

void *sub_224ED52B0()
{
  void *result;

  result = (void *)sub_224E52024((uint64_t)&unk_24ECF6698);
  off_2557E2818 = result;
  return result;
}

void *sub_224ED52D4()
{
  void *result;

  result = (void *)sub_224E52024((uint64_t)&unk_24ECF7BB8);
  off_2557E2820 = result;
  return result;
}

uint64_t sub_224ED52F8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_224ED5338 + 4 * byte_224F712B0[a1]))(0xD000000000000015, 0x8000000224F812A0);
}

uint64_t sub_224ED5338()
{
  return 0x65545F4343445545;
}

uint64_t sub_224ED5388()
{
  uint64_t v0;

  return v0 + 4;
}

void sub_224ED53C0(char *a1)
{
  sub_224F16C78(*a1);
}

void sub_224ED53CC()
{
  char *v0;

  sub_224F18B38(0, *v0);
}

void sub_224ED53D8(uint64_t a1)
{
  char *v1;

  sub_224F18A50(a1, *v1);
}

void sub_224ED53E0(uint64_t a1)
{
  char *v1;

  sub_224F18B38(a1, *v1);
}

uint64_t sub_224ED53E8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_224ED8094();
  *a1 = result;
  return result;
}

uint64_t sub_224ED5414@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_224ED52F8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void *sub_224ED543C()
{
  void *result;

  result = (void *)sub_224E52024((uint64_t)&unk_24ECFCA78);
  off_2557E2828 = result;
  return result;
}

void *sub_224ED5460()
{
  uint64_t inited;
  void *result;

  sub_224E585B8(0, &qword_2557E2918, (void (*)(uint64_t))sub_224ED76C0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_224F6D8B0;
  *(_QWORD *)(inited + 32) = 0x3030393335303438;
  *(_QWORD *)(inited + 40) = 0xE900000000000036;
  *(_QWORD *)(inited + 48) = sub_224E52024((uint64_t)&unk_24ECF8C98);
  result = (void *)sub_224E52158(inited);
  off_2557E2830 = result;
  return result;
}

void *sub_224ED54EC()
{
  uint64_t v0;
  void *result;

  sub_224E585B8(0, &qword_2557E2918, (void (*)(uint64_t))sub_224ED76C0);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_224F71260;
  *(_QWORD *)(v0 + 32) = 3682355;
  *(_QWORD *)(v0 + 40) = 0xE300000000000000;
  *(_QWORD *)(v0 + 48) = sub_224E52024((uint64_t)&unk_24ECF8CF8);
  *(_QWORD *)(v0 + 56) = 3421235;
  *(_QWORD *)(v0 + 64) = 0xE300000000000000;
  *(_QWORD *)(v0 + 72) = sub_224E52024((uint64_t)&unk_24ECF8D58);
  *(_QWORD *)(v0 + 80) = 3486771;
  *(_QWORD *)(v0 + 88) = 0xE300000000000000;
  *(_QWORD *)(v0 + 96) = sub_224E52024((uint64_t)&unk_24ECF8DB8);
  *(_QWORD *)(v0 + 104) = 3683895;
  *(_QWORD *)(v0 + 112) = 0xE300000000000000;
  *(_QWORD *)(v0 + 120) = sub_224E52024((uint64_t)&unk_24ECF8E18);
  *(_QWORD *)(v0 + 128) = 892743729;
  *(_QWORD *)(v0 + 136) = 0xE400000000000000;
  *(_QWORD *)(v0 + 144) = sub_224E52024((uint64_t)&unk_24ECF8E78);
  *(_QWORD *)(v0 + 152) = 926494769;
  *(_QWORD *)(v0 + 160) = 0xE400000000000000;
  *(_QWORD *)(v0 + 168) = sub_224E52024((uint64_t)&unk_24ECF8ED8);
  *(_QWORD *)(v0 + 176) = 875639089;
  *(_QWORD *)(v0 + 184) = 0xE400000000000000;
  *(_QWORD *)(v0 + 192) = sub_224E52024((uint64_t)&unk_24ECF8F38);
  *(_QWORD *)(v0 + 200) = 875835697;
  *(_QWORD *)(v0 + 208) = 0xE400000000000000;
  *(_QWORD *)(v0 + 216) = sub_224E52024((uint64_t)&unk_24ECF8F98);
  *(_QWORD *)(v0 + 224) = 842412337;
  *(_QWORD *)(v0 + 232) = 0xE400000000000000;
  *(_QWORD *)(v0 + 240) = sub_224E52024((uint64_t)&unk_24ECF8FF8);
  *(_QWORD *)(v0 + 248) = 859255089;
  *(_QWORD *)(v0 + 256) = 0xE400000000000000;
  *(_QWORD *)(v0 + 264) = sub_224E52024((uint64_t)&unk_24ECF9058);
  *(_QWORD *)(v0 + 272) = 808988977;
  *(_QWORD *)(v0 + 280) = 0xE400000000000000;
  *(_QWORD *)(v0 + 288) = sub_224E52024((uint64_t)&unk_24ECF90B8);
  *(_QWORD *)(v0 + 296) = 809054513;
  *(_QWORD *)(v0 + 304) = 0xE400000000000000;
  *(_QWORD *)(v0 + 312) = sub_224E52024((uint64_t)&unk_24ECF9118);
  *(_QWORD *)(v0 + 320) = 960049457;
  *(_QWORD *)(v0 + 328) = 0xE400000000000000;
  *(_QWORD *)(v0 + 336) = sub_224E52024((uint64_t)&unk_24ECF9178);
  *(_QWORD *)(v0 + 344) = 825242161;
  *(_QWORD *)(v0 + 352) = 0xE400000000000000;
  *(_QWORD *)(v0 + 360) = sub_224E52024((uint64_t)&unk_24ECF91D8);
  *(_QWORD *)(v0 + 368) = 892416561;
  *(_QWORD *)(v0 + 376) = 0xE400000000000000;
  *(_QWORD *)(v0 + 384) = sub_224E52024((uint64_t)&unk_24ECF9238);
  *(_QWORD *)(v0 + 392) = 942748209;
  *(_QWORD *)(v0 + 400) = 0xE400000000000000;
  *(_QWORD *)(v0 + 408) = sub_224E52024((uint64_t)&unk_24ECF9298);
  *(_QWORD *)(v0 + 416) = 858927665;
  *(_QWORD *)(v0 + 424) = 0xE400000000000000;
  *(_QWORD *)(v0 + 432) = sub_224E52024((uint64_t)&unk_24ECF92F8);
  *(_QWORD *)(v0 + 440) = 892482097;
  *(_QWORD *)(v0 + 448) = 0xE400000000000000;
  *(_QWORD *)(v0 + 456) = sub_224E52024((uint64_t)&unk_24ECF9358);
  *(_QWORD *)(v0 + 464) = 842215985;
  *(_QWORD *)(v0 + 472) = 0xE400000000000000;
  *(_QWORD *)(v0 + 480) = sub_224E52024((uint64_t)&unk_24ECF93B8);
  *(_QWORD *)(v0 + 488) = 909324849;
  *(_QWORD *)(v0 + 496) = 0xE400000000000000;
  *(_QWORD *)(v0 + 504) = sub_224E52024((uint64_t)&unk_24ECF9418);
  *(_QWORD *)(v0 + 512) = 842281521;
  *(_QWORD *)(v0 + 520) = 0xE400000000000000;
  *(_QWORD *)(v0 + 528) = sub_224E52024((uint64_t)&unk_24ECF9478);
  *(_QWORD *)(v0 + 536) = 875835953;
  *(_QWORD *)(v0 + 544) = 0xE400000000000000;
  *(_QWORD *)(v0 + 552) = sub_224E52024((uint64_t)&unk_24ECF94D8);
  *(_QWORD *)(v0 + 560) = 859124273;
  *(_QWORD *)(v0 + 568) = 0xE400000000000000;
  *(_QWORD *)(v0 + 576) = sub_224E52024((uint64_t)&unk_24ECF9538);
  *(_QWORD *)(v0 + 584) = 926233137;
  *(_QWORD *)(v0 + 592) = 0xE400000000000000;
  *(_QWORD *)(v0 + 600) = sub_224E52024((uint64_t)&unk_24ECF9598);
  *(_QWORD *)(v0 + 608) = 859189809;
  *(_QWORD *)(v0 + 616) = 0xE400000000000000;
  *(_QWORD *)(v0 + 624) = sub_224E52024((uint64_t)&unk_24ECF95F8);
  *(_QWORD *)(v0 + 632) = 909521457;
  *(_QWORD *)(v0 + 640) = 0xE400000000000000;
  *(_QWORD *)(v0 + 648) = sub_224E52024((uint64_t)&unk_24ECF9658);
  *(_QWORD *)(v0 + 656) = 926298673;
  *(_QWORD *)(v0 + 664) = 0xE400000000000000;
  *(_QWORD *)(v0 + 672) = sub_224E52024((uint64_t)&unk_24ECF96B8);
  *(_QWORD *)(v0 + 680) = 943075889;
  *(_QWORD *)(v0 + 688) = 0xE400000000000000;
  *(_QWORD *)(v0 + 696) = sub_224E52024((uint64_t)&unk_24ECF9718);
  *(_QWORD *)(v0 + 704) = 825700913;
  *(_QWORD *)(v0 + 712) = 0xE400000000000000;
  *(_QWORD *)(v0 + 720) = sub_224E52024((uint64_t)&unk_24ECF9778);
  *(_QWORD *)(v0 + 728) = 943141425;
  *(_QWORD *)(v0 + 736) = 0xE400000000000000;
  *(_QWORD *)(v0 + 744) = sub_224E52024((uint64_t)&unk_24ECF97D8);
  *(_QWORD *)(v0 + 752) = 892940849;
  *(_QWORD *)(v0 + 760) = 0xE400000000000000;
  *(_QWORD *)(v0 + 768) = sub_224E52024((uint64_t)&unk_24ECF9838);
  *(_QWORD *)(v0 + 776) = 909718065;
  *(_QWORD *)(v0 + 784) = 0xE400000000000000;
  *(_QWORD *)(v0 + 792) = sub_224E52024((uint64_t)&unk_24ECF9898);
  *(_QWORD *)(v0 + 800) = 875574065;
  *(_QWORD *)(v0 + 808) = 0xE400000000000000;
  *(_QWORD *)(v0 + 816) = sub_224E52024((uint64_t)&unk_24ECF98F8);
  *(_QWORD *)(v0 + 824) = 959525681;
  *(_QWORD *)(v0 + 832) = 0xE400000000000000;
  *(_QWORD *)(v0 + 840) = sub_224E52024((uint64_t)&unk_24ECF9958);
  *(_QWORD *)(v0 + 848) = 825439025;
  *(_QWORD *)(v0 + 856) = 0xE400000000000000;
  *(_QWORD *)(v0 + 864) = sub_224E52024((uint64_t)&unk_24ECF99B8);
  *(_QWORD *)(v0 + 872) = 858993457;
  *(_QWORD *)(v0 + 880) = 0xE400000000000000;
  *(_QWORD *)(v0 + 888) = sub_224E52024((uint64_t)&unk_24ECF9A18);
  *(_QWORD *)(v0 + 896) = 825504561;
  *(_QWORD *)(v0 + 904) = 0xE400000000000000;
  *(_QWORD *)(v0 + 912) = sub_224E52024((uint64_t)&unk_24ECF9A78);
  *(_QWORD *)(v0 + 920) = 859058993;
  *(_QWORD *)(v0 + 928) = 0xE400000000000000;
  *(_QWORD *)(v0 + 936) = sub_224E52024((uint64_t)&unk_24ECF9AD8);
  *(_QWORD *)(v0 + 944) = 808858417;
  *(_QWORD *)(v0 + 952) = 0xE400000000000000;
  *(_QWORD *)(v0 + 960) = sub_224E52024((uint64_t)&unk_24ECF9B38);
  *(_QWORD *)(v0 + 968) = 859190065;
  *(_QWORD *)(v0 + 976) = 0xE400000000000000;
  *(_QWORD *)(v0 + 984) = sub_224E52024((uint64_t)&unk_24ECF9B98);
  *(_QWORD *)(v0 + 992) = 892744497;
  *(_QWORD *)(v0 + 1000) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1008) = sub_224E52024((uint64_t)&unk_24ECF9BF8);
  *(_QWORD *)(v0 + 1016) = 892810033;
  *(_QWORD *)(v0 + 1024) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1032) = sub_224E52024((uint64_t)&unk_24ECF9C58);
  *(_QWORD *)(v0 + 1040) = 842609457;
  *(_QWORD *)(v0 + 1048) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1056) = sub_224E52024((uint64_t)&unk_24ECF9CB8);
  *(_QWORD *)(v0 + 1064) = 808596529;
  *(_QWORD *)(v0 + 1072) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1080) = sub_224E52024((uint64_t)&unk_24ECF9D18);
  *(_QWORD *)(v0 + 1088) = 926102577;
  *(_QWORD *)(v0 + 1096) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1104) = sub_224E52024((uint64_t)&unk_24ECF9D78);
  *(_QWORD *)(v0 + 1112) = 859059249;
  *(_QWORD *)(v0 + 1120) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1128) = sub_224E52024((uint64_t)&unk_24ECF9DD8);
  *(_QWORD *)(v0 + 1136) = 909456433;
  *(_QWORD *)(v0 + 1144) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1152) = sub_224E52024((uint64_t)&unk_24ECF9E38);
  *(_QWORD *)(v0 + 1160) = 909521969;
  *(_QWORD *)(v0 + 1168) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1176) = sub_224E52024((uint64_t)&unk_24ECF9E98);
  *(_QWORD *)(v0 + 1184) = 943076401;
  *(_QWORD *)(v0 + 1192) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1200) = sub_224E52024((uint64_t)&unk_24ECF9EF8);
  *(_QWORD *)(v0 + 1208) = 825766961;
  *(_QWORD *)(v0 + 1216) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1224) = sub_224E52024((uint64_t)&unk_24ECF9F58);
  *(_QWORD *)(v0 + 1232) = 876098609;
  *(_QWORD *)(v0 + 1240) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1248) = sub_224E52024((uint64_t)&unk_24ECF9FB8);
  *(_QWORD *)(v0 + 1256) = 959984689;
  *(_QWORD *)(v0 + 1264) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1272) = sub_224E52024((uint64_t)&unk_24ECFA018);
  *(_QWORD *)(v0 + 1280) = 809055281;
  *(_QWORD *)(v0 + 1288) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1296) = sub_224E52024((uint64_t)&unk_24ECFA078);
  *(_QWORD *)(v0 + 1304) = 825242929;
  *(_QWORD *)(v0 + 1312) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1320) = sub_224E52024((uint64_t)&unk_24ECFA0D8);
  *(_QWORD *)(v0 + 1328) = 876033329;
  *(_QWORD *)(v0 + 1336) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1344) = sub_224E52024((uint64_t)&unk_24ECFA138);
  *(_QWORD *)(v0 + 1352) = 875574833;
  *(_QWORD *)(v0 + 1360) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1368) = sub_224E52024((uint64_t)&unk_24ECFA198);
  *(_QWORD *)(v0 + 1376) = 909129265;
  *(_QWORD *)(v0 + 1384) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1392) = sub_224E52024((uint64_t)&unk_24ECFA1F8);
  *(_QWORD *)(v0 + 1400) = 875902513;
  *(_QWORD *)(v0 + 1408) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1416) = sub_224E52024((uint64_t)&unk_24ECFA258);
  *(_QWORD *)(v0 + 1424) = 909326129;
  *(_QWORD *)(v0 + 1432) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1440) = sub_224E52024((uint64_t)&unk_24ECFA2B8);
  *(_QWORD *)(v0 + 1448) = 926168881;
  *(_QWORD *)(v0 + 1456) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1464) = sub_224E52024((uint64_t)&unk_24ECFA318);
  *(_QWORD *)(v0 + 1472) = 859191089;
  *(_QWORD *)(v0 + 1480) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1488) = sub_224E52024((uint64_t)&unk_24ECFA378);
  *(_QWORD *)(v0 + 1496) = 875968305;
  *(_QWORD *)(v0 + 1504) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1512) = sub_224E52024((uint64_t)&unk_24ECFA3D8);
  *(_QWORD *)(v0 + 1520) = 926299953;
  *(_QWORD *)(v0 + 1528) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1536) = sub_224E52024((uint64_t)&unk_24ECFA438);
  *(_QWORD *)(v0 + 1544) = 959854385;
  *(_QWORD *)(v0 + 1552) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1560) = sub_224E52024((uint64_t)&unk_24ECFA498);
  *(_QWORD *)(v0 + 1568) = 892418097;
  *(_QWORD *)(v0 + 1576) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1584) = sub_224E52024((uint64_t)&unk_24ECFA4F8);
  *(_QWORD *)(v0 + 1592) = 842151985;
  *(_QWORD *)(v0 + 1600) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1608) = sub_224E52024((uint64_t)&unk_24ECFA558);
  *(_QWORD *)(v0 + 1616) = 858994737;
  *(_QWORD *)(v0 + 1624) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1632) = sub_224E52024((uint64_t)&unk_24ECFA5B8);
  *(_QWORD *)(v0 + 1640) = 875837489;
  *(_QWORD *)(v0 + 1648) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1656) = sub_224E52024((uint64_t)&unk_24ECFA618);
  *(_QWORD *)(v0 + 1664) = 808925233;
  *(_QWORD *)(v0 + 1672) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1680) = sub_224E52024((uint64_t)&unk_24ECFA678);
  *(_QWORD *)(v0 + 1688) = 876099633;
  *(_QWORD *)(v0 + 1696) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1704) = sub_224E52024((uint64_t)&unk_24ECFA6D8);
  *(_QWORD *)(v0 + 1712) = 909130033;
  *(_QWORD *)(v0 + 1720) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1728) = sub_224E52024((uint64_t)&unk_24ECFA738);
  *(_QWORD *)(v0 + 1736) = 959527217;
  *(_QWORD *)(v0 + 1744) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1752) = sub_224E52024((uint64_t)&unk_24ECFA798);
  *(_QWORD *)(v0 + 1760) = 875772209;
  *(_QWORD *)(v0 + 1768) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1776) = sub_224E52024((uint64_t)&unk_24ECFA7F8);
  *(_QWORD *)(v0 + 1784) = 808529970;
  *(_QWORD *)(v0 + 1792) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1800) = sub_224E52024((uint64_t)&unk_24ECFA858);
  *(_QWORD *)(v0 + 1808) = 925970482;
  *(_QWORD *)(v0 + 1816) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1824) = sub_224E52024((uint64_t)&unk_24ECFA8B8);
  *(_QWORD *)(v0 + 1832) = 959590450;
  *(_QWORD *)(v0 + 1840) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1848) = sub_224E52024((uint64_t)&unk_24ECFA918);
  *(_QWORD *)(v0 + 1856) = 876032050;
  *(_QWORD *)(v0 + 1864) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1872) = sub_224E52024((uint64_t)&unk_24ECFA978);
  *(_QWORD *)(v0 + 1880) = 943271986;
  *(_QWORD *)(v0 + 1888) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1896) = sub_224E52024((uint64_t)&unk_24ECFA9D8);
  *(_QWORD *)(v0 + 1904) = 825241906;
  *(_QWORD *)(v0 + 1912) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1920) = sub_224E52024((uint64_t)&unk_24ECFAA38);
  *(_QWORD *)(v0 + 1928) = 858796338;
  *(_QWORD *)(v0 + 1936) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1944) = sub_224E52024((uint64_t)&unk_24ECFAA98);
  *(_QWORD *)(v0 + 1952) = 875573554;
  *(_QWORD *)(v0 + 1960) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1968) = sub_224E52024((uint64_t)&unk_24ECFAAF8);
  *(_QWORD *)(v0 + 1976) = 942682418;
  *(_QWORD *)(v0 + 1984) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1992) = sub_224E52024((uint64_t)&unk_24ECFAB58);
  *(_QWORD *)(v0 + 2000) = 959459634;
  *(_QWORD *)(v0 + 2008) = 0xE400000000000000;
  *(_QWORD *)(v0 + 2016) = sub_224E52024((uint64_t)&unk_24ECFABB8);
  *(_QWORD *)(v0 + 2024) = 909193522;
  *(_QWORD *)(v0 + 2032) = 0xE400000000000000;
  *(_QWORD *)(v0 + 2040) = sub_224E52024((uint64_t)&unk_24ECFAC18);
  *(_QWORD *)(v0 + 2048) = 942813490;
  *(_QWORD *)(v0 + 2056) = 0xE400000000000000;
  *(_QWORD *)(v0 + 2064) = sub_224E52024((uint64_t)&unk_24ECFAC78);
  *(_QWORD *)(v0 + 2072) = 808661298;
  *(_QWORD *)(v0 + 2080) = 0xE400000000000000;
  *(_QWORD *)(v0 + 2088) = sub_224E52024((uint64_t)&unk_24ECFACD8);
  *(_QWORD *)(v0 + 2096) = 959656242;
  *(_QWORD *)(v0 + 2104) = 0xE400000000000000;
  *(_QWORD *)(v0 + 2112) = sub_224E52024((uint64_t)&unk_24ECFAD38);
  *(_QWORD *)(v0 + 2120) = 859320626;
  *(_QWORD *)(v0 + 2128) = 0xE400000000000000;
  *(_QWORD *)(v0 + 2136) = sub_224E52024((uint64_t)&unk_24ECFAD98);
  result = (void *)sub_224E52158(v0);
  off_2557E2838 = result;
  return result;
}

void *sub_224ED5FDC()
{
  uint64_t inited;
  void *result;

  sub_224E585B8(0, &qword_2557E2918, (void (*)(uint64_t))sub_224ED76C0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_224F6DF20;
  *(_QWORD *)(inited + 32) = 0x3030353134303632;
  *(_QWORD *)(inited + 40) = 0xE900000000000030;
  *(_QWORD *)(inited + 48) = sub_224E52024((uint64_t)&unk_24ECFADF8);
  *(_QWORD *)(inited + 56) = 0x3030333733303632;
  *(_QWORD *)(inited + 64) = 0xE900000000000031;
  *(_QWORD *)(inited + 72) = sub_224E52024((uint64_t)&unk_24ECFAE58);
  result = (void *)sub_224E52158(inited);
  off_2557E2840 = result;
  return result;
}

void *sub_224ED6090()
{
  uint64_t inited;
  void *result;

  sub_224E585B8(0, &qword_2557E2918, (void (*)(uint64_t))sub_224ED76C0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_224F6DF20;
  *(_QWORD *)(inited + 32) = 0x342D34363436504CLL;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  *(_QWORD *)(inited + 48) = sub_224E52024((uint64_t)&unk_24ECFAEB8);
  *(_QWORD *)(inited + 56) = 0x383931373132504CLL;
  *(_QWORD *)(inited + 64) = 0xEA0000000000332DLL;
  *(_QWORD *)(inited + 72) = sub_224E52024((uint64_t)&unk_24ECFAF18);
  result = (void *)sub_224E52158(inited);
  off_2557E2848 = result;
  return result;
}

void *sub_224ED6144()
{
  uint64_t inited;
  void *result;

  sub_224E585B8(0, &qword_2557E2918, (void (*)(uint64_t))sub_224ED76C0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_224F71270;
  strcpy((char *)(inited + 32), "Bharat-Biotech");
  *(_BYTE *)(inited + 47) = -18;
  *(_QWORD *)(inited + 48) = sub_224E52024((uint64_t)&unk_24ECFAF78);
  *(_QWORD *)(inited + 56) = 0xD000000000000022;
  *(_QWORD *)(inited + 64) = 0x8000000224F820A0;
  *(_QWORD *)(inited + 72) = sub_224E52024((uint64_t)&unk_24ECFAFD8);
  *(_QWORD *)(inited + 80) = 1111968067;
  *(_QWORD *)(inited + 88) = 0xE400000000000000;
  *(_QWORD *)(inited + 96) = sub_224E52024((uint64_t)&unk_24ECFB038);
  *(_QWORD *)(inited + 104) = 0xD000000000000010;
  *(_QWORD *)(inited + 112) = 0x8000000224F820D0;
  *(_QWORD *)(inited + 120) = sub_224E52024((uint64_t)&unk_24ECFB098);
  *(_QWORD *)(inited + 128) = 0x7A7572636F6946;
  *(_QWORD *)(inited + 136) = 0xE700000000000000;
  *(_QWORD *)(inited + 144) = sub_224E52024((uint64_t)&unk_24ECFB0F8);
  *(_QWORD *)(inited + 152) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 160) = 0x8000000224F820F0;
  *(_QWORD *)(inited + 168) = sub_224E52024((uint64_t)&unk_24ECFB158);
  *(_QWORD *)(inited + 176) = 0xD000000000000012;
  *(_QWORD *)(inited + 184) = 0x8000000224F82110;
  *(_QWORD *)(inited + 192) = sub_224E52024((uint64_t)&unk_24ECFB1B8);
  *(_QWORD *)(inited + 200) = 1230198350;
  *(_QWORD *)(inited + 208) = 0xE400000000000000;
  *(_QWORD *)(inited + 216) = sub_224E52024((uint64_t)&unk_24ECFB218);
  strcpy((char *)(inited + 224), "ORG-100000788");
  *(_WORD *)(inited + 238) = -4864;
  *(_QWORD *)(inited + 240) = sub_224E52024((uint64_t)&unk_24ECFB278);
  strcpy((char *)(inited + 248), "ORG-100001417");
  *(_WORD *)(inited + 262) = -4864;
  *(_QWORD *)(inited + 264) = sub_224E52024((uint64_t)&unk_24ECFB2D8);
  strcpy((char *)(inited + 272), "ORG-100001699");
  *(_WORD *)(inited + 286) = -4864;
  *(_QWORD *)(inited + 288) = sub_224E52024((uint64_t)&unk_24ECFB338);
  strcpy((char *)(inited + 296), "ORG-100001981");
  *(_WORD *)(inited + 310) = -4864;
  *(_QWORD *)(inited + 312) = sub_224E52024((uint64_t)&unk_24ECFB398);
  strcpy((char *)(inited + 320), "ORG-100006270");
  *(_WORD *)(inited + 334) = -4864;
  *(_QWORD *)(inited + 336) = sub_224E52024((uint64_t)&unk_24ECFB3F8);
  strcpy((char *)(inited + 344), "ORG-100007893");
  *(_WORD *)(inited + 358) = -4864;
  *(_QWORD *)(inited + 360) = sub_224E52024((uint64_t)&unk_24ECFB458);
  strcpy((char *)(inited + 368), "ORG-100008549");
  *(_WORD *)(inited + 382) = -4864;
  *(_QWORD *)(inited + 384) = sub_224E52024((uint64_t)&unk_24ECFB4B8);
  strcpy((char *)(inited + 392), "ORG-100010771");
  *(_WORD *)(inited + 406) = -4864;
  *(_QWORD *)(inited + 408) = sub_224E52024((uint64_t)&unk_24ECFB518);
  strcpy((char *)(inited + 416), "ORG-100013793");
  *(_WORD *)(inited + 430) = -4864;
  *(_QWORD *)(inited + 432) = sub_224E52024((uint64_t)&unk_24ECFB578);
  strcpy((char *)(inited + 440), "ORG-100020693");
  *(_WORD *)(inited + 454) = -4864;
  *(_QWORD *)(inited + 456) = sub_224E52024((uint64_t)&unk_24ECFB5D8);
  strcpy((char *)(inited + 464), "ORG-100023050");
  *(_WORD *)(inited + 478) = -4864;
  *(_QWORD *)(inited + 480) = sub_224E52024((uint64_t)&unk_24ECFB638);
  strcpy((char *)(inited + 488), "ORG-100024420");
  *(_WORD *)(inited + 502) = -4864;
  *(_QWORD *)(inited + 504) = sub_224E52024((uint64_t)&unk_24ECFB698);
  strcpy((char *)(inited + 512), "ORG-100026614");
  *(_WORD *)(inited + 526) = -4864;
  *(_QWORD *)(inited + 528) = sub_224E52024((uint64_t)&unk_24ECFB6F8);
  strcpy((char *)(inited + 536), "ORG-100030215");
  *(_WORD *)(inited + 550) = -4864;
  *(_QWORD *)(inited + 552) = sub_224E52024((uint64_t)&unk_24ECFB758);
  strcpy((char *)(inited + 560), "ORG-100031184");
  *(_WORD *)(inited + 574) = -4864;
  *(_QWORD *)(inited + 576) = sub_224E52024((uint64_t)&unk_24ECFB7B8);
  strcpy((char *)(inited + 584), "ORG-100032020");
  *(_WORD *)(inited + 598) = -4864;
  *(_QWORD *)(inited + 600) = sub_224E52024((uint64_t)&unk_24ECFB818);
  strcpy((char *)(inited + 608), "ORG-100033914");
  *(_WORD *)(inited + 622) = -4864;
  *(_QWORD *)(inited + 624) = sub_224E52024((uint64_t)&unk_24ECFB878);
  strcpy((char *)(inited + 632), "ORG-100036422");
  *(_WORD *)(inited + 646) = -4864;
  *(_QWORD *)(inited + 648) = sub_224E52024((uint64_t)&unk_24ECFB8D8);
  strcpy((char *)(inited + 656), "Sinopharm-WIBP");
  *(_BYTE *)(inited + 671) = -18;
  *(_QWORD *)(inited + 672) = sub_224E52024((uint64_t)&unk_24ECFB938);
  *(_QWORD *)(inited + 680) = 0x2D6361766F6E6953;
  *(_QWORD *)(inited + 688) = 0xEF686365746F6942;
  *(_QWORD *)(inited + 696) = sub_224E52024((uint64_t)&unk_24ECFB998);
  *(_QWORD *)(inited + 704) = 0xD000000000000010;
  *(_QWORD *)(inited + 712) = 0x8000000224F82130;
  *(_QWORD *)(inited + 720) = sub_224E52024((uint64_t)&unk_24ECFB9F8);
  *(_QWORD *)(inited + 728) = 0xD000000000000011;
  *(_QWORD *)(inited + 736) = 0x8000000224F82150;
  *(_QWORD *)(inited + 744) = sub_224E52024((uint64_t)&unk_24ECFBA58);
  result = (void *)sub_224E52158(inited);
  off_2557E2850 = result;
  return result;
}

void *sub_224ED665C()
{
  uint64_t inited;
  void *result;

  sub_224E585B8(0, &qword_2557E2918, (void (*)(uint64_t))sub_224ED76C0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_224F71280;
  *(_QWORD *)(inited + 32) = 0x616C61646241;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 48) = sub_224E52024((uint64_t)&unk_24ECFBAB8);
  *(_QWORD *)(inited + 56) = 0x36313832445A41;
  *(_QWORD *)(inited + 64) = 0xE700000000000000;
  *(_QWORD *)(inited + 72) = sub_224E52024((uint64_t)&unk_24ECFBB18);
  *(_QWORD *)(inited + 80) = 0x6F432D5042494242;
  *(_QWORD *)(inited + 88) = 0xEA00000000005672;
  *(_QWORD *)(inited + 96) = sub_224E52024((uint64_t)&unk_24ECFBB78);
  *(_QWORD *)(inited + 104) = 0x63656469766E6F43;
  *(_QWORD *)(inited + 112) = 0xEA00000000006169;
  *(_QWORD *)(inited + 120) = sub_224E52024((uint64_t)&unk_24ECFBBD8);
  *(_QWORD *)(inited + 128) = 0x6156616E6F726F43;
  *(_QWORD *)(inited + 136) = 0xE900000000000063;
  *(_QWORD *)(inited + 144) = sub_224E52024((uint64_t)&unk_24ECFBC38);
  *(_QWORD *)(inited + 152) = 0x6E697861766F43;
  *(_QWORD *)(inited + 160) = 0xE700000000000000;
  *(_QWORD *)(inited + 168) = sub_224E52024((uint64_t)&unk_24ECFBC98);
  *(_QWORD *)(inited + 176) = 0xD00000000000001CLL;
  *(_QWORD *)(inited + 184) = 0x8000000224F82170;
  *(_QWORD *)(inited + 192) = sub_224E52024((uint64_t)&unk_24ECFBCF8);
  *(_QWORD *)(inited + 200) = 0xD000000000000014;
  *(_QWORD *)(inited + 208) = 0x8000000224F81280;
  *(_QWORD *)(inited + 216) = sub_224E52024((uint64_t)&unk_24ECFBD58);
  *(_QWORD *)(inited + 224) = 0x7A6E656669766F43;
  *(_QWORD *)(inited + 232) = 0xE800000000000000;
  *(_QWORD *)(inited + 240) = sub_224E52024((uint64_t)&unk_24ECFBDB8);
  *(_QWORD *)(inited + 248) = 0x6569687369766F43;
  *(_QWORD *)(inited + 256) = 0xEA0000000000646CLL;
  *(_QWORD *)(inited + 264) = sub_224E52024((uint64_t)&unk_24ECFBE18);
  *(_QWORD *)(inited + 272) = 0x63615669766F43;
  *(_QWORD *)(inited + 280) = 0xE700000000000000;
  *(_QWORD *)(inited + 288) = sub_224E52024((uint64_t)&unk_24ECFBE78);
  *(_QWORD *)(inited + 296) = 0x7861766F766F43;
  *(_QWORD *)(inited + 304) = 0xE700000000000000;
  *(_QWORD *)(inited + 312) = sub_224E52024((uint64_t)&unk_24ECFBED8);
  *(_QWORD *)(inited + 320) = 0x566F436E5643;
  *(_QWORD *)(inited + 328) = 0xE600000000000000;
  *(_QWORD *)(inited + 336) = sub_224E52024((uint64_t)&unk_24ECFBF38);
  strcpy((char *)(inited + 344), "EpiVacCorona");
  *(_BYTE *)(inited + 357) = 0;
  *(_WORD *)(inited + 358) = -5120;
  *(_QWORD *)(inited + 360) = sub_224E52024((uint64_t)&unk_24ECFBF98);
  strcpy((char *)(inited + 368), "EpiVacCorona-N");
  *(_BYTE *)(inited + 383) = -18;
  *(_QWORD *)(inited + 384) = sub_224E52024((uint64_t)&unk_24ECFBFF8);
  strcpy((char *)(inited + 392), "EU/1/20/1507");
  *(_BYTE *)(inited + 405) = 0;
  *(_WORD *)(inited + 406) = -5120;
  *(_QWORD *)(inited + 408) = sub_224E52024((uint64_t)&unk_24ECFC058);
  strcpy((char *)(inited + 416), "EU/1/20/1525");
  *(_BYTE *)(inited + 429) = 0;
  *(_WORD *)(inited + 430) = -5120;
  *(_QWORD *)(inited + 432) = sub_224E52024((uint64_t)&unk_24ECFC0B8);
  strcpy((char *)(inited + 440), "EU/1/20/1528");
  *(_BYTE *)(inited + 453) = 0;
  *(_WORD *)(inited + 454) = -5120;
  *(_QWORD *)(inited + 456) = sub_224E52024((uint64_t)&unk_24ECFC118);
  strcpy((char *)(inited + 464), "EU/1/21/1529");
  *(_BYTE *)(inited + 477) = 0;
  *(_WORD *)(inited + 478) = -5120;
  *(_QWORD *)(inited + 480) = sub_224E52024((uint64_t)&unk_24ECFC178);
  strcpy((char *)(inited + 488), "EU/1/21/1618");
  *(_BYTE *)(inited + 501) = 0;
  *(_WORD *)(inited + 502) = -5120;
  *(_QWORD *)(inited + 504) = sub_224E52024((uint64_t)&unk_24ECFC1D8);
  *(_QWORD *)(inited + 512) = 0x61562D7461796148;
  *(_QWORD *)(inited + 520) = 0xE900000000000078;
  *(_QWORD *)(inited + 528) = sub_224E52024((uint64_t)&unk_24ECFC238);
  *(_QWORD *)(inited + 536) = 0xD000000000000020;
  *(_QWORD *)(inited + 544) = 0x8000000224F82190;
  *(_QWORD *)(inited + 552) = sub_224E52024((uint64_t)&unk_24ECFC298);
  *(_QWORD *)(inited + 560) = 0x31564F432D43564DLL;
  *(_QWORD *)(inited + 568) = 0xEB00000000313039;
  *(_QWORD *)(inited + 576) = sub_224E52024((uint64_t)&unk_24ECFC2F8);
  *(_QWORD *)(inited + 584) = 0x2D36302D4953564ELL;
  *(_QWORD *)(inited + 592) = 0xEA00000000003830;
  *(_QWORD *)(inited + 600) = sub_224E52024((uint64_t)&unk_24ECFC358);
  *(_QWORD *)(inited + 608) = 0x32566F432D58564ELL;
  *(_QWORD *)(inited + 616) = 0xEB00000000333733;
  *(_QWORD *)(inited + 624) = sub_224E52024((uint64_t)&unk_24ECFC3B8);
  *(_QWORD *)(inited + 632) = 0x49564F432D52;
  *(_QWORD *)(inited + 640) = 0xE600000000000000;
  *(_QWORD *)(inited + 648) = sub_224E52024((uint64_t)&unk_24ECFC418);
  *(_QWORD *)(inited + 656) = 0x43313056544353;
  *(_QWORD *)(inited + 664) = 0xE700000000000000;
  *(_QWORD *)(inited + 672) = sub_224E52024((uint64_t)&unk_24ECFC478);
  *(_QWORD *)(inited + 680) = 0x616E617265626F53;
  *(_QWORD *)(inited + 688) = 0xEB0000000032302DLL;
  *(_QWORD *)(inited + 696) = sub_224E52024((uint64_t)&unk_24ECFC4D8);
  strcpy((char *)(inited + 704), "Soberana-Plus");
  *(_WORD *)(inited + 718) = -4864;
  *(_QWORD *)(inited + 720) = sub_224E52024((uint64_t)&unk_24ECFC538);
  strcpy((char *)(inited + 728), "Sputnik-Light");
  *(_WORD *)(inited + 742) = -4864;
  *(_QWORD *)(inited + 744) = sub_224E52024((uint64_t)&unk_24ECFC598);
  *(_QWORD *)(inited + 752) = 0x2D6B696E74757053;
  *(_QWORD *)(inited + 760) = 0xE90000000000004DLL;
  *(_QWORD *)(inited + 768) = sub_224E52024((uint64_t)&unk_24ECFC5F8);
  *(_QWORD *)(inited + 776) = 0x2D6B696E74757053;
  *(_QWORD *)(inited + 784) = 0xE900000000000056;
  *(_QWORD *)(inited + 792) = sub_224E52024((uint64_t)&unk_24ECFC658);
  *(_QWORD *)(inited + 800) = 0x7476657270646956;
  *(_QWORD *)(inited + 808) = 0xEA00000000006E79;
  *(_QWORD *)(inited + 816) = sub_224E52024((uint64_t)&unk_24ECFC6B8);
  *(_QWORD *)(inited + 824) = 0x31303032414C56;
  *(_QWORD *)(inited + 832) = 0xE700000000000000;
  *(_QWORD *)(inited + 840) = sub_224E52024((uint64_t)&unk_24ECFC718);
  *(_QWORD *)(inited + 848) = 0x726F432D50424957;
  *(_QWORD *)(inited + 856) = 0xE900000000000056;
  *(_QWORD *)(inited + 864) = sub_224E52024((uint64_t)&unk_24ECFC778);
  *(_QWORD *)(inited + 872) = 0x302D3243532D5359;
  *(_QWORD *)(inited + 880) = 0xEA00000000003031;
  *(_QWORD *)(inited + 888) = sub_224E52024((uint64_t)&unk_24ECFC7D8);
  result = (void *)sub_224E52158(inited);
  off_2557E2858 = result;
  return result;
}

void *sub_224ED6C94()
{
  uint64_t inited;
  void *result;

  sub_224E585B8(0, &qword_2557E2918, (void (*)(uint64_t))sub_224ED76C0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_224F71290;
  *(_QWORD *)(inited + 32) = 0x3035303339313131;
  *(_QWORD *)(inited + 40) = 0xEA00000000003530;
  *(_QWORD *)(inited + 48) = sub_224E52024((uint64_t)&unk_24ECFC838);
  *(_QWORD *)(inited + 56) = 0x3039343339313131;
  *(_QWORD *)(inited + 64) = 0xEA00000000003730;
  *(_QWORD *)(inited + 72) = sub_224E52024((uint64_t)&unk_24ECFC898);
  *(_QWORD *)(inited + 80) = 0x3034323037353131;
  *(_QWORD *)(inited + 88) = 0xEA00000000003630;
  *(_QWORD *)(inited + 96) = sub_224E52024((uint64_t)&unk_24ECFC8F8);
  *(_QWORD *)(inited + 104) = 0x3033343632363131;
  *(_QWORD *)(inited + 112) = 0xEA00000000003130;
  *(_QWORD *)(inited + 120) = sub_224E52024((uint64_t)&unk_24ECFC958);
  strcpy((char *)(inited + 128), "29061000087103");
  *(_BYTE *)(inited + 143) = -18;
  *(_QWORD *)(inited + 144) = sub_224E52024((uint64_t)&unk_24ECFC9B8);
  *(_QWORD *)(inited + 152) = 0x3330584237304ALL;
  *(_QWORD *)(inited + 160) = 0xE700000000000000;
  *(_QWORD *)(inited + 168) = sub_224E52024((uint64_t)&unk_24ECFCA18);
  result = (void *)sub_224E52158(inited);
  off_2557E2860 = result;
  return result;
}

void sub_224ED6DF4(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  void (*v9)(id, void *, uint64_t, void *);
  id v10;
  id v11;
  id v12;

  v9 = *(void (**)(id, void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  v12 = a2;
  v10 = a3;
  v11 = a5;
  v9(v12, a3, a4, a5);
  swift_release();

}

void sub_224ED6E8C(uint64_t a1)
{
  uint64_t v1;

  sub_224ED2C50(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

void sub_224ED6E98(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_224F681D4();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x22768E1D8);
}

void sub_224ED6F00(char a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (qword_2557E0128 != -1)
    swift_once();
  v2 = sub_224F679B8();
  __swift_project_value_buffer(v2, (uint64_t)qword_2557FC958);
  swift_bridgeObjectRetain_n();
  v3 = sub_224F679AC();
  v4 = sub_224F67EC8();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13 = v6;
    *(_DWORD *)v5 = 136315394;
    sub_224F6848C();
    v7 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_224F68078();
    swift_unknownObjectRelease();
    v8 = sub_224F67BC8();
    sub_224E76904(v8, v9, &v13);
    sub_224F68000();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_224F6848C();
    v10 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_224F68078();
    swift_unknownObjectRelease();
    v11 = sub_224F67BC8();
    sub_224E76904(v11, v12, &v13);
    sub_224F68000();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_224DAC000, v3, v4, "CodeableConceptLookupService entering fallback_eudccValueSetEntry() for %s and code %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22768EDE4](v6, -1, -1);
    MEMORY[0x22768EDE4](v5, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  __asm { BR              X10 }
}

void sub_224ED76C0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E2920)
  {
    sub_224ED7724();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E2920);
  }
}

void sub_224ED7724()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E14F0)
  {
    v0 = sub_224F67AFC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E14F0);
  }
}

void sub_224ED7784()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E2928)
  {
    sub_224E54704(255, (unint64_t *)&qword_2557E16D0, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v0 = sub_224F67DF0();
    if (!v1)
      atomic_store(v0, &qword_2557E2928);
  }
}

uint64_t sub_224ED7800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  sub_224ED7784();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);

  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v2);
  return swift_deallocObject();
}

void sub_224ED7874(uint64_t a1, void *a2, int a3, void *a4)
{
  uint64_t v4;

  sub_224ED7784();
  sub_224ED2DBC(a1, a2, a3, a4, *(id *)(v4 + 16));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

id sub_224ED78F4(uint64_t a1, uint64_t a2)
{
  id v4;
  id v6;
  void *v7;
  id v8;

  if (a1 == 0xD000000000000016 && a2 == 0x8000000224F7F240 || (sub_224F683CC() & 1) != 0)
  {
    v4 = objc_msgSend((id)objc_opt_self(), sel_SNOMEDCodeSystem);
    return v4;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000224F7F2A0 || (sub_224F683CC() & 1) != 0)
  {
    v4 = objc_msgSend((id)objc_opt_self(), sel_LOINCCodeSystem);
    return v4;
  }
  v6 = objc_allocWithZone(MEMORY[0x24BDD3CD8]);
  swift_bridgeObjectRetain();
  v7 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithIdentifier_name_OID_type_synonyms_hasDisplayStrings_, v7, 0, 0, 1, 0, 0);

  return v8;
}

void sub_224ED7A5C(char a1)
{
  __asm { BR              X11 }
}

id sub_224ED7AC4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  unint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26[13];

  v2 = sub_224F683CC();
  swift_bridgeObjectRelease();
  if ((v2 & 1) == 0)
    return 0;
  if (qword_2557E0148 != -1)
    swift_once();
  v3 = off_2557E2828;
  if (!*((_QWORD *)off_2557E2828 + 2))
  {
LABEL_13:
    if (qword_2557E0128 != -1)
      swift_once();
    v14 = sub_224F679B8();
    __swift_project_value_buffer(v14, (uint64_t)qword_2557FC958);
    swift_bridgeObjectRetain_n();
    v15 = sub_224F679AC();
    v16 = sub_224F67EBC();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc();
      v18 = swift_slowAlloc();
      v26[0] = v18;
      *(_DWORD *)v17 = 136315394;
      swift_bridgeObjectRetain();
      sub_224F6848C();
      v19 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v20 = sub_224F67BC8();
      sub_224E76904(v20, v21, v26);
      sub_224F68000();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      sub_224F6848C();
      v22 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v23 = sub_224F67BC8();
      sub_224E76904(v23, v24, v26);
      sub_224F68000();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_224DAC000, v15, v16, "medicalCodingAlias(valueSet:code:) code \"%s\" not found in valueSet: %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v18, -1, -1);
      MEMORY[0x22768EDE4](v17, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  v4 = sub_224E533E8(v1, v0);
  if ((v5 & 1) == 0)
    goto LABEL_12;
  v6 = (uint64_t *)(v3[7] + 16 * v4);
  v8 = *v6;
  v7 = v6[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (qword_2557E0130 != -1)
    swift_once();
  if (!*((_QWORD *)off_2557E2810 + 2))
  {
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  sub_224E533E8(v8, v7);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend((id)objc_opt_self(), sel_CVXSystem);
  v11 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v12 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend((id)objc_opt_self(), sel_medicalCodingWithSystem_codingVersion_code_displayString_, v10, 0, v11, v12);

  return v13;
}

uint64_t storeEnumTagSinglePayload for EUDCCValueSet(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_224ED7FCC + 4 * byte_224F712BC[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_224ED8000 + 4 * byte_224F712B7[v4]))();
}

uint64_t sub_224ED8000(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224ED8008(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224ED8010);
  return result;
}

uint64_t sub_224ED801C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224ED8024);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_224ED8028(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224ED8030(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EUDCCValueSet()
{
  return &type metadata for EUDCCValueSet;
}

unint64_t sub_224ED8050()
{
  unint64_t result;

  result = qword_2557E2968;
  if (!qword_2557E2968)
  {
    result = MEMORY[0x22768ED24](&unk_224F71374, &type metadata for EUDCCValueSet);
    atomic_store(result, (unint64_t *)&qword_2557E2968);
  }
  return result;
}

uint64_t sub_224ED8094()
{
  unint64_t v0;

  v0 = sub_224F68240();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

id sub_224ED80E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  int *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = v0;
  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5AF70(v1, (uint64_t)v4);
  v5 = sub_224F675D4();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_224E6CD4C((uint64_t)v4);
    v7 = 0;
  }
  else
  {
    v8 = (void *)objc_opt_self();
    sub_224F6755C();
    v9 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v8, sel_codeSystemWithIdentifier_, v9);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  sub_224E597F8();
  v10 = (int *)type metadata accessor for Coding();
  v11 = (uint64_t *)(v1 + v10[7]);
  v12 = *v11;
  v13 = v11[1];
  v14 = (uint64_t *)(v1 + v10[5]);
  v15 = *v14;
  v16 = v14[1];
  v17 = (uint64_t *)(v1 + v10[6]);
  v18 = *v17;
  v19 = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_224F3FC08(v7, v12, v13, v15, v16, v18, v19);
}

uint64_t sub_224ED825C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v1;
  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_224F675D4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5AF70(v3, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_224E6CD4C((uint64_t)v7);
    sub_224E75FD8();
    swift_allocError();
    *(_OWORD *)v12 = xmmword_224F713B0;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    *(_BYTE *)(v12 + 32) = 0;
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    v14 = type metadata accessor for Coding();
    v15 = (uint64_t *)(v3 + *(int *)(v14 + 20));
    v16 = v15[1];
    if (v16)
    {
      v17 = v14;
      v37 = *v15;
      swift_bridgeObjectRetain();
      v18 = sub_224F6755C();
      v38 = v2;
      v19 = (uint64_t *)(v3 + *(int *)(v17 + 28));
      v20 = *v19;
      v21 = v19[1];
      v22 = (uint64_t *)(v3 + *(int *)(v17 + 24));
      v23 = *v22;
      v24 = v22[1];
      v35 = v20;
      v36 = v23;
      v33[1] = v18;
      v34 = v24;
      v25 = (void *)objc_opt_self();
      swift_bridgeObjectRetain();
      v26 = v21;
      swift_bridgeObjectRetain();
      v27 = (void *)sub_224F67B5C();
      swift_bridgeObjectRelease();
      v28 = objc_msgSend(v25, sel_codeSystemWithIdentifier_, v27);

      result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v29 = v37;
      *a1 = v28;
      a1[1] = v29;
      v30 = v35;
      a1[2] = v16;
      a1[3] = v30;
      v31 = v36;
      a1[4] = v26;
      a1[5] = v31;
      a1[6] = v34;
    }
    else
    {
      sub_224E75FD8();
      swift_allocError();
      *(_OWORD *)v32 = xmmword_224F713A0;
      *(_QWORD *)(v32 + 16) = 0;
      *(_QWORD *)(v32 + 24) = 0;
      *(_BYTE *)(v32 + 32) = 0;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CompressionAlgorithmError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_224ED8518(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_224ED8518(uint64_t a1, char a2)
{
  uint64_t result;

  if (!a2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for CompressionAlgorithmError(uint64_t a1)
{
  return sub_224ED8538(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_224ED8538(uint64_t a1, char a2)
{
  uint64_t result;

  if (!a2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t assignWithCopy for CompressionAlgorithmError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_224ED8518(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_224ED8538(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for CompressionAlgorithmError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_224ED8538(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for CompressionAlgorithmError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CompressionAlgorithmError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_224ED8674(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_224ED868C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompressionAlgorithmError()
{
  return &type metadata for CompressionAlgorithmError;
}

unint64_t sub_224ED86B4(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v5;

  v3 = 0xD000000000000010;
  if (!a2)
  {
    sub_224F680E4();
    swift_bridgeObjectRelease();
    v5 = 0xD000000000000015;
    MEMORY[0x22768DE48](a1, MEMORY[0x24BEE4260]);
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    sub_224F680E4();
    swift_bridgeObjectRelease();
    v5 = 0xD000000000000023;
    sub_224F6839C();
LABEL_5:
    sub_224F67C94();
    swift_bridgeObjectRelease();
    return v5;
  }
  return v3;
}

unint64_t sub_224ED87C0()
{
  uint64_t v0;

  return sub_224ED86B4(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

BOOL sub_224ED87CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  _BOOL4 v9;
  _BOOL4 v11;

  v4 = *(_QWORD *)a1;
  v5 = *(unsigned __int8 *)(a1 + 8);
  v6 = *(_QWORD *)a2;
  v7 = *(unsigned __int8 *)(a2 + 8);
  if (v5)
  {
    v9 = v7 == 1 && v4 == v6;
    v11 = v7 == 2 && v6 == 0;
    if (v5 == 1)
      return v9;
    else
      return v11;
  }
  else
  {
    return !v7 && sub_224DD9650(v4, v6);
  }
}

unint64_t sub_224ED8820()
{
  unint64_t result;

  result = qword_2557E2970;
  if (!qword_2557E2970)
  {
    result = MEMORY[0x22768ED24](&unk_224F7144C, &type metadata for CompressionAlgorithmError);
    atomic_store(result, (unint64_t *)&qword_2557E2970);
  }
  return result;
}

uint64_t sub_224ED8868(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  sub_224E7C238();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_224F677D8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_224F674D8();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v2[8])
  {
    v16 = v2[7];
  }
  else
  {
    v23 = a1;
    v24 = v13;
    sub_224F674CC();
    if (v2[2])
    {
      v25 = v2[2];
      sub_224E68104();
      sub_224E79350();
      sub_224F67B44();
      sub_224F674A8();
    }
    if (v2[5])
    {
      v25 = v2[5];
      sub_224E68104();
      sub_224E79350();
      sub_224F67B44();
      sub_224F67490();
    }
    if (v2[4])
    {
      swift_bridgeObjectRetain();
      sub_224F6749C();
    }
    if (v2[6])
    {
      v25 = v2[6];
      sub_224E68104();
      sub_224E79350();
      sub_224F67B44();
      sub_224F674B4();
    }
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1738]), sel_init);
    objc_msgSend(v17, sel_setStyle_, 3);
    sub_224E7C28C(v23, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_224ED8B58((uint64_t)v6);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      v18 = (void *)sub_224F677C0();
      objc_msgSend(v17, sel_setLocale_, v18);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    v19 = (void *)sub_224F674C0();
    v20 = objc_msgSend(v17, sel_stringFromPersonNameComponents_, v19);

    v16 = sub_224F67B80();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v24);
  }
  swift_bridgeObjectRetain();
  return v16;
}

uint64_t sub_224ED8B58(uint64_t a1)
{
  uint64_t v2;

  sub_224E7C238();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void **sub_224ED8B94(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    *(_OWORD *)v7 = *(_OWORD *)((char *)a2 + v6);
    *((_QWORD *)v7 + 2) = *(void **)((char *)a2 + v6 + 16);
    v9 = (int *)type metadata accessor for ExtractionContext();
    v10 = v9[7];
    v11 = &v7[v10];
    v12 = &v8[v10];
    v13 = sub_224F67760();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v15 = v4;
    v14(v11, v12, v13);
    v16 = v9[8];
    v17 = &v7[v16];
    v18 = &v8[v16];
    v19 = sub_224F675D4();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v22 = v9[9];
    v23 = &v7[v22];
    v24 = &v8[v22];
    v25 = *((_QWORD *)v24 + 1);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *((_QWORD *)v23 + 1) = v25;
    *(_QWORD *)&v7[v9[10]] = *(_QWORD *)&v8[v9[10]];
    *(_QWORD *)&v7[v9[11]] = *(_QWORD *)&v8[v9[11]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v5;
}

uint64_t sub_224ED8D30(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for ExtractionContext();
  v6 = &v4[*(int *)(v5 + 28)];
  v7 = sub_224F67760();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = &v4[*(int *)(v5 + 32)];
  v9 = sub_224F675D4();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

void **sub_224ED8E04(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  id v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  *(_OWORD *)v6 = *(_OWORD *)((char *)a2 + v5);
  *((_QWORD *)v6 + 2) = *(void **)((char *)a2 + v5 + 16);
  v8 = (int *)type metadata accessor for ExtractionContext();
  v9 = v8[7];
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = sub_224F67760();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v14 = v4;
  v13(v10, v11, v12);
  v15 = v8[8];
  v16 = &v6[v15];
  v17 = &v7[v15];
  v18 = sub_224F675D4();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = v8[9];
  v22 = &v6[v21];
  v23 = &v7[v21];
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  *(_QWORD *)&v6[v8[10]] = *(_QWORD *)&v7[v8[10]];
  *(_QWORD *)&v6[v8[11]] = *(_QWORD *)&v7[v8[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void **sub_224ED8F80(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (void **)((char *)a1 + v9);
  v11 = (char *)a2 + v9;
  *v10 = *(void **)((char *)a2 + v9);
  v10[1] = *(void **)((char *)a2 + v9 + 8);
  v10[2] = *(void **)((char *)a2 + v9 + 16);
  v12 = (int *)type metadata accessor for ExtractionContext();
  v13 = v12[7];
  v14 = (char *)v10 + v13;
  v15 = &v11[v13];
  v16 = sub_224F67760();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = v12[8];
  v18 = (char *)v10 + v17;
  v19 = &v11[v17];
  v20 = sub_224F675D4();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
LABEL_7:
  v26 = v12[9];
  v27 = (_QWORD *)((char *)v10 + v26);
  v28 = &v11[v26];
  *v27 = *(_QWORD *)v28;
  v27[1] = *((_QWORD *)v28 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v10 + v12[10]) = *(_QWORD *)&v11[v12[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v10 + v12[11]) = *(_QWORD *)&v11[v12[11]];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_224ED9178(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_OWORD *)v5 = *(_OWORD *)((char *)a2 + v4);
  *((_QWORD *)v5 + 2) = *(_QWORD *)((char *)a2 + v4 + 16);
  v7 = (int *)type metadata accessor for ExtractionContext();
  v8 = v7[7];
  v9 = &v5[v8];
  v10 = &v6[v8];
  v11 = sub_224F67760();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = v7[8];
  v13 = &v5[v12];
  v14 = &v6[v12];
  v15 = sub_224F675D4();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)&v5[v7[9]] = *(_OWORD *)&v6[v7[9]];
  *(_QWORD *)&v5[v7[10]] = *(_QWORD *)&v6[v7[10]];
  *(_QWORD *)&v5[v7[11]] = *(_QWORD *)&v6[v7[11]];
  return a1;
}

void **sub_224ED92C8(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)((char *)a2 + v7);
  *((_QWORD *)v8 + 2) = *(void **)((char *)a2 + v7 + 16);
  v10 = (int *)type metadata accessor for ExtractionContext();
  v11 = v10[7];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = sub_224F67760();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = v10[8];
  v16 = &v8[v15];
  v17 = &v9[v15];
  v18 = sub_224F675D4();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v16, v17, v18);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_7:
  v24 = v10[9];
  v25 = &v8[v24];
  v26 = &v9[v24];
  v28 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  *(_QWORD *)v25 = v28;
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v8[v10[10]] = *(_QWORD *)&v9[v10[10]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v8[v10[11]] = *(_QWORD *)&v9[v10[11]];
  swift_release();
  return a1;
}

uint64_t sub_224ED9494()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224ED94A0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ExtractionContext();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_224ED951C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_224ED9528(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for ExtractionContext();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for RecordExtractionContext()
{
  uint64_t result;

  result = qword_2557E29D0;
  if (!qword_2557E29D0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_224ED95D8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ExtractionContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id sub_224ED9650(void *a1)
{
  id *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v15;
  id v16;
  uint64_t inited;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  id v44;
  void (*v45)(char *, uint64_t);
  id v46;
  id *v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;

  sub_224DDEA0C(0, &qword_2557E2A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v45 - v7;
  v9 = sub_224F677A8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*((_BYTE *)v1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20) + 8) & 4) != 0)
  {
    sub_224E75FD8();
    swift_allocError();
    *(_QWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    goto LABEL_5;
  }
  if ((objc_msgSend(a1, sel_enteredInError) & 1) != 0)
  {
    sub_224E75FD8();
    swift_allocError();
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
LABEL_5:
    *(_BYTE *)(v13 + 32) = 7;
    return (id)swift_willThrow();
  }
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v15 = objc_msgSend((id)objc_opt_self(), sel_conditionRecordType);
  }
  else
  {
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
    {
      v15 = objc_msgSend((id)objc_opt_self(), sel_labResultRecordType);
    }
    else
    {
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
      {
        v15 = objc_msgSend((id)objc_opt_self(), sel_immunizationRecordType);
      }
      else
      {
        objc_opt_self();
        v39 = swift_dynamicCastObjCClass();
        if (v39)
        {
          v40 = (void *)v39;
          v47 = v1;
          v46 = a1;
          v41 = objc_msgSend(v40, sel_category);
          if (!v41)
          {
            sub_224F67B80();
            v41 = (id)sub_224F67B5C();
            swift_bridgeObjectRelease();
          }
          v42 = (id)HKClinicalTypeForDiagnosticTestResultCategory();

          v16 = v42;
          v1 = v47;
          if (v16)
            goto LABEL_14;
LABEL_28:
          sub_224E75FD8();
          swift_allocError();
          *(_QWORD *)v43 = a1;
          *(_QWORD *)(v43 + 8) = 0;
          *(_QWORD *)(v43 + 16) = 0;
          *(_QWORD *)(v43 + 24) = 0;
          *(_BYTE *)(v43 + 32) = 5;
          v44 = a1;
          return (id)swift_willThrow();
        }
        objc_opt_self();
        if (!swift_dynamicCastObjCClass())
          goto LABEL_28;
        v15 = objc_msgSend((id)objc_opt_self(), sel_clinicalNoteRecordType);
      }
    }
  }
  v16 = v15;
  if (!v16)
    goto LABEL_28;
LABEL_14:
  v46 = v16;
  sub_224DDEA0C(0, &qword_2557E2A10, (uint64_t (*)(uint64_t))sub_224E54350, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  v47 = v1;
  v18 = (_QWORD *)inited;
  *(_OWORD *)(inited + 16) = xmmword_224F6D8B0;
  *(_QWORD *)(inited + 32) = sub_224F67B80();
  v18[5] = v19;
  v20 = objc_msgSend(a1, sel_UUID);
  sub_224F67790();

  v21 = sub_224F67778();
  v23 = v22;
  v45 = *(void (**)(char *, uint64_t))(v10 + 8);
  v45(v12, v9);
  v18[9] = MEMORY[0x24BEE0D00];
  v18[6] = v21;
  v18[7] = v23;
  v24 = sub_224E5226C((uint64_t)v18);
  v25 = objc_msgSend(*v47, sel_signedClinicalDataRecordIdentifier);
  if (v25)
  {
    v26 = v25;
    sub_224F67790();

    v27 = 0;
  }
  else
  {
    v27 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v6, v27, 1, v9);
  sub_224ED9BCC((uint64_t)v6, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_224ED9C28((uint64_t)v8);
  }
  else
  {
    v28 = sub_224F67778();
    v30 = v29;
    v45(v8, v9);
    v31 = sub_224F67B80();
    v33 = v32;
    v51 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v50 = v28;
    *((_QWORD *)&v50 + 1) = v30;
    sub_224E543B4(&v50, &v48);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52 = v24;
    v35 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v48, v49);
    MEMORY[0x24BDAC7A8](v35);
    v37 = (uint64_t *)((char *)&v45 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v38 + 16))(v37);
    sub_224F032E4(*v37, v37[1], v31, v33, isUniquelyReferenced_nonNull_native, &v52);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v46;
}

uint64_t sub_224ED9BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224DDEA0C(0, &qword_2557E2A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_224ED9C28(uint64_t a1)
{
  uint64_t v2;

  sub_224DDEA0C(0, &qword_2557E2A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_224ED9C7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

id sub_224ED9C94()
{
  uint64_t v0;
  id v1;
  id result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  id v10;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 24) + 128) == 1)
  {
    if ((sub_224ED9F6C() & 1) == 0)
    {
      v10 = objc_allocWithZone(MEMORY[0x24BDD3CD0]);
      sub_224E5451C(0, (unint64_t *)&qword_2557E1648);
      v3 = (void *)sub_224F67D60();
      v1 = objc_msgSend(v10, sel_initWithCodings_, v3);
LABEL_11:

      return (id)(*(uint64_t (**)(id))(v0 + 8))(v1);
    }
    v1 = (id)sub_224EEF95C();
    *(_QWORD *)(v0 + 64) = v1;
    sub_224E5451C(0, &qword_2557E2950);
    result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_conditionRecordTypeForIdentifier_, *MEMORY[0x24BDD2AE8]);
    *(_QWORD *)(v0 + 72) = result;
    if (result)
    {
      v3 = result;
      v4 = *(_QWORD *)(v0 + 16);
      v5 = v4 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
      if ((*(_BYTE *)(v5 + 16) & 4) == 0)
      {
        *(_QWORD *)(v0 + 80) = *(_QWORD *)(v5 + *(int *)(type metadata accessor for ExtractionContext() + 44));
        swift_retain();
        v6 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 88) = v6;
        v7 = sub_224ED9F00;
LABEL_9:
        *v6 = v0;
        v6[1] = v7;
        return (id)sub_224ED0FBC((uint64_t)v1, (uint64_t)v3);
      }
      goto LABEL_11;
    }
  }
  else
  {
    v1 = (id)sub_224EEF95C();
    *(_QWORD *)(v0 + 32) = v1;
    sub_224E5451C(0, &qword_2557E2950);
    result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_conditionRecordTypeForIdentifier_, *MEMORY[0x24BDD2AE8]);
    *(_QWORD *)(v0 + 40) = result;
    if (result)
    {
      v3 = result;
      v8 = *(_QWORD *)(v0 + 16);
      v9 = v8 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
      if ((*(_BYTE *)(v9 + 16) & 4) == 0)
      {
        *(_QWORD *)(v0 + 48) = *(_QWORD *)(v9 + *(int *)(type metadata accessor for ExtractionContext() + 44));
        swift_retain();
        v6 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 56) = v6;
        v7 = sub_224E735A0;
        goto LABEL_9;
      }
      goto LABEL_11;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_224ED9F00(uint64_t a1)
{
  uint64_t *v1;
  void *v3;
  void *v4;
  uint64_t v6;

  v4 = *(void **)(*v1 + 64);
  v3 = *(void **)(*v1 + 72);
  v6 = *v1;
  swift_task_dealloc();
  swift_release();

  return (*(uint64_t (**)(uint64_t))(v6 + 8))(a1);
}

uint64_t sub_224ED9F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  uint64_t v21;
  char v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  const char *v34;

  v1 = type metadata accessor for Coding();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v25 - v6;
  sub_224E63218(0, &qword_2557E1438, v8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v25 - v10;
  if (*(_QWORD *)(v0 + 128) != 1)
    return 0;
  result = *(_QWORD *)(v0 + 88);
  if (!result)
    return result;
  v29 = *(_QWORD *)(result + 16);
  if (!v29)
    return 0;
  v28 = result + 32;
  v25 = result;
  swift_bridgeObjectRetain_n();
  v13 = 0;
  v33 = "vaccine-exemption";
  v30 = 0x8000000224F822B0;
  v34 = "Vaccination Exemption";
  v32 = 0x8000000224F82290;
  v26 = v11;
  v27 = v2;
  while (2)
  {
    v14 = v28 + 24 * v13;
    v15 = *(_QWORD *)(v14 + 16);
    if (!v15)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v11, 1, 1, v1);
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
    v16 = *(_QWORD *)(v15 + 16);
    v31 = *(_QWORD *)(v14 + 8);
    if (!v16)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
LABEL_24:
      v11 = v26;
      v2 = v27;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v26, 1, 1, v1);
      goto LABEL_28;
    }
    v17 = v15 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    v18 = *(_QWORD *)(v2 + 72);
    while (1)
    {
      sub_224DDB408(v17, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
      v20 = &v7[*(int *)(v1 + 20)];
      v21 = *((_QWORD *)v20 + 1);
      if (!v21)
      {
        sub_224DDB408((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
        goto LABEL_18;
      }
      if (*(_QWORD *)v20 == 0xD000000000000011 && v21 == v32)
        break;
      v22 = sub_224F683CC();
      sub_224DDB408((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
      if ((v22 & 1) != 0)
        goto LABEL_26;
LABEL_18:
      v23 = &v5[*(int *)(v1 + 20)];
      v24 = *((_QWORD *)v23 + 1);
      if (v24)
      {
        if (*(_QWORD *)v23 == 0xD000000000000019 && v24 == v30)
          goto LABEL_26;
        v19 = sub_224F683CC();
        sub_224DDEAA0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
        if ((v19 & 1) != 0)
          goto LABEL_27;
      }
      else
      {
        sub_224DDEAA0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
      }
      sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
      v17 += v18;
      if (!--v16)
        goto LABEL_24;
    }
    sub_224DDB408((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
LABEL_26:
    sub_224DDEAA0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
LABEL_27:
    v11 = v26;
    sub_224DDEADC((uint64_t)v7, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
    v2 = v27;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v11, 0, 1, v1);
LABEL_28:
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 1, v1) != 1)
    {
      sub_224E7601C((uint64_t)v11, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return 1;
    }
LABEL_6:
    ++v13;
    sub_224E7601C((uint64_t)v11, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13 != v29)
      continue;
    break;
  }
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t sub_224EDA348(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[19] = a1;
  v2[20] = v1;
  sub_224E63218(0, &qword_2557E0308, (void (*)(uint64_t))type metadata accessor for Reference);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  sub_224E63218(0, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  v2[23] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[24] = swift_task_alloc();
  sub_224E63218(0, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v3 = type metadata accessor for Period();
  v2[27] = v3;
  v2[28] = *(_QWORD *)(v3 - 8);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  sub_224F6743C();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v4 = type metadata accessor for FHIRDateTime();
  v2[37] = v4;
  v2[38] = *(_QWORD *)(v4 - 8);
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = *(_QWORD *)(type metadata accessor for Annotation() - 8);
  v2[42] = swift_task_alloc();
  v2[43] = type metadata accessor for ModelsR4.Condition(0);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224EDA5A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  void *v109;
  void *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v3 + 128);
  sub_224DDB408(v3, v2, type metadata accessor for ModelsR4.Condition);
  v5 = *(_QWORD *)(v1 + 360);
  if (v4 == 1)
  {
    v6 = sub_224ED9F6C();
    sub_224DDEAA0(v5, type metadata accessor for ModelsR4.Condition);
    if ((v6 & 1) == 0)
    {
      sub_224E75FD8();
      swift_allocError();
      *(_OWORD *)v7 = xmmword_224F713A0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_BYTE *)(v7 + 32) = 1;
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
  }
  else
  {
    sub_224DDEAA0(*(_QWORD *)(v1 + 360), type metadata accessor for ModelsR4.Condition);
  }
  v8 = *(int **)(v1 + 344);
  v9 = *(_QWORD *)(v1 + 160);
  v10 = *(_QWORD *)(v9 + v8[22]);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 16);
    v12 = MEMORY[0x24BEE4AF8];
    if (v11)
    {
      v13 = *(_QWORD *)(v1 + 328);
      v116 = *(_QWORD *)(v1 + 336);
      v117 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_224E53720(0, v11, 0);
      v14 = v10 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      v114 = *(_QWORD *)(v13 + 72);
      v12 = v117;
      do
      {
        v15 = v1;
        v16 = *(uint64_t **)(v1 + 336);
        sub_224DDB408(v14, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
        v17 = *v16;
        v18 = *(_QWORD *)(v116 + 8);
        swift_bridgeObjectRetain();
        sub_224DDEAA0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_224E53720(0, *(_QWORD *)(v12 + 16) + 1, 1);
          v12 = v117;
        }
        v20 = *(_QWORD *)(v12 + 16);
        v19 = *(_QWORD *)(v12 + 24);
        if (v20 >= v19 >> 1)
        {
          sub_224E53720(v19 > 1, v20 + 1, 1);
          v12 = v117;
        }
        *(_QWORD *)(v12 + 16) = v20 + 1;
        v21 = v12 + 16 * v20;
        *(_QWORD *)(v21 + 32) = v17;
        *(_QWORD *)(v21 + 40) = v18;
        v14 += v114;
        --v11;
        v1 = v15;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)(v1 + 144) = v12;
    sub_224E68104();
    sub_224E79350();
    v22 = sub_224F67B44();
    v24 = v23;
    swift_bridgeObjectRelease();
    v8 = *(int **)(v1 + 344);
    v9 = *(_QWORD *)(v1 + 160);
  }
  else
  {
    v22 = 0;
    v24 = 0;
  }
  *(_QWORD *)(v1 + 368) = v22;
  *(_QWORD *)(v1 + 376) = v24;
  if (*(_QWORD *)(v9 + v8[15] + 8))
  {
    swift_bridgeObjectRetain();
    v25 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v26 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithString_, v25);

  }
  else
  {
    v37 = *(_QWORD *)(v1 + 296);
    v38 = *(_QWORD *)(v1 + 304);
    v39 = *(_QWORD *)(v1 + 288);
    sub_224E75F34(v9 + v8[13], v39, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v39, 1, v37) == 1)
    {
      v40 = *(_QWORD *)(v1 + 344);
      v41 = *(_QWORD *)(v1 + 216);
      v42 = *(_QWORD *)(v1 + 224);
      v43 = *(_QWORD *)(v1 + 208);
      v44 = *(_QWORD *)(v1 + 160);
      sub_224E7601C(*(_QWORD *)(v1 + 288), &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224E75F34(v44 + *(int *)(v40 + 56), v43, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v43, 1, v41) == 1)
      {
        sub_224E7601C(*(_QWORD *)(v1 + 208), &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
      }
      else
      {
        sub_224DDEADC(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 240), (uint64_t (*)(_QWORD))type metadata accessor for Period);
        v62 = Period.asMedicalDateInterval()();
        v110 = v62;
        v111 = *(_QWORD *)(v1 + 240);
        if (v62)
        {
          v26 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithMedicalDateInterval_, v62);

          sub_224DDEAA0(v111, (uint64_t (*)(_QWORD))type metadata accessor for Period);
          goto LABEL_18;
        }
        sub_224DDEAA0(*(_QWORD *)(v1 + 240), (uint64_t (*)(_QWORD))type metadata accessor for Period);
      }
      v26 = 0;
    }
    else
    {
      v54 = *(_QWORD *)(v1 + 320);
      sub_224DDEADC(*(_QWORD *)(v1 + 288), v54, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v55 = *(_QWORD *)(v54 + 56);
      v56 = *(_QWORD *)(v1 + 320);
      if (v55 == 1)
      {
        if ((*(_BYTE *)(v56 + 19) & 1) != 0)
        {
          if (*(_BYTE *)(v56 + 17))
            v57 = 3;
          else
            v57 = 2;
        }
        else
        {
          v57 = 1;
        }
      }
      else
      {
        v57 = 0;
      }
      v93 = *(_QWORD *)(v1 + 296);
      v94 = *(_QWORD *)(v1 + 264);
      sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
      FHIRDateTime.asDateComponents()();
      v95 = (uint64_t *)(v56 + *(int *)(v93 + 32));
      v96 = *v95;
      v97 = v95[1];
      swift_bridgeObjectRetain();
      v98 = sub_224F00474(v94, v96, v97, v57);
      v99 = *(_QWORD *)(v1 + 320);
      v100 = v98;
      v26 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithMedicalDate_, v98);

      sub_224DDEAA0(v99, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    }
  }
LABEL_18:
  *(_QWORD *)(v1 + 384) = v26;
  v27 = *(_QWORD *)(v1 + 344);
  v28 = *(_QWORD *)(v1 + 160);
  if (*(_QWORD *)(v28 + *(int *)(v27 + 72) + 8))
  {
    swift_bridgeObjectRetain();
    v29 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v30 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithString_, v29);

  }
  else
  {
    v46 = *(_QWORD *)(v1 + 296);
    v47 = *(_QWORD *)(v1 + 304);
    v48 = *(_QWORD *)(v1 + 280);
    sub_224E75F34(v28 + *(int *)(v27 + 64), v48, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v48, 1, v46) == 1)
    {
      v49 = *(_QWORD *)(v1 + 344);
      v50 = *(_QWORD *)(v1 + 216);
      v51 = *(_QWORD *)(v1 + 224);
      v52 = *(_QWORD *)(v1 + 200);
      v53 = *(_QWORD *)(v1 + 160);
      sub_224E7601C(*(_QWORD *)(v1 + 280), &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224E75F34(v53 + *(int *)(v49 + 68), v52, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v52, 1, v50) == 1)
      {
        sub_224E7601C(*(_QWORD *)(v1 + 200), &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
        v30 = 0;
      }
      else
      {
        sub_224DDEADC(*(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 232), (uint64_t (*)(_QWORD))type metadata accessor for Period);
        v92 = Period.asMedicalDateInterval()();
        v112 = v92;
        v113 = *(_QWORD *)(v1 + 232);
        if (v92)
        {
          v30 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithMedicalDateInterval_, v92);

          sub_224DDEAA0(v113, (uint64_t (*)(_QWORD))type metadata accessor for Period);
        }
        else
        {
          sub_224DDEAA0(*(_QWORD *)(v1 + 232), (uint64_t (*)(_QWORD))type metadata accessor for Period);
          v30 = 0;
        }
      }
    }
    else
    {
      v58 = *(_QWORD *)(v1 + 312);
      sub_224DDEADC(*(_QWORD *)(v1 + 280), v58, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v59 = *(_QWORD *)(v58 + 56);
      v60 = *(_QWORD *)(v1 + 312);
      if (v59 == 1)
      {
        if ((*(_BYTE *)(v60 + 19) & 1) != 0)
        {
          if (*(_BYTE *)(v60 + 17))
            v61 = 3;
          else
            v61 = 2;
        }
        else
        {
          v61 = 1;
        }
      }
      else
      {
        v61 = 0;
      }
      v101 = *(_QWORD *)(v1 + 296);
      v102 = *(_QWORD *)(v1 + 256);
      sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
      FHIRDateTime.asDateComponents()();
      v103 = (uint64_t *)(v60 + *(int *)(v101 + 32));
      v104 = *v103;
      v105 = v103[1];
      swift_bridgeObjectRetain();
      v106 = sub_224F00474(v102, v104, v105, v61);
      v107 = *(_QWORD *)(v1 + 312);
      v109 = v106;
      v30 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithMedicalDate_, v106);

      sub_224DDEAA0(v107, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    }
  }
  *(_QWORD *)(v1 + 392) = v30;
  v31 = *(_QWORD *)(v1 + 296);
  v32 = *(_QWORD *)(v1 + 304);
  v33 = *(_QWORD *)(v1 + 272);
  sub_224E75F34(*(_QWORD *)(v1 + 160) + *(int *)(*(_QWORD *)(v1 + 344) + 76), v33, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v33, 1, v31);
  v35 = *(_QWORD *)(v1 + 272);
  if (v34 == 1)
  {
    sub_224E7601C(*(_QWORD *)(v1 + 272), &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v36 = 0;
  }
  else
  {
    if (*(_QWORD *)(v35 + 56) == 1)
    {
      if ((*(_BYTE *)(v35 + 19) & 1) != 0)
      {
        if (*(_BYTE *)(v35 + 17))
          v45 = 3;
        else
          v45 = 2;
      }
      else
      {
        v45 = 1;
      }
    }
    else
    {
      v45 = 0;
    }
    v63 = *(_QWORD *)(v1 + 296);
    v64 = *(_QWORD *)(v1 + 248);
    sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
    FHIRDateTime.asDateComponents()();
    v65 = (uint64_t *)(v35 + *(int *)(v63 + 32));
    v66 = *v65;
    v67 = v65[1];
    swift_bridgeObjectRetain();
    v36 = sub_224F00474(v64, v66, v67, v45);
    sub_224DDEAA0(*(_QWORD *)(v1 + 272), (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  }
  *(_QWORD *)(v1 + 400) = v36;
  v68 = *(_QWORD **)(v1 + 160);
  v69 = v68[6];
  if (v69 == 1)
  {
    v70 = 0;
  }
  else
  {
    v71 = v1;
    v72 = v68[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v70 = sub_224EEFE2C(0xD000000000000038, 0x8000000224F82310);
    v73 = v72;
    v1 = v71;
    sub_224DDB480(v73, v69);
    v68 = *(_QWORD **)(v71 + 160);
  }
  *(_QWORD *)(v1 + 408) = v70;
  v74 = v68[9];
  if (v74 == 1)
  {
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v81 = 0;
  }
  else
  {
    v115 = v68[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_224F22F08(0xD00000000000003ALL, 0x8000000224F822D0, v1 + 72);
    v75 = *(_QWORD *)(v1 + 72);
    v76 = *(_QWORD *)(v1 + 80);
    v77 = *(_QWORD *)(v1 + 88);
    v78 = *(_QWORD *)(v1 + 96);
    v79 = *(_QWORD *)(v1 + 104);
    v80 = *(_QWORD *)(v1 + 112);
    v81 = *(_QWORD *)(v1 + 120);
    sub_224DDB480(v115, v74);
    v68 = *(_QWORD **)(v1 + 160);
  }
  *(_QWORD *)(v1 + 456) = v80;
  *(_QWORD *)(v1 + 464) = v81;
  *(_QWORD *)(v1 + 440) = v78;
  *(_QWORD *)(v1 + 448) = v79;
  *(_QWORD *)(v1 + 424) = v76;
  *(_QWORD *)(v1 + 432) = v77;
  *(_QWORD *)(v1 + 416) = v75;
  *(_QWORD *)(v1 + 16) = v75;
  *(_QWORD *)(v1 + 24) = v76;
  *(_QWORD *)(v1 + 32) = v77;
  *(_QWORD *)(v1 + 40) = v78;
  *(_QWORD *)(v1 + 48) = v79;
  *(_QWORD *)(v1 + 56) = v80;
  *(_QWORD *)(v1 + 64) = v81;
  v82 = v68[11];
  if (v82)
  {
    v83 = Array<A>.asCodingCollectionArray()(v82);
    v68 = *(_QWORD **)(v1 + 160);
  }
  else
  {
    v83 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(v1 + 472) = v83;
  if (v68[13] == 1)
  {
    v84 = 0;
  }
  else
  {
    v84 = sub_224EEF95C();
    v68 = *(_QWORD **)(v1 + 160);
  }
  *(_QWORD *)(v1 + 480) = v84;
  v85 = v68[18];
  if (v85)
  {
    v85 = Array<A>.asCodingCollectionArray()(v85);
    v68 = *(_QWORD **)(v1 + 160);
  }
  *(_QWORD *)(v1 + 488) = v85;
  v86 = *(_QWORD *)(v1 + 344);
  sub_224DDB408(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 192), (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v87 = *(_QWORD *)((char *)v68 + *(int *)(v86 + 92) + 8);
  v88 = *(_QWORD *)(v1 + 184);
  if (v87)
  {
    swift_bridgeObjectRetain();
    sub_224F677B4();
    v89 = sub_224F677D8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v88, 0, 1, v89);
  }
  else
  {
    v90 = sub_224F677D8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v88, 1, 1, v90);
  }
  v91 = swift_task_alloc();
  *(_QWORD *)(v1 + 496) = v91;
  *(_QWORD *)v91 = v1;
  *(_QWORD *)(v91 + 8) = sub_224EDB2B0;
  *(_OWORD *)(v91 + 16) = *(_OWORD *)(v1 + 152);
  return swift_task_switch();
}

uint64_t sub_224EDB2B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 128) = v1;
  *(_QWORD *)(v2 + 136) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224EDB308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  id v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;

  v1 = *(_QWORD *)(v0 + 176);
  sub_224E75F34(*(_QWORD *)(v0 + 160) + *(int *)(*(_QWORD *)(v0 + 344) + 84), v1, &qword_2557E0308, (void (*)(uint64_t))type metadata accessor for Reference);
  v2 = type metadata accessor for Reference();
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48);
  v4 = v3(v1, 1, v2);
  v5 = *(_QWORD *)(v0 + 352);
  v6 = *(uint64_t **)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 160);
  if (v4 == 1)
  {
    sub_224E7601C(*(_QWORD *)(v0 + 176), &qword_2557E0308, (void (*)(uint64_t))type metadata accessor for Reference);
    sub_224DDB408(v7, v5, type metadata accessor for ModelsR4.Condition);
  }
  else
  {
    v8 = *v6;
    v9 = v6[1];
    swift_bridgeObjectRetain();
    sub_224DDEAA0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
    sub_224DDB408(v7, v5, type metadata accessor for ModelsR4.Condition);
    if (v9)
    {
      sub_224DDEAA0(*(_QWORD *)(v0 + 352), type metadata accessor for ModelsR4.Condition);
      v25 = v9;
      v26 = v8;
      goto LABEL_8;
    }
  }
  v10 = *(_QWORD *)(v0 + 352);
  v11 = *(_QWORD *)(v0 + 168);
  sub_224E75F34(v10 + *(int *)(*(_QWORD *)(v0 + 344) + 80), v11, &qword_2557E0308, (void (*)(uint64_t))type metadata accessor for Reference);
  sub_224DDEAA0(v10, type metadata accessor for ModelsR4.Condition);
  v12 = v3(v11, 1, v2);
  v13 = *(uint64_t **)(v0 + 168);
  if (v12 == 1)
  {
    sub_224E7601C(*(_QWORD *)(v0 + 168), &qword_2557E0308, (void (*)(uint64_t))type metadata accessor for Reference);
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v25 = v13[1];
    v26 = *v13;
    swift_bridgeObjectRetain();
    sub_224DDEAA0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  }
LABEL_8:
  v14 = *(void **)(v0 + 480);
  v27 = *(_QWORD *)(v0 + 488);
  v28 = *(_QWORD *)(v0 + 472);
  v29 = *(void **)(v0 + 136);
  v15 = *(void **)(v0 + 408);
  v30 = *(void **)(v0 + 416);
  v17 = *(void **)(v0 + 392);
  v16 = *(void **)(v0 + 400);
  v19 = *(_QWORD *)(v0 + 376);
  v18 = *(void **)(v0 + 384);
  v20 = *(_QWORD *)(v0 + 368);
  v21 = *(uint64_t **)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 184);
  sub_224E5451C(0, &qword_2557E2A28);
  v23 = sub_224F2EC5C(v21, v22, v20, v19, v29, v28, v26, v25, (uint64_t)v17, (uint64_t)v18, (uint64_t)v16, (uint64_t)v15, (void **)(v0 + 16), (uint64_t)v14, v27);

  sub_224EDB6A0(v30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v23);
}

void *sub_224EDB6A0(void *result)
{
  if (result)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t SignedClinicalDataEUDCC.init(from:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[7];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  v7 = sub_224F678BC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F678E0();
  swift_allocObject();
  v11 = sub_224F678D4();
  sub_224EDBB5C();
  sub_224F678C8();
  if (v3)
  {
    sub_224DDE9B4(a1, a2);
    return swift_release();
  }
  v56 = v11;
  v79 = v7;
  v57 = a1;
  v54 = a3;
  v55 = v8;
  v13 = v10;
  v14 = sub_224F67880();
  if (v15 >> 60 == 15)
  {
    sub_224EDBBA4();
    swift_allocError();
    *(_QWORD *)v16 = 0;
    *(_BYTE *)(v16 + 8) = 1;
    swift_willThrow();
    swift_release();
    sub_224DDE9B4(v57, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v13, v79);
  }
  v52 = v14;
  v53 = v15;
  v17 = MEMORY[0x22768D968]();
  v19 = v18;
  v20 = sub_224F678A4();
  if (v21 >> 60 == 15)
  {
    v22 = v79;
    sub_224EDBBA4();
    swift_allocError();
    *(_QWORD *)v23 = 1;
    *(_BYTE *)(v23 + 8) = 1;
    swift_willThrow();
    swift_release();
    sub_224DDE9B4(v17, v19);
    sub_224DDE9B4(v57, a2);
    sub_224E58810(v52, v53);
    return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v13, v22);
  }
  else
  {
    v24 = v20;
    v25 = v21;
    v48 = v13;
    v49 = a2;
    v50 = v17;
    v51 = v19;
    sub_224EDBBE8();
    sub_224F678C8();
    v26 = v57;
    v65 = v75;
    v66 = v76;
    v67 = v77;
    v68 = v78;
    v61 = v71;
    v62 = v72;
    v63 = v73;
    v64 = v74;
    v59 = v69;
    v60 = v70;
    v13 = v48;
    v27 = sub_224F6788C();
    v28 = v49;
    if (v27 == -37)
    {
      v46 = v25;
      v30 = v49;
      v31 = 3;
    }
    else
    {
      v29 = v27;
      if (v27 != -7)
      {
        sub_224EDC3C8((uint64_t)&v59);
        sub_224EDBBA4();
        swift_allocError();
        *(_QWORD *)v44 = v29;
        *(_BYTE *)(v44 + 8) = 0;
        swift_willThrow();
        swift_release();
        sub_224DDE9B4(v50, v51);
        sub_224E58810(v24, v25);
        sub_224DDE9B4(v26, v28);
        sub_224E58810(v52, v53);
        return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v13, v79);
      }
      v46 = v25;
      v30 = v49;
      v31 = 1;
    }
    v47 = v31;
    v33 = v52;
    v32 = v53;
    sub_224DDE970(v52, v53);
    sub_224DDE970(v33, v32);
    v52 = sub_224F678B0();
    v45 = v34;
    swift_release();
    sub_224DDE9B4(v26, v30);
    sub_224E58810(v33, v32);
    sub_224E58810(v33, v32);
    result = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v13, v79);
    v35 = v66;
    v36 = v54;
    *(_OWORD *)(v54 + 152) = v65;
    *(_OWORD *)(v36 + 168) = v35;
    *(_OWORD *)(v36 + 184) = v67;
    v37 = v62;
    *(_OWORD *)(v36 + 88) = v61;
    *(_OWORD *)(v36 + 104) = v37;
    v38 = v64;
    *(_OWORD *)(v36 + 120) = v63;
    *(_OWORD *)(v36 + 136) = v38;
    v39 = v60;
    *(_OWORD *)(v36 + 56) = v59;
    v40 = v68;
    *(_OWORD *)(v36 + 72) = v39;
    v41 = v51;
    *(_QWORD *)v36 = v50;
    *(_QWORD *)(v36 + 8) = v41;
    *(_BYTE *)(v36 + 16) = v47;
    *(_DWORD *)(v36 + 17) = *(_DWORD *)v58;
    *(_DWORD *)(v36 + 20) = *(_DWORD *)&v58[3];
    *(_QWORD *)(v36 + 24) = v33;
    *(_QWORD *)(v36 + 32) = v32;
    v42 = v46;
    *(_QWORD *)(v36 + 40) = v24;
    *(_QWORD *)(v36 + 48) = v42;
    v43 = v52;
    *(_QWORD *)(v36 + 200) = v40;
    *(_QWORD *)(v36 + 208) = v43;
    *(_QWORD *)(v36 + 216) = v45;
  }
  return result;
}

unint64_t sub_224EDBB5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E2A30;
  if (!qword_2557E2A30)
  {
    v1 = sub_224F678BC();
    result = MEMORY[0x22768ED24](MEMORY[0x24BE10158], v1);
    atomic_store(result, (unint64_t *)&qword_2557E2A30);
  }
  return result;
}

unint64_t sub_224EDBBA4()
{
  unint64_t result;

  result = qword_2557E2A38;
  if (!qword_2557E2A38)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCError, &type metadata for SignedClinicalDataEUDCCError);
    atomic_store(result, (unint64_t *)&qword_2557E2A38);
  }
  return result;
}

unint64_t sub_224EDBBE8()
{
  unint64_t result;

  result = qword_2557E2A40;
  if (!qword_2557E2A40)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCPayload, &type metadata for SignedClinicalDataEUDCCPayload);
    atomic_store(result, (unint64_t *)&qword_2557E2A40);
  }
  return result;
}

uint64_t sub_224EDBC2C(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  unsigned int v28;
  char v29;

  v3 = sub_224F68138();
  v24 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_224F68144();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a1;
  sub_224DFB77C(0, &qword_2557E2AB8, (uint64_t (*)(void))sub_224EDE1E0, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v11 = v10;
  v12 = sub_224F682D0();
  if (v1)
  {
    v27 = v1;
    v13 = v1;
    sub_224E57260();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v14 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
      if (v14 == *MEMORY[0x24BEE26D0])
      {
        v28 = v14;

        (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
        v23 = *(char **)v9;
        sub_224E6FB38();
        v16 = v15;
        (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v5, &v9[*(int *)(v15 + 48)], v3);
        sub_224F682C4();
        if (v17 > -9.22337204e18 && v17 < 9.22337204e18 && v17 == trunc(v17))
        {
          a1 = (uint64_t)v17;
          (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v3);

          return a1;
        }
        swift_allocError();
        v19 = v18;
        v23 = (char *)v18 + *(int *)(v16 + 48);
        *v18 = v11;
        sub_224F68120();
        v25 = 0;
        v26 = 0xE000000000000000;
        sub_224F680E4();
        sub_224F67C94();
        sub_224F6812C();
        a1 = v20;
        sub_224F67C94();
        swift_bridgeObjectRelease();
        sub_224F68114();
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v19, v28, v6);
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v3);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
    }

    return a1;
  }
  return v12;
}

double sub_224EDBFA4(char a1)
{
  void *v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  id v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD v18[3];
  int v19;
  id v20;
  char v21;

  v4 = sub_224F68138();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_224F68144();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1;
  sub_224DFB77C(0, &qword_2557E2A90, (uint64_t (*)(void))sub_224EDD374, (uint64_t)&type metadata for SignedClinicalDataEUDCCPayload.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  sub_224F682C4();
  if (!v1)
    return v12;
  v20 = v1;
  v13 = v1;
  sub_224E57260();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:

    return v2;
  }
  v14 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  if (v14 != *MEMORY[0x24BEE26D0])
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    goto LABEL_7;
  }
  v19 = v14;

  (*(void (**)(char *, uint64_t))(v9 + 96))(v11, v8);
  v18[2] = *(_QWORD *)v11;
  sub_224E6FB38();
  v18[1] = v15;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, &v11[*(int *)(v15 + 48)], v4);
  v17 = sub_224F682D0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v2 = (double)v17;

  return v2;
}

uint64_t SignedClinicalDataEUDCC.protectedHeaderData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_224DDE970(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t SignedClinicalDataEUDCC.header.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  return sub_224DDE970(v2, v3);
}

uint64_t SignedClinicalDataEUDCC.payloadData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_224DDE970(v1, *(_QWORD *)(v0 + 48));
  return v1;
}

uint64_t SignedClinicalDataEUDCC.payload.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[9];
  uint64_t v12;

  v2 = *(_OWORD *)(v1 + 168);
  v11[6] = *(_OWORD *)(v1 + 152);
  v11[7] = v2;
  v11[8] = *(_OWORD *)(v1 + 184);
  v12 = *(_QWORD *)(v1 + 200);
  v3 = *(_OWORD *)(v1 + 104);
  v11[2] = *(_OWORD *)(v1 + 88);
  v11[3] = v3;
  v4 = *(_OWORD *)(v1 + 136);
  v11[4] = *(_OWORD *)(v1 + 120);
  v11[5] = v4;
  v5 = *(_OWORD *)(v1 + 72);
  v11[0] = *(_OWORD *)(v1 + 56);
  v11[1] = v5;
  v6 = *(_OWORD *)(v1 + 168);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 152);
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 184);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v1 + 200);
  v7 = *(_OWORD *)(v1 + 104);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 88);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(v1 + 136);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 120);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 16) = v9;
  return sub_224EDC478((uint64_t)v11);
}

uint64_t SignedClinicalDataEUDCC.signatureData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 208);
  sub_224DDE970(v1, *(_QWORD *)(v0 + 216));
  return v1;
}

__n128 SignedClinicalDataEUDCC.init(header:protectedHeaderData:payload:payloadData:signatureData:)@<Q0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  __n128 result;

  v9 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(a9 + 152) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(a9 + 168) = v9;
  *(_OWORD *)(a9 + 184) = *(_OWORD *)(a4 + 128);
  v10 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a9 + 88) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a9 + 104) = v10;
  v11 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(a9 + 120) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a9 + 136) = v11;
  v12 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a9 + 56) = *(_OWORD *)a4;
  v13 = *a1;
  v14 = *(_QWORD *)(a4 + 144);
  *(_OWORD *)(a9 + 72) = v12;
  *(_QWORD *)a9 = a2;
  *(_QWORD *)(a9 + 8) = a3;
  *(_BYTE *)(a9 + 16) = v13;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a9 + 24) = result;
  *(_QWORD *)(a9 + 40) = a5;
  *(_QWORD *)(a9 + 48) = a6;
  *(_QWORD *)(a9 + 200) = v14;
  *(_QWORD *)(a9 + 208) = a7;
  *(_QWORD *)(a9 + 216) = a8;
  return result;
}

uint64_t sub_224EDC3C8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *SignedClinicalDataEUDCCHeader.init(alg:kid:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = *result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  return result;
}

uint64_t sub_224EDC478(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_224EDC518()
{
  sub_224F68510();
  sub_224F6851C();
  return sub_224F6854C();
}

uint64_t sub_224EDC564()
{
  return sub_224F6851C();
}

uint64_t sub_224EDC598()
{
  sub_224F68510();
  sub_224F6851C();
  return sub_224F6854C();
}

_QWORD *sub_224EDC5E0@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 4)
    v2 = 1;
  else
    v2 = 2;
  if (*result == 1)
    v3 = 0;
  else
    v3 = v2;
  *a2 = v3;
  return result;
}

void sub_224EDC600(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 4;
  if (!*v1)
    v2 = 1;
  *a1 = v2;
}

uint64_t sub_224EDC618()
{
  _BYTE *v0;

  if (*v0)
    return 6580587;
  else
    return 6777953;
}

uint64_t sub_224EDC63C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224EE5784(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224EDC660()
{
  _BYTE *v0;

  if (*v0)
    return 4;
  else
    return 1;
}

uint64_t sub_224EDC678@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 4)
    v2 = 1;
  else
    v2 = 2;
  if (result == 1)
    v2 = 0;
  *a2 = v2;
  return result;
}

uint64_t sub_224EDC694()
{
  sub_224EDC890();
  return sub_224F685B8();
}

uint64_t sub_224EDC6BC()
{
  sub_224EDC890();
  return sub_224F685C4();
}

void SignedClinicalDataEUDCCHeader.alg.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t SignedClinicalDataEUDCCHeader.kid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_224DDE970(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t SignedClinicalDataEUDCCHeader.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  sub_224DFB77C(0, &qword_2557E2A48, (uint64_t (*)(void))sub_224EDC890, (uint64_t)&type metadata for SignedClinicalDataEUDCCHeader.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v12 - v6;
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v13 = *((_QWORD *)v1 + 2);
  v14 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224EDC890();
  sub_224F68594();
  LOBYTE(v16) = v8;
  v18 = 0;
  sub_224EDC8D4();
  v10 = v15;
  sub_224F68378();
  if (!v10)
  {
    v16 = v14;
    v17 = v13;
    v18 = 1;
    sub_224EDC918();
    sub_224F68378();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_224EDC890()
{
  unint64_t result;

  result = qword_2557E2A50;
  if (!qword_2557E2A50)
  {
    result = MEMORY[0x22768ED24](&unk_224F723E4, &type metadata for SignedClinicalDataEUDCCHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2A50);
  }
  return result;
}

unint64_t sub_224EDC8D4()
{
  unint64_t result;

  result = qword_2557E2A58;
  if (!qword_2557E2A58)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignatureAlgorithm, &type metadata for SignatureAlgorithm);
    atomic_store(result, (unint64_t *)&qword_2557E2A58);
  }
  return result;
}

unint64_t sub_224EDC918()
{
  unint64_t result;

  result = qword_2557E2A60;
  if (!qword_2557E2A60)
  {
    result = MEMORY[0x22768ED24](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2557E2A60);
  }
  return result;
}

uint64_t SignedClinicalDataEUDCCHeader.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;

  v14 = a2;
  sub_224DFB77C(0, &qword_2557E2A68, (uint64_t (*)(void))sub_224EDC890, (uint64_t)&type metadata for SignedClinicalDataEUDCCHeader.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v13 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224EDC890();
  sub_224F6857C();
  if (!v2)
  {
    v9 = v14;
    v16 = 0;
    sub_224EDCAFC();
    sub_224F682DC();
    v10 = v15;
    v16 = 1;
    sub_224EDCB40();
    sub_224F682DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v15;
    *(_BYTE *)v9 = v10;
    *(_OWORD *)(v9 + 8) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_224EDCAFC()
{
  unint64_t result;

  result = qword_2557E2A70;
  if (!qword_2557E2A70)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignatureAlgorithm, &type metadata for SignatureAlgorithm);
    atomic_store(result, (unint64_t *)&qword_2557E2A70);
  }
  return result;
}

unint64_t sub_224EDCB40()
{
  unint64_t result;

  result = qword_2557E2A78;
  if (!qword_2557E2A78)
  {
    result = MEMORY[0x22768ED24](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2557E2A78);
  }
  return result;
}

uint64_t sub_224EDCB84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SignedClinicalDataEUDCCHeader.init(from:)(a1, a2);
}

uint64_t sub_224EDCB98(_QWORD *a1)
{
  return SignedClinicalDataEUDCCHeader.encode(to:)(a1);
}

BOOL sub_224EDCBAC(char *a1, char *a2)
{
  return qword_224F72438[*a1] == qword_224F72438[*a2];
}

uint64_t sub_224EDCBD0()
{
  sub_224F68510();
  sub_224F6851C();
  return sub_224F6854C();
}

uint64_t sub_224EDCC1C()
{
  return sub_224F6851C();
}

uint64_t sub_224EDCC50()
{
  sub_224F68510();
  sub_224F6851C();
  return sub_224F6854C();
}

uint64_t sub_224EDCC98@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_224EE5854(*a1);
  *a2 = result;
  return result;
}

void sub_224EDCCC0(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_224F72438[*v1];
}

uint64_t sub_224EDCCD8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224EDCD00 + 4 * byte_224F714D0[*v0]))(7566185, 0xE300000000000000);
}

uint64_t sub_224EDCD00()
{
  return 7627113;
}

uint64_t sub_224EDCD0C()
{
  return 7370853;
}

uint64_t sub_224EDCD18()
{
  return 0x7472656368;
}

uint64_t sub_224EDCD2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224EE58A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224EDCD50()
{
  char *v0;

  return qword_224F72438[*v0];
}

uint64_t sub_224EDCD68@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_224EE5A24(a1);
  *a2 = result;
  return result;
}

uint64_t sub_224EDCD8C()
{
  sub_224EDD374();
  return sub_224F685B8();
}

uint64_t sub_224EDCDB4()
{
  sub_224EDD374();
  return sub_224F685C4();
}

uint64_t SignedClinicalDataEUDCCPayload.iss.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

double SignedClinicalDataEUDCCPayload.iat.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double SignedClinicalDataEUDCCPayload.exp.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t SignedClinicalDataEUDCCPayload.hcert.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_BYTE *)(v1 + 40);
  v3 = *(_BYTE *)(v1 + 41);
  v4 = *(_BYTE *)(v1 + 42);
  v5 = *(_BYTE *)(v1 + 43);
  v6 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 72);
  v7 = *(_QWORD *)(v1 + 80);
  v9 = *(_QWORD *)(v1 + 104);
  v10 = *(_QWORD *)(v1 + 112);
  v11 = *(_QWORD *)(v1 + 120);
  v12 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 9) = v3;
  *(_BYTE *)(a1 + 10) = v4;
  *(_BYTE *)(a1 + 11) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 88);
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v11;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 128);
  *(_QWORD *)(a1 + 112) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t SignedClinicalDataEUDCCPayload.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  char v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _QWORD v54[5];
  char v55;
  char v56;
  char v57;
  char v58;
  __int128 v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  char v81;

  v38 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  sub_224DFB77C(0, &qword_2557E2A80, (uint64_t (*)(void))sub_224EDD330, (uint64_t)&type metadata for SignedClinicalDataEUDCCPayload.CertCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v41 = v4;
  v39 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v40 = (char *)&v30 - v5;
  sub_224DFB77C(0, &qword_2557E2A90, (uint64_t (*)(void))sub_224EDD374, (uint64_t)&type metadata for SignedClinicalDataEUDCCPayload.CodingKeys, v3);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v30 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224EDD374();
  v42 = v10;
  v11 = (uint64_t)v43;
  sub_224F6857C();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v43 = a1;
  v12 = v40;
  v13 = v41;
  LOBYTE(v54[0]) = 0;
  v14 = sub_224F682AC();
  v16 = v15;
  v37 = v14;
  swift_bridgeObjectRetain();
  v17 = sub_224EDBFA4(1);
  v18 = sub_224EDBFA4(2);
  LOBYTE(v54[0]) = 3;
  sub_224EDD330();
  sub_224F68258();
  sub_224EDD3B8();
  sub_224F682DC();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v42, v7);
  v19 = v71;
  v20 = v72;
  v21 = BYTE2(v72);
  v22 = v73;
  v41 = *((_QWORD *)&v74 + 1);
  v42 = (char *)v74;
  v39 = *((_QWORD *)&v75 + 1);
  v40 = (char *)v75;
  v35 = *((_QWORD *)&v76 + 1);
  v36 = v76;
  v33 = *((_QWORD *)&v77 + 1);
  v34 = v77;
  v31 = *((_QWORD *)&v78 + 1);
  v32 = v78;
  v30 = v79;
  v81 = BYTE1(v72);
  v80 = HIBYTE(v72);
  v23 = v37;
  *(_QWORD *)&v44 = v37;
  *((_QWORD *)&v44 + 1) = v16;
  *(double *)&v45 = v17;
  *((double *)&v45 + 1) = v18;
  *(_QWORD *)&v46 = v71;
  DWORD2(v46) = v72;
  v47 = v73;
  v48 = v74;
  v49 = v75;
  v50 = v76;
  v51 = v77;
  v52 = v78;
  v53 = v79;
  sub_224EDC478((uint64_t)&v44);
  swift_bridgeObjectRelease();
  v24 = v51;
  v25 = v38;
  *(_OWORD *)(v38 + 96) = v50;
  *(_OWORD *)(v25 + 112) = v24;
  *(_OWORD *)(v25 + 128) = v52;
  *(_QWORD *)(v25 + 144) = v53;
  v26 = v47;
  *(_OWORD *)(v25 + 32) = v46;
  *(_OWORD *)(v25 + 48) = v26;
  v27 = v49;
  *(_OWORD *)(v25 + 64) = v48;
  *(_OWORD *)(v25 + 80) = v27;
  v28 = v45;
  *(_OWORD *)v25 = v44;
  *(_OWORD *)(v25 + 16) = v28;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  v54[0] = v23;
  v54[1] = v16;
  *(double *)&v54[2] = v17;
  *(double *)&v54[3] = v18;
  v54[4] = v19;
  v55 = v20;
  v56 = v81;
  v57 = v21;
  v58 = v80;
  v59 = v22;
  v60 = v42;
  v61 = v41;
  v62 = v40;
  v63 = v39;
  v64 = v36;
  v65 = v35;
  v66 = v34;
  v67 = v33;
  v68 = v32;
  v69 = v31;
  v70 = v30;
  return sub_224EDC3C8((uint64_t)v54);
}

unint64_t sub_224EDD330()
{
  unint64_t result;

  result = qword_2557E2A88;
  if (!qword_2557E2A88)
  {
    result = MEMORY[0x22768ED24](&unk_224F72394, &type metadata for SignedClinicalDataEUDCCPayload.CertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2A88);
  }
  return result;
}

unint64_t sub_224EDD374()
{
  unint64_t result;

  result = qword_2557E2A98;
  if (!qword_2557E2A98)
  {
    result = MEMORY[0x22768ED24](&unk_224F72344, &type metadata for SignedClinicalDataEUDCCPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2A98);
  }
  return result;
}

unint64_t sub_224EDD3B8()
{
  unint64_t result;

  result = qword_2557E2AA0;
  if (!qword_2557E2AA0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry, &type metadata for SignedClinicalDataEUDCCEntry);
    atomic_store(result, (unint64_t *)&qword_2557E2AA0);
  }
  return result;
}

__n128 SignedClinicalDataEUDCCPayload.init(iss:iat:exp:hcert:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  unint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  __n128 result;
  __n128 v15;
  char v16;

  v6 = a3->n128_u64[0];
  v7 = a3->n128_i8[8];
  v9 = a3->n128_i8[10];
  v10 = a3[2].n128_i64[0];
  v11 = a3[2].n128_i64[1];
  v12 = a3[7].n128_i64[0];
  v8 = a3->n128_i8[9];
  v16 = a3->n128_i8[11];
  a4->n128_u64[0] = a1;
  a4->n128_u64[1] = a2;
  a4[1].n128_f64[0] = a5;
  a4[1].n128_f64[1] = a6;
  a4[2].n128_u64[0] = v6;
  a4[2].n128_u8[8] = v7;
  a4[2].n128_u8[9] = v8;
  a4[2].n128_u8[10] = v9;
  a4[2].n128_u8[11] = v16;
  a4[3] = a3[1];
  a4[4].n128_u64[0] = v10;
  a4[4].n128_u64[1] = v11;
  v13 = a3[4];
  a4[5] = a3[3];
  a4[6] = v13;
  result = a3[5];
  v15 = a3[6];
  a4[7] = result;
  a4[8] = v15;
  a4[9].n128_u64[0] = v12;
  return result;
}

uint64_t SignedClinicalDataEUDCCPayload.debugDescription.getter()
{
  sub_224F680E4();
  sub_224F67C94();
  swift_bridgeObjectRetain();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  sub_224F67E74();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  sub_224F67E74();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  return 0;
}

uint64_t SignedClinicalDataEUDCCPayload.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;

  sub_224DFB77C(0, &qword_2557E2AA8, (uint64_t (*)(void))sub_224EDD374, (uint64_t)&type metadata for SignedClinicalDataEUDCCPayload.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v15 - v6;
  v32 = *(_QWORD *)(v1 + 32);
  v52 = *(unsigned __int8 *)(v1 + 40);
  v8 = *(unsigned __int8 *)(v1 + 41);
  v30 = *(unsigned __int8 *)(v1 + 42);
  v31 = v8;
  v29 = *(unsigned __int8 *)(v1 + 43);
  v28 = *(_QWORD *)(v1 + 48);
  v27 = *(_QWORD *)(v1 + 56);
  v26 = *(_QWORD *)(v1 + 64);
  v25 = *(_QWORD *)(v1 + 72);
  v24 = *(_QWORD *)(v1 + 80);
  v23 = *(_QWORD *)(v1 + 88);
  v22 = *(_QWORD *)(v1 + 96);
  v21 = *(_QWORD *)(v1 + 104);
  v20 = *(_QWORD *)(v1 + 112);
  v19 = *(_QWORD *)(v1 + 120);
  v18 = *(_QWORD *)(v1 + 128);
  v17 = *(_QWORD *)(v1 + 136);
  v16 = *(_QWORD *)(v1 + 144);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224EDD374();
  sub_224F68594();
  LOBYTE(v34) = 0;
  v9 = v33;
  sub_224F68348();
  if (!v9)
  {
    v11 = v30;
    v10 = v31;
    v12 = v52;
    v13 = v32;
    LOBYTE(v34) = 1;
    sub_224F68360();
    LOBYTE(v34) = 2;
    sub_224F68360();
    v34 = v13;
    v35 = v12;
    v36 = v10;
    v37 = v11;
    v38 = v29;
    v39 = v28;
    v40 = v27;
    v41 = v26;
    v42 = v25;
    v43 = v24;
    v44 = v23;
    v45 = v22;
    v46 = v21;
    v47 = v20;
    v48 = v19;
    v49 = v18;
    v50 = v17;
    v51 = v16;
    v53 = 3;
    sub_224EDD884();
    sub_224F68378();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_224EDD884()
{
  unint64_t result;

  result = qword_2557E2AB0;
  if (!qword_2557E2AB0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry, &type metadata for SignedClinicalDataEUDCCEntry);
    atomic_store(result, (unint64_t *)&qword_2557E2AB0);
  }
  return result;
}

uint64_t sub_224EDD8C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SignedClinicalDataEUDCCPayload.init(from:)(a1, a2);
}

uint64_t sub_224EDD8DC(_QWORD *a1)
{
  return SignedClinicalDataEUDCCPayload.encode(to:)(a1);
}

uint64_t SignedClinicalDataEUDCCPayload.expDate.getter()
{
  return sub_224F67730();
}

uint64_t SignedClinicalDataEUDCCPayload.iatDate.getter()
{
  return sub_224F67730();
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.ci.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.co.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.dn.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.dt.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.is.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.ma.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.mp.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.sd.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.tg.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.vp.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _QWORD v73[19];
  _QWORD *v74;

  v62 = a2;
  sub_224DFB77C(0, &qword_2557E2AB8, (uint64_t (*)(void))sub_224EDE1E0, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v43 - v7;
  v9 = a1[3];
  v74 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_224EDE1E0();
  v63 = v8;
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
  v10 = v6;
  v11 = v62;
  LOBYTE(v73[0]) = 0;
  v12 = sub_224F682AC();
  v14 = v13;
  LOBYTE(v73[0]) = 1;
  swift_bridgeObjectRetain();
  v59 = sub_224F682AC();
  LOBYTE(v73[0]) = 3;
  v16 = v15;
  swift_bridgeObjectRetain();
  v57 = sub_224F682AC();
  v58 = v12;
  v17 = v16;
  LOBYTE(v73[0]) = 4;
  v19 = v18;
  swift_bridgeObjectRetain();
  v20 = sub_224F682AC();
  v61 = v19;
  v55 = v20;
  v56 = v14;
  LOBYTE(v73[0]) = 5;
  v22 = v21;
  swift_bridgeObjectRetain();
  v23 = sub_224F682AC();
  v60 = v22;
  v54 = v23;
  LOBYTE(v73[0]) = 6;
  v25 = v24;
  swift_bridgeObjectRetain();
  v50 = sub_224F682AC();
  v53 = v25;
  LOBYTE(v73[0]) = 8;
  v27 = v26;
  swift_bridgeObjectRetain();
  v28 = sub_224F682AC();
  v51 = v29;
  v52 = v17;
  v47 = v28;
  v49 = v27;
  LOBYTE(v73[0]) = 9;
  swift_bridgeObjectRetain();
  v48 = 0;
  v45 = sub_224F682AC();
  v46 = v5;
  v31 = v30;
  swift_bridgeObjectRetain();
  v44 = sub_224EDBC2C(2);
  v32 = sub_224EDBC2C(7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v63, v46);
  *(_QWORD *)&v64 = v58;
  *((_QWORD *)&v64 + 1) = v56;
  *(_QWORD *)&v65 = v59;
  *((_QWORD *)&v65 + 1) = v17;
  *(_QWORD *)&v66 = v44;
  *((_QWORD *)&v66 + 1) = v57;
  v33 = v60;
  *(_QWORD *)&v67 = v61;
  *((_QWORD *)&v67 + 1) = v55;
  *(_QWORD *)&v68 = v60;
  *((_QWORD *)&v68 + 1) = v54;
  v34 = v51;
  *(_QWORD *)&v69 = v53;
  *((_QWORD *)&v69 + 1) = v50;
  *(_QWORD *)&v70 = v49;
  *((_QWORD *)&v70 + 1) = v32;
  v43 = v32;
  *(_QWORD *)&v71 = v47;
  *((_QWORD *)&v71 + 1) = v51;
  *(_QWORD *)&v72 = v45;
  *((_QWORD *)&v72 + 1) = v31;
  sub_224EDE224((uint64_t)&v64);
  swift_bridgeObjectRelease();
  v35 = v52;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36 = v53;
  swift_bridgeObjectRelease();
  v37 = v49;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38 = v71;
  v11[6] = v70;
  v11[7] = v38;
  v11[8] = v72;
  v39 = v67;
  v11[2] = v66;
  v11[3] = v39;
  v40 = v69;
  v11[4] = v68;
  v11[5] = v40;
  v41 = v65;
  *v11 = v64;
  v11[1] = v41;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
  v73[0] = v58;
  v73[1] = v56;
  v73[2] = v59;
  v73[3] = v35;
  v73[4] = v44;
  v73[5] = v57;
  v73[6] = v61;
  v73[7] = v55;
  v73[8] = v33;
  v73[9] = v54;
  v73[10] = v36;
  v73[11] = v50;
  v73[12] = v37;
  v73[13] = v43;
  v73[14] = v47;
  v73[15] = v34;
  v73[16] = v45;
  v73[17] = v31;
  return sub_224EDE2B8((uint64_t)v73);
}

unint64_t sub_224EDE1E0()
{
  unint64_t result;

  result = qword_2557E2AC0;
  if (!qword_2557E2AC0)
  {
    result = MEMORY[0x22768ED24](&unk_224F722F4, &type metadata for SignedClinicalDataEUDCCEntry.Vaccination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2AC0);
  }
  return result;
}

uint64_t sub_224EDE224(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_224EDE2B8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  sub_224F6851C();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  sub_224F6851C();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224EDE4F0(char a1)
{
  return qword_224F72458[a1];
}

uint64_t sub_224EDE508()
{
  char *v0;

  return sub_224EDE4F0(*v0);
}

uint64_t sub_224EDE510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224EE5A74(a1, a2);
  *a3 = result;
  return result;
}

void sub_224EDE534(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_224EDE540()
{
  sub_224EDE1E0();
  return sub_224F685B8();
}

uint64_t sub_224EDE568()
{
  sub_224EDE1E0();
  return sub_224F685C4();
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[17];
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  sub_224DFB77C(0, &qword_2557E2AC8, (uint64_t (*)(void))sub_224EDE1E0, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v18 - v6;
  v8 = v1[2];
  v18[14] = v1[3];
  v18[15] = v8;
  v9 = v1[4];
  v18[12] = v1[5];
  v18[13] = v9;
  v10 = v1[6];
  v18[10] = v1[7];
  v18[11] = v10;
  v11 = v1[8];
  v12 = v1[9];
  v18[8] = v1[10];
  v18[9] = v11;
  v13 = v1[11];
  v18[6] = v1[12];
  v18[7] = v12;
  v18[4] = v1[13];
  v18[5] = v13;
  v14 = v1[14];
  v18[2] = v1[15];
  v18[3] = v14;
  v15 = v1[16];
  v18[0] = v1[17];
  v18[1] = v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224EDE1E0();
  sub_224F68594();
  v28 = 0;
  v16 = v18[16];
  sub_224F68348();
  if (!v16)
  {
    v27 = 1;
    sub_224F68348();
    v26 = 2;
    sub_224F6836C();
    v25 = 3;
    sub_224F68348();
    v24 = 4;
    sub_224F68348();
    v23 = 5;
    sub_224F68348();
    v22 = 6;
    sub_224F68348();
    v21 = 7;
    sub_224F6836C();
    v20 = 8;
    sub_224F68348();
    v19 = 9;
    sub_224F68348();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.hashValue.getter()
{
  sub_224F68510();
  SignedClinicalDataEUDCCEntry.Vaccination.hash(into:)();
  return sub_224F6854C();
}

uint64_t sub_224EDE898@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return SignedClinicalDataEUDCCEntry.Vaccination.init(from:)(a1, a2);
}

uint64_t sub_224EDE8AC(_QWORD *a1)
{
  return SignedClinicalDataEUDCCEntry.Vaccination.encode(to:)(a1);
}

uint64_t sub_224EDE8C0()
{
  sub_224F68510();
  SignedClinicalDataEUDCCEntry.Vaccination.hash(into:)();
  return sub_224F6854C();
}

uint64_t sub_224EDE900()
{
  sub_224F68510();
  SignedClinicalDataEUDCCEntry.Vaccination.hash(into:)();
  return sub_224F6854C();
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.ci.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.co.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.is.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.nm.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.ma.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.sc.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.tc.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.tg.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.tr.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.tt.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = v0[7];
  v2 = v0[9];
  v5 = v0[13];
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    v3 = v5;
    if (v2)
    {
LABEL_3:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_224F68528();
    v3 = v5;
    if (v2)
      goto LABEL_3;
  }
  sub_224F68528();
LABEL_6:
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  sub_224F68528();
  if (v3)
  {
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224EDED44(char a1)
{
  return qword_224F724A8[a1];
}

uint64_t sub_224EDED5C()
{
  char *v0;

  return sub_224EDED44(*v0);
}

uint64_t sub_224EDED64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224EE5D94(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224EDED88()
{
  sub_224EE2180();
  return sub_224F685B8();
}

uint64_t sub_224EDEDB0()
{
  sub_224EE2180();
  return sub_224F685C4();
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[20];
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;

  sub_224DFB77C(0, &qword_2557E2AD0, (uint64_t (*)(void))sub_224EE2180, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v19 - v6;
  v8 = v1[2];
  v19[17] = v1[3];
  v19[18] = v8;
  v9 = v1[4];
  v19[15] = v1[5];
  v19[16] = v9;
  v10 = v1[6];
  v19[13] = v1[7];
  v19[14] = v10;
  v11 = v1[9];
  v19[11] = v1[8];
  v19[12] = v11;
  v12 = v1[11];
  v19[9] = v1[10];
  v19[10] = v12;
  v13 = v1[12];
  v19[7] = v1[13];
  v19[8] = v13;
  v14 = v1[14];
  v19[5] = v1[15];
  v19[6] = v14;
  v15 = v1[16];
  v19[3] = v1[17];
  v19[4] = v15;
  v16 = v1[18];
  v19[1] = v1[19];
  v19[2] = v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224EE2180();
  sub_224F68594();
  v29 = 0;
  v17 = v19[19];
  sub_224F68348();
  if (!v17)
  {
    v28 = 1;
    sub_224F68348();
    v27 = 2;
    sub_224F68348();
    v26 = 3;
    sub_224F68300();
    v25 = 4;
    sub_224F68300();
    v24 = 5;
    sub_224F68348();
    v23 = 6;
    sub_224F68300();
    v22 = 7;
    sub_224F68348();
    v21 = 8;
    sub_224F68348();
    v20 = 9;
    sub_224F68348();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.hashValue.getter()
{
  sub_224F68510();
  SignedClinicalDataEUDCCEntry.Laboratory.hash(into:)();
  return sub_224F6854C();
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  unsigned __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unsigned __int128 v74;
  _QWORD v75[21];
  char v76;

  sub_224DFB77C(0, &qword_2557E2AE0, (uint64_t (*)(void))sub_224EE2180, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v63 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v42 - v7;
  v9 = a1[3];
  v64 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_224EE2180();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
  v10 = v6;
  LOBYTE(v75[0]) = 0;
  v11 = sub_224F682AC();
  v13 = v12;
  LOBYTE(v75[0]) = 1;
  swift_bridgeObjectRetain();
  v60 = sub_224F682AC();
  LOBYTE(v75[0]) = 2;
  v15 = v14;
  swift_bridgeObjectRetain();
  v58 = sub_224F682AC();
  v59 = v11;
  v16 = v15;
  LOBYTE(v75[0]) = 3;
  v62 = v17;
  swift_bridgeObjectRetain();
  v57 = sub_224F68264();
  LOBYTE(v75[0]) = 4;
  v61 = v18;
  swift_bridgeObjectRetain();
  v54 = sub_224F68264();
  LOBYTE(v75[0]) = 5;
  v56 = v19;
  swift_bridgeObjectRetain();
  v50 = sub_224F682AC();
  LOBYTE(v75[0]) = 6;
  v55 = v20;
  swift_bridgeObjectRetain();
  v21 = sub_224F68264();
  v51 = v22;
  v52 = v13;
  v53 = v15;
  v47 = v21;
  LOBYTE(v75[0]) = 7;
  swift_bridgeObjectRetain();
  v49 = 0;
  v46 = sub_224F682AC();
  LOBYTE(v75[0]) = 8;
  v24 = v23;
  swift_bridgeObjectRetain();
  v45 = sub_224F682AC();
  v48 = v24;
  v76 = 9;
  v26 = v25;
  swift_bridgeObjectRetain();
  v27 = sub_224F682AC();
  v44 = v28;
  v29 = v27;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v63);
  *(_QWORD *)&v65 = v59;
  *((_QWORD *)&v65 + 1) = v13;
  *(_QWORD *)&v66 = v60;
  *((_QWORD *)&v66 + 1) = v16;
  *(_QWORD *)&v67 = v58;
  *((_QWORD *)&v67 + 1) = v62;
  v30 = v56;
  *(_QWORD *)&v68 = v57;
  *((_QWORD *)&v68 + 1) = v61;
  *(_QWORD *)&v69 = v54;
  *((_QWORD *)&v69 + 1) = v56;
  *(_QWORD *)&v70 = v50;
  *((_QWORD *)&v70 + 1) = v55;
  *(_QWORD *)&v71 = v47;
  *((_QWORD *)&v71 + 1) = v51;
  *(_QWORD *)&v72 = v46;
  *((_QWORD *)&v72 + 1) = v48;
  *(_QWORD *)&v73 = v45;
  *((_QWORD *)&v73 + 1) = v26;
  v42 = v26;
  v43 = v29;
  v74 = __PAIR128__(v44, v29);
  sub_224EE21C4((uint64_t)&v65);
  swift_bridgeObjectRelease();
  v31 = v53;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v32 = v55;
  swift_bridgeObjectRelease();
  v33 = v51;
  swift_bridgeObjectRelease();
  v34 = v48;
  swift_bridgeObjectRelease();
  v35 = v42;
  swift_bridgeObjectRelease();
  v36 = v72;
  a2[6] = v71;
  a2[7] = v36;
  v37 = v74;
  a2[8] = v73;
  a2[9] = v37;
  v38 = v68;
  a2[2] = v67;
  a2[3] = v38;
  v39 = v70;
  a2[4] = v69;
  a2[5] = v39;
  v40 = v66;
  *a2 = v65;
  a2[1] = v40;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
  v75[0] = v59;
  v75[1] = v52;
  v75[2] = v60;
  v75[3] = v31;
  v75[4] = v58;
  v75[5] = v62;
  v75[6] = v57;
  v75[7] = v61;
  v75[8] = v54;
  v75[9] = v30;
  v75[10] = v50;
  v75[11] = v32;
  v75[12] = v47;
  v75[13] = v33;
  v75[14] = v46;
  v75[15] = v34;
  v75[16] = v45;
  v75[17] = v35;
  v75[18] = v43;
  v75[19] = v44;
  return sub_224EE2278((uint64_t)v75);
}

uint64_t sub_224EDF910@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return SignedClinicalDataEUDCCEntry.Laboratory.init(from:)(a1, a2);
}

uint64_t sub_224EDF924(_QWORD *a1)
{
  return SignedClinicalDataEUDCCEntry.Laboratory.encode(to:)(a1);
}

uint64_t sub_224EDF938()
{
  sub_224F68510();
  SignedClinicalDataEUDCCEntry.Laboratory.hash(into:)();
  return sub_224F6854C();
}

uint64_t sub_224EDF978()
{
  sub_224F68510();
  SignedClinicalDataEUDCCEntry.Laboratory.hash(into:)();
  return sub_224F6854C();
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.ci.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.co.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.df.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.du.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.fr.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.is.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.tg.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224EDFC30()
{
  char *v0;

  return qword_224F724F8[*v0];
}

uint64_t sub_224EDFC48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224EE60B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224EDFC6C()
{
  sub_224EE2558();
  return sub_224F685B8();
}

uint64_t sub_224EDFC94()
{
  sub_224EE2558();
  return sub_224F685C4();
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[14];
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;

  sub_224DFB77C(0, &qword_2557E2AE8, (uint64_t (*)(void))sub_224EE2558, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v16 - v6;
  v8 = v1[2];
  v16[11] = v1[3];
  v16[12] = v8;
  v9 = v1[4];
  v16[9] = v1[5];
  v16[10] = v9;
  v10 = v1[6];
  v16[7] = v1[7];
  v16[8] = v10;
  v11 = v1[8];
  v16[5] = v1[9];
  v16[6] = v11;
  v12 = v1[11];
  v16[3] = v1[10];
  v16[4] = v12;
  v13 = v1[12];
  v16[1] = v1[13];
  v16[2] = v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224EE2558();
  sub_224F68594();
  v23 = 0;
  v14 = v16[13];
  sub_224F68348();
  if (!v14)
  {
    v22 = 1;
    sub_224F68348();
    v21 = 2;
    sub_224F68348();
    v20 = 3;
    sub_224F68348();
    v19 = 4;
    sub_224F68348();
    v18 = 5;
    sub_224F68348();
    v17 = 6;
    sub_224F68348();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.hashValue.getter()
{
  sub_224F68510();
  SignedClinicalDataEUDCCEntry.Recovery.hash(into:)();
  return sub_224F6854C();
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v43 = a2;
  sub_224DFB77C(0, &qword_2557E2AF8, (uint64_t (*)(void))sub_224EE2558, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v44 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v33 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224EE2558();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v51 = 0;
  v8 = v44;
  v9 = v7;
  v10 = sub_224F682AC();
  v12 = v11;
  v50 = 1;
  swift_bridgeObjectRetain();
  v13 = sub_224F682AC();
  v15 = v14;
  v42 = v13;
  v49 = 2;
  swift_bridgeObjectRetain();
  v40 = sub_224F682AC();
  v48 = 3;
  v18 = v17;
  swift_bridgeObjectRetain();
  v19 = sub_224F682AC();
  v41 = v20;
  v37 = v19;
  v47 = 4;
  swift_bridgeObjectRetain();
  v38 = 0;
  v36 = sub_224F682AC();
  v46 = 5;
  v39 = v21;
  swift_bridgeObjectRetain();
  v34 = sub_224F682AC();
  v35 = v10;
  v45 = 6;
  v23 = v22;
  swift_bridgeObjectRetain();
  v24 = sub_224F682AC();
  v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v38 = v24;
  v27 = v26;
  v25(v9, v8);
  swift_bridgeObjectRetain();
  v28 = v15;
  swift_bridgeObjectRetain();
  v29 = v18;
  swift_bridgeObjectRetain();
  v30 = v41;
  swift_bridgeObjectRetain();
  v31 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v32 = v43;
  *v43 = v35;
  v32[1] = v12;
  v32[2] = v42;
  v32[3] = v28;
  v32[4] = v40;
  v32[5] = v29;
  v32[6] = v37;
  v32[7] = v30;
  v32[8] = v36;
  v32[9] = v31;
  v32[10] = v34;
  v32[11] = v23;
  v32[12] = v38;
  v32[13] = v27;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224EE0488@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return SignedClinicalDataEUDCCEntry.Recovery.init(from:)(a1, a2);
}

uint64_t sub_224EE049C(_QWORD *a1)
{
  return SignedClinicalDataEUDCCEntry.Recovery.encode(to:)(a1);
}

uint64_t sub_224EE04B0()
{
  sub_224F68510();
  SignedClinicalDataEUDCCEntry.Recovery.hash(into:)();
  return sub_224F6854C();
}

uint64_t sub_224EE0518()
{
  sub_224F68510();
  SignedClinicalDataEUDCCEntry.Recovery.hash(into:)();
  return sub_224F6854C();
}

void SignedClinicalDataEUDCCEntry.dob.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 9);
  v4 = *(_BYTE *)(v1 + 10);
  v5 = *(_BYTE *)(v1 + 11);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 9) = v3;
  *(_BYTE *)(a1 + 10) = v4;
  *(_BYTE *)(a1 + 11) = v5;
}

uint64_t SignedClinicalDataEUDCCEntry.nam.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 40);
  v2 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v2;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t SignedClinicalDataEUDCCEntry.r.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SignedClinicalDataEUDCCEntry.t.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SignedClinicalDataEUDCCEntry.v.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SignedClinicalDataEUDCCEntry.ver.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_224EE0658()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224EE0680 + 4 * byte_224F714D4[*v0]))(6451044, 0xE300000000000000);
}

uint64_t sub_224EE0680()
{
  return 7168366;
}

uint64_t sub_224EE068C()
{
  return 114;
}

uint64_t sub_224EE0698()
{
  return 116;
}

uint64_t sub_224EE06A4()
{
  return 118;
}

uint64_t sub_224EE06B0()
{
  return 7497078;
}

uint64_t sub_224EE06BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224EE62F0(a1, a2);
  *a3 = result;
  return result;
}

void sub_224EE06E0(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_224EE06EC()
{
  sub_224EE2910();
  return sub_224F685B8();
}

uint64_t sub_224EE0714()
{
  sub_224EE2910();
  return sub_224F685C4();
}

uint64_t SignedClinicalDataEUDCCEntry.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;

  sub_224DFB77C(0, &qword_2557E2B00, (uint64_t (*)(void))sub_224EE2910, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v34 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v22 - v5;
  v35 = *v1;
  v7 = *((_BYTE *)v1 + 8);
  v8 = *((_BYTE *)v1 + 9);
  v45 = *((unsigned __int8 *)v1 + 10);
  v9 = *((_BYTE *)v1 + 11);
  v10 = v1[2];
  v32 = v1[3];
  v33 = v10;
  v11 = v1[4];
  v30 = v1[5];
  v31 = v11;
  v12 = v1[6];
  v28 = v1[7];
  v29 = v12;
  v13 = v1[8];
  v26 = v1[9];
  v27 = v13;
  v14 = v1[10];
  v24 = v1[11];
  v25 = v14;
  v23 = v1[12];
  v22[2] = v1[13];
  v22[1] = v1[14];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224EE2910();
  sub_224F68594();
  v37 = v35;
  LOBYTE(v38) = v7;
  BYTE1(v38) = v8;
  BYTE2(v38) = v45;
  v15 = v6;
  BYTE3(v38) = v9;
  v46 = 0;
  sub_224DFB31C();
  v16 = v36;
  sub_224F68378();
  if (v16)
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v6, v4);
  v19 = v24;
  v18 = v25;
  v20 = v23;
  v21 = v34;
  v37 = v33;
  v38 = v32;
  v39 = v31;
  v40 = v30;
  v41 = v29;
  v42 = v28;
  v43 = v27;
  v44 = v26;
  v46 = 1;
  sub_224EE2954();
  sub_224F68378();
  v37 = v18;
  v46 = 2;
  sub_224E54704(0, &qword_2557E2B18, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_224EE2998();
  sub_224F68330();
  v37 = v19;
  v46 = 3;
  sub_224E54704(0, &qword_2557E2B30, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_224EE2A54();
  sub_224F68330();
  v37 = v20;
  v46 = 4;
  sub_224E54704(0, &qword_2557E2B48, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_224EE2B10();
  sub_224F68330();
  LOBYTE(v37) = 5;
  sub_224F68348();
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v15, v4);
}

uint64_t SignedClinicalDataEUDCCEntry.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;

  sub_224DFB77C(0, &qword_2557E2B60, (uint64_t (*)(void))sub_224EE2910, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v38 - v8;
  v10 = a1[3];
  v53 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_224EE2910();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  v52 = v7;
  v49 = a2;
  v63 = 0;
  sub_224DE65D4();
  sub_224F682DC();
  v11 = v54;
  v12 = v55;
  v13 = BYTE1(v55);
  v14 = BYTE2(v55);
  v15 = BYTE3(v55);
  v63 = 1;
  sub_224EE2BCC();
  sub_224F682DC();
  v45 = v15;
  v46 = v11;
  v47 = v14;
  v48 = v13;
  v62 = v12;
  v17 = v55;
  v18 = v57;
  v42 = v56;
  v43 = v54;
  v19 = v59;
  v41 = v58;
  v20 = v61;
  v44 = v60;
  sub_224E54704(0, &qword_2557E2B18, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  v63 = 2;
  sub_224EE2C10();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_224F68294();
  v50 = v20;
  v51 = v19;
  v39 = v18;
  v40 = v17;
  v21 = v54;
  sub_224E54704(0, &qword_2557E2B30, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  v63 = 3;
  sub_224EE2CCC();
  swift_bridgeObjectRetain();
  sub_224F68294();
  v22 = v54;
  sub_224E54704(0, &qword_2557E2B48, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  v63 = 4;
  sub_224EE2D88();
  swift_bridgeObjectRetain();
  sub_224F68294();
  v23 = v22;
  v24 = v21;
  v25 = v54;
  LOBYTE(v54) = 5;
  swift_bridgeObjectRetain();
  v26 = sub_224F682AC();
  v28 = v27;
  v29 = *(void (**)(char *, uint64_t))(v52 + 8);
  v52 = v26;
  v29(v9, v6);
  v30 = v40;
  swift_bridgeObjectRetain();
  v31 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32 = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = v49;
  *v49 = v46;
  *((_BYTE *)v34 + 8) = v62;
  *((_BYTE *)v34 + 9) = v48;
  *((_BYTE *)v34 + 10) = v47;
  *((_BYTE *)v34 + 11) = v45;
  v34[2] = v43;
  v34[3] = v30;
  v34[4] = v42;
  v34[5] = v33;
  v35 = v51;
  v34[6] = v41;
  v34[7] = v35;
  v34[8] = v44;
  v34[9] = v32;
  v34[10] = v24;
  v34[11] = v23;
  v37 = v52;
  v36 = (uint64_t)v53;
  v34[12] = v25;
  v34[13] = v37;
  v34[14] = v28;
  __swift_destroy_boxed_opaque_existential_1(v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224EE1130@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return SignedClinicalDataEUDCCEntry.init(from:)(a1, a2);
}

uint64_t sub_224EE1144(_QWORD *a1)
{
  return SignedClinicalDataEUDCCEntry.encode(to:)(a1);
}

uint64_t SignedClinicalDataEUDCCEntryName.fn.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntryName.fnt.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntryName.gn.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntryName.gnt.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntryName.debugDescription.getter()
{
  sub_224F680E4();
  sub_224F67C94();
  sub_224E54704(0, (unint64_t *)&qword_2557E16D0, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  swift_bridgeObjectRetain();
  sub_224F67BC8();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  swift_bridgeObjectRetain();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  swift_bridgeObjectRetain();
  sub_224F67BC8();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  swift_bridgeObjectRetain();
  sub_224F67BC8();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  return 0;
}

uint64_t sub_224EE13C0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224EE13E4 + 4 * byte_224F714DA[*v0]))(28262, 0xE200000000000000);
}

uint64_t sub_224EE13E4()
{
  return 7630438;
}

uint64_t sub_224EE13F4()
{
  return 28263;
}

uint64_t sub_224EE13FC()
{
  return 7630439;
}

uint64_t sub_224EE1410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224EE64EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224EE1434()
{
  sub_224EE2E44();
  return sub_224F685B8();
}

uint64_t sub_224EE145C()
{
  sub_224EE2E44();
  return sub_224F685C4();
}

uint64_t SignedClinicalDataEUDCCEntryName.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[8];
  char v14;
  char v15;
  char v16;
  char v17;

  sub_224DFB77C(0, &qword_2557E2BA0, (uint64_t (*)(void))sub_224EE2E44, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntryName.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v13 - v6;
  v8 = v1[2];
  v13[5] = v1[3];
  v13[6] = v8;
  v9 = v1[4];
  v13[3] = v1[5];
  v13[4] = v9;
  v10 = v1[6];
  v13[1] = v1[7];
  v13[2] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224EE2E44();
  sub_224F68594();
  v17 = 0;
  v11 = v13[7];
  sub_224F68300();
  if (!v11)
  {
    v16 = 1;
    sub_224F68348();
    v15 = 2;
    sub_224F68300();
    v14 = 3;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignedClinicalDataEUDCCEntryName.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v31 = a2;
  sub_224DFB77C(0, &qword_2557E2BB0, (uint64_t (*)(void))sub_224EE2E44, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntryName.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v26 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224EE2E44();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = v6;
  v35 = 0;
  v10 = v5;
  v11 = sub_224F68264();
  v13 = v12;
  v34 = 1;
  swift_bridgeObjectRetain();
  v14 = sub_224F682AC();
  v30 = v15;
  v28 = v14;
  v29 = v11;
  v33 = 2;
  swift_bridgeObjectRetain();
  v27 = sub_224F68264();
  v32 = 3;
  v17 = v16;
  swift_bridgeObjectRetain();
  v18 = sub_224F68264();
  v21 = v20;
  v22 = v18;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v10);
  swift_bridgeObjectRetain();
  v23 = v17;
  v24 = v30;
  v25 = v31;
  *v31 = v29;
  v25[1] = v13;
  v25[2] = v28;
  v25[3] = v24;
  v25[4] = v27;
  v25[5] = v23;
  v25[6] = v22;
  v25[7] = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224EE1924@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return SignedClinicalDataEUDCCEntryName.init(from:)(a1, a2);
}

uint64_t sub_224EE1938(_QWORD *a1)
{
  return SignedClinicalDataEUDCCEntryName.encode(to:)(a1);
}

uint64_t sub_224EE1950()
{
  sub_224F68510();
  sub_224F6851C();
  return sub_224F6854C();
}

uint64_t sub_224EE1990()
{
  return sub_224F6851C();
}

uint64_t sub_224EE19B4()
{
  sub_224F68510();
  sub_224F6851C();
  return sub_224F6854C();
}

_QWORD *sub_224EE19F0@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 1;
  return result;
}

void sub_224EE1A04(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_224EE1A10()
{
  return 0x765F6363645F7565;
}

uint64_t sub_224EE1A2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x765F6363645F7565 && a2 == 0xE900000000000031)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_224F683CC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_224EE1ACC()
{
  return 1;
}

uint64_t sub_224EE1AD8@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 1;
  return result;
}

uint64_t sub_224EE1AE8()
{
  sub_224EDD330();
  return sub_224F685B8();
}

uint64_t sub_224EE1B10()
{
  sub_224EDD330();
  return sub_224F685C4();
}

uint64_t _s23HealthRecordsExtraction28SignedClinicalDataEUDCCEntryV10LaboratoryV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v45 = a1[6];
  v6 = a1[7];
  v41 = a1[8];
  v47 = a1[9];
  v43 = a1[10];
  v39 = a1[11];
  v33 = a1[12];
  v37 = a1[13];
  v35 = a1[14];
  v31 = a1[15];
  v29 = a1[16];
  v27 = a1[17];
  v24 = a1[19];
  v25 = a1[18];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[7];
  v44 = a2[6];
  v40 = a2[8];
  v46 = a2[9];
  v42 = a2[10];
  v38 = a2[11];
  v32 = a2[12];
  v36 = a2[13];
  v34 = a2[14];
  v30 = a2[15];
  v28 = a2[16];
  v26 = a2[17];
  v22 = a2[19];
  v23 = a2[18];
  if (*a1 != *a2 || a1[1] != a2[1])
  {
    v12 = sub_224F683CC();
    result = 0;
    if ((v12 & 1) == 0)
      return result;
  }
  if (v2 != v7 || v3 != v8)
  {
    v14 = sub_224F683CC();
    result = 0;
    if ((v14 & 1) == 0)
      return result;
  }
  if (v4 != v9 || v5 != v10)
  {
    v15 = sub_224F683CC();
    result = 0;
    if ((v15 & 1) == 0)
      return result;
  }
  if (v6)
  {
    if (!v11)
      return 0;
    if (v45 != v44 || v6 != v11)
    {
      v16 = sub_224F683CC();
      result = 0;
      if ((v16 & 1) == 0)
        return result;
    }
  }
  else if (v11)
  {
    return 0;
  }
  if (v47)
  {
    if (!v46)
      return 0;
    if (v41 != v40 || v47 != v46)
    {
      v17 = sub_224F683CC();
      result = 0;
      if ((v17 & 1) == 0)
        return result;
    }
  }
  else if (v46)
  {
    return 0;
  }
  if (v43 != v42 || v39 != v38)
  {
    v18 = sub_224F683CC();
    result = 0;
    if ((v18 & 1) == 0)
      return result;
  }
  if (v37)
  {
    if (v36)
    {
      if (v33 != v32 || v37 != v36)
      {
        v19 = sub_224F683CC();
        result = 0;
        if ((v19 & 1) == 0)
          return result;
      }
      goto LABEL_36;
    }
    return 0;
  }
  if (v36)
    return 0;
LABEL_36:
  if (v35 == v34 && v31 == v30 || (v20 = sub_224F683CC(), result = 0, (v20 & 1) != 0))
  {
    if (v29 == v28 && v27 == v26 || (v21 = sub_224F683CC(), result = 0, (v21 & 1) != 0))
    {
      if (v25 == v23 && v24 == v22)
        return 1;
      else
        return sub_224F683CC();
    }
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction28SignedClinicalDataEUDCCEntryV11VaccinationV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v41 = a1[7];
  v39 = a1[8];
  v37 = a1[9];
  v35 = a1[10];
  v32 = a1[12];
  v33 = a1[11];
  v29 = a1[13];
  v27 = a1[14];
  v25 = a1[15];
  v22 = a1[17];
  v23 = a1[16];
  v7 = a2[2];
  v8 = a2[3];
  v10 = a2[4];
  v9 = a2[5];
  v11 = a2[6];
  v40 = a2[7];
  v38 = a2[8];
  v36 = a2[9];
  v34 = a2[10];
  v30 = a2[12];
  v31 = a2[11];
  v28 = a2[13];
  v26 = a2[14];
  v24 = a2[15];
  v20 = a2[17];
  v21 = a2[16];
  if (*a1 == *a2 && a1[1] == a2[1] || (v12 = sub_224F683CC(), result = 0, (v12 & 1) != 0))
  {
    if (v2 == v7 && v3 == v8)
    {
      if (v4 != v10)
        return 0;
    }
    else
    {
      v14 = sub_224F683CC();
      result = 0;
      if ((v14 & 1) == 0 || v4 != v10)
        return result;
    }
    if (v5 == v9 && v6 == v11 || (v15 = sub_224F683CC(), result = 0, (v15 & 1) != 0))
    {
      if (v41 == v40 && v39 == v38 || (v16 = sub_224F683CC(), result = 0, (v16 & 1) != 0))
      {
        if (v37 == v36 && v35 == v34 || (v17 = sub_224F683CC(), result = 0, (v17 & 1) != 0))
        {
          if (v33 == v31 && v32 == v30)
          {
            if (v29 != v28)
              return 0;
          }
          else
          {
            v18 = sub_224F683CC();
            result = 0;
            if ((v18 & 1) == 0 || v29 != v28)
              return result;
          }
          if (v27 == v26 && v25 == v24 || (v19 = sub_224F683CC(), result = 0, (v19 & 1) != 0))
          {
            if (v23 == v21 && v22 == v20)
              return 1;
            else
              return sub_224F683CC();
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_224EE2180()
{
  unint64_t result;

  result = qword_2557E2AD8;
  if (!qword_2557E2AD8)
  {
    result = MEMORY[0x22768ED24](&unk_224F722A4, &type metadata for SignedClinicalDataEUDCCEntry.Laboratory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2AD8);
  }
  return result;
}

uint64_t sub_224EE21C4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_224EE2278(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s23HealthRecordsExtraction28SignedClinicalDataEUDCCEntryV8RecoveryV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v32 = a1[6];
  v30 = a1[8];
  v31 = a1[7];
  v26 = a1[10];
  v24 = a1[11];
  v21 = a1[13];
  v22 = a1[12];
  v6 = a2[2];
  v7 = a2[3];
  v9 = a2[4];
  v8 = a2[5];
  v11 = a2[6];
  v10 = a2[7];
  v28 = a1[9];
  v29 = a2[8];
  v27 = a2[9];
  v25 = a2[10];
  v23 = a2[11];
  v19 = a2[13];
  v20 = a2[12];
  if (*a1 == *a2 && a1[1] == a2[1] || (v12 = sub_224F683CC(), result = 0, (v12 & 1) != 0))
  {
    if (v2 == v6 && v3 == v7 || (v14 = sub_224F683CC(), result = 0, (v14 & 1) != 0))
    {
      if (v4 == v9 && v5 == v8 || (v15 = sub_224F683CC(), result = 0, (v15 & 1) != 0))
      {
        if (v32 == v11 && v31 == v10 || (v16 = sub_224F683CC(), result = 0, (v16 & 1) != 0))
        {
          if (v30 == v29 && v28 == v27 || (v17 = sub_224F683CC(), result = 0, (v17 & 1) != 0))
          {
            if (v26 == v25 && v24 == v23 || (v18 = sub_224F683CC(), result = 0, (v18 & 1) != 0))
            {
              if (v22 == v20 && v21 == v19)
                return 1;
              else
                return sub_224F683CC();
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_224EE2558()
{
  unint64_t result;

  result = qword_2557E2AF0;
  if (!qword_2557E2AF0)
  {
    result = MEMORY[0x22768ED24](&unk_224F72254, &type metadata for SignedClinicalDataEUDCCEntry.Recovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2AF0);
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction32SignedClinicalDataEUDCCEntryNameV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v5 = a1[4];
  v7 = a1[5];
  v8 = a1[7];
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a2[4];
  v13 = a2[5];
  v14 = a2[7];
  if (!v3)
  {
    v19 = a2[6];
    v20 = a1[6];
    if (v9)
      return 0;
    goto LABEL_8;
  }
  if (!v9)
    return 0;
  v19 = a2[6];
  v20 = a1[6];
  if (*a1 == *a2 && v3 == v9 || (v15 = sub_224F683CC(), result = 0, (v15 & 1) != 0))
  {
LABEL_8:
    if (v4 != v10 || v6 != v11)
    {
      v17 = sub_224F683CC();
      result = 0;
      if ((v17 & 1) == 0)
        return result;
    }
    if (v7)
    {
      if (!v13)
        return 0;
      if (v5 != v12 || v7 != v13)
      {
        v18 = sub_224F683CC();
        result = 0;
        if ((v18 & 1) == 0)
          return result;
      }
    }
    else if (v13)
    {
      return 0;
    }
    if (v8)
    {
      if (v14 && (v20 == v19 && v8 == v14 || (sub_224F683CC() & 1) != 0))
        return 1;
    }
    else if (!v14)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction28SignedClinicalDataEUDCCEntryV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v2 = *((_BYTE *)a1 + 8);
  v3 = *((_BYTE *)a1 + 9);
  v4 = *((_BYTE *)a1 + 10);
  v5 = *((_BYTE *)a1 + 11);
  v36 = a1[3];
  v37 = a1[2];
  v34 = a1[5];
  v35 = a1[4];
  v6 = a1[8];
  v32 = a1[7];
  v33 = a1[6];
  v7 = a1[9];
  v31 = a1[10];
  v29 = a1[11];
  v27 = a1[12];
  v24 = a1[14];
  v25 = a1[13];
  v8 = *a2;
  v9 = *((_BYTE *)a2 + 8);
  v10 = *((_BYTE *)a2 + 9);
  v11 = *((_BYTE *)a2 + 10);
  v12 = *((_BYTE *)a2 + 11);
  v13 = a2[2];
  v14 = a2[3];
  v46 = *a1;
  LOBYTE(v47) = v2;
  v16 = a2[4];
  v15 = a2[5];
  BYTE1(v47) = v3;
  BYTE2(v47) = v4;
  v18 = a2[6];
  v17 = a2[7];
  BYTE3(v47) = v5;
  v38 = v8;
  v20 = a2[8];
  v19 = a2[9];
  LOBYTE(v39) = v9;
  BYTE1(v39) = v10;
  v30 = a2[10];
  v28 = a2[11];
  BYTE2(v39) = v11;
  BYTE3(v39) = v12;
  v26 = a2[12];
  v22 = a2[13];
  v23 = a2[14];
  if ((_s23HealthRecordsExtraction8FHIRDateV2eeoiySbAC_ACtFZ_0((uint64_t)&v46, (uint64_t)&v38) & 1) == 0)
    return 0;
  v46 = v37;
  v47 = v36;
  v48 = v35;
  v49 = v34;
  v50 = v33;
  v51 = v32;
  v52 = v6;
  v53 = v7;
  v38 = v13;
  v39 = v14;
  v40 = v16;
  v41 = v15;
  v42 = v18;
  v43 = v17;
  v44 = v20;
  v45 = v19;
  if ((_s23HealthRecordsExtraction32SignedClinicalDataEUDCCEntryNameV2eeoiySbAC_ACtFZ_0(&v46, &v38) & 1) == 0)
    return 0;
  if (v31)
  {
    if (!v30 || (sub_224DD9058(v31, v30) & 1) == 0)
      return 0;
  }
  else if (v30)
  {
    return 0;
  }
  if (v29)
  {
    if (!v28 || (sub_224DD9268(v29, v28) & 1) == 0)
      return 0;
  }
  else if (v28)
  {
    return 0;
  }
  if (!v27)
  {
    if (!v26)
      goto LABEL_16;
    return 0;
  }
  if (!v26 || (sub_224DD9340(v27, v26) & 1) == 0)
    return 0;
LABEL_16:
  if (v25 == v22 && v24 == v23)
    return 1;
  else
    return sub_224F683CC();
}

unint64_t sub_224EE2910()
{
  unint64_t result;

  result = qword_2557E2B08;
  if (!qword_2557E2B08)
  {
    result = MEMORY[0x22768ED24](&unk_224F72204, &type metadata for SignedClinicalDataEUDCCEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2B08);
  }
  return result;
}

unint64_t sub_224EE2954()
{
  unint64_t result;

  result = qword_2557E2B10;
  if (!qword_2557E2B10)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntryName, &type metadata for SignedClinicalDataEUDCCEntryName);
    atomic_store(result, (unint64_t *)&qword_2557E2B10);
  }
  return result;
}

unint64_t sub_224EE2998()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E2B20;
  if (!qword_2557E2B20)
  {
    sub_224E54704(255, &qword_2557E2B18, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224EE2A10();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E2B20);
  }
  return result;
}

unint64_t sub_224EE2A10()
{
  unint64_t result;

  result = qword_2557E2B28;
  if (!qword_2557E2B28)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry.Recovery, &type metadata for SignedClinicalDataEUDCCEntry.Recovery);
    atomic_store(result, (unint64_t *)&qword_2557E2B28);
  }
  return result;
}

unint64_t sub_224EE2A54()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E2B38;
  if (!qword_2557E2B38)
  {
    sub_224E54704(255, &qword_2557E2B30, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224EE2ACC();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E2B38);
  }
  return result;
}

unint64_t sub_224EE2ACC()
{
  unint64_t result;

  result = qword_2557E2B40;
  if (!qword_2557E2B40)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry.Laboratory, &type metadata for SignedClinicalDataEUDCCEntry.Laboratory);
    atomic_store(result, (unint64_t *)&qword_2557E2B40);
  }
  return result;
}

unint64_t sub_224EE2B10()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E2B50;
  if (!qword_2557E2B50)
  {
    sub_224E54704(255, &qword_2557E2B48, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224EE2B88();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E2B50);
  }
  return result;
}

unint64_t sub_224EE2B88()
{
  unint64_t result;

  result = qword_2557E2B58;
  if (!qword_2557E2B58)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry.Vaccination, &type metadata for SignedClinicalDataEUDCCEntry.Vaccination);
    atomic_store(result, (unint64_t *)&qword_2557E2B58);
  }
  return result;
}

unint64_t sub_224EE2BCC()
{
  unint64_t result;

  result = qword_2557E2B68;
  if (!qword_2557E2B68)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntryName, &type metadata for SignedClinicalDataEUDCCEntryName);
    atomic_store(result, (unint64_t *)&qword_2557E2B68);
  }
  return result;
}

unint64_t sub_224EE2C10()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E2B70;
  if (!qword_2557E2B70)
  {
    sub_224E54704(255, &qword_2557E2B18, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224EE2C88();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E2B70);
  }
  return result;
}

unint64_t sub_224EE2C88()
{
  unint64_t result;

  result = qword_2557E2B78;
  if (!qword_2557E2B78)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry.Recovery, &type metadata for SignedClinicalDataEUDCCEntry.Recovery);
    atomic_store(result, (unint64_t *)&qword_2557E2B78);
  }
  return result;
}

unint64_t sub_224EE2CCC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E2B80;
  if (!qword_2557E2B80)
  {
    sub_224E54704(255, &qword_2557E2B30, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224EE2D44();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E2B80);
  }
  return result;
}

unint64_t sub_224EE2D44()
{
  unint64_t result;

  result = qword_2557E2B88;
  if (!qword_2557E2B88)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry.Laboratory, &type metadata for SignedClinicalDataEUDCCEntry.Laboratory);
    atomic_store(result, (unint64_t *)&qword_2557E2B88);
  }
  return result;
}

unint64_t sub_224EE2D88()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E2B90;
  if (!qword_2557E2B90)
  {
    sub_224E54704(255, &qword_2557E2B48, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224EE2E00();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E2B90);
  }
  return result;
}

unint64_t sub_224EE2E00()
{
  unint64_t result;

  result = qword_2557E2B98;
  if (!qword_2557E2B98)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry.Vaccination, &type metadata for SignedClinicalDataEUDCCEntry.Vaccination);
    atomic_store(result, (unint64_t *)&qword_2557E2B98);
  }
  return result;
}

unint64_t sub_224EE2E44()
{
  unint64_t result;

  result = qword_2557E2BA8;
  if (!qword_2557E2BA8)
  {
    result = MEMORY[0x22768ED24](&unk_224F721B4, &type metadata for SignedClinicalDataEUDCCEntryName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2BA8);
  }
  return result;
}

uint64_t sub_224EE2E88(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_224DFC8E4(a1, a2, a3, (uint64_t (*)(void))sub_224EE2E00, (uint64_t (*)(void))sub_224EE2B88, (uint64_t (*)(void))sub_224EE2EA4);
}

unint64_t sub_224EE2EA4()
{
  unint64_t result;

  result = qword_2557E2BB8;
  if (!qword_2557E2BB8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry.Vaccination, &type metadata for SignedClinicalDataEUDCCEntry.Vaccination);
    atomic_store(result, (unint64_t *)&qword_2557E2BB8);
  }
  return result;
}

unint64_t sub_224EE2EEC()
{
  unint64_t result;

  result = qword_2557E2BC0;
  if (!qword_2557E2BC0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry.Vaccination, &type metadata for SignedClinicalDataEUDCCEntry.Vaccination);
    atomic_store(result, (unint64_t *)&qword_2557E2BC0);
  }
  return result;
}

uint64_t sub_224EE2F30(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_224DFC8E4(a1, a2, a3, (uint64_t (*)(void))sub_224EE2D44, (uint64_t (*)(void))sub_224EE2ACC, (uint64_t (*)(void))sub_224EE2F4C);
}

unint64_t sub_224EE2F4C()
{
  unint64_t result;

  result = qword_2557E2BC8;
  if (!qword_2557E2BC8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry.Laboratory, &type metadata for SignedClinicalDataEUDCCEntry.Laboratory);
    atomic_store(result, (unint64_t *)&qword_2557E2BC8);
  }
  return result;
}

unint64_t sub_224EE2F94()
{
  unint64_t result;

  result = qword_2557E2BD0;
  if (!qword_2557E2BD0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry.Laboratory, &type metadata for SignedClinicalDataEUDCCEntry.Laboratory);
    atomic_store(result, (unint64_t *)&qword_2557E2BD0);
  }
  return result;
}

uint64_t sub_224EE2FD8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_224DFC8E4(a1, a2, a3, (uint64_t (*)(void))sub_224EE2C88, (uint64_t (*)(void))sub_224EE2A10, (uint64_t (*)(void))sub_224EE2FF4);
}

unint64_t sub_224EE2FF4()
{
  unint64_t result;

  result = qword_2557E2BD8;
  if (!qword_2557E2BD8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry.Recovery, &type metadata for SignedClinicalDataEUDCCEntry.Recovery);
    atomic_store(result, (unint64_t *)&qword_2557E2BD8);
  }
  return result;
}

unint64_t sub_224EE303C()
{
  unint64_t result;

  result = qword_2557E2BE0;
  if (!qword_2557E2BE0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataEUDCCEntry.Recovery, &type metadata for SignedClinicalDataEUDCCEntry.Recovery);
    atomic_store(result, (unint64_t *)&qword_2557E2BE0);
  }
  return result;
}

uint64_t destroy for SignedClinicalDataEUDCC(uint64_t a1)
{
  sub_224DDE9B4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_224DDE9B4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  sub_224DDE9B4(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_224DDE9B4(*(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216));
}

uint64_t initializeWithCopy for SignedClinicalDataEUDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_224DDE970(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  sub_224DDE970(v6, v7);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  sub_224DDE970(v8, v9);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v12;
  v13 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v13;
  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v14;
  v15 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v15;
  v16 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v16;
  v19 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v17 = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_224DDE970(v19, v17);
  *(_QWORD *)(a1 + 208) = v19;
  *(_QWORD *)(a1 + 216) = v17;
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataEUDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_224DDE970(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_224DDE9B4(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  sub_224DDE970(v8, v9);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  sub_224DDE9B4(v10, v11);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  sub_224DDE970(v12, v13);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v13;
  sub_224DDE9B4(v14, v15);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_WORD *)(a1 + 98) = *(_WORD *)(a2 + 98);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 208);
  v16 = *(_QWORD *)(a2 + 216);
  sub_224DDE970(v17, v16);
  v18 = *(_QWORD *)(a1 + 208);
  v19 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = v17;
  *(_QWORD *)(a1 + 216) = v16;
  sub_224DDE9B4(v18, v19);
  return a1;
}

uint64_t assignWithTake for SignedClinicalDataEUDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_224DDE9B4(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_224DDE9B4(v6, v7);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_224DDE9B4(v8, v9);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a1 + 208);
  v16 = *(_QWORD *)(a1 + 216);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  sub_224DDE9B4(v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 224))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 224) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 224) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCC()
{
  return &type metadata for SignedClinicalDataEUDCC;
}

uint64_t destroy for SignedClinicalDataEUDCCHeader(uint64_t a1)
{
  return sub_224DDE9B4(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t _s23HealthRecordsExtraction29SignedClinicalDataEUDCCHeaderVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_224DDE970(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataEUDCCHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_224DDE970(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  sub_224DDE9B4(v5, v6);
  return a1;
}

uint64_t assignWithTake for SignedClinicalDataEUDCCHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_224DDE9B4(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCCHeader(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && a1[24])
    return (*(_DWORD *)a1 + 253);
  v3 = *a1;
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCHeader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCHeader()
{
  return &type metadata for SignedClinicalDataEUDCCHeader;
}

uint64_t destroy for SignedClinicalDataEUDCCPayload()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SignedClinicalDataEUDCCPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  v8 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v8;
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v9;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataEUDCCPayload(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SignedClinicalDataEUDCCPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCPayload()
{
  return &type metadata for SignedClinicalDataEUDCCPayload;
}

uint64_t destroy for SignedClinicalDataEUDCCEntry()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SignedClinicalDataEUDCCEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataEUDCCEntry(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for SignedClinicalDataEUDCCEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCCEntry(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry()
{
  return &type metadata for SignedClinicalDataEUDCCEntry;
}

uint64_t destroy for SignedClinicalDataEUDCCEntry.Vaccination()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SignedClinicalDataEUDCCEntry.Vaccination(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SignedClinicalDataEUDCCEntry.Vaccination(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SignedClinicalDataEUDCCEntry.Vaccination(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry.Vaccination()
{
  return &type metadata for SignedClinicalDataEUDCCEntry.Vaccination;
}

uint64_t destroy for SignedClinicalDataEUDCCEntry.Laboratory()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for SignedClinicalDataEUDCCEntry.Laboratory(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  v11 = a2[17];
  a1[16] = a2[16];
  a1[17] = v11;
  v12 = a2[19];
  a1[18] = a2[18];
  a1[19] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SignedClinicalDataEUDCCEntry.Laboratory(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

_QWORD *assignWithTake for SignedClinicalDataEUDCCEntry.Laboratory(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_bridgeObjectRelease();
  v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  swift_bridgeObjectRelease();
  v12 = a2[17];
  a1[16] = a2[16];
  a1[17] = v12;
  swift_bridgeObjectRelease();
  v13 = a2[19];
  a1[18] = a2[18];
  a1[19] = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCCEntry.Laboratory(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCEntry.Laboratory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry.Laboratory()
{
  return &type metadata for SignedClinicalDataEUDCCEntry.Laboratory;
}

uint64_t destroy for SignedClinicalDataEUDCCEntry.Recovery()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for SignedClinicalDataEUDCCEntry.Recovery(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SignedClinicalDataEUDCCEntry.Recovery(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

_QWORD *assignWithTake for SignedClinicalDataEUDCCEntry.Recovery(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCCEntry.Recovery(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCEntry.Recovery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry.Recovery()
{
  return &type metadata for SignedClinicalDataEUDCCEntry.Recovery;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCCEntryName(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCEntryName(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntryName()
{
  return &type metadata for SignedClinicalDataEUDCCEntryName;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCCError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_224EE4A90(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_224EE4AAC(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCError()
{
  return &type metadata for SignedClinicalDataEUDCCError;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntryName.CodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCEntryName.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCCEntry.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCEntry.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_224EE4BD0 + 4 * byte_224F714E3[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_224EE4C04 + 4 * byte_224F714DE[v4]))();
}

uint64_t sub_224EE4C04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE4C0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EE4C14);
  return result;
}

uint64_t sub_224EE4C20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EE4C28);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_224EE4C2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE4C34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry.CodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCEntry.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCEntry.Recovery.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_224EE4C9C + 4 * byte_224F714ED[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_224EE4CD0 + 4 * byte_224F714E8[v4]))();
}

uint64_t sub_224EE4CD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE4CD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EE4CE0);
  return result;
}

uint64_t sub_224EE4CEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EE4CF4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_224EE4CF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE4D00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry.Recovery.CodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCEntry.Recovery.CodingKeys;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry.Laboratory.CodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCEntry.Laboratory.CodingKeys;
}

uint64_t _s23HealthRecordsExtraction28SignedClinicalDataEUDCCEntryV10LaboratoryV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s23HealthRecordsExtraction28SignedClinicalDataEUDCCEntryV10LaboratoryV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_224EE4E10 + 4 * byte_224F714F7[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_224EE4E44 + 4 * byte_224F714F2[v4]))();
}

uint64_t sub_224EE4E44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE4E4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EE4E54);
  return result;
}

uint64_t sub_224EE4E60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EE4E68);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_224EE4E6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE4E74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry.Vaccination.CodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCEntry.Vaccination.CodingKeys;
}

uint64_t _s23HealthRecordsExtraction32SignedClinicalDataEUDCCEntryNameV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_224EE4EDC + 4 * byte_224F71501[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_224EE4F10 + 4 * byte_224F714FC[v4]))();
}

uint64_t sub_224EE4F10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE4F18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EE4F20);
  return result;
}

uint64_t sub_224EE4F2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EE4F34);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_224EE4F38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE4F40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCPayload.CodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCPayload.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCPayload.CertCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_224EE4F9C + 4 * byte_224F71506[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_224EE4FBC + 4 * byte_224F7150B[v4]))();
}

_BYTE *sub_224EE4F9C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_224EE4FBC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_224EE4FC4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_224EE4FCC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_224EE4FD4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_224EE4FDC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCPayload.CertCodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCPayload.CertCodingKeys;
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCHeader.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_224EE5044 + 4 * byte_224F71515[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_224EE5078 + 4 * byte_224F71510[v4]))();
}

uint64_t sub_224EE5078(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE5080(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EE5088);
  return result;
}

uint64_t sub_224EE5094(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EE509CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_224EE50A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE50A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCHeader.CodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCHeader.CodingKeys;
}

unint64_t sub_224EE50C8()
{
  unint64_t result;

  result = qword_2557E2BE8;
  if (!qword_2557E2BE8)
  {
    result = MEMORY[0x22768ED24](&unk_224F71C14, &type metadata for SignedClinicalDataEUDCCHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2BE8);
  }
  return result;
}

unint64_t sub_224EE5110()
{
  unint64_t result;

  result = qword_2557E2BF0;
  if (!qword_2557E2BF0)
  {
    result = MEMORY[0x22768ED24](&unk_224F71D04, &type metadata for SignedClinicalDataEUDCCPayload.CertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2BF0);
  }
  return result;
}

unint64_t sub_224EE5158()
{
  unint64_t result;

  result = qword_2557E2BF8;
  if (!qword_2557E2BF8)
  {
    result = MEMORY[0x22768ED24](&unk_224F71DF4, &type metadata for SignedClinicalDataEUDCCPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2BF8);
  }
  return result;
}

unint64_t sub_224EE51A0()
{
  unint64_t result;

  result = qword_2557E2C00;
  if (!qword_2557E2C00)
  {
    result = MEMORY[0x22768ED24](&unk_224F71EAC, &type metadata for SignedClinicalDataEUDCCEntry.Vaccination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C00);
  }
  return result;
}

unint64_t sub_224EE51E8()
{
  unint64_t result;

  result = qword_2557E2C08;
  if (!qword_2557E2C08)
  {
    result = MEMORY[0x22768ED24](&unk_224F71F64, &type metadata for SignedClinicalDataEUDCCEntry.Laboratory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C08);
  }
  return result;
}

unint64_t sub_224EE5230()
{
  unint64_t result;

  result = qword_2557E2C10;
  if (!qword_2557E2C10)
  {
    result = MEMORY[0x22768ED24](&unk_224F7201C, &type metadata for SignedClinicalDataEUDCCEntry.Recovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C10);
  }
  return result;
}

unint64_t sub_224EE5278()
{
  unint64_t result;

  result = qword_2557E2C18;
  if (!qword_2557E2C18)
  {
    result = MEMORY[0x22768ED24](&unk_224F720D4, &type metadata for SignedClinicalDataEUDCCEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C18);
  }
  return result;
}

unint64_t sub_224EE52C0()
{
  unint64_t result;

  result = qword_2557E2C20;
  if (!qword_2557E2C20)
  {
    result = MEMORY[0x22768ED24](&unk_224F7218C, &type metadata for SignedClinicalDataEUDCCEntryName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C20);
  }
  return result;
}

unint64_t sub_224EE5308()
{
  unint64_t result;

  result = qword_2557E2C28;
  if (!qword_2557E2C28)
  {
    result = MEMORY[0x22768ED24](&unk_224F720FC, &type metadata for SignedClinicalDataEUDCCEntryName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C28);
  }
  return result;
}

unint64_t sub_224EE5350()
{
  unint64_t result;

  result = qword_2557E2C30;
  if (!qword_2557E2C30)
  {
    result = MEMORY[0x22768ED24](&unk_224F72124, &type metadata for SignedClinicalDataEUDCCEntryName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C30);
  }
  return result;
}

unint64_t sub_224EE5398()
{
  unint64_t result;

  result = qword_2557E2C38;
  if (!qword_2557E2C38)
  {
    result = MEMORY[0x22768ED24](&unk_224F72044, &type metadata for SignedClinicalDataEUDCCEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C38);
  }
  return result;
}

unint64_t sub_224EE53E0()
{
  unint64_t result;

  result = qword_2557E2C40;
  if (!qword_2557E2C40)
  {
    result = MEMORY[0x22768ED24](&unk_224F7206C, &type metadata for SignedClinicalDataEUDCCEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C40);
  }
  return result;
}

unint64_t sub_224EE5428()
{
  unint64_t result;

  result = qword_2557E2C48;
  if (!qword_2557E2C48)
  {
    result = MEMORY[0x22768ED24](&unk_224F71F8C, &type metadata for SignedClinicalDataEUDCCEntry.Recovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C48);
  }
  return result;
}

unint64_t sub_224EE5470()
{
  unint64_t result;

  result = qword_2557E2C50;
  if (!qword_2557E2C50)
  {
    result = MEMORY[0x22768ED24](&unk_224F71FB4, &type metadata for SignedClinicalDataEUDCCEntry.Recovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C50);
  }
  return result;
}

unint64_t sub_224EE54B8()
{
  unint64_t result;

  result = qword_2557E2C58;
  if (!qword_2557E2C58)
  {
    result = MEMORY[0x22768ED24](&unk_224F71ED4, &type metadata for SignedClinicalDataEUDCCEntry.Laboratory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C58);
  }
  return result;
}

unint64_t sub_224EE5500()
{
  unint64_t result;

  result = qword_2557E2C60;
  if (!qword_2557E2C60)
  {
    result = MEMORY[0x22768ED24](&unk_224F71EFC, &type metadata for SignedClinicalDataEUDCCEntry.Laboratory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C60);
  }
  return result;
}

unint64_t sub_224EE5548()
{
  unint64_t result;

  result = qword_2557E2C68;
  if (!qword_2557E2C68)
  {
    result = MEMORY[0x22768ED24](&unk_224F71E1C, &type metadata for SignedClinicalDataEUDCCEntry.Vaccination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C68);
  }
  return result;
}

unint64_t sub_224EE5590()
{
  unint64_t result;

  result = qword_2557E2C70;
  if (!qword_2557E2C70)
  {
    result = MEMORY[0x22768ED24](&unk_224F71E44, &type metadata for SignedClinicalDataEUDCCEntry.Vaccination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C70);
  }
  return result;
}

unint64_t sub_224EE55D8()
{
  unint64_t result;

  result = qword_2557E2C78;
  if (!qword_2557E2C78)
  {
    result = MEMORY[0x22768ED24](&unk_224F71D2C, &type metadata for SignedClinicalDataEUDCCPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C78);
  }
  return result;
}

unint64_t sub_224EE5620()
{
  unint64_t result;

  result = qword_2557E2C80;
  if (!qword_2557E2C80)
  {
    result = MEMORY[0x22768ED24](&unk_224F71D54, &type metadata for SignedClinicalDataEUDCCPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C80);
  }
  return result;
}

unint64_t sub_224EE5668()
{
  unint64_t result;

  result = qword_2557E2C88;
  if (!qword_2557E2C88)
  {
    result = MEMORY[0x22768ED24](&unk_224F71C3C, &type metadata for SignedClinicalDataEUDCCPayload.CertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C88);
  }
  return result;
}

unint64_t sub_224EE56B0()
{
  unint64_t result;

  result = qword_2557E2C90;
  if (!qword_2557E2C90)
  {
    result = MEMORY[0x22768ED24](&unk_224F71C64, &type metadata for SignedClinicalDataEUDCCPayload.CertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C90);
  }
  return result;
}

unint64_t sub_224EE56F8()
{
  unint64_t result;

  result = qword_2557E2C98;
  if (!qword_2557E2C98)
  {
    result = MEMORY[0x22768ED24](&unk_224F71B4C, &type metadata for SignedClinicalDataEUDCCHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2C98);
  }
  return result;
}

unint64_t sub_224EE5740()
{
  unint64_t result;

  result = qword_2557E2CA0;
  if (!qword_2557E2CA0)
  {
    result = MEMORY[0x22768ED24](&unk_224F71B74, &type metadata for SignedClinicalDataEUDCCHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2CA0);
  }
  return result;
}

uint64_t sub_224EE5784(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 6777953 && a2 == 0xE300000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6580587 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_224EE5854(uint64_t a1)
{
  if (a1 > 3)
  {
    if (a1 != 6)
    {
      if (a1 == 4)
        return 2;
      return 4;
    }
    return 1;
  }
  else
  {
    if (a1 != -260)
    {
      if (a1 == 1)
        return 0;
      return 4;
    }
    return 3;
  }
}

uint64_t sub_224EE58A4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7566185 && a2 == 0xE300000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7627113 && a2 == 0xE300000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7370853 && a2 == 0xE300000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7472656368 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_224EE5A24(uint64_t a1)
{
  if (a1 > 3)
  {
    if (a1 != 4)
    {
      if (a1 == 6)
        return 1;
      return 4;
    }
    return 2;
  }
  else
  {
    if (a1 != -260)
    {
      if (a1 == 1)
        return 0;
      return 4;
    }
    return 3;
  }
}

uint64_t sub_224EE5A74(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 26979 && a2 == 0xE200000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 28515 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 28260 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 29796 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 29545 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 24941 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 28781 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 25715 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 26484 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 28790 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_224EE5D94(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 26979 && a2 == 0xE200000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 28515 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 29545 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 28014 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 24941 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 25459 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 25460 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 26484 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 29300 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 29812 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_224EE60B4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 26979 && a2 == 0xE200000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 28515 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 26212 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 30052 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 29286 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 29545 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 26484 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_224EE62F0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 6451044 && a2 == 0xE300000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7168366 && a2 == 0xE300000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 114 && a2 == 0xE100000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 116 && a2 == 0xE100000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 118 && a2 == 0xE100000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7497078 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_224EE64EC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 28262 && a2 == 0xE200000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7630438 && a2 == 0xE300000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 28263 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7630439 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t VCJWT<>.debugDescription.getter()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[6];
  _OWORD v6[2];

  v1 = v0[10];
  v5[4] = v0[9];
  v5[5] = v1;
  v6[0] = v0[11];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v0 + 185);
  v2 = v0[6];
  v5[0] = v0[5];
  v5[1] = v2;
  v3 = v0[8];
  v5[2] = v0[7];
  v5[3] = v3;
  sub_224F680E4();
  swift_bridgeObjectRelease();
  sub_224ECF33C((uint64_t)v5);
  sub_224DFB77C(0, (unint64_t *)&qword_2557E1620, (uint64_t (*)(void))sub_224E5887C, (uint64_t)&type metadata for SignedClinicalDataSubject, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SignedClinicalDataJWTPayload);
  sub_224F67BD4();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  return 0xD000000000000021;
}

uint64_t type metadata accessor for SignedClinicalDataJWTPayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SignedClinicalDataJWTPayload);
}

void SignedClinicalDataJWTHeader.alg.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t SignedClinicalDataJWTHeader.kid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataJWTHeader.typ.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

void SignedClinicalDataJWTHeader.zip.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

double SignedClinicalDataJWTHeader.init(kid:zip:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4;
  double result;

  v4 = *a3;
  *(_BYTE *)a4 = 1;
  *(_QWORD *)(a4 + 8) = a1;
  *(_QWORD *)(a4 + 16) = a2;
  *(_QWORD *)&result = 5527370;
  *(_OWORD *)(a4 + 24) = xmmword_224F72530;
  *(_BYTE *)(a4 + 40) = v4;
  return result;
}

_BYTE *SignedClinicalDataJWTHeader.init(alg:kid:typ:zip:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  char v7;

  v7 = *a6;
  *(_BYTE *)a7 = *result;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_QWORD *)(a7 + 32) = a5;
  *(_BYTE *)(a7 + 40) = v7;
  return result;
}

uint64_t sub_224EE681C()
{
  char *v0;

  return qword_224F72C48[*v0];
}

uint64_t sub_224EE6834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224EE9D2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224EE6858()
{
  sub_224EE8514();
  return sub_224F685B8();
}

uint64_t sub_224EE6880()
{
  sub_224EE8514();
  return sub_224F685C4();
}

uint64_t SignedClinicalDataJWTHeader.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  sub_224DFB77C(0, &qword_2557E2CA8, (uint64_t (*)(void))sub_224EE8514, (uint64_t)&type metadata for SignedClinicalDataJWTHeader.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v14 - v6;
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v17 = *((_QWORD *)v1 + 2);
  v18 = v9;
  v10 = *((_QWORD *)v1 + 3);
  v15 = *((_QWORD *)v1 + 4);
  v16 = v10;
  HIDWORD(v14) = v1[40];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224EE8514();
  sub_224F68594();
  v25 = v8;
  v24 = 0;
  sub_224EDC8D4();
  v11 = v19;
  sub_224F68378();
  if (!v11)
  {
    v12 = BYTE4(v14);
    v23 = 1;
    sub_224F68348();
    v22 = 2;
    sub_224F68300();
    v21 = v12;
    v20 = 3;
    sub_224EE8558();
    sub_224F68330();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignedClinicalDataJWTHeader.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  unsigned __int8 v29;

  sub_224DFB77C(0, &qword_2557E2CC0, (uint64_t (*)(void))sub_224EE8514, (uint64_t)&type metadata for SignedClinicalDataJWTHeader.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v23 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224EE8514();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = v6;
  v28 = 0;
  sub_224EDCAFC();
  v10 = v23;
  sub_224F682DC();
  v11 = v29;
  v27 = 1;
  v12 = sub_224F682AC();
  v14 = v13;
  v21 = v12;
  v22 = v11;
  v26 = 2;
  swift_bridgeObjectRetain();
  v15 = sub_224F68264();
  v17 = v16;
  v20 = v15;
  v24 = 3;
  sub_224EE859C();
  swift_bridgeObjectRetain();
  sub_224F68294();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v10);
  v18 = v25;
  *(_BYTE *)a2 = v22;
  *(_QWORD *)(a2 + 8) = v21;
  *(_QWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v20;
  *(_QWORD *)(a2 + 32) = v17;
  *(_BYTE *)(a2 + 40) = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_224EE6D08(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_224EE6D14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_224EE6D40(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

uint64_t sub_224EE6D4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SignedClinicalDataJWTHeader.init(from:)(a1, a2);
}

uint64_t sub_224EE6D60(_QWORD *a1)
{
  return SignedClinicalDataJWTHeader.encode(to:)(a1);
}

uint64_t SignedClinicalDataJWTPayload.VC.type.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SignedClinicalDataJWTPayload.VC.credentialSubject.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t static SignedClinicalDataJWTPayload.VC.== infix(_:_:)(_QWORD **a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if ((sub_224DD698C(*a1, *a2) & 1) == 0)
    return 0;
  type metadata accessor for SignedClinicalDataJWTPayload.VC(0, a3, a4, v6);
  return sub_224F67B50() & 1;
}

uint64_t SignedClinicalDataJWTPayload.VC.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  sub_224F6851C();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      v3 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return sub_224F67B20();
}

BOOL sub_224EE6EC4(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_224EE6ED4()
{
  return sub_224F6851C();
}

uint64_t sub_224EE6EF8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000224F82410)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_224EE6FD4()
{
  sub_224F68510();
  sub_224F6851C();
  return sub_224F6854C();
}

uint64_t sub_224EE7018(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000011;
  else
    return 1701869940;
}

BOOL sub_224EE704C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_224EE6EC4(*a1, *a2);
}

uint64_t sub_224EE7060()
{
  return sub_224EE6FD4();
}

uint64_t sub_224EE7070()
{
  return sub_224EE6ED4();
}

uint64_t sub_224EE7080()
{
  sub_224F68510();
  sub_224EE6ED4();
  return sub_224F6854C();
}

uint64_t sub_224EE70C4()
{
  char *v0;

  return sub_224EE7018(*v0);
}

uint64_t sub_224EE70D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224EE6EF8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224EE7100@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_224EE9EA0();
  *a1 = result;
  return result;
}

uint64_t sub_224EE7128(uint64_t a1)
{
  MEMORY[0x22768ED24](&unk_224F72BA0, a1);
  return sub_224F685B8();
}

uint64_t sub_224EE715C(uint64_t a1)
{
  MEMORY[0x22768ED24](&unk_224F72BA0, a1);
  return sub_224F685C4();
}

uint64_t SignedClinicalDataJWTPayload.VC.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  v5 = v4;
  v7 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 16);
  v15[1] = a2;
  v15[2] = v7;
  v8 = type metadata accessor for SignedClinicalDataJWTPayload.VC.CodingKeys(255, v16, v7, a4);
  MEMORY[0x22768ED24](&unk_224F72BA0, v8);
  v9 = sub_224F68390();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v15 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68594();
  v20 = *v5;
  v19 = 0;
  sub_224E54704(0, (unint64_t *)&qword_2557E0888, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_224EE85F8(&qword_2557E0890, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
  v13 = v17;
  sub_224F68378();
  if (!v13)
  {
    v18 = 1;
    sub_224F68378();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t SignedClinicalDataJWTPayload.VC.hashValue.getter(uint64_t a1)
{
  return sub_224EE7FFC(a1, (void (*)(_BYTE *, uint64_t))SignedClinicalDataJWTPayload.VC.hash(into:));
}

uint64_t SignedClinicalDataJWTPayload.VC.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;

  v31 = a4;
  v30 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v33 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SignedClinicalDataJWTPayload.VC.CodingKeys(255, v8, v9, v10);
  MEMORY[0x22768ED24](&unk_224F72BA0, v11);
  v37 = sub_224F682F4();
  v32 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v13 = (char *)&v28 - v12;
  v34 = a2;
  v35 = a3;
  v15 = type metadata accessor for SignedClinicalDataJWTPayload.VC(0, a2, a3, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v28 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v36 = v13;
  v19 = v38;
  sub_224F6857C();
  if (v19)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v21 = v32;
  v20 = v33;
  v38 = v16;
  v29 = v15;
  v22 = v34;
  v23 = (uint64_t)a1;
  sub_224E54704(0, (unint64_t *)&qword_2557E0888, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  v40 = 0;
  sub_224EE85F8(&qword_2557E08A0, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
  sub_224F682DC();
  *(_QWORD *)v18 = v41;
  v39 = 1;
  v24 = v22;
  sub_224F682DC();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v36, v37);
  v25 = v29;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v18[*(int *)(v29 + 36)], v20, v24);
  v26 = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v31, v18, v25);
  __swift_destroy_boxed_opaque_existential_1(v23);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v18, v25);
}

uint64_t sub_224EE7604@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SignedClinicalDataJWTPayload.VC.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_224EE7620(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SignedClinicalDataJWTPayload.VC.encode(to:)(a1, a2, a3, a4);
}

uint64_t sub_224EE7634(_QWORD **a1, _QWORD **a2, uint64_t a3)
{
  return static SignedClinicalDataJWTPayload.VC.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_224EE7648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224EE8398(a1, a2, a3, (void (*)(_BYTE *, uint64_t))SignedClinicalDataJWTPayload.VC.hash(into:));
}

uint64_t SignedClinicalDataJWTPayload.iss.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataJWTPayload.nbf.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t SignedClinicalDataJWTPayload.iat.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t SignedClinicalDataJWTPayload.exp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t SignedClinicalDataJWTPayload.vc.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v3 + *(int *)(a1 + 48);
  v6 = type metadata accessor for SignedClinicalDataJWTPayload.VC(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, v5, v6);
}

uint64_t SignedClinicalDataJWTPayload.debugDescription.getter()
{
  sub_224F680E4();
  sub_224F67C94();
  swift_bridgeObjectRetain();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  sub_224E54704(0, &qword_2557E2CD0, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  sub_224F67BC8();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  sub_224F67BC8();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  sub_224F67BC8();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  return 0;
}

uint64_t SignedClinicalDataJWTPayload.hash(into:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v4;

  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v2[24] == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224F68528();
    sub_224F68540();
  }
  if (v2[40] == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224F68528();
    sub_224F68540();
  }
  if (v2[56] == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224F68528();
    sub_224F68540();
  }
  type metadata accessor for SignedClinicalDataJWTPayload.VC(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v4);
  return SignedClinicalDataJWTPayload.VC.hash(into:)();
}

uint64_t static SignedClinicalDataJWTPayload.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  char v10;
  char v11;
  char v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == v8;
  if (!v9 && (sub_224F683CC() & 1) == 0)
    return 0;
  v10 = *(_BYTE *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
      v10 = 1;
    if ((v10 & 1) != 0)
      return 0;
  }
  v11 = *(_BYTE *)(a2 + 40);
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 40))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
      v11 = 1;
    if ((v11 & 1) != 0)
      return 0;
  }
  v12 = *(_BYTE *)(a2 + 56);
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 56))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 48) != *(double *)(a2 + 48))
      v12 = 1;
    if ((v12 & 1) != 0)
      return 0;
  }
  v14 = *(int *)(type metadata accessor for SignedClinicalDataJWTPayload(0, a3, a4, v8) + 48);
  return static SignedClinicalDataJWTPayload.VC.== infix(_:_:)((_QWORD **)(a1 + v14), (_QWORD **)(a2 + v14), a3, a4);
}

uint64_t sub_224EE7A90(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7566185 && a2 == 0xE300000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6709870 && a2 == 0xE300000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7627113 && a2 == 0xE300000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7370853 && a2 == 0xE300000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 25462 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_224EE7C54(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224EE7C80 + 4 * byte_224F72540[a1]))(7566185, 0xE300000000000000);
}

uint64_t sub_224EE7C80()
{
  return 6709870;
}

uint64_t sub_224EE7C8C()
{
  return 7627113;
}

uint64_t sub_224EE7C98()
{
  return 7370853;
}

uint64_t sub_224EE7CA4()
{
  return 25462;
}

BOOL sub_224EE7CB0(char *a1, char *a2)
{
  return sub_224E5E948(*a1, *a2);
}

uint64_t sub_224EE7CC4()
{
  return sub_224E5EBF0();
}

uint64_t sub_224EE7CD0()
{
  return sub_224E5E958();
}

uint64_t sub_224EE7CDC()
{
  sub_224F68510();
  sub_224E5E958();
  return sub_224F6854C();
}

uint64_t sub_224EE7D20()
{
  unsigned __int8 *v0;

  return sub_224EE7C54(*v0);
}

uint64_t sub_224EE7D2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224EE7A90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224EE7D58@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_224E600E4();
  *a1 = result;
  return result;
}

uint64_t sub_224EE7D80(uint64_t a1)
{
  MEMORY[0x22768ED24](&unk_224F72B50, a1);
  return sub_224F685B8();
}

uint64_t sub_224EE7DB4(uint64_t a1)
{
  MEMORY[0x22768ED24](&unk_224F72B50, a1);
  return sub_224F685C4();
}

uint64_t SignedClinicalDataJWTPayload.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v19 = a2;
  v5 = *(_QWORD *)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 24);
  v18 = v5;
  v6 = type metadata accessor for SignedClinicalDataJWTPayload.CodingKeys(255, v5, v17, a4);
  MEMORY[0x22768ED24](&unk_224F72B50, v6);
  v7 = sub_224F68390();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v17 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68594();
  v25 = 0;
  v11 = v10;
  v12 = v20;
  sub_224F68348();
  if (v12)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v14 = v18;
  v24 = 1;
  sub_224F68318();
  v23 = 2;
  sub_224F68318();
  v22 = 3;
  sub_224F68318();
  v21 = 4;
  v16 = type metadata accessor for SignedClinicalDataJWTPayload.VC(0, v14, v17, v15);
  MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataJWTPayload<A>.VC, v16);
  sub_224F68378();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t SignedClinicalDataJWTPayload.hashValue.getter(uint64_t a1)
{
  return sub_224EE7FFC(a1, (void (*)(_BYTE *, uint64_t))SignedClinicalDataJWTPayload.hash(into:));
}

uint64_t sub_224EE7FFC(uint64_t a1, void (*a2)(_BYTE *, uint64_t))
{
  _BYTE v5[72];

  sub_224F68510();
  a2(v5, a1);
  return sub_224F6854C();
}

uint64_t SignedClinicalDataJWTPayload.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;

  v36 = a5;
  v35 = type metadata accessor for SignedClinicalDataJWTPayload.VC(0, a2, a3, a4);
  v32 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v34 = (char *)&v30 - v8;
  v10 = type metadata accessor for SignedClinicalDataJWTPayload.CodingKeys(255, a2, a3, v9);
  MEMORY[0x22768ED24](&unk_224F72B50, v10);
  v38 = sub_224F682F4();
  v33 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v12 = (char *)&v30 - v11;
  v31 = type metadata accessor for SignedClinicalDataJWTPayload(0, a2, a3, v13);
  v14 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v16 = (char *)&v30 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v37 = v12;
  v17 = v39;
  sub_224F6857C();
  if (v17)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v39 = v14;
  v19 = v33;
  v18 = v34;
  v20 = (uint64_t)a1;
  v21 = v35;
  v22 = v36;
  v44 = 0;
  *(_QWORD *)v16 = sub_224F682AC();
  *((_QWORD *)v16 + 1) = v23;
  v43 = 1;
  *((_QWORD *)v16 + 2) = sub_224F6827C();
  v16[24] = v24 & 1;
  v42 = 2;
  *((_QWORD *)v16 + 4) = sub_224F6827C();
  v16[40] = v25 & 1;
  v41 = 3;
  *((_QWORD *)v16 + 6) = sub_224F6827C();
  v16[56] = v26 & 1;
  v40 = 4;
  MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataJWTPayload<A>.VC, v21);
  sub_224F682DC();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v37, v38);
  v27 = v31;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v16[*(int *)(v31 + 48)], v18, v21);
  v28 = v39;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v22, v16, v27);
  __swift_destroy_boxed_opaque_existential_1(v20);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v16, v27);
}

uint64_t sub_224EE8354()
{
  return SignedClinicalDataJWTPayload.nbf.getter();
}

uint64_t sub_224EE836C()
{
  return SignedClinicalDataJWTPayload.exp.getter();
}

uint64_t sub_224EE838C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224EE8398(a1, a2, a3, (void (*)(_BYTE *, uint64_t))SignedClinicalDataJWTPayload.hash(into:));
}

uint64_t sub_224EE8398(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t))
{
  _BYTE v7[72];

  sub_224F68510();
  a4(v7, a2);
  return sub_224F6854C();
}

uint64_t sub_224EE83E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return SignedClinicalDataJWTPayload.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_224EE8404(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SignedClinicalDataJWTPayload.encode(to:)(a1, a2, a3, a4);
}

uint64_t sub_224EE8418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SignedClinicalDataJWTPayload.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t _s23HealthRecordsExtraction27SignedClinicalDataJWTHeaderV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t result;
  char v15;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 40);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 40);
  sub_224F168D0(*(_BYTE *)a1);
  if ((v12 & 1) == 0)
    return 0;
  if (v2 == v7 && v3 == v8 || (v13 = sub_224F683CC(), result = 0, (v13 & 1) != 0))
  {
    if (v4)
    {
      if (v9)
      {
        if (v5 != v10 || v4 != v9)
        {
          v15 = sub_224F683CC();
          result = 0;
          if ((v15 & 1) == 0)
            return result;
        }
LABEL_12:
        if ((v6 & 1) != 0)
        {
          if ((v11 & 1) == 0)
            return 0;
        }
        else if ((v11 & 1) != 0)
        {
          return 0;
        }
        return 1;
      }
    }
    else if (!v9)
    {
      goto LABEL_12;
    }
    return 0;
  }
  return result;
}

unint64_t sub_224EE8514()
{
  unint64_t result;

  result = qword_2557E2CB0;
  if (!qword_2557E2CB0)
  {
    result = MEMORY[0x22768ED24](&unk_224F72BF0, &type metadata for SignedClinicalDataJWTHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2CB0);
  }
  return result;
}

unint64_t sub_224EE8558()
{
  unint64_t result;

  result = qword_2557E2CB8;
  if (!qword_2557E2CB8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for CompressionAlgorithm, &type metadata for CompressionAlgorithm);
    atomic_store(result, (unint64_t *)&qword_2557E2CB8);
  }
  return result;
}

unint64_t sub_224EE859C()
{
  unint64_t result;

  result = qword_2557E2CC8;
  if (!qword_2557E2CC8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for CompressionAlgorithm, &type metadata for CompressionAlgorithm);
    atomic_store(result, (unint64_t *)&qword_2557E2CC8);
  }
  return result;
}

uint64_t type metadata accessor for SignedClinicalDataJWTPayload.VC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SignedClinicalDataJWTPayload.VC);
}

uint64_t type metadata accessor for SignedClinicalDataJWTPayload.VC.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SignedClinicalDataJWTPayload.VC.CodingKeys);
}

uint64_t sub_224EE85F8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_224E54704(255, (unint64_t *)&qword_2557E0888, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v8 = a2;
    result = MEMORY[0x22768ED24](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SignedClinicalDataJWTPayload.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SignedClinicalDataJWTPayload.CodingKeys);
}

unint64_t sub_224EE8678(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_224E587CC();
  a1[2] = sub_224EE86AC();
  result = sub_224EE86F0();
  a1[3] = result;
  return result;
}

unint64_t sub_224EE86AC()
{
  unint64_t result;

  result = qword_2557E2CD8;
  if (!qword_2557E2CD8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataJWTHeader, &type metadata for SignedClinicalDataJWTHeader);
    atomic_store(result, (unint64_t *)&qword_2557E2CD8);
  }
  return result;
}

unint64_t sub_224EE86F0()
{
  unint64_t result;

  result = qword_2557E2CE0[0];
  if (!qword_2557E2CE0[0])
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataJWTHeader, &type metadata for SignedClinicalDataJWTHeader);
    atomic_store(result, qword_2557E2CE0);
  }
  return result;
}

void sub_224EE8734()
{
  JUMPOUT(0x22768ED24);
}

uint64_t sub_224EE8744(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataJWTPayload<A>);
  a1[2] = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataJWTPayload<A>, a2);
  result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataJWTPayload<A>, a2);
  a1[3] = result;
  return result;
}

void sub_224EE879C()
{
  JUMPOUT(0x22768ED24);
}

uint64_t destroy for SignedClinicalDataJWTHeader()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SignedClinicalDataJWTHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataJWTHeader(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for SignedClinicalDataJWTHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataJWTHeader(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataJWTHeader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataJWTHeader()
{
  return &type metadata for SignedClinicalDataJWTHeader;
}

uint64_t sub_224EE8994()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_224EE899C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for SignedClinicalDataJWTPayload.VC(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_224EE8A20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  void (*v27)(unint64_t, unint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ~(v6 | 7);
  v8 = v6 + 8;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64) + (((v6 | 7) + 57) & ~(v6 | 7uLL)) > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v6 + 16) & v7));
    swift_retain();
  }
  else
  {
    v12 = ~v6;
    v13 = a2[1];
    *a1 = *a2;
    a1[1] = v13;
    v14 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
    v15 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
    v16 = *(_QWORD *)v15;
    *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
    *(_QWORD *)v14 = v16;
    v17 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)v18;
    *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
    *(_QWORD *)v17 = v19;
    v20 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
    v21 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_QWORD *)v21;
    *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
    *(_QWORD *)v20 = v22;
    v23 = (_QWORD *)(((unint64_t)a1 + 71) & v7);
    v24 = (_QWORD *)(((unint64_t)a2 + 71) & v7);
    *v23 = *v24;
    v25 = ((unint64_t)v23 + v8) & v12;
    v26 = ((unint64_t)v24 + v8) & v12;
    v27 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27(v25, v26, v4);
  }
  return a1;
}

uint64_t sub_224EE8B68(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease();
  v4 = (a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + (v7 | 7) + 9) & ~(v7 | 7);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))((v7 + v8 + 8) & ~v7, v5);
}

_QWORD *sub_224EE8BD8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)v6;
  *(_BYTE *)(v5 + 8) = *(_BYTE *)(v6 + 8);
  *(_QWORD *)v5 = v7;
  v8 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v9 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = v13;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (v16 | 7) + 9;
  v18 = (_QWORD *)((v17 + v11) & ~(v16 | 7));
  v19 = (_QWORD *)((v17 + v12) & ~(v16 | 7));
  *v18 = *v19;
  v20 = ((unint64_t)v18 + v16 + 8) & ~v16;
  v21 = ((unint64_t)v19 + v16 + 8) & ~v16;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v20, v21, v14);
  return a1;
}

_QWORD *sub_224EE8CD0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)v7;
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(v7 + 8);
  *(_QWORD *)v6 = v8;
  v9 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = v11;
  v12 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = v14;
  v15 = *(_QWORD *)(a3 + 16);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v17 | 7) + 9;
  v19 = (_QWORD *)((v18 + v12) & ~(v17 | 7));
  v20 = (_QWORD *)((v18 + v13) & ~(v17 | 7));
  *v19 = *v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 24))(((unint64_t)v19 + v17 + 8) & ~v17, ((unint64_t)v20 + v17 + 8) & ~v17, v15);
  return a1;
}

_OWORD *sub_224EE8DEC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  *a1 = *a2;
  v4 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
  *(_QWORD *)v4 = v6;
  v7 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = v9;
  v10 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  *(_QWORD *)v10 = v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 | 7) + 9;
  v16 = (_QWORD *)((v15 + v10) & ~(v14 | 7));
  v17 = (_QWORD *)((v15 + v11) & ~(v14 | 7));
  *v16 = *v17;
  (*(void (**)(unint64_t, unint64_t))(v13 + 32))(((unint64_t)v16 + v14 + 8) & ~v14, ((unint64_t)v17 + v14 + 8) & ~v14);
  return a1;
}

_QWORD *sub_224EE8EBC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = v9;
  v10 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  *(_QWORD *)v10 = v12;
  v13 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = v15;
  v16 = *(_QWORD *)(a3 + 16);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v18 | 7) + 9;
  v20 = (_QWORD *)((v19 + v13) & ~(v18 | 7));
  v21 = (_QWORD *)((v19 + v14) & ~(v18 | 7));
  *v20 = *v21;
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 40))(((unint64_t)v20 + v18 + 8) & ~v18, ((unint64_t)v21 + v18 + 8) & ~v18, v16);
  return a1;
}

uint64_t sub_224EE8FB8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v16;
  int v17;
  unint64_t v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (v5 >= 0)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = v8 | 7;
  v10 = v8 + 8;
  v11 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_25;
  v12 = (v10 & ~v8) + *(_QWORD *)(v4 + 64) + ((v9 + 57) & ~v9);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v16 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v16))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v16 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v16 < 2)
    {
LABEL_25:
      if (v7 != 0x7FFFFFFF)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v10
                                                                      + ((((a1 + 55) & 0xFFFFFFFFFFFFFFF8) + v9 + 9) & ~v9)) & ~v8);
      v18 = *(_QWORD *)(a1 + 8);
      if (v18 >= 0xFFFFFFFF)
        LODWORD(v18) = -1;
      return (v18 + 1);
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_25;
LABEL_18:
  v17 = (v14 - 1) << v13;
  if (v12 > 3)
    v17 = 0;
  if (!(_DWORD)v12)
    return v7 + v17 + 1;
  if (v12 > 3)
    LODWORD(v12) = 4;
  return ((uint64_t (*)(void))((char *)&loc_224EE90A4 + 4 * byte_224F72545[(v12 - 1)]))();
}

void sub_224EE9130(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v7 >= 0)
    v9 = 0x7FFFFFFF;
  else
    v9 = v8;
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = ((v10 + 8) & ~v10) + *(_QWORD *)(v6 + 64) + (((v10 | 7) + 57) & ~(v10 | 7));
  v12 = a3 >= v9;
  v13 = a3 - v9;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      v16 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v16))
      {
        v14 = 4u;
      }
      else if (v16 >= 0x100)
      {
        v14 = 2;
      }
      else
      {
        v14 = v16 > 1;
      }
    }
    else
    {
      v14 = 1u;
    }
  }
  else
  {
    v14 = 0;
  }
  if (v9 < a2)
  {
    v15 = ~v9 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v17 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *a1 = v17;
          *((_BYTE *)a1 + 2) = BYTE2(v17);
        }
        else if ((_DWORD)v11 == 2)
        {
          *a1 = v17;
        }
        else
        {
          *(_BYTE *)a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, ((v10 + 8) & ~v10) + *(_QWORD *)(v6 + 64) + (((v10 | 7) + 57) & ~(v10 | 7)));
      *(_DWORD *)a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t sub_224EE935C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_224EE93D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_224EE9494(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_224EE94D8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_bridgeObjectRetain();
  v9(v7, v8, v4);
  return a1;
}

_QWORD *sub_224EE9548(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *sub_224EE95B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_224EE9608(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_224EE9670(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_224EE9744 + 4 * byte_224F72553[(v9 - 1)]))();
}

void sub_224EE97B4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_224EE99A8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_224EE99B0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_224EE99FC + 4 * byte_224F72566[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_224EE9A30 + 4 * byte_224F72561[v4]))();
}

uint64_t sub_224EE9A30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE9A38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EE9A40);
  return result;
}

uint64_t sub_224EE9A4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EE9A54);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_224EE9A58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE9A60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE9A6C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_224EE9AB8 + 4 * byte_224F72570[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_224EE9AEC + 4 * byte_224F7256B[v4]))();
}

uint64_t sub_224EE9AEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE9AF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EE9AFCLL);
  return result;
}

uint64_t sub_224EE9B08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EE9B10);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_224EE9B14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE9B1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataJWTHeader.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_224EE9B74 + 4 * byte_224F7257A[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_224EE9BA8 + 4 * byte_224F72575[v4]))();
}

uint64_t sub_224EE9BA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE9BB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EE9BB8);
  return result;
}

uint64_t sub_224EE9BC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EE9BCCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_224EE9BD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EE9BD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataJWTHeader.CodingKeys()
{
  return &type metadata for SignedClinicalDataJWTHeader.CodingKeys;
}

unint64_t sub_224EE9BF8()
{
  unint64_t result;

  result = qword_2557E2EE8;
  if (!qword_2557E2EE8)
  {
    result = MEMORY[0x22768ED24](&unk_224F729B8, &type metadata for SignedClinicalDataJWTHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2EE8);
  }
  return result;
}

void sub_224EE9C3C()
{
  JUMPOUT(0x22768ED24);
}

void sub_224EE9C4C()
{
  JUMPOUT(0x22768ED24);
}

void sub_224EE9C5C()
{
  JUMPOUT(0x22768ED24);
}

void sub_224EE9C6C()
{
  JUMPOUT(0x22768ED24);
}

void sub_224EE9C7C()
{
  JUMPOUT(0x22768ED24);
}

void sub_224EE9C8C()
{
  JUMPOUT(0x22768ED24);
}

unint64_t sub_224EE9CA0()
{
  unint64_t result;

  result = qword_2557E2EF0;
  if (!qword_2557E2EF0)
  {
    result = MEMORY[0x22768ED24](&unk_224F72928, &type metadata for SignedClinicalDataJWTHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2EF0);
  }
  return result;
}

unint64_t sub_224EE9CE8()
{
  unint64_t result;

  result = qword_2557E2EF8;
  if (!qword_2557E2EF8)
  {
    result = MEMORY[0x22768ED24](&unk_224F72950, &type metadata for SignedClinicalDataJWTHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E2EF8);
  }
  return result;
}

uint64_t sub_224EE9D2C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 6777953 && a2 == 0xE300000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6580587 && a2 == 0xE300000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7371124 && a2 == 0xE300000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7367034 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_224EE9EA0()
{
  return 2;
}

id sub_224EE9EA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;

  v34 = a3;
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v33 - v12;
  v14 = sub_224F67760();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *MEMORY[0x24BE48AB8];
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  sub_224E5AF70(a2, (uint64_t)v13);
  if (!a5)
  {
    v37 = 0u;
    v38 = 0u;
LABEL_10:
    sub_224EEA0FC((uint64_t)&v37);
    goto LABEL_11;
  }
  v19 = sub_224F67B80();
  if (*(_QWORD *)(a5 + 16) && (v21 = sub_224E533E8(v19, v20), (v22 & 1) != 0))
  {
    sub_224E537C4(*(_QWORD *)(a5 + 56) + 32 * v21, (uint64_t)&v37);
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v38 + 1))
    goto LABEL_10;
  sub_224E54308();
  if (swift_dynamicCast())
  {
    v23 = v35;
    v24 = v36;
    goto LABEL_12;
  }
LABEL_11:
  v23 = sub_224F67B80();
  v24 = v25;
LABEL_12:
  v26 = v34;
  if ((a4 & 1) != 0)
    v26 = 0;
  *(_QWORD *)a6 = v18;
  *((_QWORD *)a6 + 1) = 0;
  *((_QWORD *)a6 + 2) = v26;
  v27 = (int *)type metadata accessor for ExtractionContext();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&a6[v27[7]], v17, v14);
  sub_224E77848((uint64_t)v13, (uint64_t)&a6[v27[8]]);
  v28 = (uint64_t *)&a6[v27[9]];
  *v28 = v23;
  v28[1] = v24;
  *(_QWORD *)&a6[v27[10]] = a5;
  v29 = v27[11];
  type metadata accessor for CodeableConceptLookupService();
  v30 = swift_allocObject();
  v31 = objc_allocWithZone(MEMORY[0x24BDD3C40]);
  swift_bridgeObjectRetain();
  result = objc_msgSend(v31, sel_init);
  *(_QWORD *)(v30 + 16) = result;
  *(_QWORD *)&a6[v29] = v30;
  return result;
}

uint64_t sub_224EEA0FC(uint64_t a1)
{
  uint64_t v2;

  sub_224E63218(0, &qword_2557E2F00, (void (*)(uint64_t))sub_224E54308);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static Base45.decode(_:)(unint64_t a1, unint64_t a2)
{
  return sub_224EEA49C(a1, a2);
}

void sub_224EEA15C()
{
  off_2557E2F08 = &unk_24ECFCD80;
}

void sub_224EEA170()
{
  off_2557E2F10 = &unk_24ECF5BA8;
}

uint64_t static Base45.encode(_:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_224F548D4(v0);
  v3 = v2;
  swift_bridgeObjectRelease();
  _s23HealthRecordsExtraction6Base45V6encodeySS10Foundation4DataVFZ_0(v1, v3);
  v5 = v4;
  sub_224DDE9B4(v1, v3);
  return v5;
}

unint64_t Base45Error.errorDescription.getter()
{
  uint64_t v0;
  unint64_t v2;

  if (!*(_BYTE *)(v0 + 16))
  {
    v2 = 0;
    sub_224F680E4();
    sub_224F67C94();
    sub_224F67B2C();
    sub_224F67C94();
    return v2;
  }
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    sub_224F680E4();
    swift_bridgeObjectRelease();
    v2 = 0xD00000000000002BLL;
    sub_224F6839C();
    sub_224F67C94();
    swift_bridgeObjectRelease();
    return v2;
  }
  return 0xD00000000000002DLL;
}

uint64_t _s23HealthRecordsExtraction11Base45ErrorO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (v4 == 1)
    {
      if (v7 == 1)
      {
        sub_224EEB1D8(*(_QWORD *)a1, v3, 1);
        sub_224EEB1D8(v5, v6, 1);
        v8 = v2 == v5;
        return v8 & 1;
      }
    }
    else if (v7 == 2 && (v6 | v5) == 0)
    {
      sub_224EEB1D8(*(_QWORD *)a1, v3, 2);
      sub_224EEB1D8(0, 0, 2);
      v8 = 1;
      return v8 & 1;
    }
LABEL_11:
    sub_224EEB1B4(v5, v6, v7);
    sub_224EEB1D8(v2, v3, v4);
    sub_224EEB1D8(v5, v6, v7);
    v8 = 0;
    return v8 & 1;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  if (v2 == v5 && v3 == v6)
    v8 = 1;
  else
    v8 = sub_224F683CC();
  sub_224EEB1B4(v5, v6, 0);
  sub_224EEB1B4(v2, v3, 0);
  sub_224EEB1D8(v2, v3, 0);
  sub_224EEB1D8(v5, v6, 0);
  return v8 & 1;
}

uint64_t sub_224EEA49C(unint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v34;
  char v35;
  _QWORD v36[3];
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v37 = xmmword_224F72C70;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  if (!v4)
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_38:
    swift_bridgeObjectRelease();
    v22 = v7[2];
    if (!v22)
    {
      swift_bridgeObjectRelease();
      return v37;
    }
    v23 = v7 + 6;
    if ((unint64_t)v22 <= 1)
    {
      sub_224EEB15C();
      swift_allocError();
      *(_QWORD *)v34 = v22;
      *(_QWORD *)(v34 + 8) = 0;
      v35 = 1;
    }
    else
    {
      v24 = v7[2];
      if (!v24)
      {
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      if (v24 <= 1)
      {
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      v25 = v7[5];
      v26 = 45 * v25;
      if ((unsigned __int128)(v25 * (__int128)45) >> 64 != (45 * v25) >> 63)
      {
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      v27 = v7[4];
      v28 = v27 + v26;
      if (__OFADD__(v27, v26))
        goto LABEL_62;
      if (v22 <= 2)
        __asm { BR              X11 }
      if (v24 <= 2)
      {
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      v29 = 45 * *v23;
      if ((unsigned __int128)(*v23 * (__int128)45) >> 64 != v29 >> 63)
      {
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      v30 = 2025 * *v23;
      if ((unsigned __int128)(v29 * (__int128)45) >> 64 != v30 >> 63)
      {
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
      }
      v31 = __OFADD__(v28, v30);
      v32 = v28 + v30;
      if (v31)
        goto LABEL_67;
      if (v32 < 0x10000)
      {
        if ((v32 & 0x8000000000000000) == 0)
          __asm { BR              X11 }
        sub_224F681BC();
        __break(1u);
        JUMPOUT(0x224EEAAA8);
      }
      sub_224EEB15C();
      swift_allocError();
      *(_QWORD *)v34 = 0;
      *(_QWORD *)(v34 + 8) = 0;
      v35 = 2;
    }
    *(_BYTE *)(v34 + 16) = v35;
    swift_willThrow();
    goto LABEL_57;
  }
  v5 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  v6 = 4 << v5;
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v8 = 15;
  while (1)
  {
    v9 = v8 & 0xC;
    v10 = v8;
    if (v9 == v6)
      v10 = sub_224E57190(v8, a1, a2);
    v11 = v10 >> 16;
    if (v10 >> 16 >= v4)
    {
      __break(1u);
      goto LABEL_59;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      v13 = sub_224F67CDC();
      if (v9 != v6)
        goto LABEL_18;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v36[0] = a1;
      v36[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v13 = *((_BYTE *)v36 + v11);
      if (v9 != v6)
        goto LABEL_18;
    }
    else
    {
      v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((a1 & 0x1000000000000000) == 0)
        v12 = sub_224F6815C();
      v13 = *(_BYTE *)(v12 + v11);
      if (v9 != v6)
      {
LABEL_18:
        if ((a2 & 0x1000000000000000) == 0)
          goto LABEL_19;
        goto LABEL_22;
      }
    }
    v8 = sub_224E57190(v8, a1, a2);
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_19:
      v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_24;
    }
LABEL_22:
    if (v4 <= v8 >> 16)
      goto LABEL_63;
    v8 = sub_224F67CB8();
LABEL_24:
    if (qword_2557E0190 != -1)
      swift_once();
    if (*((_QWORD *)off_2557E2F10 + 2) <= (unint64_t)v13)
      break;
    v14 = *((_QWORD *)off_2557E2F10 + v13 + 4);
    if (v14 == -1)
      break;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = sub_224E56C60(0, v7[2] + 1, 1, v7);
    v16 = v7[2];
    v15 = v7[3];
    if (v16 >= v15 >> 1)
      v7 = sub_224E56C60((_QWORD *)(v15 > 1), v16 + 1, 1, v7);
    v7[2] = v16 + 1;
    v7[v16 + 4] = v14;
    if (4 * v4 == v8 >> 14)
      goto LABEL_38;
  }
  v17 = (((v13 & 0x3F) << 8) | (v13 >> 6)) + 33217;
  if ((v13 & 0x80) == 0)
    v17 = (v13 + 1);
  v36[0] = (v17 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v17) >> 3)) & 7)));
  v18 = MEMORY[0x22768DCF8](v36);
  v20 = v19;
  sub_224EEB15C();
  swift_allocError();
  *(_QWORD *)v21 = v18;
  *(_QWORD *)(v21 + 8) = v20;
  *(_BYTE *)(v21 + 16) = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
LABEL_57:
  sub_224DDE9B4(v37, *((unint64_t *)&v37 + 1));
  return swift_bridgeObjectRelease();
}

void _s23HealthRecordsExtraction6Base45V6encodeySS10Foundation4DataVFZ_0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_224EEAB30()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 v30;
  unint64_t v31;
  unsigned __int16 v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  unsigned __int8 v58;
  int v59;
  uint64_t v60;

  if (!v58)
    return 0;
  v5 = 0;
  v60 = v0 >> 32;
  v59 = v2;
  do
  {
    if (__OFADD__(v5, 2))
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v5 + 2;
    v10 = v5 + 1;
    if (v5 + 1 >= v58)
    {
      if (v2)
      {
        if (v2 == 1)
        {
          if (v5 < (int)v0 || v5 >= v60)
            goto LABEL_66;
          v19 = sub_224F673B8();
          if (!v19)
            goto LABEL_85;
          v20 = v19;
          v21 = sub_224F673D0();
          v22 = v5 - v21;
          if (__OFSUB__(v5, v21))
            goto LABEL_72;
        }
        else
        {
          if (v5 < *(_QWORD *)(v0 + 16))
            goto LABEL_70;
          if (v5 >= *(_QWORD *)(v0 + 24))
            goto LABEL_75;
          v42 = sub_224F673B8();
          if (!v42)
            goto LABEL_88;
          v20 = v42;
          v43 = sub_224F673D0();
          v22 = v5 - v43;
          if (__OFSUB__(v5, v43))
            goto LABEL_78;
        }
        v41 = *(unsigned __int8 *)(v20 + v22);
      }
      else
      {
        if (v5 >= v58)
          goto LABEL_69;
        *(_WORD *)(v3 - 126) = v0;
        *(_BYTE *)(v3 - 124) = BYTE2(v0);
        *(_BYTE *)(v3 - 123) = BYTE3(v0);
        *(_BYTE *)(v3 - 122) = v1;
        *(_BYTE *)(v3 - 121) = BYTE5(v0);
        *(_BYTE *)(v3 - 120) = BYTE6(v0);
        *(_BYTE *)(v3 - 119) = HIBYTE(v0);
        *(_BYTE *)(v3 - 118) = v52;
        *(_BYTE *)(v3 - 117) = v53;
        *(_BYTE *)(v3 - 116) = v54;
        *(_BYTE *)(v3 - 115) = v55;
        *(_BYTE *)(v3 - 114) = v56;
        *(_BYTE *)(v3 - 113) = v57;
        v41 = *(unsigned __int8 *)(v3 - 126 + v5);
      }
      if (qword_2557E0188 != -1)
        swift_once();
      v44 = (((109 * v41) >> 8)
           + (((v41 - ((unsigned __int16)(109 * v41) >> 8)) & 0xFE) >> 1)) >> 5;
      v45 = (v41 - 45 * v44);
      if (*((_QWORD *)off_2557E2F08 + 2) <= v45)
      {
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
        JUMPOUT(0x224EEB124);
      }
      v46 = (char *)off_2557E2F08 + 16 * v45;
      v47 = *((_QWORD *)v46 + 4);
      v48 = *((_QWORD *)v46 + 5);
      swift_bridgeObjectRetain();
      MEMORY[0x22768DD58](v47, v48);
      swift_bridgeObjectRelease();
      if (*((_QWORD *)off_2557E2F08 + 2) <= v44)
        goto LABEL_61;
      v49 = (char *)off_2557E2F08 + 16 * v44;
      v51 = *((_QWORD *)v49 + 4);
      v50 = *((_QWORD *)v49 + 5);
      swift_bridgeObjectRetain();
      MEMORY[0x22768DD58](v51, v50);
    }
    else
    {
      if (v2)
      {
        if (v2 == 1)
        {
          if (v5 < (int)v0 || v5 >= v60)
            goto LABEL_65;
          v11 = sub_224F673B8();
          if (!v11)
          {
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
          }
          v12 = v11;
          v13 = sub_224F673D0();
          if (__OFSUB__(v5, v13))
            goto LABEL_71;
          if (v10 >= v60)
            goto LABEL_76;
          v14 = *(unsigned __int8 *)(v12 + v5 - v13);
          v15 = sub_224F673B8();
          if (!v15)
            goto LABEL_84;
          v16 = v15;
          v17 = sub_224F673D0();
          v18 = v10 - v17;
          if (__OFSUB__(v10, v17))
            goto LABEL_79;
        }
        else
        {
          if (v5 < *(_QWORD *)(v0 + 16))
            goto LABEL_68;
          if (v5 >= *(_QWORD *)(v0 + 24))
            goto LABEL_74;
          v24 = sub_224F673B8();
          if (!v24)
            goto LABEL_86;
          v25 = v24;
          v26 = sub_224F673D0();
          if (__OFSUB__(v5, v26))
            goto LABEL_77;
          if (v10 < *(_QWORD *)(v0 + 16))
            goto LABEL_80;
          if (v10 >= *(_QWORD *)(v0 + 24))
            goto LABEL_81;
          v14 = *(unsigned __int8 *)(v25 + v5 - v26);
          v27 = sub_224F673B8();
          if (!v27)
            goto LABEL_87;
          v16 = v27;
          v28 = sub_224F673D0();
          v18 = v10 - v28;
          if (__OFSUB__(v10, v28))
            goto LABEL_82;
        }
        v23 = *(unsigned __int8 *)(v16 + v18);
      }
      else
      {
        if (v5 >= v58)
          goto LABEL_67;
        *(_WORD *)(v3 - 126) = v0;
        *(_BYTE *)(v3 - 124) = BYTE2(v0);
        *(_BYTE *)(v3 - 123) = BYTE3(v0);
        *(_BYTE *)(v3 - 122) = v1;
        *(_BYTE *)(v3 - 121) = BYTE5(v0);
        *(_BYTE *)(v3 - 120) = BYTE6(v0);
        *(_BYTE *)(v3 - 119) = HIBYTE(v0);
        *(_BYTE *)(v3 - 118) = v52;
        *(_BYTE *)(v3 - 117) = v53;
        *(_BYTE *)(v3 - 116) = v54;
        *(_BYTE *)(v3 - 115) = v55;
        *(_BYTE *)(v3 - 114) = v56;
        *(_BYTE *)(v3 - 113) = v57;
        if (v10 >= v58)
          goto LABEL_73;
        v14 = *(unsigned __int8 *)(v3 - 126 + v5);
        *(_WORD *)(v3 - 126) = v0;
        *(_BYTE *)(v3 - 124) = BYTE2(v0);
        *(_BYTE *)(v3 - 123) = BYTE3(v0);
        *(_BYTE *)(v3 - 122) = v1;
        *(_BYTE *)(v3 - 121) = BYTE5(v0);
        *(_BYTE *)(v3 - 120) = BYTE6(v0);
        *(_BYTE *)(v3 - 119) = HIBYTE(v0);
        *(_BYTE *)(v3 - 118) = v52;
        *(_BYTE *)(v3 - 117) = v53;
        *(_BYTE *)(v3 - 116) = v54;
        *(_BYTE *)(v3 - 115) = v55;
        *(_BYTE *)(v3 - 114) = v56;
        *(_BYTE *)(v3 - 113) = v57;
        v23 = *(unsigned __int8 *)(v3 - 126 + v10);
      }
      v29 = v1;
      if (qword_2557E0188 != -1)
        swift_once();
      v30 = v23 | (v14 << 8);
      v31 = (((745 * v30) >> 16)
           + ((unsigned __int16)((v30 - ((745 * v30) >> 16)) & 0xFFFE) >> 1)) >> 10;
      v32 = v30 - 2025 * v31;
      v33 = v32 / 0x2Du;
      v34 = v32 % 0x2Du;
      if (*((_QWORD *)off_2557E2F08 + 2) <= v34)
        goto LABEL_62;
      v35 = (char *)off_2557E2F08 + 16 * v34;
      v36 = *((_QWORD *)v35 + 4);
      v37 = *((_QWORD *)v35 + 5);
      swift_bridgeObjectRetain();
      MEMORY[0x22768DD58](v36, v37);
      swift_bridgeObjectRelease();
      if (*((_QWORD *)off_2557E2F08 + 2) <= v33)
        goto LABEL_63;
      v38 = (char *)off_2557E2F08 + 16 * v33;
      v39 = *((_QWORD *)v38 + 4);
      v40 = *((_QWORD *)v38 + 5);
      swift_bridgeObjectRetain();
      MEMORY[0x22768DD58](v39, v40);
      swift_bridgeObjectRelease();
      if (*((_QWORD *)off_2557E2F08 + 2) <= v31)
        goto LABEL_64;
      v6 = (char *)off_2557E2F08 + 16 * v31;
      v8 = *((_QWORD *)v6 + 4);
      v7 = *((_QWORD *)v6 + 5);
      swift_bridgeObjectRetain();
      MEMORY[0x22768DD58](v8, v7);
      v1 = v29;
      v2 = v59;
    }
    swift_bridgeObjectRelease();
    v5 = v9;
  }
  while (v9 < v58);
  return *(_QWORD *)(v3 - 112);
}

unint64_t sub_224EEB15C()
{
  unint64_t result;

  result = qword_2557E2F18;
  if (!qword_2557E2F18)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Base45Error, &type metadata for Base45Error);
    atomic_store(result, (unint64_t *)&qword_2557E2F18);
  }
  return result;
}

ValueMetadata *type metadata accessor for Base45()
{
  return &type metadata for Base45;
}

uint64_t sub_224EEB1B4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for Base45Error(uint64_t a1)
{
  return sub_224EEB1D8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_224EEB1D8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s23HealthRecordsExtraction11Base45ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_224EEB1B4(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Base45Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_224EEB1B4(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_224EEB1D8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Base45Error(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_224EEB1D8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Base45Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Base45Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_224EEB358(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_224EEB370(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Base45Error()
{
  return &type metadata for Base45Error;
}

void sub_224EEB398()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E2F20)
  {
    v0 = sub_224F68168();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E2F20);
  }
}

unint64_t sub_224EEB3EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E2F28;
  if (!qword_2557E2F28)
  {
    sub_224EEB398();
    result = MEMORY[0x22768ED24](MEMORY[0x24BDD06A0], v1);
    atomic_store(result, (unint64_t *)&qword_2557E2F28);
  }
  return result;
}

id sub_224EEB434(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  _BYTE v21[80];

  v3 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  v6 = sub_224F683C0();
  if (v6)
  {
    v7 = (void *)v6;
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, a1);
  }
  else
  {
    v7 = (void *)swift_allocError();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v3 + 32))(v8, v5, a1);
  }
  v9 = (void *)sub_224F67538();

  v10 = objc_msgSend(v9, sel_domain);
  sub_224F67B80();

  v11 = objc_msgSend(v9, sel_code);
  sub_224EEB640();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_224F6D8B0;
  *(_QWORD *)(inited + 32) = sub_224F67B80();
  *(_QWORD *)(inited + 40) = v13;
  v14 = Error.hdhr_friendlyDescription.getter(a1);
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = v14;
  *(_QWORD *)(inited + 56) = v15;
  sub_224E51ED8(inited);
  v16 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v17 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v18 = (void *)sub_224F67AE4();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(v16, sel_initWithDomain_code_userInfo_, v17, v11, v18);

  return v19;
}

void sub_224EEB640()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E1478)
  {
    sub_224E5373C();
    v0 = sub_224F683A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E1478);
  }
}

void sub_224EEB694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  MEMORY[0x24BDAC7A8](v1);
  sub_224DDB408(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_224EEB724 + 4 * byte_224F72D70[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_224EEB724()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;

  v3 = *v1;
  *(_OWORD *)(v2 - 112) = v1[1];
  *(_OWORD *)(v2 - 96) = v3;
  v4 = *((_QWORD *)v1 + 4);
  *(_QWORD *)(v2 - 48) = &type metadata for ModelsDSTU2.Bundle;
  *(_QWORD *)(v2 - 40) = sub_224E8BE5C();
  v5 = swift_allocObject();
  *(_QWORD *)(v2 - 72) = v5;
  v6 = *(_OWORD *)(v2 - 112);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v2 - 96);
  *(_OWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 48) = v4;
  sub_224E59364(0, (unint64_t *)&qword_2557E0458);
  sub_224E59364(0, (unint64_t *)&qword_2557E1CE0);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    *(_QWORD *)(v0 + 32) = 0;
    *(_OWORD *)v0 = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
  }
  return result;
}

uint64_t sub_224EEB94C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  sub_224EEB694();
  if (v16)
  {
    sub_224E593B0(&v15, (uint64_t)v17);
    v4 = v18;
    v5 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
    if (v6)
    {
      v8 = v18;
      v7 = v19;
      __swift_project_boxed_opaque_existential_1(v17, v18);
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 24))(v8);
      v9 = (void *)sub_224F67B5C();
      swift_bridgeObjectRelease();
      v10 = (void *)sub_224F67B5C();
      swift_bridgeObjectRelease();
      v11 = objc_msgSend((id)objc_opt_self(), sel_originIdentifierWithFHIRResourceType_identifier_, v9, v10);

      v12 = type metadata accessor for RecordExtractionContext();
      sub_224DDB408(a1, (uint64_t)a2 + *(int *)(v12 + 20), (uint64_t (*)(_QWORD))type metadata accessor for ExtractionContext);
      *a2 = v11;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 0, 1, v12);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    sub_224EEBCD0((uint64_t)&v15);
  }
  v14 = type metadata accessor for RecordExtractionContext();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
}

uint64_t sub_224EEBADC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  ModelsR4.ResourceProxy.get()();
  sub_224E59364(0, (unint64_t *)&qword_2557E0458);
  sub_224E59364(0, (unint64_t *)&qword_2557E1CE0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
    goto LABEL_6;
  }
  if (!*((_QWORD *)&v16 + 1))
  {
LABEL_6:
    sub_224EEBCD0((uint64_t)&v15);
    goto LABEL_7;
  }
  sub_224E593B0(&v15, (uint64_t)v18);
  v4 = v19;
  v5 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  if (v6)
  {
    v8 = v19;
    v7 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 24))(v8);
    v9 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v10 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v11 = objc_msgSend((id)objc_opt_self(), sel_originIdentifierWithFHIRResourceType_identifier_, v9, v10);

    v12 = type metadata accessor for RecordExtractionContext();
    sub_224DDB408(a1, (uint64_t)a2 + *(int *)(v12 + 20), (uint64_t (*)(_QWORD))type metadata accessor for ExtractionContext);
    *a2 = v11;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 0, 1, v12);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
LABEL_7:
  v14 = type metadata accessor for RecordExtractionContext();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
}

uint64_t sub_224EEBCD0(uint64_t a1)
{
  uint64_t v2;

  sub_224E75E88();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_224EEBD0C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_224EEBD40()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 120) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_224EEBDBC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t ExtractionRulesKeyPathParserError.description.getter(uint64_t a1)
{
  uint64_t result;

  result = 0x6F63207974706D65;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
    case 3:
      result = 0xD000000000000012;
      break;
    case 2:
      result = 0xD00000000000001BLL;
      break;
    default:
      result = sub_224F68480();
      __break(1u);
      break;
  }
  return result;
}

void __swiftcall ExtractionRulesKeyPathParserError.asNSError(using:)(NSError *__return_ptr retstr, NSScanner using)
{
  uint64_t v2;
  uint64_t v3;
  id v5;
  uint64_t inited;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;

  v3 = v2;
  v5 = -[objc_class string](using.super.isa, sel_string);
  sub_224F67B80();

  sub_224F67FC4();
  sub_224F67CE8();
  swift_bridgeObjectRelease();
  sub_224F680E4();
  swift_bridgeObjectRelease();
  sub_224F6839C();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  switch(v3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      sub_224F67C94();
      swift_bridgeObjectRelease();
      sub_224EEB640();
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_224F6D8B0;
      *(_QWORD *)(inited + 32) = sub_224F67B80();
      *(_QWORD *)(inited + 40) = v7;
      *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(inited + 48) = 0xD000000000000016;
      *(_QWORD *)(inited + 56) = 0x8000000224F82570;
      sub_224E51ED8(inited);
      v8 = objc_allocWithZone(MEMORY[0x24BDD1540]);
      v9 = (void *)sub_224F67B5C();
      v10 = (void *)sub_224F67AE4();
      swift_bridgeObjectRelease();
      objc_msgSend(v8, sel_initWithDomain_code_userInfo_, v9, v3, v10);

      return;
    default:
      sub_224F68480();
      __break(1u);
      JUMPOUT(0x224EEC154);
  }
}

unint64_t ExtractionRulesKeyPathParserError.init(rawValue:)(unint64_t a1)
{
  return sub_224EEC3E4(a1);
}

uint64_t sub_224EEC180()
{
  sub_224F68510();
  sub_224F6851C();
  return sub_224F6854C();
}

uint64_t sub_224EEC1C4()
{
  return sub_224F6851C();
}

uint64_t sub_224EEC1EC()
{
  sub_224F68510();
  sub_224F6851C();
  return sub_224F6854C();
}

unint64_t sub_224EEC22C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_224EEC3E4(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_224EEC25C()
{
  uint64_t *v0;

  return ExtractionRulesKeyPathParserError.description.getter(*v0);
}

void static ExtractionRulesKeyPathParser.components(from:)()
{
  sub_224EEC3F4();
}

id ExtractionRulesKeyPathParser.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id ExtractionRulesKeyPathParser.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExtractionRulesKeyPathParser();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ExtractionRulesKeyPathParser.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExtractionRulesKeyPathParser();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_224EEC3E4(unint64_t result)
{
  if (result > 3)
    return 0;
  return result;
}

void sub_224EEC3F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  void *v6;
  id v7;
  NSError *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  objc_class *v22;
  char *v23;
  char *v24;
  char *v25;
  id v26;
  unsigned __int8 v27;
  NSError *v28;
  NSError *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  objc_super v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = sub_224F6734C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_allocWithZone(MEMORY[0x24BDD17A8]);
  swift_bridgeObjectRetain();
  v6 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v5, sel_initWithString_, v6);

  if ((objc_msgSend(v7, sel_isAtEnd) & 1) != 0)
  {
    ExtractionRulesKeyPathParserError.asNSError(using:)(v8, (NSScanner)v7);
    swift_willThrow();

    return;
  }
  v30 = v0;
  sub_224F672F8();
  v39 = MEMORY[0x24BEE4AF8];
  if ((objc_msgSend(v7, sel_isAtEnd) & 1) != 0)
  {
LABEL_4:
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);

    return;
  }
  v31 = v2;
  while (1)
  {
    v9 = sub_224F67FE8();
    if (!v10)
    {
      swift_bridgeObjectRelease();
      ExtractionRulesKeyPathParserError.asNSError(using:)(v28, (NSScanner)v7);
      swift_willThrow();

      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      return;
    }
    v37 = v9;
    v38 = v10;
    sub_224F67FB8();
    v12 = v11;
    if (v11)
      break;
    v15 = 0;
LABEL_15:
    sub_224F67FB8();
    v18 = v17;
    swift_bridgeObjectRelease();
    if (v18 && objc_msgSend(v7, sel_isAtEnd))
      goto LABEL_22;
    v19 = v1;
    v21 = v37;
    v20 = v38;
    v22 = (objc_class *)type metadata accessor for ExtractionRulesKeyPathComponent();
    v23 = (char *)objc_allocWithZone(v22);
    v24 = &v23[OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_name];
    *(_QWORD *)v24 = v21;
    *((_QWORD *)v24 + 1) = v20;
    v25 = &v23[OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_parenthesisContent];
    *(_QWORD *)v25 = v15;
    *((_QWORD *)v25 + 1) = v12;
    v36.receiver = v23;
    v36.super_class = v22;
    v26 = objc_msgSendSuper2(&v36, sel_init);
    MEMORY[0x22768DE24]();
    if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();

    v27 = objc_msgSend(v7, sel_isAtEnd);
    v1 = v19;
    v2 = v31;
    if ((v27 & 1) != 0)
      goto LABEL_4;
  }
  sub_224F67C94();
  swift_bridgeObjectRelease();
  v13 = sub_224F67FDC();
  v12 = v14;
  if (v14)
  {
    v15 = v13;
    v34 = v13;
    v35 = v14;
    v32 = 40;
    v33 = 0xE100000000000000;
    sub_224E51E94();
    if ((sub_224F68054() & 1) != 0)
      goto LABEL_22;
    sub_224F67C94();
  }
  else
  {
    v15 = 0;
  }
  sub_224F67FB8();
  if (v16)
  {
    sub_224F67C94();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ExtractionRulesKeyPathParserError.asNSError(using:)(v29, (NSScanner)v7);
  swift_willThrow();

  (*(void (**)(char *, uint64_t))(v31 + 8))(v4, v1);
}

uint64_t type metadata accessor for ExtractionRulesKeyPathParser()
{
  return objc_opt_self();
}

unint64_t sub_224EEC804()
{
  unint64_t result;

  result = qword_2557E2F30;
  if (!qword_2557E2F30)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ExtractionRulesKeyPathParserError, &type metadata for ExtractionRulesKeyPathParserError);
    atomic_store(result, (unint64_t *)&qword_2557E2F30);
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtractionRulesKeyPathParserError()
{
  return &type metadata for ExtractionRulesKeyPathParserError;
}

uint64_t sub_224EEC858()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PatientResourceComparator()
{
  return objc_opt_self();
}

void sub_224EEC888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_224EEC8E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x224EECACCLL);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_224EECAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_224EEC888((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_224EECBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_224F673B8();
  v11 = result;
  if (result)
  {
    result = sub_224F673D0();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_224F673C4();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_224EEC888(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_224EECC78(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_224EECCC4()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_224EECCF8 + *((int *)qword_224EECED0 + (v0 >> 62))))();
}

uint64_t sub_224EECD08@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

id sub_224EECEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char v50;
  uint64_t v51;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = type metadata accessor for ModelsR4.PatientLink(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v53 - v9;
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v53 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v53 - v15;
  v17 = *(_QWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a2 + 120);
  v55 = v14;
  v56 = v18;
  v54 = v17;
  if (v17)
  {
    v53 = v7;
    v19 = *(_QWORD *)(v17 + 16);
    if (v19)
    {
      v20 = v17 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      v21 = *(_QWORD *)(v14 + 72);
      swift_bridgeObjectRetain();
      v22 = v19 - 1;
      while (1)
      {
        v23 = v22;
        sub_224EED8C8(v20, (uint64_t)v16);
        v24 = &v16[*(int *)(v4 + 20)];
        if (*(_QWORD *)v24 == 0x736563616C706572 && *((_QWORD *)v24 + 1) == 0xE800000000000000)
          break;
        v26 = sub_224F683CC();
        sub_224EED90C((uint64_t)v16);
        if ((v26 & 1) == 0)
        {
          v22 = v23 - 1;
          v20 += v21;
          if (v23)
            continue;
        }
        goto LABEL_37;
      }
      sub_224EED90C((uint64_t)v16);
      v26 = 1;
LABEL_37:
      v44 = v54;
      swift_bridgeObjectRelease();
      v17 = v44;
      v7 = v53;
      v14 = v55;
      v18 = v56;
      if (!v56)
      {
LABEL_38:
        if ((v26 & 1) == 0)
        {
LABEL_39:
          v34 = 0;
          if (!v17)
            goto LABEL_40;
          goto LABEL_23;
        }
LABEL_22:
        v34 = 8;
        if (!v17)
          goto LABEL_40;
        goto LABEL_23;
      }
    }
    else
    {
      v26 = 0;
      v7 = v53;
      if (!v18)
        goto LABEL_38;
    }
  }
  else
  {
    v26 = 0;
    if (!v18)
      goto LABEL_38;
  }
  v27 = *(_QWORD *)(v18 + 16);
  if (!v27)
  {
LABEL_21:
    if ((v26 & 1) == 0)
      goto LABEL_39;
    goto LABEL_22;
  }
  v28 = v18 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v29 = *(_QWORD *)(v14 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_224EED8C8(v28, (uint64_t)v13);
    v30 = &v13[*(int *)(v4 + 20)];
    if (*(_QWORD *)v30 == 0x736563616C706572 && *((_QWORD *)v30 + 1) == 0xE800000000000000)
      break;
    v32 = sub_224F683CC();
    sub_224EED90C((uint64_t)v13);
    if ((v32 & 1) != 0)
      goto LABEL_56;
    v28 += v29;
    if (!--v27)
    {
      v33 = v56;
      swift_bridgeObjectRelease();
      v18 = v33;
      v17 = v54;
      v14 = v55;
      goto LABEL_21;
    }
  }
  sub_224EED90C((uint64_t)v13);
LABEL_56:
  v51 = v56;
  swift_bridgeObjectRelease();
  v18 = v51;
  if ((v26 & 1) != 0)
    v34 = 0;
  else
    v34 = 4;
  v17 = v54;
  v14 = v55;
  if (!v54)
  {
LABEL_40:
    v43 = 0;
    if (!v18)
      goto LABEL_53;
    goto LABEL_44;
  }
LABEL_23:
  v35 = v7;
  v36 = *(_QWORD *)(v17 + 16);
  if (v36)
  {
    v37 = v17 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v38 = *(_QWORD *)(v14 + 72);
    swift_bridgeObjectRetain();
    v39 = v36 - 1;
    while (1)
    {
      v40 = v39;
      sub_224EED8C8(v37, (uint64_t)v10);
      v41 = &v10[*(int *)(v4 + 20)];
      if (*(_QWORD *)v41 == 0x646563616C706572 && *((_QWORD *)v41 + 1) == 0xEB0000000079622DLL)
        break;
      v43 = sub_224F683CC();
      sub_224EED90C((uint64_t)v10);
      if ((v43 & 1) == 0)
      {
        v39 = v40 - 1;
        v37 += v38;
        if (v40)
          continue;
      }
      goto LABEL_43;
    }
    sub_224EED90C((uint64_t)v10);
    v43 = 1;
LABEL_43:
    swift_bridgeObjectRelease();
    v7 = v35;
    v14 = v55;
    v18 = v56;
    if (!v56)
      goto LABEL_53;
  }
  else
  {
    v43 = 0;
    v7 = v35;
    if (!v18)
      goto LABEL_53;
  }
LABEL_44:
  v45 = *(_QWORD *)(v18 + 16);
  if (v45)
  {
    v46 = v18 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v47 = *(_QWORD *)(v14 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_224EED8C8(v46, (uint64_t)v7);
      v48 = &v7[*(int *)(v4 + 20)];
      if (*(_QWORD *)v48 == 0x646563616C706572 && *((_QWORD *)v48 + 1) == 0xEB0000000079622DLL)
        break;
      v50 = sub_224F683CC();
      sub_224EED90C((uint64_t)v7);
      if ((v50 & 1) != 0)
        goto LABEL_62;
      v46 += v47;
      if (!--v45)
      {
        swift_bridgeObjectRelease();
        goto LABEL_53;
      }
    }
    sub_224EED90C((uint64_t)v7);
LABEL_62:
    swift_bridgeObjectRelease();
    if ((v43 & 1) == 0)
    {
      v34 |= 2uLL;
      return objc_msgSend(objc_allocWithZone(MEMORY[0x24BE48A50]), sel_initWithOutcome_, v34);
    }
    goto LABEL_63;
  }
LABEL_53:
  if ((v43 & 1) != 0)
  {
    v34 |= 8uLL;
    return objc_msgSend(objc_allocWithZone(MEMORY[0x24BE48A50]), sel_initWithOutcome_, v34);
  }
LABEL_63:
  if (!v34)
    return 0;
  return objc_msgSend(objc_allocWithZone(MEMORY[0x24BE48A50]), sel_initWithOutcome_, v34);
}

id sub_224EED38C(void *a1, id a2)
{
  uint64_t v2;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  char v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _OWORD v42[9];
  uint64_t v43;
  _OWORD v44[9];
  uint64_t v45;
  _OWORD v46[9];
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _OWORD v58[9];
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v5 = objc_msgSend(a1, sel_FHIRVersion);
  v6 = objc_msgSend(v5, sel_FHIRRelease);

  v7 = sub_224F67B80();
  v9 = v8;
  if (v7 == sub_224F67B80() && v9 == v10)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = sub_224F683CC();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      a2 = objc_msgSend(a1, sel_FHIRVersion);
      sub_224E75FD8();
      swift_allocError();
      *(_QWORD *)v13 = a2;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 24) = 0;
      v14 = 6;
LABEL_17:
      *(_BYTE *)(v13 + 32) = v14;
      swift_willThrow();
      return a2;
    }
  }
  v15 = objc_msgSend(a1, sel_FHIRVersion);
  v16 = objc_msgSend(v15, sel_FHIRRelease);

  v17 = objc_msgSend(a2, sel_FHIRVersion);
  v18 = objc_msgSend(v17, sel_FHIRRelease);

  v19 = sub_224F67B80();
  v21 = v20;
  if (v19 == sub_224F67B80() && v21 == v22)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v23 = sub_224F683CC();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      sub_224E75FD8();
      swift_allocError();
      *(_QWORD *)v13 = 2;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 24) = 0;
      v14 = 7;
      goto LABEL_17;
    }
  }
  v24 = objc_msgSend(a1, sel_data);
  v25 = sub_224F67658();
  v27 = v26;

  v28 = objc_msgSend(a2, sel_data);
  v29 = sub_224F67658();
  v31 = v30;

  sub_224EECC78(v25, v27);
  LOBYTE(v28) = v32;
  sub_224DDE9B4(v29, v31);
  sub_224DDE9B4(v25, v27);
  if ((v28 & 1) != 0)
    return objc_msgSend(objc_allocWithZone(MEMORY[0x24BE48A50]), sel_initWithOutcome_, 0);
  sub_224F67298();
  swift_allocObject();
  sub_224F6728C();
  v34 = objc_msgSend(a1, sel_data);
  v35 = sub_224F67658();
  v37 = v36;

  sub_224DFC928();
  sub_224F67280();
  if (v2)
  {
    swift_release();
    sub_224DDE9B4(v35, v37);
  }
  else
  {
    sub_224DDE9B4(v35, v37);
    v58[6] = v66;
    v58[7] = v67;
    v58[8] = v68;
    v59 = v69;
    v58[2] = v62;
    v58[3] = v63;
    v58[4] = v64;
    v58[5] = v65;
    v58[0] = v60;
    v58[1] = v61;
    v38 = objc_msgSend(a2, sel_data);
    v39 = sub_224F67658();
    v41 = v40;

    sub_224F67280();
    sub_224DDE9B4(v39, v41);
    v46[6] = v54;
    v46[7] = v55;
    v46[8] = v56;
    v46[2] = v50;
    v46[3] = v51;
    v46[4] = v52;
    v46[5] = v53;
    v46[0] = v48;
    v46[1] = v49;
    v44[6] = v66;
    v44[7] = v67;
    v44[8] = v68;
    v44[2] = v62;
    v44[3] = v63;
    v44[4] = v64;
    v44[5] = v65;
    v44[0] = v60;
    v44[1] = v61;
    v42[6] = v54;
    v42[7] = v55;
    v42[8] = v56;
    v42[2] = v50;
    v42[3] = v51;
    v42[4] = v52;
    v42[5] = v53;
    v47 = v57;
    v45 = v69;
    v43 = v57;
    v42[0] = v48;
    v42[1] = v49;
    a2 = sub_224EECEF0((uint64_t)v44, (uint64_t)v42);
    sub_224DE6D48((uint64_t)v46);
    sub_224DE6D48((uint64_t)v58);
    if (!a2)
      a2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE48A50]), sel_initWithOutcome_, 1);
    swift_release();
  }
  return a2;
}

uint64_t sub_224EED8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModelsR4.PatientLink(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_224EED90C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ModelsR4.PatientLink(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_224EED948(int a1, int a2, int a3, int a4, SecKeyRef key)
{
  const __CFString *v6;
  const __CFData *v7;
  const __CFData *v8;
  int v9;
  CFErrorRef v10;
  __CFError *v11;
  void *v12;
  __CFError **v13;
  __CFError *v14;
  void *v15;
  uint64_t v16;
  id v17;
  CFErrorRef v18;
  uint64_t v19;
  uint64_t v20;
  CFErrorRef v21[2];

  v21[1] = *(CFErrorRef *)MEMORY[0x24BDAC8D0];
  v6 = (const __CFString *)*MEMORY[0x24BDE9368];
  if (!SecKeyIsAlgorithmSupported(key, kSecKeyOperationTypeVerify, (SecKeyAlgorithm)*MEMORY[0x24BDE9368]))
  {
    sub_224E77040();
    swift_allocError();
    *(_QWORD *)v19 = 3;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = 0;
    *(_BYTE *)(v19 + 32) = 1;
LABEL_7:
    swift_willThrow();
    return;
  }
  v21[0] = 0;
  v7 = (const __CFData *)sub_224F67640();
  v8 = (const __CFData *)sub_224F67640();
  v9 = SecKeyVerifySignature(key, v6, v7, v8, v21);

  if (v9)
    return;
  v10 = v21[0];
  if (!v21[0])
  {
    sub_224E77040();
    swift_allocError();
    *(_QWORD *)v20 = 2;
    *(_QWORD *)(v20 + 8) = 0;
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_BYTE *)(v20 + 32) = 4;
    goto LABEL_7;
  }
  type metadata accessor for CFError(0);
  sub_224EEDB5C();
  v11 = v10;
  v12 = (void *)swift_allocError();
  *v13 = v11;
  v14 = v11;
  v15 = (void *)sub_224F67538();

  sub_224E77040();
  swift_allocError();
  *(_QWORD *)v16 = v15;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_BYTE *)(v16 + 32) = 2;
  v17 = v15;
  swift_willThrow();
  v18 = v21[0];

  if (v18)
}

unint64_t sub_224EEDB5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E2FF8;
  if (!qword_2557E2FF8)
  {
    type metadata accessor for CFError(255);
    result = MEMORY[0x22768ED24](MEMORY[0x24BDCFD90], v1);
    atomic_store(result, &qword_2557E2FF8);
  }
  return result;
}

uint64_t sub_224EEDBA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

id sub_224EEDBBC()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  id result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = (__int128 *)(v1 + *(int *)(type metadata accessor for ModelsR4.Immunization(0) + 52));
  v9 = *v2;
  v10 = *((_QWORD *)v2 + 2);
  v3 = sub_224EEF95C();
  *(_QWORD *)(v0 + 32) = v3;
  sub_224E5451C(0, &qword_2557E1F00);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_vaccinationRecordTypeForIdentifier_, *MEMORY[0x24BDD3848], v9, v10);
  *(_QWORD *)(v0 + 40) = result;
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(v0 + 16);
    v7 = v6 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {

      return (id)(*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
    }
    else
    {
      *(_QWORD *)(v0 + 48) = *(_QWORD *)(v7 + *(int *)(type metadata accessor for ExtractionContext() + 44));
      swift_retain();
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 56) = v8;
      *v8 = v0;
      v8[1] = sub_224E735A0;
      return (id)sub_224ED0FBC(v3, (uint64_t)v5);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_224EEDCFC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[13] = a1;
  v2[14] = v1;
  sub_224F6743C();
  v2[15] = swift_task_alloc();
  sub_224E63218(0, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  v2[16] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[17] = swift_task_alloc();
  sub_224E63218(0, &qword_2557E0308, (void (*)(uint64_t))type metadata accessor for Reference);
  v2[18] = swift_task_alloc();
  v2[19] = *(_QWORD *)(type metadata accessor for ModelsR4.ImmunizationPerformer(0) - 8);
  v2[20] = swift_task_alloc();
  v2[21] = *(_QWORD *)(type metadata accessor for Annotation() - 8);
  v2[22] = swift_task_alloc();
  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v2[23] = swift_task_alloc();
  v3 = type metadata accessor for FHIRDateTime();
  v2[24] = v3;
  v2[25] = *(_QWORD *)(v3 - 8);
  v2[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224EEDE74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = (int *)type metadata accessor for ModelsR4.Immunization(0);
  *(_QWORD *)(v0 + 216) = v5;
  sub_224E75F34(v4 + v5[10], v3, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_224E7601C(*(_QWORD *)(v0 + 184), &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224E75FD8();
    swift_allocError();
    *(_QWORD *)v6 = 0xD000000000000012;
    *(_QWORD *)(v6 + 8) = 0x8000000224F81540;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_BYTE *)(v6 + 32) = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v8 = *(_QWORD **)(v0 + 112);
  sub_224EEED44(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 208));
  v9 = objc_msgSend((id)objc_opt_self(), sel_FHIRImmunizationStatus);
  *(_QWORD *)(v0 + 224) = v9;
  v10 = v8[5];
  v11 = v8[6];
  *(_QWORD *)(v0 + 232) = v11;
  v12 = sub_224F67B80();
  *(_QWORD *)(v0 + 240) = v13;
  *(_QWORD *)(v0 + 16) = v9;
  *(_QWORD *)(v0 + 24) = v10;
  *(_QWORD *)(v0 + 32) = v11;
  *(_QWORD *)(v0 + 40) = v12;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 48) = v13;
  v14 = v8[9];
  v77 = v5;
  if (v14)
  {
    v15 = (_QWORD *)(v0 + 96);
    v16 = *(_QWORD *)(v14 + 16);
    if (v16)
    {
      v17 = *(_QWORD *)(v0 + 168);
      v81 = *(_QWORD *)(v0 + 176);
      v84 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_224E53720(0, v16, 0);
      v18 = v14 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      v79 = *(_QWORD *)(v17 + 72);
      v19 = v84;
      do
      {
        v20 = *(uint64_t **)(v0 + 176);
        sub_224DDB408(v18, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
        v21 = *v20;
        v22 = *(_QWORD *)(v81 + 8);
        swift_bridgeObjectRetain();
        sub_224DDEAA0((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_224E53720(0, *(_QWORD *)(v19 + 16) + 1, 1);
          v19 = v84;
        }
        v24 = *(_QWORD *)(v19 + 16);
        v23 = *(_QWORD *)(v19 + 24);
        if (v24 >= v23 >> 1)
        {
          sub_224E53720(v23 > 1, v24 + 1, 1);
          v19 = v84;
        }
        *(_QWORD *)(v19 + 16) = v24 + 1;
        v25 = v19 + 16 * v24;
        *(_QWORD *)(v25 + 32) = v21;
        *(_QWORD *)(v25 + 40) = v22;
        v18 += v79;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
      v15 = (_QWORD *)(v0 + 96);
    }
    else
    {
      swift_bridgeObjectRetain();
      v19 = MEMORY[0x24BEE4AF8];
    }
    *v15 = v19;
    sub_224E68104();
    sub_224E79350();
    v26 = sub_224F67B44();
    v27 = v28;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v26 = 0;
    v27 = 0;
  }
  *(_QWORD *)(v0 + 248) = v26;
  *(_QWORD *)(v0 + 256) = v27;
  v29 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + v5[11]);
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 16);
    if (v30 >= 2)
    {
      v31 = v29 + 56;
      while (1)
      {
        v32 = *(_QWORD *)(v31 + 32);
        v33 = *(unsigned __int8 *)(v31 + 16);
        v34 = *(_QWORD *)v31;
        v35 = *(unsigned __int8 *)(v31 - 16);
        v36 = *(_QWORD *)v31 ? 0 : *(_BYTE *)(v31 - 16);
        v37 = v32 ? 0 : *(unsigned __int8 *)(v31 + 16);
        if ((v36 & 1) == 0 && !v37)
          break;
        v31 += 88;
        if (!--v30)
          goto LABEL_39;
      }
      v74 = *(_QWORD *)(v31 - 8);
      v82 = *(_QWORD *)(v31 + 8);
      v75 = *(_QWORD *)(v31 + 24);
      v76 = *(_QWORD *)(v31 - 24);
      v38 = *(_QWORD *)(v31 + 40);
      v39 = *(_QWORD *)(v31 + 48);
      goto LABEL_31;
    }
    if (v30)
    {
      v35 = *(unsigned __int8 *)(v29 + 40);
      v34 = *(_QWORD *)(v29 + 56);
      v74 = *(_QWORD *)(v29 + 48);
      v82 = *(_QWORD *)(v29 + 64);
      v33 = *(unsigned __int8 *)(v29 + 72);
      v32 = *(_QWORD *)(v29 + 88);
      v75 = *(_QWORD *)(v29 + 80);
      v76 = *(_QWORD *)(v29 + 32);
      v38 = *(_QWORD *)(v29 + 96);
      v39 = *(_QWORD *)(v29 + 104);
LABEL_31:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_224DDB44C(v38, v39);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_224DDB44C(v38, v39);
      swift_bridgeObjectRelease();
      sub_224DDB480(v38, v39);
      if (v34)
        v41 = v74;
      else
        v41 = 0;
      v42 = v34;
      if (!v34 && (v35 & 1) == 0)
      {
        *(_QWORD *)(v0 + 88) = v76;
        sub_224EEEE30();
        v41 = sub_224F6806C();
      }
      v72 = v42;
      v73 = v41;
      swift_bridgeObjectRetain();
      v40 = v75;
      sub_224EEED88(v76, v35, v74, v34, v82, v33, v75, v32, v38, v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_224DDB480(v38, v39);
      if (v32)
      {
        sub_224EEEDDC(v76, v35, v74, v34, v82, v33, v75, v32, v38, v39);
      }
      else
      {
        sub_224EEEDDC(v76, v35, v74, v34, v82, v33, v75, 0, v38, v39);
        if ((v33 & 1) != 0)
        {
          v40 = 0;
          v32 = 0;
        }
        else
        {
          *(_QWORD *)(v0 + 80) = v82;
          sub_224EEEE30();
          v40 = sub_224F6806C();
          v32 = v43;
        }
      }
      v30 = v72;
      v29 = v73;
      goto LABEL_44;
    }
LABEL_39:
    v40 = 0;
    v32 = 0;
    v29 = 0;
  }
  else
  {
    v40 = 0;
    v32 = 0;
    v30 = 0;
  }
LABEL_44:
  *(_QWORD *)(v0 + 280) = v29;
  *(_QWORD *)(v0 + 288) = v30;
  *(_QWORD *)(v0 + 264) = v40;
  *(_QWORD *)(v0 + 272) = v32;
  v44 = *(_QWORD *)(v0 + 112);
  v45 = *(_QWORD *)(v44 + v5[17]);
  if (v45)
  {
    v46 = *(_QWORD *)(v45 + 16);
    if (v46)
    {
      v47 = *(_QWORD *)(v0 + 152);
      v80 = *(_QWORD *)(v0 + 144);
      v48 = v45 + ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80));
      v49 = *(_QWORD *)(v47 + 72);
      swift_bridgeObjectRetain_n();
      v83 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v50 = type metadata accessor for ModelsR4.ImmunizationPerformer;
      v78 = v0;
      do
      {
        v51 = *(_QWORD *)(v0 + 160);
        v52 = *(_QWORD *)(v0 + 144);
        sub_224DDB408(v48, v51, v50);
        sub_224E75F34(v51, v52, &qword_2557E0308, (void (*)(uint64_t))type metadata accessor for Reference);
        v53 = type metadata accessor for Reference();
        v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 48))(v52, 1, v53);
        v55 = *(_QWORD *)(v0 + 160);
        v56 = *(uint64_t **)(v0 + 144);
        if (v54 == 1)
        {
          sub_224E7601C(*(_QWORD *)(v0 + 144), &qword_2557E0308, (void (*)(uint64_t))type metadata accessor for Reference);
          sub_224DDEAA0(v55, v50);
        }
        else
        {
          v57 = *v56;
          v58 = *(_QWORD *)(v80 + 8);
          swift_bridgeObjectRetain();
          sub_224DDEAA0((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
          v59 = v50;
          sub_224DDEAA0(v55, v50);
          if (v58)
          {
            v60 = v83;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v60 = sub_224E56678(0, v83[2] + 1, 1, v83);
            v62 = v60[2];
            v61 = v60[3];
            if (v62 >= v61 >> 1)
              v60 = sub_224E56678((_QWORD *)(v61 > 1), v62 + 1, 1, v60);
            v60[2] = v62 + 1;
            v83 = v60;
            v63 = &v60[2 * v62];
            v63[4] = v57;
            v63[5] = v58;
          }
          v50 = v59;
          v0 = v78;
        }
        v48 += v49;
        --v46;
      }
      while (v46);
      swift_bridgeObjectRelease_n();
      v5 = v77;
      v64 = v83;
    }
    else
    {
      v64 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)(v0 + 72) = v64;
    sub_224E68104();
    sub_224E79350();
    v65 = sub_224F67B44();
    v66 = v67;
    swift_bridgeObjectRelease();
    v44 = *(_QWORD *)(v0 + 112);
  }
  else
  {
    v65 = 0;
    v66 = 0;
  }
  *(_QWORD *)(v0 + 296) = v65;
  *(_QWORD *)(v0 + 304) = v66;
  sub_224DDB408(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 136), (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v68 = *(_QWORD *)(v0 + 128);
  if (*(_QWORD *)(v44 + v5[20] + 8))
  {
    swift_bridgeObjectRetain();
    sub_224F677B4();
    v69 = sub_224F677D8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v68, 0, 1, v69);
  }
  else
  {
    v70 = sub_224F677D8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v68, 1, 1, v70);
  }
  v71 = swift_task_alloc();
  *(_QWORD *)(v0 + 312) = v71;
  *(_QWORD *)v71 = v0;
  *(_QWORD *)(v71 + 8) = sub_224EEE754;
  *(_OWORD *)(v71 + 16) = *(_OWORD *)(v0 + 104);
  return swift_task_switch();
}

uint64_t sub_224EEE754(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 320) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224EEE7B0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  id v26;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  v1 = *(void **)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = objc_msgSend(v1, sel_codings);

  sub_224E5451C(0, (unint64_t *)&qword_2557E1648);
  v4 = sub_224F67D6C();

  v5 = 0;
  v6 = *(_QWORD *)(v0 + 208);
  if (*(_QWORD *)(v2 + 56) == 1)
  {
    if ((*(_BYTE *)(v6 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v6 + 17))
        v5 = 3;
      else
        v5 = 2;
    }
    else
    {
      v5 = 1;
    }
  }
  v7 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 120);
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v9 = (uint64_t *)(v6 + *(int *)(v7 + 32));
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain();
  v12 = sub_224F00474(v8, v10, v11, v5);
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 112) + 68) & 1) != 0)
    v29 = 0;
  else
    v29 = FHIRDate.asMedicalDate()();
  v13 = *(_QWORD *)(v0 + 288);
  v35 = v4;
  if (v13)
  {
    v14 = *(_QWORD *)(v0 + 280);
    v15 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0)
      v15 = v14 & 0xFFFFFFFFFFFFLL;
    if (!v15)
    {
      swift_bridgeObjectRelease();
      v14 = 0;
      v13 = 0;
    }
  }
  else
  {
    v14 = 0;
  }
  v16 = *(_QWORD *)(v0 + 272);
  v36 = v14;
  v37 = v12;
  if (v16)
  {
    v17 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0)
      v17 = *(_QWORD *)(v0 + 264) & 0xFFFFFFFFFFFFLL;
    if (v17)
    {
      v28 = *(_QWORD *)(v0 + 264);
    }
    else
    {
      swift_bridgeObjectRelease();
      v28 = 0;
      v16 = 0;
    }
  }
  else
  {
    v28 = 0;
  }
  v18 = *(_QWORD *)(v0 + 112);
  v19 = (uint64_t *)(v18 + *(int *)(*(_QWORD *)(v0 + 216) + 64));
  v20 = v19[1];
  v33 = *v19;
  if (*(_QWORD *)(v18 + 40) == 0x656E6F642D746F6ELL && *(_QWORD *)(v18 + 48) == 0xE800000000000000)
    v21 = 1;
  else
    v21 = sub_224F683CC();
  v22 = *(_QWORD *)(v0 + 296);
  v23 = *(_QWORD *)(v0 + 304);
  v30 = *(_QWORD *)(v0 + 248);
  v31 = *(_QWORD *)(v0 + 256);
  v32 = *(void **)(v0 + 224);
  v34 = *(_QWORD *)(v0 + 208);
  v24 = *(uint64_t **)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 128);
  sub_224E5451C(0, &qword_2557E3010);
  swift_bridgeObjectRetain();
  v26 = sub_224E7BBE0(v24, v25, v30, v31, v35, (uint64_t)v37, v29, (_QWORD *)(v0 + 16), v36, v13, v28, v16, v33, v20, v22, v23, 0, 0, 0,
          v21 & 1,
          0,
          0,
          0,
          0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_224DDEAA0(v34, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v26);
}

uint64_t sub_224EEED44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FHIRDateTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_224EEED88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a4 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_224DDB44C(a9, a10);
  }
  return result;
}

uint64_t sub_224EEEDDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a4 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_224DDB480(a9, a10);
  }
  return result;
}

unint64_t sub_224EEEE30()
{
  unint64_t result;

  result = qword_2557E3018;
  if (!qword_2557E3018)
  {
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_2557E3018);
  }
  return result;
}

uint64_t *sub_224EEEE74(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v7 = a3[7];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_224F67760();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[8];
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_224F675D4();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      sub_224E5AE10();
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v18 = a3[9];
    v19 = a3[10];
    v20 = (uint64_t *)((char *)v4 + v18);
    v21 = (uint64_t *)((char *)a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
    *(uint64_t *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_224EEEFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_224F67760();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 32);
  v7 = sub_224F675D4();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_224EEF08C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_224F67760();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[8];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = sub_224F675D4();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    sub_224E5AE10();
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = a3[9];
  v17 = a3[10];
  v18 = (_QWORD *)(a1 + v16);
  v19 = (_QWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *sub_224EEF1C4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_224F67760();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[8];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_224F675D4();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_224E5AE10();
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[9];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_224EEF378(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_224F67760();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = sub_224F675D4();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    sub_224E5AE10();
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_224EEF494(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_224F67760();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[8];
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = sub_224F675D4();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_224E5AE10();
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_release();
  return a1;
}

uint64_t sub_224EEF620()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224EEF62C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = sub_224F67760();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  sub_224E5AE10();
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[9] + 8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_224EEF6D4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_224EEF6E0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = sub_224F67760();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[7];
LABEL_5:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
    return;
  }
  sub_224E5AE10();
  v9 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v12;
    v11 = a4[8];
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + a4[9] + 8) = (a2 - 1);
}

uint64_t type metadata accessor for ExtractionContext()
{
  uint64_t result;

  result = qword_2557E3078;
  if (!qword_2557E3078)
    return swift_getSingletonMetadata();
  return result;
}

void sub_224EEF7C0()
{
  unint64_t v0;
  unint64_t v1;

  sub_224F67760();
  if (v0 <= 0x3F)
  {
    sub_224E5AE10();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

id DomainResource.originIdentifier()(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  (*(void (**)(void))(*(_QWORD *)(a2 + 8) + 24))();
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v4 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v5 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend((id)objc_opt_self(), sel_originIdentifierWithFHIRResourceType_identifier_, v4, v5);

  return v6;
}

uint64_t dispatch thunk of FHIRResource.resourceType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of FHIRResource.language.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of DomainResource.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_224EEF95C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  uint64_t result;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  id v38;
  int *v39;
  uint64_t v40;
  unint64_t v41;

  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v1);
  v40 = (uint64_t)v35 - v2;
  v39 = (int *)type metadata accessor for Coding();
  v3 = *((_QWORD *)v39 - 1);
  MEMORY[0x24BDAC7A8](v39);
  v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0[1];
  if (v0[2])
    v7 = v0[2];
  else
    v7 = MEMORY[0x24BEE4AF8];
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v24 = MEMORY[0x24BEE4AF8];
    v41 = MEMORY[0x24BEE4AF8];
    if (!v6)
      goto LABEL_23;
    goto LABEL_21;
  }
  v35[1] = *v0;
  v36 = v6;
  v41 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  sub_224F6818C();
  v9 = (void *)objc_opt_self();
  v10 = *(unsigned __int8 *)(v3 + 80);
  v35[0] = v7;
  v11 = v7 + ((v10 + 32) & ~v10);
  v37 = *(_QWORD *)(v3 + 72);
  v38 = v9;
  do
  {
    sub_224E7920C(v11, (uint64_t)v5);
    v14 = v40;
    sub_224E5AF70((uint64_t)v5, v40);
    v15 = sub_224F675D4();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    {
      sub_224E7601C(v14, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v17 = 0;
    }
    else
    {
      v18 = (void *)objc_opt_self();
      sub_224F6755C();
      v19 = (void *)sub_224F67B5C();
      swift_bridgeObjectRelease();
      v17 = objc_msgSend(v18, sel_codeSystemWithIdentifier_, v19, v35[0]);

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    }
    v20 = *(_QWORD *)&v5[v39[5] + 8];
    v21 = *(_QWORD *)&v5[v39[6] + 8];
    if (*(_QWORD *)&v5[v39[7] + 8])
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22 = (void *)sub_224F67B5C();
      swift_bridgeObjectRelease();
      if (v20)
        goto LABEL_13;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22 = 0;
      if (v20)
      {
LABEL_13:
        v23 = (void *)sub_224F67B5C();
        swift_bridgeObjectRelease();
        if (v21)
          goto LABEL_6;
        goto LABEL_17;
      }
    }
    v23 = 0;
    if (v21)
    {
LABEL_6:
      v12 = (void *)sub_224F67B5C();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
LABEL_17:
    v12 = 0;
LABEL_7:
    v13 = objc_msgSend(v38, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v17, v22, v23, v12, v35[0]);

    sub_224EF0234((uint64_t)v5);
    sub_224F68174();
    sub_224F68198();
    sub_224F681A4();
    sub_224F68180();
    v11 += v37;
    --v8;
  }
  while (v8);
  v24 = v41;
  swift_bridgeObjectRelease();
  v41 = v24;
  if (!v36)
  {
LABEL_23:
    v30 = objc_allocWithZone(MEMORY[0x24BDD3CD0]);
    sub_224E597F8();
    v31 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    v32 = objc_msgSend(v30, sel_initWithCodings_, v31);

    return (uint64_t)v32;
  }
LABEL_21:
  v25 = objc_msgSend((id)objc_opt_self(), sel_textSystem);
  sub_224F67B80();
  swift_bridgeObjectRetain_n();
  v26 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v27 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v28 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v29 = objc_msgSend((id)objc_opt_self(), sel_medicalCodingWithSystem_codingVersion_code_displayString_, v25, v26, v27, v28);

  if (!(v24 >> 62)
    || (swift_bridgeObjectRetain(),
        v34 = sub_224F681D4(),
        result = swift_bridgeObjectRelease(),
        (v34 & 0x8000000000000000) == 0))
  {
    sub_224F1C278(0, 0, (uint64_t)v29);
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

id sub_224EEFE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v45 = a1;
  v46 = a2;
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v37 - v4;
  sub_224E63218(0, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v37 - v7;
  v9 = type metadata accessor for Coding();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v37 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v37 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = *(_QWORD *)(v2 + 16);
  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    sub_224E7601C((uint64_t)v8, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
    return 0;
  }
  v42 = (uint64_t)&v37 - v20;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
  {
    swift_bridgeObjectRetain();
    goto LABEL_14;
  }
  v40 = v13;
  v41 = v8;
  v23 = v21;
  v24 = v21 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  v43 = v16 + 8;
  v44 = v9;
  v38 = v23;
  v39 = v10;
  v25 = *(_QWORD *)(v10 + 72);
  swift_bridgeObjectRetain_n();
  do
  {
    sub_224E7920C(v24, (uint64_t)v19);
    sub_224E5AF70((uint64_t)v19, (uint64_t)v5);
    v26 = sub_224F675D4();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v5, 1, v26) == 1)
    {
      sub_224E7601C((uint64_t)v5, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      sub_224E7920C((uint64_t)v19, (uint64_t)v16);
LABEL_5:
      sub_224EF0234((uint64_t)v16);
      goto LABEL_6;
    }
    v28 = sub_224F6755C();
    v30 = v29;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v26);
    v49 = v28;
    v50 = v30;
    v47 = v45;
    v48 = v46;
    sub_224E51E94();
    v31 = sub_224F6803C();
    swift_bridgeObjectRelease();
    sub_224E7920C((uint64_t)v19, (uint64_t)v16);
    if (v31)
      goto LABEL_5;
    v32 = *(_QWORD *)&v43[*(int *)(v44 + 20)];
    swift_bridgeObjectRetain();
    sub_224EF0234((uint64_t)v16);
    if (v32)
    {
      v21 = v38;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = v41;
      sub_224E79250((uint64_t)v19, (uint64_t)v41);
      v10 = v39;
      v9 = v44;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v8, 0, 1, v44);
      v13 = v40;
      goto LABEL_15;
    }
LABEL_6:
    sub_224EF0234((uint64_t)v19);
    v24 += v25;
    --v22;
  }
  while (v22);
  v21 = v38;
  swift_bridgeObjectRelease();
  v13 = v40;
  v8 = v41;
  v10 = v39;
  v9 = v44;
LABEL_14:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_15:
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_224E7601C((uint64_t)v8, &qword_2557E1438, (void (*)(uint64_t))type metadata accessor for Coding);
    if (*(_QWORD *)(v21 + 16))
    {
      sub_224E7920C(v21 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), (uint64_t)v13);
      v33 = sub_224ED80E0();
      v34 = (uint64_t)v13;
      goto LABEL_19;
    }
    return 0;
  }
  else
  {
    v35 = v42;
    sub_224E79250((uint64_t)v8, v42);
    v33 = sub_224ED80E0();
    v34 = v35;
LABEL_19:
    sub_224EF0234(v34);
  }
  return v33;
}

uint64_t sub_224EF0234(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Coding();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_224EF0270(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_OWORD *)(v3 + 32) = *(_OWORD *)v2;
  *(_QWORD *)(v3 + 48) = *(_QWORD *)(v2 + 16);
  return swift_task_switch();
}

uint64_t sub_224EF0298()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[2];
  v2 = (void *)sub_224EEF95C();
  v0[7] = v2;
  v3 = v1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = v2;
  v6 = (uint64_t)v5;
  if ((v4 & 4) != 0)
  {
    v0[10] = v5;
    return swift_task_switch();
  }
  else
  {
    v0[8] = *(_QWORD *)(v3 + *(int *)(type metadata accessor for ExtractionContext() + 44));
    swift_retain();
    v7 = (_QWORD *)swift_task_alloc();
    v0[9] = v7;
    *v7 = v0;
    v7[1] = sub_224EF037C;
    return sub_224ED0FBC(v6, v0[3]);
  }
}

uint64_t sub_224EF037C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;

  v3 = *v1;
  v4 = *(void **)(*v1 + 56);
  swift_task_dealloc();
  swift_release();

  *(_QWORD *)(v3 + 80) = a1;
  return swift_task_switch();
}

uint64_t sub_224EF03EC()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;

  v1 = *(void **)(v0 + 80);

  v2 = objc_msgSend(v1, sel_codings);
  sub_224E597F8();
  sub_224F67D6C();

  v3 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithMedicalCodings_, v3);

  return (*(uint64_t (**)(id))(v0 + 8))(v4);
}

uint64_t storeEnumTagSinglePayload for BinaryDataError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_224EF04FC + 4 * byte_224F72FA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_224EF0530 + 4 * asc_224F72FA0[v4]))();
}

uint64_t sub_224EF0530(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EF0538(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EF0540);
  return result;
}

uint64_t sub_224EF054C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EF0554);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_224EF0558(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EF0560(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BinaryDataError()
{
  return &type metadata for BinaryDataError;
}

unint64_t sub_224EF0580()
{
  unint64_t result;

  result = qword_2557E30D0;
  if (!qword_2557E30D0)
  {
    result = MEMORY[0x22768ED24](&unk_224F73008, &type metadata for BinaryDataError);
    atomic_store(result, &qword_2557E30D0);
  }
  return result;
}

uint64_t sub_224EF05C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 72) = a1;
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  *(_QWORD *)(v2 + 80) = swift_task_alloc();
  *(_QWORD *)(v2 + 88) = type metadata accessor for RecordExtractionContext();
  *(_QWORD *)(v2 + 96) = swift_task_alloc();
  sub_224F6743C();
  *(_QWORD *)(v2 + 104) = swift_task_alloc();
  *(_QWORD *)(v2 + 112) = swift_task_alloc();
  *(_QWORD *)(v2 + 120) = type metadata accessor for FHIRDateTime();
  *(_QWORD *)(v2 + 128) = swift_task_alloc();
  v3 = swift_task_alloc();
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v2 + 136) = v3;
  *(_QWORD *)(v2 + 144) = v4;
  *(_QWORD *)(v2 + 152) = v5;
  *(_OWORD *)(v2 + 160) = *(_OWORD *)(v1 + 64);
  *(_QWORD *)(v2 + 176) = *(_QWORD *)(v1 + 80);
  *(_OWORD *)(v2 + 184) = *(_OWORD *)(v1 + 88);
  *(_QWORD *)(v2 + 200) = *(_QWORD *)(v1 + 104);
  return swift_task_switch();
}

uint64_t sub_224EF06E4()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = v0[17];
  v2 = (void *)objc_opt_self();
  v3 = (void *)sub_224F67B5C();
  v4 = objc_msgSend(v2, sel_codeSystemWithIdentifier_, v3);

  sub_224F67B80();
  v5 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v6 = (void *)sub_224F67B5C();
  v7 = (void *)sub_224F67B5C();
  v0[26] = objc_msgSend((id)objc_opt_self(), sel_medicalCodingWithSystem_codingVersion_code_displayString_, v4, v5, v6, v7);

  v8 = sub_224F67B80();
  v0[27] = v9;
  v10 = (void *)sub_224F67B5C();
  v0[28] = objc_msgSend(v2, sel_codeSystemWithIdentifier_, v10);

  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v1);
  v11 = v0[17];
  v41 = v8;
  if (*(_QWORD *)(v11 + 56) == 1)
  {
    if ((*(_BYTE *)(v11 + 19) & 1) != 0)
    {
      v12 = 2;
      if (*(_BYTE *)(v11 + 17))
        v12 = 3;
    }
    else
    {
      v12 = 1;
    }
    v42 = v12;
  }
  else
  {
    v42 = 0;
  }
  v13 = v0[14];
  v14 = v0[15];
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v15 = (uint64_t *)(v11 + *(int *)(v14 + 32));
  v16 = *v15;
  v17 = v15[1];
  swift_bridgeObjectRetain();
  v18 = sub_224F00474(v13, v16, v17, v42);
  v0[29] = v18;
  sub_224DDEAA0(v11, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v19 = v14;
  v20 = v0[16];
  v21 = (void *)objc_opt_self();
  v0[30] = objc_msgSend(v21, sel_inspectableValueWithMedicalDate_, v18);
  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v20);
  v22 = v0[16];
  if (*(_QWORD *)(v22 + 56) == 1)
  {
    if ((*(_BYTE *)(v22 + 19) & 1) != 0)
    {
      v23 = 2;
      if (*(_BYTE *)(v22 + 17))
        v23 = 3;
    }
    else
    {
      v23 = 1;
    }
    v40 = v23;
  }
  else
  {
    v40 = 0;
  }
  v24 = v0[13];
  FHIRDateTime.asDateComponents()();
  v25 = (uint64_t *)(v22 + *(int *)(v19 + 32));
  v26 = *v25;
  v27 = v25[1];
  swift_bridgeObjectRetain();
  v28 = sub_224F00474(v24, v26, v27, v40);
  v0[31] = v28;
  v29 = v28;
  v30 = v0[16];
  v32 = v0[11];
  v31 = v0[12];
  v34 = v0[9];
  v33 = v0[10];
  v0[32] = v41;
  sub_224DDEAA0(v30, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v0[33] = objc_msgSend(v21, sel_inspectableValueWithMedicalDate_, v29);
  v0[34] = sub_224E5451C(0, &qword_2557E2A28);
  sub_224DDB408(v34, v31, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v35 = sub_224F677D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v33, 1, 1, v35);
  v36 = v34 + *(int *)(v32 + 20);
  v0[35] = *(_QWORD *)(v36 + *(int *)(type metadata accessor for ExtractionContext() + 44));
  v37 = *(_QWORD *)(v36 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  v38 = (_QWORD *)swift_task_alloc();
  v0[36] = v38;
  *v38 = v0;
  v38[1] = sub_224EF0C68;
  return sub_224ED3090(0, v0[24], v0[25], 0, 0, v37);
}

uint64_t sub_224EF0C68(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 296) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_224EF0CCC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;

  v1 = *(void **)(v0 + 264);
  v17 = *(void **)(v0 + 296);
  v3 = *(void **)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 256);
  v4 = *(void **)(v0 + 240);
  v20 = *(void **)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(void **)(v0 + 224);
  v7 = *(void **)(v0 + 208);
  v15 = *(_QWORD *)(v0 + 176);
  v16 = *(_QWORD *)(v0 + 184);
  v13 = *(uint64_t **)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 16) = v6;
  *(_OWORD *)(v0 + 24) = xmmword_224F73070;
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v0 + 48) = v5;
  *(_OWORD *)(v0 + 56) = xmmword_224F73080;
  v19 = v1;
  v18 = v4;
  v8 = v3;
  v9 = v7;
  v10 = v6;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v11 = sub_224F2EC5C(v13, v14, 0, 0, v17, MEMORY[0x24BEE4AF8], v15, v16, (uint64_t)v1, (uint64_t)v4, (uint64_t)v3, (uint64_t)v7, (void **)(v0 + 16), 0, 0);

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v11);
}

uint64_t sub_224EF0E9C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v3 + 240) = a1;
  *(_QWORD *)(v3 + 248) = a2;
  *(_QWORD *)(v3 + 256) = type metadata accessor for FHIRExtractionContext();
  *(_QWORD *)(v3 + 264) = swift_task_alloc();
  *(_QWORD *)(v3 + 272) = type metadata accessor for ModelsR4.Condition(0);
  *(_QWORD *)(v3 + 280) = swift_task_alloc();
  v4 = swift_task_alloc();
  v5 = *v2;
  v6 = v2[1];
  *(_QWORD *)(v3 + 288) = v4;
  *(_QWORD *)(v3 + 296) = v5;
  *(_QWORD *)(v3 + 304) = v6;
  *(_OWORD *)(v3 + 312) = *((_OWORD *)v2 + 1);
  *(_QWORD *)(v3 + 328) = v2[4];
  v7 = *(_OWORD *)(v2 + 7);
  *(_OWORD *)(v3 + 336) = *(_OWORD *)(v2 + 5);
  *(_OWORD *)(v3 + 352) = v7;
  v8 = v2[10];
  *(_QWORD *)(v3 + 368) = v2[9];
  *(_QWORD *)(v3 + 376) = v8;
  v9 = v2[12];
  *(_QWORD *)(v3 + 384) = v2[11];
  *(_QWORD *)(v3 + 392) = v9;
  *(_QWORD *)(v3 + 400) = v2[13];
  return swift_task_switch();
}

uint64_t sub_224EF0F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(v0 + 392);
  v1 = *(_QWORD *)(v0 + 400);
  v3 = *(_OWORD *)(v0 + 376);
  v4 = *(_OWORD *)(v0 + 360);
  v5 = *(_OWORD *)(v0 + 344);
  v6 = *(_OWORD *)(v0 + 328);
  v7 = *(_OWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 296);
  *(_OWORD *)(v0 + 32) = v7;
  *(_OWORD *)(v0 + 48) = v6;
  *(_OWORD *)(v0 + 64) = v5;
  *(_OWORD *)(v0 + 80) = v4;
  *(_OWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 112) = v2;
  *(_QWORD *)(v0 + 120) = v1;
  v9 = v8 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v10 = *(_QWORD *)(v9 + *(int *)(type metadata accessor for ExtractionContext() + 44));
  *(_QWORD *)(v0 + 408) = v10;
  v11 = *(_QWORD *)(v9 + 16);
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 416) = v12;
  *v12 = v0;
  v12[1] = sub_224EF104C;
  return sub_224EF1BEC(*(_QWORD *)(v0 + 280), v10, v11);
}

uint64_t sub_224EF104C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 424) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_224EF10B8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  id v46;
  uint64_t v47;

  v1 = *(void **)(v0 + 424);
  sub_224EF25B0(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288));
  sub_224F672EC();
  swift_allocObject();
  sub_224F672E0();
  sub_224EF25F4();
  v2 = sub_224F672D4();
  if (v1)
  {
    swift_release();
    if (qword_2557E0128 != -1)
      swift_once();
    v4 = sub_224F679B8();
    __swift_project_value_buffer(v4, (uint64_t)qword_2557FC958);
    v5 = v1;
    v6 = v1;
    v7 = sub_224F679AC();
    v8 = sub_224F67ED4();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v47 = v10;
      *(_DWORD *)v9 = 136315138;
      *(_QWORD *)(v0 + 224) = v1;
      v11 = v1;
      v12 = v1;
      sub_224E57260();
      sub_224F6848C();
      v13 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v14 = sub_224F67BC8();
      v16 = v15;

      *(_QWORD *)(v0 + 192) = sub_224E76904(v14, v16, &v47);
      sub_224F68000();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_224DAC000, v7, v8, "SignedClinicalDataEUDCC.asClinicalRecord: error building Immunization. Error: %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v10, -1, -1);
      MEMORY[0x22768EDE4](v9, -1, -1);

      if (!*(_QWORD *)(v0 + 424))
        goto LABEL_9;
    }
    else
    {

      if (!*(_QWORD *)(v0 + 424))
LABEL_9:
        sub_224DDEAA0(*(_QWORD *)(v0 + 288), type metadata accessor for ModelsR4.Condition);
    }
    v37 = 0;
    goto LABEL_11;
  }
  v17 = v2;
  v18 = v3;
  v19 = *(void **)(v0 + 248);
  swift_release();
  sub_224DDE970(v17, v18);
  v20 = sub_224ED9650(v19);
  v41 = *(_QWORD *)(v0 + 304);
  v44 = *(_QWORD *)(v0 + 296);
  v21 = v17;
  v22 = *(uint64_t **)(v0 + 288);
  v45 = v18;
  v23 = *(int **)(v0 + 256);
  v24 = *(_QWORD *)(v0 + 264);
  v25 = *(_QWORD *)(v0 + 240);
  v42 = sub_224F073F8(v26);
  swift_bridgeObjectRelease();
  v46 = v20;
  v43 = sub_224F5749C();
  v28 = v27;
  sub_224DDB408(v25, v24, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v30 = *v22;
  v29 = v22[1];
  v31 = v21;
  v32 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v33 = objc_msgSend(v32, sel_primaryR4Version);
  v34 = (_QWORD *)(v24 + v23[5]);
  *v34 = v30;
  v34[1] = v29;
  v35 = (_QWORD *)(v24 + v23[6]);
  *v35 = v44;
  v35[1] = v41;
  *(_QWORD *)(v24 + v23[7]) = v33;
  v36 = (uint64_t *)(v24 + v23[8]);
  *v36 = v21;
  v36[1] = v45;
  v37 = sub_224EF2674(v24, v46, v42, v43, v28);
  v38 = *(_QWORD *)(v0 + 288);
  v39 = *(_QWORD *)(v0 + 264);

  sub_224DDE9B4(v31, v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_224DDEAA0(v39, (uint64_t (*)(_QWORD))type metadata accessor for FHIRExtractionContext);
  sub_224DDEAA0(v38, type metadata accessor for ModelsR4.Condition);
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v37);
}

uint64_t sub_224EF195C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  swift_release();
  v1 = *(void **)(v0 + 424);
  if (qword_2557E0128 != -1)
    swift_once();
  v2 = sub_224F679B8();
  __swift_project_value_buffer(v2, (uint64_t)qword_2557FC958);
  v3 = v1;
  v4 = v1;
  v5 = sub_224F679AC();
  v6 = sub_224F67ED4();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v16 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v0 + 224) = v1;
    v9 = v1;
    v10 = v1;
    sub_224E57260();
    sub_224F6848C();
    v11 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_224F68078();
    swift_unknownObjectRelease();
    v12 = sub_224F67BC8();
    v14 = v13;

    *(_QWORD *)(v0 + 192) = sub_224E76904(v12, v14, &v16);
    sub_224F68000();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_224DAC000, v5, v6, "SignedClinicalDataEUDCC.asClinicalRecord: error building Immunization. Error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22768EDE4](v8, -1, -1);
    MEMORY[0x22768EDE4](v7, -1, -1);

    if (!*(_QWORD *)(v0 + 424))
      goto LABEL_7;
  }
  else
  {

    if (!*(_QWORD *)(v0 + 424))
LABEL_7:
      sub_224DDEAA0(*(_QWORD *)(v0 + 288), type metadata accessor for ModelsR4.Condition);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_224EF1BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v4 + 56) = a2;
  *(_QWORD *)(v4 + 64) = a3;
  *(_QWORD *)(v4 + 48) = a1;
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  *(_QWORD *)(v4 + 72) = swift_task_alloc();
  *(_QWORD *)(v4 + 80) = swift_task_alloc();
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v5);
  *(_QWORD *)(v4 + 88) = swift_task_alloc();
  *(_QWORD *)(v4 + 96) = swift_task_alloc();
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v5);
  *(_QWORD *)(v4 + 104) = swift_task_alloc();
  *(_QWORD *)(v4 + 112) = swift_task_alloc();
  *(_QWORD *)(v4 + 120) = swift_task_alloc();
  v6 = type metadata accessor for Reference();
  *(_QWORD *)(v4 + 128) = v6;
  *(_QWORD *)(v4 + 136) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 144) = swift_task_alloc();
  v7 = type metadata accessor for FHIRDateTime();
  *(_QWORD *)(v4 + 152) = v7;
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 168) = swift_task_alloc();
  *(_QWORD *)(v4 + 176) = swift_task_alloc();
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], v5);
  v8 = swift_task_alloc();
  v9 = *(_QWORD *)(v3 + 32);
  v10 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v4 + 184) = v8;
  *(_QWORD *)(v4 + 192) = v9;
  *(_QWORD *)(v4 + 200) = v10;
  *(_OWORD *)(v4 + 208) = *(_OWORD *)(v3 + 64);
  *(_QWORD *)(v4 + 224) = *(_QWORD *)(v3 + 80);
  *(_OWORD *)(v4 + 232) = *(_OWORD *)(v3 + 88);
  *(_QWORD *)(v4 + 248) = *(_QWORD *)(v3 + 104);
  return swift_task_switch();
}

uint64_t sub_224EF1DCC()
{
  uint64_t *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v1 = v0[23];
  v14 = v0[22];
  sub_224DDEA0C(0, &qword_2557E15B0, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v2 = (int *)type metadata accessor for Coding();
  v3 = *(unsigned __int8 *)(*((_QWORD *)v2 - 1) + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = swift_allocObject();
  v0[32] = v5;
  *(_OWORD *)(v5 + 16) = xmmword_224F6D8B0;
  v6 = v5 + v4;
  sub_224F675B0();
  sub_224DFAC88(v1, v6, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  *(_OWORD *)(v6 + v2[5]) = xmmword_224F73090;
  *(_OWORD *)(v6 + v2[6]) = xmmword_224F730A0;
  v7 = (_QWORD *)(v6 + v2[7]);
  *v7 = 0;
  v7[1] = 0;
  v8 = swift_allocObject();
  v0[33] = v8;
  *(_OWORD *)(v8 + 16) = xmmword_224F6D8B0;
  v9 = v8 + v4;
  sub_224F675B0();
  sub_224DFAC88(v1, v9, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  *(_OWORD *)(v9 + v2[5]) = xmmword_224F73070;
  *(_OWORD *)(v9 + v2[6]) = xmmword_224F73080;
  v10 = (_QWORD *)(v9 + v2[7]);
  *v10 = 0;
  v10[1] = 0;
  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v14);
  v11 = v0[21];
  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v11);
  v12 = (_QWORD *)swift_task_alloc();
  v0[34] = (uint64_t)v12;
  *v12 = v0;
  v12[1] = sub_224EF2120;
  return sub_224ED44CC((uint64_t)(v0 + 2), 0, v0[30], v0[31], 0, 0, v0[8]);
}

uint64_t sub_224EF2120()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224EF2174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v14)(uint64_t, _QWORD, uint64_t, uint64_t);
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v29 = *(_QWORD *)(v0 + 256);
  v30 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 176);
  v32 = v3;
  v31 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD **)(v0 + 144);
  v25 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 160);
  v24 = *(_QWORD *)(v0 + 128);
  v34 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 96);
  v35 = *(_QWORD *)(v0 + 104);
  v37 = v7;
  v38 = *(_QWORD *)(v0 + 88);
  v33 = *(_QWORD *)(v0 + 80);
  v26 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 48);
  v28 = *(_OWORD *)(v0 + 16);
  v9 = (char *)v5 + *(int *)(v24 + 24);
  v27 = *(_QWORD *)(v0 + 32);
  v10 = type metadata accessor for Identifier();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *v5 = v2;
  v5[1] = v1;
  v5[2] = 0;
  v5[3] = 0;
  v36 = v6;
  sub_224DDB408(v3, v6, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v11 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56);
  v11(v6, 0, 1, v4);
  v12 = type metadata accessor for Period();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v7, 1, 1, v12);
  sub_224DDB408(v31, v34, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v11(v34, 0, 1, v4);
  v13(v38, 1, 1, v12);
  sub_224DDB408(v31, v35, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v11(v35, 0, 1, v4);
  sub_224DDB408((uint64_t)v5, v33, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  v14 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56);
  v14(v33, 0, 1, v24);
  sub_224DDB408((uint64_t)v5, v26, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  v14(v26, 0, 1, v24);
  v15 = (int *)type metadata accessor for ModelsR4.Condition(0);
  *(_QWORD *)(v0 + 40) = v15;
  sub_224EF263C();
  swift_bridgeObjectRetain();
  v16 = sub_224F67BC8();
  v18 = v17;
  sub_224DDEAA0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224DDEAA0(v31, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  sub_224DDEAA0(v32, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  *(_QWORD *)v8 = v16;
  *(_QWORD *)(v8 + 8) = v18;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_OWORD *)(v8 + 32) = xmmword_224F730B0;
  *(_QWORD *)(v8 + 48) = 0xE800000000000000;
  *(_QWORD *)(v8 + 56) = v29;
  *(_OWORD *)(v8 + 64) = xmmword_224F73080;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 80) = v30;
  *(_OWORD *)(v8 + 104) = xmmword_224F71250;
  *(_OWORD *)(v8 + 120) = v28;
  *(_QWORD *)(v8 + 136) = v27;
  *(_QWORD *)(v8 + 144) = 0;
  sub_224DFAC88(v36, v8 + v15[13], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DFAC88(v37, v8 + v15[14], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v19 = (_QWORD *)(v8 + v15[15]);
  *v19 = 0;
  v19[1] = 0;
  sub_224DFAC88(v34, v8 + v15[16], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DFAC88(v38, v8 + v15[17], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v20 = (_QWORD *)(v8 + v15[18]);
  *v20 = 0;
  v20[1] = 0;
  sub_224DFAC88(v35, v8 + v15[19], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DFAC88(v33, v8 + v15[20], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_224DFAC88(v26, v8 + v15[21], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  *(_QWORD *)(v8 + v15[22]) = 0;
  v21 = (_QWORD *)(v8 + v15[23]);
  *v21 = 0;
  v21[1] = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224EF25B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModelsR4.Condition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_224EF25F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E0980;
  if (!qword_2557E0980)
  {
    v1 = type metadata accessor for ModelsR4.Condition(255);
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Condition, v1);
    atomic_store(result, (unint64_t *)&qword_2557E0980);
  }
  return result;
}

unint64_t sub_224EF263C()
{
  unint64_t result;

  result = qword_2557E04D0;
  if (!qword_2557E04D0)
  {
    type metadata accessor for ModelsR4.Condition(255);
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E04D0);
  }
  return result;
}

id sub_224EF2674(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_224EF2688(a1, a2, a3, a4, a5);
}

id sub_224EF2688(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v46 = a4;
  v47 = a5;
  v44 = a2;
  v45 = a3;
  v43 = sub_224F67760();
  v6 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v40 - v10;
  v12 = (int *)type metadata accessor for FHIRExtractionContext();
  v13 = v12[6];
  v14 = (uint64_t *)(a1 + v12[5]);
  v15 = v14[1];
  v42 = *v14;
  if (*(_QWORD *)(a1 + v13 + 8))
  {
    v16 = *(_QWORD *)(a1 + v13);
    v40 = *(_QWORD *)(a1 + v13 + 8);
    v41 = v16;
  }
  else
  {
    v40 = 0xE700000000000000;
    v41 = 0x2964692D6F6E28;
  }
  v17 = v12[8];
  v18 = *(void **)(a1 + v12[7]);
  v20 = *(_QWORD *)(a1 + v17);
  v19 = *(_QWORD *)(a1 + v17 + 8);
  swift_bridgeObjectRetain();
  v21 = v18;
  swift_bridgeObjectRetain();
  sub_224DDE970(v20, v19);
  sub_224E6CB00((uint64_t)v11);
  v22 = sub_224F675D4();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v11, 0, 1, v22);
  v23 = a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v24 = type metadata accessor for ExtractionContext();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v23 + *(int *)(v24 + 28), v43);
  v25 = objc_allocWithZone(MEMORY[0x24BDD3B98]);
  v26 = sub_224EF4918(v42, v15, v41, v40, (uint64_t)v21, v20, v19, (uint64_t)v11, (uint64_t)v8);
  sub_224DDE9B4(v20, v19);

  v27 = (void *)objc_opt_self();
  v28 = v44;
  v29 = objc_msgSend(v27, sel_localDevice);
  v30 = v45;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31 = v26;
  v32 = (void *)sub_224F67718();
  v33 = (void *)sub_224F67718();
  if (v30)
  {
    v34 = (void *)sub_224F67AE4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = 0;
  }
  v35 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v36 = objc_msgSend((id)objc_opt_self(), sel_clinicalRecordWithType_startDate_endDate_device_metadata_displayName_FHIRResource_, v28, v32, v33, v29, v34, v35, v31);

  v37 = v36;
  v38 = (void *)sub_224F67718();
  objc_msgSend(v37, sel__setCreationDate_, v38);

  return v37;
}

uint64_t sub_224EF29DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v2 + 72) = a1;
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  *(_QWORD *)(v2 + 80) = swift_task_alloc();
  *(_QWORD *)(v2 + 88) = type metadata accessor for RecordExtractionContext();
  *(_QWORD *)(v2 + 96) = swift_task_alloc();
  sub_224F6743C();
  *(_QWORD *)(v2 + 104) = swift_task_alloc();
  *(_QWORD *)(v2 + 112) = type metadata accessor for FHIRDateTime();
  v3 = swift_task_alloc();
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v2 + 120) = v3;
  *(_QWORD *)(v2 + 128) = v4;
  *(_QWORD *)(v2 + 136) = v5;
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(v1 + 96);
  v6 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v2 + 160) = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v2 + 168) = v6;
  *(_OWORD *)(v2 + 176) = *(_OWORD *)(v1 + 128);
  v7 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v2 + 192) = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v2 + 200) = v7;
  return swift_task_switch();
}

uint64_t sub_224EF2ADC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v35;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_FHIRObservationStatus);
  *(_QWORD *)(v0 + 208) = v3;
  v4 = sub_224F67B80();
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 216) = v5;
  *(_QWORD *)(v0 + 24) = 0x6C616E6966;
  *(_QWORD *)(v0 + 32) = 0xE500000000000000;
  *(_QWORD *)(v0 + 40) = v4;
  *(_QWORD *)(v0 + 48) = v5;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v1);
  v6 = *(_QWORD *)(v0 + 120);
  v35 = v2;
  if (*(_QWORD *)(v6 + 56) == 1)
  {
    if ((*(_BYTE *)(v6 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v6 + 17))
        v7 = 3;
      else
        v7 = 2;
    }
    else
    {
      v7 = 1;
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 112);
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v10 = (uint64_t *)(v6 + *(int *)(v8 + 32));
  v12 = *v10;
  v11 = v10[1];
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 224) = sub_224F00474(v9, v12, v11, v7);
  sub_224DDEAA0(v6, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v13 = *(_QWORD *)(v0 + 152);
  if (v13)
  {
    v14 = *(_QWORD *)(v0 + 144);
    sub_224EF4A98(0, &qword_2557E1568);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_224F6D8B0;
    *(_QWORD *)(v15 + 32) = v14;
    *(_QWORD *)(v15 + 40) = v13;
  }
  else
  {
    v15 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(v0 + 232) = v15;
  v16 = *(_QWORD *)(v0 + 88);
  v17 = *(_QWORD *)(v0 + 72);
  sub_224EF4A98(0, (unint64_t *)&qword_2557E2960);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_224F71240;
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_224F71240;
  swift_bridgeObjectRetain();
  v20 = (void *)sub_224F67B5C();
  v21 = objc_msgSend(v35, sel_codeSystemWithIdentifier_, v20);

  v22 = objc_allocWithZone(MEMORY[0x24BDD3CC8]);
  v23 = (void *)sub_224F67B5C();
  v24 = (void *)sub_224F67B5C();
  v25 = objc_msgSend(v22, sel_initWithCodingSystem_codingVersion_code_displayString_, v21, 0, v23, v24);

  *(_QWORD *)(v19 + 32) = v25;
  sub_224F67D84();
  v26 = objc_allocWithZone(MEMORY[0x24BDD3CD0]);
  *(_QWORD *)(v0 + 240) = sub_224E5451C(0, (unint64_t *)&qword_2557E1648);
  v27 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v28 = objc_msgSend(v26, sel_initWithCodings_, v27);

  *(_QWORD *)(v18 + 32) = v28;
  sub_224F67D84();
  *(_QWORD *)(v0 + 248) = v18;
  v29 = *(int *)(v16 + 20);
  *(_DWORD *)(v0 + 320) = v29;
  v30 = v17 + v29;
  v31 = *(int *)(type metadata accessor for ExtractionContext() + 44);
  *(_DWORD *)(v0 + 324) = v31;
  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v30 + v31);
  v32 = *(_QWORD *)(v30 + 16);
  swift_retain();
  v33 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 264) = v33;
  *v33 = v0;
  v33[1] = sub_224EF2F48;
  return sub_224ED3090(2, *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), 0, 0, v32);
}

uint64_t sub_224EF2F48(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 272) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_224EF2FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(int *)(v0 + 324);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = v5 + *(int *)(v0 + 320);
  v7 = objc_msgSend(*(id *)(v0 + 272), sel_codings);
  sub_224F67D6C();

  v8 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 280) = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithMedicalCodings_, v8);

  *(_QWORD *)(v0 + 288) = sub_224E5451C(0, &qword_2557E3118);
  sub_224DDB408(v5, v3, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v9 = sub_224F677D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  *(_QWORD *)(v0 + 296) = *(_QWORD *)(v6 + v1);
  v10 = *(_QWORD *)(v6 + 16);
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 304) = v11;
  *v11 = v0;
  v11[1] = sub_224EF3120;
  return sub_224ED3090(3, *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 160), v2, v10);
}

uint64_t sub_224EF3120(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 312) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_224EF3184()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v12 = *(void **)(v0 + 312);
  v15 = *(void **)(v0 + 272);
  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(void **)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  v14 = *(void **)(v0 + 280);
  v13 = *(void **)(v0 + 208);
  v4 = *(uint64_t **)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueCollectionSingleWithValue_, v14);
  v7 = (void *)*MEMORY[0x24BDD2BA0];
  v8 = v2;
  v9 = v7;
  v10 = sub_224F184E8(v4, v5, 0, 0, v12, (uint64_t)v6, 0, (uint64_t)v2, (uint64_t)v2, (uint64_t)v9, v1, v0 + 16, 0, 0, 0, 0, 0, 0, v3,
          0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v10);
}

uint64_t sub_224EF3310(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)(v3 + 288) = a1;
  *(_QWORD *)(v3 + 296) = a2;
  *(_QWORD *)(v3 + 304) = type metadata accessor for FHIRExtractionContext();
  *(_QWORD *)(v3 + 312) = swift_task_alloc();
  *(_QWORD *)(v3 + 320) = type metadata accessor for ModelsR4.Observation(0);
  *(_QWORD *)(v3 + 328) = swift_task_alloc();
  v4 = swift_task_alloc();
  v5 = *v2;
  v6 = v2[1];
  *(_QWORD *)(v3 + 336) = v4;
  *(_QWORD *)(v3 + 344) = v5;
  *(_QWORD *)(v3 + 352) = v6;
  v7 = *((_OWORD *)v2 + 8);
  *(_OWORD *)(v3 + 128) = *((_OWORD *)v2 + 7);
  *(_OWORD *)(v3 + 144) = v7;
  *(_OWORD *)(v3 + 160) = *((_OWORD *)v2 + 9);
  v8 = *((_OWORD *)v2 + 4);
  *(_OWORD *)(v3 + 64) = *((_OWORD *)v2 + 3);
  *(_OWORD *)(v3 + 80) = v8;
  v9 = *((_OWORD *)v2 + 6);
  *(_OWORD *)(v3 + 96) = *((_OWORD *)v2 + 5);
  *(_OWORD *)(v3 + 112) = v9;
  v10 = *((_OWORD *)v2 + 2);
  *(_OWORD *)(v3 + 32) = *((_OWORD *)v2 + 1);
  *(_OWORD *)(v3 + 48) = v10;
  return swift_task_switch();
}

uint64_t sub_224EF33D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[44];
  v2 = v0[36];
  v0[2] = v0[43];
  v0[3] = v1;
  v3 = v2 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v4 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for ExtractionContext() + 44));
  v0[45] = v4;
  v5 = *(_QWORD *)(v3 + 16);
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc();
  v0[46] = v6;
  *v6 = v0;
  v6[1] = sub_224EF3474;
  return sub_224EF4010(v0[41], v4, v5);
}

uint64_t sub_224EF3474()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 376) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_224EF34E0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void **)(v0 + 376);
  sub_224EF488C(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336));
  sub_224F672EC();
  swift_allocObject();
  sub_224F672E0();
  sub_224EF48D0();
  v2 = sub_224F672D4();
  if (v1)
  {
    swift_release();
    if (qword_2557E0128 != -1)
      swift_once();
    v4 = sub_224F679B8();
    __swift_project_value_buffer(v4, (uint64_t)qword_2557FC958);
    v5 = v1;
    v6 = v1;
    v7 = sub_224F679AC();
    v8 = sub_224F67ED4();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v47 = v10;
      *(_DWORD *)v9 = 136315138;
      *(_QWORD *)(v0 + 272) = v1;
      v11 = v1;
      v12 = v1;
      sub_224E57260();
      sub_224F6848C();
      v13 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v14 = sub_224F67BC8();
      v16 = v15;

      *(_QWORD *)(v0 + 240) = sub_224E76904(v14, v16, &v47);
      sub_224F68000();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_224DAC000, v7, v8, "SignedClinicalDataEUDCC.asClinicalRecord: error building Observation. Error: %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v10, -1, -1);
      MEMORY[0x22768EDE4](v9, -1, -1);

      if (!*(_QWORD *)(v0 + 376))
        goto LABEL_9;
    }
    else
    {

      if (!*(_QWORD *)(v0 + 376))
LABEL_9:
        sub_224DDEAA0(*(_QWORD *)(v0 + 336), type metadata accessor for ModelsR4.Observation);
    }
    v38 = 0;
    goto LABEL_11;
  }
  v17 = v2;
  v18 = v3;
  v19 = *(void **)(v0 + 296);
  swift_release();
  sub_224DDE970(v17, v18);
  v20 = sub_224ED9650(v19);
  v42 = *(_QWORD *)(v0 + 352);
  v45 = v18;
  v46 = *(_QWORD *)(v0 + 344);
  v21 = v17;
  v22 = *(uint64_t **)(v0 + 336);
  v23 = *(int **)(v0 + 304);
  v24 = *(_QWORD *)(v0 + 312);
  v25 = *(_QWORD *)(v0 + 288);
  v43 = sub_224F073F8(v26);
  swift_bridgeObjectRelease();
  v27 = v20;
  v44 = sub_224F5749C();
  v29 = v28;
  sub_224DDB408(v25, v24, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v30 = *v22;
  v31 = v22[1];
  v32 = v21;
  v33 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = objc_msgSend(v33, sel_primaryR4Version);
  v35 = (_QWORD *)(v24 + v23[5]);
  *v35 = v30;
  v35[1] = v31;
  v36 = (_QWORD *)(v24 + v23[6]);
  *v36 = v46;
  v36[1] = v42;
  *(_QWORD *)(v24 + v23[7]) = v34;
  v37 = (uint64_t *)(v24 + v23[8]);
  *v37 = v21;
  v37[1] = v45;
  v38 = sub_224EF2688(v24, v27, v43, v44, v29);
  v39 = *(_QWORD *)(v0 + 336);
  v40 = *(_QWORD *)(v0 + 312);

  sub_224DDE9B4(v32, v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_224DDEAA0(v40, (uint64_t (*)(_QWORD))type metadata accessor for FHIRExtractionContext);
  sub_224DDEAA0(v39, type metadata accessor for ModelsR4.Observation);
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v38);
}

uint64_t sub_224EF3D80()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  swift_release();
  v1 = *(void **)(v0 + 376);
  if (qword_2557E0128 != -1)
    swift_once();
  v2 = sub_224F679B8();
  __swift_project_value_buffer(v2, (uint64_t)qword_2557FC958);
  v3 = v1;
  v4 = v1;
  v5 = sub_224F679AC();
  v6 = sub_224F67ED4();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v16 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v0 + 272) = v1;
    v9 = v1;
    v10 = v1;
    sub_224E57260();
    sub_224F6848C();
    v11 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_224F68078();
    swift_unknownObjectRelease();
    v12 = sub_224F67BC8();
    v14 = v13;

    *(_QWORD *)(v0 + 240) = sub_224E76904(v12, v14, &v16);
    sub_224F68000();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_224DAC000, v5, v6, "SignedClinicalDataEUDCC.asClinicalRecord: error building Observation. Error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22768EDE4](v8, -1, -1);
    MEMORY[0x22768EDE4](v7, -1, -1);

    if (!*(_QWORD *)(v0 + 376))
      goto LABEL_7;
  }
  else
  {

    if (!*(_QWORD *)(v0 + 376))
LABEL_7:
      sub_224DDEAA0(*(_QWORD *)(v0 + 336), type metadata accessor for ModelsR4.Observation);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_224EF4010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v4 + 80) = a2;
  *(_QWORD *)(v4 + 88) = a3;
  *(_QWORD *)(v4 + 72) = a1;
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  *(_QWORD *)(v4 + 96) = swift_task_alloc();
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v5);
  *(_QWORD *)(v4 + 104) = swift_task_alloc();
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v5);
  *(_QWORD *)(v4 + 112) = swift_task_alloc();
  *(_QWORD *)(v4 + 120) = swift_task_alloc();
  *(_QWORD *)(v4 + 128) = swift_task_alloc();
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], v5);
  *(_QWORD *)(v4 + 136) = swift_task_alloc();
  v6 = type metadata accessor for FHIRDateTime();
  *(_QWORD *)(v4 + 144) = v6;
  *(_QWORD *)(v4 + 152) = *(_QWORD *)(v6 - 8);
  v7 = swift_task_alloc();
  v8 = *(_QWORD *)(v3 + 80);
  v9 = *(_QWORD *)(v3 + 88);
  *(_QWORD *)(v4 + 160) = v7;
  *(_QWORD *)(v4 + 168) = v8;
  *(_QWORD *)(v4 + 176) = v9;
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(v3 + 96);
  v10 = *(_QWORD *)(v3 + 120);
  *(_QWORD *)(v4 + 200) = *(_QWORD *)(v3 + 112);
  *(_QWORD *)(v4 + 208) = v10;
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(v3 + 128);
  v11 = *(_QWORD *)(v3 + 152);
  *(_QWORD *)(v4 + 232) = *(_QWORD *)(v3 + 144);
  *(_QWORD *)(v4 + 240) = v11;
  return swift_task_switch();
}

uint64_t sub_224EF4198()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = v0[20];
  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v1);
  v2 = v0[24];
  if (v2)
  {
    v3 = v0[23];
    sub_224DDEA0C(0, &qword_2557E3108, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v4 = type metadata accessor for Reference();
    v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
    v6 = (v5 + 32) & ~v5;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_224F6D8B0;
    v8 = (uint64_t *)(v7 + v6);
    v9 = (char *)v8 + *(int *)(v4 + 24);
    v10 = type metadata accessor for Identifier();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    *v8 = v3;
    v8[1] = v2;
    v8[2] = 0;
    v8[3] = 0;
  }
  else
  {
    v7 = 0;
  }
  v0[31] = v7;
  v11 = v0[17];
  sub_224DDEA0C(0, &qword_2557E15B0, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v12 = (int *)type metadata accessor for Coding();
  v13 = *(unsigned __int8 *)(*((_QWORD *)v12 - 1) + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject();
  v0[32] = v15;
  *(_OWORD *)(v15 + 16) = xmmword_224F6D8B0;
  v16 = v15 + v14;
  swift_bridgeObjectRetain();
  sub_224F675B0();
  sub_224DFAC88(v11, v16, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  *(_OWORD *)(v16 + v12[5]) = xmmword_224F730D0;
  *(_OWORD *)(v16 + v12[6]) = xmmword_224F730E0;
  v17 = (_QWORD *)(v16 + v12[7]);
  *v17 = 0;
  v17[1] = 0;
  v18 = (_QWORD *)swift_task_alloc();
  v0[33] = (uint64_t)v18;
  *v18 = v0;
  v18[1] = sub_224EF4438;
  return sub_224ED44CC((uint64_t)(v0 + 2), 2, v0[27], v0[28], 0, 0, v0[11]);
}

uint64_t sub_224EF4438()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224EF448C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 272) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 288) = *(_QWORD *)(v0 + 32);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 296) = v2;
  *v2 = v0;
  v2[1] = sub_224EF450C;
  return sub_224ED44CC(v0 + 40, 3, *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 200), v1, *(_QWORD *)(v0 + 88));
}

uint64_t sub_224EF450C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224EF4560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v1 = v0;
  v28 = *(_QWORD *)(v0 + 288);
  v27 = *(_OWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 256);
  v26 = *(_QWORD *)(v1 + 248);
  v3 = *(_QWORD *)(v1 + 160);
  v22 = *(_QWORD *)(v1 + 152);
  v23 = v3;
  v4 = *(_QWORD *)(v1 + 144);
  v6 = *(_QWORD *)(v1 + 120);
  v5 = *(_QWORD *)(v1 + 128);
  v7 = *(_QWORD *)(v1 + 104);
  v8 = *(_QWORD *)(v1 + 112);
  v29 = *(_QWORD *)(v1 + 96);
  v9 = *(_QWORD *)(v1 + 72);
  v25 = *(_OWORD *)(v1 + 40);
  v24 = *(_QWORD *)(v1 + 56);
  sub_224EF4A98(0, &qword_2557E3100);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_224F6D8B0;
  *(_OWORD *)(v10 + 32) = xmmword_224F730E0;
  *(_QWORD *)(v10 + 48) = v2;
  sub_224DDB408(v3, v5, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v11(v5, 0, 1, v4);
  v11(v6, 1, 1, v4);
  v12 = type metadata accessor for Period();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 1, 1, v12);
  v11(v8, 1, 1, v4);
  v13 = type metadata accessor for Quantity();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v29, 1, 1, v13);
  v14 = (int *)type metadata accessor for ModelsR4.Observation(0);
  *(_QWORD *)(v1 + 64) = v14;
  sub_224EF4A60();
  v15 = sub_224F67BC8();
  v17 = v16;
  sub_224DDEAA0(v23, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  *(_QWORD *)v9 = v15;
  *(_QWORD *)(v9 + 8) = v17;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_OWORD *)(v9 + 32) = xmmword_224F730F0;
  *(_QWORD *)(v9 + 48) = 0xE500000000000000;
  *(_QWORD *)(v9 + 56) = v10;
  *(_OWORD *)(v9 + 64) = v25;
  *(_QWORD *)(v9 + 80) = v24;
  sub_224DFAC88(v5, v9 + v14[10], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DFAC88(v6, v9 + v14[11], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DFAC88(v7, v9 + v14[12], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_224DFAC88(v8, v9 + v14[13], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  *(_QWORD *)(v9 + v14[14]) = 0;
  *(_QWORD *)(v9 + v14[15]) = v26;
  v18 = (_QWORD *)(v9 + v14[16]);
  *v18 = 0;
  v18[1] = 0;
  v19 = v9 + v14[17];
  *(_OWORD *)v19 = v27;
  *(_QWORD *)(v19 + 16) = v28;
  sub_224DFAC88(v29, v9 + v14[18], &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
  *(_QWORD *)(v9 + v14[19]) = 0;
  v20 = (_QWORD *)(v9 + v14[20]);
  *v20 = 0;
  v20[1] = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_224EF488C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModelsR4.Observation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_224EF48D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E0A40;
  if (!qword_2557E0A40)
  {
    v1 = type metadata accessor for ModelsR4.Observation(255);
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Observation, v1);
    atomic_store(result, (unint64_t *)&qword_2557E0A40);
  }
  return result;
}

id sub_224EF4918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;

  v10 = v9;
  v13 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v14 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v15 = (void *)sub_224F67640();
  v16 = sub_224F675D4();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(a8, 1, v16) != 1)
  {
    v18 = (void *)sub_224F67580();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a8, v16);
  }
  v19 = (void *)sub_224F67718();
  v20 = objc_msgSend(v10, sel_initWithResourceType_identifier_FHIRVersion_data_sourceURL_lastUpdatedDate_, v13, v14, a5, v15, v18, v19);

  v21 = sub_224F67760();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a9, v21);
  return v20;
}

unint64_t sub_224EF4A60()
{
  unint64_t result;

  result = qword_2557E0620;
  if (!qword_2557E0620)
  {
    type metadata accessor for ModelsR4.Observation(255);
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E0620);
  }
  return result;
}

void sub_224EF4A98(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_224F683A8();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t ContactPoint.system.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ContactPoint.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ContactPoint.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (*(_QWORD *)(v0 + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v1)
    {
LABEL_3:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224F67C34();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_224F68528();
    if (v1)
      goto LABEL_3;
  }
  return sub_224F68528();
}

uint64_t sub_224EF4BFC()
{
  _BYTE *v0;

  if (*v0)
    return 0x65756C6176;
  else
    return 0x6D6574737973;
}

uint64_t sub_224EF4C30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224EF5794(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224EF4C54()
{
  sub_224EF52B0();
  return sub_224F685B8();
}

uint64_t sub_224EF4C7C()
{
  sub_224EF52B0();
  return sub_224F685C4();
}

uint64_t ContactPoint.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  char v12;
  char v13;

  sub_224EF52F4(0, &qword_2557E3120, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v11 - v6;
  v8 = *(_QWORD *)(v1 + 16);
  v11[1] = *(_QWORD *)(v1 + 24);
  v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224EF52B0();
  sub_224F68594();
  v13 = 0;
  v9 = v11[3];
  sub_224F68300();
  if (!v9)
  {
    v12 = 1;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ContactPoint.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 24);
  sub_224F68510();
  if (!v1)
  {
    sub_224F68528();
    if (v2)
      goto LABEL_3;
LABEL_5:
    sub_224F68528();
    return sub_224F6854C();
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_5;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t ContactPoint.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;

  sub_224EF52F4(0, &qword_2557E3130, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v19 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224EF52B0();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v21 = 0;
  v10 = sub_224F68264();
  v12 = v11;
  v20 = 1;
  swift_bridgeObjectRetain();
  v13 = sub_224F68264();
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17 = v13;
  v16(v9, v6);
  *a2 = v10;
  a2[1] = v12;
  a2[2] = v17;
  a2[3] = v15;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224EF5048@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ContactPoint.init(from:)(a1, a2);
}

uint64_t sub_224EF505C(_QWORD *a1)
{
  return ContactPoint.encode(to:)(a1);
}

uint64_t sub_224EF5074()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (*(_QWORD *)(v0 + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v1)
    {
LABEL_3:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224F67C34();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_224F68528();
    if (v1)
      goto LABEL_3;
  }
  return sub_224F68528();
}

uint64_t sub_224EF5138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 24);
  sub_224F68510();
  if (!v1)
  {
    sub_224F68528();
    if (v2)
      goto LABEL_3;
LABEL_5:
    sub_224F68528();
    return sub_224F6854C();
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_5;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t _s23HealthRecordsExtraction12ContactPointV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  if (!v3)
  {
    if (v6)
      return 0;
    goto LABEL_10;
  }
  if (!v6)
    return 0;
  v9 = *a1 == *a2 && v3 == v6;
  if (v9 || (v10 = sub_224F683CC(), result = 0, (v10 & 1) != 0))
  {
LABEL_10:
    if (v5)
    {
      if (v8 && (v4 == v7 && v5 == v8 || (sub_224F683CC() & 1) != 0))
        return 1;
    }
    else if (!v8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_224EF52B0()
{
  unint64_t result;

  result = qword_2557E3128;
  if (!qword_2557E3128)
  {
    result = MEMORY[0x22768ED24](&unk_224F732D8, &type metadata for ContactPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3128);
  }
  return result;
}

void sub_224EF52F4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224EF52B0();
    v7 = a3(a1, &type metadata for ContactPoint.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_224EF5350(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_224DE6A18();
  a1[2] = sub_224DFB8D8();
  result = sub_224EF5384();
  a1[3] = result;
  return result;
}

unint64_t sub_224EF5384()
{
  unint64_t result;

  result = qword_2557E3138;
  if (!qword_2557E3138)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ContactPoint, &type metadata for ContactPoint);
    atomic_store(result, (unint64_t *)&qword_2557E3138);
  }
  return result;
}

unint64_t sub_224EF53CC()
{
  unint64_t result;

  result = qword_2557E3140;
  if (!qword_2557E3140)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ContactPoint, &type metadata for ContactPoint);
    atomic_store(result, (unint64_t *)&qword_2557E3140);
  }
  return result;
}

uint64_t destroy for ContactPoint()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ContactPoint(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ContactPoint(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for ContactPoint(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactPoint(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactPoint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactPoint()
{
  return &type metadata for ContactPoint;
}

uint64_t storeEnumTagSinglePayload for ContactPoint.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_224EF563C + 4 * byte_224F73115[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_224EF5670 + 4 * byte_224F73110[v4]))();
}

uint64_t sub_224EF5670(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EF5678(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224EF5680);
  return result;
}

uint64_t sub_224EF568C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224EF5694);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_224EF5698(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224EF56A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContactPoint.CodingKeys()
{
  return &type metadata for ContactPoint.CodingKeys;
}

unint64_t sub_224EF56C0()
{
  unint64_t result;

  result = qword_2557E3148;
  if (!qword_2557E3148)
  {
    result = MEMORY[0x22768ED24](&unk_224F732B0, &type metadata for ContactPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3148);
  }
  return result;
}

unint64_t sub_224EF5708()
{
  unint64_t result;

  result = qword_2557E3150;
  if (!qword_2557E3150)
  {
    result = MEMORY[0x22768ED24](&unk_224F73220, &type metadata for ContactPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3150);
  }
  return result;
}

unint64_t sub_224EF5750()
{
  unint64_t result;

  result = qword_2557E3158;
  if (!qword_2557E3158)
  {
    result = MEMORY[0x22768ED24](&unk_224F73248, &type metadata for ContactPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3158);
  }
  return result;
}

uint64_t sub_224EF5794(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D6574737973 && a2 == 0xE600000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void TimeZone.init(_:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - v4;
  v6 = objc_allocWithZone(MEMORY[0x24BDD17A8]);
  v7 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithString_, v7);

  sub_224EF5BD0(v8);
  if (v1)
  {

  }
  else
  {
    swift_bridgeObjectRelease();
    sub_224F67844();
    v9 = sub_224F67874();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
    {
      __break(1u);
    }
    else
    {

      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v5, v9);
    }
  }
}

uint64_t static TimeZone.hs_parseComponents(from:expectAtEnd:)(void *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_224EF5BD0(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t TimeZone.fhirDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void (*v5)(char *, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v0 = sub_224F67760();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F67754();
  v4 = sub_224F67838();
  v5 = *(void (**)(char *, uint64_t))(v1 + 8);
  v5(v3, v0);
  if (!v4)
    return 90;
  sub_224F67754();
  v6 = sub_224F67838();
  v5(v3, v0);
  sub_224F67754();
  v7 = sub_224F67838();
  result = ((uint64_t (*)(char *, uint64_t))v5)(v3, v0);
  if ((v7 & 0x8000000000000000) == 0 || (v9 = __OFSUB__(0, v7), v7 = -v7, !v9))
  {
    if (!__OFSUB__(v7, 3600 * (v7 / 3600)))
    {
      v10 = 45;
      if (v6 > 0)
        v10 = 43;
      v15[0] = v10;
      v15[1] = 0xE100000000000000;
      sub_224F67C94();
      sub_224DDEA0C(0, &qword_2557E1820, (uint64_t (*)(uint64_t))sub_224E617D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_224F6DF20;
      v12 = MEMORY[0x24BEE1768];
      v13 = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v11 + 56) = MEMORY[0x24BEE1768];
      *(_QWORD *)(v11 + 64) = v13;
      *(_QWORD *)(v11 + 32) = v7 / 3600;
      *(_QWORD *)(v11 + 96) = v12;
      *(_QWORD *)(v11 + 104) = v13;
      *(_QWORD *)(v11 + 72) = v7 % 3600 / 60;
      v14 = sub_224F67BA4();
      swift_bridgeObjectRelease();
      return v14;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_224EF5BD0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char **v60;
  uint64_t result;
  char *v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  char v76;
  char v77;
  id v78;
  char *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(char *, uint64_t);
  uint64_t v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 *v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 *v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;

  v2 = sub_224F6734C();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v179 = (char *)&v167 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v182 = (char *)&v167 - v6;
  sub_224DDEA0C(0, &qword_2557E1848, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v181 = (char *)&v167 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v180 = (uint64_t)&v167 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v167 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v176 = (char *)&v167 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v175 = (char *)&v167 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v174 = (char *)&v167 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v167 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v172 = (char *)&v167 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v171 = (char *)&v167 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v170 = (char *)&v167 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v167 - v32;
  MEMORY[0x24BDAC7A8](v31);
  v35 = (char *)&v167 - v34;
  v36 = objc_msgSend(a1, sel_charactersToBeSkipped);
  v173 = v24;
  if (v36)
  {
    v37 = v36;
    sub_224F67328();

    v38 = 0;
  }
  else
  {
    v38 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v33, v38, 1, v2);
  sub_224E61A20((uint64_t)v33, (uint64_t)v35);
  objc_msgSend(a1, sel_setCharactersToBeSkipped_, 0);
  v39 = (uint64_t)v182;
  sub_224F672F8();
  v40 = sub_224F67FC4();
  v41 = sub_224F67FD0();
  if (!v42)
  {
    v50 = objc_msgSend(a1, sel_string);
    v51 = sub_224F67B80();
    v53 = v52;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v54 = v51;
    *(_QWORD *)(v54 + 8) = v53;
    *(_QWORD *)(v54 + 16) = v40;
    *(_BYTE *)(v54 + 24) = 7;
    swift_willThrow();
    v55 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v55(v39, v2);
    v56 = (uint64_t)v181;
    sub_224E61AC0((uint64_t)v35, (uint64_t)v181);
    v57 = (uint64_t)v35;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v56, 1, v2) != 1)
    {
      v58 = (void *)sub_224F67310();
      v59 = v56;
LABEL_16:
      v55(v59, v2);
      goto LABEL_17;
    }
LABEL_12:
    v58 = 0;
LABEL_17:
    v60 = &selRef_preprocessDataInSource_options_error_;
LABEL_18:
    objc_msgSend(a1, v60[196], v58);

    sub_224E61B1C(v57);
    return v39;
  }
  v43 = v42;
  v177 = v3;
  v178 = v2;
  v181 = v35;
  v44 = v41;
  if (v41 == 90 && v42 == 0xE100000000000000 || (sub_224F683CC() & 1) != 0)
  {
    v46 = v177;
    v45 = v178;
    v47 = *(void (**)(char *, uint64_t))(v177 + 8);
    v47(v182, v178);
    v39 = 0;
LABEL_9:
    v48 = v180;
    sub_224E61AC0((uint64_t)v181, v180);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v48, 1, v45) == 1)
    {
      v49 = 0;
    }
    else
    {
      v49 = (void *)sub_224F67310();
      v47((char *)v48, v45);
    }
    objc_msgSend(a1, sel_setCharactersToBeSkipped_, v49);

    sub_224E61B1C((uint64_t)v181);
    return v39;
  }
  v169 = v43;
  v62 = v179;
  sub_224F67304();
  v63 = a1;
  v39 = sub_224F67FC4();
  v64 = sub_224F67FD0();
  v66 = v182;
  if (!v65)
  {
    swift_bridgeObjectRelease();
    v78 = objc_msgSend(a1, sel_string);
    v79 = v62;
    v80 = v78;
    v81 = sub_224F67B80();
    v83 = v82;

    sub_224E61A7C();
    v84 = swift_allocError();
    *(_QWORD *)v85 = v81;
    *(_QWORD *)(v85 + 8) = v83;
    *(_QWORD *)(v85 + 16) = v39;
    *(_BYTE *)(v85 + 24) = 8;
    v39 = v84;
    swift_willThrow();
    v86 = v66;
    v88 = v177;
    v87 = v178;
    v89 = *(void (**)(char *, uint64_t))(v177 + 8);
    v89(v79, v178);
    v89(v86, v87);
    v57 = (uint64_t)v181;
    sub_224E61AC0((uint64_t)v181, (uint64_t)v15);
    a1 = v63;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v15, 1, v87) == 1)
    {
      v58 = 0;
    }
    else
    {
      v58 = (void *)sub_224F67310();
      v89(v15, v87);
    }
    v60 = &selRef_preprocessDataInSource_options_error_;
    goto LABEL_18;
  }
  v67 = v65;
  v168 = v39;
  v68 = v64;
  result = sub_224F67C40();
  if (result != 2)
  {
    swift_bridgeObjectRelease();
    v90 = objc_msgSend(a1, sel_string);
    v91 = sub_224F67B80();
    v93 = v92;

    v94 = objc_msgSend(a1, sel_string);
    sub_224F67B80();
    v39 = (uint64_t)v66;

    sub_224F67C40();
    swift_bridgeObjectRelease();
    v95 = sub_224F67C70();
    swift_bridgeObjectRelease();
    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v96 = v91;
    *(_QWORD *)(v96 + 8) = v93;
    *(_QWORD *)(v96 + 16) = v95;
    *(_BYTE *)(v96 + 24) = 0;
    swift_willThrow();
    v97 = v177;
    v2 = v178;
    v55 = *(void (**)(uint64_t, uint64_t))(v177 + 8);
    v55((uint64_t)v179, v178);
    v55((uint64_t)v66, v2);
    v57 = (uint64_t)v181;
    v98 = (uint64_t)v181;
    v99 = (uint64_t)v176;
    goto LABEL_68;
  }
  v69 = HIBYTE(v67) & 0xF;
  v70 = v68 & 0xFFFFFFFFFFFFLL;
  if ((v67 & 0x2000000000000000) != 0)
    v71 = HIBYTE(v67) & 0xF;
  else
    v71 = v68 & 0xFFFFFFFFFFFFLL;
  v72 = v68;
  v73 = v179;
  if (!v71)
    goto LABEL_67;
  if ((v67 & 0x1000000000000000) == 0)
  {
    if ((v67 & 0x2000000000000000) == 0)
    {
      v74 = v72;
      if ((v72 & 0x1000000000000000) != 0)
        v75 = (unsigned __int8 *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v75 = (unsigned __int8 *)sub_224F6815C();
      v39 = (uint64_t)sub_224E57208(v75, v70, 10);
      v77 = v76 & 1;
      goto LABEL_31;
    }
    v183 = v72;
    v184 = v67 & 0xFFFFFFFFFFFFFFLL;
    if (v72 == 43)
    {
      if (v69)
      {
        if (v69 != 1 && (BYTE1(v72) - 48) <= 9u)
        {
          v39 = (BYTE1(v72) - 48);
          if (v69 == 2)
            goto LABEL_60;
          if ((BYTE2(v72) - 48) <= 9u)
          {
            v39 = 10 * (BYTE1(v72) - 48) + (BYTE2(v72) - 48);
            v100 = v69 - 3;
            if (v100)
            {
              v101 = (unsigned __int8 *)&v183 + 3;
              while (1)
              {
                v102 = *v101 - 48;
                if (v102 > 9)
                  goto LABEL_58;
                v103 = 10 * v39;
                if ((unsigned __int128)(v39 * (__int128)10) >> 64 != (10 * v39) >> 63)
                  goto LABEL_58;
                v39 = v103 + v102;
                if (__OFADD__(v103, v102))
                  goto LABEL_58;
                v77 = 0;
                ++v101;
                if (!--v100)
                  goto LABEL_61;
              }
            }
            goto LABEL_60;
          }
        }
        goto LABEL_58;
      }
    }
    else
    {
      if (v72 != 45)
      {
        if (v69 && (v72 - 48) <= 9u)
        {
          v39 = (v72 - 48);
          if (v69 == 1)
            goto LABEL_60;
          if ((BYTE1(v72) - 48) <= 9u)
          {
            v39 = 10 * (v72 - 48) + (BYTE1(v72) - 48);
            v152 = v69 - 2;
            if (v152)
            {
              v153 = (unsigned __int8 *)&v183 + 2;
              while (1)
              {
                v154 = *v153 - 48;
                if (v154 > 9)
                  goto LABEL_58;
                v155 = 10 * v39;
                if ((unsigned __int128)(v39 * (__int128)10) >> 64 != (10 * v39) >> 63)
                  goto LABEL_58;
                v39 = v155 + v154;
                if (__OFADD__(v155, v154))
                  goto LABEL_58;
                v77 = 0;
                ++v153;
                if (!--v152)
                  goto LABEL_61;
              }
            }
            goto LABEL_60;
          }
        }
LABEL_58:
        v39 = 0;
        v77 = 1;
        goto LABEL_61;
      }
      if (v69)
      {
        if (v69 != 1 && (BYTE1(v72) - 48) <= 9u)
        {
          if (v69 == 2)
          {
            v77 = 0;
            v39 = -(uint64_t)(BYTE1(v72) - 48);
            goto LABEL_61;
          }
          if ((BYTE2(v72) - 48) <= 9u)
          {
            v39 = -10 * (BYTE1(v72) - 48) - (BYTE2(v72) - 48);
            v156 = v69 - 3;
            if (v156)
            {
              v157 = (unsigned __int8 *)&v183 + 3;
              while (1)
              {
                v158 = *v157 - 48;
                if (v158 > 9)
                  goto LABEL_58;
                v159 = 10 * v39;
                if ((unsigned __int128)(v39 * (__int128)10) >> 64 != (10 * v39) >> 63)
                  goto LABEL_58;
                v39 = v159 - v158;
                if (__OFSUB__(v159, v158))
                  goto LABEL_58;
                v77 = 0;
                ++v157;
                if (!--v156)
                  goto LABEL_61;
              }
            }
LABEL_60:
            v77 = 0;
            goto LABEL_61;
          }
        }
        goto LABEL_58;
      }
      __break(1u);
    }
    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  swift_bridgeObjectRetain();
  v74 = v72;
  v39 = (uint64_t)sub_224E572B4(v72, v67, 10);
  v77 = v166;
  swift_bridgeObjectRelease();
LABEL_31:
  v72 = v74;
  v73 = v179;
LABEL_61:
  if ((v77 & 1) != 0 || v39 > 14)
  {
LABEL_67:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v120 = objc_msgSend(a1, sel_string);
    v121 = sub_224F67B80();
    v123 = v122;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v124 = v121;
    *(_QWORD *)(v124 + 8) = v123;
    *(_QWORD *)(v124 + 16) = v168;
    *(_BYTE *)(v124 + 24) = 8;
    swift_willThrow();
    v97 = v177;
    v55 = *(void (**)(uint64_t, uint64_t))(v177 + 8);
    v125 = v73;
    v2 = v178;
    v55((uint64_t)v125, v178);
    v55((uint64_t)v66, v2);
    v57 = (uint64_t)v181;
    v98 = (uint64_t)v181;
    v99 = (uint64_t)v175;
    goto LABEL_68;
  }
  v175 = (char *)v72;
  v176 = (char *)v67;
  v104 = sub_224F67FC4();
  sub_224F67FB8();
  v106 = v105;
  swift_bridgeObjectRelease();
  if (!v106)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v126 = objc_msgSend(a1, sel_string);
    v127 = sub_224F67B80();
    v129 = v128;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v130 = v127;
    *(_QWORD *)(v130 + 8) = v129;
    *(_QWORD *)(v130 + 16) = v104;
    *(_BYTE *)(v130 + 24) = 0;
    swift_willThrow();
    v132 = v177;
    v131 = v178;
    v133 = *(void (**)(char *, uint64_t))(v177 + 8);
    v133(v179, v178);
    v133(v182, v131);
    v57 = (uint64_t)v181;
    v134 = (uint64_t)v181;
    v39 = (uint64_t)v174;
LABEL_72:
    sub_224E61AC0(v134, v39);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v132 + 48))(v39, 1, v131) == 1)
    {
      v58 = 0;
    }
    else
    {
      v58 = (void *)sub_224F67310();
      v133((char *)v39, v131);
    }
    v60 = &selRef_preprocessDataInSource_options_error_;
    goto LABEL_18;
  }
  v107 = sub_224F67FC4();
  v108 = v179;
  v109 = sub_224F67FD0();
  if (!v110)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v135 = objc_msgSend(a1, sel_string);
    v136 = sub_224F67B80();
    v138 = v137;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v139 = v136;
    *(_QWORD *)(v139 + 8) = v138;
    *(_QWORD *)(v139 + 16) = v107;
    *(_BYTE *)(v139 + 24) = 9;
    swift_willThrow();
    v132 = v177;
    v131 = v178;
    v133 = *(void (**)(char *, uint64_t))(v177 + 8);
    v133(v108, v178);
    v133(v182, v131);
    v57 = (uint64_t)v181;
    v134 = (uint64_t)v181;
    v39 = (uint64_t)v173;
    goto LABEL_72;
  }
  v111 = v109;
  v112 = v110;
  v174 = (char *)v107;
  if (sub_224F67C40() > 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v113 = objc_msgSend(a1, sel_string);
    v114 = sub_224F67B80();
    v116 = v115;

    v117 = objc_msgSend(a1, sel_string);
    sub_224F67B80();

    sub_224F67C40();
    swift_bridgeObjectRelease();
    v118 = sub_224F67C70();
    swift_bridgeObjectRelease();
    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v119 = v114;
    *(_QWORD *)(v119 + 8) = v116;
    *(_QWORD *)(v119 + 16) = v118;
    *(_BYTE *)(v119 + 24) = 10;
    swift_willThrow();
    v97 = v177;
    v2 = v178;
    v55 = *(void (**)(uint64_t, uint64_t))(v177 + 8);
    v55((uint64_t)v179, v178);
    v55((uint64_t)v182, v2);
    v57 = (uint64_t)v181;
    v98 = (uint64_t)v181;
    v99 = (uint64_t)v172;
    goto LABEL_68;
  }
  if (sub_224F67C40() != 2
    || (swift_bridgeObjectRetain(), result = sub_224E55418(v111, v112), (v140 & 1) != 0)
    || (v141 = result, result > 59))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v147 = objc_msgSend(a1, sel_string);
    v148 = sub_224F67B80();
    v150 = v149;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v151 = v148;
    *(_QWORD *)(v151 + 8) = v150;
    *(_QWORD *)(v151 + 16) = v174;
    *(_BYTE *)(v151 + 24) = 9;
    swift_willThrow();
    v97 = v177;
    v2 = v178;
    v55 = *(void (**)(uint64_t, uint64_t))(v177 + 8);
    v55((uint64_t)v179, v178);
    v55((uint64_t)v182, v2);
    v57 = (uint64_t)v181;
    v98 = (uint64_t)v181;
    v99 = (uint64_t)v171;
LABEL_68:
    sub_224E61AC0(v98, v99);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v99, 1, v2) != 1)
    {
      v58 = (void *)sub_224F67310();
      v59 = v99;
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  if (v39 >= 14 && result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v142 = objc_msgSend(a1, sel_string);
    v143 = sub_224F67B80();
    v145 = v144;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v146 = v143;
    *(_QWORD *)(v146 + 8) = v145;
    *(_QWORD *)(v146 + 16) = v174;
    *(_BYTE *)(v146 + 24) = 9;
    swift_willThrow();
    v97 = v177;
    v2 = v178;
    v55 = *(void (**)(uint64_t, uint64_t))(v177 + 8);
    v55((uint64_t)v179, v178);
    v55((uint64_t)v182, v2);
    v57 = (uint64_t)v181;
    v98 = (uint64_t)v181;
    v99 = (uint64_t)v170;
    goto LABEL_68;
  }
  v160 = -1;
  v161 = v44;
  if (v44 != 45 || v169 != 0xE100000000000000)
  {
    result = sub_224F683CC();
    v161 = v44;
    if ((result & 1) == 0)
      v160 = 1;
  }
  v162 = 3600 * v39;
  if ((unsigned __int128)(v39 * (__int128)3600) >> 64 != (3600 * v39) >> 63)
    goto LABEL_112;
  v163 = 60 * v141;
  result = (uint64_t)v175;
  if ((unsigned __int128)(v141 * (__int128)60) >> 64 != (60 * v141) >> 63)
  {
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  v164 = __OFADD__(v162, v163);
  v165 = v162 + v163;
  if (v164)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  v39 = v160 * v165;
  if ((unsigned __int128)(v160 * (__int128)v165) >> 64 == (v160 * v165) >> 63)
  {
    v183 = v161;
    v184 = v169;
    sub_224F67C94();
    swift_bridgeObjectRelease();
    sub_224F67C94();
    sub_224F67C94();
    swift_bridgeObjectRelease();
    v46 = v177;
    v45 = v178;
    v47 = *(void (**)(char *, uint64_t))(v177 + 8);
    v47(v179, v178);
    v47(v182, v45);
    goto LABEL_9;
  }
LABEL_115:
  __break(1u);
  return result;
}

uint64_t HealthRecordAttachmentsIndexerHandler.index(request:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t sub_224EF6BF4()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_2557E01C8 != -1)
    swift_once();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_224EF6C70;
  return sub_224F57980(*(_QWORD *)(v0 + 16));
}

uint64_t sub_224EF6C70(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_224EF6DF0(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  id v7;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  v7 = a3;
  return swift_task_switch();
}

uint64_t sub_224EF6E44()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_2557E01C8 != -1)
    swift_once();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_224EF6EC0;
  return sub_224F57980(*(_QWORD *)(v0 + 16));
}

uint64_t sub_224EF6EC0(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void (**v6)(_QWORD, _QWORD, _QWORD);
  void *v7;

  v4 = *v2;
  *(_QWORD *)(v4 + 48) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  v7 = *(void **)(v4 + 24);
  v6 = *(void (***)(_QWORD, _QWORD, _QWORD))(v4 + 32);

  ((void (**)(_QWORD, void *, _QWORD))v6)[2](v6, a1, 0);
  _Block_release(v6);

  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_224EF6F6C()
{
  uint64_t v0;
  void *v1;
  void (**v2)(_QWORD, _QWORD, _QWORD);
  void *v3;
  void *v4;

  v1 = *(void **)(v0 + 48);
  v3 = *(void **)(v0 + 24);
  v2 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);

  v4 = (void *)sub_224F67538();
  ((void (**)(_QWORD, _QWORD, void *))v2)[2](v2, 0, v4);

  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t HealthRecordAttachmentsIndexerHandler.fetchSpotlightSearchResults(queryString:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  sub_224EF763C();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_224F67E20();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = a3;
  v12[7] = a4;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_224EF7270((uint64_t)v10, (uint64_t)&unk_2557E3178, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_224EF70C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch();
}

uint64_t sub_224EF70E0()
{
  uint64_t *v0;
  _QWORD *v1;

  if (qword_2557E01C8 != -1)
    swift_once();
  v1 = (_QWORD *)swift_task_alloc();
  v0[6] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_224EF715C;
  return sub_224F582E0(v0[2], v0[3]);
}

uint64_t sub_224EF715C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 64) = a1;
  return swift_task_switch();
}

uint64_t sub_224EF71D0()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 32))(*(_QWORD *)(v0 + 64), 0);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224EF7214()
{
  uint64_t v0;
  void *v1;
  void (*v2)(_QWORD, void *);
  id v3;

  v1 = *(void **)(v0 + 56);
  v2 = *(void (**)(_QWORD, void *))(v0 + 32);
  v3 = v1;
  v2(0, v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224EF7270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_224F67E20();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_224F67E14();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_224EF7A5C(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_224F67DCC();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

void sub_224EF74F4(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id v7;

  v5 = a1;
  if (a1)
  {
    sub_224EF7850();
    v5 = (void *)sub_224F67D60();
  }
  if (a2)
    v6 = sub_224F67538();
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v5);

}

id HealthRecordAttachmentsIndexerHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id HealthRecordAttachmentsIndexerHandler.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id HealthRecordAttachmentsIndexerHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_224EF763C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E3168)
  {
    sub_224F67E20();
    v0 = sub_224F67FF4();
    if (!v1)
      atomic_store(v0, &qword_2557E3168);
  }
}

uint64_t sub_224EF7694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_224EF7B90;
  *(_QWORD *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 16) = v2;
  return swift_task_switch();
}

uint64_t type metadata accessor for HealthRecordAttachmentsIndexerHandler()
{
  return objc_opt_self();
}

uint64_t sub_224EF772C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_224EF7750(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_224EF74F4(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t objectdestroyTm()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_224EF7790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_224EF7808;
  *(_QWORD *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 16) = v2;
  return swift_task_switch();
}

uint64_t sub_224EF7808()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_224EF7850()
{
  unint64_t result;

  result = qword_2557E31B0;
  if (!qword_2557E31B0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E31B0);
  }
  return result;
}

uint64_t sub_224EF788C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_224EF78C0()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_224EF7B90;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_2557E31B8 + dword_2557E31B8))(v2, v3, v4);
}

uint64_t sub_224EF7930()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_224EF7B90;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2557E4228 + dword_2557E4228))(v2, v3, v4);
}

uint64_t objectdestroy_17Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_224EF79D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_224EF7B90;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_2557E4230 + dword_2557E4230))(a1, v4, v5, v6);
}

uint64_t sub_224EF7A5C(uint64_t a1)
{
  uint64_t v2;

  sub_224EF763C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_224EF7A98(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_224E6CEBC;
  return v6(a1);
}

uint64_t sub_224EF7AFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_224EF7B20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_224EF7808;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2557E31D8 + dword_2557E31D8))(a1, v4);
}

uint64_t sub_224EF7B94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

id sub_224EF7BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 24);
  v8 = *(_OWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 80);
  v2 = sub_224EEF95C();
  *(_QWORD *)(v0 + 32) = v2;
  sub_224E5451C(0, &qword_2557E2958);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestResultTypeForIdentifier_, *MEMORY[0x24BDD2BB0], v8, v9);
  *(_QWORD *)(v0 + 40) = result;
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(v0 + 16);
    v6 = v5 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {

      return (id)(*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
    }
    else
    {
      *(_QWORD *)(v0 + 48) = *(_QWORD *)(v6 + *(int *)(type metadata accessor for ExtractionContext() + 44));
      swift_retain();
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 56) = v7;
      *v7 = v0;
      v7[1] = sub_224E735A0;
      return (id)sub_224ED0FBC(v2, (uint64_t)v4);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_224EF7CDC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[13] = a1;
  v2[14] = v1;
  sub_224E63218(0, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  v2[15] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[16] = swift_task_alloc();
  v2[17] = *(_QWORD *)(type metadata accessor for Annotation() - 8);
  v2[18] = swift_task_alloc();
  v2[19] = *(_QWORD *)(type metadata accessor for ReferenceRange() - 8);
  v2[20] = swift_task_alloc();
  sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v2[21] = swift_task_alloc();
  v3 = type metadata accessor for Quantity();
  v2[22] = v3;
  v2[23] = *(_QWORD *)(v3 - 8);
  v2[24] = swift_task_alloc();
  sub_224F6743C();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  sub_224E63218(0, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = type metadata accessor for ModelsR4.Observation(0);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  sub_224E63218(0, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  return swift_task_switch();
}

id sub_224EF7F48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  void *v53;
  id v54;
  id v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id result;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v1 = v0[40];
  v2 = v0[34];
  v3 = v0[14];
  v4 = v3 + *(int *)(v0[30] + 40);
  sub_224E75F34(v4, v1, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB408(v3, v2, type metadata accessor for ModelsR4.Observation);
  v5 = type metadata accessor for FHIRDateTime();
  v0[42] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  v0[43] = v7;
  if (v7(v1, 1, v5) == 1)
  {
    v8 = v0[29];
    sub_224E75F34(v0[34] + *(int *)(v0[30] + 48), v8, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
    v9 = type metadata accessor for Period();
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
    v11 = v0[39];
    v12 = v0[29];
    if (v10 == 1)
    {
      sub_224E7601C(v0[29], &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v11, 1, 1, v5);
    }
    else
    {
      sub_224E75F34(v0[29], v0[39], &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEAA0(v12, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    }
    v15 = v0[39];
    sub_224DDEADC(v0[34], v0[33], type metadata accessor for ModelsR4.Observation);
    v16 = v7(v15, 1, v5);
    v17 = v0[41];
    v18 = v0[39];
    v19 = v0[33];
    if (v16 == 1)
    {
      sub_224E75F34(v19 + *(int *)(v0[30] + 44), v0[41], &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEAA0(v19, type metadata accessor for ModelsR4.Observation);
      sub_224E7601C(v18, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    }
    else
    {
      sub_224DDEAA0(v0[33], type metadata accessor for ModelsR4.Observation);
      sub_224DDEADC(v18, v17, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
    }
    v20 = v0[41];
    sub_224E7601C(v0[40], &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v7(v20, 1, v5) == 1)
    {
      sub_224E7601C(v0[41], &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      v21 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v14 = v0[40];
    v13 = v0[41];
    sub_224DDEAA0(v0[34], type metadata accessor for ModelsR4.Observation);
    sub_224DDEADC(v14, v13, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v5);
  }
  v22 = v0[41];
  if (*(_QWORD *)(v22 + 56) == 1)
  {
    if ((*(_BYTE *)(v22 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v22 + 17))
        v23 = 3;
      else
        v23 = 2;
    }
    else
    {
      v23 = 1;
    }
  }
  else
  {
    v23 = 0;
  }
  v24 = v0[27];
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v25 = (uint64_t *)(v22 + *(int *)(v5 + 32));
  v26 = *v25;
  v27 = v25[1];
  swift_bridgeObjectRetain();
  v21 = sub_224F00474(v24, v26, v27, v23);
  sub_224DDEAA0(v0[41], (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_19:
  v0[44] = v21;
  v28 = v0[37];
  v29 = v0[32];
  v30 = v0[14];
  sub_224E75F34(v4, v28, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDB408(v30, v29, type metadata accessor for ModelsR4.Observation);
  if (v7(v28, 1, v5) == 1)
  {
    v31 = v0[28];
    sub_224E75F34(v0[32] + *(int *)(v0[30] + 48), v31, &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
    v32 = type metadata accessor for Period();
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v31, 1, v32);
    v34 = v0[36];
    v35 = v0[28];
    if (v33 == 1)
    {
      sub_224E7601C(v0[28], &qword_2557E04B8, (void (*)(uint64_t))type metadata accessor for Period);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v34, 1, 1, v5);
    }
    else
    {
      sub_224E75F34(v35 + *(int *)(v32 + 20), v0[36], &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEAA0(v35, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    }
    v38 = v0[36];
    sub_224DDEADC(v0[32], v0[31], type metadata accessor for ModelsR4.Observation);
    v39 = v7(v38, 1, v5);
    v40 = v0[38];
    v41 = v0[36];
    v42 = v0[31];
    if (v39 == 1)
    {
      sub_224E75F34(v42 + *(int *)(v0[30] + 44), v0[38], &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEAA0(v42, type metadata accessor for ModelsR4.Observation);
      sub_224E7601C(v41, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    }
    else
    {
      sub_224DDEAA0(v0[31], type metadata accessor for ModelsR4.Observation);
      sub_224DDEADC(v41, v40, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v40, 0, 1, v5);
    }
    v43 = v0[38];
    sub_224E7601C(v0[37], &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v7(v43, 1, v5) == 1)
    {
      sub_224E7601C(v0[38], &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      v44 = 0;
      goto LABEL_37;
    }
  }
  else
  {
    v37 = v0[37];
    v36 = v0[38];
    sub_224DDEAA0(v0[32], type metadata accessor for ModelsR4.Observation);
    sub_224DDEADC(v37, v36, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v36, 0, 1, v5);
  }
  v45 = v0[38];
  if (*(_QWORD *)(v45 + 56) == 1)
  {
    if ((*(_BYTE *)(v45 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v45 + 17))
        v46 = 3;
      else
        v46 = 2;
    }
    else
    {
      v46 = 1;
    }
  }
  else
  {
    v46 = 0;
  }
  v47 = v0[26];
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v48 = (uint64_t *)(v45 + *(int *)(v5 + 32));
  v50 = *v48;
  v49 = v48[1];
  swift_bridgeObjectRetain();
  v44 = sub_224F00474(v47, v50, v49, v46);
  sub_224DDEAA0(v0[38], (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_37:
  v0[45] = 0;
  v0[46] = v44;
  v51 = (int *)v0[30];
  v52 = v0[14];
  if (*(_QWORD *)(v52 + v51[16] + 8))
  {
    swift_bridgeObjectRetain();
    v53 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v54 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithString_, v53);

    if (v54)
      goto LABEL_39;
LABEL_46:
    v55 = 0;
    goto LABEL_47;
  }
  v56 = (_QWORD *)(v52 + v51[17]);
  v57 = v56[1];
  if (v57 != 1)
  {
    v61 = v56[2];
    v0[9] = *v56;
    v0[10] = v57;
    v0[11] = v61;
    sub_224E5451C(0, &qword_2557E2958);
    result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestResultTypeForIdentifier_, *MEMORY[0x24BDD2BB0]);
    v0[47] = result;
    if (result)
    {
      v63 = (uint64_t)result;
      v64 = (_QWORD *)swift_task_alloc();
      v0[48] = v64;
      *v64 = v0;
      v64[1] = sub_224EF8D3C;
      return (id)sub_224EF0270(v0[13], v63);
    }
    else
    {
      __break(1u);
    }
    return result;
  }
  v58 = v0[22];
  v59 = v0[23];
  v60 = v0[21];
  sub_224E75F34(v52 + v51[18], v60, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v60, 1, v58) == 1)
  {
    sub_224E7601C(v0[21], &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    v55 = 0;
    v54 = 0;
    goto LABEL_47;
  }
  sub_224DDEADC(v0[21], v0[24], (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  v65 = Quantity.asCodedQuantity()();
  v66 = v0[24];
  v67 = v65;
  v54 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueWithCodedQuantity_, v65);

  sub_224DDEAA0(v66, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  if (!v54)
    goto LABEL_46;
LABEL_39:
  v55 = objc_msgSend((id)objc_opt_self(), sel_inspectableValueCollectionSingleWithValue_, v54);
LABEL_47:
  v0[51] = v55;
  v0[52] = v54;
  v0[50] = 0;
  v68 = (_QWORD *)v0[14];
  v69 = *(_QWORD *)((char *)v68 + *(int *)(v0[30] + 76));
  if (v69)
  {
    v70 = MEMORY[0x24BEE4AF8];
    v107 = MEMORY[0x24BEE4AF8];
    v71 = *(_QWORD *)(v69 + 16);
    if (v71)
    {
      v72 = v0[19];
      v73 = v69 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
      v74 = *(_QWORD *)(v72 + 72);
      swift_bridgeObjectRetain();
      do
      {
        v75 = v0[20];
        sub_224DDB408(v73, v75, (uint64_t (*)(_QWORD))type metadata accessor for ReferenceRange);
        v76 = ReferenceRange.asReferenceRange()();
        v77 = sub_224DDEAA0(v75, (uint64_t (*)(_QWORD))type metadata accessor for ReferenceRange);
        if (v76)
        {
          MEMORY[0x22768DE24](v77);
          if (*(_QWORD *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_224F67D90();
          sub_224F67D9C();
          sub_224F67D84();
        }
        v73 += v74;
        --v71;
      }
      while (v71);
      swift_bridgeObjectRelease();
      v70 = v107;
      v68 = (_QWORD *)v0[14];
    }
  }
  else
  {
    v70 = 0;
  }
  v0[53] = v70;
  v78 = objc_msgSend((id)objc_opt_self(), sel_FHIRObservationStatus);
  v0[54] = v78;
  v80 = v68[5];
  v79 = v68[6];
  v0[55] = v79;
  v81 = sub_224F67B80();
  v0[56] = v82;
  v0[2] = v78;
  v0[3] = v80;
  v0[4] = v79;
  v0[5] = v81;
  v0[7] = 0;
  v0[8] = 0;
  v0[6] = v82;
  v83 = v68[7];
  swift_bridgeObjectRetain();
  if (v83)
    v84 = Array<A>.asCodingCollectionArray()(v83);
  else
    v84 = MEMORY[0x24BEE4AF8];
  v0[57] = v84;
  v85 = v0[30];
  v86 = v0[14];
  v87 = *(_QWORD *)(v86 + *(int *)(v85 + 56));
  if (v87)
  {
    v88 = *(_QWORD *)(v87 + 16);
    v89 = MEMORY[0x24BEE4AF8];
    if (v88)
    {
      v90 = v0[17];
      v106 = v0[18];
      v108 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_224E53720(0, v88, 0);
      v91 = v87 + ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
      v105 = *(_QWORD *)(v90 + 72);
      v89 = v108;
      do
      {
        v92 = (uint64_t *)v0[18];
        sub_224DDB408(v91, (uint64_t)v92, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
        v93 = *v92;
        v94 = *(_QWORD *)(v106 + 8);
        swift_bridgeObjectRetain();
        sub_224DDEAA0((uint64_t)v92, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_224E53720(0, *(_QWORD *)(v89 + 16) + 1, 1);
          v89 = v108;
        }
        v96 = *(_QWORD *)(v89 + 16);
        v95 = *(_QWORD *)(v89 + 24);
        if (v96 >= v95 >> 1)
        {
          sub_224E53720(v95 > 1, v96 + 1, 1);
          v89 = v108;
        }
        *(_QWORD *)(v89 + 16) = v96 + 1;
        v97 = v89 + 16 * v96;
        *(_QWORD *)(v97 + 32) = v93;
        *(_QWORD *)(v97 + 40) = v94;
        v91 += v105;
        --v88;
      }
      while (v88);
      swift_bridgeObjectRelease();
    }
    v0[12] = v89;
    sub_224E68104();
    sub_224E79350();
    v98 = sub_224F67B44();
    v100 = v99;
    swift_bridgeObjectRelease();
    v85 = v0[30];
    v86 = v0[14];
  }
  else
  {
    v98 = 0;
    v100 = 0;
  }
  v0[58] = v98;
  v0[59] = v100;
  sub_224DDB408(v0[13], v0[16], (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v101 = v0[15];
  if (*(_QWORD *)(v86 + *(int *)(v85 + 80) + 8))
  {
    swift_bridgeObjectRetain();
    sub_224F677B4();
    v102 = sub_224F677D8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 56))(v101, 0, 1, v102);
  }
  else
  {
    v103 = sub_224F677D8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 56))(v101, 1, 1, v103);
  }
  v104 = swift_task_alloc();
  v0[60] = v104;
  *(_QWORD *)v104 = v0;
  *(_QWORD *)(v104 + 8) = sub_224EF91D4;
  *(_OWORD *)(v104 + 16) = *(_OWORD *)(v0 + 13);
  return (id)swift_task_switch();
}

uint64_t sub_224EF8D3C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 392) = a1;
  swift_task_dealloc();

  return swift_task_switch();
}

uint64_t sub_224EF8D9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = v0[49];
  v2 = v0[45];
  v0[51] = objc_msgSend((id)objc_opt_self(), sel_inspectableValueCollectionSingleWithValue_, v1);
  v0[52] = v1;
  v0[50] = v2;
  v3 = (_QWORD *)v0[14];
  v4 = *(_QWORD *)((char *)v3 + *(int *)(v0[30] + 76));
  if (v4)
  {
    v5 = MEMORY[0x24BEE4AF8];
    v43 = MEMORY[0x24BEE4AF8];
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      v7 = v0[19];
      v8 = v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      v9 = *(_QWORD *)(v7 + 72);
      swift_bridgeObjectRetain();
      do
      {
        v10 = v0[20];
        sub_224DDB408(v8, v10, (uint64_t (*)(_QWORD))type metadata accessor for ReferenceRange);
        v11 = ReferenceRange.asReferenceRange()();
        v12 = sub_224DDEAA0(v10, (uint64_t (*)(_QWORD))type metadata accessor for ReferenceRange);
        if (v11)
        {
          MEMORY[0x22768DE24](v12);
          if (*(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_224F67D90();
          sub_224F67D9C();
          sub_224F67D84();
        }
        v8 += v9;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      v5 = v43;
      v3 = (_QWORD *)v0[14];
    }
  }
  else
  {
    v5 = 0;
  }
  v0[53] = v5;
  v13 = objc_msgSend((id)objc_opt_self(), sel_FHIRObservationStatus);
  v0[54] = v13;
  v15 = v3[5];
  v14 = v3[6];
  v0[55] = v14;
  v16 = sub_224F67B80();
  v0[56] = v17;
  v0[2] = v13;
  v0[3] = v15;
  v0[4] = v14;
  v0[5] = v16;
  v0[7] = 0;
  v0[8] = 0;
  v0[6] = v17;
  v18 = v3[7];
  swift_bridgeObjectRetain();
  if (v18)
    v19 = Array<A>.asCodingCollectionArray()(v18);
  else
    v19 = MEMORY[0x24BEE4AF8];
  v0[57] = v19;
  v20 = v0[30];
  v21 = v0[14];
  v22 = *(_QWORD *)(v21 + *(int *)(v20 + 56));
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 16);
    v24 = MEMORY[0x24BEE4AF8];
    if (v23)
    {
      v25 = v0[17];
      v42 = v0[18];
      v44 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_224E53720(0, v23, 0);
      v26 = v22 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
      v41 = *(_QWORD *)(v25 + 72);
      v24 = v44;
      do
      {
        v27 = (uint64_t *)v0[18];
        sub_224DDB408(v26, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
        v28 = *v27;
        v29 = *(_QWORD *)(v42 + 8);
        swift_bridgeObjectRetain();
        sub_224DDEAA0((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_224E53720(0, *(_QWORD *)(v24 + 16) + 1, 1);
          v24 = v44;
        }
        v31 = *(_QWORD *)(v24 + 16);
        v30 = *(_QWORD *)(v24 + 24);
        if (v31 >= v30 >> 1)
        {
          sub_224E53720(v30 > 1, v31 + 1, 1);
          v24 = v44;
        }
        *(_QWORD *)(v24 + 16) = v31 + 1;
        v32 = v24 + 16 * v31;
        *(_QWORD *)(v32 + 32) = v28;
        *(_QWORD *)(v32 + 40) = v29;
        v26 += v41;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
    }
    v0[12] = v24;
    sub_224E68104();
    sub_224E79350();
    v33 = sub_224F67B44();
    v35 = v34;
    swift_bridgeObjectRelease();
    v20 = v0[30];
    v21 = v0[14];
  }
  else
  {
    v33 = 0;
    v35 = 0;
  }
  v0[58] = v33;
  v0[59] = v35;
  sub_224DDB408(v0[13], v0[16], (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v36 = v0[15];
  if (*(_QWORD *)(v21 + *(int *)(v20 + 80) + 8))
  {
    swift_bridgeObjectRetain();
    sub_224F677B4();
    v37 = sub_224F677D8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 0, 1, v37);
  }
  else
  {
    v38 = sub_224F677D8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v36, 1, 1, v38);
  }
  v39 = swift_task_alloc();
  v0[60] = v39;
  *(_QWORD *)v39 = v0;
  *(_QWORD *)(v39 + 8) = sub_224EF91D4;
  *(_OWORD *)(v39 + 16) = *(_OWORD *)(v0 + 13);
  return swift_task_switch();
}

uint64_t sub_224EF91D4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 488) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224EF9230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 344);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = (void *)*MEMORY[0x24BDD2BA0];
  sub_224E75F34(*(_QWORD *)(v0 + 112) + *(int *)(*(_QWORD *)(v0 + 240) + 52), v3, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v5 = v2(v3, 1, v1);
  v6 = *(_QWORD *)(v0 + 280);
  if (v5 == 1)
  {
    v7 = v4;
    sub_224E7601C(v6, &qword_2557E02D0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v31 = 0;
  }
  else
  {
    if (*(_QWORD *)(v6 + 56) == 1)
    {
      if ((*(_BYTE *)(v6 + 19) & 1) != 0)
      {
        if (*(_BYTE *)(v6 + 17))
          v8 = 3;
        else
          v8 = 2;
      }
      else
      {
        v8 = 1;
      }
    }
    else
    {
      v8 = 0;
    }
    v9 = *(_QWORD *)(v0 + 400);
    v10 = *(_QWORD *)(v0 + 336);
    v11 = *(_QWORD *)(v0 + 200);
    sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
    v12 = v4;
    FHIRDateTime.asDateComponents()();
    v13 = (uint64_t *)(v6 + *(int *)(v10 + 32));
    v14 = *v13;
    v15 = v13[1];
    swift_bridgeObjectRetain();
    v16 = sub_224F00474(v11, v14, v15, v8);
    if (v9)
    {
      v17 = *(void **)(v0 + 488);
      v18 = *(void **)(v0 + 416);
      v19 = *(void **)(v0 + 408);
      v20 = *(void **)(v0 + 368);
      v21 = *(void **)(v0 + 352);
      v39 = *(_QWORD *)(v0 + 128);
      v40 = *(_QWORD *)(v0 + 280);
      v38 = *(_QWORD *)(v0 + 120);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_224E7601C(v38, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
      sub_224DDEAA0(v39, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
      sub_224DDEAA0(v40, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v31 = v16;
    sub_224DDEAA0(*(_QWORD *)(v0 + 280), (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  }
  v30 = v4;
  v23 = *(_QWORD *)(v0 + 464);
  v24 = *(_QWORD *)(v0 + 472);
  v25 = *(_QWORD *)(v0 + 456);
  v35 = *(void **)(v0 + 488);
  v36 = *(void **)(v0 + 432);
  v37 = *(void **)(v0 + 416);
  v33 = *(void **)(v0 + 408);
  v34 = *(_QWORD *)(v0 + 424);
  v26 = *(void **)(v0 + 368);
  v32 = *(void **)(v0 + 352);
  v27 = *(_QWORD *)(v0 + 120);
  v28 = *(uint64_t **)(v0 + 128);
  sub_224E5451C(0, &qword_2557E3118);
  swift_bridgeObjectRetain();
  v29 = sub_224F184E8(v28, v27, v23, v24, v35, (uint64_t)v33, v34, (uint64_t)v32, (uint64_t)v26, (uint64_t)v30, v25, v0 + 16, (uint64_t)v31, 0, v23, v24, 0, 0, 0,
          0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v29);
}

uint64_t Array<A>.asCodingCollectionArray()(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v5 = MEMORY[0x24BEE4AF8];
    sub_224F6818C();
    v4 = a1 + 48;
    do
    {
      sub_224EEF95C();
      sub_224F68174();
      sub_224F68198();
      sub_224F681A4();
      sub_224F68180();
      v4 += 24;
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

uint64_t Array<A>.extensions(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_224EF9EF0(v4, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t Array<A>.firstExtension(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  char *v35;
  int v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a1;
  v5 = sub_224F675D4();
  v43 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v35 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E79FE0();
  v40 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5AE10();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v33 - v14;
  v42 = type metadata accessor for Extension();
  MEMORY[0x24BDAC7A8](v42);
  v38 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a2 + 16);
  if (!v18)
  {
    v31 = 1;
    v20 = v42;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a3, v31, 1, v20);
  }
  v37 = v13;
  v33[1] = a2;
  v34 = a3;
  v19 = a2 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  v33[0] = v16;
  v39 = *(_QWORD *)(v16 + 72);
  swift_bridgeObjectRetain();
  v20 = v42;
  v21 = (uint64_t)v38;
  while (1)
  {
    sub_224DDB408(v19, v21, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
    v22 = v21 + *(int *)(v20 + 20);
    v23 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v15, v41, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v15, 0, 1, v5);
    v24 = (uint64_t)&v9[*(int *)(v40 + 48)];
    sub_224DDB408(v22, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_224E5AE10);
    sub_224DDB408((uint64_t)v15, v24, (uint64_t (*)(_QWORD))sub_224E5AE10);
    v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    if (v25(v9, 1, v5) == 1)
      break;
    v26 = (uint64_t)v37;
    sub_224DDB408((uint64_t)v9, (uint64_t)v37, (uint64_t (*)(_QWORD))sub_224E5AE10);
    if (v25((char *)v24, 1, v5) == 1)
    {
      sub_224DDEAA0((uint64_t)v15, (uint64_t (*)(_QWORD))sub_224E5AE10);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v26, v5);
      v21 = (uint64_t)v38;
      goto LABEL_4;
    }
    v27 = v43;
    v28 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v35, v24, v5);
    sub_224EFA1E0();
    v36 = sub_224F67B50();
    v29 = *(void (**)(char *, uint64_t))(v27 + 8);
    v30 = v28;
    v20 = v42;
    v29(v30, v5);
    sub_224DDEAA0((uint64_t)v15, (uint64_t (*)(_QWORD))sub_224E5AE10);
    v29((char *)v26, v5);
    sub_224DDEAA0((uint64_t)v9, (uint64_t (*)(_QWORD))sub_224E5AE10);
    v21 = (uint64_t)v38;
    if ((v36 & 1) != 0)
      goto LABEL_14;
LABEL_5:
    sub_224DDEAA0(v21, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
    v19 += v39;
    if (!--v18)
    {
      swift_bridgeObjectRelease();
      v31 = 1;
      a3 = v34;
      goto LABEL_15;
    }
  }
  sub_224DDEAA0((uint64_t)v15, (uint64_t (*)(_QWORD))sub_224E5AE10);
  if (v25((char *)v24, 1, v5) != 1)
  {
LABEL_4:
    sub_224DDEAA0((uint64_t)v9, (uint64_t (*)(_QWORD))sub_224E79FE0);
    v20 = v42;
    goto LABEL_5;
  }
  sub_224DDEAA0((uint64_t)v9, (uint64_t (*)(_QWORD))sub_224E5AE10);
  v20 = v42;
LABEL_14:
  swift_bridgeObjectRelease();
  a3 = v34;
  sub_224EFA19C(v21, v34);
  v31 = 0;
LABEL_15:
  v16 = v33[0];
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a3, v31, 1, v20);
}

uint64_t Array<A>.firstExtension(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)();
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)();
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a2;
  v30 = a1;
  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for Extension();
  v9 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 + 16);
  if (!v12)
  {
    v24 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v24, 1, v31);
  }
  v27 = v9;
  v28 = a4;
  v13 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v14 = *(_QWORD *)(v9 + 72);
  v26 = a3;
  swift_bridgeObjectRetain();
  v15 = sub_224E5AE10;
  while (1)
  {
    sub_224DDB408(v13, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
    sub_224DDB408((uint64_t)&v11[*(int *)(v31 + 20)], (uint64_t)v8, (uint64_t (*)(_QWORD))v15);
    v16 = sub_224F675D4();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v8, 1, v16) == 1)
    {
      sub_224DDEAA0((uint64_t)v8, (uint64_t (*)(_QWORD))v15);
      goto LABEL_4;
    }
    v18 = v14;
    v19 = v15;
    v20 = sub_224F6755C();
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v16);
    if (v20 == v30 && v22 == v29)
      break;
    v23 = sub_224F683CC();
    swift_bridgeObjectRelease();
    v15 = v19;
    v14 = v18;
    if ((v23 & 1) != 0)
      goto LABEL_13;
LABEL_4:
    sub_224DDEAA0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
    v13 += v14;
    if (!--v12)
    {
      swift_bridgeObjectRelease();
      v24 = 1;
      v9 = v27;
      a4 = v28;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v24, 1, v31);
    }
  }
  swift_bridgeObjectRelease();
LABEL_13:
  v9 = v27;
  a4 = v28;
  swift_bridgeObjectRelease();
  sub_224EFA19C((uint64_t)v11, a4);
  v24 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v24, 1, v31);
}

uint64_t sub_224EF9EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a2;
  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for Extension();
  v9 = MEMORY[0x24BDAC7A8](v34);
  v32 = (uint64_t)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v29 - v12;
  result = MEMORY[0x24BEE4AF8];
  v35 = MEMORY[0x24BEE4AF8];
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v29 = v3;
    v16 = *(_QWORD *)(v11 + 72);
    v30 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v31 = a3;
    v17 = a1 + v30;
    while (1)
    {
      sub_224DDB408(v17, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
      sub_224DDB408((uint64_t)&v13[*(int *)(v34 + 20)], (uint64_t)v8, (uint64_t (*)(_QWORD))sub_224E5AE10);
      v18 = sub_224F675D4();
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v8, 1, v18) == 1)
      {
        sub_224DDEAA0((uint64_t)v8, (uint64_t (*)(_QWORD))sub_224E5AE10);
      }
      else
      {
        v20 = v16;
        v21 = sub_224F6755C();
        v23 = v22;
        (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v18);
        if (v21 == v33 && v23 == v31)
        {
          swift_bridgeObjectRelease();
LABEL_11:
          sub_224EFA19C((uint64_t)v13, v32);
          v25 = v35;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_224E53908(0, *(_QWORD *)(v25 + 16) + 1, 1);
            v25 = v35;
          }
          v27 = *(_QWORD *)(v25 + 16);
          v26 = *(_QWORD *)(v25 + 24);
          if (v27 >= v26 >> 1)
          {
            sub_224E53908(v26 > 1, v27 + 1, 1);
            v25 = v35;
          }
          *(_QWORD *)(v25 + 16) = v27 + 1;
          v28 = v25 + v30 + v27 * v20;
          v16 = v20;
          sub_224EFA19C(v32, v28);
          goto LABEL_5;
        }
        v24 = sub_224F683CC();
        swift_bridgeObjectRelease();
        v16 = v20;
        if ((v24 & 1) != 0)
          goto LABEL_11;
      }
      sub_224DDEAA0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
LABEL_5:
      v17 += v16;
      if (!--v15)
        return v35;
    }
  }
  return result;
}

uint64_t sub_224EFA19C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Extension();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_224EFA1E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E02B8;
  if (!qword_2557E02B8)
  {
    v1 = sub_224F675D4();
    result = MEMORY[0x22768ED24](MEMORY[0x24BDCDB00], v1);
    atomic_store(result, (unint64_t *)&qword_2557E02B8);
  }
  return result;
}

uint64_t sub_224EFA228(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  id v37;

  v34 = a1;
  SignedClinicalDataEUDCC.verifySignature(using:)((HealthRecordsExtraction::VCJWKSet)&v34);
  if (v1)
  {
    v2 = v1;
    v37 = v1;
    v3 = v1;
    sub_224E57260();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v5 = v34;
      v4 = v35;
      if (!v36)
      {

        if (qword_2557E0128 != -1)
          swift_once();
        v16 = sub_224F679B8();
        __swift_project_value_buffer(v16, (uint64_t)qword_2557FC958);
        swift_bridgeObjectRetain();
        v17 = sub_224F679AC();
        v18 = sub_224F67ED4();
        if (os_log_type_enabled(v17, v18))
        {
          v19 = (uint8_t *)swift_slowAlloc();
          v20 = swift_slowAlloc();
          v33 = v20;
          *(_DWORD *)v19 = 136446210;
          swift_bridgeObjectRetain();
          sub_224E76904(v5, v4, &v33);
          sub_224F68000();
          sub_224E65F68(v5, v4, 0);
          sub_224E65F68(v5, v4, 0);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_224DAC000, v17, v18, "SignedClinicalDataSignatureVerifiable: signature is invalid because the key “%{public}s” is not a signing key", v19, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x22768EDE4](v20, -1, -1);
          MEMORY[0x22768EDE4](v19, -1, -1);
        }
        else
        {
          sub_224E65F68(v5, v4, 0);
          sub_224E65F68(v5, v4, 0);
        }

        v31 = v37;
        goto LABEL_28;
      }
      if (v36 == 2)
      {

        if (qword_2557E0128 != -1)
          swift_once();
        v6 = sub_224F679B8();
        __swift_project_value_buffer(v6, (uint64_t)qword_2557FC958);
        swift_bridgeObjectRetain();
        v7 = sub_224F679AC();
        v8 = sub_224F67ED4();
        if (os_log_type_enabled(v7, v8))
        {
          v9 = (uint8_t *)swift_slowAlloc();
          v10 = swift_slowAlloc();
          v33 = v10;
          *(_DWORD *)v9 = 136446210;
          swift_bridgeObjectRetain();
          sub_224E76904(v5, v4, &v33);
          sub_224F68000();
          sub_224E65F68(v5, v4, 2u);
          sub_224E65F68(v5, v4, 2u);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_224DAC000, v7, v8, "SignedClinicalDataSignatureVerifiable: unable to verify signature because the signing key “%{public}s” could not be found", v9, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x22768EDE4](v10, -1, -1);
          MEMORY[0x22768EDE4](v9, -1, -1);
        }
        else
        {
          sub_224E65F68(v5, v4, 2u);
          sub_224E65F68(v5, v4, 2u);
        }

        return 1;
      }
      sub_224E65F68(v34, v35, v36);
    }

    if (qword_2557E0128 != -1)
      swift_once();
    v21 = sub_224F679B8();
    __swift_project_value_buffer(v21, (uint64_t)qword_2557FC958);
    v22 = v2;
    v23 = v2;
    v24 = sub_224F679AC();
    v25 = sub_224F67ED4();
    if (!os_log_type_enabled(v24, v25))
    {

      return 3;
    }
    v26 = (uint8_t *)swift_slowAlloc();
    v27 = swift_slowAlloc();
    v34 = v27;
    *(_DWORD *)v26 = 136446210;
    v37 = v2;
    v28 = v2;
    v29 = sub_224F67BC8();
    v37 = (id)sub_224E76904(v29, v30, &v34);
    sub_224F68000();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_224DAC000, v24, v25, "SignedClinicalDataSignatureVerifiable: signature invalid because: %{public}s", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22768EDE4](v27, -1, -1);
    MEMORY[0x22768EDE4](v26, -1, -1);

    v31 = v2;
LABEL_28:

    return 3;
  }
  if (qword_2557E0128 != -1)
    swift_once();
  v11 = sub_224F679B8();
  __swift_project_value_buffer(v11, (uint64_t)qword_2557FC958);
  v12 = sub_224F679AC();
  v13 = sub_224F67EEC();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = 2;
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_224DAC000, v12, v13, "SignedClinicalDataSignatureVerifiable: signature appears to be valid", v15, 2u);
    MEMORY[0x22768EDE4](v15, -1, -1);

  }
  else
  {

    return 2;
  }
  return v14;
}

void SignedClinicalDataEUDCC.algorithm.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t SignedClinicalDataEUDCC.signingKeyID.getter()
{
  return sub_224F6764C();
}

uint64_t SignedClinicalDataEUDCC.signature()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 208);
  sub_224DDE970(v1, *(_QWORD *)(v0 + 216));
  return v1;
}

uint64_t SignedClinicalDataEUDCC.signatureMessage()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[5];
  v3 = v0[6];
  sub_224EFAB14();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_224F73390;
  v6 = (void *)sub_224F67B5C();
  v7 = (void *)objc_opt_self();
  v8 = objc_msgSend(v7, sel_cborWithUTF8String_, v6);

  *(_QWORD *)(v5 + 32) = v8;
  sub_224DDE970(v1, v2);
  v9 = (void *)sub_224F67640();
  v10 = objc_msgSend(v7, sel_cborWithData_, v9);
  sub_224DDE9B4(v1, v2);

  *(_QWORD *)(v5 + 40) = v10;
  v11 = (void *)sub_224F67640();
  v12 = objc_msgSend(v7, sel_cborWithData_, v11);

  *(_QWORD *)(v5 + 48) = v12;
  sub_224DDE970(v4, v3);
  v13 = (void *)sub_224F67640();
  v14 = objc_msgSend(v7, sel_cborWithData_, v13);
  sub_224DDE9B4(v4, v3);

  *(_QWORD *)(v5 + 56) = v14;
  sub_224F67D84();
  sub_224EFAB6C();
  v15 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v7, sel_cborWithArray_, v15);

  v17 = v16;
  v18 = sub_224F675EC();
  if (v19 >> 60 == 15)
  {
    sub_224EDBBA4();
    swift_allocError();
    *(_QWORD *)v20 = 2;
    *(_BYTE *)(v20 + 8) = 1;
    swift_willThrow();
  }

  return v18;
}

void sub_224EFAB14()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E2960)
  {
    v0 = sub_224F683A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E2960);
  }
}

unint64_t sub_224EFAB6C()
{
  unint64_t result;

  result = qword_2557E31F8;
  if (!qword_2557E31F8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E31F8);
  }
  return result;
}

uint64_t SignedClinicalDataEUDCC.signatureStatus(using:)(void *a1)
{
  id v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;

  v2 = objc_msgSend(a1, sel_JWKSOutcome);
  if (v2 == (id)3)
  {
    if (qword_2557E0128 != -1)
      swift_once();
    v4 = sub_224F679B8();
    __swift_project_value_buffer(v4, (uint64_t)qword_2557FC958);
    v5 = a1;
    v6 = sub_224F679AC();
    v7 = sub_224F67EEC();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v32 = v9;
      *(_DWORD *)v8 = 136446210;
      v10 = objc_msgSend(v5, sel_signingKeyID);
      if (v10)
      {
        v11 = v10;
        sub_224F67B80();

        swift_bridgeObjectRetain_n();
        sub_224F6848C();
        v12 = (id)HKSensitiveLogItem();
        swift_unknownObjectRelease();
        sub_224F68078();
        swift_unknownObjectRelease();
        v13 = sub_224F67BC8();
        v15 = v14;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v13 = 0x7D6C696E7BLL;
        v15 = 0xE500000000000000;
      }
      sub_224E76904(v13, v15, &v32);
      sub_224F68000();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_224DAC000, v6, v7, "SignedClinicalDataEUDCC: signing key “%{public}s” has been removed", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v9, -1, -1);
      MEMORY[0x22768EDE4](v8, -1, -1);

      return 3;
    }
    else
    {

      return 3;
    }
  }
  else if (v2 == (id)2)
  {
    if (qword_2557E0128 != -1)
      swift_once();
    v16 = sub_224F679B8();
    __swift_project_value_buffer(v16, (uint64_t)qword_2557FC958);
    v17 = a1;
    v18 = sub_224F679AC();
    v19 = sub_224F67EEC();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v32 = v21;
      *(_DWORD *)v20 = 136446210;
      v22 = objc_msgSend(v17, sel_signingKeyID);
      if (v22)
      {
        v23 = v22;
        sub_224F67B80();

        swift_bridgeObjectRetain_n();
        sub_224F6848C();
        v24 = (id)HKSensitiveLogItem();
        swift_unknownObjectRelease();
        sub_224F68078();
        swift_unknownObjectRelease();
        v25 = sub_224F67BC8();
        v27 = v26;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v25 = 0x7D6C696E7BLL;
        v27 = 0xE500000000000000;
      }
      sub_224E76904(v25, v27, &v32);
      sub_224F68000();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_224DAC000, v18, v19, "SignedClinicalDataEUDCC: signing key “%{public}s” not found", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v21, -1, -1);
      MEMORY[0x22768EDE4](v20, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  else if (v2 == (id)1)
  {
    return sub_224EFB100(a1);
  }
  else
  {
    if (qword_2557E0128 != -1)
      swift_once();
    v28 = sub_224F679B8();
    __swift_project_value_buffer(v28, (uint64_t)qword_2557FC958);
    v29 = sub_224F679AC();
    v30 = sub_224F67ED4();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_224DAC000, v29, v30, "SignedClinicalDataEUDCC: unable to verify signature", v31, 2u);
      MEMORY[0x22768EDE4](v31, -1, -1);
    }

    return 1;
  }
}

uint64_t sub_224EFB100(void *a1)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v33;
  unsigned __int8 v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v2 = v1[11];
  v46 = v1[10];
  v47 = v2;
  v3 = v1[13];
  v48 = v1[12];
  v49 = v3;
  v4 = v1[7];
  v42 = v1[6];
  v43 = v4;
  v5 = v1[9];
  v44 = v1[8];
  v45 = v5;
  v6 = v1[3];
  v38 = v1[2];
  v39 = v6;
  v7 = v1[5];
  v40 = v1[4];
  v41 = v7;
  v8 = v1[1];
  v36 = *v1;
  v37 = v8;
  v9 = objc_msgSend(a1, sel_JWKSData);
  if (v9)
  {
    v10 = v9;
    v11 = sub_224F67658();
    v13 = v12;

    sub_224F67298();
    swift_allocObject();
    sub_224F6728C();
    sub_224E76EDC();
    sub_224F67280();
    swift_release();
    sub_224DDE9B4(v11, v13);
    v21 = sub_224EFA228(v33);
    swift_bridgeObjectRelease();
    return v21;
  }
  sub_224E65EF4();
  v14 = (void *)swift_allocError();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_BYTE *)(v15 + 16) = 5;
  swift_willThrow();
  v35 = v14;
  v16 = v14;
  sub_224E57260();
  if ((swift_dynamicCast() & 1) != 0)
  {
    if (v34 == 5 && v33 == 0)
    {

      if (qword_2557E0128 != -1)
        swift_once();
      v17 = sub_224F679B8();
      __swift_project_value_buffer(v17, (uint64_t)qword_2557FC958);
      v18 = sub_224F679AC();
      v19 = sub_224F67EEC();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v20 = 0;
        _os_log_impl(&dword_224DAC000, v18, v19, "SignedClinicalDataEUDCC: not attempting to verify signature because there is no JWKS data", v20, 2u);
        MEMORY[0x22768EDE4](v20, -1, -1);
      }

      return 0;
    }
    sub_224E65F68(v33, *((uint64_t *)&v33 + 1), v34);
  }

  if (qword_2557E0128 != -1)
    swift_once();
  v22 = sub_224F679B8();
  __swift_project_value_buffer(v22, (uint64_t)qword_2557FC958);
  v23 = v14;
  v24 = v14;
  v25 = sub_224F679AC();
  v26 = sub_224F67ED4();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    *(_QWORD *)&v33 = v28;
    *(_DWORD *)v27 = 136446210;
    v35 = v14;
    v29 = v14;
    v30 = sub_224F67BC8();
    v35 = (id)sub_224E76904(v30, v31, (uint64_t *)&v33);
    sub_224F68000();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_224DAC000, v25, v26, "SignedClinicalDataEUDCC: unable to verify signature because: %{public}s", v27, 0xCu);
    v21 = 1;
    swift_arrayDestroy();
    MEMORY[0x22768EDE4](v28, -1, -1);
    MEMORY[0x22768EDE4](v27, -1, -1);

  }
  else
  {

    return 1;
  }
  return v21;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SignedClinicalDataEUDCC.verifySignature(using:)(HealthRecordsExtraction::VCJWKSet using)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __SecKey *v55;
  uint64_t v56;
  __SecKey *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v3 = v2;
  v4 = *(_QWORD *)using.keys._rawValue;
  v5 = v1[11];
  v101 = v1[10];
  v102 = v5;
  v6 = v1[13];
  v103 = v1[12];
  v104 = v6;
  v7 = v1[7];
  v97 = v1[6];
  v98 = v7;
  v8 = v1[9];
  v99 = v1[8];
  v100 = v8;
  v9 = v1[3];
  v93 = v1[2];
  v94 = v9;
  v10 = v1[5];
  v95 = v1[4];
  v96 = v10;
  v11 = v1[1];
  v91 = *v1;
  v92 = v11;
  if (qword_2557E0128 != -1)
    swift_once();
  v12 = sub_224F679B8();
  __swift_project_value_buffer(v12, (uint64_t)qword_2557FC958);
  sub_224EFBBD0((uint64_t *)&v91);
  sub_224EFBBD0((uint64_t *)&v91);
  v13 = sub_224F679AC();
  v14 = sub_224F67EEC();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    *(_QWORD *)&v83 = v16;
    v105 = v2;
    *(_DWORD *)v15 = 136446210;
    sub_224EFBBD0((uint64_t *)&v91);
    sub_224F6764C();
    v18 = v17;
    sub_224EFBCC4((uint64_t *)&v91);
    *((_QWORD *)&v69 + 1) = v18;
    sub_224F6848C();
    v19 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_224F68078();
    swift_unknownObjectRelease();
    v20 = sub_224F67BC8();
    *(_QWORD *)&v69 = sub_224E76904(v20, v21, (uint64_t *)&v83);
    v3 = v105;
    sub_224F68000();
    swift_bridgeObjectRelease();
    sub_224EFBCC4((uint64_t *)&v91);
    sub_224EFBCC4((uint64_t *)&v91);
    _os_log_impl(&dword_224DAC000, v13, v14, "SignedClinicalDataEUDCC: trying to verify signature with key “%{public}s”", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22768EDE4](v16, -1, -1);
    MEMORY[0x22768EDE4](v15, -1, -1);
  }
  else
  {
    sub_224EFBCC4((uint64_t *)&v91);
    sub_224EFBCC4((uint64_t *)&v91);
  }

  v22 = v92;
  sub_224EFBBD0((uint64_t *)&v91);
  v23 = sub_224F6764C();
  v25 = v24;
  sub_224EFBCC4((uint64_t *)&v91);
  v26 = *(_QWORD *)(v4 + 16);
  if (!v26)
  {
LABEL_16:
    sub_224E65EF4();
    swift_allocError();
    *(_QWORD *)v41 = v23;
    *(_QWORD *)(v41 + 8) = v25;
    *(_BYTE *)(v41 + 16) = 2;
LABEL_17:
    swift_willThrow();
    return;
  }
  v27 = *(_OWORD *)(v4 + 128);
  v88 = *(_OWORD *)(v4 + 112);
  v89 = v27;
  v90[0] = *(_OWORD *)(v4 + 144);
  *(_QWORD *)&v90[1] = *(_QWORD *)(v4 + 160);
  v28 = *(_OWORD *)(v4 + 48);
  v29 = *(_OWORD *)(v4 + 80);
  v30 = *(_OWORD *)(v4 + 96);
  v85 = *(_OWORD *)(v4 + 64);
  v86 = v29;
  v87 = v30;
  v83 = *(_OWORD *)(v4 + 32);
  v84 = v28;
  v31 = v4 + 168;
  v32 = v26 - 1;
  v33 = *((_QWORD *)&v27 + 1);
  if (!*((_QWORD *)&v27 + 1))
    goto LABEL_13;
LABEL_8:
  v34 = (_QWORD)v89 == v23 && v33 == v25;
  if (!v34 && (sub_224F683CC() & 1) == 0)
  {
LABEL_13:
    while (v32)
    {
      v83 = *(_OWORD *)v31;
      v35 = *(_OWORD *)(v31 + 16);
      v36 = *(_OWORD *)(v31 + 32);
      v37 = *(_OWORD *)(v31 + 64);
      v86 = *(_OWORD *)(v31 + 48);
      v87 = v37;
      v84 = v35;
      v85 = v36;
      v38 = *(_OWORD *)(v31 + 80);
      v39 = *(_OWORD *)(v31 + 96);
      v40 = *(_OWORD *)(v31 + 112);
      *(_QWORD *)&v90[1] = *(_QWORD *)(v31 + 128);
      v89 = v39;
      v90[0] = v40;
      v88 = v38;
      v31 += 136;
      --v32;
      v33 = *((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1))
        goto LABEL_8;
    }
    goto LABEL_16;
  }
  sub_224E76F20((uint64_t)&v83);
  if (*(_QWORD *)&v90[1]
    && *(_OWORD *)((char *)v90 + 8) != __PAIR128__(0xE300000000000000, 6777203)
    && (sub_224F683CC() & 1) == 0)
  {
    sub_224E76FB0((uint64_t)&v83);
    sub_224E65EF4();
    swift_allocError();
    *(_QWORD *)v59 = v23;
    *(_QWORD *)(v59 + 8) = v25;
    *(_BYTE *)(v59 + 16) = 0;
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  if ((_DWORD)v22 == 3)
  {
    v50 = v104;
    v79 = v101;
    v80 = v102;
    v81 = v103;
    v82 = v104;
    v75 = v97;
    v76 = v98;
    v77 = v99;
    v78 = v100;
    v71 = v93;
    v72 = v94;
    v73 = v95;
    v74 = v96;
    v69 = v91;
    v70 = v92;
    sub_224EFBBD0((uint64_t *)&v91);
    sub_224DDE970(v50, *((unint64_t *)&v50 + 1));
    v51 = SignedClinicalDataEUDCC.signatureMessage()();
    if (!v3)
    {
      v53 = v51;
      v54 = v52;
      v66 = v89;
      v67 = v90[0];
      v68 = *(_QWORD *)&v90[1];
      v62 = v85;
      v63 = v86;
      v64 = v87;
      v65 = v88;
      v60 = v83;
      v61 = v84;
      v55 = VCJWK.asRSASecKey()();
      if (!v56)
      {
        v57 = v55;
        sub_224EED948(v50, SDWORD2(v50), v53, v54, v55);

      }
      sub_224DDE9B4(v53, v54);
    }
    sub_224DDE9B4(v50, *((unint64_t *)&v50 + 1));
    sub_224E76FB0((uint64_t)&v83);
    sub_224EFBCC4((uint64_t *)&v91);
  }
  else
  {
    if ((_DWORD)v22 != 1)
    {
      sub_224E76FB0((uint64_t)&v83);
      sub_224E77040();
      swift_allocError();
      *(_QWORD *)v58 = v22;
      *(_QWORD *)(v58 + 8) = 0;
      *(_QWORD *)(v58 + 16) = 0;
      *(_QWORD *)(v58 + 24) = 0;
      *(_BYTE *)(v58 + 32) = 1;
      goto LABEL_17;
    }
    *((_QWORD *)&v61 + 1) = &type metadata for SignedClinicalDataEUDCC;
    *(_QWORD *)&v62 = &protocol witness table for SignedClinicalDataEUDCC;
    v42 = (_OWORD *)swift_allocObject();
    *(_QWORD *)&v60 = v42;
    v43 = v102;
    v42[11] = v101;
    v42[12] = v43;
    v44 = v104;
    v42[13] = v103;
    v42[14] = v44;
    v45 = v98;
    v42[7] = v97;
    v42[8] = v45;
    v46 = v100;
    v42[9] = v99;
    v42[10] = v46;
    v47 = v94;
    v42[3] = v93;
    v42[4] = v47;
    v48 = v96;
    v42[5] = v95;
    v42[6] = v48;
    v49 = v92;
    v42[1] = v91;
    v42[2] = v49;
    v75 = v89;
    v76 = v90[0];
    *(_QWORD *)&v77 = *(_QWORD *)&v90[1];
    v71 = v85;
    v72 = v86;
    v73 = v87;
    v74 = v88;
    v69 = v83;
    v70 = v84;
    sub_224EFBBD0((uint64_t *)&v91);
    sub_224E77214(&v60, &v69, 0);
    sub_224E76FB0((uint64_t)&v83);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
  }
}

void sub_224EFBB4C(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t sub_224EFBB58()
{
  return sub_224F6764C();
}

uint64_t sub_224EFBB64()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 208);
  sub_224DDE970(v1, *(_QWORD *)(v0 + 216));
  return v1;
}

uint64_t sub_224EFBBA4()
{
  return SignedClinicalDataEUDCC.signatureMessage()();
}

void sub_224EFBBBC(HealthRecordsExtraction::VCJWKSet a1)
{
  SignedClinicalDataEUDCC.verifySignature(using:)(a1);
}

uint64_t *sub_224EFBBD0(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v7 = a1[27];
  v8 = a1[26];
  sub_224DDE970(*a1, a1[1]);
  sub_224DDE970(v2, v3);
  sub_224DDE970(v4, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_224DDE970(v8, v7);
  return a1;
}

uint64_t *sub_224EFBCC4(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v7 = a1[27];
  v8 = a1[26];
  sub_224DDE9B4(*a1, a1[1]);
  sub_224DDE9B4(v2, v3);
  sub_224DDE9B4(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_224DDE9B4(v8, v7);
  return a1;
}

uint64_t sub_224EFBDBC()
{
  uint64_t v0;

  sub_224DDE9B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_224DDE9B4(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  sub_224DDE9B4(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_224DDE9B4(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
  return swift_deallocObject();
}

void SignedClinicalDataQRError.errorDescription.getter()
{
  uint64_t v0;
  _QWORD v1[5];

  sub_224EFC0DC(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_224EFBE80()
{
  sub_224F680E4();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  return 0x1000000000000019;
}

uint64_t sub_224EFC0DC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SignedClinicalDataQRError(a2, a1);
  return a2;
}

uint64_t destroy for SignedClinicalDataQRError(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 4)
    v1 = *(_DWORD *)result + 4;
  if (v1 == 3 || v1 == 2)
    return __swift_destroy_boxed_opaque_existential_1(result);
  if (!v1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for SignedClinicalDataQRError(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  char v6;
  __int128 v7;
  __int128 v8;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 4)
    v3 = *(_DWORD *)a2 + 4;
  switch(v3)
  {
    case 0u:
      v4 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      *(_BYTE *)(a1 + 40) = 0;
      swift_bridgeObjectRetain();
      return a1;
    case 1u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = 1;
      goto LABEL_9;
    case 2u:
      v7 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v7;
      (**(void (***)(uint64_t))(v7 - 8))(a1);
      v6 = 2;
      goto LABEL_9;
    case 3u:
      v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t))(v8 - 8))(a1);
      v6 = 3;
LABEL_9:
      *(_BYTE *)(a1 + 40) = v6;
      break;
    default:
      v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataQRError(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 4)
      v4 = *(_DWORD *)a1 + 4;
    if (v4 == 3 || v4 == 2)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (!v4)
    {
      swift_bridgeObjectRelease();
    }
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 4)
      v5 = *(_DWORD *)a2 + 4;
    switch(v5)
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        *(_BYTE *)(a1 + 40) = 0;
        swift_bridgeObjectRetain();
        return a1;
      case 1u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v8 = 1;
        goto LABEL_17;
      case 2u:
        v9 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v9;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v9 - 8))(a1, a2);
        v8 = 2;
        goto LABEL_17;
      case 3u:
        v10 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v10;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v10 - 8))(a1, a2);
        v8 = 3;
LABEL_17:
        *(_BYTE *)(a1 + 40) = v8;
        break;
      default:
        v6 = *a2;
        v7 = a2[1];
        *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
        *(_OWORD *)a1 = v6;
        *(_OWORD *)(a1 + 16) = v7;
        break;
    }
  }
  return a1;
}

uint64_t assignWithTake for SignedClinicalDataQRError(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  char v7;
  __int128 v8;
  __int128 v9;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 4)
      v4 = *(_DWORD *)a1 + 4;
    if (v4 == 3 || v4 == 2)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (!v4)
    {
      swift_bridgeObjectRelease();
    }
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 4)
      v5 = *(_DWORD *)a2 + 4;
    switch(v5)
    {
      case 0u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_BYTE *)(a1 + 40) = 0;
        return a1;
      case 1u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v7 = 1;
        goto LABEL_17;
      case 2u:
        v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v7 = 2;
        goto LABEL_17;
      case 3u:
        v9 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v9;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v7 = 3;
LABEL_17:
        *(_BYTE *)(a1 + 40) = v7;
        break;
      default:
        v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataQRError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 5)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataQRError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_224EFC4EC(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 4)
    return (*(_DWORD *)a1 + 4);
  return result;
}

uint64_t sub_224EFC508(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataQRError()
{
  return &type metadata for SignedClinicalDataQRError;
}

uint64_t sub_224EFC540@<X0>(void (*a1)(char *, char *, uint64_t)@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  unsigned int v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;

  v32 = a2;
  v33 = a1;
  v3 = sub_224F67550();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_224F675D4();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v28 - v15;
  sub_224F675A4();
  v18 = v17;
  swift_bridgeObjectRelease();
  if (v18)
  {
    v19 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v32, v2, v10);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v19, 0, 1, v10);
  }
  else
  {
    v21 = v32;
    v34 = v4;
    v35 = v3;
    sub_224E5AF70((uint64_t)v33, (uint64_t)v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_224E6CD4C((uint64_t)v9);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v21, 1, 1, v10);
    }
    else
    {
      v33 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v33(v16, v9, v10);
      v29 = sub_224F67568();
      v22 = *(_QWORD *)(v29 + 16);
      if (v22)
      {
        v31 = *MEMORY[0x24BDCD7A0];
        v23 = (uint64_t *)(v29 + 40);
        v30 = xmmword_224F6D8B0;
        do
        {
          v25 = *(v23 - 1);
          v24 = *v23;
          swift_bridgeObjectRetain();
          if ((sub_224EFCA80() & 1) != 0)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            sub_224EFCE64();
            v26 = swift_allocObject();
            *(_OWORD *)(v26 + 16) = v30;
            *(_QWORD *)(v26 + 32) = v25;
            *(_QWORD *)(v26 + 40) = v24;
            (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v6, v31, v35);
            sub_224E51E94();
            sub_224F675BC();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v35);
            (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
            v33(v16, v14, v10);
          }
          v23 += 2;
          --v22;
        }
        while (v22);
      }
      swift_bridgeObjectRelease();
      v27 = v32;
      v33(v32, v16, v10);
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v27, 0, 1, v10);
    }
  }
}

uint64_t sub_224EFC840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char v19;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[4];
  uint64_t v26;
  uint64_t v27;

  v25[0] = a2;
  v5 = sub_224F67550();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_224F675D4();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v25 - v17;
  sub_224E5AF70(a3, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_224E6CD4C((uint64_t)v11);
    v19 = 0;
  }
  else
  {
    v20 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v20(v18, v11, v12);
    v26 = a1;
    v27 = v25[0];
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BDCD7A0], v5);
    sub_224E51E94();
    sub_224F675C8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v21 = *(void (**)(char *, uint64_t))(v13 + 8);
    v21(v18, v12);
    v20(v18, v16, v12);
    v26 = sub_224F6755C();
    v27 = v22;
    v25[2] = sub_224F6755C();
    v25[3] = v23;
    sub_224EFCDDC();
    sub_224EFCE20();
    v19 = sub_224F67B38();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21(v18, v12);
  }
  return v19 & 1;
}

uint64_t sub_224EFCA80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = sub_224F67CA0();
  v2 = v1;
  v3 = sub_224F67CA0();
  v5 = v4;
  if (v2)
  {
    v6 = v3;
    do
    {
      if (!v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      if (v0 == v6 && v2 == v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v7 = sub_224F683CC();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v7 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
      }
      v0 = sub_224F67CA0();
      v2 = v8;
      v6 = sub_224F67CA0();
      v5 = v9;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v5)
    return 1;
LABEL_14:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t URL.init(stringLiteral:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F675B0();
  swift_bridgeObjectRelease();
  v5 = sub_224F675D4();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v4, v5);
  __break(1u);
  return result;
}

uint64_t sub_224EFCC9C()
{
  return sub_224EFCCE8(&qword_2557E3200, (uint64_t)&protocol conformance descriptor for URL);
}

uint64_t sub_224EFCCC4()
{
  return sub_224EFCCE8(&qword_2557E3208, (uint64_t)&protocol conformance descriptor for URL);
}

uint64_t sub_224EFCCE8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_224F675D4();
    result = MEMORY[0x22768ED24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_224EFCD28@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F675B0();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a1 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, a1);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2, v6, a1);
  __break(1u);
  return result;
}

unint64_t sub_224EFCDDC()
{
  unint64_t result;

  result = qword_2557E3210;
  if (!qword_2557E3210)
  {
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE0D18], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2557E3210);
  }
  return result;
}

unint64_t sub_224EFCE20()
{
  unint64_t result;

  result = qword_2557E3218;
  if (!qword_2557E3218)
  {
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE5E60], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2557E3218);
  }
  return result;
}

void sub_224EFCE64()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E1568)
  {
    v0 = sub_224F683A8();
    if (!v1)
      atomic_store(v0, &qword_2557E1568);
  }
}

void **sub_224EFCEB8(void **a1, void **a2, int *a3)
{
  int v3;
  char *v4;
  void **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  id v35;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v6 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v6 = a1;
    v7 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    v8 = (char *)v6 + v7;
    v9 = (char *)a2 + v7;
    *(_OWORD *)v8 = *(_OWORD *)((char *)a2 + v7);
    *((_QWORD *)v8 + 2) = *(void **)((char *)a2 + v7 + 16);
    v10 = (int *)type metadata accessor for ExtractionContext();
    v11 = v10[7];
    v12 = &v8[v11];
    v13 = &v9[v11];
    v14 = sub_224F67760();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    v16 = v4;
    v15(v12, v13, v14);
    v17 = v10[8];
    v18 = &v8[v17];
    v19 = &v9[v17];
    v20 = sub_224F675D4();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      sub_224E5AE10();
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v23 = v10[9];
    v24 = &v8[v23];
    v25 = &v9[v23];
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    *(_QWORD *)&v8[v10[10]] = *(_QWORD *)&v9[v10[10]];
    *(_QWORD *)&v8[v10[11]] = *(_QWORD *)&v9[v10[11]];
    v27 = a3[5];
    v28 = a3[6];
    v29 = *(void **)((char *)a2 + v27);
    *(void **)((char *)v6 + v27) = v29;
    v30 = *(void **)((char *)a2 + v28);
    *(void **)((char *)v6 + v28) = v30;
    v31 = a3[7];
    v32 = *(void **)((char *)a2 + v31);
    *(void **)((char *)v6 + v31) = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v33 = v29;
    v34 = v30;
    v35 = v32;
  }
  return v6;
}

void sub_224EFD08C(id *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v5 = type metadata accessor for ExtractionContext();
  v6 = &v4[*(int *)(v5 + 28)];
  v7 = sub_224F67760();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = &v4[*(int *)(v5 + 32)];
  v9 = sub_224F675D4();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

}

void **sub_224EFD194(void **a1, void **a2, int *a3)
{
  void *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  id v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  id v34;

  v5 = *a2;
  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_OWORD *)v7 = *(_OWORD *)((char *)a2 + v6);
  *((_QWORD *)v7 + 2) = *(void **)((char *)a2 + v6 + 16);
  v9 = (int *)type metadata accessor for ExtractionContext();
  v10 = v9[7];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_224F67760();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v15 = v5;
  v14(v11, v12, v13);
  v16 = v9[8];
  v17 = &v7[v16];
  v18 = &v8[v16];
  v19 = sub_224F675D4();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    sub_224E5AE10();
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v22 = v9[9];
  v23 = &v7[v22];
  v24 = &v8[v22];
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = v25;
  *(_QWORD *)&v7[v9[10]] = *(_QWORD *)&v8[v9[10]];
  *(_QWORD *)&v7[v9[11]] = *(_QWORD *)&v8[v9[11]];
  v26 = a3[5];
  v27 = a3[6];
  v28 = *(void **)((char *)a2 + v26);
  *(void **)((char *)a1 + v26) = v28;
  v29 = *(void **)((char *)a2 + v27);
  *(void **)((char *)a1 + v27) = v29;
  v30 = a3[7];
  v31 = *(void **)((char *)a2 + v30);
  *(void **)((char *)a1 + v30) = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v32 = v28;
  v33 = v29;
  v34 = v31;
  return a1;
}

void **sub_224EFD340(void **a1, void **a2, int *a3)
{
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  void **v42;

  v5 = *a2;
  v6 = *a1;
  *a1 = *a2;
  v7 = v5;

  v8 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v9 = (void **)((char *)a1 + v8);
  v42 = a2;
  v10 = (char *)a2 + v8;
  *v9 = *(void **)((char *)a2 + v8);
  v9[1] = *(void **)((char *)a2 + v8 + 8);
  v9[2] = *(void **)((char *)a2 + v8 + 16);
  v11 = (int *)type metadata accessor for ExtractionContext();
  v12 = v11[7];
  v13 = (char *)v9 + v12;
  v14 = &v10[v12];
  v15 = sub_224F67760();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = v11[8];
  v17 = (char *)v9 + v16;
  v18 = &v10[v16];
  v19 = sub_224F675D4();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    sub_224E5AE10();
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_7:
  v25 = v11[9];
  v26 = (_QWORD *)((char *)v9 + v25);
  v27 = &v10[v25];
  *v26 = *(_QWORD *)v27;
  v26[1] = *((_QWORD *)v27 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v9 + v11[10]) = *(_QWORD *)&v10[v11[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v9 + v11[11]) = *(_QWORD *)&v10[v11[11]];
  swift_retain();
  swift_release();
  v28 = a3[5];
  v29 = *(void **)((char *)v42 + v28);
  v30 = *(void **)((char *)a1 + v28);
  *(void **)((char *)a1 + v28) = v29;
  v31 = v29;

  v32 = a3[6];
  v33 = *(void **)((char *)a1 + v32);
  v34 = *(void **)((char *)v42 + v32);
  *(void **)((char *)a1 + v32) = v34;
  v35 = v34;

  v36 = a3[7];
  v37 = *(void **)((char *)v42 + v36);
  v38 = *(void **)((char *)a1 + v36);
  *(void **)((char *)a1 + v36) = v37;
  v39 = v37;

  return a1;
}

_QWORD *sub_224EFD580(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_OWORD *)v7 = *(_OWORD *)((char *)a2 + v6);
  *((_QWORD *)v7 + 2) = *(_QWORD *)((char *)a2 + v6 + 16);
  v9 = (int *)type metadata accessor for ExtractionContext();
  v10 = v9[7];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_224F67760();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = v9[8];
  v15 = &v7[v14];
  v16 = &v8[v14];
  v17 = sub_224F675D4();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_224E5AE10();
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_OWORD *)&v7[v9[9]] = *(_OWORD *)&v8[v9[9]];
  *(_QWORD *)&v7[v9[10]] = *(_QWORD *)&v8[v9[10]];
  *(_QWORD *)&v7[v9[11]] = *(_QWORD *)&v8[v9[11]];
  v20 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

void **sub_224EFD6F0(void **a1, void **a2, int *a3)
{
  void *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void **v36;

  v5 = *a1;
  *a1 = *a2;

  v6 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v7 = (char *)a1 + v6;
  v36 = a2;
  v8 = (char *)a2 + v6;
  *(_OWORD *)v7 = *(_OWORD *)((char *)a2 + v6);
  *((_QWORD *)v7 + 2) = *(void **)((char *)a2 + v6 + 16);
  v9 = (int *)type metadata accessor for ExtractionContext();
  v10 = v9[7];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_224F67760();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = v9[8];
  v15 = &v7[v14];
  v16 = &v8[v14];
  v17 = sub_224F675D4();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    sub_224E5AE10();
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = v9[9];
  v24 = &v7[v23];
  v25 = &v8[v23];
  v27 = *(_QWORD *)v25;
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = v27;
  *((_QWORD *)v24 + 1) = v26;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v9[10]] = *(_QWORD *)&v8[v9[10]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v9[11]] = *(_QWORD *)&v8[v9[11]];
  swift_release();
  v28 = a3[5];
  v29 = *(void **)((char *)a1 + v28);
  *(void **)((char *)a1 + v28) = *(void **)((char *)v36 + v28);

  v30 = a3[6];
  v31 = *(void **)((char *)a1 + v30);
  *(void **)((char *)a1 + v30) = *(void **)((char *)v36 + v30);

  v32 = a3[7];
  v33 = *(void **)((char *)a1 + v32);
  *(void **)((char *)a1 + v32) = *(void **)((char *)v36 + v32);

  return a1;
}

uint64_t sub_224EFD8F8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224EFD904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for RecordExtractionContext();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_224EFD980()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224EFD98C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for RecordExtractionContext();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for PostExtractionContext()
{
  uint64_t result;

  result = qword_2557E3278;
  if (!qword_2557E3278)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_224EFDA40()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RecordExtractionContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_224EFDAC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = a1;
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E1D00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  *(_QWORD *)(v2 + 96) = swift_task_alloc();
  *(_QWORD *)(v2 + 104) = type metadata accessor for RecordExtractionContext();
  *(_QWORD *)(v2 + 112) = swift_task_alloc();
  sub_224F6743C();
  *(_QWORD *)(v2 + 120) = swift_task_alloc();
  *(_QWORD *)(v2 + 128) = type metadata accessor for FHIRDateTime();
  *(_QWORD *)(v2 + 136) = swift_task_alloc();
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 160) = *(_QWORD *)(v1 + 48);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(v1 + 88);
  *(_QWORD *)(v2 + 184) = *(_QWORD *)(v1 + 104);
  return swift_task_switch();
}

uint64_t sub_224EFDBB8()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = v0[17];
  v2 = objc_msgSend((id)objc_opt_self(), sel_FHIRImmunizationStatus);
  v0[24] = v2;
  v3 = sub_224F67B80();
  v0[2] = v2;
  v0[25] = v4;
  v0[3] = 0x6574656C706D6F63;
  v0[4] = 0xE900000000000064;
  v0[5] = v3;
  v0[6] = v4;
  v0[7] = 0;
  v0[8] = 0;
  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v1);
  v5 = v0[17];
  if (*(_QWORD *)(v5 + 56) == 1)
  {
    if ((*(_BYTE *)(v5 + 19) & 1) != 0)
    {
      if (*(_BYTE *)(v5 + 17))
        v6 = 3;
      else
        v6 = 2;
    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = v0[15];
  v8 = v0[16];
  sub_224E5451C(0, (unint64_t *)&qword_2557E1D10);
  FHIRDateTime.asDateComponents()();
  v9 = (uint64_t *)(v5 + *(int *)(v8 + 32));
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain();
  v0[26] = sub_224F00474(v7, v10, v11, v6);
  sub_224DDEAA0(v5, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v13 = v0[13];
  v12 = v0[14];
  v15 = v0[11];
  v14 = v0[12];
  v0[27] = sub_224E5451C(0, &qword_2557E3010);
  sub_224DDB408(v15, v12, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v16 = sub_224F677D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
  v17 = v15 + *(int *)(v13 + 20);
  v0[28] = *(_QWORD *)(v17 + *(int *)(type metadata accessor for ExtractionContext() + 44));
  v18 = *(_QWORD *)(v17 + 16);
  swift_retain();
  v19 = (_QWORD *)swift_task_alloc();
  v0[29] = v19;
  *v19 = v0;
  v19[1] = sub_224EFDE68;
  return sub_224ED3090(5, v0[21], v0[22], 0, 0, v18);
}

uint64_t sub_224EFDE68(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_224EFDECC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;
  void *v16;

  v1 = *(void **)(v0 + 240);
  v2 = *(void **)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 184);
  v16 = *(void **)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(uint64_t **)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 96);
  v6 = objc_msgSend(v1, sel_codings);

  sub_224E5451C(0, (unint64_t *)&qword_2557E1648);
  v7 = sub_224F67D6C();

  *(_QWORD *)(v0 + 72) = v4;
  v8 = sub_224F6839C();
  v10 = v9;
  *(_QWORD *)(v0 + 80) = v3;
  v11 = sub_224F6839C();
  v13 = sub_224E7BBE0(v5, v15, 0, 0, v7, (uint64_t)v2, 0, (_QWORD *)(v0 + 16), v8, v10, v11, v12, 0, 0, 0, 0, 0, 0, 0,
          0,
          0,
          0,
          0,
          0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v13);
}

uint64_t sub_224EFE070(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)(v3 + 272) = a1;
  *(_QWORD *)(v3 + 280) = a2;
  *(_QWORD *)(v3 + 288) = type metadata accessor for FHIRExtractionContext();
  *(_QWORD *)(v3 + 296) = swift_task_alloc();
  *(_QWORD *)(v3 + 304) = type metadata accessor for ModelsR4.Immunization(0);
  *(_QWORD *)(v3 + 312) = swift_task_alloc();
  v4 = swift_task_alloc();
  v5 = *v2;
  v6 = v2[1];
  *(_QWORD *)(v3 + 320) = v4;
  *(_QWORD *)(v3 + 328) = v5;
  *(_QWORD *)(v3 + 336) = v6;
  v7 = *((_OWORD *)v2 + 6);
  *(_OWORD *)(v3 + 96) = *((_OWORD *)v2 + 5);
  *(_OWORD *)(v3 + 112) = v7;
  v8 = *((_OWORD *)v2 + 8);
  *(_OWORD *)(v3 + 128) = *((_OWORD *)v2 + 7);
  *(_OWORD *)(v3 + 144) = v8;
  v9 = *((_OWORD *)v2 + 2);
  *(_OWORD *)(v3 + 32) = *((_OWORD *)v2 + 1);
  *(_OWORD *)(v3 + 48) = v9;
  v10 = *((_OWORD *)v2 + 4);
  *(_OWORD *)(v3 + 64) = *((_OWORD *)v2 + 3);
  *(_OWORD *)(v3 + 80) = v10;
  return swift_task_switch();
}

uint64_t sub_224EFE128()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[42];
  v2 = v0[34];
  v0[2] = v0[41];
  v0[3] = v1;
  v3 = v2 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v4 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for ExtractionContext() + 44));
  v0[43] = v4;
  v5 = *(_QWORD *)(v3 + 16);
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc();
  v0[44] = v6;
  *v6 = v0;
  v6[1] = sub_224EFE1CC;
  return sub_224EFED68(v0[39], v4, v5);
}

uint64_t sub_224EFE1CC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 360) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_224EFE238()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void **)(v0 + 360);
  sub_224EFF680(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320));
  sub_224F672EC();
  swift_allocObject();
  sub_224F672E0();
  sub_224EFF6C4();
  v2 = sub_224F672D4();
  if (v1)
  {
    swift_release();
    if (qword_2557E0128 != -1)
      swift_once();
    v4 = sub_224F679B8();
    __swift_project_value_buffer(v4, (uint64_t)qword_2557FC958);
    v5 = v1;
    v6 = v1;
    v7 = sub_224F679AC();
    v8 = sub_224F67ED4();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v47 = v10;
      *(_DWORD *)v9 = 136315138;
      *(_QWORD *)(v0 + 256) = v1;
      v11 = v1;
      v12 = v1;
      sub_224E57260();
      sub_224F6848C();
      v13 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_224F68078();
      swift_unknownObjectRelease();
      v14 = sub_224F67BC8();
      v16 = v15;

      *(_QWORD *)(v0 + 224) = sub_224E76904(v14, v16, &v47);
      sub_224F68000();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_224DAC000, v7, v8, "SignedClinicalDataEUDCC.asClinicalRecord: error building Immunization. Error: %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22768EDE4](v10, -1, -1);
      MEMORY[0x22768EDE4](v9, -1, -1);

      if (!*(_QWORD *)(v0 + 360))
        goto LABEL_9;
    }
    else
    {

      if (!*(_QWORD *)(v0 + 360))
LABEL_9:
        sub_224DDEAA0(*(_QWORD *)(v0 + 320), type metadata accessor for ModelsR4.Immunization);
    }
    v38 = 0;
    goto LABEL_11;
  }
  v17 = v2;
  v18 = v3;
  v19 = *(void **)(v0 + 280);
  swift_release();
  sub_224DDE970(v17, v18);
  v20 = sub_224ED9650(v19);
  v42 = *(_QWORD *)(v0 + 336);
  v45 = v18;
  v46 = *(_QWORD *)(v0 + 328);
  v21 = v17;
  v22 = *(uint64_t **)(v0 + 320);
  v23 = *(int **)(v0 + 288);
  v24 = *(_QWORD *)(v0 + 296);
  v25 = *(_QWORD *)(v0 + 272);
  v43 = sub_224F073F8(v26);
  swift_bridgeObjectRelease();
  v27 = v20;
  v44 = sub_224F5749C();
  v29 = v28;
  sub_224DDB408(v25, v24, (uint64_t (*)(_QWORD))type metadata accessor for RecordExtractionContext);
  v30 = *v22;
  v31 = v22[1];
  v32 = v21;
  v33 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = objc_msgSend(v33, sel_primaryR4Version);
  v35 = (_QWORD *)(v24 + v23[5]);
  *v35 = v30;
  v35[1] = v31;
  v36 = (_QWORD *)(v24 + v23[6]);
  *v36 = v46;
  v36[1] = v42;
  *(_QWORD *)(v24 + v23[7]) = v34;
  v37 = (uint64_t *)(v24 + v23[8]);
  *v37 = v21;
  v37[1] = v45;
  v38 = sub_224EF2674(v24, v27, v43, v44, v29);
  v39 = *(_QWORD *)(v0 + 320);
  v40 = *(_QWORD *)(v0 + 296);

  sub_224DDE9B4(v32, v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_224DDEAA0(v40, (uint64_t (*)(_QWORD))type metadata accessor for FHIRExtractionContext);
  sub_224DDEAA0(v39, type metadata accessor for ModelsR4.Immunization);
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v38);
}

uint64_t sub_224EFEAD8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  swift_release();
  v1 = *(void **)(v0 + 360);
  if (qword_2557E0128 != -1)
    swift_once();
  v2 = sub_224F679B8();
  __swift_project_value_buffer(v2, (uint64_t)qword_2557FC958);
  v3 = v1;
  v4 = v1;
  v5 = sub_224F679AC();
  v6 = sub_224F67ED4();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v16 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v0 + 256) = v1;
    v9 = v1;
    v10 = v1;
    sub_224E57260();
    sub_224F6848C();
    v11 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_224F68078();
    swift_unknownObjectRelease();
    v12 = sub_224F67BC8();
    v14 = v13;

    *(_QWORD *)(v0 + 224) = sub_224E76904(v12, v14, &v16);
    sub_224F68000();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_224DAC000, v5, v6, "SignedClinicalDataEUDCC.asClinicalRecord: error building Immunization. Error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22768EDE4](v8, -1, -1);
    MEMORY[0x22768EDE4](v7, -1, -1);

    if (!*(_QWORD *)(v0 + 360))
      goto LABEL_7;
  }
  else
  {

    if (!*(_QWORD *)(v0 + 360))
LABEL_7:
      sub_224DDEAA0(*(_QWORD *)(v0 + 320), type metadata accessor for ModelsR4.Immunization);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_224EFED68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v4 + 80) = a2;
  *(_QWORD *)(v4 + 88) = a3;
  *(_QWORD *)(v4 + 72) = a1;
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  *(_QWORD *)(v4 + 96) = swift_task_alloc();
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v5);
  *(_QWORD *)(v4 + 104) = swift_task_alloc();
  *(_QWORD *)(v4 + 112) = swift_task_alloc();
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], v5);
  *(_QWORD *)(v4 + 120) = swift_task_alloc();
  v6 = type metadata accessor for Identifier();
  *(_QWORD *)(v4 + 128) = v6;
  *(_QWORD *)(v4 + 136) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 144) = swift_task_alloc();
  v7 = type metadata accessor for Reference();
  *(_QWORD *)(v4 + 152) = v7;
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 168) = swift_task_alloc();
  v8 = type metadata accessor for FHIRDateTime();
  *(_QWORD *)(v4 + 176) = v8;
  *(_QWORD *)(v4 + 184) = *(_QWORD *)(v8 - 8);
  v9 = swift_task_alloc();
  v10 = *(_QWORD *)(v3 + 16);
  v11 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v4 + 192) = v9;
  *(_QWORD *)(v4 + 200) = v10;
  *(_QWORD *)(v4 + 208) = v11;
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(v3 + 32);
  v12 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v4 + 232) = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v4 + 240) = v12;
  *(_OWORD *)(v4 + 248) = *(_OWORD *)(v3 + 80);
  *(_QWORD *)(v4 + 264) = *(_QWORD *)(v3 + 96);
  *(_OWORD *)(v4 + 272) = *(_OWORD *)(v3 + 104);
  *(_QWORD *)(v4 + 288) = *(_QWORD *)(v3 + 120);
  return swift_task_switch();
}

uint64_t sub_224EFEF14()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[24];
  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[37] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = sub_224EFF024;
  return sub_224ED44CC((uint64_t)(v0 + 2), 5, v0[32], v0[33], 0, 0, v0[11]);
}

uint64_t sub_224EFF024()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224EFF078()
{
  uint64_t v0;
  _QWORD *v1;

  *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 320) = *(_QWORD *)(v0 + 32);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 328) = v1;
  *v1 = v0;
  v1[1] = sub_224EFF0E0;
  return sub_224ED4DB8(*(_QWORD *)(v0 + 168), 4, *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 88));
}

uint64_t sub_224EFF0E0()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;

  v1 = *v0;
  v2 = (uint64_t)(*v0 + 5);
  v3 = *v0;
  swift_task_dealloc();
  v4 = (_QWORD *)swift_task_alloc();
  v1[42] = (uint64_t)v4;
  *v4 = v3;
  v4[1] = sub_224EFF164;
  return sub_224ED44CC(v2, 0, v1[35], v1[36], 0, 0, v1[11]);
}

uint64_t sub_224EFF164()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224EFF1B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  void (*v17)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = v0;
  v39 = *(_QWORD *)(v0 + 320);
  v38 = *(_OWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 208);
  v33 = *(_QWORD *)(v0 + 216);
  v34 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 200);
  v41 = *(_QWORD *)(v0 + 192);
  v29 = *(_QWORD *)(v0 + 184);
  v30 = *(_QWORD *)(v0 + 176);
  v44 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 144);
  v35 = *(_QWORD *)(v0 + 160);
  v36 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v1 + 120);
  v6 = *(_QWORD *)(v1 + 128);
  v40 = *(_QWORD *)(v1 + 112);
  v42 = *(_QWORD *)(v1 + 104);
  v43 = *(_QWORD *)(v1 + 96);
  v8 = *(_QWORD *)(v1 + 72);
  v32 = *(_OWORD *)(v1 + 40);
  v31 = *(_QWORD *)(v1 + 56);
  sub_224F67B80();
  sub_224F675B0();
  swift_bridgeObjectRelease();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 24) = xmmword_224F71250;
  v9 = (_QWORD *)(v4 + *(int *)(v6 + 28));
  *v9 = v3;
  v9[1] = v2;
  v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
  sub_224DDEA0C(0, &qword_2557E15B0, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v11 = (int *)type metadata accessor for Coding();
  v12 = *(unsigned __int8 *)(*((_QWORD *)v11 - 1) + 80);
  v13 = (v12 + 32) & ~v12;
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_224F6D8B0;
  v14 = v37 + v13;
  swift_bridgeObjectRetain();
  sub_224F675B0();
  sub_224DFAC88(v7, v37 + v13, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  *(_OWORD *)(v14 + v11[5]) = xmmword_224F735A0;
  *(_OWORD *)(v14 + v11[6]) = xmmword_224F735B0;
  v15 = (_QWORD *)(v37 + v13 + v11[7]);
  sub_224DDEA0C(0, &qword_2557E32C8, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v10);
  *v15 = 0;
  v15[1] = 0;
  v16 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_224F6D8B0;
  sub_224DDB408(v4, v28 + v16, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
  sub_224DDB408(v41, v40, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v17 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56);
  v17(v40, 0, 1, v30);
  sub_224EFF70C();
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_224F6D8B0;
  *(_QWORD *)(v18 + 32) = v33;
  *(_BYTE *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = 0;
  *(_QWORD *)(v18 + 56) = 0;
  *(_QWORD *)(v18 + 64) = v34;
  *(_BYTE *)(v18 + 72) = 0;
  *(_QWORD *)(v18 + 80) = 0;
  *(_QWORD *)(v18 + 88) = 0;
  *(_OWORD *)(v18 + 96) = v32;
  *(_QWORD *)(v18 + 112) = v31;
  sub_224DDB408(v41, v42, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  v17(v42, 0, 1, v30);
  sub_224DDB408(v44, v43, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v43, 0, 1, v36);
  v19 = (int *)type metadata accessor for ModelsR4.Immunization(0);
  *(_QWORD *)(v1 + 64) = v19;
  sub_224EFF760();
  v20 = sub_224F67BC8();
  v22 = v21;
  sub_224DDEAA0(v4, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
  sub_224DDEAA0(v44, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224DDEAA0(v41, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  *(_QWORD *)v8 = v20;
  *(_QWORD *)(v8 + 8) = v22;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_OWORD *)(v8 + 32) = xmmword_224F735C0;
  *(_QWORD *)(v8 + 48) = 0xE900000000000064;
  *(_QWORD *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 64) = 0;
  *(_BYTE *)(v8 + 68) = 1;
  *(_QWORD *)(v8 + 72) = 0;
  sub_224DFAC88(v40, v8 + v19[10], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  *(_QWORD *)(v8 + v19[11]) = v18;
  sub_224DFAC88(v42, v8 + v19[12], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v23 = v8 + v19[13];
  *(_OWORD *)v23 = v38;
  *(_QWORD *)(v23 + 16) = v39;
  sub_224DFAC88(v43, v8 + v19[14], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  *(_BYTE *)(v8 + v19[15]) = 1;
  v24 = (_QWORD *)(v8 + v19[16]);
  *v24 = 0;
  v24[1] = 0;
  *(_QWORD *)(v8 + v19[17]) = 0;
  *(_BYTE *)(v8 + v19[18]) = 2;
  v25 = (uint64_t *)(v8 + v19[19]);
  *v25 = v28;
  v25[1] = 0;
  v25[2] = 0;
  v25[3] = v37;
  v25[5] = 0;
  v25[6] = 0;
  v25[4] = 0;
  v26 = (_QWORD *)(v8 + v19[20]);
  *v26 = 0;
  v26[1] = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_224EFF680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModelsR4.Immunization(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_224EFF6C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E0A00;
  if (!qword_2557E0A00)
  {
    v1 = type metadata accessor for ModelsR4.Immunization(255);
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Immunization, v1);
    atomic_store(result, (unint64_t *)&qword_2557E0A00);
  }
  return result;
}

void sub_224EFF70C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E32D0)
  {
    v0 = sub_224F683A8();
    if (!v1)
      atomic_store(v0, &qword_2557E32D0);
  }
}

unint64_t sub_224EFF760()
{
  unint64_t result;

  result = qword_2557E05C8;
  if (!qword_2557E05C8)
  {
    type metadata accessor for ModelsR4.Immunization(255);
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E05C8);
  }
  return result;
}

id static HKSignedClinicalDataSubject.unknown()()
{
  return sub_224EFF7F4(0xD000000000000010, 0x8000000224F828C0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

id sub_224EFF7F4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  v37 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  if (a5)
  {
    v36 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    if (a6)
      goto LABEL_3;
  }
  else
  {
    v36 = 0;
    if (a6)
    {
LABEL_3:
      v35 = (void *)sub_224F67D60();
      swift_bridgeObjectRelease();
      if (a7)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  v35 = 0;
  if (a7)
  {
LABEL_4:
    v34 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    v21 = a9;
    if (a8)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v34 = 0;
  v21 = a9;
  if (a8)
  {
LABEL_5:
    sub_224E68104();
    v33 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    v22 = a11;
    if (v21)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  v33 = 0;
  v22 = a11;
  if (v21)
  {
LABEL_6:
    v23 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    v24 = a13;
    if (v22)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v23 = 0;
  v24 = a13;
  if (v22)
  {
LABEL_7:
    v25 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v26 = a15;
    if (v24)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v25 = 0;
  v26 = a15;
  if (v24)
  {
LABEL_8:
    v27 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v28 = a17;
    if (v26)
      goto LABEL_9;
LABEL_18:
    v29 = 0;
    if (v28)
      goto LABEL_10;
LABEL_19:
    v30 = 0;
    goto LABEL_20;
  }
LABEL_17:
  v27 = 0;
  v28 = a17;
  if (!v26)
    goto LABEL_18;
LABEL_9:
  v29 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  if (!v28)
    goto LABEL_19;
LABEL_10:
  v30 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
LABEL_20:
  v31 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_subjectWithFullName_birthDate_gender_emailAddresses_phoneNumbers_identifiers_addresses_maritalStatus_race_ethnicity_birthSex_, v37, a3, v36, v35, v34, v33, v23, v25, v27, v29, v30);

  return v31;
}

id FHIRDateTime.asMedicalDate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = sub_224F6743C();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = 0;
  if (*(_QWORD *)(v0 + 56) == 1)
  {
    if (*(_BYTE *)(v0 + 19) == 1)
    {
      if (*(_BYTE *)(v0 + 17))
        v4 = 3;
      else
        v4 = 2;
    }
    else
    {
      v4 = 1;
    }
  }
  sub_224EFFB58();
  FHIRDateTime.asDateComponents()();
  v5 = (uint64_t *)(v0 + *(int *)(type metadata accessor for FHIRDateTime() + 32));
  v7 = *v5;
  v6 = v5[1];
  swift_bridgeObjectRetain();
  return sub_224F00474((uint64_t)v3, v7, v6, v4);
}

unint64_t sub_224EFFB58()
{
  unint64_t result;

  result = qword_2557E1D10;
  if (!qword_2557E1D10)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E1D10);
  }
  return result;
}

uint64_t FHIRDateTime.asNSDate()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v41 = a1;
  v2 = v1;
  sub_224E63218(0, &qword_2557E27F0, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v3);
  v46 = (char *)&v40 - v4;
  sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)&v40 - v9;
  sub_224E63218(0, &qword_2557E32E0, (void (*)(uint64_t))MEMORY[0x24BDCF2D8]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v40 - v11;
  v13 = sub_224F6743C();
  v47 = *(_QWORD *)(v13 - 8);
  v48 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v43 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_224F677E4();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_224F67820();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x24BDCEF70], v15);
  sub_224F677F0();
  v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  v24 = v19;
  v23(v18, v15);
  v25 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v44 = v22;
  v25(v12, v22, v19);
  v45 = v20;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v12, 0, 1, v19);
  v26 = type metadata accessor for FHIRDateTime();
  sub_224F00854(v2 + *(int *)(v26 + 28), (uint64_t)v8);
  v27 = sub_224F67874();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v8, 1, v27) == 1)
  {
    sub_224F6782C();
    sub_224E7601C((uint64_t)v8, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  }
  else
  {
    v29 = v42;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v42, v8, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v29, 0, 1, v27);
  }
  v30 = v43;
  sub_224F67430();
  v31 = (uint64_t)v46;
  if ((*(_BYTE *)(v2 + 17) & 1) == 0)
    sub_224F67418();
  if ((*(_BYTE *)(v2 + 19) & 1) == 0)
    sub_224F673F4();
  v32 = *(_QWORD *)(v2 + 56);
  if (v32 != 1)
  {
    sub_224F6740C();
    sub_224F67424();
  }
  sub_224F67400();
  v33 = sub_224F67760();
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v31, 1, v33) == 1)
  {
    sub_224E7601C(v31, &qword_2557E27F0, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    type metadata accessor for DateExpressionError();
    sub_224F008E4();
    swift_allocError();
    v36 = v47;
    v35 = v48;
    (*(void (**)(uint64_t, char *, uint64_t))(v47 + 16))(v37, v30, v48);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v30, v35);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v44, v24);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v41, v31, v33);
    if (v32 != 1)
    {
      v39 = (void *)sub_224F67F7C();
      sub_224F67E68();

      sub_224F676C4();
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v30, v48);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v44, v24);
  }
}

id FHIRDate.asMedicalDate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, uint64_t);
  id v15;
  id v16;
  uint64_t v18;
  id v19;
  char v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v1 = sub_224F6743C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_BYTE *)(v0 + 8);
  v6 = *(_BYTE *)(v0 + 9);
  v7 = *(_BYTE *)(v0 + 10);
  v8 = *(_BYTE *)(v0 + 11);
  v9 = 2;
  if (v6)
    v9 = 3;
  if (*(_BYTE *)(v0 + 11))
    v10 = v9;
  else
    v10 = 1;
  v19 = *(id *)v0;
  v20 = v5;
  v21 = v6;
  v22 = v7;
  v23 = v8;
  FHIRDate.asDateComponents()((uint64_t)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = (void *)sub_224F673E8();
  v12 = (void *)objc_opt_self();
  v19 = 0;
  v13 = objc_msgSend(v12, sel_medicalDateFromComponents_originalTimeZoneString_form_error_, v11, 0, v10, &v19);

  if (v13)
  {
    v14 = *(void (**)(char *, uint64_t))(v2 + 8);
    v15 = v19;
    v14(v4, v1);
  }
  else
  {
    v16 = v19;
    sub_224F67544();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v13;
}

uint64_t FHIRDate.asDateComponents()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a1;
  sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v14 - v2;
  v4 = sub_224F677E4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E32E0, (void (*)(uint64_t))MEMORY[0x24BDCF2D8]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v14 - v9;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDCEF70], v4);
  sub_224F677F0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v11 = sub_224F67820();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 0, 1, v11);
  v12 = sub_224F67874();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v3, 1, 1, v12);
  return sub_224F67430();
}

id sub_224F00474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  id v13;
  id v14;
  uint64_t v15;
  id v17[2];

  v17[1] = *(id *)MEMORY[0x24BDAC8D0];
  v7 = (void *)sub_224F673E8();
  if (a3)
  {
    v8 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  v17[0] = 0;
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_medicalDateFromComponents_originalTimeZoneString_form_error_, v7, v8, a4, v17);

  v10 = v17[0];
  if (v9)
  {
    v11 = sub_224F6743C();
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v13 = v10;
    v12(a1, v11);
  }
  else
  {
    v14 = v17[0];
    sub_224F67544();

    swift_willThrow();
    v15 = sub_224F6743C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  }
  return v9;
}

uint64_t FHIRDateTime.asDateComponents()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v14 - v2;
  v4 = sub_224F677E4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E32E0, (void (*)(uint64_t))MEMORY[0x24BDCF2D8]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - v9;
  if (*(_QWORD *)(v0 + 56) != 1)
    sub_224F0092C();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDCEF70], v4);
  sub_224F677F0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v11 = sub_224F67820();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 0, 1, v11);
  v12 = sub_224F67874();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v3, 1, 1, v12);
  return sub_224F67430();
}

uint64_t sub_224F00854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E63218(0, &qword_2557E0318, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DateExpressionError()
{
  uint64_t result;

  result = qword_2557E3368;
  if (!qword_2557E3368)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_224F008E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E32E8;
  if (!qword_2557E32E8)
  {
    v1 = type metadata accessor for DateExpressionError();
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for DateExpressionError, v1);
    atomic_store(result, (unint64_t *)&qword_2557E32E8);
  }
  return result;
}

void sub_224F0092C()
{
  void *v0;
  id v1;
  double v2;
  double v3;
  double v4;

  v0 = (void *)sub_224F67F7C();
  v1 = objc_msgSend(v0, sel_integerValue);
  objc_msgSend(v0, sel_doubleValue);
  v3 = v2;

  v4 = (v3 - (double)(uint64_t)v1) * 1000000000.0;
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v4 >= 9.22337204e18)
LABEL_7:
    __break(1u);
}

uint64_t FHIRDateTime.compare(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v10)(char *, uint64_t);
  _QWORD v11[2];

  v2 = sub_224F67760();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v11 - v7;
  FHIRDateTime.asNSDate()((uint64_t)v11 - v7);
  if (!v1)
  {
    FHIRDateTime.asNSDate()((uint64_t)v6);
    v0 = sub_224F67748();
    v10 = *(void (**)(char *, uint64_t))(v3 + 8);
    v10(v6, v2);
    v10(v8, v2);
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for DateExpressionError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_224F67760();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      sub_224F00BE4();
      v8 = *(int *)(v7 + 48);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = sub_224F6743C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      v13 = sub_224F6743C();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_224F00BE4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E32F0)
  {
    sub_224F67760();
    sub_224F6743C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E32F0);
  }
}

uint64_t destroy for DateExpressionError(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = sub_224F67760();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
    sub_224F00BE4();
    a1 += *(int *)(v3 + 48);
  }
  v4 = sub_224F6743C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t initializeWithCopy for DateExpressionError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_224F67760();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    sub_224F00BE4();
    v6 = *(int *)(v5 + 48);
    v7 = a1 + v6;
    v8 = a2 + v6;
    v9 = sub_224F6743C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    v10 = sub_224F6743C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for DateExpressionError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_224F00E6C(a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = sub_224F67760();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
      sub_224F00BE4();
      v6 = *(int *)(v5 + 48);
      v7 = a1 + v6;
      v8 = a2 + v6;
      v9 = sub_224F6743C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      v10 = sub_224F6743C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_224F00E6C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DateExpressionError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for DateExpressionError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_224F67760();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
    sub_224F00BE4();
    v6 = *(int *)(v5 + 48);
    v7 = a1 + v6;
    v8 = a2 + v6;
    v9 = sub_224F6743C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  }
  else
  {
    v10 = sub_224F6743C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for DateExpressionError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_224F00E6C(a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = sub_224F67760();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
      sub_224F00BE4();
      v6 = *(int *)(v5 + 48);
      v7 = a1 + v6;
      v8 = a2 + v6;
      v9 = sub_224F6743C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    }
    else
    {
      v10 = sub_224F6743C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_224F01058()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  _QWORD v3[6];

  result = sub_224F6743C();
  if (v1 <= 0x3F)
  {
    v3[4] = *(_QWORD *)(result - 8) + 64;
    result = sub_224F67760();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v3[5] = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_224F010F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  void (*v9)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v16[5];
  _QWORD v17[6];

  sub_224E63218(0, &qword_2557E1E88, (void (*)(uint64_t))MEMORY[0x24BEE2710]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v16[-1] - v2;
  v4 = sub_224F68144();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224EFC0DC(v0, (uint64_t)v17);
  v8 = swift_dynamicCast();
  v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  if (v8)
  {
    v9(v3, 0, 1, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    v10 = DecodingError.hdhr_friendlyDescription.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    v9(v3, 1, 1, v4);
    sub_224E7601C((uint64_t)v3, &qword_2557E1E88, (void (*)(uint64_t))MEMORY[0x24BEE2710]);
    v17[3] = &type metadata for SignedClinicalDataQRError;
    v17[4] = sub_224F062D8();
    v17[0] = swift_allocObject();
    sub_224EFC0DC(v0, v17[0] + 16);
    __swift_project_boxed_opaque_existential_1(v17, (uint64_t)&type metadata for SignedClinicalDataQRError);
    SignedClinicalDataQRError.errorDescription.getter();
    v10 = v11;
    v13 = v12;
    sub_224DE5E88((uint64_t)v17, (uint64_t)v16);
    if (!v13)
    {
      __swift_project_boxed_opaque_existential_1(v16, v16[3]);
      sub_224E5721C();
      v10 = sub_224F684C8();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  return v10;
}

void *sub_224F012E4(void *a1, uint64_t a2)
{
  return sub_224F042E4(a1, a2);
}

id sub_224F01304(void *a1, uint64_t a2)
{
  return sub_224F043F4(a1, a2);
}

id sub_224F01324(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(id, uint64_t))
{
  id v9;
  id v10;
  void *v11;

  v9 = a3;
  v10 = a1;
  v11 = (void *)a6(v9, a4);

  return v11;
}

uint64_t sub_224F013D0(unint64_t a1, uint64_t a2)
{
  return sub_224F04D30(a1, a2);
}

uint64_t sub_224F014B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_2557E33A8 + dword_2557E33A8);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_224ECF198;
  return v7(a1, a2);
}

uint64_t sub_224F01520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[12] = a3;
  v4[13] = a4;
  v4[11] = a2;
  sub_224F05FCC();
  v4[14] = v5;
  v4[15] = *(_QWORD *)(v5 - 8);
  v4[16] = swift_task_alloc();
  sub_224E63218(0, &qword_2557E3168, (void (*)(uint64_t))MEMORY[0x24BEE6990]);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F015C4()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  id v27;

  v1 = v0;
  v2 = v0[12];
  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease();
    sub_224E5451C(0, &qword_2557E3438);
    sub_224E57260();
    sub_224F67E38();
    v22 = (_QWORD *)swift_task_alloc();
    v1[19] = v22;
    *v22 = v1;
    v22[1] = sub_224F01928;
    return sub_224F67E44();
  }
  swift_bridgeObjectRetain();
  v1 = v0;
  result = sub_224F681D4();
  v3 = result;
  if (!result)
    goto LABEL_18;
LABEL_3:
  if (v3 >= 1)
  {
    v5 = 0;
    v25 = v2 & 0xC000000000000001;
    v23 = v1[12] + 32;
    v24 = v1 + 2;
    v26 = v3;
    do
    {
      if (v25)
        v7 = (id)MEMORY[0x22768E1CC](v5, v1[12]);
      else
        v7 = *(id *)(v23 + 8 * v5);
      v8 = v7;
      v9 = v1[17];
      v10 = v1[18];
      v11 = sub_224F67E20();
      v12 = *(_QWORD *)(v11 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = 0;
      v13[3] = 0;
      v13[4] = v8;
      v14 = v1;
      v15 = (void (*)(uint64_t))MEMORY[0x24BEE6990];
      sub_224E75F34(v10, v9, &qword_2557E3168, (void (*)(uint64_t))MEMORY[0x24BEE6990]);
      LODWORD(v10) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11);
      v27 = v8;
      v16 = v14[17];
      if ((_DWORD)v10 == 1)
      {
        sub_224E7601C(v14[17], &qword_2557E3168, v15);
      }
      else
      {
        sub_224F67E14();
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v11);
      }
      v1 = v14;
      if (v13[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        v17 = sub_224F67DCC();
        v19 = v18;
        swift_unknownObjectRelease();
      }
      else
      {
        v17 = 0;
        v19 = 0;
      }
      v20 = *(_QWORD *)v14[11];
      sub_224E5451C(0, &qword_2557E3438);
      v21 = (_QWORD *)(v19 | v17);
      if (v19 | v17)
      {
        v21 = v24;
        *v24 = 0;
        v24[1] = 0;
        v14[4] = v17;
        v14[5] = v19;
      }
      ++v5;
      v6 = v14[18];
      v14[6] = 1;
      v14[7] = v21;
      v14[8] = v20;
      swift_task_create();

      swift_release();
      sub_224E7601C(v6, &qword_2557E3168, (void (*)(uint64_t))MEMORY[0x24BEE6990]);
    }
    while (v26 != v5);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t sub_224F01928()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F0198C()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  id v3;
  _QWORD *v4;

  v1 = *(void **)(v0 + 72);
  if (v1)
  {
    v2 = *(_QWORD **)(v0 + 104);
    v3 = v1;
    MEMORY[0x22768DE24]();
    if (*(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();

    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v4;
    *v4 = v0;
    v4[1] = sub_224F01AB8;
    return sub_224F67E44();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_224F01AB8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F01B1C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F01B80(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_224F01BD0;
  return HDHRSOriginalSignedClinicalDataRecord.convert()();
}

uint64_t sub_224F01BD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch();
}

uint64_t sub_224F01C4C()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F01DA0(int a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t);

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  sub_224E5451C(0, &qword_2557E3430);
  v7 = sub_224F67D6C();
  v4[4] = v7;
  v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_2557E33A8 + dword_2557E33A8);
  v8 = a4;
  v9 = (_QWORD *)swift_task_alloc();
  v4[5] = v9;
  *v9 = v4;
  v9[1] = sub_224F01E5C;
  return v11(v7, a2);
}

uint64_t sub_224F01E5C(void *a1)
{
  void *v1;
  uint64_t *v2;
  void *v3;
  void *v5;
  uint64_t v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  void *v8;

  v3 = v1;
  v5 = *(void **)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  v7 = *(void (***)(_QWORD, _QWORD, _QWORD))(v6 + 24);
  if (v3)
  {
    v8 = (void *)sub_224F67538();

    ((void (**)(_QWORD, _QWORD, void *))v7)[2](v7, 0, v8);
    _Block_release(v7);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v7)[2](*(_QWORD *)(v6 + 24), a1, 0);
    _Block_release(v7);

  }
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_224F01F28(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_2557E33B8 + dword_2557E33B8);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_224F06368;
  return v5(a1);
}

uint64_t sub_224F01F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  sub_224F05FCC();
  v3[15] = v4;
  v3[16] = *(_QWORD *)(v4 - 8);
  v3[17] = swift_task_alloc();
  sub_224E63218(0, &qword_2557E3168, (void (*)(uint64_t))MEMORY[0x24BEE6990]);
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  return swift_task_switch();
}

void sub_224F0202C()
{
  uint64_t v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  id v15;
  id v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v1 = objc_msgSend(*(id *)(v0 + 112), sel_contextItems);
  sub_224E5451C(0, &qword_2557E3470);
  v2 = sub_224F67D6C();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_224F681D4();
    swift_bridgeObjectRelease();
    if (v3)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 72) = MEMORY[0x24BEE4AF8];
    sub_224E5451C(0, &qword_2557E3438);
    sub_224E57260();
    sub_224F67E38();
    v24 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v24;
    *v24 = v0;
    v24[1] = sub_224F023C8;
    sub_224F67E44();
    return;
  }
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
    goto LABEL_17;
LABEL_3:
  if (v3 >= 1)
  {
    v4 = 0;
    v25 = v2 & 0xC000000000000001;
    v26 = v3;
    v27 = v2;
    while (1)
    {
      if (v25)
        v6 = (id)MEMORY[0x22768E1CC](v4, v2);
      else
        v6 = *(id *)(v2 + 8 * v4 + 32);
      v7 = v6;
      v9 = *(_QWORD *)(v0 + 144);
      v8 = *(_QWORD *)(v0 + 152);
      v10 = *(void **)(v0 + 112);
      v11 = sub_224F67E20();
      v12 = *(_QWORD *)(v11 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v8, 1, 1, v11);
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = 0;
      v14 = v13 + 2;
      v13[3] = 0;
      v13[4] = v7;
      v13[5] = v10;
      sub_224E75F34(v8, v9, &qword_2557E3168, (void (*)(uint64_t))MEMORY[0x24BEE6990]);
      LODWORD(v8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11);
      v15 = v7;
      v16 = v10;
      v17 = *(_QWORD *)(v0 + 144);
      if ((_DWORD)v8 == 1)
      {
        v18 = (void (*)(uint64_t))MEMORY[0x24BEE6990];
        sub_224E7601C(*(_QWORD *)(v0 + 144), &qword_2557E3168, (void (*)(uint64_t))MEMORY[0x24BEE6990]);
        if (!*v14)
          goto LABEL_13;
      }
      else
      {
        sub_224F67E14();
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v17, v11);
        v18 = (void (*)(uint64_t))MEMORY[0x24BEE6990];
        if (!*v14)
        {
LABEL_13:
          v19 = 0;
          v21 = 0;
          goto LABEL_14;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      v19 = sub_224F67DCC();
      v21 = v20;
      swift_unknownObjectRelease();
LABEL_14:
      v22 = **(_QWORD **)(v0 + 104);
      sub_224E5451C(0, &qword_2557E3438);
      v23 = v21 | v19;
      if (v21 | v19)
      {
        v23 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v19;
        *(_QWORD *)(v0 + 40) = v21;
      }
      ++v4;
      v5 = *(_QWORD *)(v0 + 152);
      *(_QWORD *)(v0 + 48) = 1;
      *(_QWORD *)(v0 + 56) = v23;
      *(_QWORD *)(v0 + 64) = v22;
      swift_task_create();

      swift_release();
      sub_224E7601C(v5, &qword_2557E3168, v18);
      v2 = v27;
      if (v26 == v4)
        goto LABEL_17;
    }
  }
  __break(1u);
}

uint64_t sub_224F023C8()
{
  uint64_t v0;

  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_224F02430()
{
  uint64_t v0;
  void *v1;
  id v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = *(void **)(v0 + 80);
  if (v1)
  {
    v2 = v1;
    MEMORY[0x22768DE24]();
    if (*(_QWORD *)((*(_QWORD *)(v0 + 72) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 72) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      sub_224F67D90();
    sub_224F67D9C();
    sub_224F67D84();

    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v3;
    *v3 = v0;
    v3[1] = sub_224F02560;
    return sub_224F67E44();
  }
  else
  {
    v5 = *(_QWORD **)(v0 + 96);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    *v5 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_224F02560()
{
  uint64_t v0;

  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_224F025C8()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F0262C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  *(_QWORD *)(v5 + 16) = a1;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v7;
  *v7 = v5;
  v7[1] = sub_224F02684;
  return HDHRSSignedClinicalDataProcessingContext.process(using:)(a5);
}

uint64_t sub_224F02684(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch();
}

uint64_t HDHRSSignedClinicalDataProcessingContext.process(using:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[16] = a1;
  v2[17] = v1;
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v2[18] = swift_task_alloc();
  v3 = sub_224F67760();
  v2[19] = v3;
  v2[20] = *(_QWORD *)(v3 - 8);
  v2[21] = swift_task_alloc();
  type metadata accessor for ExtractionContext();
  v2[22] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224F027B0()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v48;

  v1 = objc_msgSend(*(id *)(v0 + 136), sel_metadata);
  if (v1)
  {
    v2 = v1;
    sub_224E54308();
    v3 = sub_224F67AF0();

  }
  else
  {
    v3 = MEMORY[0x24BEE4B00];
  }
  v4 = objc_msgSend(*(id *)(v0 + 128), sel_countryCode);
  if (v4)
  {
    v5 = v4;
    v6 = sub_224F67B80();
    v8 = v7;

    if (!v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    v9 = MEMORY[0x24BEE0D00];
    v10 = sub_224F67B80();
    v12 = v11;
    *(_QWORD *)(v0 + 88) = v9;
    *(_QWORD *)(v0 + 64) = v6;
    *(_QWORD *)(v0 + 72) = v8;
    sub_224E543B4((_OWORD *)(v0 + 64), (_OWORD *)(v0 + 96));
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v48 = v3;
    v14 = *(_QWORD *)(v0 + 120);
    v15 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 96, v14);
    v16 = *(_QWORD *)(v14 - 8);
    v17 = (uint64_t *)swift_task_alloc();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(v17, v15, v14);
    sub_224F032E4(*v17, v17[1], v10, v12, isUniquelyReferenced_nonNull_native, &v48);
    __swift_destroy_boxed_opaque_existential_1(v0 + 96);
    swift_task_dealloc();
    v3 = v48;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v3 && *(_QWORD *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    v18 = v3;
    goto LABEL_12;
  }
LABEL_11:
  v18 = 0;
LABEL_12:
  *(_QWORD *)(v0 + 184) = v18;
  v20 = *(void **)(v0 + 128);
  v19 = *(void **)(v0 + 136);
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v20, sel_receivedDate);
  sub_224F6773C();

  v22 = objc_msgSend(v19, sel_sourceURL);
  v23 = *(_QWORD *)(v0 + 144);
  if (v22)
  {
    v24 = v22;
    sub_224F67598();

    v25 = sub_224F675D4();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v23, 0, 1, v25);
  }
  else
  {
    v26 = sub_224F675D4();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v23, 1, 1, v26);
  }
  v28 = *(_QWORD *)(v0 + 168);
  v27 = *(char **)(v0 + 176);
  v29 = *(_QWORD *)(v0 + 152);
  v30 = *(_QWORD *)(v0 + 160);
  v32 = *(void **)(v0 + 136);
  v31 = *(_QWORD *)(v0 + 144);
  v33 = objc_msgSend(*(id *)(v0 + 128), sel_options);
  swift_bridgeObjectRetain();
  sub_224EE9EA8(v28, v31, (uint64_t)v33, 0, v18, v27);
  swift_bridgeObjectRelease();
  sub_224E7601C(v31, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
  v34 = objc_msgSend(v32, sel_sourceType);
  v35 = objc_msgSend(v32, sel_rawData);
  v36 = sub_224F67658();
  v38 = v37;

  sub_224E5BD28(v36, v38, (uint64_t)v34, (uint64_t *)(v0 + 16));
  v39 = *(void **)(v0 + 136);
  sub_224DDE9B4(v36, v38);
  v40 = *(_QWORD *)(v0 + 40);
  v41 = *(_QWORD *)(v0 + 56);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v40);
  v42 = objc_msgSend(v39, sel_rawData);
  v43 = sub_224F67658();
  v45 = v44;

  *(_QWORD *)(v0 + 192) = v43;
  *(_QWORD *)(v0 + 200) = v45;
  v46 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 208) = v46;
  *v46 = v0;
  v46[1] = sub_224F02BDC;
  return sub_224E54748(*(_QWORD *)(v0 + 176), v43, v45, v40, v41);
}

uint64_t sub_224F02BDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD **)v2;
  *(_QWORD *)(*(_QWORD *)v2 + 216) = v1;
  swift_task_dealloc();
  v5 = v4[24];
  v6 = v4[25];
  if (!v1)
    v4[28] = a1;
  sub_224DDE9B4(v5, v6);
  return swift_task_switch();
}

uint64_t sub_224F02C5C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v1 = *(void **)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v4);
  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v3, v4, v5);
  v7 = objc_msgSend(v1, sel_originalRecord);
  v8 = sub_224E65040(v6);

  v9 = objc_msgSend(v1, sel_mainRecord);
  v10 = sub_224F06370(v6);

  v11 = objc_msgSend(v1, sel_copyWithOriginalRecord_mainRecord_, v8, v10);
  sub_224F05B20(v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v11);
}

uint64_t sub_224F02DA0()
{
  uint64_t v0;

  sub_224F05B20(*(_QWORD *)(v0 + 176));
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F02F48(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  id v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t);

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v10 = (uint64_t (*)(uint64_t))((char *)&dword_2557E33B8 + dword_2557E33B8);
  v6 = a1;
  v7 = a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_224F02FD4;
  return v10((uint64_t)v6);
}

uint64_t sub_224F02FD4(void *a1)
{
  void *v1;
  uint64_t *v2;
  void *v3;
  void *v5;
  void *v6;
  uint64_t v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;

  v3 = v1;
  v6 = *(void **)(*v2 + 16);
  v5 = *(void **)(*v2 + 24);
  v7 = *v2;
  swift_task_dealloc();

  v8 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 32);
  if (v3)
  {
    v9 = (void *)sub_224F67538();

    ((void (**)(_QWORD, _QWORD, void *))v8)[2](v8, 0, v9);
    _Block_release(v8);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v8)[2](v8, a1, 0);
    _Block_release(v8);

  }
  return (*(uint64_t (**)(void))(v7 + 8))();
}

void *HKSignedClinicalDataQRRepresentation.asProcessingContext()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v14[3];
  uint64_t v15;
  uint64_t v16;

  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v14 - v3;
  v5 = sub_224E5BAE8((uint64_t)v0, (uint64_t)objc_msgSend(v0, sel_sourceType));
  if (!v1)
  {
    v7 = (uint64_t)v5;
    v8 = v6;
    sub_224E5BD28((uint64_t)v5, v6, (uint64_t)objc_msgSend(v0, sel_sourceType), v14);
    v9 = v15;
    v10 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    v11 = sub_224F675D4();
    v12 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v4, 1, 1, v11);
    v0 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, char *, _QWORD, uint64_t, uint64_t))(v10 + 16))(v7, v8, v4, 0, v9, v10);
    sub_224E7601C((uint64_t)v4, (unint64_t *)&qword_2557E02A8, v12);
    sub_224DDE9B4(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  return v0;
}

id SignedClinicalDataProcessor.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SignedClinicalDataProcessor.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignedClinicalDataProcessor();
  return objc_msgSendSuper2(&v2, sel_init);
}

id SignedClinicalDataProcessor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignedClinicalDataProcessor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

_OWORD *sub_224F032E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  _OWORD *result;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v10 = MEMORY[0x24BEE0D00];
  v29 = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v28 = a1;
  *((_QWORD *)&v28 + 1) = a2;
  v11 = (_QWORD *)*a6;
  v13 = sub_224E533E8(a3, a4);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a5 & 1) != 0)
  {
LABEL_7:
    v19 = (_QWORD *)*a6;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = (_OWORD *)(v19[7] + 32 * v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      return sub_224E543B4(&v28, v20);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a5 & 1) == 0)
  {
    sub_224E725B8();
    goto LABEL_7;
  }
  sub_224E71554(v16, a5 & 1);
  v22 = sub_224E533E8(a3, a4);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    result = (_OWORD *)sub_224F684A4();
    __break(1u);
    return result;
  }
  v13 = v22;
  v19 = (_QWORD *)*a6;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v28, v10);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (uint64_t *)((char *)&v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  sub_224F0347C(v13, a3, a4, *v26, v26[1], v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_224F0347C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v7;
  _OWORD *result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v13 = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v12 = a4;
  *((_QWORD *)&v12 + 1) = a5;
  a6[(a1 >> 6) + 8] |= 1 << a1;
  v7 = (_QWORD *)(a6[6] + 16 * a1);
  *v7 = a2;
  v7[1] = a3;
  result = sub_224E543B4(&v12, (_OWORD *)(a6[7] + 32 * a1));
  v9 = a6[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a6[2] = v11;
  return result;
}

uint64_t sub_224F034FC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  _OWORD *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *i;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _OWORD v42[5];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[14];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char *v68;

  v3 = v2;
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v35 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v33 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v53 = MEMORY[0x24BEE4AF8];
    sub_224F6818C();
    v13 = (_OWORD *)(a1 + 32);
    v14 = v11 - 1;
    v68 = v10;
    for (i = a2; ; a2 = i)
    {
      sub_224E5A9C0(v13, v52);
      sub_224E5ABC0((uint64_t)v52);
      v15 = objc_msgSend(a2, sel_sourceURL);
      if (v15)
      {
        v16 = v15;
        sub_224F67598();

        v17 = sub_224F675D4();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v10, 0, 1, v17);
      }
      else
      {
        v18 = sub_224F675D4();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v10, 1, 1, v18);
      }
      v19 = objc_msgSend(a2, sel_metadata);
      v41 = sub_224E54308();
      sub_224F67AF0();

      sub_224E5A9C0(v52, v42);
      v64 = v48;
      v65 = v49;
      v66 = v50;
      v67 = v51;
      v60 = v44;
      v61 = v45;
      v62 = v46;
      v63 = v47;
      v56 = v42[2];
      v57 = v42[3];
      v58 = v42[4];
      v59 = v43;
      v54 = v42[0];
      v55 = v42[1];
      sub_224E5ABC0((uint64_t)v42);
      v20 = sub_224E5A3D0();
      if (v3)
      {
        sub_224E5AE64((uint64_t)v52);
        sub_224E7601C((uint64_t)v68, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        swift_bridgeObjectRelease();
        sub_224E5AE64((uint64_t)v52);
        return swift_release();
      }
      v22 = v20;
      v23 = v21;
      v39 = v14;
      v40 = 0;
      v36 = v13;
      v37 = v43;
      v24 = v35;
      sub_224E75F34((uint64_t)v68, v35, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38 = sub_224F67640();
      v25 = sub_224F675D4();
      v26 = *(_QWORD *)(v25 - 8);
      v27 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) != 1)
      {
        v28 = v35;
        v27 = (void *)sub_224F67580();
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v25);
      }
      v29 = objc_allocWithZone(MEMORY[0x24BE48998]);
      v30 = (void *)sub_224F67B5C();
      swift_bridgeObjectRelease();
      v31 = (void *)sub_224F67AE4();
      swift_bridgeObjectRelease();
      v32 = (void *)v38;
      objc_msgSend(v29, sel_initWithRawData_sourceType_sourceURL_issuerIdentifier_signingKeyID_JWKSData_JWKSOutcome_metadata_, v38, 1, v27, v30, 0, 0, 0, v31);
      sub_224DDE9B4(v22, v23);

      sub_224E5AE64((uint64_t)v52);
      v10 = v68;
      sub_224E7601C((uint64_t)v68, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      swift_bridgeObjectRelease();
      sub_224E5AE64((uint64_t)v52);
      sub_224F68174();
      sub_224F68198();
      sub_224F681A4();
      sub_224F68180();
      if (!v39)
        break;
      v13 = v36 + 14;
      v14 = v39 - 1;
      v3 = v40;
    }
    return v53;
  }
  return result;
}

id sub_224F03948(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = sub_224F67760();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(a1, sel_fileHandle);
  v10 = sub_224F67EB0();
  if (v2)
  {

    type metadata accessor for HDHRExtractionError(0);
    v13 = v12;
    v31 = 101;
    sub_224F05F78(0, (unint64_t *)&qword_2557E1478, (unint64_t *)&qword_2557E1480);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_224F6D8B0;
    *(_QWORD *)(inited + 32) = sub_224F67B80();
    *(_QWORD *)(inited + 40) = v15;
    v16 = sub_224F67538();
    *(_QWORD *)(inited + 72) = sub_224E5451C(0, &qword_2557E1588);
    *(_QWORD *)(inited + 48) = v16;
    sub_224E51ED8(inited);
    sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
    sub_224F6752C();
    swift_willThrow();

  }
  else
  {
    v17 = v10;
    v18 = v11;

    if (v18 >> 60 == 15)
    {
      type metadata accessor for HDHRExtractionError(0);
      v13 = v19;
      v31 = 102;
      sub_224E6AE24(MEMORY[0x24BEE4AF8]);
      sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
      sub_224F6752C();
      swift_willThrow();
    }
    else
    {
      sub_224F67298();
      swift_allocObject();
      sub_224DDE970(v17, v18);
      v20 = sub_224F6728C();
      sub_224F06260();
      sub_224F67280();
      v29 = v20;
      v21 = v30;
      v28 = a1;
      sub_224F034FC(v21, v28);
      swift_bridgeObjectRelease();
      v23 = v28;

      v24 = objc_msgSend(v23, sel_receivedDate);
      sub_224F6773C();

      v28 = objc_allocWithZone(MEMORY[0x24BE489A0]);
      v25 = (void *)sub_224F67718();
      v27 = v25;
      sub_224E5451C(0, &qword_2557E3470);
      v26 = (void *)sub_224F67D60();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v28, sel_initWithReceivedDate_countryCode_options_contextItems_, v25, 0, a2, v26);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      sub_224E58810(v17, v18);
      swift_release();
      sub_224E58810(v17, v18);
    }
  }
  return v13;
}

id sub_224F03E9C(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  void *v31;
  id v32[2];
  _QWORD v33[5];
  char v34;
  uint64_t v35;
  unint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  char v39;
  id v40;
  id v41;

  v4 = sub_224F67760();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = HKSignedClinicalDataQRRepresentation.asProcessingContext()();
  if (v2)
  {
    v40 = v2;
    v9 = v2;
    sub_224E57260();
    if (swift_dynamicCast())
    {
      if (v39 == 4)
      {
        v10 = vorrq_s8(v37, v38);
        if (!(*(_QWORD *)&vorr_s8(*(int8x8_t *)v10.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)) | v36))
        {

          sub_224F05F78(0, &qword_2557E3458, &qword_2557E3460);
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_224F6D8B0;
          *(_QWORD *)(inited + 32) = sub_224F67B80();
          *(_QWORD *)(inited + 40) = v25;
          memset(v33, 0, sizeof(v33));
          v34 = 4;
          v26 = sub_224F010F0();
          v28 = v27;
          sub_224F062A4((uint64_t)v33);
          *(_QWORD *)(inited + 48) = v26;
          *(_QWORD *)(inited + 56) = v28;
          v29 = sub_224E52024(inited);
          type metadata accessor for HDHRExtractionError(0);
          v31 = v30;
          v32[1] = (id)104;
          sub_224F07790(v29);
          swift_bridgeObjectRelease();
          sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
          v17 = v31;
          sub_224F6752C();
          swift_willThrow();

          return v17;
        }
      }
      sub_224F062A4((uint64_t)&v36);
    }

    sub_224F05F78(0, &qword_2557E3458, &qword_2557E3460);
    v11 = swift_initStackObject();
    *(_OWORD *)(v11 + 16) = xmmword_224F6D8B0;
    *(_QWORD *)(v11 + 32) = sub_224F67B80();
    *(_QWORD *)(v11 + 40) = v12;
    v36 = 0;
    v37.i64[0] = 0xE000000000000000;
    sub_224F680E4();
    swift_bridgeObjectRelease();
    v36 = 0xD000000000000025;
    v37.i64[0] = 0x8000000224F82B50;
    swift_getErrorValue();
    Error.hdhr_friendlyDescription.getter(v35);
    sub_224F67C94();
    swift_bridgeObjectRelease();
    v13 = v37.i64[0];
    *(_QWORD *)(v11 + 48) = v36;
    *(_QWORD *)(v11 + 56) = v13;
    v14 = sub_224E52024(v11);
    type metadata accessor for HDHRExtractionError(0);
    v16 = v15;
    v33[0] = 103;
    sub_224F07790(v14);
    swift_bridgeObjectRelease();
    sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
    v17 = v16;
    sub_224F6752C();
    swift_willThrow();

  }
  else
  {
    v18 = v8;
    sub_224F67754();
    sub_224EFAB14();
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_224F71240;
    *(_QWORD *)(v19 + 32) = v18;
    v36 = v19;
    sub_224F67D84();
    v32[0] = objc_allocWithZone(MEMORY[0x24BE489A0]);
    v41 = v18;
    v20 = (void *)sub_224F67718();
    sub_224E5451C(0, &qword_2557E3470);
    v21 = a2;
    v22 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    v17 = objc_msgSend(v32[0], sel_initWithReceivedDate_countryCode_options_contextItems_, v20, 0, v21, v22);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v17;
}

void *sub_224F042E4(void *a1, uint64_t a2)
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;

  v4 = objc_msgSend(a1, sel_file);
  if (v4)
  {
    v5 = v4;
    v6 = sub_224F03948(v4, a2);

  }
  else
  {
    v7 = objc_msgSend(a1, sel_QRRepresentation);
    if (v7)
    {
      v8 = v7;
      v6 = sub_224F03E9C((uint64_t)v7, a2);

    }
    else
    {
      v9 = (void *)objc_opt_self();
      v6 = (void *)sub_224F67B5C();
      objc_msgSend(v9, sel_hk_error_description_, 3, v6);

      swift_willThrow();
    }
  }
  return v6;
}

id sub_224F043F4(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  id v26;
  char *v28;
  id v29;
  char v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t inited;
  uint64_t v42;
  unint64_t v43;
  id v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  void *v48;
  id v49;
  char *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  __int128 v67;

  v59 = a2;
  v4 = sub_224F67760();
  v60 = *(_QWORD *)(v4 - 8);
  v61 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v55 - v8;
  v10 = sub_224F675D4();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v55 - v15;
  v17 = objc_msgSend(a1, sel_sourceURL);
  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_6;
  }
  v18 = v17;
  sub_224F67598();

  v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v19(v9, v14, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
LABEL_6:
    sub_224E7601C((uint64_t)v9, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    type metadata accessor for HDHRExtractionError(0);
    v26 = v25;
    v63 = 2;
    sub_224E6AE24(MEMORY[0x24BEE4AF8]);
    sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
    sub_224F6752C();
    swift_willThrow();
    return v26;
  }
  v57 = v6;
  v19(v16, v9, v10);
  sub_224F67298();
  swift_allocObject();
  v20 = sub_224F6728C();
  v21 = objc_msgSend(a1, sel_data);
  v22 = sub_224F67658();
  v24 = v23;

  sub_224E6B478();
  sub_224F67280();
  v58 = v16;
  if (!v2)
  {
    v56 = v20;
    sub_224DDE9B4(v22, v24);
    v55 = v67;
    Parameters.asSignedClinicalDataProcessingContexts(sourceURL:metadata:)((uint64_t)v16, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v49 = objc_msgSend(a1, sel_receivedDate);
    v50 = v57;
    sub_224F6773C();

    v51 = objc_msgSend(a1, sel_country);
    sub_224F67B80();

    *(_QWORD *)&v55 = objc_allocWithZone(MEMORY[0x24BE489A0]);
    v52 = (void *)sub_224F67718();
    v53 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    sub_224E5451C(0, &qword_2557E3470);
    v54 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    v26 = objc_msgSend((id)v55, sel_initWithReceivedDate_countryCode_options_contextItems_, v52, v53, v59, v54);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v50, v61);
    swift_release();
LABEL_16:
    (*(void (**)(char *, uint64_t))(v11 + 8))(v58, v10);
    return v26;
  }
  swift_release();
  sub_224DDE9B4(v22, v24);
  v28 = v57;
  type metadata accessor for Code(0);
  v65 = 202;
  v29 = v2;
  sub_224DDACD4(&qword_2557E0270, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_224F6A930);
  v30 = sub_224F67484();

  if ((v30 & 1) != 0)
  {

    if (qword_2557E0128 != -1)
      swift_once();
    v31 = sub_224F679B8();
    __swift_project_value_buffer(v31, (uint64_t)qword_2557FC958);
    v32 = sub_224F679AC();
    v33 = sub_224F67EC8();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_224DAC000, v32, v33, "SignedClinicalDataProcessor.preprocess Empty response received. Converting to empty contextItems", v34, 2u);
      MEMORY[0x22768EDE4](v34, -1, -1);
    }

    v35 = objc_msgSend(a1, sel_receivedDate);
    sub_224F6773C();

    v36 = objc_msgSend(a1, sel_country);
    sub_224F67B80();

    v37 = objc_allocWithZone(MEMORY[0x24BE489A0]);
    v38 = (void *)sub_224F67718();
    v39 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    sub_224E5451C(0, &qword_2557E3470);
    v40 = (void *)sub_224F67D60();
    v26 = objc_msgSend(v37, sel_initWithReceivedDate_countryCode_options_contextItems_, v38, v39, v59, v40);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v28, v61);
    goto LABEL_16;
  }
  sub_224F05F78(0, &qword_2557E3458, &qword_2557E3460);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_224F6D8B0;
  *(_QWORD *)(inited + 32) = sub_224F67B80();
  *(_QWORD *)(inited + 40) = v42;
  v65 = 0;
  v66 = 0xE000000000000000;
  sub_224F680E4();
  swift_bridgeObjectRelease();
  v63 = 0xD000000000000028;
  v64 = 0x8000000224F82AA0;
  swift_getErrorValue();
  v65 = Error.hdhr_friendlyDescription.getter(v62);
  v66 = v43;
  swift_bridgeObjectRetain();
  sub_224F6848C();
  v44 = (id)HKSensitiveLogItem();
  swift_unknownObjectRelease();
  sub_224F68078();
  swift_unknownObjectRelease();
  sub_224F67BC8();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  v45 = v64;
  *(_QWORD *)(inited + 48) = v63;
  *(_QWORD *)(inited + 56) = v45;
  v46 = sub_224E52024(inited);
  type metadata accessor for HDHRExtractionError(0);
  v48 = v47;
  v63 = 103;
  sub_224F07790(v46);
  swift_bridgeObjectRelease();
  sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
  v26 = v48;
  sub_224F6752C();
  swift_willThrow();

  (*(void (**)(char *, uint64_t))(v11 + 8))(v58, v10);
  return v26;
}

unint64_t sub_224F04C94(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = sub_224F67C64();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return sub_224F67D30();
  }
  __break(1u);
  return result;
}

uint64_t sub_224F04D30(unint64_t a1, uint64_t a2)
{
  void *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t result;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t inited;
  uint64_t v20;
  unint64_t v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;

  v5 = sub_224F67760();
  MEMORY[0x24BDAC7A8](v5);
  v48 = v7;
  v49 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1 >> 62;
  v47 = a2;
  if (a1 >> 62)
    goto LABEL_35;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v9)
  {
    v50 = MEMORY[0x24BEE4AF8];
    sub_224F6818C();
    if (v9 < 0)
    {
      __break(1u);
LABEL_37:
      v15 = (id)MEMORY[0x22768E1CC](0, a1);
      goto LABEL_20;
    }
    v46 = v5;
    v10 = 0;
    v5 = a1 & 0xC000000000000001;
    while (v9 != v10)
    {
      if (v5)
        v11 = (id)MEMORY[0x22768E1CC](v10, a1);
      else
        v11 = *(id *)(a1 + 8 * v10 + 32);
      v12 = v11;
      sub_224E64960();
      if (v2)
      {

        swift_release();
        sub_224F05F78(0, &qword_2557E3458, &qword_2557E3460);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_224F6D8B0;
        *(_QWORD *)(inited + 32) = sub_224F67B80();
        *(_QWORD *)(inited + 40) = v20;
        v50 = 0;
        v51 = 0xE000000000000000;
        sub_224F680E4();
        v53 = v50;
        v54 = v51;
        sub_224F67C94();
        swift_getErrorValue();
        v50 = Error.hdhr_friendlyDescription.getter(v52);
        v51 = v21;
        swift_bridgeObjectRetain();
        sub_224F6848C();
        v22 = (id)HKSensitiveLogItem();
        swift_unknownObjectRelease();
        sub_224F68078();
        swift_unknownObjectRelease();
        sub_224F67BC8();
        swift_bridgeObjectRelease();
        sub_224F67C94();
        swift_bridgeObjectRelease();
        v23 = v54;
        *(_QWORD *)(inited + 48) = v53;
        *(_QWORD *)(inited + 56) = v23;
        v24 = sub_224E52024(inited);
        type metadata accessor for HDHRExtractionError(0);
        v53 = 103;
        v25 = (id)sub_224F07790(v24);
        swift_bridgeObjectRelease();
        sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
        sub_224F6752C();
        swift_willThrow();

        return (uint64_t)v25;
      }
      ++v10;

      sub_224F68174();
      sub_224F68198();
      sub_224F681A4();
      sub_224F68180();
      if (v9 == v10)
      {
        v5 = v46;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
    v9 = sub_224F681D4();
    swift_bridgeObjectRelease();
  }
LABEL_13:
  if (v8)
  {
    swift_bridgeObjectRetain();
    result = sub_224F681D4();
    if (!result)
      goto LABEL_27;
  }
  else
  {
    v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v13)
      goto LABEL_27;
  }
  v8 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
    goto LABEL_37;
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return result;
  }
  v15 = *(id *)(a1 + 32);
LABEL_20:
  v16 = v15;
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v16, sel_sourceType);

  if (v17 != (id)2)
    goto LABEL_28;
  if (v8)
  {
    swift_bridgeObjectRetain();
    v18 = (id)MEMORY[0x22768E1CC](0, a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = *(id *)(a1 + 32);
  }
  v26 = objc_msgSend(v18, sel_issuerIdentifier, v46);

  v27 = sub_224F67B80();
  v29 = v28;

  v50 = v27;
  v51 = v29;
  v53 = sub_224F67B80();
  v54 = v30;
  sub_224EFCDDC();
  sub_224EFCE20();
  v31 = sub_224F67B38();
  swift_bridgeObjectRelease();
  if ((v31 & 1) != 0)
  {
    sub_224F67B80();
    v32 = sub_224F67C40();
    swift_bridgeObjectRelease();
    v33 = sub_224F04C94(v32, v27, v29);
    v35 = v34;
    v37 = v36;
    v39 = v38;
    swift_bridgeObjectRelease();
    MEMORY[0x22768DCB0](v33, v35, v37, v39);
    v41 = v40;
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
LABEL_27:
  swift_bridgeObjectRelease();
LABEL_28:
  v41 = 0;
LABEL_29:
  sub_224F67754();
  v42 = (void *)sub_224F67718();
  if (v41)
  {
    v43 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v43 = 0;
  }
  v44 = objc_allocWithZone(MEMORY[0x24BE489A0]);
  sub_224E5451C(0, &qword_2557E3470);
  v45 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(v44, sel_initWithReceivedDate_countryCode_options_contextItems_, v42, v43, v47, v45);

  (*(void (**)(char *, unint64_t))(v48 + 8))(v49, v5);
  return (uint64_t)v25;
}

uint64_t sub_224F05314(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 184) = a1;
  *(_QWORD *)(v2 + 192) = a2;
  return swift_task_switch();
}

uint64_t sub_224F0532C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[23];
  v0[19] = MEMORY[0x24BEE4AF8];
  v0[25] = sub_224E5451C(0, &qword_2557E3438);
  v2 = swift_task_alloc();
  v0[26] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v0 + 19;
  v3 = (_QWORD *)swift_task_alloc();
  v0[27] = v3;
  *v3 = v0;
  v3[1] = sub_224F053F0;
  return sub_224F6824C();
}

uint64_t sub_224F053F0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F0545C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = objc_allocWithZone(MEMORY[0x24BE48A60]);
  swift_bridgeObjectRetain();
  v3 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, sel_initWithItems_options_, v3, v1);

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(id))(v0 + 8))(v4);
}

uint64_t sub_224F054F0()
{
  uint64_t v0;
  void *v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  id v5;
  unint64_t v6;

  v1 = *(void **)(v0 + 224);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_224F05F78(0, &qword_2557E3458, &qword_2557E3460);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_224F6D8B0;
  *(_QWORD *)(inited + 32) = sub_224F67B80();
  *(_QWORD *)(inited + 40) = v3;
  sub_224F680E4();
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  *(_QWORD *)(v0 + 136) = Error.hdhr_friendlyDescription.getter(*(_QWORD *)(v0 + 120));
  *(_QWORD *)(v0 + 144) = v4;
  swift_bridgeObjectRetain();
  sub_224F6848C();
  v5 = (id)HKSensitiveLogItem();
  swift_unknownObjectRelease();
  sub_224F68078();
  swift_unknownObjectRelease();
  sub_224F67BC8();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = 0xD000000000000028;
  *(_QWORD *)(inited + 56) = 0x8000000224F82A20;
  v6 = sub_224E52024(inited);
  type metadata accessor for HDHRExtractionError(0);
  *(_QWORD *)(v0 + 176) = 103;
  sub_224F07790(v6);
  swift_bridgeObjectRelease();
  sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
  sub_224F6752C();
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F05724(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 184) = a1;
  return swift_task_switch();
}

uint64_t sub_224F0573C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[23];
  v0[24] = sub_224E5451C(0, &qword_2557E3438);
  v2 = swift_task_alloc();
  v0[25] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  sub_224F05F14();
  v3 = (_QWORD *)swift_task_alloc();
  v0[26] = v3;
  *v3 = v0;
  v3[1] = sub_224F05800;
  return sub_224F6824C();
}

uint64_t sub_224F05800()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_224F0586C()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_allocWithZone(MEMORY[0x24BE48A60]);
  v2 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithItems_options_, v2, 0);

  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

uint64_t sub_224F058F4()
{
  uint64_t v0;
  void *v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  id v5;
  unint64_t v6;

  v1 = *(void **)(v0 + 216);
  swift_task_dealloc();
  sub_224F05F78(0, &qword_2557E3458, &qword_2557E3460);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_224F6D8B0;
  *(_QWORD *)(inited + 32) = sub_224F67B80();
  *(_QWORD *)(inited + 40) = v3;
  sub_224F680E4();
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  *(_QWORD *)(v0 + 136) = Error.hdhr_friendlyDescription.getter(*(_QWORD *)(v0 + 120));
  *(_QWORD *)(v0 + 144) = v4;
  swift_bridgeObjectRetain();
  sub_224F6848C();
  v5 = (id)HKSensitiveLogItem();
  swift_unknownObjectRelease();
  sub_224F68078();
  swift_unknownObjectRelease();
  sub_224F67BC8();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = 0xD000000000000026;
  *(_QWORD *)(inited + 56) = 0x8000000224F829F0;
  v6 = sub_224E52024(inited);
  type metadata accessor for HDHRExtractionError(0);
  *(_QWORD *)(v0 + 176) = 103;
  sub_224F07790(v6);
  swift_bridgeObjectRelease();
  sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
  sub_224F6752C();
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224F05B20(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ExtractionContext();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SignedClinicalDataProcessor()
{
  return objc_opt_self();
}

uint64_t method lookup function for SignedClinicalDataProcessor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SignedClinicalDataProcessor.preprocessData(in:options:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x50))();
}

uint64_t dispatch thunk of SignedClinicalDataProcessor.preprocess(fhirResourceObject:options:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x58))();
}

uint64_t dispatch thunk of SignedClinicalDataProcessor.reprocess(originalRecords:options:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SignedClinicalDataProcessor.process(originalSignedClinicalDataRecords:options:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x24BEE4EA0] & *v2) + 0x68);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_224F05C8C;
  return v9(a1, a2);
}

uint64_t sub_224F05C8C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of SignedClinicalDataProcessor.process(contextCollection:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((*MEMORY[0x24BEE4EA0] & *v1) + 0x70);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_224F0636C;
  return v7(a1);
}

uint64_t sub_224F05D50()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_224F05D84()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_224EF7B90;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_2557E3400 + dword_2557E3400))(v2, v3, v4);
}

uint64_t sub_224F05DF8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_224F05E2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_224EF7808;
  return ((uint64_t (*)(int, uint64_t, void *, void *))((char *)&dword_2557E3410 + dword_2557E3410))(v2, v3, v5, v4);
}

uint64_t sub_224F05EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_224EF7B90;
  return sub_224F01F88(a1, a2, v6);
}

void sub_224F05F14()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E3450)
  {
    sub_224E5451C(255, &qword_2557E3438);
    v0 = sub_224F67DB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E3450);
  }
}

void sub_224F05F78(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_224F06210(255, a3);
    v4 = sub_224F683A8();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_224F05FCC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E3468)
  {
    sub_224E5451C(255, &qword_2557E3438);
    sub_224E57260();
    v0 = sub_224F67E50();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E3468);
  }
}

uint64_t sub_224F06048()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_224F0607C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 40);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_224EF7B90;
  v5[2] = a1;
  v6 = (_QWORD *)swift_task_alloc();
  v5[3] = v6;
  *v6 = v5;
  v6[1] = sub_224F02684;
  return HDHRSSignedClinicalDataProcessingContext.process(using:)(v4);
}

uint64_t sub_224F060FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_224EF7B90;
  return sub_224F01520(a1, a2, v7, v6);
}

uint64_t sub_224F06168()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_224F06194(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_224EF7808;
  v3[2] = a1;
  v4 = (_QWORD *)swift_task_alloc();
  v3[3] = v4;
  *v4 = v3;
  v4[1] = sub_224F01BD0;
  return HDHRSOriginalSignedClinicalDataRecord.convert()();
}

void sub_224F06210(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

unint64_t sub_224F06260()
{
  unint64_t result;

  result = qword_2557E34A8;
  if (!qword_2557E34A8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataFileContent, &type metadata for SignedClinicalDataFileContent);
    atomic_store(result, (unint64_t *)&qword_2557E34A8);
  }
  return result;
}

uint64_t sub_224F062A4(uint64_t a1)
{
  destroy for SignedClinicalDataQRError(a1);
  return a1;
}

unint64_t sub_224F062D8()
{
  unint64_t result;

  result = qword_2557E34B0;
  if (!qword_2557E34B0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataQRError, &type metadata for SignedClinicalDataQRError);
    atomic_store(result, (unint64_t *)&qword_2557E34B0);
  }
  return result;
}

uint64_t sub_224F0631C()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 56);
  if (v1 == 3 || v1 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  else if (!*(_BYTE *)(v0 + 56))
  {
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

id sub_224F06370(id a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  id result;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  void (*v31)(char *, char *, uint64_t);
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  id v54;
  id v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  id v62;
  id v63;
  void *v64;
  id v65;
  id v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  id v83;
  unsigned int v84;
  char *v85;
  uint64_t v86;
  id v87;
  char *v88;
  char *v89;
  id v90;

  sub_224E63218(0, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v72 - v3;
  sub_224E63218(0, &qword_2557E27F0, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v72 - v9;
  v11 = sub_224F67760();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v72 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v72 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v72 - v22;
  if (objc_msgSend(v90, sel_signatureStatus) == a1)
    return v90;
  v89 = v23;
  sub_224E5451C(0, &qword_2557E34B8);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_signedClinicalDataRecordTypeForIdentifier_, *MEMORY[0x24BDD3750]);
  v87 = result;
  if (!result)
  {
    __break(1u);
    return result;
  }
  v25 = objc_msgSend(v90, sel_note);
  if (v25)
  {
    v26 = v25;
    v27 = sub_224F67B80();
    v73 = v28;
    v74 = v27;

  }
  else
  {
    v73 = 0;
    v74 = 0;
  }
  v84 = objc_msgSend(v90, sel_enteredInError);
  v29 = objc_msgSend(v90, sel_modifiedDate);
  v88 = v18;
  if (v29)
  {
    v30 = v29;
    sub_224F6773C();

    v31 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v31(v10, v21, v11);
    v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v32(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
    {
      v31(v89, v10, v11);
      goto LABEL_13;
    }
  }
  else
  {
    v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v32(v10, 1, 1, v11);
  }
  sub_224F67754();
  sub_224E7601C((uint64_t)v10, &qword_2557E27F0, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
LABEL_13:
  v83 = objc_msgSend(v90, sel_originIdentifier);
  v33 = objc_msgSend(v90, sel_locale);
  if (v33)
  {
    v34 = v33;
    sub_224F677CC();

    v35 = sub_224F677D8();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v4, 0, 1, v35);
  }
  else
  {
    v36 = sub_224F677D8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v4, 1, 1, v36);
  }
  v81 = objc_msgSend(v90, sel_extractionVersion);
  v82 = objc_msgSend(v90, sel_device);
  v37 = objc_msgSend(v90, sel_metadata);
  if (v37)
  {
    v38 = v37;
    v72 = sub_224F67AF0();

  }
  else
  {
    v72 = 0;
  }
  v39 = objc_msgSend(v90, sel_country, v72);
  v40 = sub_224F67B80();
  v79 = v41;
  v80 = v40;

  v78 = objc_msgSend(v90, sel_state);
  v42 = objc_msgSend(v90, sel_credentialTypes);
  v77 = sub_224F67D6C();

  v43 = objc_msgSend(v90, sel_issuerIdentifier);
  v44 = sub_224F67B80();
  v75 = v45;
  v76 = v44;

  v46 = objc_msgSend(v90, sel_issuedDate);
  sub_224F6773C();

  v47 = objc_msgSend(v90, sel_relevantDate);
  sub_224F6773C();

  v48 = objc_msgSend(v90, sel_expirationDate);
  v85 = v15;
  v86 = v12;
  if (v48)
  {
    v49 = v48;
    v50 = (uint64_t)v4;
    v51 = (uint64_t)a1;
    sub_224F6773C();

    v52 = 0;
  }
  else
  {
    v50 = (uint64_t)v4;
    v51 = (uint64_t)a1;
    v52 = 1;
  }
  v53 = v8;
  v32(v8, v52, 1, v11);
  v54 = objc_msgSend(v90, sel_subject);
  v55 = objc_msgSend(v90, sel_items);
  sub_224E5451C(0, &qword_2557E34C0);
  v56 = sub_224F67D6C();

  v57 = objc_msgSend(v90, sel_dataValue);
  if (v57)
  {
    v58 = v57;
    v59 = sub_224F67658();
    v61 = v60;

  }
  else
  {
    v59 = 0;
    v61 = 0xF000000000000000;
  }
  sub_224E5451C(0, &qword_2557E27F8);
  v62 = objc_msgSend(v90, sel_sourceType);
  v71 = v61;
  v70 = v56;
  v69 = (uint64_t)v53;
  v63 = v82;
  v64 = v87;
  v65 = v83;
  v66 = sub_224F0707C((uint64_t)v87, v74, v73, v84, (uint64_t)v89, (uint64_t)v83, v50, (uint64_t)v81, (uint64_t)v82, v72, v80, v79, (uint64_t)v78, v77, v76, v75, (uint64_t)v88, (uint64_t)v85, v69,
          v51,
          (uint64_t)v54,
          v70,
          v59,
          v71,
          (uint64_t)v62);

  v67 = objc_msgSend(v90, sel__creationDate);
  sub_224F6773C();

  v68 = (void *)sub_224F67718();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v21, v11);
  objc_msgSend(v66, sel_setCreationDate_, v68);

  return v66;
}

id sub_224F06AA8(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16)
{
  void *v16;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id result;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *ObjCClassFromMetadata;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  id v76;
  void *v77;
  id v78;
  char *v79;
  id v80;
  uint64_t v81;
  id *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v83 = a6;
  sub_224E63218(0, &qword_2557E27F0, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v62 - v22;
  sub_224E63218(0, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v62 - v25;
  sub_224E5451C(0, &qword_2557E34B8);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_signedClinicalDataRecordTypeForIdentifier_, *MEMORY[0x24BDD3750]);
  if (result)
  {
    v78 = result;
    v86 = a8;
    v80 = v16;
    if (a4)
    {
      v64 = sub_224F67B5C();
      swift_bridgeObjectRelease();
    }
    else
    {
      v64 = 0;
    }
    v84 = a9;
    v85 = a10;
    v28 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20));
    v29 = type metadata accessor for ExtractionContext();
    v79 = (char *)v28 + *(int *)(v29 + 28);
    v30 = sub_224F67718();
    v82 = a1;
    v76 = *a1;
    v77 = (void *)v30;
    v81 = a2;
    sub_224E75F34(a2, (uint64_t)v26, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
    v31 = sub_224F677D8();
    v32 = *(_QWORD *)(v31 - 8);
    v33 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v26, 1, v31) != 1)
    {
      v33 = sub_224F677C0();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v26, v31);
    }
    v75 = (void *)v33;
    v34 = *v28;
    v35 = objc_msgSend((id)objc_opt_self(), sel_localDevice);
    v73 = v34;
    v74 = v35;
    if (*(uint64_t *)((char *)v28 + *(int *)(v29 + 40)))
    {
      v36 = swift_bridgeObjectRetain();
      sub_224F073F8(v36);
      swift_bridgeObjectRelease();
      v63 = sub_224F67AE4();
      swift_bridgeObjectRelease();
    }
    else
    {
      v63 = 0;
    }
    swift_bridgeObjectRetain();
    v72 = sub_224F67B5C();
    swift_bridgeObjectRelease();
    v71 = sub_224F67D60();
    swift_bridgeObjectRelease();
    v69 = sub_224F67B5C();
    swift_bridgeObjectRelease();
    v68 = sub_224F67718();
    v37 = (void *)sub_224F67718();
    sub_224E75F34(v85, (uint64_t)v23, &qword_2557E27F0, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    v38 = sub_224F67760();
    v39 = *(_QWORD *)(v38 - 8);
    v40 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v23, 1, v38) != 1)
    {
      v40 = (void *)sub_224F67718();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v23, v38);
    }
    v70 = v38;
    v83 = v39;
    sub_224E5451C(0, &qword_2557E34C0);
    v41 = (void *)sub_224F67D60();
    swift_bridgeObjectRelease();
    v42 = 0;
    if (a15 >> 60 != 15)
    {
      sub_224DDE970(a14, a15);
      v42 = (void *)sub_224F67640();
      sub_224E58810(a14, a15);
    }
    v67 = v42;
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    v61 = v42;
    v66 = v41;
    v60 = v41;
    v65 = v40;
    v58 = v37;
    v59 = v40;
    v44 = (void *)v68;
    v45 = (void *)v69;
    v46 = (void *)v71;
    v47 = (void *)v72;
    v80 = v37;
    v48 = (void *)v63;
    v49 = v74;
    v51 = v77;
    v50 = v78;
    v52 = (void *)v64;
    v53 = v75;
    v76 = objc_retainAutoreleasedReturnValue(objc_msgSend(ObjCClassFromMetadata, sel_signedClinicalDataRecordWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_credentialTypes_issuerIdentifier_issuedDate_relevantDate_expirationDate_signatureStatus_subject_items_dataValue_sourceType_, v78, v64, 0, v77, v76, v75, v73, v74, v63, v72, 0, v71, v69, v68, v58, v59,
              a11,
              a12,
              v60,
              v61,
              a16));

    v54 = v76;
    v55 = (void *)sub_224F67718();
    objc_msgSend(v54, sel_setCreationDate_, v55);

    sub_224E7601C(v85, &qword_2557E27F0, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    v56 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
    v57 = v70;
    v56(v84, v70);
    v56(v86, v57);
    sub_224E7601C(v81, (unint64_t *)&qword_2557E1D00, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
    sub_224F07040((uint64_t)v82);
    return v54;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_224F07040(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RecordExtractionContext();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_224F0707C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void (*v37)(uint64_t, uint64_t);
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v48;
  id v51;
  uint64_t v52;

  if (a3)
  {
    v48 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v48 = 0;
  }
  v52 = a5;
  v45 = (void *)sub_224F67718();
  v27 = sub_224F677D8();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(a7, 1, v27) != 1)
  {
    v29 = sub_224F677C0();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(a7, v27);
  }
  v44 = (void *)v29;
  if (a10)
  {
    v43 = (void *)sub_224F67AE4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v43 = 0;
  }
  v42 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v41 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v40 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v39 = (void *)sub_224F67718();
  v30 = (void *)sub_224F67718();
  v31 = sub_224F67760();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(a19, 1, v31) != 1)
  {
    v33 = sub_224F67718();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(a19, v31);
  }
  v34 = (void *)v33;
  sub_224E5451C(0, &qword_2557E34C0);
  v35 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v36 = 0;
  if (a24 >> 60 != 15)
  {
    v36 = (void *)sub_224F67640();
    sub_224E58810(a23, a24);
  }
  v51 = objc_retainAutoreleasedReturnValue(objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_signedClinicalDataRecordWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_credentialTypes_issuerIdentifier_issuedDate_relevantDate_expirationDate_signatureStatus_subject_items_dataValue_sourceType_, a1, v48, a4 & 1, v45, a6, v44, a8, a9, v43, v42, a13, v41, v40, v39, v30, v34,
            a20,
            a21,
            v35,
            v36,
            a25));

  v37 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
  v37(a18, v31);
  v37(a17, v31);
  v37(v52, v31);
  return v51;
}

unint64_t sub_224F073F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t result;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t *v16;
  _OWORD *v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[3];
  _OWORD v45[2];
  __int128 v46;
  _OWORD v47[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_224E6B8E4();
    v2 = (_QWORD *)sub_224F681F8();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v35 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v34 = (unint64_t)(63 - v3) >> 6;
  v6 = v47;
  v7 = v45;
  v8 = &v41;
  v9 = &v43;
  result = swift_bridgeObjectRetain();
  v36 = 0;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v19 = v36 + 1;
  if (__OFADD__(v36, 1))
    goto LABEL_35;
  if (v19 >= v34)
    goto LABEL_32;
  v20 = *(_QWORD *)(v35 + 8 * v19);
  v21 = v36 + 1;
  if (!v20)
  {
    v21 = v36 + 2;
    if (v36 + 2 >= v34)
      goto LABEL_32;
    v20 = *(_QWORD *)(v35 + 8 * v21);
    if (!v20)
    {
      v21 = v36 + 3;
      if (v36 + 3 >= v34)
        goto LABEL_32;
      v20 = *(_QWORD *)(v35 + 8 * v21);
      if (!v20)
      {
        v21 = v36 + 4;
        if (v36 + 4 >= v34)
          goto LABEL_32;
        v20 = *(_QWORD *)(v35 + 8 * v21);
        if (!v20)
        {
          v22 = v36 + 5;
          if (v36 + 5 < v34)
          {
            v20 = *(_QWORD *)(v35 + 8 * v22);
            if (v20)
            {
              v21 = v36 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v21 = v22 + 1;
              if (__OFADD__(v22, 1))
                goto LABEL_36;
              if (v21 >= v34)
                break;
              v20 = *(_QWORD *)(v35 + 8 * v21);
              ++v22;
              if (v20)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_224F08AD8();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v36 = v21;
  v37 = (v20 - 1) & v20;
  for (i = __clz(__rbit64(v20)) + (v21 << 6); ; i = __clz(__rbit64(v5)) | (v36 << 6))
  {
    v23 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
    v25 = *v23;
    v24 = v23[1];
    sub_224E537C4(*(_QWORD *)(v1 + 56) + 32 * i, (uint64_t)v6);
    *(_QWORD *)&v46 = v25;
    *((_QWORD *)&v46 + 1) = v24;
    v44[2] = v46;
    v45[0] = v47[0];
    v45[1] = v47[1];
    v39 = v25;
    v40 = v24;
    sub_224E543B4(v7, &v38);
    sub_224E54308();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v27 = v39;
    v26 = v40;
    sub_224E543B4(v8, v9);
    sub_224E543B4(v9, v44);
    sub_224E543B4(v44, &v42);
    result = sub_224E533E8(v27, v26);
    v28 = result;
    if ((v29 & 1) != 0)
    {
      v11 = v9;
      v12 = v8;
      v13 = v1;
      v14 = v7;
      v15 = v6;
      v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v16 = v27;
      v16[1] = v26;
      v6 = v15;
      v7 = v14;
      v1 = v13;
      v8 = v12;
      v9 = v11;
      v17 = (_OWORD *)(v2[7] + 32 * v28);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      result = (unint64_t)sub_224E543B4(&v42, v17);
      v5 = v37;
      if (!v37)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v30 = (uint64_t *)(v2[6] + 16 * result);
    *v30 = v27;
    v30[1] = v26;
    result = (unint64_t)sub_224E543B4(&v42, (_OWORD *)(v2[7] + 32 * result));
    v31 = v2[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_34;
    v2[2] = v33;
    v5 = v37;
    if (!v37)
      goto LABEL_11;
LABEL_10:
    v37 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_224F07790(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_224E6B8E4();
    v2 = (_QWORD *)sub_224F681F8();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = MEMORY[0x24BEE4AD8] + 8;
  v11 = MEMORY[0x24BEE0D00];
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v31)
    goto LABEL_32;
  v21 = *(_QWORD *)(v32 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v31)
      goto LABEL_32;
    v21 = *(_QWORD *)(v32 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v31)
        goto LABEL_32;
      v21 = *(_QWORD *)(v32 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v31)
          goto LABEL_32;
        v21 = *(_QWORD *)(v32 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(_QWORD *)(v32 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v31)
                break;
              v21 = *(_QWORD *)(v32 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_224F08AD8();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v34 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v35 = *v24;
    v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_224E543B4(v6, v7);
    sub_224E543B4(v7, v40);
    sub_224E543B4(v40, &v38);
    result = sub_224E533E8(v35, v36);
    v25 = result;
    if ((v26 & 1) != 0)
    {
      v33 = i;
      v12 = v7;
      v13 = v6;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v17 = v35;
      v17[1] = v36;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v6 = v13;
      v7 = v12;
      i = v33;
      v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      result = (unint64_t)sub_224E543B4(&v38, v18);
      v5 = v34;
      if (!v34)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)sub_224E543B4(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_34;
    v2[2] = v30;
    v5 = v34;
    if (!v34)
      goto LABEL_11;
LABEL_10:
    v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_224F07AF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = sub_224F67814();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_224F08A28();
    v10 = sub_224F680B4();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      sub_224F08A98(&qword_2557E34E8, MEMORY[0x24BDCF2A8]);
      v14 = sub_224F67B14();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_224F08A98(&qword_2557E34F0, MEMORY[0x24BDCF2C0]);
          v20 = sub_224F67B50();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

uint64_t sub_224F07D48(id *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char **v41;
  id v42;
  id v43;
  id v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  id v47;
  char *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(unint64_t, _QWORD, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  id v60;
  id v61;
  char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  id v74;
  uint64_t v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  id v78;
  uint64_t v79;
  id v80;
  void *v81;
  char *v82;
  uint64_t v83;
  id v84;
  char *v85;
  void *v86;
  void *v87;
  id v88;
  uint64_t v89;
  void *ObjCClassFromMetadata;
  void *v91;
  char *v92;
  void *v93;
  void *v94;
  char *v95;
  void *v96;
  void *v97;
  char *v98;
  char *v99;
  id v100;
  void *v101;
  uint64_t result;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t, uint64_t, uint64_t);
  char *v111;
  char *v112;
  void (**v113)(_QWORD, uint64_t);
  uint64_t v114;
  char *v115;
  void (*v116)(char *, uint64_t, uint64_t, uint64_t);
  char *v117;
  uint64_t v118;
  id v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  id v128;
  char *v129;

  v119 = a4;
  v120 = a5;
  v118 = a3;
  v128 = a2;
  v6 = sub_224F67820();
  v113 = *(void (***)(_QWORD, uint64_t))(v6 - 8);
  v114 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v115 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E27F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v117 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v110 - v12;
  v14 = sub_224F67760();
  v127 = *(char **)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v110 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v112 = (char *)&v110 - v18;
  sub_224DDEA0C(0, &qword_2557E34C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0], v8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v124 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v111 = (char *)&v110 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v110 - v24;
  sub_224DDEA0C(0, &qword_2557E2A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], v8);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v110 - v27;
  v29 = sub_224F677A8();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v110 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v129 = (char *)&v110 - v34;
  v35 = (uint64_t)a1;
  v36 = objc_msgSend(*a1, sel_signedClinicalDataRecordIdentifier);
  if (!v36)
    goto LABEL_30;
  v37 = v36;
  sub_224F67790();

  v38 = v30;
  v39 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v39(v28, v33, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v28, 0, 1, v29);
  v121 = v38;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v28, 1, v29) == 1)
  {
LABEL_31:
    sub_224DDB50C((uint64_t)v28, &qword_2557E2A08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58]);
    result = sub_224F681C8();
    __break(1u);
    return result;
  }
  v122 = v29;
  v39(v129, v28, v29);
  v40 = sub_224F6743C();
  v123 = *(_QWORD *)(v40 - 8);
  v110 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v123 + 56);
  v110(v25, 1, 1, v40);
  v41 = &selRef_preprocessDataInSource_options_error_;
  v42 = objc_msgSend(v128, sel_subject);
  v43 = objc_msgSend(v42, sel_birthDate);

  v29 = v35;
  v125 = v25;
  v126 = v35;
  if (!v43)
  {
    v45 = v127;
    v116 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v127 + 7);
    v116(v13, 1, 1, v14);
    v47 = v128;
    goto LABEL_7;
  }
  v44 = objc_msgSend(v43, sel_dateForUTC);

  sub_224F6773C();
  v45 = v127;
  v46 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v127 + 4);
  v46(v13, v17, v14);
  v116 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v45 + 7);
  v116(v13, 0, 1, v14);
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v45 + 6))(v13, 1, v14) == 1)
  {
    v47 = v128;
    v41 = &selRef_preprocessDataInSource_options_error_;
LABEL_7:
    sub_224DDB50C((uint64_t)v13, &qword_2557E27F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
    goto LABEL_9;
  }
  v48 = v112;
  v46(v112, v13, v14);
  v49 = objc_msgSend((id)objc_opt_self(), sel_referenceCalendar);
  sub_224F67808();

  sub_224DDEA0C(0, &qword_2557E34D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v50 = sub_224F67814();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = *(_QWORD *)(v51 + 72);
  v53 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
  v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_224F73670;
  v55 = v54 + v53;
  v56 = *(void (**)(unint64_t, _QWORD, uint64_t))(v51 + 104);
  v56(v54 + v53, *MEMORY[0x24BDCF228], v50);
  v56(v54 + v53 + v52, *MEMORY[0x24BDCF240], v50);
  v56(v54 + v53 + 2 * v52, *MEMORY[0x24BDCF250], v50);
  v57 = 3 * v52;
  v25 = v125;
  v29 = v126;
  v56(v55 + v57, *MEMORY[0x24BDCF220], v50);
  sub_224F07AF4(v54);
  swift_setDeallocating();
  swift_arrayDestroy();
  v45 = v127;
  swift_deallocClassInstance();
  v58 = (uint64_t)v111;
  v59 = v115;
  sub_224F677FC();
  swift_bridgeObjectRelease();
  ((void (**)(char *, uint64_t))v113)[1](v59, v114);
  (*((void (**)(char *, uint64_t))v45 + 1))(v48, v14);
  sub_224DDB50C((uint64_t)v25, &qword_2557E34C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0]);
  v110((char *)v58, 0, 1, v40);
  sub_224F089CC(v58, (uint64_t)v25);
  v47 = v128;
  v41 = &selRef_preprocessDataInSource_options_error_;
LABEL_9:
  v60 = objc_msgSend(v47, v41[281]);
  v61 = objc_msgSend(v60, sel_fullName);

  sub_224F67B80();
  v62 = v124;
  sub_224F08934((uint64_t)v25, (uint64_t)v124);
  v30 = sub_224F67B5C();
  swift_bridgeObjectRelease();
  v63 = v123;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v62, 1, v40) == 1)
  {
    v64 = 0;
  }
  else
  {
    v65 = v29;
    v66 = v63;
    v67 = v62;
    v64 = (void *)sub_224F673E8();
    v68 = *(void (**)(char *, uint64_t))(v66 + 8);
    v29 = v65;
    v47 = v128;
    v68(v67, v40);
  }
  v28 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD40F0]), sel_initWithFullName_dateOfBirthComponents_, v30, v64);

  sub_224F08990();
  v124 = (char *)objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_verifiableClinicalRecordTypeForIdentifier_, *MEMORY[0x24BDD3868]);
  if (!v124)
  {
    __break(1u);
LABEL_30:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v28, 1, 1, v29);
    goto LABEL_31;
  }
  v69 = v29 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v70 = type metadata accessor for ExtractionContext();
  v71 = v69 + *(int *)(v70 + 28);
  v115 = (char *)sub_224F67718();
  v123 = v71;
  v114 = sub_224F67718();
  v113 = (void (**)(_QWORD, uint64_t))objc_msgSend(v47, sel_device);
  if (*(_QWORD *)(v69 + *(int *)(v70 + 40)))
  {
    v72 = swift_bridgeObjectRetain();
    sub_224F073F8(v72);
    swift_bridgeObjectRelease();
    v112 = (char *)sub_224F67AE4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v112 = 0;
  }
  v127 = v28;
  v73 = (char *)objc_msgSend(v47, sel_credentialTypes);
  if (!v73)
  {
    sub_224F67D6C();
    v73 = (char *)sub_224F67D60();
    swift_bridgeObjectRelease();
  }
  v111 = v73;
  v74 = objc_msgSend(v47, sel_issuedDate);
  sub_224F6773C();

  v75 = sub_224F67718();
  v76 = v45;
  v77 = (void (*)(char *, uint64_t))*((_QWORD *)v45 + 1);
  v77(v17, v14);
  v78 = objc_msgSend(v47, sel_relevantDate);
  sub_224F6773C();

  v79 = sub_224F67718();
  v77(v17, v14);
  v80 = objc_msgSend(v47, sel_expirationDate);
  if (v80)
  {
    v81 = v80;
    sub_224F6773C();

    v82 = v117;
    (*((void (**)(char *, char *, uint64_t))v76 + 4))(v117, v17, v14);
    v116(v82, 0, 1, v14);
    if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v76 + 6))(v82, 1, v14) == 1)
    {
      v83 = 0;
    }
    else
    {
      v83 = sub_224F67718();
      v77(v82, v14);
    }
  }
  else
  {
    v116(v117, 1, 1, v14);
    v83 = 0;
  }
  v84 = objc_msgSend(v47, sel_issuerIdentifier);
  if (!v84)
  {
    sub_224F67B80();
    v84 = (id)sub_224F67B5C();
    swift_bridgeObjectRelease();
  }
  v85 = (char *)sub_224F67D60();
  v117 = v85;
  swift_bridgeObjectRelease();
  v86 = (void *)sub_224F67640();
  v119 = v86;
  v87 = (void *)sub_224F67784();
  v120 = v87;
  v88 = objc_msgSend(v47, sel_sourceType);
  if (v88 == (id)2)
    v89 = 2;
  else
    v89 = v88 == (id)1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v108 = v87;
  v109 = v89;
  v106 = v85;
  v107 = v86;
  v104 = v79;
  v105 = v83;
  v103 = v75;
  v91 = (void *)v79;
  v92 = v124;
  v93 = (void *)v75;
  v94 = (void *)v114;
  v95 = v115;
  v96 = (void *)v83;
  v98 = v112;
  v97 = v113;
  v99 = v111;
  v128 = objc_msgSend(ObjCClassFromMetadata, sel_verifiableClinicalRecordWithType_startDate_endDate_device_metadata_recordTypes_issuedDate_relevantDate_expirationDate_issuerIdentifier_subject_itemNames_dataRepresentation_originIdentifier_sourceType_, v124, v115, v114, v113, v112, v111, v103, v104, v105, v84, v127, v106, v107, v108, v109);

  v100 = v128;
  v101 = (void *)sub_224F67718();
  objc_msgSend(v100, sel_setCreationDate_, v101);

  sub_224DDB50C((uint64_t)v125, &qword_2557E34C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0]);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v129, v122);
  sub_224F07040(v126);
  return (uint64_t)v100;
}

uint64_t sub_224F08934(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224DDEA0C(0, &qword_2557E34C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_224F08990()
{
  unint64_t result;

  result = qword_2557E34D0;
  if (!qword_2557E34D0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E34D0);
  }
  return result;
}

uint64_t sub_224F089CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224DDEA0C(0, &qword_2557E34C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_224F08A28()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E34E0)
  {
    sub_224F67814();
    sub_224F08A98(&qword_2557E34E8, MEMORY[0x24BDCF2A8]);
    v0 = sub_224F680C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E34E0);
  }
}

uint64_t sub_224F08A98(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_224F67814();
    result = MEMORY[0x22768ED24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_224F08AD8()
{
  return swift_release();
}

id ReferenceRange.asReferenceRange()()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  void *v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  id v46;
  char *v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  char *v52;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v1 = v0;
  v2 = (int *)type metadata accessor for ReferenceRange();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v54 - v9;
  sub_224E75F34(v1, (uint64_t)&v54 - v9, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v11 = type metadata accessor for Quantity();
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
  if (v12(v10, 1, v11) == 1)
  {
    sub_224E7601C((uint64_t)v10, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    v13 = 0;
  }
  else
  {
    v13 = Quantity.asCodedQuantity()();
    sub_224DDEAA0((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  }
  sub_224E75F34(v1 + v2[5], (uint64_t)v8, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  if (v12(v8, 1, v11) == 1)
  {
    sub_224E7601C((uint64_t)v8, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    v14 = 0;
  }
  else
  {
    v14 = Quantity.asCodedQuantity()();
    sub_224DDEAA0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  }
  v28 = (uint64_t *)(v1 + v2[6]);
  v29 = *v28;
  v30 = v28[1];
  v31 = v28[2];
  sub_224F09280(v1, (uint64_t)v4);
  if (v30 == 1)
  {
    v32 = (uint64_t *)&v4[v2[8]];
    v29 = *v32;
    v30 = v32[1];
    v31 = v32[2];
    sub_224DDB44C(*v32, v30);
    sub_224DDEAA0((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for ReferenceRange);
    if (v30 == 1)
    {
      v33 = 0;
      v34 = 0;
      if (!v13)
        goto LABEL_41;
      goto LABEL_29;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_224DDEAA0((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for ReferenceRange);
  }
  v56 = v29;
  v57 = v30;
  v58 = v31;
  v34 = (void *)sub_224EEF95C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v35 = objc_msgSend(v34, sel_codings);
  sub_224E597F8();
  v36 = sub_224F67D6C();

  if (v36 >> 62)
  {
    swift_bridgeObjectRetain();
    v37 = sub_224F681D4();
    if (v37)
    {
LABEL_17:
      v55 = v34;
      v38 = 4;
      while (1)
      {
        if ((v36 & 0xC000000000000001) != 0)
          v39 = (id)MEMORY[0x22768E1CC](v38 - 4, v36);
        else
          v39 = *(id *)(v36 + 8 * v38);
        v40 = v39;
        v41 = v38 - 3;
        if (__OFADD__(v38 - 4, 1))
        {
          __break(1u);
          swift_once();
          v15 = sub_224F679B8();
          __swift_project_value_buffer(v15, (uint64_t)qword_2557FC958);
          v16 = (id)v36;
          v17 = (id)v36;
          v18 = sub_224F679AC();
          v19 = sub_224F67ED4();
          if (os_log_type_enabled(v18, v19))
          {
            v20 = (uint8_t *)swift_slowAlloc();
            v21 = swift_slowAlloc();
            v59 = v21;
            *(_DWORD *)v20 = 136446210;
            v56 = v36;
            v22 = (id)v36;
            v23 = (id)v36;
            sub_224E57260();
            sub_224F6848C();
            v24 = (id)HKSensitiveLogItem();
            swift_unknownObjectRelease();
            sub_224F68078();
            swift_unknownObjectRelease();
            v25 = sub_224F67BC8();
            v27 = v26;

            v56 = sub_224E76904(v25, v27, &v59);
            sub_224F68000();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_224DAC000, v18, v19, "ModelsBase.ReferenceRange caught extraction failure: %{public}s", v20, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x22768EDE4](v21, -1, -1);
            MEMORY[0x22768EDE4](v20, -1, -1);

          }
          else
          {

          }
          return 0;
        }
        v42 = objc_msgSend(v39, sel_displayString);
        if (v42)
          break;

        ++v38;
        if (v41 == v37)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_27;
        }
      }
      v43 = v42;
      swift_bridgeObjectRelease_n();

      v44 = objc_msgSend(v40, sel_displayString);
      if (v44)
      {
        sub_224F67B80();
        v33 = v45;

        goto LABEL_28;
      }
LABEL_27:
      v33 = 0;
LABEL_28:
      v34 = v55;
      if (!v13)
        goto LABEL_41;
      goto LABEL_29;
    }
  }
  else
  {
    v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v37)
      goto LABEL_17;
  }
  swift_bridgeObjectRelease_n();
  v33 = 0;
  if (!v13)
  {
LABEL_41:
    if (v14)
    {
      v52 = v14;
      if (v33)
      {
        v13 = (void *)sub_224F67B5C();
        swift_bridgeObjectRelease();
      }
      else
      {
        v13 = 0;
      }
      v51 = objc_msgSend((id)objc_opt_self(), sel_referenceRangeWithIdentifier_maxValue_, v13, v14);

LABEL_48:
      return v51;
    }

    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_29:
  if (v14)
  {
    v46 = v13;
    v47 = v14;
    if (v33)
    {
      v48 = (void *)sub_224F67B5C();
      swift_bridgeObjectRelease();
    }
    else
    {
      v48 = 0;
    }
    v51 = objc_msgSend((id)objc_opt_self(), sel_referenceRangeWithIdentifier_minValue_maxValue_, v48, v13, v14);

    goto LABEL_48;
  }
  v49 = v13;
  if (v33)
  {
    v50 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v50 = 0;
  }
  v51 = objc_msgSend((id)objc_opt_self(), sel_referenceRangeWithIdentifier_minValue_, v50, v13);

  return v51;
}

uint64_t type metadata accessor for ReferenceRange()
{
  uint64_t result;

  result = qword_2557E3578;
  if (!qword_2557E3578)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_224F09280(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReferenceRange();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ReferenceRange.low.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_224E75F34(v1, a1, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
}

uint64_t ReferenceRange.high.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ReferenceRange();
  return sub_224E75F34(v1 + *(int *)(v3 + 20), a1, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
}

uint64_t ReferenceRange.type.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ReferenceRange() + 24));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_224DDB44C(v4, v5);
}

uint64_t ReferenceRange.appliesTo.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ReferenceRange() + 28));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_224DDB44C(v4, v5);
}

uint64_t ReferenceRange.meaning.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ReferenceRange() + 32));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_224DDB44C(v4, v5);
}

uint64_t ReferenceRange.age.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ReferenceRange();
  return sub_224E75F34(v1 + *(int *)(v3 + 36), a1, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
}

uint64_t ReferenceRange.text.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ReferenceRange() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReferenceRange.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;

  v2 = v1;
  v4 = type metadata accessor for Quantity();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v35 - v12;
  sub_224E75F34(v2, (uint64_t)&v35 - v12, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v14(v13, 1, v4) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC((uint64_t)v13, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
    sub_224F68528();
    Quantity.hash(into:)();
    sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  }
  v15 = (int *)type metadata accessor for ReferenceRange();
  sub_224E75F34(v2 + v15[5], (uint64_t)v11, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  if (v14(v11, 1, v4) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
    sub_224F68528();
    Quantity.hash(into:)();
    sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  }
  v16 = (uint64_t *)(v2 + v15[6]);
  v17 = v16[1];
  if (v17 == 1)
  {
    sub_224F68528();
    goto LABEL_15;
  }
  v18 = *v16;
  v19 = v16[2];
  sub_224F68528();
  if (!v17)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v19)
      goto LABEL_11;
LABEL_13:
    sub_224F68528();
    v20 = v18;
    v21 = v17;
    goto LABEL_14;
  }
  sub_224F68528();
  sub_224DDB44C(v18, v17);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v19)
    goto LABEL_13;
LABEL_11:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C(a1, v19);
  swift_bridgeObjectRelease();
  v20 = v18;
  v21 = v17;
LABEL_14:
  sub_224DDB480(v20, v21);
LABEL_15:
  v22 = (uint64_t *)(v2 + v15[7]);
  v23 = v22[1];
  if (v23 == 1)
  {
    sub_224F68528();
    goto LABEL_23;
  }
  v24 = *v22;
  v25 = v22[2];
  sub_224F68528();
  if (!v23)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v25)
      goto LABEL_19;
LABEL_21:
    sub_224F68528();
    v26 = v24;
    v27 = v23;
    goto LABEL_22;
  }
  sub_224F68528();
  sub_224DDB44C(v24, v23);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v25)
    goto LABEL_21;
LABEL_19:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C(a1, v25);
  swift_bridgeObjectRelease();
  v26 = v24;
  v27 = v23;
LABEL_22:
  sub_224DDB480(v26, v27);
LABEL_23:
  v28 = (uint64_t *)(v2 + v15[8]);
  v29 = v28[1];
  if (v29 == 1)
  {
    sub_224F68528();
    goto LABEL_31;
  }
  v30 = *v28;
  v31 = v28[2];
  sub_224F68528();
  if (!v29)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v31)
      goto LABEL_27;
LABEL_29:
    sub_224F68528();
    v32 = v30;
    v33 = v29;
    goto LABEL_30;
  }
  sub_224F68528();
  sub_224DDB44C(v30, v29);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v31)
    goto LABEL_29;
LABEL_27:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C(a1, v31);
  swift_bridgeObjectRelease();
  v32 = v30;
  v33 = v29;
LABEL_30:
  sub_224DDB480(v32, v33);
LABEL_31:
  sub_224DF2EB8(a1);
  if (!*(_QWORD *)(v2 + v15[10] + 8))
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224F0996C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224F09994 + 4 * byte_224F73680[*v0]))(7827308, 0xE300000000000000);
}

uint64_t sub_224F09994()
{
  return 1751607656;
}

uint64_t sub_224F099A4()
{
  return 1701869940;
}

uint64_t sub_224F099B4()
{
  return 0x547365696C707061;
}

uint64_t sub_224F099D0()
{
  return 0x676E696E61656DLL;
}

uint64_t sub_224F099E8()
{
  return 6645601;
}

uint64_t sub_224F099F4()
{
  return 1954047348;
}

uint64_t sub_224F09A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224F0EF48(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224F09A28()
{
  sub_224F0AFC4();
  return sub_224F685B8();
}

uint64_t sub_224F09A50()
{
  sub_224F0AFC4();
  return sub_224F685C4();
}

uint64_t ReferenceRange.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  char v20;

  v3 = v1;
  sub_224F0B008(0, &qword_2557E34F8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v18 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F0AFC4();
  sub_224F68594();
  LOBYTE(v18) = 0;
  type metadata accessor for Quantity();
  sub_224DDACD4(&qword_2557E0860, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t)&protocol conformance descriptor for Quantity);
  sub_224F68330();
  if (!v2)
  {
    v10 = (int *)type metadata accessor for ReferenceRange();
    LOBYTE(v18) = 1;
    sub_224F68330();
    v11 = (__int128 *)(v3 + v10[6]);
    v12 = *((_QWORD *)v11 + 2);
    v18 = *v11;
    v19 = v12;
    v20 = 2;
    sub_224DFAEA8();
    sub_224F68330();
    v13 = (__int128 *)(v3 + v10[7]);
    v14 = *((_QWORD *)v13 + 2);
    v18 = *v13;
    v19 = v14;
    v20 = 3;
    sub_224F68330();
    v15 = (__int128 *)(v3 + v10[8]);
    v16 = *((_QWORD *)v15 + 2);
    v18 = *v15;
    v19 = v16;
    v20 = 4;
    sub_224F68330();
    LOBYTE(v18) = 5;
    type metadata accessor for Range();
    sub_224DDACD4(&qword_2557E1878, (uint64_t (*)(uint64_t))type metadata accessor for Range, (uint64_t)&protocol conformance descriptor for Range);
    sub_224F68330();
    LOBYTE(v18) = 6;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ReferenceRange.hashValue.getter()
{
  _BYTE v1[72];

  sub_224F68510();
  ReferenceRange.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

uint64_t ReferenceRange.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char v47;

  v39 = a2;
  sub_224E63218(0, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v37 - v4;
  sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v40 = (char *)&v37 - v10;
  sub_224F0B008(0, &qword_2557E3508, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v42 = v11;
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v37 - v13;
  v15 = (int *)type metadata accessor for ReferenceRange();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v43 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_224F0AFC4();
  v41 = v14;
  v19 = v44;
  sub_224F6857C();
  if (v19)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  v44 = v12;
  v37 = v5;
  v38 = v17;
  type metadata accessor for Quantity();
  LOBYTE(v45) = 0;
  sub_224DDACD4(&qword_2557E0628, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t)&protocol conformance descriptor for Quantity);
  v21 = (uint64_t)v40;
  v20 = v41;
  sub_224F68294();
  v22 = (uint64_t)v38;
  sub_224F0B064(v21, (uint64_t)v38, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  LOBYTE(v45) = 1;
  sub_224F68294();
  v23 = v15;
  sub_224F0B064((uint64_t)v9, v22 + v15[5], &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v47 = 2;
  sub_224DE60BC();
  sub_224F68294();
  v24 = v46;
  v25 = v22 + v15[6];
  *(_OWORD *)v25 = v45;
  *(_QWORD *)(v25 + 16) = v24;
  v47 = 3;
  sub_224F68294();
  v26 = v46;
  v27 = v22 + v15[7];
  *(_OWORD *)v27 = v45;
  *(_QWORD *)(v27 + 16) = v26;
  v47 = 4;
  sub_224F68294();
  v28 = v44;
  v29 = v46;
  v30 = v22 + v15[8];
  *(_OWORD *)v30 = v45;
  *(_QWORD *)(v30 + 16) = v29;
  type metadata accessor for Range();
  LOBYTE(v45) = 5;
  sub_224DDACD4(&qword_2557E1870, (uint64_t (*)(uint64_t))type metadata accessor for Range, (uint64_t)&protocol conformance descriptor for Range);
  v31 = (uint64_t)v37;
  sub_224F68294();
  sub_224F0B064(v31, v22 + v23[9], &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
  LOBYTE(v45) = 6;
  v32 = sub_224F68264();
  v34 = v33;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v42);
  v35 = (uint64_t *)(v22 + v23[10]);
  *v35 = v32;
  v35[1] = v34;
  sub_224F09280(v22, v39);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  return sub_224DDEAA0(v22, (uint64_t (*)(_QWORD))type metadata accessor for ReferenceRange);
}

uint64_t sub_224F0A3C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReferenceRange.init(from:)(a1, a2);
}

uint64_t sub_224F0A3DC(_QWORD *a1)
{
  return ReferenceRange.encode(to:)(a1);
}

uint64_t sub_224F0A3F0()
{
  _BYTE v1[72];

  sub_224F68510();
  ReferenceRange.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

uint64_t sub_224F0A430()
{
  _BYTE v1[72];

  sub_224F68510();
  ReferenceRange.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

uint64_t _s23HealthRecordsExtraction14ReferenceRangeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  unint64_t *v41;
  unint64_t *v42;
  uint64_t (*v43)();
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  char v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v109 = a2;
  v3 = type metadata accessor for Range();
  v97 = *(_QWORD *)(v3 - 8);
  v98 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v94 = (uint64_t)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F0F1E8(0, &qword_2557E35E0, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
  v96 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v99 = (uint64_t)&v93 - v6;
  sub_224E63218(0, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v95 = (uint64_t)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v101 = (char *)&v93 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v100 = (uint64_t)&v93 - v12;
  v13 = type metadata accessor for Quantity();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v103 = (uint64_t)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224F0F1E8(0, (unint64_t *)&qword_2557E1448, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v17 = v16;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v105 = (uint64_t)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v93 - v20;
  sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v102 = (uint64_t)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v107 = (uint64_t)&v93 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v108 = (uint64_t)&v93 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v93 - v30;
  v32 = MEMORY[0x24BDAC7A8](v29);
  v34 = (char *)&v93 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v36 = (char *)&v93 - v35;
  v106 = a1;
  sub_224E75F34(a1, (uint64_t)&v93 - v35, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_224E75F34(v109, (uint64_t)v34, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v104 = v17;
  v37 = *(int *)(v17 + 48);
  v38 = v13;
  v39 = (uint64_t)&v21[v37];
  sub_224E75F34((uint64_t)v36, (uint64_t)v21, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_224E75F34((uint64_t)v34, v39, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v40((uint64_t)v21, 1, v38) == 1)
  {
    sub_224E7601C((uint64_t)v34, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    sub_224E7601C((uint64_t)v36, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    if (v40(v39, 1, v38) == 1)
    {
      sub_224E7601C((uint64_t)v21, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      goto LABEL_8;
    }
LABEL_6:
    v41 = (unint64_t *)&qword_2557E1448;
    v42 = &qword_2557E0300;
    v43 = type metadata accessor for Quantity;
    v44 = (uint64_t)v21;
LABEL_14:
    sub_224F0F248(v44, v41, v42, (void (*)(uint64_t))v43);
    return 0;
  }
  sub_224E75F34((uint64_t)v21, (uint64_t)v31, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  if (v40(v39, 1, v38) == 1)
  {
    sub_224E7601C((uint64_t)v34, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    sub_224E7601C((uint64_t)v36, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    sub_224DDEAA0((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
    goto LABEL_6;
  }
  v45 = v39;
  v46 = v103;
  sub_224DDEADC(v45, v103, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  v47 = static Quantity.== infix(_:_:)(v31, v46);
  sub_224DDEAA0(v46, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  sub_224E7601C((uint64_t)v34, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_224E7601C((uint64_t)v36, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_224DDEAA0((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  sub_224E7601C((uint64_t)v21, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  if ((v47 & 1) == 0)
    return 0;
LABEL_8:
  v48 = type metadata accessor for ReferenceRange();
  v49 = v108;
  sub_224E75F34(v106 + *(int *)(v48 + 20), v108, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v50 = v109;
  v51 = v107;
  sub_224E75F34(v109 + *(int *)(v48 + 20), v107, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v52 = v105;
  v53 = v105 + *(int *)(v104 + 48);
  sub_224E75F34(v49, v105, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_224E75F34(v51, v53, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  if (v40(v52, 1, v38) == 1)
  {
    sub_224E7601C(v51, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    sub_224E7601C(v49, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    if (v40(v53, 1, v38) == 1)
    {
      sub_224E7601C(v52, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  v54 = v102;
  sub_224E75F34(v52, v102, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  if (v40(v53, 1, v38) == 1)
  {
    sub_224E7601C(v107, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    sub_224E7601C(v108, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    sub_224DDEAA0(v54, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
LABEL_13:
    v41 = (unint64_t *)&qword_2557E1448;
    v42 = &qword_2557E0300;
    v43 = type metadata accessor for Quantity;
    v44 = v52;
    goto LABEL_14;
  }
  v56 = v103;
  sub_224DDEADC(v53, v103, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  v57 = static Quantity.== infix(_:_:)(v54, v56);
  sub_224DDEAA0(v56, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  sub_224E7601C(v107, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_224E7601C(v108, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_224DDEAA0(v54, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  sub_224E7601C(v52, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  if ((v57 & 1) == 0)
    return 0;
LABEL_17:
  v58 = (int *)v48;
  v59 = *(int *)(v48 + 24);
  v60 = v106;
  v62 = *(_QWORD *)(v106 + v59);
  v61 = *(_QWORD *)(v106 + v59 + 8);
  v63 = *(_QWORD *)(v106 + v59 + 16);
  v64 = (uint64_t *)(v50 + v59);
  v66 = *v64;
  v65 = v64[1];
  v67 = v64[2];
  if (v61 == 1)
  {
    v68 = (uint64_t)v101;
    if (v65 != 1)
      goto LABEL_32;
  }
  else
  {
    v113 = v62;
    v114 = v61;
    v115 = v63;
    v68 = (uint64_t)v101;
    if (v65 == 1)
      goto LABEL_31;
    v110 = v66;
    v111 = v65;
    v112 = v67;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v69 = static CodeableConcept.== infix(_:_:)(&v113, &v110);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_224DDB480(v62, v61);
    if ((v69 & 1) == 0)
      return 0;
  }
  v70 = v58[7];
  v62 = *(_QWORD *)(v60 + v70);
  v61 = *(_QWORD *)(v60 + v70 + 8);
  v71 = *(_QWORD *)(v60 + v70 + 16);
  v72 = (uint64_t *)(v50 + v70);
  v66 = *v72;
  v65 = v72[1];
  v73 = v72[2];
  if (v61 == 1)
  {
    if (v65 != 1)
      goto LABEL_32;
  }
  else
  {
    v113 = v62;
    v114 = v61;
    v115 = v71;
    if (v65 == 1)
      goto LABEL_31;
    v110 = v66;
    v111 = v65;
    v112 = v73;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v74 = static CodeableConcept.== infix(_:_:)(&v113, &v110);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_224DDB480(v62, v61);
    if ((v74 & 1) == 0)
      return 0;
  }
  v75 = v58[8];
  v62 = *(_QWORD *)(v60 + v75);
  v61 = *(_QWORD *)(v60 + v75 + 8);
  v76 = *(_QWORD *)(v60 + v75 + 16);
  v77 = (uint64_t *)(v50 + v75);
  v66 = *v77;
  v65 = v77[1];
  v78 = v77[2];
  if (v61 == 1)
  {
    if (v65 == 1)
      goto LABEL_34;
LABEL_32:
    sub_224DDB44C(v66, v65);
    sub_224DDB480(v62, v61);
    sub_224DDB480(v66, v65);
    return 0;
  }
  v113 = v62;
  v114 = v61;
  v115 = v76;
  if (v65 == 1)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_32;
  }
  v110 = v66;
  v111 = v65;
  v112 = v78;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v79 = static CodeableConcept.== infix(_:_:)(&v113, &v110);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_224DDB480(v62, v61);
  if ((v79 & 1) == 0)
    return 0;
LABEL_34:
  v80 = v100;
  sub_224E75F34(v60 + v58[9], v100, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
  sub_224E75F34(v50 + v58[9], v68, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
  v81 = v99;
  v82 = v99 + *(int *)(v96 + 48);
  sub_224E75F34(v80, v99, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
  sub_224E75F34(v68, v82, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
  v83 = v98;
  v84 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
  if (v84(v81, 1, v98) == 1)
  {
    sub_224E7601C(v68, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
    sub_224E7601C(v80, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
    if (v84(v82, 1, v83) == 1)
    {
      sub_224E7601C(v81, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  v85 = v95;
  sub_224E75F34(v81, v95, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
  if (v84(v82, 1, v83) == 1)
  {
    sub_224E7601C(v68, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
    sub_224E7601C(v100, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
    sub_224DDEAA0(v85, (uint64_t (*)(_QWORD))type metadata accessor for Range);
LABEL_39:
    v41 = &qword_2557E35E0;
    v42 = &qword_2557E02F8;
    v43 = type metadata accessor for Range;
    v44 = v81;
    goto LABEL_14;
  }
  v86 = v94;
  sub_224DDEADC(v82, v94, (uint64_t (*)(_QWORD))type metadata accessor for Range);
  v87 = _s23HealthRecordsExtraction5RangeV2eeoiySbAC_ACtFZ_0(v85, v86);
  sub_224DDEAA0(v86, (uint64_t (*)(_QWORD))type metadata accessor for Range);
  sub_224E7601C(v68, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
  sub_224E7601C(v100, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
  sub_224DDEAA0(v85, (uint64_t (*)(_QWORD))type metadata accessor for Range);
  sub_224E7601C(v81, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
  if (!v87)
    return 0;
LABEL_41:
  v88 = v58[10];
  v89 = (_QWORD *)(v60 + v88);
  v90 = *(_QWORD *)(v60 + v88 + 8);
  v91 = (_QWORD *)(v50 + v88);
  v92 = v91[1];
  if (v90)
  {
    if (!v92 || (*v89 != *v91 || v90 != v92) && (sub_224F683CC() & 1) == 0)
      return 0;
  }
  else if (v92)
  {
    return 0;
  }
  return 1;
}

unint64_t sub_224F0AFC4()
{
  unint64_t result;

  result = qword_2557E3500;
  if (!qword_2557E3500)
  {
    result = MEMORY[0x22768ED24](&unk_224F738BC, &type metadata for ReferenceRange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E3500);
  }
  return result;
}

void sub_224F0B008(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224F0AFC4();
    v7 = a3(a1, &type metadata for ReferenceRange.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_224F0B064(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_224E63218(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_224F0B0B0(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E0640, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, (uint64_t)&protocol conformance descriptor for ReferenceRange);
  a1[2] = sub_224DDACD4(&qword_2557E0870, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, (uint64_t)&protocol conformance descriptor for ReferenceRange);
  result = sub_224DDACD4(&qword_2557E3510, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, (uint64_t)&protocol conformance descriptor for ReferenceRange);
  a1[3] = result;
  return result;
}

uint64_t sub_224F0B128()
{
  return sub_224DDACD4(&qword_2557E3518, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, (uint64_t)&protocol conformance descriptor for ReferenceRange);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReferenceRange(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  int *v6;
  uint64_t v7;
  unsigned int (*v8)(_QWORD, _QWORD, _QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unsigned int (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  void (*v73)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int (*v83)(char *, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  void (*v89)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *__dst;
  void *__dsta;
  void *__dstb;
  int *v102;
  int *v103;
  int *v104;
  unsigned int (*v105)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v106)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v107)(_QWORD, _QWORD, _QWORD);
  char *v108;
  uint64_t v109;
  uint64_t v110;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = type metadata accessor for Quantity();
    v110 = *(_QWORD *)(v7 - 8);
    v8 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v110 + 48);
    v109 = v7;
    if (v8(a2, 1, v7))
    {
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v105 = v8;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(uint64_t *)((char *)a1 + 13) = *(uint64_t *)((char *)a2 + 13);
      v11 = a2[4];
      a1[3] = a2[3];
      a1[4] = v11;
      v12 = a2[6];
      a1[5] = a2[5];
      a1[6] = v12;
      v13 = *(int *)(v7 + 28);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = sub_224F675D4();
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v18(v15, 1, v16))
      {
        sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      v7 = v109;
      v20 = *(int *)(v109 + 32);
      v21 = (uint64_t *)((char *)a1 + v20);
      v22 = (uint64_t *)((char *)a2 + v20);
      v23 = v22[1];
      *v21 = *v22;
      v21[1] = v23;
      v24 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v110 + 56);
      swift_bridgeObjectRetain();
      v24(a1, 0, 1, v109);
      v8 = v105;
    }
    v25 = v6[5];
    v26 = (uint64_t *)((char *)a1 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    if (v8((char *)a2 + v25, 1, v7))
    {
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v102 = v6;
      v106 = v8;
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *(_QWORD *)((char *)v26 + 13) = *(_QWORD *)((char *)v27 + 13);
      v29 = v7;
      v30 = v27[4];
      v26[3] = v27[3];
      v26[4] = v30;
      v31 = v27[6];
      v26[5] = v27[5];
      v26[6] = v31;
      v32 = *(int *)(v29 + 28);
      __dst = (char *)v26 + v32;
      v33 = (char *)v27 + v32;
      v34 = sub_224F675D4();
      v35 = *(_QWORD *)(v34 - 8);
      v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v36(v33, 1, v34))
      {
        sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(__dst, v33, v34);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v34);
      }
      v7 = v109;
      v38 = *(int *)(v109 + 32);
      v39 = (_QWORD *)((char *)v26 + v38);
      v40 = (_QWORD *)((char *)v27 + v38);
      v41 = v40[1];
      *v39 = *v40;
      v39[1] = v41;
      v42 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v110 + 56);
      swift_bridgeObjectRetain();
      v42(v26, 0, 1, v109);
      v6 = v102;
      v8 = v106;
    }
    v43 = v6[6];
    v44 = (char *)a1 + v43;
    v45 = (char *)a2 + v43;
    v46 = *((_QWORD *)v45 + 1);
    if (v46 == 1)
    {
      *(_OWORD *)v44 = *(_OWORD *)v45;
      *((_QWORD *)v44 + 2) = *((_QWORD *)v45 + 2);
    }
    else
    {
      *(_QWORD *)v44 = *(_QWORD *)v45;
      *((_QWORD *)v44 + 1) = v46;
      *((_QWORD *)v44 + 2) = *((_QWORD *)v45 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v47 = v6[7];
    v48 = (char *)a1 + v47;
    v49 = (char *)a2 + v47;
    v50 = *((_QWORD *)v49 + 1);
    if (v50 == 1)
    {
      *(_OWORD *)v48 = *(_OWORD *)v49;
      *((_QWORD *)v48 + 2) = *((_QWORD *)v49 + 2);
    }
    else
    {
      *(_QWORD *)v48 = *(_QWORD *)v49;
      *((_QWORD *)v48 + 1) = v50;
      *((_QWORD *)v48 + 2) = *((_QWORD *)v49 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v51 = v6[8];
    v52 = (char *)a1 + v51;
    v53 = (char *)a2 + v51;
    v54 = *((_QWORD *)v53 + 1);
    if (v54 == 1)
    {
      *(_OWORD *)v52 = *(_OWORD *)v53;
      *((_QWORD *)v52 + 2) = *((_QWORD *)v53 + 2);
    }
    else
    {
      *(_QWORD *)v52 = *(_QWORD *)v53;
      *((_QWORD *)v52 + 1) = v54;
      *((_QWORD *)v52 + 2) = *((_QWORD *)v53 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v55 = v6[9];
    v56 = (uint64_t *)((char *)a1 + v55);
    v57 = (uint64_t *)((char *)a2 + v55);
    v58 = type metadata accessor for Range();
    v59 = *(void **)(v58 - 8);
    if ((*((unsigned int (**)(_QWORD *, uint64_t, uint64_t))v59 + 6))(v57, 1, v58))
    {
      sub_224E63218(0, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      if (v8(v57, 1, v7))
      {
        sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        __dsta = v59;
        v103 = v6;
        v107 = v8;
        *(_OWORD *)v56 = *(_OWORD *)v57;
        *(_QWORD *)((char *)v56 + 13) = *(_QWORD *)((char *)v57 + 13);
        v62 = v57[4];
        v56[3] = v57[3];
        v56[4] = v62;
        v63 = v57[6];
        v56[5] = v57[5];
        v56[6] = v63;
        v64 = *(int *)(v7 + 28);
        v97 = (char *)v56 + v64;
        v65 = (char *)v57 + v64;
        v66 = sub_224F675D4();
        v95 = *(_QWORD *)(v66 - 8);
        v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v67(v65, 1, v66))
        {
          sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
          memcpy(v97, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v97, v65, v66);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v97, 0, 1, v66);
        }
        v8 = v107;
        v7 = v109;
        v59 = __dsta;
        v69 = *(int *)(v109 + 32);
        v70 = (_QWORD *)((char *)v56 + v69);
        v71 = (_QWORD *)((char *)v57 + v69);
        v72 = v71[1];
        *v70 = *v71;
        v70[1] = v72;
        v73 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v110 + 56);
        swift_bridgeObjectRetain();
        v73(v56, 0, 1, v109);
        v6 = v103;
      }
      v74 = *(int *)(v58 + 20);
      v75 = (_QWORD *)((char *)v56 + v74);
      v76 = (_QWORD *)((char *)v57 + v74);
      if (v8(v76, 1, v7))
      {
        sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
        memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
      }
      else
      {
        __dstb = v59;
        v104 = v6;
        *(_OWORD *)v75 = *(_OWORD *)v76;
        *(_QWORD *)((char *)v75 + 13) = *(_QWORD *)((char *)v76 + 13);
        v78 = v7;
        v79 = v76[4];
        v75[3] = v76[3];
        v75[4] = v79;
        v80 = v76[6];
        v75[5] = v76[5];
        v75[6] = v80;
        v81 = *(int *)(v78 + 28);
        v98 = (char *)v75 + v81;
        v108 = (char *)v76 + v81;
        v82 = sub_224F675D4();
        v96 = *(_QWORD *)(v82 - 8);
        v83 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v83(v108, 1, v82))
        {
          sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
          memcpy(v98, v108, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v98, v108, v82);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v98, 0, 1, v82);
        }
        v59 = __dstb;
        v85 = *(int *)(v109 + 32);
        v86 = (_QWORD *)((char *)v75 + v85);
        v87 = (_QWORD *)((char *)v76 + v85);
        v88 = v87[1];
        *v86 = *v87;
        v86[1] = v88;
        v89 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v110 + 56);
        swift_bridgeObjectRetain();
        v89(v75, 0, 1, v109);
        v6 = v104;
      }
      (*((void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v59 + 7))(v56, 0, 1, v58);
    }
    v90 = v6[10];
    v91 = (uint64_t *)((char *)a1 + v90);
    v92 = (uint64_t *)((char *)a2 + v90);
    v93 = v92[1];
    *v91 = *v92;
    v91[1] = v93;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ReferenceRange(uint64_t a1, int *a2)
{
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for Quantity();
  v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48);
  if (!v5(a1, 1, v4))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = a1 + *(int *)(v4 + 28);
    v7 = sub_224F675D4();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    swift_bridgeObjectRelease();
  }
  v9 = a1 + a2[5];
  if (!v5(v9, 1, v4))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = v9 + *(int *)(v4 + 28);
    v11 = sub_224F675D4();
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + a2[6] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + a2[7] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + a2[8] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v13 = a1 + a2[9];
  v14 = type metadata accessor for Range();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    if (!v5(v13, 1, v4))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = v13 + *(int *)(v4 + 28);
      v16 = sub_224F675D4();
      v17 = *(_QWORD *)(v16 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
      swift_bridgeObjectRelease();
    }
    v18 = v13 + *(int *)(v14 + 20);
    if (!v5(v18, 1, v4))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = v18 + *(int *)(v4 + 28);
      v20 = sub_224F675D4();
      v21 = *(_QWORD *)(v20 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
      swift_bridgeObjectRelease();
    }
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ReferenceRange(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  unsigned int (*v7)(_QWORD, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  void (*v23)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  void (*v40)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  void (*v71)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  void (*v86)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *__dst;
  void *__dsta;
  void *__dstb;
  int *v99;
  int *v100;
  int *v101;
  void *v102;
  void *v103;
  void *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;

  v6 = type metadata accessor for Quantity();
  v106 = *(_QWORD *)(v6 - 8);
  v7 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v106 + 48);
  v107 = v6;
  if (v7(a2, 1, v6))
  {
    sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v102 = v7;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)((char *)a1 + 13) = *(_QWORD *)((char *)a2 + 13);
    v9 = a2[4];
    a1[3] = a2[3];
    a1[4] = v9;
    v10 = v6;
    v11 = a2[6];
    a1[5] = a2[5];
    a1[6] = v11;
    v12 = *(int *)(v10 + 28);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_224F675D4();
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v17(v14, 1, v15))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v6 = v107;
    v19 = *(int *)(v107 + 32);
    v20 = (_QWORD *)((char *)a1 + v19);
    v21 = (_QWORD *)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v106 + 56);
    swift_bridgeObjectRetain();
    v23(a1, 0, 1, v107);
    v7 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v102;
  }
  v24 = a3[5];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  if (v7((char *)a2 + v24, 1, v6))
  {
    sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v99 = a3;
    v103 = v7;
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *(_QWORD *)((char *)v25 + 13) = *(_QWORD *)((char *)v26 + 13);
    v28 = v26[4];
    v25[3] = v26[3];
    v25[4] = v28;
    v29 = v26[6];
    v25[5] = v26[5];
    v25[6] = v29;
    v30 = *(int *)(v6 + 28);
    __dst = (char *)v25 + v30;
    v31 = (char *)v26 + v30;
    v32 = sub_224F675D4();
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v34(v31, 1, v32))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(__dst, v31, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
    }
    v6 = v107;
    v36 = *(int *)(v107 + 32);
    v37 = (_QWORD *)((char *)v25 + v36);
    v38 = (_QWORD *)((char *)v26 + v36);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    v40 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v106 + 56);
    swift_bridgeObjectRetain();
    v40(v25, 0, 1, v107);
    a3 = v99;
    v7 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v103;
  }
  v41 = a3[6];
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = *((_QWORD *)v43 + 1);
  if (v44 == 1)
  {
    *(_OWORD *)v42 = *(_OWORD *)v43;
    *((_QWORD *)v42 + 2) = *((_QWORD *)v43 + 2);
  }
  else
  {
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    *((_QWORD *)v42 + 2) = *((_QWORD *)v43 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v45 = a3[7];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = *((_QWORD *)v47 + 1);
  if (v48 == 1)
  {
    *(_OWORD *)v46 = *(_OWORD *)v47;
    *((_QWORD *)v46 + 2) = *((_QWORD *)v47 + 2);
  }
  else
  {
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v48;
    *((_QWORD *)v46 + 2) = *((_QWORD *)v47 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v49 = a3[8];
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = *((_QWORD *)v51 + 1);
  if (v52 == 1)
  {
    *(_OWORD *)v50 = *(_OWORD *)v51;
    *((_QWORD *)v50 + 2) = *((_QWORD *)v51 + 2);
  }
  else
  {
    *(_QWORD *)v50 = *(_QWORD *)v51;
    *((_QWORD *)v50 + 1) = v52;
    *((_QWORD *)v50 + 2) = *((_QWORD *)v51 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v53 = a3[9];
  v54 = (_QWORD *)((char *)a1 + v53);
  v55 = (_QWORD *)((char *)a2 + v53);
  v56 = type metadata accessor for Range();
  v57 = *(void **)(v56 - 8);
  if ((*((unsigned int (**)(_QWORD *, uint64_t, uint64_t))v57 + 6))(v55, 1, v56))
  {
    sub_224E63218(0, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    if (v7(v55, 1, v6))
    {
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      __dsta = v57;
      v100 = a3;
      v104 = v7;
      *(_OWORD *)v54 = *(_OWORD *)v55;
      *(_QWORD *)((char *)v54 + 13) = *(_QWORD *)((char *)v55 + 13);
      v60 = v55[4];
      v54[3] = v55[3];
      v54[4] = v60;
      v61 = v55[6];
      v54[5] = v55[5];
      v54[6] = v61;
      v62 = *(int *)(v6 + 28);
      v92 = (char *)v55 + v62;
      v94 = (char *)v54 + v62;
      v63 = sub_224F675D4();
      v64 = *(_QWORD *)(v63 - 8);
      v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v65(v92, 1, v63))
      {
        sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(v94, v92, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v94, v92, v63);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v94, 0, 1, v63);
      }
      v6 = v107;
      v67 = *(int *)(v107 + 32);
      v68 = (_QWORD *)((char *)v54 + v67);
      v69 = (_QWORD *)((char *)v55 + v67);
      v70 = v69[1];
      *v68 = *v69;
      v68[1] = v70;
      v71 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v106 + 56);
      swift_bridgeObjectRetain();
      v71(v54, 0, 1, v107);
      a3 = v100;
      v7 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v104;
      v57 = __dsta;
    }
    v72 = *(int *)(v56 + 20);
    v73 = (_QWORD *)((char *)v54 + v72);
    v74 = (_QWORD *)((char *)v55 + v72);
    if (v7(v74, 1, v6))
    {
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      __dstb = v57;
      v101 = a3;
      *(_OWORD *)v73 = *(_OWORD *)v74;
      *(_QWORD *)((char *)v73 + 13) = *(_QWORD *)((char *)v74 + 13);
      v76 = v74[4];
      v73[3] = v74[3];
      v73[4] = v76;
      v77 = v74[6];
      v73[5] = v74[5];
      v73[6] = v77;
      v78 = *(int *)(v6 + 28);
      v105 = (char *)v73 + v78;
      v95 = (char *)v74 + v78;
      v79 = sub_224F675D4();
      v93 = *(_QWORD *)(v79 - 8);
      v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v80(v95, 1, v79))
      {
        sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(v105, v95, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v105, v95, v79);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v105, 0, 1, v79);
      }
      a3 = v101;
      v82 = *(int *)(v107 + 32);
      v83 = (_QWORD *)((char *)v73 + v82);
      v84 = (_QWORD *)((char *)v74 + v82);
      v85 = v84[1];
      *v83 = *v84;
      v83[1] = v85;
      v86 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v106 + 56);
      swift_bridgeObjectRetain();
      v86(v73, 0, 1, v107);
      v57 = __dstb;
    }
    (*((void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v57 + 7))(v54, 0, 1, v56);
  }
  v87 = a3[10];
  v88 = (_QWORD *)((char *)a1 + v87);
  v89 = (_QWORD *)((char *)a2 + v87);
  v90 = v89[1];
  *v88 = *v89;
  v88[1] = v90;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ReferenceRange(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  int *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void (*v33)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  int v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void (*v65)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(_QWORD *, uint64_t, uint64_t);
  int v97;
  int v98;
  uint64_t v99;
  size_t v100;
  void *v101;
  const void *v102;
  uint64_t v103;
  int v104;
  int v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unsigned int (*v110)(char *, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int (*v118)(char *, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  void (*v123)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int (*v131)(char *, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  void (*v136)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  __int128 v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(char *, uint64_t, uint64_t);
  int v148;
  int v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  void (*v153)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  int v161;
  int v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  void *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int (*v170)(char *, uint64_t, uint64_t);
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (*v179)(void *, uint64_t, uint64_t);
  int v180;
  int v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  void (*v185)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  char *__dst;
  char *__dsta;
  char *__dstb;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  int *v204;
  int *v205;
  int *v206;
  int *v207;
  int *v208;
  int *v209;
  int *v210;
  int *v211;
  uint64_t (*v212)(char *, uint64_t, uint64_t);
  char *v213;

  v6 = type metadata accessor for Quantity();
  v203 = *(_QWORD *)(v6 - 8);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v203 + 48);
  v8 = v7((char *)a1, 1, v6);
  v212 = v7;
  v9 = v7((char *)a2, 1, v6);
  if (!v8)
  {
    if (v9)
    {
      sub_224DDEAA0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
LABEL_6:
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      goto LABEL_18;
    }
    v19 = a3;
    v20 = *(_OWORD *)a2;
    *(_QWORD *)((char *)a1 + 13) = *(_QWORD *)((char *)a2 + 13);
    *(_OWORD *)a1 = v20;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[5] = a2[5];
    a1[6] = a2[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v21 = v6;
    v22 = *(int *)(v6 + 28);
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = sub_224F675D4();
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
    v28 = v27(v23, 1, v25);
    v29 = v27(v24, 1, v25);
    if (v28)
    {
      if (!v29)
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
LABEL_17:
        a3 = v19;
        v6 = v21;
        v35 = *(int *)(v21 + 32);
        v36 = (_QWORD *)((char *)a1 + v35);
        v37 = (_QWORD *)((char *)a2 + v35);
        *v36 = *v37;
        v36[1] = v37[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
    else
    {
      if (!v29)
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 24))(v23, v24, v25);
        goto LABEL_17;
      }
      (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    }
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_17;
  }
  if (v9)
    goto LABEL_6;
  v204 = a3;
  v11 = *(_OWORD *)a2;
  *(_QWORD *)((char *)a1 + 13) = *(_QWORD *)((char *)a2 + 13);
  *(_OWORD *)a1 = v11;
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  v12 = *(int *)(v6 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_224F675D4();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17(v14, 1, v15))
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v30 = *(int *)(v6 + 32);
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  *v31 = *v32;
  v31[1] = v32[1];
  a3 = v204;
  v33 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v203 + 56);
  swift_bridgeObjectRetain();
  v33(a1, 0, 1, v6);
LABEL_18:
  v38 = a3[5];
  v39 = (_QWORD *)((char *)a1 + v38);
  v40 = (_QWORD *)((char *)a2 + v38);
  v41 = v212((char *)a1 + v38, 1, v6);
  v42 = v212((char *)v40, 1, v6);
  if (!v41)
  {
    if (v42)
    {
      sub_224DDEAA0((uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
LABEL_23:
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      goto LABEL_35;
    }
    v206 = a3;
    v199 = a2;
    v52 = *(_OWORD *)v40;
    *(_QWORD *)((char *)v39 + 13) = *(_QWORD *)((char *)v40 + 13);
    *(_OWORD *)v39 = v52;
    v39[3] = v40[3];
    v39[4] = v40[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v39[5] = v40[5];
    v39[6] = v40[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v53 = v6;
    v54 = *(int *)(v6 + 28);
    v55 = (char *)v39 + v54;
    v56 = (char *)v40 + v54;
    v57 = sub_224F675D4();
    v58 = *(_QWORD *)(v57 - 8);
    v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
    v60 = v59(v55, 1, v57);
    v61 = v59(v56, 1, v57);
    if (v60)
    {
      if (!v61)
      {
        (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v56, v57);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
LABEL_34:
        a2 = v199;
        a3 = v206;
        v6 = v53;
        v67 = *(int *)(v53 + 32);
        v68 = (_QWORD *)((char *)v39 + v67);
        v69 = (_QWORD *)((char *)v40 + v67);
        *v68 = *v69;
        v68[1] = v69[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }
    }
    else
    {
      if (!v61)
      {
        (*(void (**)(char *, char *, uint64_t))(v58 + 24))(v55, v56, v57);
        goto LABEL_34;
      }
      (*(void (**)(char *, uint64_t))(v58 + 8))(v55, v57);
    }
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_34;
  }
  if (v42)
    goto LABEL_23;
  v205 = a3;
  v195 = v6;
  v44 = *(_OWORD *)v40;
  *(_QWORD *)((char *)v39 + 13) = *(_QWORD *)((char *)v40 + 13);
  *(_OWORD *)v39 = v44;
  v39[3] = v40[3];
  v39[4] = v40[4];
  v39[5] = v40[5];
  v39[6] = v40[6];
  v45 = *(int *)(v6 + 28);
  v46 = (char *)v39 + v45;
  v47 = (char *)v40 + v45;
  v48 = sub_224F675D4();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v50(v47, 1, v48))
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  }
  v6 = v195;
  v62 = *(int *)(v195 + 32);
  v63 = (_QWORD *)((char *)v39 + v62);
  v64 = (_QWORD *)((char *)v40 + v62);
  *v63 = *v64;
  v63[1] = v64[1];
  a3 = v205;
  v65 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v203 + 56);
  swift_bridgeObjectRetain();
  v65(v39, 0, 1, v195);
LABEL_35:
  v70 = a3[6];
  v71 = (uint64_t)a1 + v70;
  v72 = (char *)a2 + v70;
  v73 = *(_QWORD *)((char *)a1 + v70 + 8);
  v74 = *(_QWORD *)((char *)a2 + v70 + 8);
  if (v73 == 1)
  {
    if (v74 == 1)
    {
      v75 = *(_OWORD *)v72;
      *(_QWORD *)(v71 + 16) = *((_QWORD *)v72 + 2);
      *(_OWORD *)v71 = v75;
    }
    else
    {
      *(_QWORD *)v71 = *(_QWORD *)v72;
      *(_QWORD *)(v71 + 8) = *((_QWORD *)v72 + 1);
      *(_QWORD *)(v71 + 16) = *((_QWORD *)v72 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v74 == 1)
  {
    sub_224E2C9C0(v71);
    v76 = *((_QWORD *)v72 + 2);
    *(_OWORD *)v71 = *(_OWORD *)v72;
    *(_QWORD *)(v71 + 16) = v76;
  }
  else
  {
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *(_QWORD *)(v71 + 8) = *((_QWORD *)v72 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v71 + 16) = *((_QWORD *)v72 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v77 = a3[7];
  v78 = (uint64_t)a1 + v77;
  v79 = (char *)a2 + v77;
  v80 = *(_QWORD *)((char *)a1 + v77 + 8);
  v81 = *(_QWORD *)((char *)a2 + v77 + 8);
  if (v80 == 1)
  {
    if (v81 == 1)
    {
      v82 = *(_OWORD *)v79;
      *(_QWORD *)(v78 + 16) = *((_QWORD *)v79 + 2);
      *(_OWORD *)v78 = v82;
    }
    else
    {
      *(_QWORD *)v78 = *(_QWORD *)v79;
      *(_QWORD *)(v78 + 8) = *((_QWORD *)v79 + 1);
      *(_QWORD *)(v78 + 16) = *((_QWORD *)v79 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v81 == 1)
  {
    sub_224E2C9C0(v78);
    v83 = *((_QWORD *)v79 + 2);
    *(_OWORD *)v78 = *(_OWORD *)v79;
    *(_QWORD *)(v78 + 16) = v83;
  }
  else
  {
    *(_QWORD *)v78 = *(_QWORD *)v79;
    *(_QWORD *)(v78 + 8) = *((_QWORD *)v79 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v78 + 16) = *((_QWORD *)v79 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v84 = a3[8];
  v85 = (uint64_t)a1 + v84;
  v86 = (char *)a2 + v84;
  v87 = *(_QWORD *)((char *)a1 + v84 + 8);
  v88 = *(_QWORD *)((char *)a2 + v84 + 8);
  if (v87 == 1)
  {
    if (v88 == 1)
    {
      v89 = *(_OWORD *)v86;
      *(_QWORD *)(v85 + 16) = *((_QWORD *)v86 + 2);
      *(_OWORD *)v85 = v89;
    }
    else
    {
      *(_QWORD *)v85 = *(_QWORD *)v86;
      *(_QWORD *)(v85 + 8) = *((_QWORD *)v86 + 1);
      *(_QWORD *)(v85 + 16) = *((_QWORD *)v86 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v88 == 1)
  {
    sub_224E2C9C0(v85);
    v90 = *((_QWORD *)v86 + 2);
    *(_OWORD *)v85 = *(_OWORD *)v86;
    *(_QWORD *)(v85 + 16) = v90;
  }
  else
  {
    *(_QWORD *)v85 = *(_QWORD *)v86;
    *(_QWORD *)(v85 + 8) = *((_QWORD *)v86 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v85 + 16) = *((_QWORD *)v86 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v91 = a3[9];
  v92 = (_QWORD *)((char *)a1 + v91);
  v93 = (_QWORD *)((char *)a2 + v91);
  v94 = type metadata accessor for Range();
  v95 = *(_QWORD *)(v94 - 8);
  v96 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v95 + 48);
  v97 = v96(v92, 1, v94);
  v98 = v96(v93, 1, v94);
  if (!v97)
  {
    if (v98)
    {
      sub_224DDEAA0((uint64_t)v92, (uint64_t (*)(_QWORD))type metadata accessor for Range);
LABEL_61:
      sub_224E63218(0, &qword_2557E02F8, (void (*)(uint64_t))type metadata accessor for Range);
      v100 = *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64);
      v101 = v92;
      v102 = v93;
LABEL_62:
      memcpy(v101, v102, v100);
      goto LABEL_84;
    }
    v104 = v212((char *)v92, 1, v6);
    v105 = v212((char *)v93, 1, v6);
    if (v104)
    {
      if (v105)
        goto LABEL_72;
      v208 = a3;
      v113 = *(_OWORD *)v93;
      *(_QWORD *)((char *)v92 + 13) = *(_QWORD *)((char *)v93 + 13);
      *(_OWORD *)v92 = v113;
      v92[3] = v93[3];
      v92[4] = v93[4];
      v92[5] = v93[5];
      v92[6] = v93[6];
      v201 = a2;
      v114 = *(int *)(v6 + 28);
      __dsta = (char *)v92 + v114;
      v115 = (char *)v93 + v114;
      v116 = sub_224F675D4();
      v117 = *(_QWORD *)(v116 - 8);
      v118 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v118(v115, 1, v116))
      {
        sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(__dsta, v115, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v117 + 16))(__dsta, v115, v116);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v117 + 56))(__dsta, 0, 1, v116);
      }
      v150 = *(int *)(v6 + 32);
      v151 = (_QWORD *)((char *)v92 + v150);
      v152 = (_QWORD *)((char *)v93 + v150);
      *v151 = *v152;
      v151[1] = v152[1];
      v153 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v203 + 56);
      swift_bridgeObjectRetain();
      v153(v92, 0, 1, v6);
LABEL_96:
      a2 = v201;
      a3 = v208;
LABEL_97:
      v158 = *(int *)(v94 + 20);
      v159 = (uint64_t)v92 + v158;
      v160 = (_QWORD *)((char *)v93 + v158);
      v161 = v212((char *)v159, 1, v6);
      v162 = v212((char *)v160, 1, v6);
      if (v161)
      {
        if (!v162)
        {
          v210 = a3;
          v198 = v6;
          v164 = *(_OWORD *)v160;
          *(_QWORD *)(v159 + 13) = *(_QWORD *)((char *)v160 + 13);
          *(_OWORD *)v159 = v164;
          *(_QWORD *)(v159 + 24) = v160[3];
          *(_QWORD *)(v159 + 32) = v160[4];
          *(_QWORD *)(v159 + 40) = v160[5];
          *(_QWORD *)(v159 + 48) = v160[6];
          v165 = *(int *)(v6 + 28);
          v166 = (void *)(v159 + v165);
          v167 = (char *)v160 + v165;
          v168 = sub_224F675D4();
          v169 = *(_QWORD *)(v168 - 8);
          v170 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v170(v167, 1, v168))
          {
            sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
            memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, char *, uint64_t))(v169 + 16))(v166, v167, v168);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v166, 0, 1, v168);
          }
          v182 = *(int *)(v198 + 32);
          v183 = (_QWORD *)(v159 + v182);
          v184 = (_QWORD *)((char *)v160 + v182);
          *v183 = *v184;
          v183[1] = v184[1];
          a3 = v210;
          v185 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v203 + 56);
          swift_bridgeObjectRetain();
          v185(v159, 0, 1, v198);
          goto LABEL_84;
        }
LABEL_102:
        sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
        v100 = *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64);
        v101 = (void *)v159;
        v102 = v160;
        goto LABEL_62;
      }
      if (v162)
      {
        sub_224DDEAA0(v159, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
        goto LABEL_102;
      }
      v211 = a3;
      v202 = a2;
      v172 = *(_OWORD *)v160;
      *(_QWORD *)(v159 + 13) = *(_QWORD *)((char *)v160 + 13);
      *(_OWORD *)v159 = v172;
      *(_QWORD *)(v159 + 24) = v160[3];
      *(_QWORD *)(v159 + 32) = v160[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v159 + 40) = v160[5];
      *(_QWORD *)(v159 + 48) = v160[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v173 = v6;
      v174 = *(int *)(v6 + 28);
      v175 = (void *)(v159 + v174);
      v176 = (char *)v160 + v174;
      v177 = sub_224F675D4();
      v178 = *(_QWORD *)(v177 - 8);
      v179 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v178 + 48);
      v180 = v179(v175, 1, v177);
      v181 = v179(v176, 1, v177);
      if (v180)
      {
        if (!v181)
        {
          (*(void (**)(void *, char *, uint64_t))(v178 + 16))(v175, v176, v177);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v178 + 56))(v175, 0, 1, v177);
LABEL_113:
          a2 = v202;
          v187 = *(int *)(v173 + 32);
          v188 = (_QWORD *)(v159 + v187);
          v189 = (_QWORD *)((char *)v160 + v187);
          *v188 = *v189;
          v188[1] = v189[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          a3 = v211;
          goto LABEL_84;
        }
      }
      else
      {
        if (!v181)
        {
          (*(void (**)(void *, char *, uint64_t))(v178 + 24))(v175, v176, v177);
          goto LABEL_113;
        }
        (*(void (**)(void *, uint64_t))(v178 + 8))(v175, v177);
      }
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v186 - 8) + 64));
      goto LABEL_113;
    }
    if (v105)
    {
      sub_224DDEAA0((uint64_t)v92, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
LABEL_72:
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
      goto LABEL_97;
    }
    v208 = a3;
    v201 = a2;
    v141 = *(_OWORD *)v93;
    *(_QWORD *)((char *)v92 + 13) = *(_QWORD *)((char *)v93 + 13);
    *(_OWORD *)v92 = v141;
    v92[3] = v93[3];
    v92[4] = v93[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v92[5] = v93[5];
    v92[6] = v93[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v197 = v6;
    v142 = *(int *)(v6 + 28);
    v143 = (char *)v92 + v142;
    v144 = (char *)v93 + v142;
    v145 = sub_224F675D4();
    v146 = *(_QWORD *)(v145 - 8);
    v147 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v146 + 48);
    v148 = v147(v143, 1, v145);
    v149 = v147(v144, 1, v145);
    if (v148)
    {
      if (!v149)
      {
        (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v143, v144, v145);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
LABEL_95:
        v6 = v197;
        v155 = *(int *)(v197 + 32);
        v156 = (_QWORD *)((char *)v92 + v155);
        v157 = (_QWORD *)((char *)v93 + v155);
        *v156 = *v157;
        v156[1] = v157[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_96;
      }
    }
    else
    {
      if (!v149)
      {
        (*(void (**)(char *, char *, uint64_t))(v146 + 24))(v143, v144, v145);
        goto LABEL_95;
      }
      (*(void (**)(char *, uint64_t))(v146 + 8))(v143, v145);
    }
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
    goto LABEL_95;
  }
  if (v98)
    goto LABEL_61;
  if (v212((char *)v93, 1, v6))
  {
    sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
  }
  else
  {
    v207 = a3;
    v106 = *(_OWORD *)v93;
    *(_QWORD *)((char *)v92 + 13) = *(_QWORD *)((char *)v93 + 13);
    *(_OWORD *)v92 = v106;
    v92[3] = v93[3];
    v92[4] = v93[4];
    v92[5] = v93[5];
    v92[6] = v93[6];
    v200 = a2;
    v107 = *(int *)(v6 + 28);
    __dst = (char *)v92 + v107;
    v108 = (char *)v93 + v107;
    v109 = sub_224F675D4();
    v190 = *(_QWORD *)(v109 - 8);
    v110 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v190 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v110(v108, 1, v109))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(__dst, v108, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v190 + 16))(__dst, v108, v109);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v190 + 56))(__dst, 0, 1, v109);
    }
    v120 = *(int *)(v6 + 32);
    v121 = (_QWORD *)((char *)v92 + v120);
    v122 = (_QWORD *)((char *)v93 + v120);
    *v121 = *v122;
    v121[1] = v122[1];
    v123 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v203 + 56);
    swift_bridgeObjectRetain();
    v123(v92, 0, 1, v6);
    a2 = v200;
    a3 = v207;
  }
  v124 = *(int *)(v94 + 20);
  v125 = (_QWORD *)((char *)v92 + v124);
  v126 = (_QWORD *)((char *)v93 + v124);
  if (v212((char *)v126, 1, v6))
  {
    sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
  }
  else
  {
    v196 = v6;
    v128 = *(_OWORD *)v126;
    *(_QWORD *)((char *)v125 + 13) = *(_QWORD *)((char *)v126 + 13);
    *(_OWORD *)v125 = v128;
    v125[3] = v126[3];
    v125[4] = v126[4];
    v125[5] = v126[5];
    v125[6] = v126[6];
    v129 = *(int *)(v6 + 28);
    v209 = a3;
    v213 = (char *)v125 + v129;
    __dstb = (char *)v126 + v129;
    v130 = sub_224F675D4();
    v191 = *(_QWORD *)(v130 - 8);
    v131 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v191 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v131(__dstb, 1, v130))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v213, __dstb, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v191 + 16))(v213, __dstb, v130);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v191 + 56))(v213, 0, 1, v130);
    }
    v133 = *(int *)(v196 + 32);
    v134 = (_QWORD *)((char *)v125 + v133);
    v135 = (_QWORD *)((char *)v126 + v133);
    *v134 = *v135;
    v134[1] = v135[1];
    a3 = v209;
    v136 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v203 + 56);
    swift_bridgeObjectRetain();
    v136(v125, 0, 1, v196);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
LABEL_84:
  v137 = a3[10];
  v138 = (_QWORD *)((char *)a1 + v137);
  v139 = (_QWORD *)((char *)a2 + v137);
  *v138 = *v139;
  v138[1] = v139[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

